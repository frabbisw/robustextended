{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    return numbers.every(num => Math.abs(num - numbers[numbers.length - 1]) < threshold);\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const open_bracket = /\\(([^()]*)\\)/g\n  const closed_bracket = /\\(([^()]*)\\)/g\n  const paren_string = paren_string.replace(/\\s+/g, \" \")\n  const is_open = paren_string.indexOf(\"(\")\n  const is_closed = paren_string.indexOf(\")\")\n  const opening_paren = paren_string.substring(0, is_open)\n  const closing_paren = paren_string.substring(is_closed + 1)\n  const is_open_paren = opening_paren.indexOf(\"(\")\n  const is_closed_paren = closing_paren.indexOf(\")\")\n  const open_brackets = paren_string.substring(is_open_paren + 1, is_closed_paren)\n  const open_brackets_array = open_brackets.match(open_bracket)\n  const close_brackets = paren_string.substring(is_closed_paren + 1)\n  const close_brackets_array = close_brackets.match(closed_bracket)\n  const open_brackets_arrays = open_brackets_array.map((open_bracket_arr) => open_bracket_arr.split(\",\"))\n  const close_brackets_arrays = close_brackets_array.map((close_bracket_arr) => close_bracket_arr.split(\",\"))\n  return open_brackets_arrays.concat(close_brackets_arrays)\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested\n  Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst isParenGroup = (paren_string) => {\n  const is_open = paren_string.indexOf(\"(\")\n  const is_closed = paren_string.indexOf(\")\")\n  return is_open && is_closed\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested\n  Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsBalanced = (paren_string) => {\n  const open_bracket = /\\(([^()]*)\\)/g\n  const closed_bracket = /\\(([^()]*)\\)/g\n  const paren_string = paren_string.replace(/\\s+/g, \" \")\n  const is_open = paren_string.indexOf(\"(\")\n  const is_closed = paren_string.indexOf(\")\")\n  const opening_paren = paren_string.substring(0, is_open)\n  const closing_paren = paren_string.substring(is_closed + 1)\n  const is_open_paren = opening_paren.indexOf(\"(\")\n  const is_closed_paren = closing_paren.indexOf(\")\")\n  const open_brackets = paren_string.substring(is_open_paren + 1, is_closed_paren)\n  const close_brackets = paren_string.substring(is_closed_paren + 1)\n  const open_brackets_array = open_brackets.match(open_bracket)\n  const close_brackets_array = close_brackets.match(closed_bracket)\n  const open_brackets_arrays = open_brackets_array.map((open_bracket_arr) => open_bracket_arr.split(\",\"))\n  const close_brackets_arrays = close_brackets_array.map((close_bracket_arr) => close_bracket_arr.split(\",\"))\n  const balanced_open_brackets = open_brackets_arrays.concat(close_brackets_arrays)\n  return balanced_open_brackets\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested\n  Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst isParenGroupBalanced = (paren_string) => {\n  const is_open = paren_string.indexOf(\"(\")\n  const is_closed = paren_string.indexOf(\")\")\n  return is_open && is_closed\n}\n\n/*\n  Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested\n  Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsBalanced2 = (paren_string) => {\n  const open_bracket = /\\(([^()]*)\\)/g\n  const closed_bracket = /\\(([^()]*)\\)/g\n  const paren_string = paren_string.replace(/\\s+/g, \" \")\n  const is_open = paren_string.indexOf(\"(\")\n  const is_closed = paren_string.indexOf(\")\")\n  const opening_paren = paren_string.substring(0, is_open)\n  const closing_paren ="}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberStr = number.toString();\n  const lastChar = numberStr[numberStr.length - 1];\n  let decimalNumber = 0;\n  if (lastChar === '.') {\n    const decimalNumberStr = numberStr.slice(0, -1);\n    decimalNumber = parseInt(decimalNumberStr, 10);\n  }\n  let integerNumber = parseInt(numberStr, 10);\n  if (isNaN(integerNumber)) {\n    integerNumber = 0;\n  }\n  return integerNumber + (decimalNumber / 10);\n};\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0;\n  const add = (x, y) => x + y;\n  const subtract = (x, y) => x - y;\n  operations.forEach((operation) => {\n    balance = add(balance, operation);\n    if (balance < 0) {\n      return false;\n    }\n  });\n  return balance < 0;\n};\n\n// const belowZero = (operations) => {\n//   let balance = 0;\n//   const add = (x, y) => x + y;\n//   const subtract = (x, y) => x - y;\n//   operations.forEach((operation) => {\n//     balance = add(balance, operation);\n//     if (balance < 0) {\n//       return false;\n//     }\n//   });\n//   return balance < 0;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = numbers.map(number => Math.abs(number - mean));\n  return mean(mad);\n};\n\n/*\n  #### mean(list)\n\n  Calculates the mean of a list.\n  >>> mean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst mean = (list) => {\n  return list.reduce((sum, number) => sum + number, 0) / list.length;\n};\n\n/*\n  #### median(list)\n\n  Calculates the median of a list.\n  >>> median([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst median = (list) => {\n  return list.reduce((sum, number) => sum + number) / list.length;\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst mode = (list) => {\n  const numberOfOccurrences = {};\n  let maxCount = 0;\n  for (const number of list) {\n    if (numberOfOccurrences[number] === undefined) {\n      numberOfOccurrences[number] = 1;\n    } else {\n      numberOfOccurrences[number]++;\n    }\n    if (numberOfOccurrences[number] > maxCount) {\n      maxCount = numberOfOccurrences[number];\n    }\n  }\n  return list.filter(number => numberOfOccurrences[number] === maxCount)[0];\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sample = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList);\n  return shuffledList.slice(0, size).sort((a, b) => a - b)[0];\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sampleDistribution = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList);\n  return shuffledList.slice(0, size).sort((a, b) => a - b).reduce((sum, number) => sum + number, 0) / size;\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sampleWithoutReplacement = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList, { start: 0, end: list.length, length: size });\n  return shuffledList.sort((a, b) => a - b)[0];\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sampleWithoutReplacementDistribution = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList, { start: 0, end: list.length, length: size });\n  return shuffledList.sort((a, b) => a - b).reduce((sum, number) => sum + number, 0) / size;\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sampleWithoutReplacementAndDistribution = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList, { start: 0, end: list.length, length: size });\n  return shuffledList.sort((a, b) => a - b).reduce((sum, number) => sum + number, 0) / size;\n};\n\n/*\n  #### mode(list)\n\n  Calculates the mode of a list.\n  >>> mode([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst sampleWithoutReplacementAndDistributionDistribution = (list, size) => {\n  const shuffledList = list.slice(0);\n  shuffle(shuffledList, { start: 0, end: list.length, length: size });\n  return shuffledList.sort((a, b) => a - b).reduce((sum, number) => sum + number, 0) / size;\n};\n\nexport default {\n  meanAbsoluteDeviation,\n  median,\n  mode,\n  sample,\n  sampleDistribution,\n  sampleWithoutReplacement,\n  sampleWithoutReplacementDistribution,\n  sampleWithoutReplacementAndDistribution,\n  sampleWithoutReplacementAndDistributionDistribution,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let list = numbers.slice(0);\n  let newList = [];\n\n  while (list.length > 1) {\n    newList.push(list.pop());\n    newList.push(delimeter);\n  }\n\n  return newList.concat(list);\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const num_levels = 0;\n  const levels = [];\n  const level = 0;\n\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      if (level === 0) {\n        num_levels += 1;\n      } else {\n        levels[level - 1] += 1;\n      }\n    } else if (char === ')') {\n      if (level === 0) {\n        num_levels -= 1;\n      } else {\n        levels[level - 1] -= 1;\n      }\n    }\n  });\n\n  return num_levels;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].includes(substring)) {\n      newStrings.push(strings[i])\n    }\n  }\n  return newStrings\n}\n\nexport default filterBySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((sum, number) => {\n    return sum + number;\n  }, 0);\n\n  const product = numbers.reduce((product, number) => {\n    return product * number;\n  }, 1);\n\n  return [sum, product];\n};\n\n/*\n  Find the sum and product of numbers from 1 to 100.\n  For this problem, you can't use a for loop, because you can't pass an array to reduce.\n  */\nconst sumProductByBruteForce = (numbers) => {\n  const sum = 0;\n  const product = 1;\n\n  for (let i = 1; i <= 100; i++) {\n    sum += numbers[i - 1];\n    product *= numbers[i - 1];\n  }\n\n  return [sum, product];\n};\n\nconst numbers = [1, 2, 3, 4];\n\nconsole.log(sumProduct(numbers));\nconsole.log(sumProductByBruteForce(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIdx = 0;\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIdx = i;\n    }\n  }\n\n  let maxRes = [];\n  for (let i = 0; i < maxIdx; i++) {\n    maxRes.push(numbers[i]);\n  }\n  maxRes.push(max);\n  for (let i = maxIdx + 1; i < numbers.length; i++) {\n    maxRes.push(numbers[i]);\n  }\n\n  return maxRes;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const start = findLongestPalindrome(string);\n  return `${string.slice(0, start + 1).reverse().join('')}${string.slice(start + 1).reverse().join('')}`;\n}\n\n/* Find the longest postfix of supplied string that is a palindrome */\nconst findLongestPalindrome = (string) => {\n  const start = 0;\n  let end = 0;\n  while (end < string.length) {\n    if (isPalindrome(string.slice(start, end + 1))) {\n      start = end + 1;\n    }\n    end++;\n  }\n  return start;\n}\n\n/* Find the longest prefix of supplied string that is a palindrome */\nconst findLongestPalindromePrefix = (string) => {\n  const start = 0;\n  let end = 0;\n  while (end < string.length) {\n    if (isPalindrome(string.slice(start, end + 1))) {\n      return start;\n    }\n    start++;\n  }\n  return start;\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome2 = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome in the supplied string */\nconst findLongestPalindrome = (string) => {\n  const start = 0;\n  let end = 0;\n  while (end < string.length) {\n    if (isPalindrome2(string.slice(start, end + 1))) {\n      start = end + 1;\n    }\n    end++;\n  }\n  return start;\n}\n\n/* Find the longest palindrome in the supplied string */\nconst findLongestPalindromePrefix = (string) => {\n  const start = 0;\n  let end = 0;\n  while (end < string.length) {\n    if (isPalindrome2(string.slice(start, end + 1))) {\n      return start;\n    }\n    start++;\n  }\n  return start;\n}\n\nconst main = () => {\n  console.log(findLongestPalindrome('cat'));\n  console.log(findLongestPalindrome('cata'));\n  console.log(findLongestPalindromePrefix('cat'));\n  console.log(findLongestPalindromePrefix('cata'));\n  console.log(findLongestPalindrome('cata'));\n  console.log(findLongestPalindrome('cat'));\n  console.log(findLongestPalindrome('cata'));\n  console.log(findLongestPalindromePrefix('cata'));\n  console.log(findLongestPalindromePrefix('cat'));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const xor = () => {\n    let carry = 0\n    const len = Math.min(a.length, b.length)\n    for (let i = 0; i < len; i++) {\n      if (a[i] === b[i]) {\n        carry = carry ^ 0\n      } else {\n        carry = carry ^ 1\n      }\n    }\n    return carry\n  }\n  return xor()\n}\n\nexport default stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const sorted = sort(strings);\n  if (sorted.length === 0) return 0;\n  let longest = sorted[0];\n  let longestLen = longest.length;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i].length > longestLen) {\n      longest = sorted[i];\n      longestLen = longest.length;\n    }\n  }\n  return longest;\n};\n\n/* Returns a new list that contains the longest strings of each element in the input list.\n  >>> longest([[1, 2, 3], ['a', 'b', 'c']])\n  [['a', 'b', 'c'], [1, 2, 3]]\n  >>> longest([['a', 'b'], ['a', 'b', 'c']])\n  [['a', 'b'], ['a', 'b', 'c']]\n  */\nconst longestFromList = (strings) => {\n  const sorted = sort(strings);\n  if (sorted.length === 0) return [];\n  const longest = sorted[0];\n  const longestLen = longest.length;\n  let longestList = [];\n  for (let i = 0; i < sorted.length; i++) {\n    if (sorted[i].length > longestLen) {\n      longest = sorted[i];\n      longestLen = longest.length;\n    }\n    longestList.push(longest);\n  }\n  return longestList;\n};\n\nexport { longest };\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let x = a\n  let y = b\n\n  while (x!= 0) {\n    const remainder = x % y\n    x = y\n    y = remainder\n  }\n\n  return y\n}\n\n/* Returns the number of factors of a number.\n  >>> factors(12)\n  3\n  >>> factors(25)\n  5\n  >>> factors(2)\n  1\n  >>> factors(9)\n  1\n  >>> factors(15)\n  3\n  */\nconst factors = (number) => {\n  const a = 1\n\n  for (let i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      a++\n    }\n  }\n\n  return a\n}\n\n/* Returns the sum of a number and its multiples.\n  >>> sumOfMultiples(9)\n  27\n  >>> sumOfMultiples(25)\n  625\n  >>> sumOfMultiples(2)\n  2\n  >>> sumOfMultiples(9)\n  27\n  */\nconst sumOfMultiples = (number) => {\n  return number * (number + 1) / 2\n}\n\n/* Returns the sum of squares of a number.\n  >>> sumOfSquares(9)\n  81\n  >>> sumOfSquares(25)\n  625\n  >>> sumOfSquares(2)\n  4\n  >>> sumOfSquares(9)\n  81\n  */\nconst sumOfSquares = (number) => {\n  return number * number\n}\n\n/* Returns the sum of the cubes of a number.\n  >>> sumOfCubes(9)\n  81\n  >>> sumOfCubes(25)\n  625\n  >>> sumOfCubes(2)\n  8\n  >>> sumOfCubes(9)\n  81\n  */\nconst sumOfCubes = (number) => {\n  return number * number * number\n}\n\n/* Returns the number of primes below a number.\n  >>> numberOfPrimes(9)\n  4\n  >>> numberOfPrimes(25)\n  6\n  >>> numberOfPrimes(2)\n  1\n  >>> numberOfPrimes(9)\n  4\n  */\nconst numberOfPrimes = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of composites below a number.\n  >>> numberOfComposites(9)\n  0\n  >>> numberOfComposites(25)\n  2\n  >>> numberOfComposites(2)\n  1\n  >>> numberOfComposites(9)\n  0\n  */\nconst numberOfComposites = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isComposite(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of perfect numbers below a number.\n  >>> numberOfPerfect(9)\n  1\n  >>> numberOfPerfect(25)\n  2\n  >>> numberOfPerfect(2)\n  1\n  >>> numberOfPerfect(9)\n  1\n  */\nconst numberOfPerfect = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isPerfect(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of abundant numbers below a number.\n  >>> numberOfAbundant(9)\n  0\n  >>> numberOfAbundant(25)\n  4\n  >>> numberOfAbundant(2)\n  1\n  >>> numberOfAbundant(9)\n  0\n  */\nconst numberOfAbundant = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isAbundant(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of abundant numbers below a number.\n  >>> numberOfDeficient(9)\n  0\n  >>> numberOfDeficient(25)\n  5\n  >>> numberOfDeficient(2)\n  1\n  >>> numberOfDeficient(9)\n  0\n  */\nconst numberOfDeficient = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isDeficient(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of abundant numbers below a number.\n  >>> numberOfDivisors(9)\n  1\n  >>> numberOfDivisors(25)\n  3\n  >>> numberOfDivisors(2)\n  1\n  >>> numberOfDivisors(9)\n  1\n  */\nconst numberOfDivisors = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isDivisor(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of abundant numbers below a number.\n  >>> numberOfAbundantDivisors(9)\n  1\n  >>> numberOfAbundantDivisors(25)\n  3\n  >>> numberOfAbundantDivisors(2)\n  1\n  >>> numberOfAbundantDivisors(9)\n  1\n  */\nconst numberOfAbundantDivisors = (number) => {\n  const n = number\n  let count = 0\n\n  for (let i = 2; i <= n; i++) {\n    if (isAbundantDivisor(i)) {\n      count++\n    }\n  }\n\n  return count\n}\n\n/* Returns the number of abundant numbers below a number.\n  >>> numberOfDivisors(9)\n  1\n  >>> numberOfDivisors(25)\n  3\n  >>> numberOfDivisors"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').map(\n    (char, index) => (index === 0? char : char.slice(0, index - 1))\n  );\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefix = (string) => {\n  return allPrefixes(string).reduce((max, prefix) => {\n    return max.length > prefix.length? max : prefix;\n  }, '');\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return index === 0? prefix : prefix.slice(0, index - 1);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes2 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes3 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes4 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes5 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes6 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes7 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes8 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes9 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes10 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes11 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes12 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes13 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes14 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes15 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes16 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes17 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes18 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes19 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes20 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes21 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes22 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\nconst longestPrefixes23 = (string) => {\n  return allPrefixes(string).map((prefix, index) => {\n    return prefix.slice(0, index);\n  });\n};\n\n/* Returns the longest prefix of the input string */\n"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ');\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    let cnt = 0;\n    for (let char of string) {\n        cnt += char.length;\n    }\n    return cnt;\n};\n\n/**\n  * Find out the length of a string.\n  * @param {string} string - String to count the length of.\n  * @returns {number} - The length of the string.\n  *\n  * The following code produces the same result as countDistinctCharacters.\n  *\n  * ```\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGH';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Jello';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABC';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Jello';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'XYZ';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGH';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJ';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  * const length = countLength(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n  * const length = countLength(string);\n  * ```\n  */\nconst countLength = (string) => {\n    let length = 0;\n    for (let char of string) {\n        length += char.length;\n    }\n    return length;\n};\n\n/**\n  * Find out how many different words a string consists of.\n  * @param {string} string - String to count the number of words in.\n  * @returns {number} - The number of words in the string.\n  *\n  * The following code produces the same result as countWords.\n  *\n  * ```\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  *\n  * @example\n  * ```javascript\n  * const string = 'Hello World';\n  * const count = countWords(string);\n  * ```\n  */\nconst countWords = (string) => {\n    let count = 0;\n    for (let word of string.split(' ')) {\n        count += 1;\n    }\n    return count;\n};\n\n// Export\nmodule.exports = {\n    countDistinctCharacters,\n    countLength,\n    countWords\n};<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beats = [];\n  const note_pattern = /(o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const stringLength = string.length;\n  const substringLength = substring.length;\n\n  const overlaps = new Map();\n\n  for (let i = 0; i < stringLength; i++) {\n    for (let j = 0; j < substringLength; j++) {\n      if (string[i + j] === substring[j]) {\n        if (!(i + j in overlaps)) {\n          overlaps.set(i + j, 0);\n        }\n        overlaps.set(i + j, overlaps.get(i + j) + 1);\n      }\n    }\n  }\n\n  return overlaps.values().reduce((a, b) => a + b, 0);\n};\n\nconsole.log(`The string '${string}' has ${howManyTimes(string, substring)} times '${substring}'`);\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers.split(' ').sort().join('')\n}\n\n/*\n  # -*- coding: utf-8 -*-\n  # test.py\n  #\n  # Copyright (C) 2017 TheDelia.\n  #\n  # This program is free software: you can redistribute it and/or modify\n  # it under the terms of the GNU General Public License as published by\n  # the Free Software Foundation, either version 3 of the License, or\n  # (at your option) any later version.\n  #\n  # This program is distributed in the hope that it will be useful,\n  # but WITHOUT ANY WARRANTY; without even the implied warranty of\n  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  # GNU General Public License for more details.\n  #\n  # You should have received a copy of the GNU General Public License\n  # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  #\n  # Author: TheDelia\n  # Email: thedelia.dv@gmail.com\n  #\n  # License: GPLv3\n  #\n  # Usage:\n  # >>> import test\n  # >>> test.test_numbers()\n  #\n  # To see the tests:\n  # >>> import doctest\n  # >>> doctest.testmod()\n  #\n  # To see the documentation:\n  # >>> import docopt\n  # >>> docopt.docopt(__doc__, options_first=True)\n  #\n  # Test the sorting of numbers:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings with spaces:\n  # >>> test.sortNumbers('three one five')\n  # 'one three five'\n  #\n  # Test the sorting of strings"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // Sort the list\n  const sorted = sortBy(numbers);\n  // Find the closest element to the middle (1 + 2)\n  const closestToMiddle = sorted[Math.floor(sorted.length / 2)];\n  // Find the next two closest elements (1 + 3)\n  const [closestToNext, nextToNext] = findClosestElements(sorted.slice(1));\n\n  return [closestToMiddle, closestToNext];\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    0.0,\n    0.25,\n    0.5,\n    0.75,\n    1.0,\n  ].map((n) => n - min)\n   .map((n) => max - n)\n   .map((n) => n / max)\n}\n\n/*\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the\n  highest number becomes 0 and the lowest becomes 1.\n  >>> rescaleToZeroToOne([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToZeroToOne = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    0.0,\n    0.25,\n    0.5,\n    0.75,\n    1.0,\n  ].map((n) => n - min)\n   .map((n) => max - n)\n   .map((n) => n / max)\n}\n\n/*\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the\n  highest number becomes 0 and the lowest becomes 1.\n  >>> rescaleToZeroToOne([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToZeroToOneInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    0.0,\n    0.25,\n    0.5,\n    0.75,\n    1.0,\n  ].map((n) => n - min)\n   .map((n) => max - n)\n   .map((n) => n / max)\n}\n\n/*\n  Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the\n  highest number becomes 0 and the lowest becomes 1.\n  >>> rescaleToZeroToOne([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitInverse = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  return [\n    0.0,\n    0.25,\n    0.5,\n    0.75,\n    1.0,\n  ].map((n) => n - min)\n   .map((n) => max - n)\n   .map((n) => n / max)\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitInverse,\n  rescaleToZeroToOne,\n  rescaleToZeroToOneInverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const result = [];\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  }\n\n  return result;\n};\n\n/*\n  Returns the length of the specified list of Python values\n  >>> length([1, 2, 3])\n  3\n  >>> length('')\n  0\n  */\nconst length = (values) => {\n  let result = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    result += 1;\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  specified number of elements dropped from the beginning\n  >>> drop(3, [1, 2, 3])\n  [2, 3]\n  >>> drop(0, [1, 2, 3])\n  [1, 2, 3]\n  >>> drop(-3, [1, 2, 3])\n  [2, 3]\n  */\nconst drop = (amount, values) => {\n  return values.slice(amount);\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  specified number of elements dropped from the end\n  >>> drop(-3, [1, 2, 3])\n  [1, 2]\n  >>> drop(3, [1, 2, 3])\n  [1, 2, 3]\n  >>> drop(0, [1, 2, 3])\n  [1, 2, 3]\n  */\nconst dropRight = (amount, values) => {\n  return values.slice(0, -amount);\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  specified number of elements added to the beginning\n  >>> prepend(3, [1, 2, 3])\n  [3, 1, 2]\n  >>> prepend(0, [1, 2, 3])\n  [1, 2, 3]\n  >>> prepend(-3, [1, 2, 3])\n  [1, 2, 3]\n  */\nconst prepend = (amount, values) => {\n  return [...values,...amount];\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  specified number of elements added to the end\n  >>> append(3, [1, 2, 3])\n  [1, 2, 3, 3]\n  >>> append(0, [1, 2, 3])\n  [1, 2, 3]\n  >>> append(-3, [1, 2, 3])\n  [1, 2, 3]\n  */\nconst append = (amount, values) => {\n  return [...values,...amount];\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range dropped from the beginning\n  >>> range(3, 8)\n  [3, 4, 5, 6]\n  >>> range(3, -3, -2)\n  [3, 2, 1]\n  >>> range(0, -3, -2)\n  [0, -2, -1]\n  */\nconst range = (start, end, step) => {\n  const result = [];\n\n  for (let i = start; i < end; i += step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range dropped from the end\n  >>> range(-3, 3, 2)\n  [-3, -1, 1, 3]\n  >>> range(-3, -3, -2)\n  [-3, -1]\n  >>> range(0, 3, -2)\n  [0, 2]\n  */\nconst rangeRight = (start, end, step) => {\n  const result = [];\n\n  for (let i = start; i > end; i -= step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range added to the beginning\n  >>> range(-3, 3, 2)\n  [-3, -1, 1, 3]\n  >>> range(0, 3, -2)\n  [0, 2]\n  >>> range(0, 3, 2)\n  [0, 2]\n  */\nconst rangeLeft = (start, end, step) => {\n  const result = [];\n\n  for (let i = start; i <= end; i += step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range added to the end\n  >>> range(3, 8, 2)\n  [3, 4, 5, 6, 7]\n  >>> range(3, 3, 2)\n  [3, 3]\n  >>> range(0, 3, 2)\n  [0, 2]\n  */\nconst rangeRight2 = (start, end, step) => {\n  const result = [];\n\n  for (let i = start; i >= end; i -= step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range added to the beginning\n  >>> range(3, 8, 2)\n  [3, 4, 5, 6, 7]\n  >>> range(0, 3, 2)\n  [0, 2]\n  >>> range(0, 3, 2)\n  [0, 2]\n  */\nconst rangeLeft2 = (start, end, step) => {\n  const result = [];\n\n  for (let i = start; i <= end; i += step) {\n    result.push(i);\n  }\n\n  return result;\n};\n\n/*\n  Returns a list containing the elements of the specified list but with the\n  elements in the specified range added to the end\n  >>> range(3, 8, 2)\n  [3, 4,"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string.length === 0) return 0\n\n  let current = 0\n  while (string[current]!== undefined) {\n    current += 1\n  }\n\n  return current\n}\n\n/* Concatenates the given string to the end of the given string\n  >>> 'abc'.concat('def')\n  'abcdef'\n  >>> 'abc'.concat('def', 'ghi')\n  'abcdefghi'\n  >>> 'abc'.concat('def', 'ghi', 'jkl')\n  'abcdefghijkl'\n  */\nconst concat = (string,...args) => {\n  return string + args.reduce((a, b) => a + b, '')\n}\n\n/* Joins the given string with the given separator\n  >>> 'abc'.join('def')\n  'abcdef'\n  >>> 'abc'.join('def', 'ghi')\n  'abcdefghi'\n  >>> 'abc'.join('def', 'ghi', 'jkl')\n  'abcdefghijkl'\n  */\nconst join = (string,...args) => {\n  return args.reduce((a, b) => a + b, '')\n}\n\n/* Returns a string with the given string repeated a given number of times\n  >>> 'abc'.repeat(0)\n  ''\n  >>> 'abc'.repeat(1)\n  'abc'\n  >>> 'abc'.repeat(2)\n  'abcabc'\n  >>> 'abc'.repeat(3)\n  'abcabcabc'\n  */\nconst repeat = (string, times) => {\n  if (times === 0) return ''\n\n  let result = ''\n  while (times > 0) {\n    result += string\n    times -= 1\n  }\n\n  return result\n}\n\n/* Splits the given string into a list of substrings\n  >>> 'abcdefghi'.split()\n  ['abcdefghi']\n  >>> 'abcdefghi'.split('c')\n  ['ab', 'b', 'def', 'gh', 'i']\n  >>> 'abcdefghi'.split('bc')\n  ['a', 'c', 'def', 'gh', 'i']\n  >>> 'abcdefghi'.split('bcd')\n  ['a', 'c', 'de', 'fg', 'hi']\n  */\nconst split = (string, sep) => {\n  return string.split(sep)\n}\n\n/* Returns a string that is the reverse of the given string\n  >>> 'abcdefg'.reverse()\n  'gfedcba'\n  >>> 'abcdefg'.reverse(2)\n  'defgcba'\n  */\nconst reverse = (string, times) => {\n  if (times === 0) return string\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    times -= 1\n  }\n\n  return result\n}\n\n/* Returns the first index of the given substring in the given string\n  >>> 'abcdefg'.index('def')\n  2\n  >>> 'abcdefg'.index('efg')\n  -1\n  */\nconst index = (string, substring) => {\n  let index = string.indexOf(substring)\n  if (index === -1) return -1\n\n  return index\n}\n\n/* Returns a string that is the reverse of the given string\n  >>> 'abcdefg'.upper()\n  'ABCDEFG'\n  >>> 'abcdefg'.upper(2)\n  'EFGabc'\n  */\nconst upper = (string, times) => {\n  if (times === 0) return string\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    times -= 1\n  }\n\n  return result.toUpperCase()\n}\n\n/* Returns the character at the given index in the given string\n  >>> 'abcdefg'.charAt(1)\n  'b'\n  >>> 'abcdefg'.charAt(5)\n  ''\n  >>> 'abcdefg'.charAt(5, 2)\n  'ef'\n  */\nconst charAt = (string, index, times) => {\n  if (times === 0) return ''\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    times -= 1\n  }\n\n  return result.charAt(index)\n}\n\n/* Returns a string that is the reverse of the given string\n  >>> 'abcdefg'.lower()\n  'abcdefg'\n  >>> 'abcdefg'.lower(2)\n  'efgab'\n  */\nconst lower = (string, times) => {\n  if (times === 0) return string\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    times -= 1\n  }\n\n  return result.toLowerCase()\n}\n\n/* Returns a string that is the transpose of the given string\n  >>> 'abcdefg'.transpose()\n  'gfedcba'\n  >>> 'abcdefg'.transpose(2)\n  'gfedcba'\n  */\nconst transpose = (string, times) => {\n  if (times === 0) return string\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    times -= 1\n  }\n\n  return result.toUpperCase()\n}\n\n/* Returns a string that is the right-to-left translation of the given string\n  >>> 'abcdefg'.rotate('c')\n  'edfbgc'\n  >>> 'abcdefg'.rotate('b', 2)\n  'efgab'\n  */\nconst rotate = (string, rot) => {\n  if (rot === 0) return string\n\n  let result = ''\n  while (rot > 0) {\n    result = string + result\n    rot -= 1\n  }\n\n  return result.toUpperCase()\n}\n\n/* Returns a string that is the left-to-right translation of the given string\n  >>> 'abcdefg'.reverse()\n  'defgabc'\n  >>> 'abcdefg'.reverse(2)\n  'bcdefg'\n  */\nconst reverse = (string, times) => {\n  if (times === 0) return string\n\n  let result = ''\n  while (times > 0) {\n    result = string + result\n    "}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.reduce((acc, n) => Math.max(acc, n), 1)\n}\n\n// Exports\nmodule.exports = largestDivisor\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  if (n === 1) {\n    return [n]\n  }\n  const factors = []\n  let factor = 2\n  while (n > 1) {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    }\n    factor = factor + 1\n  }\n  return factors\n}\n\n/* Returns the sum of all integers that are prime factors of a given number. Input number should correspond to the sum of all prime factors.\n  >>> sumOfPrimes(7)\n  7\n  >>> sumOfPrimes(8)\n  8\n  >>> sumOfPrimes(10)\n  10\n  >>> sumOfPrimes(25)\n  23\n  >>> sumOfPrimes(35)\n  28\n  >>> sumOfPrimes(25*5)\n  55\n  */\nconst sumOfPrimes = (n) => {\n  let sum = 1\n  for (let i = 2; i <= n; i++) {\n    if (factorize(i).length === 0) {\n      sum = sum + i\n    }\n  }\n  return sum\n}\n\n/* Returns the sum of all integers that are prime factors of a given number. Input number should correspond to the sum of all prime factors.\n  >>> sumOfPrimes(7)\n  7\n  >>> sumOfPrimes(8)\n  8\n  >>> sumOfPrimes(10)\n  10\n  >>> sumOfPrimes(25)\n  23\n  >>> sumOfPrimes(35)\n  28\n  >>> sumOfPrimes(25*5)\n  55\n  */\nconst sumOfPrimes = (n) => {\n  let sum = 1\n  for (let i = 2; i <= n; i++) {\n    if (factorize(i).length === 0) {\n      sum = sum + i\n    }\n  }\n  return sum\n}\n\n/* Find the smallest prime factor of a given number. Input number should correspond to the prime factor.\n  >>> smallestPrime(4)\n  2\n  >>> smallestPrime(10)\n  2\n  >>> smallestPrime(11)\n  2\n  >>> smallestPrime(15)\n  5\n  >>> smallestPrime(20)\n  5\n  >>> smallestPrime(25)\n  5\n  >>> smallestPrime(35)\n  7\n  >>> smallestPrime(25*5)\n  5\n  */\nconst smallestPrime = (n) => {\n  if (factorize(n).length === 0) {\n    return n\n  }\n  let factor = 2\n  let smallestPrime = n\n  while (n > 1) {\n    while (n % factor === 0) {\n      if (factor > 2) {\n        smallestPrime = factor\n      }\n      n = n / factor\n    }\n    factor = factor + 1\n  }\n  return smallestPrime\n}\n\n/* Find the largest prime factor of a given number. Input number should correspond to the prime factor.\n  >>> largestPrime(4)\n  2\n  >>> largestPrime(10)\n  2\n  >>> largestPrime(11)\n  2\n  >>> largestPrime(15)\n  5\n  >>> largestPrime(20)\n  5\n  >>> largestPrime(25)\n  5\n  >>> largestPrime(35)\n  7\n  >>> largestPrime(25*5)\n  5\n  */\nconst largestPrime = (n) => {\n  if (factorize(n).length === 0) {\n    return n\n  }\n  let factor = 2\n  let largestPrime = n\n  while (n > 1) {\n    while (n % factor === 0) {\n      if (factor > 2) {\n        largestPrime = factor\n      }\n      n = n / factor\n    }\n    factor = factor + 1\n  }\n  return largestPrime\n}\n\n/* Find the sum of all integers that are prime factors of a given number. Input number should correspond to the sum of all prime factors.\n  >>> sumOfPrimes(7)\n  7\n  >>> sumOfPrimes(8)\n  8\n  >>> sumOfPrimes(10)\n  10\n  >>> sumOfPrimes(25)\n  23\n  >>> sumOfPrimes(35)\n  28\n  >>> sumOfPrimes(25*5)\n  55\n  */\nconst sumOfPrimes = (n) => {\n  let sum = 1\n  for (let i = 2; i <= n; i++) {\n    if (factorize(i).length === 0) {\n      sum = sum + i\n    }\n  }\n  return sum\n}\n\nmodule.exports = {\n  factorize,\n  sumOfPrimes,\n  smallestPrime,\n  largestPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let last = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]!== last) {\n      last = numbers[i];\n      numbers.splice(i, 1);\n      i--;\n    }\n  }\n  return numbers;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/[a-z]/g, (c) => c.toUpperCase())\n}\n\n/*\n  Flip upper case letters to lower case letters and lower case letters to upper case letters.\n  >>> flipCase('Hello')\n  'hello'\n  >>> flipCase('HELLO')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n  return string.toUpperCase().replace(/[A-Z]/g, (c) => c.toLowerCase())\n}\n\n/*\n  Split a string into an array of words.\n  >>> split('Hello World!')\n  ['Hello', 'World!']\n  >>> split('Hello World!')\n  ['Hello', 'World!']\n  >>> split('Hello World!')\n  ['Hello', 'World!']\n  >>> split('Hello World!')\n  ['Hello', 'World!']\n  */\nconst split = (string) => {\n  return string.split(' ')\n}\n\n/*\n  Join an array of words into a string.\n  >>> join(['Hello', 'World!'])\n  'Hello World!'\n  >>> join(['Hello', 'World!'])\n  'Hello World!'\n  >>> join(['Hello', 'World!'])\n  'Hello World!'\n  >>> join(['Hello', 'World!'])\n  'Hello World!'\n  */\nconst join = (string) => {\n  return string.join(' ')\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize2 = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize3 = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize4 = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize5 = (string) => {\n  return string.charAt(0).toTitleCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize6 = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize7 = (string) => {\n  return string.charAt(0).toTitleCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize8 = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize9 = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize10 = (string) => {\n  return string.charAt(0).toTitleCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize11 = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize12 = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  >>> capitalize('Hello')\n  'Hello'\n  */\nconst capitalize13 = (string) => {\n  return string.charAt(0).toTitleCase() + string.slice(1)\n}\n\n/*\n  Capitalize the first letter of a string.\n"}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((s, n) => {\n    return s + n;\n  }, '');\n};\n\n// Convert list of objects to a dictionary of string and number values\nconst listToDictionary = (list) => {\n  return list.reduce((dictionary, item) => {\n    dictionary[item.key] = item.value;\n    return dictionary;\n  }, {});\n};\n\n// Returns the length of the longest string in the list\nconst longest = (list) => {\n  const longest = list[0].length;\n  list.forEach((element) => {\n    if (element.length > longest) {\n      longest = element.length;\n    }\n  });\n  return longest;\n};\n\n// Returns a string representing the number in the given radix\nconst toString = (number, radix) => {\n  return number.toString(radix);\n};\n\n// Returns the value of the given number in the given radix\nconst valueOf = (number, radix) => {\n  return number.toString(radix);\n};\n\n// Converts a string to an integer\nconst toInt = (string) => {\n  return parseInt(string);\n};\n\n// Converts a string to a float\nconst toFloat = (string) => {\n  return parseFloat(string);\n};\n\n// Converts a string to a boolean\nconst toBool = (string) => {\n  return parseBool(string);\n};\n\n// Converts a string to a list\nconst toList = (string) => {\n  return JSON.parse(string);\n};\n\n// Returns the index of the largest element in the given list\nconst maxIndex = (list) => {\n  const max = list[0];\n  let index = 0;\n  list.forEach((element) => {\n    if (element > max) {\n      max = element;\n      index = list.indexOf(element);\n    }\n  });\n  return index;\n};\n\n// Returns the index of the smallest element in the given list\nconst minIndex = (list) => {\n  const min = list[0];\n  let index = 0;\n  list.forEach((element) => {\n    if (element < min) {\n      min = element;\n      index = list.indexOf(element);\n    }\n  });\n  return index;\n};\n\n// Returns a list of all elements in the list which are greater than the given number\nconst greaterThan = (list, number) => {\n  const greater = [];\n  list.forEach((element) => {\n    if (element > number) {\n      greater.push(element);\n    }\n  });\n  return greater;\n};\n\n// Returns a list of all elements in the list which are less than the given number\nconst lessThan = (list, number) => {\n  const less = [];\n  list.forEach((element) => {\n    if (element < number) {\n      less.push(element);\n    }\n  });\n  return less;\n};\n\n// Returns a list of all elements in the list which are between the given numbers\nconst between = (list, min, max) => {\n  const between = [];\n  list.forEach((element) => {\n    if (element > min && element < max) {\n      between.push(element);\n    }\n  });\n  return between;\n};\n\n// Returns a list of all elements in the list which are not between the given numbers\nconst notBetween = (list, min, max) => {\n  const notBetween = [];\n  list.forEach((element) => {\n    if (element < min || element > max) {\n      notBetween.push(element);\n    }\n  });\n  return notBetween;\n};\n\n// Returns a list of all elements in the list which are in the given range\nconst inRange = (list, min, max) => {\n  const inRange = [];\n  list.forEach((element) => {\n    if (element >= min && element <= max) {\n      inRange.push(element);\n    }\n  });\n  return inRange;\n};\n\n// Returns a list of all elements in the list which are not in the given range\nconst notInRange = (list, min, max) => {\n  const notInRange = [];\n  list.forEach((element) => {\n    if (element < min || element > max) {\n      notInRange.push(element);\n    }\n  });\n  return notInRange;\n};\n\n// Returns a list of all elements in the list which are less than or equal to the given number\nconst lessThanEqualTo = (list, number) => {\n  const lessEqual = [];\n  list.forEach((element) => {\n    if (element <= number) {\n      lessEqual.push(element);\n    }\n  });\n  return lessEqual;\n};\n\n// Returns a list of all elements in the list which are greater than or equal to the given number\nconst greaterThanEqualTo = (list, number) => {\n  const greaterEqual = [];\n  list.forEach((element) => {\n    if (element >= number) {\n      greaterEqual.push(element);\n    }\n  });\n  return greaterEqual;\n};\n\n// Returns a list of all elements in the list which are less than or equal to the given number\nconst lessThanOrEqualTo = (list, number) => {\n  const lessEqual = [];\n  list.forEach((element) => {\n    if (element < number) {\n      lessEqual.push(element);\n    }\n  });\n  return lessEqual;\n};\n\n// Returns a list of all elements in the list which are greater than or equal to the given number\nconst greaterThanOrEqualTo = (list, number) => {\n  const greaterEqual = [];\n  list.forEach((element) => {\n    if (element > number) {\n      greaterEqual.push(element);\n    }\n  });\n  return greaterEqual;\n};\n\n// Returns a list of all elements in the list which are not in the given list\nconst notInList = (list, other) => {\n  const notInList = [];\n  list.forEach((element)"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const matches = strings.filter(item => item.startsWith(prefix));\n  return matches;\n};\n\n/**\n  * Sort an input list of strings in a specific order.\n  *\n  * @param {Array} strings The input list of strings.\n  * @param {String} order The order by which to sort the list.\n  * @returns {Array} The sorted list of strings.\n  */\nconst sortByOrder = (strings, order) => {\n  const orderStrings = order.split('');\n  const sorted = strings.sort(\n    (a, b) => orderStrings.indexOf(a) - orderStrings.indexOf(b)\n  );\n  return sorted;\n};\n\nexport default {\n  filterByPrefix,\n  sortByOrder,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let output = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      output.push(l[i]);\n    }\n  }\n  return output;\n};\n\n/*\n  >>> getPositive([5, -3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, 7])\n  [2, 5, 6, 7]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10])\n  [2, 5, 6, 7, 8, 9, 10]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n  >>> getPositive([-1, 2, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  >>> getPositive([-1, 2, -4, 5,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  else if (n === 2) return true;\n  else if (n % 2 === 0) return false;\n  else {\n    const limit = Math.floor(Math.sqrt(n));\n    for (let i = 3; i <= limit; i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n};\n\n/*Return the number of primes less than n.\n  >>> primes(1)\n  0\n  >>> primes(2)\n  1\n  >>> primes(3)\n  2\n  >>> primes(4)\n  3\n  >>> primes(5)\n  3\n  >>> primes(7)\n  4\n  >>> primes(100)\n  25\n  >>> primes(10)\n  2\n  >>> primes(1000)\n  999\n  >>> primes(10000)\n  999\n  >>> primes(100000)\n  99900\n  >>> primes(1000000)\n  999999\n  >>> primes(100000000)\n  99999999\n  >>> primes(1000000000)\n  999999999\n  */\nconst primes = (n) => {\n  const a = [];\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    else if (n === 2) return true;\n    else if (n % 2 === 0) return false;\n    else {\n      const limit = Math.floor(Math.sqrt(n));\n      for (let i = 3; i <= limit; i += 2) {\n        if (n % i === 0) return false;\n      }\n      return true;\n    }\n  };\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) a.push(i);\n  }\n  return a;\n};\n\n// BEGIN EXERCISE\n\n/*\n * Write a function sumPrimes that takes an integer n and returns the sum of all the prime numbers less than n.\n */\nconst sumPrimes = (n) => {\n  const primeNumbers = primes(n);\n  const sum = 0;\n  for (let i = 0; i < primeNumbers.length; i++) {\n    sum += primeNumbers[i];\n  }\n  return sum;\n};\n\n// END EXERCISE\n\n/*\n * Write a function sumPrimes2 that takes an integer n and returns the sum of all the prime numbers less than n.\n *\n * Note that this implementation is not efficient since it will only find primes up to n and not all of them.\n */\nconst sumPrimes2 = (n) => {\n  const primeNumbers = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) primeNumbers.push(i);\n  }\n  const sum = 0;\n  for (let i = 0; i < primeNumbers.length; i++) {\n    sum += primeNumbers[i];\n  }\n  return sum;\n};\n\n/*\n * Write a function isPrime that takes an integer n and returns true if n is prime and false otherwise.\n */\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  else if (n === 2) return true;\n  else if (n % 2 === 0) return false;\n  else {\n    const limit = Math.floor(Math.sqrt(n));\n    for (let i = 3; i <= limit; i += 2) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  }\n};\n\n/*\n * Write a function isPrime2 that takes an integer n and returns true if n is prime and false otherwise.\n *\n * Note that this implementation is not efficient since it will only find primes up to n and not all of them.\n */\nconst isPrime2 = (n) => {\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    else if (n === 2) return true;\n    else if (n % 2 === 0) return false;\n    else {\n      const limit = Math.floor(Math.sqrt(n));\n      for (let i = 3; i <= limit; i += 2) {\n        if (n % i === 0) return false;\n      }\n      return true;\n    }\n  };\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) return true;\n  }\n  return false;\n};\n\n/*\n * Write a function isPrime3 that takes an integer n and returns true if n is prime and false otherwise.\n *\n * Note that this implementation is not efficient since it will only find primes up to n and not all of them.\n */\nconst isPrime3 = (n) => {\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    else if (n === 2) return true;\n    else if (n % 2 === 0) return false;\n    else {\n      const limit = Math.floor(Math.sqrt(n));\n      for (let i = 3; i <= limit; i += 2) {\n        if (n % i === 0) return false;\n      }\n      return true;\n    }\n  };\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) return true;\n  }\n  return false;\n};\n\n/*\n * Write a function isPrime4 that takes an integer n and returns true if n is prime and false otherwise.\n *\n * Note that this implementation is not efficient since it will only find primes up to n and not all of them.\n */\nconst isPrime4 = (n) => {\n  const isPrime = (n) => {\n    if (n <= 1) return false;\n    else if (n === 2) return true;\n    else if (n % 2 === 0) return false;\n    else {\n      const limit = Math.floor(Math.sqrt("}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const max = Math.max(xs);\n  const min = Math.min(xs);\n  if (max === min) return 0;\n  const cnt = xs.length;\n  if (cnt === 2) return (min - max) / 2;\n  if (cnt % 2 === 0) {\n    return (min - max) / 2;\n  } else {\n    const half = (min - max) / 2;\n    const halfMin = (min - half) / 2;\n    const halfMax = (half - max) / 2;\n    return Math.min(halfMin, halfMax);\n  }\n}\n\n/*\n  Finds roots of polynomial xs^n - 1.\n  xs are coefficients of a polynomial.\n  Returns an array containing xs of length n + 1.\n  Evaluates xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  Evaluates poly(x) - 1.\n  Evaluates polynomial to find zero.\n  Evaluates polynomial to find roots.\n  returns array containing xs of length n + 1.\n  >>> round(findRoots([1, 2]), 2) # f(x) = 1 + 2x\n  [-0.5, 1.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([2, 2]), 2) # f(x) = 2 + 2x\n  [0.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([0]), 2) # f(x) = 0\n  [0.0]\n  >>> round(findRoots([0, 0]), 2) # f(x) = 0\n  [0.0]\n  >>> round(findRoots([-1, 1]), 2) # f(x) = 1\n  [-1.0, 1.0]\n  >>> round(findRoots([-1, 1, 0, 1]), 2) # f(x) = 1 + x\n  [0.0, 1.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findRoots([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    const k = l[i]\n    if (i % 3 === 0) {\n      sorted.push(k)\n    } else {\n      sorted.push(k)\n      const j = Math.min(i + 1, l.length - 1)\n      const t = l[j]\n      sorted.push(t)\n    }\n  }\n  return sorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    const element = l[i]\n    if (result.indexOf(element) < 0) {\n      result.push(element)\n    }\n  }\n  return result\n}\n\n/*\n  Returns the number of elements in the list\n  >>> length([1, 2, 3, 4, 5])\n  5\n  >>> length(())\n  0\n  >>> length([])\n  0\n  >>> length([1, 2, 3])\n  3\n  >>> length([1, 2, 3, 4, 5, 6])\n  6\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  9\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> length(['a', 'b', 'c'])\n  3\n  >>> length({'a': 1, 'b': 2, 'c': 3})\n  3\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  11\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> length(['a', 'b', 'c'])\n  3\n  >>> length({'a': 1, 'b': 2, 'c': 3})\n  3\n  >>> length(1)\n  Traceback (most recent call last):\n ...\n  TypeError: Can't convert object to int\n  >>> length('1')\n  Traceback (most recent call last):\n ...\n  TypeError: Can't convert object to int\n  >>> length(True)\n  Traceback (most recent call last):\n ...\n  TypeError: Can't convert object to int\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  21\n  >>> length(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21'])\n  21\n  >>> length(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22'])\n  22\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  23\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  26\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  30\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  31\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  33\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  34\n  >>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const len = l.length\n  let max = l[0]\n  for (let i = 1; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  const len = l.length\n  let min = l[0]\n  for (let i = 1; i < len; i++) {\n    if (l[i] < min) {\n      min = l[i]\n    }\n  }\n  return min\n}\n\n/*Rreturns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  40\n  */\nconst sum = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*Rreturns the average of all elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.5\n  */\nconst average = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum / len\n}\n\n/*Rreturns the median of all elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len % 2 === 0) {\n    const median = (l[len / 2] + l[len / 2 - 1]) / 2\n  } else {\n    const median = l[len / 2]\n  }\n  return median\n}\n\n/*Rreturns the mean of all elements in the list.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3.5\n  */\nconst mean = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += l[i]\n  }\n  return sum / len\n}\n\n/*Rreturns the mode of all elements in the list.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst mode = (l) => {\n  const len = l.length\n  let max = 0\n  let index = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      index = i\n    }\n  }\n  return l[index]\n}\n\n/*Rreturns the mode of all elements in the list, in sorted order.\n  >>> modeSorted([1, 2, 3])\n  2\n  >>> modeSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst modeSorted = (l) => {\n  const len = l.length\n  let max = 0\n  let index = 0\n  for (let i = 0; i < len; i++) {\n    if (l[i] > max) {\n      max = l[i]\n      index = i\n    }\n  }\n  l.sort()\n  return l[index]\n}\n\n/*Rreturns the standard deviation of all elements in the list.\n  >>> stdDev([1, 2, 3])\n  1\n  >>> stdDev([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2.39553528476377\n  */\nconst stdDev = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(l[i] - mean(l), 2)\n  }\n  return Math.sqrt(sum / len)\n}\n\n/*Rreturns the standard error of all elements in the list.\n  >>> stdErr([1, 2, 3])\n  0\n  >>> stdErr([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0.5\n  */\nconst stdErr = (l) => {\n  const len = l.length\n  return stdDev(l) / len\n}\n\n/*Rreturns the sum of the squares of all elements in the list.\n  >>> sumOfSquares([1, 2, 3])\n  9\n  >>> sumOfSquares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  49\n  */\nconst sumOfSquares = (l) => {\n  const len = l.length\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(l[i], 2)\n  }\n  return sum\n}\n\n/*Rreturns the sum of all values in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum(["}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let div = [];\n  while(n){\n    div = div.concat(n % 3 === 0? [7] : []);\n    n = Math.floor(n / 3);\n  }\n  return div.join('');\n};\n\n/*\n  >>> fizzBuzz(8)\n  8\n  >>> fizzBuzz(10)\n  0\n  >>> fizzBuzz(12)\n  2\n  >>> fizzBuzz(13)\n  3\n  >>> fizzBuzz(15)\n  4\n  >>> fizzBuzz(16)\n  5\n  >>> fizzBuzz(18)\n  6\n  >>> fizzBuzz(19)\n  7\n  >>> fizzBuzz(20)\n  8\n  */\nconst fizzBuzz = (n) => {\n  return (n % 5 === 0? [5] : []).concat(n % 3 === 0? [3] : []);\n};\n\nmodule.exports = {\n  fizzBuzz: fizzBuzz\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let index = 0;\n  return l.sort((a, b) => (b % 2) - (a % 2));\n};\n\nexport default sortEven;<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decodes string that has been encoded with encode_cyclic function.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decodes string that has been encoded with encode_cyclic function.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(0, 1) + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  Encodes string s using cyclic algorithm with base 64 encoding.\n  */\nconst encodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+/g, '=')\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+/g, '=')\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+/g, '=')\n}\n\n/*\n  Encodes string s using cyclic algorithm with base 64 encoding.\n  */\nconst encodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('').replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+/g, '=')\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return fib(n) | 0;\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const count = l.reduce((acc, val) => {\n        const num = Number(val);\n        if (num === 0) {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n    return count === 3;\n};\n\n// Test\n\nconst testTriplesSumToZero = () => {\n    const arr = [1, 3, 5, 0, -2, 1, 3, 7, 9, 7, 3, 4, 5, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1, 2, 3, 7, 9, 3, 9, 3, 2, 4, 5, -2, 1,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return (n * (n + 1)) / 2;\n};\n\nconst numberOfCollisions = carRaceCollision(2);\n\nconsole.log(numberOfCollisions);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  newList.push(...l);\n  return newList;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const diffs = [];\n  const set = new Set();\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === 0) {\n      if (set.has(l[i + 1])) {\n        diffs.push([l[i], l[i + 1]]);\n      }\n      set.add(l[i + 1]);\n    }\n  }\n  return diffs.length > 1;\n};\n\nexport default pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const xStr = x.toString();\n  let result = '';\n  for (let i = 0; i < xStr.length; i++) {\n    result += String.fromCharCode(xStr.charCodeAt(i) + base - 2);\n  }\n  return result;\n};\n\nmodule.exports = changeBase;\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2)\n}\n\n/*GThe area of a circle is half the length of its perimeter.\n  >>> circleArea(3)\n  4.0\n  */\nconst circleArea = (radius) => {\n  return (Math.PI * radius * radius) / 2\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe area of a circle is half the length of its perimeter.\n  >>> circleArea(3)\n  4.0\n  */\nconst circleArea = (radius) => {\n  return (Math.PI * radius * radius) / 2\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe area of a triangle is half the length of its sides.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n\n/*GThe volume of a sphere is the area of its sphere plus the volume of its\n  shell.\n  >>> volume(2, 5)\n  25.0\n  */\nconst volume = (d, h) => {\n  return triangleArea(d, h) + circleArea(d / 2)\n}\n"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib4(n - 1) + fib4(n - 2);\n};\n\n/*TThe fib5 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib5 (0) - > 0 fib5 (1) - > 0 fib5 (2) - > 1 fib5 (3) - > 2 fib5 (4) - > 3 fib5 (n-1) - > fib5 (n-2) + fib5 (n-3) + fib5 (n-4) + fib5 (n-5).\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  10\n  >>> fib5(7)\n  16\n  >>> fib5(8)\n  22\n  */\nconst fib5 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4);\n};\n\nconst fib = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib(n - 1) + fib(n - 2);\n};\n\nconst fib2 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib2(n - 1) + fib2(n - 2);\n};\n\n/*TThe fibonacci sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fibonacci (0) - > 0 fibonacci (1) - > 1 fibonacci (2) - > 3 fibonacci (n) - > fibonacci (n+1) + fibonacci (n-1) + fibonacci (n-2)\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  11\n  >>> fibonacci(7)\n  18\n  >>> fibonacci(8)\n  25\n  */\nconst fibonacci = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci2 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci2(n - 1) + fibonacci2(n - 2);\n};\n\nconst fibonacci3 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci3(n - 1) + fibonacci3(n - 2);\n};\n\nconst fibonacci4 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci4(n - 1) + fibonacci4(n - 2);\n};\n\nconst fibonacci5 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci5(n - 1) + fibonacci5(n - 2);\n};\n\nconst fibonacci6 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci6(n - 1) + fibonacci6(n - 2);\n};\n\nconst fibonacci7 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci7(n - 1) + fibonacci7(n - 2);\n};\n\nconst fibonacci8 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci8(n - 1) + fibonacci8(n - 2);\n};\n\nconst fibonacci9 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci9(n - 1) + fibonacci9(n - 2);\n};\n\nconst fibonacci10 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci10(n - 1) + fibonacci10(n - 2);\n};\n\nconst fibonacci11 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci11(n - 1) + fibonacci11(n - 2);\n};\n\nconst fibonacci12 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci12(n - 1) + fibonacci12(n - 2);\n};\n\nconst fibonacci13 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci13(n - 1) + fibonacci13(n - 2);\n};\n\nconst fibonacci14 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci14(n - 1) + fibonacci14(n - 2);\n};\n\nconst fibonacci15 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci15(n - 1) + fibonacci15(n - 2);\n};\n\nconst fibonacci16 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci16(n - 1) + fibonacci16(n - 2);\n};\n\nconst fibonacci17 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fibonacci17(n - 1) + fibonacci17(n - 2);\n};\n\nconst fibonacci18 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  "}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const list = Array.isArray(l)? l : [l];\n  const listLength = list.length;\n  if (listLength === 0) {\n    return NaN;\n  }\n  if (listLength === 1) {\n    return list[0];\n  }\n  if (listLength % 2 === 0) {\n    return (list[listLength / 2 - 1] + list[listLength / 2]) / 2;\n  }\n  return list[listLength / 2];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return reversed === text;\n};\n\n// Tests if the given number is a palindrome\nconst isPalindromeNumber = (text) => {\n    let reversed = parseInt(text.toString()).toString(10).split('').reverse().join('');\n    return reversed === text;\n};\n\n// Tests if the given string is a palindrome\nconst isPalindromeString = (text) => {\n    return text === text.split('').reverse().join('');\n};\n\nmodule.exports = {\n    isPalindrome: isPalindrome,\n    isPalindromeNumber: isPalindromeNumber,\n    isPalindromeString: isPalindromeString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let t = n;\n  while (t >= p) {\n    t = t - p;\n  }\n  return t;\n};\n\n/**\n  * Calculate the modular inverse of a number\n  *\n  * @param {Number} a - number\n  * @param {Number} p - modulus\n  * @returns {Number} Modular inverse of a mod p\n  * @example\n  * >>> modinv(3, 5)\n  * 3\n  * >>> modinv(1101, 101)\n  * 2\n  * >>> modinv(0, 101)\n  * 1\n  * >>> modinv(3, 11)\n  * 8\n  * >>> modinv(100, 101)\n  * 1\n  *\n  */\nconst modinv = (a, p) => {\n  return (a * (p - 1)) % p;\n};\n\nmodule.exports = {\n  modp,\n  modinv\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) + 97)).join(\"\");\n}\n\nconst decode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) - 97)).join(\"\");\n}\n\n/*\n  encodes string using shift.\n  */\nconst encodeShiftWithShift = (s) => {\n  const encoded = encodeShift(s);\n  const decoded = decodeShift(encoded);\n  return decoded;\n}\n\n/*\n  encodes string using shift with a custom alphabet.\n  */\nconst encodeShiftWithCustomAlphabet = (s, alphabet) => {\n  const encoded = encodeShift(s);\n  const decoded = decodeShift(encoded, alphabet);\n  return decoded;\n}\n\n/*\n  decodes string using shift.\n  */\nconst decodeShiftWithShift = (s) => {\n  const encoded = decodeShift(s);\n  const decoded = decodeShift(encoded);\n  return decoded;\n}\n\n/*\n  decodes string using shift with a custom alphabet.\n  */\nconst decodeShiftWithCustomAlphabet = (s, alphabet) => {\n  const encoded = decodeShift(s, alphabet);\n  const decoded = decodeShift(encoded, alphabet);\n  return decoded;\n}\n\n/*\n  decodes string using shift with a custom alphabet and alphabet shifts.\n  */\nconst decodeShiftWithCustomAlphabetAndShift = (s, alphabet, shift) => {\n  const encoded = decodeShift(s, alphabet, shift);\n  const decoded = decodeShift(encoded, alphabet, shift);\n  return decoded;\n}\n\n/*\n  encodes string using shift with a custom alphabet and alphabet shifts.\n  */\nconst encodeShiftWithCustomAlphabetAndShift = (s, alphabet, shift) => {\n  const encoded = encodeShift(s, alphabet, shift);\n  const decoded = decodeShift(encoded, alphabet, shift);\n  return decoded;\n}\n\n/*\n  Tests encodeShiftWithShift function.\n  */\nconst testEncodeShiftWithShift = (s) => {\n  const decoded = encodeShiftWithShift(s);\n  return decoded;\n}\n\n/*\n  Tests encodeShiftWithCustomAlphabet function.\n  */\nconst testEncodeShiftWithCustomAlphabet = (s, alphabet) => {\n  const decoded = encodeShiftWithCustomAlphabet(s, alphabet);\n  return decoded;\n}\n\n/*\n  Tests decodeShiftWithShift function.\n  */\nconst testDecodeShiftWithShift = (s) => {\n  const decoded = decodeShiftWithShift(s);\n  return decoded;\n}\n\n/*\n  Tests decodeShiftWithCustomAlphabet function.\n  */\nconst testDecodeShiftWithCustomAlphabet = (s, alphabet) => {\n  const decoded = decodeShiftWithCustomAlphabet(s, alphabet);\n  return decoded;\n}\n\n/*\n  Tests decodeShiftWithCustomAlphabetAndShift function.\n  */\nconst testDecodeShiftWithCustomAlphabetAndShift = (s, alphabet, shift) => {\n  const decoded = decodeShiftWithCustomAlphabetAndShift(s, alphabet, shift);\n  return decoded;\n}\n\n/*\n  Tests encodeShiftWithCustomAlphabetAndShift function.\n  */\nconst testEncodeShiftWithCustomAlphabetAndShift = (s, alphabet, shift) => {\n  const encoded = encodeShiftWithCustomAlphabetAndShift(s, alphabet, shift);\n  return encoded;\n}\n\nconst testShift = (s) => {\n  const decoded = decodeShiftWithShift(s);\n  return decoded;\n}\n\nconst testAlphabet = (s, alphabet) => {\n  const decoded = decodeShiftWithCustomAlphabet(s, alphabet);\n  return decoded;\n}\n\nconst testShiftAndAlphabet = (s, alphabet, shift) => {\n  const decoded = decodeShiftWithCustomAlphabetAndShift(s, alphabet, shift);\n  return decoded;\n}\n\nconst testShiftAndAlphabetAndShift = (s, alphabet, shift) => {\n  const encoded = encodeShiftWithCustomAlphabetAndShift(s, alphabet, shift);\n  return encoded;\n}\n\nconst testShiftAndAlphabetShift = (s, alphabet, shift) => {\n  const encoded = encodeShiftWithCustomAlphabetAndShift(s, alphabet, shift);\n  return encoded;\n}\n\n/*\n  Tests encode function.\n  */\nconst testEncode = (s) => {\n  const encoded = encode(s);\n  return encoded;\n}\n\n/*\n  Tests decode function.\n  */\nconst testDecode = (s) => {\n  const decoded = decode(s);\n  return decoded;\n}\n\nconst testShiftAlphabet = (s, alphabet) => {\n  const decoded = testShift(s);\n  return decoded;\n}\n\nconst testAlphabetAlphabet = (s, alphabet) => {\n  const decoded = testAlphabet(s, alphabet);\n  return decoded;\n}\n\nconst testShiftAndAlphabet = (s, alphabet, shift) => {\n  const decoded = testShiftAndAlphabet(s, alphabet);\n  return decoded;\n}\n\nconst testShiftAndAlphabetShift = (s, alphabet, shift) => {\n  const decoded = testShiftAndAlphabetShift(s, alphabet, shift);\n  return decoded;\n}\n\nconst testShiftAndAlphabetShiftShift = (s, alphabet, shift) => {\n  const decoded = testShiftAndAlphabetShiftShift(s, alphabet,"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/(^|[^a-z])[aeiou]/g, '$1');\n};\n\nconst removeVowels2 = (text) => {\n  return text.replace(/[aeiou]/g, '');\n};\n\nconst removeVowels3 = (text) => {\n  return text.replace(/[aeiou]/g, '').toUpperCase();\n};\n\nconst removeVowels4 = (text) => {\n  return text.replace(/[aeiou]/g, '').toLowerCase();\n};\n\n/*\n  removeDiacritics is a function that takes strings and returns strings without diacritics.\n  >>> removeDiacritics('')\n  ''\n  >>> removeDiacritics(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeDiacritics('abcdef')\n  'bcdf'\n  >>> removeDiacritics('aaBAA')\n  'B'\n  >>> removeDiacritics('zbcd')\n  'zbcd'\n  */\nconst removeDiacritics = (text) => {\n  const remove = [\n    'æ', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'à', 'á', 'â', 'ã', 'ä', 'å',\n    'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ',\n    'Ò', 'Ó', 'Ô', 'Õ', 'Ö', '÷', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à',\n    'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î',\n    'ï', 'ð', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', '÷', 'ø', 'ù', 'ú', 'û', 'ü',\n    'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ',\n    'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę',\n    'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ć',\n    'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ',\n    'ĵ', 'Ķ', 'ķ', 'ĸ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł',\n    'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ŋ', 'ŋ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő',\n    'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş',\n    'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ',\n    'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź',\n    'Ż', 'ż', 'Ž', 'ž', 'ſ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ',\n    'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė',\n    'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ',\n    'ĥ', 'Ħ', 'ć', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı',\n    'Ĳ', 'ĳ', 'Ĵ', 'ᵃ', 'ᵄ', 'ᵅ', 'ᵇ', 'ᵈ', 'ᵉ', 'ᵊ', 'ᵋ', 'ᵌ', 'ᵍ', 'ᵎ',\n    'ᵏ', 'ᵐ', 'ᵑ', 'ᵒ', 'ᵓ', 'ᵔ', 'ᵕ', 'ᵖ', 'ᵗ', 'ᵘ', 'ᵙ', 'ᵚ', 'ᵛ', 'ᵝ',\n    'ᵞ', 'ᵟ', '"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const arr = l.slice()\n  const n = arr.length\n  for (let i = 0; i < n; i++) {\n    if (arr[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Return the number of 1s in the binary representation of number n.\n  >>> numberOf1s(1)\n  1\n  >>> numberOf1s(2)\n  1\n  >>> numberOf1s(3)\n  1\n  >>> numberOf1s(4)\n  2\n  >>> numberOf1s(100)\n  10\n  >>> numberOf1s(123)\n  11\n  >>> numberOf1s(1000)\n  10\n  >>> numberOf1s(9999)\n  9\n  >>> numberOf1s(10000)\n  10\n  >>> numberOf1s(12345)\n  12\n  */\nconst numberOf1s = n => {\n  let count = 0\n  while (n > 0) {\n    count += (n & 1)\n    n = n >> 1\n  }\n  return count\n}\n\n/*Return the number of 1s in the binary representation of the sum of n and m.\n  >>> numberOf1s(1, 1)\n  1\n  >>> numberOf1s(1, 2)\n  1\n  >>> numberOf1s(2, 1)\n  1\n  >>> numberOf1s(1, 3)\n  2\n  >>> numberOf1s(3, 1)\n  1\n  >>> numberOf1s(1, 4)\n  2\n  >>> numberOf1s(4, 1)\n  2\n  >>> numberOf1s(2, 4)\n  2\n  >>> numberOf1s(4, 2)\n  2\n  >>> numberOf1s(4, 3)\n  2\n  >>> numberOf1s(3, 4)\n  2\n  >>> numberOf1s(4, 5)\n  3\n  >>> numberOf1s(5, 4)\n  3\n  >>> numberOf1s(5, 5)\n  1\n  */\nconst numberOf1s = (n, m) => {\n  return numberOf1s(n + m)\n}\n\nexport { belowThreshold, numberOf1s }\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  return x + y\n}\n\n/*Subtract two numbers x and y\n  >>> subtract(5, 3)\n  2\n  >>> subtract(3, 5)\n  -2\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  return x - y\n}\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  return x * y\n}\n\n/*Divide two numbers x and y\n  >>> divide(5, 3)\n  2\n  >>> divide(3, 5)\n  0.6666666666666667\n  >>> divide(5, 7)\n  0.4\n  */\nconst divide = (x, y) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  return x / y\n}\n\n/*Calculate the hypotenuse of a right angled triangle\n  >>> hypot(2, 3)\n  3.74165738677\n  >>> hypot(4, 9)\n  9.0\n  >>> hypot(10, 50)\n  49.0\n  */\nconst hypot = (x, y) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  return Math.sqrt(x * x + y * y)\n}\n\n/*Calculate the area of a triangle\n  >>> triangle(2, 3, 4)\n  12\n  >>> triangle(5, 6, 7)\n  60\n  >>> triangle(3, 4, 5)\n  15\n  */\nconst triangle = (x, y, z) => {\n  if(isNaN(x)) return 0\n  if(isNaN(y)) return 0\n  if(isNaN(z)) return 0\n  return (x * (y + z) / 2)\n}\n\n/*Calculate the area of a triangle\n  >>> triangle(2, 3, 4)\n  12\n  >>> triangle(5, 6, 7)\n  60\n  >>> triangle(3, 4, 5)\n  15\n  */\nconst area = (a, b, c) => {\n  if(isNaN(a)) return 0\n  if(isNaN(b)) return 0\n  if(isNaN(c)) return 0\n  return (a * b) / 2\n}\n\n/*Calculate the area of a triangle\n  >>> triangle(2, 3, 4)\n  12\n  >>> triangle(5, 6, 7)\n  60\n  >>> triangle(3, 4, 5)\n  15\n  */\nconst perimeter = (a, b, c) => {\n  if(isNaN(a)) return 0\n  if(isNaN(b)) return 0\n  if(isNaN(c)) return 0\n  return (a + b + c)\n}\n\n/*Calculate the area of a triangle\n  >>> triangle(2, 3, 4)\n  12\n  >>> triangle(5, 6, 7)\n  60\n  >>> triangle(3, 4, 5)\n  15\n  */\nconst perimeter = (a, b, c) => {\n  if(isNaN(a)) return 0\n  if(isNaN(b)) return 0\n  if(isNaN(c)) return 0\n  return (a + b + c)\n}\n\nmodule.exports = {\n  add, subtract, multiply, divide, hypot, area, perimeter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length === 0) {\n    return s1.length === 0;\n  } else if (s1.length === 0) {\n    return false;\n  } else if (s0.length === 1) {\n    return s1.length === 1 && s0[0] === s1[0];\n  }\n\n  const firstChars = s0.slice(0, 1);\n  const secondChars = s1.slice(0, 1);\n\n  const areSame = firstChars === secondChars;\n  return areSame;\n};\n\n/*\n  Check if two strings are anagrams.\n  >>> isAnagram('abcd', 'ddddddd')\n  true\n  >>> isAnagram('abcd', 'dddddddab')\n  false\n  >>> isAnagram('abcd', 'dddddddabce')\n  false\n  >>> isAnagram('abcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabc')\n  true\n  >>> isAnagram('abcd', 'dddddddabce')\n  false\n  >>> isAnagram('abcdefgh', 'defgh')\n  true\n  >>> isAnagram('abcdefgh', 'defgh')\n  true\n  >>> isAnagram('abcdefgh', 'defgh')\n  true\n  >>> isAnagram('abcdefgh', 'defghi')\n  false\n  >>> isAnagram('abcdefghi', 'defgh')\n  false\n  >>> isAnagram('abcdefghi', 'defghi')\n  true\n  >>> isAnagram('abcdefghi', 'defghij')\n  false\n  >>> isAnagram('abcdefghij', 'defghi')\n  false\n  >>> isAnagram('abcdefghij', 'defghij')\n  true\n  >>> isAnagram('abcdefghij', 'defghi')\n  false\n  >>> isAnagram('abcdefghij', 'defghijk')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghijk')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghijk')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghijk')\n  true\n  >>> isAnagram('abcdefghijk', 'defghijk')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  false\n  >>> isAnagram('abcdefghijk', 'defghij')\n  true\n  >>> isAnagram('abcdefgh"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  if (n === 1 || n === 2) return n;\n  while (n-- > 2) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(10));\n\n/*\n  RThe Fibonacci number is the tenth.\n  >>> fib(10)\n  55\n  >>> fib(10)\n  55\n  >>> fib(20)\n  6765\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 1) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(10));\n\n/*\n  RThe Fibonacci number is the 17th.\n  >>> fib(17)\n  47900\n  >>> fib(20)\n  6855025\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 2) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(17));\n\n/*\n  RThe Fibonacci number is the 18th.\n  >>> fib(18)\n  5040\n  >>> fib(20)\n  75251905\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 3) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(18));\n\n/*\n  RThe Fibonacci number is the 19th.\n  >>> fib(19)\n  5584\n  >>> fib(20)\n  82226495\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 4) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(19));\n\n/*\n  RThe Fibonacci number is the 20th.\n  >>> fib(20)\n  8589934592\n  >>> fib(30)\n  1311820807502080095684801308715061\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 6) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(20));\n\n/*\n  RThe Fibonacci number is the 30th.\n  >>> fib(30)\n  1525143372670541127965494926011905859841064\n  >>> fib(40)\n  23362685707640783078269911159898481559385824\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 8) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(30));\n\n/*\n  RThe Fibonacci number is the 40th.\n  >>> fib(40)\n  52883718053068449957286679077885801563025496300\n  >>> fib(50)\n  94624060184647907259526588857894201373796454415\n  >>> fib(60)\n  157949669221286173530981611337975562705585520\n  >>> fib(70)\n  2367998039648736386764795895368850690425015625\n  */\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  while (n-- > 10) {\n    a = b;\n    b = a + b;\n  }\n  return b;\n};\n\nconsole.log(fib(40));\n\n/*\n  RThe Fibonacci number is the 50th.\n  >>> fib(50)\n  990848682223167160524142870355916096620353496\n  >>> fib(60)\n  1258581859286810989733456750771875751458558748\n  >>> fib(70)\n  1659499607900896745382695159710202694708973987\n  >>> fib(80)\n  2079232039147559226965876020276914431699180848\n  >>> fib(90)\n  25269980578942794929071612239810646747886519096\n  >>> fib(100)\n  3033367825571166286695690741946680861876290510\n  >>> fib(110)\n  3778373055741204657826270967283764183784676645\n  >>> fib(120)\n  47290450743559890981755133867406769108829085775\n  >>> fib(130)\n  578345713378320822079578465166914984635159766\n  >>> fib(140)\n  703949792822277438352488255901079379906254058\n  >>> fib(150)\n  844806767795526362748608764380159392230202798\n  >>> fib(160)\n  996422682894253909590624642590252901079379906\n  >>> fib(170)\n  125624163887381223884474186740266479578769085\n  >>> fib(180)\n  1580808837256868648812485848951588160869779511\n  >>> fib(190)"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let bracketsCount = brackets.length;\n  for (let i = 0; i < bracketsCount; i++) {\n    let current = brackets[i];\n    let next = brackets[i + 1];\n\n    if (current === next) {\n      continue;\n    }\n\n    if (next === \"<\") {\n      if (current === \">\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \">\") {\n      if (current === \"<\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \"<<\") {\n      if (current === \">\") {\n        bracketsCount--;\n      } else if (current === \"<\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \">>\") {\n      if (current === \"<\") {\n        bracketsCount--;\n      } else if (current === \">\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \">>\") {\n      if (current === \"<\") {\n        bracketsCount--;\n      } else if (current === \">\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \"<\") {\n      if (current === \">\") {\n        bracketsCount--;\n      }\n      i++;\n    } else if (next === \">\") {\n      if (current === \"<\") {\n        bracketsCount--;\n      }\n      i++;\n    }\n  }\n\n  return bracketsCount === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    const left = l[i - 1];\n    const right = l[i];\n    if (left >= right) {\n      result.push(true);\n    } else {\n      result.push(false);\n    }\n  }\n  return result;\n};\n\nexport { monotonic };\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const sorted1 = sort(l1);\n    const sorted2 = sort(l2);\n    let pos = 0;\n    let j = 0;\n    let n = 0;\n    let common = [];\n    while (pos < sorted1.length) {\n        const n1 = sorted1[pos];\n        const n2 = sorted2[j];\n        if (n1 === n2) {\n            common.push(n1);\n            j++;\n            n++;\n            pos++;\n        } else if (n1 < n2) {\n            pos++;\n        } else {\n            j++;\n        }\n    }\n    return common;\n};\n\n/*\n  * Given a list of numbers, this function returns the number of elements in the list\n  * that are not common to the other list\n  *\n  * Example:\n  *\n  *    >>> count_difference([1, 4, 3, 34, 653, 2, 5, 7, 1, 5, 9, 653, 121])\n  *    4\n  *\n  */\nconst count_difference = (l1, l2) => {\n    const common = common(l1, l2);\n    return l1.length - common.length;\n};\n\nexport default {\n    common,\n    count_difference\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let prime = 2\n  while (prime * prime <= n) {\n    if (n % prime === 0) {\n      return prime\n    }\n    prime++\n  }\n  return n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n <= 1) return 1;\n  let total = 1;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n};\n\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\" && brackets[i + 1] === \")\") {\n            count++;\n        } else if (brackets[i] === \"(\" && brackets[i + 1] === \")\") {\n            count--;\n        }\n    }\n    return count === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    if (xs.length === 1) {\n        return [0, xs[0]];\n    } else if (xs.length === 2) {\n        return [xs[0], xs[1]];\n    } else {\n        return [xs[0] * (xs.length - 1), xs[1] * (xs.length - 1) + xs[2] * (xs.length - 2)];\n    }\n};\n\nexport default derivative;<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = 1;\n  let fib2 = 0;\n  let i = 1;\n  while (i < n) {\n    fib = fib2 + fib;\n    fib2 = fib;\n    i++;\n  }\n  return fib;\n};\n\nconsole.log(fibfib(4));\n\n// FibFibFibFib\n/*\n  The FibFibFibFib number sequence is a sequence similar to the FibFib number sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3) + fibfib (n-4). Please write a function to efficiently calculate the nth element of the FibFibFibFib number sequence.\n  >>> fibfibfibfib(1)\n  0\n  >>> fibfibfibfib(5)\n  4\n  >>> fibfibfibfib(8)\n  36\n  */\nconst fibfibfib = (n) => {\n  let fib = 1;\n  let fib2 = 0;\n  let fib3 = 0;\n  let i = 1;\n  while (i < n) {\n    fib = fib2 + fib3 + fib;\n    fib2 = fib;\n    fib3 = fib2;\n    i++;\n  }\n  return fib;\n};\n\nconsole.log(fibfibfib(4));\n\n// FibFibFibFibFib\n/*\n  The FibFibFibFibFib number sequence is a sequence similar to the FibFibFib number sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3) + fibfib (n-4) + fibfib (n-5) + fibfib (n-6) + fibfib (n-7) + fibfib (n-8) + fibfib (n-9) + fibfib (n-10) + fibfib (n-11) + fibfib (n-12) + fibfib (n-13) + fibfib (n-14) + fibfib (n-15). Please write a function to efficiently calculate the nth element of the FibFibFibFibFib number sequence.\n  >>> fibfibffibfib(1)\n  0\n  >>> fibfibffibfib(5)\n  4\n  >>> fibfibffibfib(8)\n  64\n  */\nconst fibfibffibfib = (n) => {\n  let fib = 1;\n  let fib2 = 0;\n  let fib3 = 0;\n  let fib4 = 0;\n  let fib5 = 0;\n  let fib6 = 0;\n  let fib7 = 0;\n  let fib8 = 0;\n  let i = 1;\n  while (i < n) {\n    fib = fib2 + fib3 + fib4 + fib5 + fib6 + fib7 + fib8 + fib;\n    fib2 = fib;\n    fib3 = fib2;\n    fib4 = fib3;\n    fib5 = fib4;\n    fib6 = fib5;\n    fib7 = fib6;\n    fib8 = fib7;\n    i++;\n  }\n  return fib;\n};\n\nconsole.log(fibfibffibfib(4));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let n = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      n++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    n++\n  }\n  return n\n}\n\n/*\n  Given a string, return a string made of the same characters, but in a random order.\n  Example:\n  >>> shuffle(\"abcde\")\n  \"badea\"\n  */\nconst shuffle = (s) => {\n  let temp = []\n  for (let i = 0; i < s.length; i++) {\n    temp.push(s[i])\n  }\n  for (let i = 0; i < temp.length; i++) {\n    let t = temp[i]\n    let j = Math.floor(Math.random() * (temp.length - i))\n    temp[i] = temp[j]\n    temp[j] = t\n  }\n  return temp.join('')\n}\n\n/*\n  Given a string, return a string with all the vowels removed.\n  Example:\n  >>> removeVowels(\"aAeEiIoU\")\n  \"aaeiio\"\n  */\nconst removeVowels = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!== 'a' && s[i]!== 'e' && s[i]!== 'i' && s[i]!== 'o' && s[i]!== 'u' && s[i]!== 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where each vowel is replaced by the number of the vowel.\n  Example:\n  >>> replaceVowels(\"aaeiio\")\n  \"5\"\n  */\nconst replaceVowels = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result += s[i] + (s[i] === 'y'? 1 : 2)\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where each consonant is replaced by the number of the consonant.\n  Example:\n  >>> replaceConsonants(\"aaeiio\")\n  \"7\"\n  */\nconst replaceConsonants = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result += (s[i] === 'y'? 1 : 2)\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where each consonant is replaced by the vowel that replaces it.\n  Example:\n  >>> replaceVowels(\"aeiio\")\n  \"aeeiio\"\n  */\nconst replaceVowels2 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where each consonant is replaced by the consonant that replaces it.\n  Example:\n  >>> replaceConsonants(\"aeiio\")\n  \"aeiio\"\n  */\nconst replaceConsonants2 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where all vowels are replaced by a consonant.\n  Example:\n  >>> replaceVowels(\"aeiio\")\n  \"aeio\"\n  */\nconst replaceVowels3 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      result += 'c'\n    } else {\n      result += s[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a string, return a string where all consonants are replaced by a vowel.\n  Example:\n  >>> replaceVowels(\"aeiio\")\n  \"aeiio\"\n  */\nconst replaceConsonants3 = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i]"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const zeros = Array(x.length + shift).fill(0).join(\"0\");\n  return zeros.slice(x.length - shift, x.length).concat(x, zeros.slice(0, x.length - shift));\n};\n\nconst circularShift1 = (x, shift) => {\n  const zeros = Array(x.length + shift).fill(0).join(\"0\");\n  return zeros.slice(x.length - shift, x.length).concat(x, zeros.slice(0, x.length - shift));\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift1(12, 1));\nconsole.log(circularShift1(12, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for(let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 65;\n  }\n  return sum;\n};\n\n/*\n  Task Writes a function that returns the number of times a letter appears in a string.\n  Examples:\n      letterCount(\"\") => 0\n      letterCount(\"Hello\") => 5\n      letterCount(\"Hello there\") => 5\n      letterCount(\"Hello there again\") => 4\n      letterCount(\"Hello there again\") => 4\n      letterCount(\"Hello there, that's nice\") => 4\n      letterCount(\"Hello there, that's nice\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n  */\nconst letterCount = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === s.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Task Writes a function that returns the number of times a letter appears in a string.\n  Examples:\n      letterCount(\"\") => 0\n      letterCount(\"Hello\") => 5\n      letterCount(\"Hello there\") => 5\n      letterCount(\"Hello there again\") => 4\n      letterCount(\"Hello there, that's nice\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n      letterCount(\"Hello there, that's nice, thank you\") => 4\n  */\nconst upperLetterCount = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++) {\n    if(s.charAt(i) === s.charAt(i).toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  let count = 0;\n  let letterCount = letterCount(\"Hello there, that's nice, thank you\");\n  let upperLetterCount = upperLetterCount(\"Hello there, that's nice, thank you\");\n  count = letterCount(\"Hello there, that's nice, thank you\")\n  console.log(count);\n  count = upperLetterCount(\"Hello there, that's nice, thank you\")\n  console.log(count);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let [apple, orange, mango] = s.split(\" \")\n  apple = Number(apple)\n  orange = Number(orange)\n  mango = Number(mango)\n  return (n - apple - orange)\n}\n\nconsole.log(fruitDistribution(\"5 apples and 6 oranges\", 19))\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3))\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr.sort((a, b) => a - b);\n  const [ firstZero, secondZero ] = arr.filter((a) => a === 0);\n\n  if (secondZero) {\n    return [secondZero, arr.indexOf(secondZero)];\n  }\n  return [];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let maxIndex = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  if (maxIndex == 0) {\n    return -1\n  }\n  let left = 1\n  let right = maxIndex\n  while (left < right) {\n    let mid = (left + right) / 2\n    if (lst[mid] <= max) {\n      left = mid + 1\n    } else {\n      right = mid\n    }\n  }\n  return lst[right]\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length\n  if (len < 2) return lst\n  let sorted = lst.slice()\n  for (let i = 0; i < len - 1; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (sorted[i] > sorted[j]) {\n        sorted[i] = sorted[i] ^ sorted[j]\n        sorted[j] = sorted[i] ^ sorted[j]\n        sorted[i] = sorted[i] ^ sorted[j]\n      }\n    }\n  }\n  return sorted\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let a1 = a, b1 = b, c1 = c;\n  if (b < c) {\n    a1 = b;\n    b1 = c;\n    c1 = a;\n  }\n  let a2 = a1 + b1;\n  if (a2 < c1) {\n    return -1;\n  }\n  let area = Math.abs((a1 * b1) / 2);\n  return round(area, 2);\n};\n\n/*\n  Given a list of integers. Return the number of positive integers that sum to the total.\n  Example:\n  numberOfPositiveIntegers(3, 4, 6) == 1\n  numberOfPositiveIntegers(1, 1, 1) == 2\n  numberOfPositiveIntegers(1, 3, 3) == 1\n  numberOfPositiveIntegers(1, 3, 6) == 0\n  numberOfPositiveIntegers(1, 1, 3) == 2\n  numberOfPositiveIntegers(1, 4, 4) == 1\n  numberOfPositiveIntegers(3, 4, 6) == 1\n  */\nconst numberOfPositiveIntegers = (...numbers) => {\n  let total = 0;\n  for (let n of numbers) {\n    total += n;\n  }\n  let positive = [];\n  for (let n of numbers) {\n    if (n > 0) {\n      positive.push(n);\n    }\n  }\n  if (positive.length === 0) {\n    return 0;\n  }\n  if (positive.length === 1) {\n    return 1;\n  }\n  return positive.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Given a string, return the number of times that the string appears in the given string.\n  Example:\n  stringCount('A', 'AAACG') == 2\n  stringCount('A', 'AAAC') == 3\n  stringCount('A', 'AAACACG') == 3\n  stringCount('A', 'AAACAG') == 0\n  stringCount('A', 'AAACACG') == 2\n  */\nconst stringCount = (str, subStr) => {\n  let counts = {};\n  for (let i = 0; i < str.length; i++) {\n    if (counts[str[i]] === undefined) {\n      counts[str[i]] = 0;\n    }\n    counts[str[i]]++;\n  }\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (counts[str[i]] >= subStr.length) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a list of strings. Return the number of times that the given string appears in the list.\n  Example:\n  stringCounts('A', ['A', 'AAACG', 'AAACACG']) == 2\n  stringCounts('A', ['A', 'AAACG', 'AAACACG', 'AAACACG']) == 2\n  stringCounts('A', ['A', 'AAACG', 'AAACACG', 'AAACACG', 'AAACACG']) == 2\n  stringCounts('A', ['A', 'AAACG', 'AAACACG', 'AAACACG', 'AAACACG', 'AAACACG']) == 2\n  */\nconst stringCounts = (str, strings) => {\n  let counts = {};\n  for (let s of strings) {\n    for (let i = 0; i < s.length; i++) {\n      if (counts[s[i]] === undefined) {\n        counts[s[i]] = 0;\n      }\n      counts[s[i]]++;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (counts[str[i]] >= 1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a list of strings. Return the number of strings that contain the given string.\n  Example:\n  stringContains('A', ['A', 'AAACG', 'AAACACG']) == 2\n  stringContains('A', ['A', 'AAACG', 'AAACACG', 'AAACACG']) == 0\n  stringContains('A', ['A', 'AAACG', 'AAACACG', 'AAACACG', 'AAACACG']) == 1\n  stringContains('A', ['A', 'AAACG', 'AAACACG', 'AAACACG', 'AAACACG', 'AAACACG']) == 0\n  */\nconst stringContains = (str, strings) => {\n  let contains = 0;\n  for (let s of strings) {\n    if (str.indexOf(s)!== -1) {\n      contains++;\n    }\n  }\n  return contains;\n};\n\n/*\n  Given the length of the two sides of a rectangle. Return the area of the rectangle rounded to 2 decimal points if the two sides form a valid rectangle. Otherwise, return -1.\n  Example:\n  rectangleArea(3, 4, 5) == 6.00\n  rectangleArea(2, 2, 3) == -1\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (a, b, c) => {\n  let a1 = a, b1 = b, c1 = c;\n  if (b < c) {\n    a1 = b;\n    b1 = c;\n    c1 = a;\n  }\n  let a2 = a1 + b1;\n  if (a2 < c1) {\n    return -1;\n  }\n  let area = Math.abs((a1 * b1) / 2);\n  return round(area, 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if(q.length === 1) {\n    return q[0] <= w;\n  }\n\n  let prev = q[0];\n  for(let i = 1; i < q.length; i++) {\n    if(q[i]!== prev) {\n      return false;\n    }\n  }\n  return q[0] <= w;\n}\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let n = arr.length,\n        change = n;\n\n    while (n > 1) {\n        const index = Math.floor(Math.random() * n);\n        const temp = arr[index];\n        arr[index] = arr[n - index - 1];\n        arr[n - index - 1] = temp;\n\n        if (arr.every((val, idx) => val === arr[idx + 1])) {\n            change = Math.min(change, index);\n        }\n        n -= 2;\n    }\n\n    return change;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const arr1 = lst1.map(x => x.length)\n  const arr2 = lst2.map(x => x.length)\n  const arr3 = arr1.concat(arr2)\n\n  const [minLength, maxLength] = getLengths(arr3)\n\n  let min = 0\n  let max = 0\n  let total = 0\n  while (min < max) {\n    const mid = Math.floor((min + max) / 2)\n    if (minLength <= mid) {\n      if (arr3[mid] <= maxLength) {\n        max = mid\n        total += arr3[mid]\n      } else {\n        min = mid + 1\n      }\n    } else {\n      if (arr3[mid] <= minLength) {\n        min = mid + 1\n        total += arr3[mid]\n      } else {\n        max = mid\n        total += arr3[mid]\n      }\n    }\n  }\n\n  return [...lst1,...lst2].filter(x => x.length === total)\n}\n\nconst getLengths = (arr) => [arr.reduce((pre, cur) => pre + cur, 0), arr.reduce((pre, cur) => pre + cur, 0)]\n\nmodule.exports = totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let b = 0;\n  for (let i = 1; i < a; i++) {\n    if (isPrime(i)) {\n      if (a % i === 0) {\n        b = i;\n        break;\n      }\n    }\n  }\n  if (b!== 0) {\n    let c = 0;\n    for (let j = 1; j < a; j++) {\n      if (isPrime(j)) {\n        if (a % j === 0) {\n          c = j;\n          break;\n        }\n      }\n    }\n    if (c!== 0) {\n      if (a % b === 0 && a % c === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  let b = 0;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      b = i;\n      break;\n    }\n  }\n  if (b === 0) {\n    return false;\n  }\n  let x = 0;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      x = i;\n      break;\n    }\n  }\n  if (x === 0) {\n    return false;\n  }\n  return isMultiplyPrime(a) && isMultiplyPrime(x) && isMultiplyPrime(b);\n};\n\n// isPrime is a function that returns true if the given number is prime and wrong otherwise.\nconst isPrime = (a) => {\n  if (a < 2) {\n    return false;\n  }\n  if (a === 2) {\n    return true;\n  }\n  let b = 0;\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      b = i;\n      break;\n    }\n  }\n  if (b === 0) {\n    return false;\n  }\n  let x = 0;\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      x = i;\n      break;\n    }\n  }\n  if (x === 0) {\n    return false;\n  }\n  return isMultiplyPrime(a) && isMultiplyPrime(x) && isMultiplyPrime(b);\n};\n\nexport default {\n  isPrime,\n  isMultiplyPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let x2 = x * x;\n  return x2 === n * n;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a % 6 === 0 && a % 12 === 0 && a % 18 === 0) || (a % 8 === 0 && a % 16 === 0) || (a % 9 === 0 && a % 12 === 0 && a % 18 === 0);\n};\n\nconst isdie = (a) => {\n  return a % 6 === 0 && a % 12 === 0 && a % 18 === 0;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(0));\n\n// console.log(isdie(1));\n// console.log(isdie(2));\n// console.log(isdie(-1));\n// console.log(isdie(64));\n// console.log(isdie(180));\n// console.log(isdie(0));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const hexStr = num.toLowerCase();\n    let key = 0;\n    for (let i = 0; i < hexStr.length; i++) {\n        key += Math.pow(16, i) * (parseInt(hexStr.charAt(i), 16));\n    }\n    return key;\n};\n\nconst countPrimes = (num) => {\n    let primeCount = 0;\n    let i = 0;\n    while (i <= Math.pow(num, 0.5)) {\n        if (isPrime(num)) {\n            primeCount++;\n        }\n        num += num;\n        i++;\n    }\n    return primeCount;\n};\n\nconst isPrime = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst getPrimeCount = (num) => {\n    let count = 0;\n    for (let i = 1; i <= Math.pow(num, 0.5); i++) {\n        if (isPrime(i)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst isPrimeNumber = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst countPrimeNumbers = (num) => {\n    let count = 0;\n    for (let i = 1; i <= Math.pow(num, 0.5); i++) {\n        if (isPrimeNumber(i)) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst isPrimeNumber2 = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst getPrimeNumbers = (num) => {\n    let primeNumbers = [];\n    for (let i = 1; i <= Math.pow(num, 0.5); i++) {\n        if (isPrimeNumber2(i)) {\n            primeNumbers.push(i);\n        }\n    }\n    return primeNumbers;\n};\n\nconst getPrimeNumbers2 = (num) => {\n    let primeNumbers = [];\n    for (let i = 1; i <= Math.pow(num, 0.5); i++) {\n        if (isPrimeNumber(i)) {\n            primeNumbers.push(i);\n        }\n    }\n    return primeNumbers;\n};\n\nconst getPrimeNumbers3 = (num) => {\n    let primeNumbers = [];\n    for (let i = 1; i <= Math.pow(num, 0.5); i++) {\n        if (isPrimeNumber2(i)) {\n            primeNumbers.push(i);\n        }\n    }\n    return primeNumbers;\n};\n\nconst countPrimes2 = (num) => {\n    let primeCount = 0;\n    let i = 0;\n    while (i <= Math.pow(num, 0.5)) {\n        if (isPrimeNumber(i)) {\n            primeCount++;\n        }\n        i++;\n    }\n    return primeCount;\n};\n\nconst countPrimes3 = (num) => {\n    let primeCount = 0;\n    let i = 0;\n    while (i <= Math.pow(num, 0.5)) {\n        if (isPrimeNumber2(i)) {\n            primeCount++;\n        }\n        i++;\n    }\n    return primeCount;\n};\n\nconst countPrimes4 = (num) => {\n    let primeCount = 0;\n    let i = 0;\n    while (i <= Math.pow(num, 0.5)) {\n        if (isPrimeNumber3(i)) {\n            primeCount++;\n        }\n        i++;\n    }\n    return primeCount;\n};\n\nconst countPrimes5 = (num) => {\n    let primeCount = 0;\n    let i = 0;\n    while (i <= Math.pow(num, 0.5)) {\n        if (isPrimeNumber3(i)) {\n            primeCount++;\n        }\n        i++;\n    }\n    return primeCount;\n};\n\nconst isPrimeNumber3 = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst isPrimeNumber4 = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if (num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst isPrimeNumber5 = (num) => {\n    let i = 0;\n    while (i <= Math.sqrt(num)) {\n        if ("}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return (decimal & 1)? \"1\" : \"0\";\n};\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n\n  for (let i = binary.length - 1; i >= 0; i--) {\n    decimal += binary[i] * Math.pow(2, binary.length - i - 1);\n  }\n\n  return decimal;\n};\n\n//console.log(binaryToDecimal(\"db1111db\"));\n//console.log(decimalToBinary(binaryToDecimal(\"db1111db\")));\n\nconsole.log(decimalToBinary(binaryToDecimal(\"db1111db\")));\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    const d = {};\n    let i = 0;\n    while (i < s.length) {\n        const val = d[s[i]];\n        if (!val) {\n            d[s[i]] = i;\n            i++;\n        } else {\n            let tmp = i;\n            while (tmp!== val) {\n                tmp = d[s[tmp]];\n                if (!tmp) {\n                    d[s[tmp]] = tmp;\n                    tmp = 0;\n                    break;\n                }\n            }\n            if (tmp === val) {\n                break;\n            }\n        }\n    }\n    return i === s.length && Object.keys(d).every(x => x!== x.toString());\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const grade = grades.sort((a, b) => a - b)\n  let result = []\n\n  const findRange = (min, max, grades) => {\n    let start = 0\n    let end = grades.length - 1\n    let current = min\n    while (start < end) {\n      const mid = Math.floor((start + end) / 2)\n      if (grades[mid] < current) {\n        start = mid + 1\n      } else {\n        end = mid\n      }\n    }\n    return [start, end]\n  }\n\n  const findIndex = (min, max, grades) => {\n    const [start, end] = findRange(min, max, grades)\n    return grades.slice(start, end + 1)\n  }\n\n  const findGrade = (grades) => {\n    const [min, max] = findRange(grades[0], grades[grades.length - 1], grades)\n    let gradesToTest = grades.slice(min, max + 1)\n\n    if (gradesToTest.length === 1) {\n      return gradesToTest[0]\n    }\n\n    const sortedGrades = gradesToTest.sort((a, b) => a - b)\n    const sortedGradesIndexes = findIndex(sortedGrades[0], sortedGrades[sortedGrades.length - 1], grades)\n    const indexOfMax = findIndex(sortedGrades[0], sortedGrades[sortedGrades.length - 1], sortedGrades)\n\n    const grade = sortedGrades[indexOfMax]\n    if (gradesToTest.length > indexOfMax + 1) {\n      return findGrade(gradesToTest.slice(indexOfMax + 1))\n    }\n\n    return grade\n  }\n\n  const grade = findGrade(grade)\n  return grade.map(function (grade) {\n    if (grade > 4.0) {\n      return 'A+'\n    } else if (grade > 3.7) {\n      return 'A'\n    } else if (grade > 3.3) {\n      return 'A-'\n    } else if (grade > 3.0) {\n      return 'B+'\n    } else if (grade > 2.7) {\n      return 'B'\n    } else if (grade > 2.3) {\n      return 'B-'\n    } else if (grade > 2.0) {\n      return 'C+'\n    } else if (grade > 1.7) {\n      return 'C'\n    } else if (grade > 1.3) {\n      return 'C-'\n    } else if (grade > 1.0) {\n      return 'D+'\n    } else if (grade > 0.7) {\n      return 'D'\n    } else if (grade > 0.0) {\n      return 'D-'\n    } else {\n      return 'E'\n    }\n  })\n}\n\nconst grades = [4.0, 3, 1.7, 2, 3.5]\nconsole.log(numericalLetterGrade(grades))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let number = string.length,\n      i,\n      n,\n      prime = true;\n\n  for (i = 2; i < number; i++) {\n    n = string.substring(0, i);\n    if (n.length === number) {\n      prime = false;\n      break;\n    }\n  }\n\n  return prime;\n}\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += 1;\n  }\n  return sum;\n}\n*/\n// sum = 10 * 9 + 9\n// 10 * 9 + 9 = 990\n// 990 % 10 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 * 1 = 9\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 = 9\n// 9 = 1\n// 1 * 9 ="}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  for (let i = N; i > 0; i = Math.floor(i / 2)) {\n    sum += i % 2\n  }\n  return sum\n}\n\nconst solution = solve(1000)\nconsole.log(solution)<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(add([4, 2, 6, 7]))\n\n/*Given a list of non-empty tuples tup.\n\nReturn a list of tuples whose first element is the sum of the first two elements of tup.\n\nNote:\nThe order of the output list is not important.\n\n\n  Examples:\n      add([(1, 2), (1, 3), (2, 3)]) ==> [(3, 6)]\n      add([(1, 2), (1, 3), (2, 3), (1, 4)]) ==> [(3, 6), (5, 8)]\n*/\nconst add = (tup) => {\n  let result = []\n  for(let i = 0; i < tup.length; i++) {\n    if(i === 0) {\n      result.push([tup[i][0], tup[i][1] + tup[i + 1][0]])\n    } else {\n      result.push([tup[i][0], tup[i][1] + tup[i - 1][1]])\n    }\n  }\n  return result\n}\n\nconsole.log(add([(1, 2), (1, 3), (2, 3), (1, 4)]))\n\n/*Given a list of non-empty pairs p.\n\nReturn a list of pairs whose first element is the sum of the first two elements of p.\n\nNote:\nThe order of the output list is not important.\n\n\n  Examples:\n      add([(1, 2), (1, 3), (2, 3)]) ==> [(3, 6)]\n      add([(1, 2), (1, 3), (2, 3), (1, 4)]) ==> [(3, 6), (5, 8)]\n*/\nconst add = (p) => {\n  let result = []\n  for(let i = 0; i < p.length; i++) {\n    if(i === 0) {\n      result.push([p[i][0], p[i][1] + p[i + 1][0]])\n    } else {\n      result.push([p[i][0], p[i][1] + p[i - 1][1]])\n    }\n  }\n  return result\n}\n\nconsole.log(add([(1, 2), (1, 3), (2, 3), (1, 4)]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let order = [];\n  s = s.toLowerCase();\n  s.split(' ').forEach((item, i) => {\n    const ascii = item.charCodeAt(0);\n    let last = order.length - 1;\n    while (last >= 0 && order[last].ascii > ascii) {\n      order.splice(last, 1);\n      last--;\n    }\n    order.splice(last + 1, 0, item);\n  });\n  return order.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = [];\n  const rowsX = [];\n  for (let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    if (row.length === x) {\n      rows.push(row);\n      rowsX.push([x, i]);\n    }\n  }\n  rows.sort((a, b) => {\n    const aRow = a[0];\n    const bRow = b[0];\n    const aCol = a[1];\n    const bCol = b[1];\n    return aRow < bRow? -1 : aRow > bRow? 1 : aCol < bCol? -1 : aCol > bCol? 1 : 0;\n  });\n  rows.sort((a, b) => {\n    const aRow = a[1];\n    const bRow = b[1];\n    const aCol = a[0];\n    const bCol = b[0];\n    return aCol < bCol? -1 : aCol > bCol? 1 : aRow < bRow? -1 : aRow > bRow? 1 : 0;\n  });\n  return rowsX;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let lastIndex = array.length - 1;\n  let sum = array[0] + array[lastIndex];\n  let temp = [];\n  let i = 0;\n  while (sum) {\n    while (sum > array[i]) {\n      temp.push(array[i]);\n      sum -= array[i];\n      i++;\n    }\n    temp.push(array[i]);\n    sum -= array[i];\n    sum += array[i + 1];\n    i++;\n  }\n  return temp.reverse();\n};\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let str = s.toLowerCase();\n  let encrypt = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      encrypt += 'e';\n    } else if (str[i] === 'b') {\n      encrypt += 'f';\n    } else if (str[i] === 'c') {\n      encrypt += 'g';\n    } else if (str[i] === 'd') {\n      encrypt += 'h';\n    } else if (str[i] === 'e') {\n      encrypt += 'i';\n    } else if (str[i] === 'f') {\n      encrypt += 'j';\n    } else if (str[i] === 'g') {\n      encrypt += 'k';\n    } else if (str[i] === 'h') {\n      encrypt += 'l';\n    } else if (str[i] === 'i') {\n      encrypt +='m';\n    } else if (str[i] === 'j') {\n      encrypt += 'n';\n    } else if (str[i] === 'k') {\n      encrypt += 'o';\n    } else if (str[i] === 'l') {\n      encrypt += 'p';\n    } else if (str[i] ==='m') {\n      encrypt += 'q';\n    } else if (str[i] === 'n') {\n      encrypt += 'r';\n    } else if (str[i] === 'o') {\n      encrypt +='s';\n    } else if (str[i] === 'p') {\n      encrypt += 't';\n    } else if (str[i] === 'q') {\n      encrypt += 'u';\n    } else if (str[i] === 'r') {\n      encrypt += 'v';\n    } else if (str[i] ==='s') {\n      encrypt += 'w';\n    } else if (str[i] === 't') {\n      encrypt += 'x';\n    } else if (str[i] === 'u') {\n      encrypt += 'y';\n    } else if (str[i] === 'v') {\n      encrypt += 'z';\n    } else if (str[i] === 'w') {\n      encrypt += '0';\n    } else if (str[i] === 'x') {\n      encrypt += '1';\n    } else if (str[i] === 'y') {\n      encrypt += '2';\n    } else if (str[i] === 'z') {\n      encrypt += '3';\n    }\n  }\n  return encrypt;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let str = s.toLowerCase();\n  let encrypt = '';\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === 'a') {\n      encrypt += 'f';\n    } else if (str[i] === 'b') {\n      encrypt += 'e';\n    } else if (str[i] === 'c') {\n      encrypt += 'j';\n    } else if (str[i] === 'd') {\n      encrypt += 'i';\n    } else if (str[i] === 'e') {\n      encrypt += 'n';\n    } else if (str[i] === 'f') {\n      encrypt +='m';\n    } else if (str[i] === 'g') {\n      encrypt += 'l';\n    } else if (str[i] === 'h') {\n      encrypt += 'k';\n    } else if (str[i] === 'i') {\n      encrypt += 'o';\n    } else if (str[i] === 'j') {\n      encrypt += 'p';\n    } else if (str[i] === 'k') {\n      encrypt += 'q';\n    } else if (str[i] === 'l') {\n      encrypt += 'r';\n    } else if (str[i] ==='m') {\n      encrypt +='s';\n    } else if (str[i] === 'n') {\n      encrypt += 't';\n    } else if (str[i] === 'o') {\n      encrypt += 'u';\n    } else if (str[i] === 'p') {\n      encrypt += 'v';\n    } else if (str[i] === 'q') {\n      encrypt += 'w';\n    } else if (str[i] === 'r') {\n      encrypt += 'x';\n    } else if (str[i] ==='s') {\n      encrypt += 'y';\n    } else if (str[i] === 't') {\n      encrypt += 'z';\n    } else if (str[i] === 'u') {\n      encrypt += '0';\n    } else if (str[i] === 'v') {\n      encrypt += '1';\n    } else if (str[i] === 'w') {\n      encrypt += '2';\n    } else if (str[i] === 'x') {\n      encrypt += '3';\n    } else if (str[i] === 'y') {\n      encrypt += '4';\n    } else if (str[i] === 'z') {\n      encrypt += '5';\n    }\n  }\n  return encrypt;\n};\n\n/*CEncrypt a function that takes a string as argument and returns a"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  return lst.slice(1, -1).sort().pop();\n}\n\n// const nextSmallest = (lst) = > {\n//   return lst.slice(1, -1).sort().pop();\n// }\n\nconst nextSmallest = (lst) = > {\n  return lst.slice(1, -1).sort().pop();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    return S[0] === 'I'\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isNotBored = (S) => {\n    return S[0]!== 'I'\n}\n\n/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoredOrNotBored = (S) => {\n    return S[0] === 'I' || S[0]!== 'I'\n}\n\nmodule.exports = {\n    isBored,\n    isNotBored,\n    isBoredOrNotBored\n}<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x === y + z) || (x === z + y) || (y === x + z) || (y === z + x) || (x === y - z) || (x === z - y) || (y === x - z) || (y === z - x);\n}\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let char;\n  for (let i = message.length - 1; i >= 0; i--) {\n    char = message[i];\n    encoded = char.toUpperCase() + encoded;\n    if (char.match(/[A-Z]/i)) {\n      let lastIndex = encoded.lastIndexOf('C');\n      let vowel = encoded.charAt(lastIndex - 2);\n      encoded = encoded.replace(vowel, vowel.toUpperCase());\n    }\n    if (char.match(/[A-Z]/i)) {\n      let vowel = encoded.charAt(lastIndex - 1);\n      encoded = encoded.replace(vowel, vowel.toUpperCase());\n    }\n  }\n  return encoded;\n};\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largest = 0;\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = lst[i];\n    let digitSum = 0;\n    while (num) {\n      digitSum += num % 10;\n      num = num / 10;\n    }\n    if (digitSum > largest) largest = digitSum;\n    total += largest;\n  }\n  return total;\n};\n\nconsole.log(largestPrimary(['0', '3', '2', '1', '3', '5', '7', '4', '5', '5', '5', '2', '181', '32', '4', '32', '3', '2', '32', '324', '4', '3']));\nconsole.log(largestPrimary(['1', '0', '1', '8', '2', '4597', '2', '1', '3', '40', '1', '2', '1', '2', '4', '2', '5', '1']));\nconsole.log(largestPrimary(['1', '3', '1', '32', '5107', '34', '83278', '109', '163', '23', '2323', '32', '30', '1', '9', '3']));\nconsole.log(largestPrimary(['0', '724', '32', '71', '99', '32', '6', '0', '5', '91', '83', '0', '5', '6']));\nconsole.log(largestPrimary(['0', '81', '12', '3', '1', '21']));\nconsole.log(largestPrimary(['0', '8', '1', '2', '1', '7']));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let flag = true;\n    for (let i in dict) {\n        if (dict.hasOwnProperty(i)) {\n            let letter = dict[i].toUpperCase() || dict[i].toLowerCase();\n            if (letter!== i) {\n                flag = false;\n            }\n        }\n    }\n    return flag;\n};\n\nexport {checkDictCase};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  let count = 2;\n  while (count < n) {\n    if (n % count === 0) return false;\n    count++;\n  }\n  return true;\n};\n\n//console.log(countUpTo(5));\n//console.log(countUpTo(11));\n//console.log(countUpTo(0));\n//console.log(countUpTo(20));\n//console.log(countUpTo(1));\n//console.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let ans = 0;\n  for (let i = 0; i < 9; i++) {\n    ans += Math.pow(a, i) * Math.pow(b, i);\n  }\n  return ans;\n}\n\nconsole.log(multiply(100, 5));\nconsole.log(multiply(100, 5));\nconsole.log(multiply(100, -5));\nconsole.log(multiply(100, -5));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    return s.split('').filter(x => x.toUpperCase() === x).length % 2 === 0;\n};\n\n/*\n  For a string s, the number of lowercase letters in even indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    return s.split('').filter(x => x.toLowerCase() === x).length % 2 === 0;\n};\n\n/*\n  For a string s, the number of upper and lowercase letters in even indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 1\n  countCaps('abcdefg') returns 1\n  countCaps('dBBE') returns 2\n  */\nconst countCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of upper and lowercase letters in odd indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 0\n  countCaps('abcdefg') returns 1\n  countCaps('dBBE') returns 0\n  */\nconst countOddCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of unique characters in even indexes is counted.\n  \n  For example:\n  countUnique('aBCdEf') returns 1\n  countUnique('abcdefg') returns 1\n  countUnique('dBBE') returns 1\n  */\nconst countUnique = (s) => {\n    return countUpper(s) + countLower(s) + countCaps(s) + countOddCaps(s);\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countOddUpper = (s) => {\n    return s.split('').filter(x => x.toUpperCase() === x).length % 2 === 1;\n};\n\n/*\n  For a string s, the number of lowercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countOddLower = (s) => {\n    return s.split('').filter(x => x.toLowerCase() === x).length % 2 === 1;\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in odd indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 0\n  countCaps('abcdefg') returns 0\n  countCaps('dBBE') returns 1\n  */\nconst countOddCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in even indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 1\n  countCaps('abcdefg') returns 1\n  countCaps('dBBE') returns 2\n  */\nconst countEvenCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in odd indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 0\n  countCaps('abcdefg') returns 1\n  countCaps('dBBE') returns 0\n  */\nconst countEvenOddCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in even indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 0\n  countCaps('abcdefg') returns 0\n  countCaps('dBBE') returns 1\n  */\nconst countEvenOddUpper = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in odd indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 1\n  countCaps('abcdefg') returns 0\n  countCaps('dBBE') returns 1\n  */\nconst countEvenOddLower = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\n/*\n  For a string s, the number of uppercase and lowercase letters in even indexes is counted.\n  \n  For example:\n  countCaps('aBCdEf') returns 0\n  countCaps('abcdefg') returns 1\n  countCaps('dBBE') returns 0\n  */\nconst countEvenOddOddCaps = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\nmodule.exports = {\n    countUpper,\n    countLower,\n    countCaps,\n    countOddCaps,\n    countOddUpper,\n    countOddLower,\n    countEvenCaps,\n    countEvenOddCaps,\n    countEvenOddUpper,\n    countEvenOddLower,\n    countEvenOddOddCaps,\n};<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value);\n  if (number % 1 === 0) {\n    return number;\n  }\n  let closest = number;\n  let diff = Math.abs(number - closest);\n  let prevDiff = diff;\n  let index = 1;\n  while (prevDiff!== 0) {\n    const next = closest + index;\n    prevDiff = Math.abs(next - number);\n    if (prevDiff < diff) {\n      closest = next;\n      diff = prevDiff;\n    }\n    index++;\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const result = [];\n  for (let i = 1; i < n + 1; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(i + 1);\n    }\n  }\n  return result;\n};\n\nconst makeAPile2 = (n) => {\n  const result = [];\n  const num = n;\n  while (num > 0) {\n    result.push(num);\n    num--;\n  }\n  return result;\n};\n\nexport { makeAPile, makeAPile2 };\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let arr = s.split(/(?=\\s|,)/g)\n    return arr\n}\n\n/*\n  Find the largest palindrome made from the product of two 3-digit numbers\n  \n  For example:\n  largestPalindrome(\"3,9,4\") == \"9984\"\n  largestPalindrome(\"10,1,0\") == \"1001\"\n  */\nconst largestPalindrome = (s) => {\n    let p = new Array()\n    let x = 1\n    let y = 1\n    for (let i = 1; i <= s.length - 1; i++) {\n        p.push(s[i - 1] * x)\n        p.push(s[i + 1] * y)\n        if (p[i] > p[i + 1]) {\n            x = p[i]\n            y = p[i + 1]\n        }\n        else {\n            y = p[i]\n            x = p[i + 1]\n        }\n    }\n    if (p[p.length - 1] > p[p.length - 2]) {\n        return p[p.length - 1]\n    }\n    else {\n        return p[p.length - 2]\n    }\n}\n\n/*\n  Find the longest palindrome made from the product of two 3-digit numbers.\n  \n  For example:\n  longestPalindrome(\"3,9,4\") == \"9984\"\n  longestPalindrome(\"10,1,0\") == \"1001\"\n  */\nconst longestPalindrome = (s) => {\n    let p = new Array()\n    let x = 1\n    let y = 1\n    let result = \"\"\n    for (let i = 1; i <= s.length - 1; i++) {\n        p.push(s[i - 1] * x)\n        p.push(s[i + 1] * y)\n        if (p[i] > p[i + 1]) {\n            x = p[i]\n            y = p[i + 1]\n            result = p[i]\n        }\n        else {\n            y = p[i]\n            x = p[i + 1]\n            result = p[i + 1]\n        }\n    }\n    if (p[p.length - 1] > p[p.length - 2]) {\n        return result\n    }\n    else {\n        return p[p.length - 2]\n    }\n}\n\n/*\n  Find the longest palindrome made from the product of two 3-digit numbers.\n  \n  For example:\n  longestPalindrome(\"3,9,4\") == \"9984\"\n  longestPalindrome(\"10,1,0\") == \"1001\"\n  */\nconst longestPalindrome = (s) => {\n    let p = new Array()\n    let x = 1\n    let y = 1\n    let result = \"\"\n    for (let i = 1; i <= s.length - 1; i++) {\n        p.push(s[i - 1] * x)\n        p.push(s[i + 1] * y)\n        if (p[i] > p[i + 1]) {\n            x = p[i]\n            y = p[i + 1]\n            result = p[i]\n        }\n        else {\n            y = p[i]\n            x = p[i + 1]\n            result = p[i + 1]\n        }\n    }\n    if (p[p.length - 1] > p[p.length - 2]) {\n        return result\n    }\n    else {\n        return p[p.length - 2]\n    }\n}\n\n/*\n  Find the largest palindrome made from the product of two 3-digit numbers.\n  \n  For example:\n  largestPalindrome(\"3,9,4\") == \"9984\"\n  largestPalindrome(\"10,1,0\") == \"1001\"\n  */\nconst largestPalindrome = (s) => {\n    let p = new Array()\n    let x = 1\n    let y = 1\n    let result = \"\"\n    for (let i = 1; i <= s.length - 1; i++) {\n        p.push(s[i - 1] * x)\n        p.push(s[i + 1] * y)\n        if (p[i] > p[i + 1]) {\n            x = p[i]\n            y = p[i + 1]\n            result = p[i]\n        }\n        else {\n            y = p[i]\n            x = p[i + 1]\n            result = p[i + 1]\n        }\n    }\n    if (p[p.length - 1] > p[p.length - 2]) {\n        return result\n    }\n    else {\n        return p[p.length - 2]\n    }\n}\n\n/*\n  Find the largest palindrome made from the product of two 3-digit numbers.\n  \n  For example:\n  longestPalindrome(\"3,9,4\") == \"9984\"\n  longestPalindrome(\"10,1,0\") == \"1001\"\n  */\nconst longestPalindrome = (s) => {\n    let p = new Array()\n    let x = 1\n    let y = 1\n    let result = \"\"\n    for (let i = 1; i <= s.length - 1; i++) {\n        p.push(s[i - 1] * x)\n        p.push(s[i + 1] * y)\n        if (p[i] > p[i + 1]) {\n            x = p[i]\n            y = p[i + 1]\n            result = p[i]\n        }\n        else {\n            y = p[i]\n            x = p[i + 1]\n            result = p[i + 1]\n        }\n    }\n    if (p[p.length - 1] > p[p.length - 2])"}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const even = (n) => {\n    return n % 2 === 0? n : -1;\n  };\n  const odd = (n) => {\n    return n % 2 === 1? n : -1;\n  };\n  const range = (x, y) => {\n    return x < y? [x, y] : [y, x];\n  };\n  const max = (x, y) => {\n    return x > y? x : y;\n  };\n  return [\n    range(x, y),\n    max(x, y),\n    (x + y) % 2 === 0? even(x + y) : odd(x + y)\n  ];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = n.toString(2).length;\n  const mBits = m.toString(2).length;\n  const avg = (nBits + mBits) / 2 + 1;\n  const halfAvg = Math.floor(avg / 2);\n  const nBitsAvg = halfAvg.toString(2).length;\n  const halfAvgBits = halfAvg.toString(2).split(\"\").reverse().join(\"\");\n  const num = (nBitsAvg + halfAvgBits.length) / 2;\n  const half = halfAvg.toString(2).split(\"\").reverse().join(\"\");\n  const result = half.length < halfAvgBits.length? -1 : half + halfAvgBits.substring(0, num);\n  return result;\n};\n\nexport default roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    const list = [...x].filter(n => n % 2 === 0).sort();\n    return list.filter(n => n!== 0);\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\n//[1, 15, 33]\n\nconsole.log(uniqueDigits([152, 323, 1422, 10]));\n//[]\n\n/*\n  Given a non-empty array of integers, return the maximum difference between the \n  two largest elements in the array. \n  Example: \n    Given [3, 30, 34, 5, 9], return 40.\n    \n    Given [3, 30, 34, 5], return 30.\n    \n    Given [3, 30, 34], return 34.\n    \n    Given [3, 30], return 30.\n*/\nconst largestDifference = (x) => {\n    const list = [...x].sort();\n    let maxDifference = 0;\n    for (let i = 1; i < list.length - 1; i++) {\n        maxDifference = Math.max(maxDifference, list[i + 1] - list[i]);\n    }\n    return maxDifference;\n};\n\nconsole.log(largestDifference([3, 30, 34, 5, 9]));\n//40\n\nconsole.log(largestDifference([3, 30, 34, 5]));\n//30\n\nconsole.log(largestDifference([3, 30]));\n//30\n\n/*\n  Given a non-empty array of non-negative integers, return the sum of the \n  numbers in the array.\n\n  You may assume that the result is not greater than \n  **2,147,483,648**.\n  Example:\n\n  Given [2, 7, 11], return 55.\n*/\nconst sum = (x) => {\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n        sum += x[i];\n    }\n    return sum;\n};\n\nconsole.log(sum([2, 7, 11]));\n//55\n\n/*\n  Given a non-empty array of non-negative integers, return the largest \n  number in the array.\n\n  Example:\n\n  Given [1, 3, 4, 5], return 5.\n*/\nconst largest = (x) => {\n    return x.reduce((prev, next) => Math.max(prev, next));\n};\n\nconsole.log(largest([1, 3, 4, 5]));\n//5\n\nconsole.log(largest([1, 3, 4]));\n//4\n\nconsole.log(largest([1, 3]));\n//3\n\nconsole.log(largest([1]));\n//1\n\n/*\n  Given a non-empty array of non-negative integers, return the smallest \n  number in the array.\n\n  Example:\n\n  Given [1, 3, 4, 5], return 1.\n*/\nconst smallest = (x) => {\n    return x.reduce((prev, next) => Math.min(prev, next));\n};\n\nconsole.log(smallest([1, 3, 4, 5]));\n//1\n\nconsole.log(smallest([1, 3, 4]));\n//1\n\nconsole.log(smallest([1, 3]));\n//1\n\nconsole.log(smallest([1]));\n//1\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr.length) {\n    return [];\n  }\n\n  arr = arr.sort();\n  arr = arr.reverse();\n\n  return arr.map((val) => {\n    if (val.toString().length === 1) {\n      return val.toString() + 'th';\n    } else if (val.toString().length === 2) {\n      return val.toString() + 'nd';\n    } else if (val.toString().length === 3) {\n      return val.toString() + 'rd';\n    }\n\n    return val.toString() + 'th';\n  });\n};\n\nexport default byLength;<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(i)\n  }\n  return l\n}\n\n/*\n  Function g is similar to f, except that it returns a list with the values of the factorial of each element of l.\n  It also returns the sum of the factorial of each element of l.\n  */\nconst g = (n) => {\n  let l = f(n)\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    let num = l[i]\n    sum += num\n  }\n  return [...l, sum]\n}\n\n/*\n  Example:\n  g(5) == [1, 2, 6, 24, 15, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600]\n  */\nconst h = (n) => {\n  let l = []\n  for (let i = 1; i <= n; i++) {\n    l.push(g(i))\n  }\n  return l\n}\n\n/*\n  Return a list of all numbers that can be written as the sum of two different numbers in the list of n numbers l.\n  It is guaranteed that this list is unique.\n  Example:\n  h(3) == [1, 2, 3, 4, 5, 6, 9, 10, 12, 15, 18, 21, 24, 27, 30]\n  */\nconst h = (n) => {\n  let l = g(n)\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      let num1 = l[i]\n      let num2 = l[j]\n      let sum = num1 + num2\n      if (sum === n) {\n        res.push(sum)\n      }\n    }\n  }\n  return res\n}\n\n/*\n  Return a list of all numbers that can be written as the sum of three different numbers in the list of n numbers l.\n  It is guaranteed that this list is unique.\n  Example:\n  h(4) == [1, 2, 3, 4, 5, 6, 8, 9, 12, 15, 18, 21, 24, 27, 30, 36, 45]\n  */\nconst h = (n) => {\n  let l = g(n)\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      let num1 = l[i]\n      let num2 = l[j]\n      for (let k = j + 1; k < l.length; k++) {\n        let num3 = l[k]\n        let sum = num1 + num2 + num3\n        if (sum === n) {\n          res.push(sum)\n        }\n      }\n    }\n  }\n  return res\n}\n\n/*\n  Return a list of all numbers that can be written as the sum of four different numbers in the list of n numbers l.\n  It is guaranteed that this list is unique.\n  Example:\n  h(5) == [1, 2, 3, 4, 5, 6, 8, 9, 12, 15, 18, 21, 24, 27, 30, 36, 45, 54]\n  */\nconst h = (n) => {\n  let l = g(n)\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      let num1 = l[i]\n      let num2 = l[j]\n      for (let k = j + 1; k < l.length; k++) {\n        let num3 = l[k]\n        for (let l = k + 1; l < l.length; l++) {\n          let num4 = l[l]\n          let sum = num1 + num2 + num3 + num4\n          if (sum === n) {\n            res.push(sum)\n          }\n        }\n      }\n    }\n  }\n  return res\n}\n\n/*\n  Return a list of all numbers that can be written as the sum of five different numbers in the list of n numbers l.\n  It is guaranteed that this list is unique.\n  Example:\n  h(6) == [1, 2, 3, 4, 5, 6, 8, 9, 12, 15, 18, 21, 24, 27, 30, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126, 135, 144, 153, 162, 171, 180, 189, 198, 207, 216, 225, 234, 243, 252, 261, 270, 279, 288, 297, 306, 315, 324, 333, 342, 351, 360, 369, 378, 387, 396, 405, 414, 423, 432, 441, 450, 459, 468, 477, 486, 495, 504, 513, 522, 531, 540, 549, 558, 567, 576, 585, 594, 603, 612, 621, 630, 639, 648, 657, 666, 675, 684, 693, 702, 711, 720, 729, 738, 747, 756, 765, 774, 783, 792, 801, 810, 819, 828, 837, 846, 855, 864, 873, 882, 891, 900, 909, 918, 927, 936, 945, 954, 963, 972, 981, 990, 999, 1008, 1017, 1026, 1035, 1044, 1053, 1062, 1071, 1080, 1089, 1098, 1107, 1116, 1125, 1134, 1143, 1152, 1161, 1170,"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const isEven = (x) => x % 2 === 0;\n  const odd = (x) => x % 2 === 1;\n  const even = (x) => x % 2 === 0 && isEven(x);\n  const oddAndEven = (x) => isEven(x) && odd(x);\n\n  return [(n - 1).toString().replace(/\\d/g, '').length, even(n).toString().replace(/\\d/g, '').length];\n};\n\nconst evenOddPalindromeTest = (test) => {\n  const n = parseInt(test[0]);\n  const expected = test[1].split(' ');\n\n  console.log(`n = ${n}`);\n  const actual = evenOddPalindrome(n);\n\n  console.log(`expected: ${expected[0]} (${expected[1]}), actual: ${actual[0]} (${actual[1]}), diff: ${(actual[0] - expected[0])}`);\n\n  console.log(`${actual[0] === expected[0]} && ${actual[1] === expected[1]}`);\n\n  test.deepEqual(actual, expected);\n};\n\nevenOddPalindromeTest(evenOddPalindromeTest.test(['6', '8']));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconst testArray = [-123, -11, -1, 11, 1, 2, 123];\nconsole.log(countNums(testArray));<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return true;\n  }\n\n  let length = arr.length;\n  let sorted = [...arr];\n  let start = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n\n  while (i < length) {\n    while (sorted[i] <= sorted[i + 1] && i < length - 1) {\n      i++;\n    }\n    \n    if (i === length - 1) {\n      return true;\n    }\n\n    let temp = sorted[i];\n    sorted[i] = sorted[j];\n    sorted[j] = temp;\n    j++;\n  }\n\n  for (i = 0; i < length; i++) {\n    for (j = i + 1; j < length; j++) {\n      if (sorted[j] < sorted[i]) {\n        let temp = sorted[i];\n        sorted[i] = sorted[j];\n        sorted[j] = temp;\n      }\n    }\n  }\n\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return 'NO';\n  let l = Math.min(lst1.length, lst2.length);\n  let i = 0;\n  let j = 0;\n  while (i < l && j < l) {\n    if (lst1[i] === lst2[j]) {\n      if (lst1[i] % 2 === 0) {\n        lst1.splice(i, 1);\n        lst2.splice(j, 1);\n        lst1.push(lst2[j]);\n        lst2.push(lst1[i]);\n      }\n      i++;\n      j++;\n    } else if (lst1[i] < lst2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return (lst1.length === 0 || lst2.length === 0)? 'NO' : 'YES';\n};\n\nconst exchangeTest = [\n  [[1, 2, 3, 4], [1, 2, 3, 4]],\n  [[1, 2, 3, 4], [1, 5, 3, 4]],\n  [[1, 2, 3, 4], [1, 2, 3, 5]],\n  [[1, 2, 3, 4], [1, 2, 3, 5, 6]],\n  [[1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8]],\n  [[1, 2, 3, 4], [1, 2, 3, 5, 6, 7, 8, 9, 10]],\n];\n\nexchangeTest.forEach(t => console.log(exchange(t[0], t[1])));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const char = test.charAt(0)\n  const repetitions = test.split(' ').reduce((acc, word) => {\n    const wordLength = word.length\n    if (acc[word]) {\n      acc[word] += wordLength\n    } else {\n      acc[word] = wordLength\n    }\n    return acc\n  }, {})\n  const max = Object.keys(repetitions).reduce((acc, key) => {\n    const count = repetitions[key]\n    if (acc[count] < count) {\n      acc[count] = key\n    }\n    return acc\n  }, {})\n  return max\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const rev = s.split('').reverse().join('')\n  const result = rev.replace(c, '')\n  if (result === rev) return [result, false]\n  return [result, true]\n}\n\nconst test = [\n  [\n    'abcde',\n    'ae',\n    'bcd',\n  ],\n  [\n    'abcdef',\n    'b',\n    'acdef',\n  ],\n  [\n    'abcdedcba',\n    'ab',\n    'cdedc',\n  ],\n]\n\ntest.forEach(([s, c, r]) => {\n  console.log(`Given: ${s} and ${c}`)\n  console.log(`Then: ${r}`)\n  console.log(`Result: ${reverseDelete(s, c)[0]}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (n) => {\n    let ret = 0;\n    while (n) {\n      ret += n % 2;\n      n = n / 2;\n    }\n    return ret;\n  };\n  let countList = [];\n  for (let i = 0; i < lst.length; i++) {\n    countList.push(count(lst[i]));\n  }\n  return countList;\n};\n\nconst nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n  const list = oddCount(nums);\n  for (let i = 0; i < list.length; i++) {\n    console.log(`the number of odd elements ${i+1} of the ${i+1}st string is ${list[i]}`);\n  }\n};\n\nmodule.exports = nums;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    if(nums.length === 0) {\n        return 0;\n    }\n\n    let sum = 0;\n    let sumOfSubArrays = 0;\n    let currentSum = 0;\n    let left = 0;\n    let right = nums.length - 1;\n\n    while(left <= right) {\n        if(nums[left]!== 0) {\n            currentSum += nums[left];\n            sumOfSubArrays += currentSum;\n            sum += currentSum;\n            left++;\n        } else {\n            currentSum = nums[left];\n            sumOfSubArrays += currentSum;\n            sum += currentSum;\n            left++;\n        }\n    }\n\n    return sumOfSubArrays;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        if (count >= capacity) return count\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst fill = (grid, capacity, bucket) => {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        bucket.push(grid[i][j])\n        if (bucket.length === capacity) return true\n      }\n    }\n  }\n  return false\n}\n\nconst minFill = (grid, capacity) => {\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst empty = (grid, bucket) => {\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        grid[i][j] = 0\n      }\n    }\n  }\n}\n\nconst dp = (grid, capacity) => {\n  if (grid.length === 1) return grid[0] === 1\n  let [before, after] = [grid[0], grid[1]]\n  for (let i = 1; i < grid.length; i++) {\n    before = [before[0], before[1], grid[i]]\n    after = [after[0], after[1], grid[i]]\n    if (before[2] === 1 && after[2] === 0) {\n      return capacity - before[1] + after[1]\n    }\n  }\n  return 0\n}\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\n  const capacity = 1\n\n  let [bucket, count] = []\n  let i = 0\n\n  while (count < capacity) {\n    if (fill(grid, capacity, bucket)) {\n      if (empty(grid, bucket)) {\n        count++\n      }\n      bucket.splice(0, 1)\n    } else {\n      empty(grid, bucket)\n      i++\n      count = minFill(grid, capacity)\n    }\n  }\n\n  console.log(count)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    if (a === b) return 0\n    const aNum = a.toString(2)\n    const bNum = b.toString(2)\n    return aNum.length - bNum.length\n  })\n\n  const isDecimal = (num) => {\n    return parseInt(num, 2) === num\n  }\n\n  const sortedDecimal = sorted.map((num) => {\n    return parseInt(num, 2)\n  })\n\n  return sorted.map((num) => {\n    return isDecimal(num)? num : sortedDecimal.indexOf(num)\n  })\n}\n\nconst testArray = [1, 2, 3, 4, 5]\n\nconsole.log('testArray', testArray)\nconsole.log('sortedArray', sortArray(testArray))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    if (s.length === 0) return []\n    let word = []\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] ==='') {\n            if (word.length === n) {\n                return word\n            }\n            word = []\n        } else {\n            word.push(s[i])\n        }\n    }\n    return word\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '', i = 0;\n  while (i < word.length) {\n    if (vowels.indexOf(word[i])!== -1) {\n      vowel = word[i];\n      break;\n    }\n    i++;\n  }\n  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n    return vowel;\n  }\n  return '';\n};\n\nconst getClosestVowel2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '', i = 0;\n  while (i < word.length) {\n    if (vowels.indexOf(word[i])!== -1) {\n      vowel = word[i];\n      break;\n    }\n    i++;\n  }\n  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n    return vowel;\n  }\n  return '', false;\n};\n\n/*\n  Write a function that takes a string as input and prints the string after the closest vowel is replaced by a period.\n  If the word doesn't contain a vowel, you should output the original string.\n  If the word contains more than one vowel, you should replace all the vowels with the closest vowel,\n  and leave the other vowels in their original positions.\n  The string should be comprised of only english letters.\n  Example:\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"h.ello\"\n  replaceVowels(\"hello\") ===> \"e.llo\"\n  replaceVowels(\"hello\") ===> \"l.o\"\n  replaceVowels(\"hello\") ===> \"lo\"\n  replaceVowels(\"hello\") ===> \"hel\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n*/\nconst replaceVowels = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '', i = 0;\n  while (i < word.length) {\n    if (vowels.indexOf(word[i])!== -1) {\n      vowel = word[i];\n      break;\n    }\n    i++;\n  }\n  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n    return word.replace(vowel, '.');\n  }\n  return word;\n};\n\n/*\n  Write a function that takes a string as input and prints the string after the closest vowel is replaced by a period.\n  If the word doesn't contain a vowel, you should output the original string.\n  If the word contains more than one vowel, you should replace all the vowels with the closest vowel,\n  and leave the other vowels in their original positions.\n  The string should be comprised of only english letters.\n  Example:\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"h.ello\"\n  replaceVowels(\"hello\") ===> \"e.llo\"\n  replaceVowels(\"hello\") ===> \"l.o\"\n  replaceVowels(\"hello\") ===> \"lo\"\n  replaceVowels(\"hello\") ===> \"hel\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n  replaceVowels(\"hello\") ===> \"hello\"\n*/\nconst replaceVowels2 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '', i = 0;\n  while (i < word.length) {\n    if (vowels.indexOf(word[i])!== -1) {\n      vowel = word[i];\n      break;\n    }\n    i++;\n  }\n  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n    return word.replace(vowel, '.');\n  }\n  return word;\n};\n\nconst replaceVowels3 = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowel = '', i = 0;\n  while (i < word.length) {\n    if (vowels.indexOf(word[i])!== -1) {\n      vowel = word[i];\n      break;\n    }\n    i++;\n  }\n  if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n    return word.replace(vowel, '"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = [];\n  const len = lst.length;\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    }\n    else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No';\n      }\n      else if (stack.pop()!== '(') {\n        return 'No';\n      }\n    }\n  }\n  return 'Yes';\n}\n\nconsole.log(matchParens(['()', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (arr.length === 0) return [];\n  if (k === 0) return [];\n  return arr.sort((a, b) => a - b).slice(0, k);\n};\n\n// TEST\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = (arr) => arr.reduce((sum, num) => sum + num, 0);\n  const oddSum = (arr) => arr.reduce((sum, num) => sum + num, 0);\n\n  return oddSum(lst.filter(n => n % 2 === 1));\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const max = Math.max(...arr)\n  let maxLength = 0\n\n  for (let i = 0; i < k; i++) {\n    const newLength = (arr[i] + arr[i + 1]).toString().length\n    if (newLength > maxLength) {\n      maxLength = newLength\n      max = arr[i] + arr[i + 1]\n    }\n  }\n\n  return max\n}\n\nexport { addElements }\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const nums = [];\n  const collatz = (n, i) => {\n    if (n === 1) {\n      return [n];\n    }\n    const oddNums = [];\n    while (n % 2 === 1) {\n      oddNums.push(n);\n      n = n / 2;\n    }\n    if (n > 1) {\n      oddNums.push(n);\n    }\n    return collatz(n, i + 1);\n  };\n  collatz(n, 0);\n  return oddNums;\n};\n\nexport default getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date ||!date.length)\n    return false\n  const months = ['01','02','03','04','05','06','07','08','09','10','11','12']\n  const days = ['01','02','03','04','05','06','07','08','09','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31']\n  const dates = ['2000','2001','2002','2003','2004','2005','2006','2007','2008','2009','2010','2011','2012','2013','2014','2015','2016','2017','2018','2019','2020','2021','2022','2023','2024','2025','2026','2027','2028','2029','2030','2031','2032','2033','2034','2035','2036','2037','2038','2039','2040','2041','2042','2043','2044','2045','2046','2047','2048','2049','2050','2051','2052','2053','2054','2055','2056','2057','2058','2059','2060','2061','2062','2063','2064','2065','2066','2067','2068','2069','2070','2071','2072','2073','2074','2075','2076','2077','2078','2079','2080','2081','2082','2083','2084','2085','2086','2087','2088','2089','2090','2091','2092','2093','2094','2095','2096','2097','2098','2099']\n  const month = parseInt(date.substring(0,2))\n  const day = parseInt(date.substring(3,5))\n  const year = parseInt(date.substring(6,10))\n  if(month < 1 || month > 12)\n    return false\n  if(day < 1 || day > days[month-1])\n    return false\n  if(month < 1 || month > 12)\n    return false\n  if(day < 1 || day > 30 && month % 2 == 0)\n    return false\n  if(day < 1 || day > 29 && month % 2!= 0)\n    return false\n  if(month < 1 || month > 12)\n    return false\n  if(day < 1 || day > days[month-1])\n    return false\n  if(year < 2000 || year > 2020)\n    return false\n  return true\n}\n\nconsole.log(validDate('03-11-2000'))\nconsole.log(validDate('15-01-2012'))\nconsole.log(validDate('04-0-2040'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06/04/2020'))\nconsole"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(' ');\n  words = words.filter(word => word.length > 0);\n  if (words.length == 0) {\n    words = txt.split(',');\n    words = words.filter(word => word.length > 0);\n    return words.length;\n  }\n  return words;\n};\n\nconst isAlpha = (char) => char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122;\n\n/*\n  Returns the number of words in the given text\n  Examples\n  splitWords(\"Hello world!\") ➞ 3\n  splitWords(\"Hello,world!\") ➞ 2\n  splitWords(\"Hello world\") ➞ 1\n  splitWords(\"Hello world!\") ➞ 0\n  splitWords(\"Hello world!\") ➞ -1\n  */\nconst countWords = (txt) => {\n  let words = txt.split(' ');\n  words = words.filter(word => word.length > 0);\n  return words.length;\n};\n\nconst findFirstWord = (txt) => {\n  let words = txt.split(' ');\n  words = words.filter(word => word.length > 0);\n  if (words.length == 0) {\n    return false;\n  }\n  return words[0];\n};\n\nconst findLastWord = (txt) => {\n  let words = txt.split(' ');\n  words = words.filter(word => word.length > 0);\n  if (words.length == 0) {\n    return false;\n  }\n  return words[words.length - 1];\n};\n\nconst hasLetters = (txt) => {\n  let words = txt.split(' ');\n  words = words.filter(word => word.length > 0);\n  let hasLetters = false;\n  for (let word of words) {\n    if (isAlpha(word.charAt(0))) {\n      hasLetters = true;\n    }\n  }\n  return hasLetters;\n};\n\nconst isOdd = (num) => num % 2 === 1;\n\nconst getOdd = () => isOdd(countWords(\"Hello world!\"));\n\nconst getOddLetters = () => isOdd(countLetters(\"Hello world!\"));\n\nconst getWordLength = (txt) => splitWords(txt).length;\n\nconst getFirstWord = (txt) => splitWords(txt)[0];\n\nconst getLastWord = (txt) => splitWords(txt)[splitWords(txt).length - 1];\n\nconst getLetters = (txt) => countLetters(txt);\n\nconst getLettersInWord = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let lettersCount = 0;\n  for (let letter of letters) {\n    if (isAlpha(letter)) {\n      lettersCount += 1;\n    }\n  }\n  return result + lettersCount;\n}, 0);\n\nconst isEmpty = (txt) => txt.length === 0;\n\nconst hasLettersInWord = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isAlpha(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nconst hasLettersInLastWord = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isAlpha(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nconst isUpperCase = (char) => char.toUpperCase() === char;\n\nconst hasUpperCaseLetters = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isUpperCase(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nconst hasAllUpperCaseLetters = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isUpperCase(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nconst hasAllLowerCaseLetters = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isLowerCase(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nconst hasLettersInAllWords = (txt) => splitWords(txt).reduce((result, word) => {\n  let letters = word.split('');\n  let hasLetters = false;\n  for (let letter of letters) {\n    if (isAlpha(letter)) {\n      hasLetters = true;\n    }\n  }\n  return result && hasLetters;\n}, false);\n\nmodule.exports = {\n  isAlpha,\n  isEmpty,\n  isOdd,\n  hasLettersInWord,\n  hasLettersInLastWord,\n  hasAllUpperCaseLetters,\n  hasAllLowerCaseLetters,\n  "}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = null\n  let cur = null\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      if (cur === null) {\n        cur = lst[i]\n      } else if (cur === lst[i]) {\n        prev = cur\n        cur = lst[i + 1]\n      } else {\n        return false\n      }\n    } else if (lst[i] > lst[i + 1]) {\n      if (prev === null) {\n        return false\n      } else if (prev === lst[i + 1]) {\n        prev = lst[i + 1]\n      } else {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[1] < interval1[0]) {\n    return `NO`;\n  }\n\n  if (interval2[1] < interval2[0]) {\n    return `NO`;\n  }\n\n  const start = Math.min(interval1[0], interval2[0]);\n  const end = Math.max(interval1[1], interval2[1]);\n\n  if (end - start < 1) {\n    return `NO`;\n  }\n\n  const prime = primeNumber(end - start);\n\n  return prime? `YES` : `NO`;\n};\n\nconst primeNumber = (n) => {\n  let i = 2;\n  let p = 1;\n\n  while (i < n) {\n    if (n % i === 0) {\n      p = 0;\n      break;\n    }\n\n    i++;\n  }\n\n  return p;\n};\n\nexport default intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return 0;\n  let total = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    if (num < 0) {\n      total = -total;\n    }\n    total *= Math.pow(10, Math.floor(Math.log(Math.abs(num)) / Math.log(10)));\n  }\n  return total;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length === 0 || grid[0].length === 0) return [];\n  const size = grid[0].length;\n  const n = grid.length;\n  const dp = [];\n  const visited = [];\n  for (let i = 0; i < n; i++) {\n    visited[i] = [];\n  }\n\n  const visit = (i, j) => {\n    const next = [...visited[i]];\n    next.push(grid[i][j]);\n    dp.push(next);\n    const nexti = i + 1;\n    const nextj = j + 1;\n    while (nexti < n && nextj < size) {\n      const min = next.reduce((a, b) => Math.min(a, b));\n      if (min === next[nexti] && visited[nexti].indexOf(min) === -1) {\n        next[nexti] = grid[nexti][nextj];\n        visited[nexti].push(next[nexti]);\n        nexti++;\n      } else if (min === next[nextj]) {\n        next[nextj] = grid[nexti][nextj];\n        visited[nexti].push(next[nextj]);\n        nextj++;\n      } else {\n        break;\n      }\n    }\n  };\n\n  dp[0] = grid[0];\n  visited[0].push(grid[0][0]);\n  visited[0].push(grid[0][size - 1]);\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 0; j < size; j++) {\n      visit(i, j);\n    }\n  }\n\n  return dp.slice(1).sort((a, b) => a[0] - b[0]);\n};\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3));\nconsole.log(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let result = [];\n    for (let i = 1; i < n + 1; i++) {\n        let x = i;\n        if (i % 2 === 1) {\n            x = (x - 1) * 2 + 1;\n        }\n        result.push(x);\n    }\n    return result;\n};\nconsole.log(tri(5));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const count = n\n   .toString()\n   .split('')\n   .filter((d) => d.length > 0)\n   .reduce((a, b) => (a * b) % 10, 0)\n  return count % 2 === 0? 0 : count\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n    let stack = [],\n        subString,\n        currentStack,\n        openBrackets,\n        nextOpenBracket,\n        nextCloseBracket;\n\n    stack.push(string);\n\n    while (stack.length > 0) {\n        subString = stack.pop();\n\n        if (subString.length === 0) {\n            return false;\n        }\n\n        openBrackets = subString.match(/\\[/g);\n        nextOpenBracket = openBrackets[0];\n        nextCloseBracket = openBrackets[1];\n\n        currentStack = subString.split(nextOpenBracket);\n        stack.push(currentStack);\n\n        while (nextOpenBracket!== undefined && nextOpenBracket!== undefined && stack.length > 0) {\n            currentStack = stack.pop();\n            if (currentStack.length > 0) {\n                stack.push(currentStack);\n            }\n\n            nextOpenBracket = currentStack[0];\n            nextCloseBracket = currentStack[1];\n        }\n    }\n\n    return true;\n};\n\nisNested('[[]]');\nisNested('[]]]]]]][[[[[]');\nisNested('[][]');\nisNested('[]');\nisNested('[[][]]');\nisNested('[[]][[')\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = (x) => {\n    return (x + x)\n  }\n\n  return lst.reduce(sum)\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  const charType = getCharType(lastChar);\n\n  return (charType === \"letter\" &&!isWordPart(txt, txt.length - 1));\n};\n\n/* Create a function that returns true if the last two characters in a given string are both numbers and there is at least one number after it, and otherwise incorrect. Note: \"Number\" is a group of characters separated by numbers.\n  Examples:\n  checkIfLastTwoCharsAreNumbers(\"123\") ➞ false\n  checkIfLastTwoCharsAreNumbers(\"12 34\") ➞ true\n  checkIfLastTwoCharsAreNumbers(\"1a2\") ➞ false\n  checkIfLastTwoCharsAreNumbers(\"a12\") ➞ true\n  */\nconst checkIfLastTwoCharsAreNumbers = (txt) => {\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n\n  return (getCharType(lastTwoChars) === \"digit\" && getCharType(txt[txt.length - 1]) === \"digit\");\n};\n\n/* Create a function that returns true if the last character in a given string is a numeric character and not part of a number, and otherwise incorrect. Note: \"Number\" is a group of characters separated by numbers.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ false\n  checkIfLastCharIsANumber(\"12 34\") ➞ true\n  checkIfLastCharIsANumber(\"1a2\") ➞ false\n  checkIfLastCharIsANumber(\"a12\") ➞ true\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  const charType = getCharType(lastChar);\n\n  return (charType === \"digit\" &&!isNumberPart(txt, txt.length - 1));\n};\n\n/* Create a function that returns true if the last two characters in a given string are both alphabetic characters and there is at least one alphabetic character after it, and otherwise incorrect. Note: \"Alpha\" is a group of characters separated by alphabetic characters.\n  Examples:\n  checkIfLastTwoCharsAreAlpha(\"123\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"12 34\") ➞ true\n  checkIfLastTwoCharsAreAlpha(\"1a2\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"a12\") ➞ true\n  */\nconst checkIfLastTwoCharsAreAlpha = (txt) => {\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n\n  return (getCharType(lastTwoChars) === \"letter\" && getCharType(txt[txt.length - 1]) === \"letter\");\n};\n\n/* Create a function that returns true if the last two characters in a given string are both alphabetic characters and there is no alphabetic character after it, and otherwise incorrect. Note: \"Alpha\" is a group of characters separated by alphabetic characters.\n  Examples:\n  checkIfLastTwoCharsAreAlpha(\"123\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"12 34\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"1a2\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"a12\") ➞ false\n  */\nconst checkIfLastTwoCharsAreAlphaNoAlpha = (txt) => {\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n\n  return (getCharType(lastTwoChars) === \"letter\" && getCharType(txt[txt.length - 1])!== \"letter\");\n};\n\n/* Create a function that returns true if the last character in a given string is a alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetterNoWordPart = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  const charType = getCharType(lastChar);\n\n  return (charType === \"letter\" &&!isWordPart(txt, txt.length - 1));\n};\n\n/* Create a function that returns true if the last two characters in a given string are both alphabetic characters and there is no alphabetic character after it, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastTwoCharsAreAlpha(\"123\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"12 34\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"1a2\") ➞ false\n  checkIfLastTwoCharsAreAlpha(\"a12\") ➞ false\n  */\nconst checkIfLastTwoCharsAreAlphaNoAlpha = (txt) => {\n  const lastTwoChars = txt.substring(txt.length - 2, txt.length - 1);\n\n  return (getCharType(lastTwoChars) === \"letter\" && getCharType(txt[txt.length - 1])!== \"letter\");\n};\n\n/* Create a function that returns true if the last character in a given string is a numeric character and not part of a number, and otherwise incorrect. Note: \"Number\" is a group of characters separated by numbers.\n  Examples:\n  checkIfLastCharIsANumber(\"123\") ➞ false\n  checkIfLastCharIsANumber(\"12 34\") ➞ true\n  checkIfLastCharIsANumber(\"1a2\") ➞ false\n"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = -1\n  for (let i = 0; i < arr.length; i++) {\n    let temp = arr[i]\n    while (i + 1 < arr.length && arr[i + 1] > temp) {\n      temp = arr[i + 1]\n      i++\n    }\n    if (temp >= max) {\n      max = temp\n    }\n  }\n  return max\n}\n\n/*\n  Given an array with N elements, return the sum of the elements of the array.\n  The given array will not contain duplicate values.\n  */\nconst sum = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = {\n  canArrange,\n  sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = -Infinity;\n  let smallest = Infinity;\n  lst.forEach((v) => {\n    if (v > largest) largest = v;\n    if (v < smallest) smallest = v;\n  });\n  if (largest < 0) largest = 0;\n  if (smallest > 0) smallest = 0;\n  return (largest === Infinity? (null, largest) : largest) + (smallest === -Infinity? (null, smallest) : smallest);\n};\n\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7]);\nlargestSmallestIntegers([1, 2, 3, 4, 5, 6]);\nlargestSmallestIntegers([0, 1]);\nlargestSmallestIntegers([2, -1, -2, -3]);\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  if (typeof a ==='string' && typeof b ==='string') {\n    return a.toLowerCase() > b.toLowerCase()? a : b;\n  }\n  if (typeof a ==='string' && typeof b === 'number') {\n    return a.toLowerCase() > b? a : null;\n  }\n  if (typeof a === 'number' && typeof b ==='string') {\n    return b.toLowerCase() > a? b : null;\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  }\n  return null;\n};\n\nconst compare = compareOne;\n\nconst compareTwo = compareOne;\n\nconst compareThree = compareOne;\n\nconst compareFour = compareOne;\n\nconst compareFive = compareOne;\n\nconst compareSix = compareOne;\n\nconst compareSeven = compareOne;\n\nconst compareEight = compareOne;\n\nconst compareNine = compareOne;\n\nconst compareTen = compareOne;\n\nconst compareEleven = compareOne;\n\nconst compareTwelve = compareOne;\n\nconst compareThirteen = compareOne;\n\nconst compareFourteen = compareOne;\n\nconst compareFifteen = compareOne;\n\nconst compareSixteen = compareOne;\n\nconst compareSeventeen = compareOne;\n\nconst compareEighteen = compareOne;\n\nconst compareNineteen = compareOne;\n\nconst compareTwenty = compareOne;\n\nconst compareTwentyOne = compareOne;\n\nconst compareTwentyTwo = compareOne;\n\nconst compareTwentyThree = compareOne;\n\nconst compareTwentyFour = compareOne;\n\nconst compareTwentyFive = compareOne;\n\nconst compareTwentySix = compareOne;\n\nconst compareTwentySeven = compareOne;\n\nconst compareTwentyEight = compareOne;\n\nconst compareTwentyNine = compareOne;\n\nconst compareThirty = compareOne;\n\nconst compareThirtyOne = compareOne;\n\nconst compareThirtyTwo = compareOne;\n\nconst compareThirtyThree = compareOne;\n\nconst compareThirtyFour = compareOne;\n\nconst compareThirtyFive = compareOne;\n\nconst compareThirtySix = compareOne;\n\nconst compareThirtySeven = compareOne;\n\nconst compareThirtyEight = compareOne;\n\nconst compareThirtyNine = compareOne;\n\nconst compareForty = compareOne;\n\nconst compareFortyOne = compareOne;\n\nconst compareFortyTwo = compareOne;\n\nconst compareFortyThree = compareOne;\n\nconst compareFortyFour = compareOne;\n\nconst compareFortyFive = compareOne;\n\nconst compareFortySix = compareOne;\n\nconst compareFortySeven = compareOne;\n\nconst compareFortyEight = compareOne;\n\nconst compareFortyNine = compareOne;\n\nconst compareFifty = compareOne;\n\nconst compareFiftyOne = compareOne;\n\nconst compareFiftyTwo = compareOne;\n\nconst compareFiftyThree = compareOne;\n\nconst compareFiftyFour = compareOne;\n\nconst compareFiftyFive = compareOne;\n\nconst compareFiftySix = compareOne;\n\nconst compareFiftySeven = compareOne;\n\nconst compareFiftyEight = compareOne;\n\nconst compareFiftyNine = compareOne;\n\nconst compareSixty = compareOne;\n\nconst compareSixtyOne = compareOne;\n\nconst compareSixtyTwo = compareOne;\n\nconst compareSixtyThree = compareOne;\n\nconst compareSixtyFour = compareOne;\n\nconst compareSixtyFive = compareOne;\n\nconst compareSixtySix = compareOne;\n\nconst compareSixtySeven = compareOne;\n\nconst compareSixtyEight = compareOne;\n\nconst compareSixtyNine = compareOne;\n\nconst compareSeventy = compareOne;\n\nconst compareSeventyOne = compareOne;\n\nconst compareSeventyTwo = compareOne;\n\nconst compareSeventyThree = compareOne;\n\nconst compareSeventyFour = compareOne;\n\nconst compareSeventyFive = compareOne;\n\nconst compareSeventySix = compareOne;\n\nconst compareSeventySeven = compareOne;\n\nconst compareSeventyEight = compareOne;\n\nconst compareSeventyNine = compareOne;\n\nconst compareEighty = compareOne;\n\nconst compareEightyOne = compareOne;\n\nconst compareEightyTwo = compareOne;\n\nconst compareEightyThree = compareOne;\n\nconst compareEightyFour = compareOne;\n\nconst compareEightyFive = compareOne;\n\nconst compareEightySix = compareOne;\n\nconst compareEightySeven = compareOne;\n\nconst compareEightyEight = compareOne;\n\nconst compareEightyNine = compareOne;\n\nconst compareNinety = compareOne;\n\nconst compareNinetyOne = compareOne;\n\nconst compareNinetyTwo = compareOne;\n\nconst compareNinetyThree = compareOne;\n\nconst compareNinetyFour = compareOne;\n\nconst compareNinetyFive = compareOne;\n\nconst compareNinetySix = compareOne;\n\nconst compareNinetySeven = compareOne;\n\nconst compareNinetyEight = compareOne;\n\nconst compareNinetyNine = compareOne;\n\nconst compare100 = compareOne;\n\nconst compare101 = compareOne;\n\nconst compare102 = compareOne;\n\nconst compare103 = compareOne;\n\nconst compare104 = compareOne;\n\nconst compare105 = compareOne;\n\nconst compare106 = compareOne;\n\nconst compare107 = compareOne;\n\nconst compare108 = compareOne;\n\nconst compare109 = compareOne;\n\nconst compare110 = compareOne;\n\nconst compare111 = compareOne;\n\nconst compare112 = compareOne;\n\nconst compare113 = compareOne;\n\nconst compare114 = compareOne;\n\nconst compare115 = compareOne;\n\nconst compare116 = compareOne;\n\nconst compare117 = compareOne;\n\nconst compare118 = compareOne;\n\nconst compare119 = compareOne;\n"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0) && (n >= 4) && ((n % 4 === 0) && (n % 2 === 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  return (n % 2!== 0) && (n >= 4) && ((n % 4!== 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd2 = (n) => {\n  return (n % 2 === 0) && (n >= 3) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 2 positive even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd3 = (n) => {\n  return (n % 2 === 0) && (n >= 2) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 2 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd4 = (n) => {\n  return (n % 2!== 0) && (n >= 2) && ((n % 4!== 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd5 = (n) => {\n  return (n % 2 === 0) && (n >= 1) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd6 = (n) => {\n  return (n % 2!== 0) && (n >= 1) && ((n % 4!== 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 1 positive even number\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd7 = (n) => {\n  return (n % 2 === 0) && (n >= 1) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 1 positive odd number\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd8 = (n) => {\n  return (n % 2!== 0) && (n >= 1) && ((n % 4!== 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 0 positive even numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd9 = (n) => {\n  return (n % 2 === 0) && (n <= 0) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 0 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == false\n  isEqualToSumOdd(6) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd10 = (n) => {\n  return (n % 2!== 0) && (n <= 0) && ((n % 4!== 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 0 positive even numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumOdd(6) == true\n  isEqualToSumOdd(8) == true\n  */\nconst isEqualToSumOdd11 = (n) => {\n  return (n % 2 === 0) && (n <= 0) && ((n % 4 === 0) && (n % 2!== 0))\n}\n\n/*\n  Evaluate whether the given number n can be written as the sum of exactly 0 positive odd numbers\n  Example\n  isEqualToSumOdd(4) == true\n  isEqualToSumO"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const i = 1\n  const sum = 1\n  const result = 1\n\n  if (n === 0) {\n    return 1\n  }\n\n  while (n > 0) {\n    sum = sum * n\n    n = n - 1\n    result = result * sum\n  }\n\n  return result\n}\n\nexport default specialFactorial\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s/g, \"_\");\n};\n\nconst cleanString = (text) => {\n    return text.replace(/^\\s+|\\s+$/g, \"\");\n};\n\nconst parse = (text) => {\n    let parsed = {\n        title: cleanString(text.split(\"\\n\")[0]),\n        text: cleanString(text.split(\"\\n\")[1]),\n        tags: cleanString(text.split(\"\\n\")[2]),\n        date: cleanString(text.split(\"\\n\")[3])\n    };\n    parsed.tags = parsed.tags.split(/\\s+/);\n    return parsed;\n};\n\nconst isValidTag = (tag) => {\n    return tag.length > 0 && tag.length < 5;\n};\n\nconst isValidDate = (date) => {\n    let parsedDate = parse(date);\n    let now = new Date();\n    let year = parseInt(parsedDate.date.substring(0,4));\n    let month = parseInt(parsedDate.date.substring(5,7));\n    let day = parseInt(parsedDate.date.substring(8,10));\n    let yearDiff = (year - now.getFullYear());\n    let monthDiff = (month - now.getMonth() + 12);\n    let dayDiff = (day - now.getDate());\n    return yearDiff >= -2 && monthDiff >= 0 && dayDiff >= 0;\n};\n\nconst isValidTitle = (title) => {\n    return title.length > 0 && title.length < 25;\n};\n\nconst isValidText = (text) => {\n    return text.length > 0 && text.length < 250;\n};\n\nconst isValid = (text) => {\n    return isValidTitle(text.title) && isValidTag(text.tags) && isValidDate(text.date) && isValidText(text.text);\n};\n\nmodule.exports = isValid;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid = /(?!(0|9|\\.))([a-zA-Z]|[0-9]|[a-zA-Z][0-9]|[a-zA-Z][0-9][0-9]|[0-9][a-zA-Z])/.test(file_name);\n  return valid? 'Yes' : 'No';\n};\n\n/* Create a function which takes a string representing a file's path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if all the following conditions are met:\n  - The path should not contain any slash characters ('/')\n  - The path should not be empty.\n  - The path should start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n  Examples:\n  filePathCheck(\"c:/example.txt\") # => 'Yes'\n  filePathCheck(\"/example.txt\") # => 'No' (the path starts with a slash)\n  filePathCheck(\"example.txt\") # => 'No' (the path is empty)\n  */\nconst filePathCheck = (file_path) => {\n  const valid = /^[a-zA-Z]/.test(file_path);\n  return valid? 'Yes' : 'No';\n};\n\n/*Create a function which takes a string representing a path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if all the following conditions are met:\n  - The path should not contain any backslash characters ('\\\\')\n  - The path should not be empty.\n  - The path should start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n  Examples:\n  filePathCheck(\"c:\\\\example.txt\") # => 'Yes'\n  filePathCheck(\"\\\\example.txt\") # => 'No' (the path starts with a backslash)\n  filePathCheck(\"example.txt\") # => 'No' (the path is empty)\n  */\nconst pathCheck = (path) => {\n  const valid = /^[a-zA-Z]/.test(path);\n  return valid? 'Yes' : 'No';\n};\n\n/*Create a function which takes a string representing a file's path, and returns\n  'Yes' if the the path is valid, and returns 'No' otherwise.\n  A path is considered to be valid if and only if all the following conditions are met:\n  - The path should not contain any backslash characters ('\\\\')\n  - The path should not be empty.\n  - The path should start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z').\n  Examples:\n  filePathCheck(\"c:\\\\example.txt\") # => 'Yes'\n  filePathCheck(\"\\\\example.txt\") # => 'No' (the path starts with a backslash)\n  filePathCheck(\"example.txt\") # => 'No' (the path is empty)\n  */\nconst filePathCheck = (file_path) => {\n  const valid = /^[a-zA-Z]/.test(file_path);\n  return valid? 'Yes' : 'No';\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions are met:\n  - The file's name should contain one or more digits ('0'-'9')\n  - The file's name should not start with a number\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.txt\") # => 'No' (the name should not start with a number)\n  fileNameCheck(\"hello.txt\") # => 'No' (the name contains no digits)\n  */\nconst fileNameCheck = (file_name) => {\n  const valid = /(?=\\d|\\d[a-zA-Z]|[a-zA-Z][0-9]|[a-zA-Z][0-9][0-9]|[0-9][a-zA-Z])/.test(file_name);\n  return valid? 'Yes' : 'No';\n};\n\nconst path = \"c:/\";\nconst file_name = \"example.txt\";\nconst file_path = path + file_name;\n\nconsole.log(fileNameCheck(file_name));\nconsole.log(filePathCheck(file_path));\nconsole.log(pathCheck(path));\nconsole.log(filePathCheck(file_path));\nconsole.log(fileNameCheck(file_name));<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((a, b) => {\n        if (Math.abs(b) > 1) {\n            if ((Math.abs(b) % 3) === 0) {\n                a += b * b;\n            } else if ((Math.abs(b) % 4) === 0) {\n                a += b * b * b;\n            }\n        }\n        return a;\n    }, 0);\n};\n\nconst squareAndCube = (lst) => {\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        if ((Math.abs(i) % 3) === 0) {\n            result.push(lst[i] * lst[i]);\n        } else if ((Math.abs(i) % 4) === 0) {\n            result.push(lst[i] * lst[i] * lst[i]);\n        }\n    }\n    return result;\n};\n\nconst findLst = (lst, sum) => {\n    if (sumSquares(lst) === sum) {\n        return lst;\n    } else {\n        return findLst(squareAndCube(lst), sum);\n    }\n};\n\nconsole.log(findLst([1,2,3], 6));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  const len = words.length\n  const primes = new Array(len).fill(1).map(() => new Array(len).fill(0))\n  for (let i = 0; i < len; i++) {\n    primes[i][i] = 1\n  }\n  const result = words.map((w, i) => {\n    let newWord = ''\n    for (let j = i; j < len; j++) {\n      if (primes[j][i] === 1) {\n        newWord += w[j - i]\n        break\n      }\n    }\n    return newWord\n  })\n  return result.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const xDigits = x.split('')\n  const nDigits = n.split('')\n  const xLength = xDigits.length\n  const nLength = nDigits.length\n  if (xLength!== nLength) {\n    return false\n  }\n  let carry = 0\n  let i = 0\n  let j = 0\n  while (i < xLength && j < nLength) {\n    const xDigit = parseInt(xDigits[i])\n    const nDigit = parseInt(nDigits[j])\n    const result = xDigit * nDigit\n    if (carry === 1) {\n      carry = 0\n    } else if (carry === 0) {\n      if (result > 9) {\n        carry = 1\n      } else if (result < 9) {\n        carry = 0\n      }\n    }\n    if (carry === 0) {\n      xDigits[i] = result\n    } else {\n      xDigits[i] = result + 1\n    }\n    i += 1\n    j += 1\n  }\n  const isValid = carry === 0\n  if (isValid) {\n    return true\n  }\n  return false\n}\n\nconsole.log(simplify('1/2', '1/3'))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      sorted.unshift(nums[i]);\n    } else {\n      sorted.push(nums[i]);\n    }\n  }\n  return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = nums.filter(number => {\n    if (number % 2 === 0) return false;\n    if (number % 10 === 0) return false;\n    if (number % 10 === 9) return true;\n    return number % 10 > 1;\n  })\n  return filter.length;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === n && i!== 1 && j!== 1 && k!== 1) {\n          result.push([i, j, k]);\n        }\n      }\n    }\n  }\n\n  return result.length;\n};\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n*/\nconst getMaxTriples2 = (n) => {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === n && i!== 1 && j!== 1 && k!== 1) {\n          result.push([i, j, k]);\n        }\n      }\n    }\n  }\n\n  return result.length;\n};\n\n/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n*/\nconst getMaxTriples3 = (n) => {\n  const result = [];\n\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i + j + k === n && i!== 1 && j!== 1 && k!== 1) {\n          result.push([i, j, k]);\n        }\n      }\n    }\n  }\n\n  return result.length;\n};\n\nconst n = parseInt(process.argv[2]);\nconst maxTriples = getMaxTriples(n);\n\nconsole.log(maxTriples);\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planet = [\n        {\n            name: \"Mercury\",\n            orbit: \"Jupiter\",\n            distance: 0.387098,\n            period: 1.5615,\n            day: 0.9507,\n        },\n        {\n            name: \"Venus\",\n            orbit: \"Earth\",\n            distance: 0.7233,\n            period: 1.8892,\n            day: 0.8600,\n        },\n        {\n            name: \"Earth\",\n            orbit: \"Mars\",\n            distance: 1.00000,\n            period: 2.43,\n            day: 1.0000,\n        },\n        {\n            name: \"Mars\",\n            orbit: \"Jupiter\",\n            distance: 1.5143,\n            period: 3.394,\n            day: 1.44,\n        },\n        {\n            name: \"Jupiter\",\n            orbit: \"Saturn\",\n            distance: 5.2092,\n            period: 10.2,\n            day: 4.8,\n        },\n        {\n            name: \"Saturn\",\n            orbit: \"Uranus\",\n            distance: 22.60,\n            period: 31.8,\n            day: 29.8,\n        },\n        {\n            name: \"Uranus\",\n            orbit: \"Neptune\",\n            distance: 64.8,\n            period: 84.5,\n            day: 1.5,\n        },\n        {\n            name: \"Neptune\",\n            orbit: \"Sun\",\n            distance: 1.0,\n            period: 1.25,\n            day: 0.00,\n        },\n    ];\n    let found = false;\n    let distance = 0;\n    let distanceIndex = 0;\n    let i = 0;\n    while (i < planet.length) {\n        if (distance >= planet[i].distance) {\n            distance = planet[i].distance;\n            distanceIndex = i;\n        }\n        i++;\n    }\n    while (i < planet.length) {\n        if (planet[i].orbit === planet[distanceIndex].orbit) {\n            found = true;\n            break;\n        }\n        i++;\n    }\n    if (!found) {\n        return \"\";\n    }\n    let result = [];\n    let planetIndex = 0;\n    while (i < planet.length) {\n        if (planet[i].orbit === planet[distanceIndex].orbit) {\n            result.push({\n                name: planet[i].name,\n                distance: planet[i].distance,\n                period: planet[i].period,\n                day: planet[i].day,\n            });\n            planetIndex++;\n        }\n        if (planetIndex === planet.length - 1) {\n            break;\n        }\n        i++;\n    }\n    return result;\n};\n\nconst test = [\n    bf(\"Mercury\", \"Jupiter\"),\n    bf(\"Mercury\", \"Earth\"),\n    bf(\"Mercury\", \"Mars\"),\n    bf(\"Mercury\", \"Saturn\"),\n    bf(\"Mercury\", \"Uranus\"),\n    bf(\"Mercury\", \"Neptune\"),\n    bf(\"Mercury\", \"Sun\"),\n    bf(\"Earth\", \"Jupiter\"),\n    bf(\"Earth\", \"Mars\"),\n    bf(\"Earth\", \"Saturn\"),\n    bf(\"Earth\", \"Uranus\"),\n    bf(\"Earth\", \"Neptune\"),\n    bf(\"Earth\", \"Sun\"),\n    bf(\"Mars\", \"Jupiter\"),\n    bf(\"Mars\", \"Saturn\"),\n    bf(\"Mars\", \"Uranus\"),\n    bf(\"Mars\", \"Neptune\"),\n    bf(\"Mars\", \"Sun\"),\n    bf(\"Jupiter\", \"Saturn\"),\n    bf(\"Jupiter\", \"Uranus\"),\n    bf(\"Jupiter\", \"Neptune\"),\n    bf(\"Jupiter\", \"Sun\"),\n    bf(\"Saturn\", \"Uranus\"),\n    bf(\"Saturn\", \"Neptune\"),\n    bf(\"Saturn\", \"Sun\"),\n    bf(\"Uranus\", \"Neptune\"),\n    bf(\"Uranus\", \"Sun\"),\n    bf(\"Neptune\", \"Sun\"),\n];\n\ntest.forEach(t => {\n    console.log(t);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let len = lst.length\n  let result = []\n  let sum = 0\n  while (len--) {\n    sum += lst[len].length\n    if (sum % 2 === 0) {\n      result.push(lst[len])\n    }\n  }\n  return result.sort()\n}\n\nconst list_sort = (lst) => {\n  let len = lst.length\n  let result = []\n  let sum = 0\n  while (len--) {\n    sum += lst[len].length\n    if (sum % 2 === 0) {\n      result.push(lst[len])\n    }\n  }\n  return result.sort((a, b) => a.length - b.length)\n}\n\nmodule.exports = list_sort\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if(n % 2 === 0) {\n        return x\n    } else {\n        return y\n    }\n}\n\nconsole.log(xOrY(7, 34, 12))<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const len = lst.length;\n  if (len === 0) return 0;\n  const sum = lst.reduce((prev, curr) => prev + curr, 0);\n  const oddSum = sum % 2 === 1? sum : sum - 1;\n  return oddSum;\n};\n\nconsole.log(doubleTheDifference([9, -2, 0]));\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let correct = 0;\n  let total = 0;\n  let diffs = [];\n  for (let i = 0; i < game.length; i++) {\n    let diff = game[i] - guess[i];\n    if (diff === 0) {\n      correct++;\n    }\n    total++;\n    diffs.push(diff);\n  }\n  return [correct, total, diffs];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (typeof class_name!=='string') {\n    throw new Error('class_name must be a string');\n  }\n\n  if (typeof extensions!== 'object' || Object.keys(extensions).length === 0) {\n    throw new Error('extensions must be an array of strings');\n  }\n\n  const class_name_split = class_name.split('.');\n\n  const extension_names = Object.keys(extensions);\n  const class_name_lower_case = class_name_split.map(s => s.toLowerCase());\n  const extension_names_lower_case = extension_names.map(s => s.toLowerCase());\n\n  // Get the strength of the class_name\n  let class_name_strength = class_name_lower_case.length;\n\n  // Get the strength of the extensions\n  extension_names.forEach(extension => {\n    const extension_strength = extension_names_lower_case.indexOf(extension);\n    class_name_strength = Math.max(class_name_strength, extension_strength);\n  });\n\n  // Return the class_name with the strongest extension\n  return `${class_name_split.join('.')}${class_name_strength >= 0? '.' : ''}${extension_names.find(extension => extension_names_lower_case.indexOf(extension) === class_name_strength).toLowerCase()}`;\n};\n\n// Get the longest common prefix\nconst lcp = (str1, str2) => {\n  let index = 0;\n  while (str1.charAt(index) === str2.charAt(index)) {\n    index++;\n  }\n\n  return str1.slice(0, index);\n};\n\n// Get the class name and the longest common prefix\nconst lcp_split = (str, ext) => {\n  let index = 0;\n  let class_name = str;\n  let prefix = lcp(str, ext);\n  while (class_name.indexOf('.')!== -1) {\n    const class_name_split = class_name.split('.');\n    const prefix_split = prefix.split('.');\n    const lcp_split = lcp(class_name_split[0], prefix_split[0]);\n    class_name = class_name_split[1];\n    prefix = prefix_split[1];\n  }\n\n  return [class_name, prefix];\n};\n\n// Get the class name and the strongest extension\nconst lcp_class_extension = (class_name, extensions) => {\n  if (typeof class_name!=='string') {\n    throw new Error('class_name must be a string');\n  }\n\n  if (typeof extensions!== 'object' || Object.keys(extensions).length === 0) {\n    throw new Error('extensions must be an array of strings');\n  }\n\n  const [class_name_split, prefix] = lcp_split(class_name, strongestExtension(class_name, extensions));\n  return [class_name_split, prefix];\n};\n\nmodule.exports = lcp_class_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    const bLength = b.length;\n    const aLength = a.length;\n    const bArray = b.split(\"\");\n    const aArray = a.split(\"\");\n    const result = [];\n    let aIndex = 0;\n    let bIndex = 0;\n    while (aIndex < aLength && bIndex < bLength) {\n        if (aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n            continue;\n        }\n        let currentResult = [];\n        while (aIndex < aLength && bIndex < bLength && aArray[aIndex] === bArray[bIndex]) {\n            currentResult.push(aArray[aIndex]);\n            aIndex++;\n            bIndex++;\n        }\n        if (currentResult.length > 0) {\n            result.push(currentResult.join(\"\"));\n        }\n    }\n    return result.length > 0;\n};\n\nconst cycpattern = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    const aArray = a.split(\"\");\n    const bArray = b.split(\"\");\n    for (let i = 0; i < a.length; i++) {\n        if (aArray[i] === bArray[i]) {\n            continue;\n        }\n        let currentResult = [];\n        let aIndex = i + 1;\n        let bIndex = i + 1;\n        while (aIndex < a.length && bIndex < b.length && aArray[aIndex] === bArray[bIndex]) {\n            currentResult.push(aArray[aIndex]);\n            aIndex++;\n            bIndex++;\n        }\n        if (currentResult.length === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst cyclicPattern = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    const aArray = a.split(\"\");\n    const bArray = b.split(\"\");\n    const aLength = a.length;\n    const bLength = b.length;\n    let aIndex = 0;\n    let bIndex = 0;\n    while (aIndex < aLength && bIndex < bLength) {\n        if (aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n            continue;\n        }\n        let currentResult = [];\n        while (aIndex < aLength && bIndex < bLength && aArray[aIndex] === bArray[bIndex]) {\n            currentResult.push(aArray[aIndex]);\n            aIndex++;\n            bIndex++;\n        }\n        if (currentResult.length === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst cyclicPattern2 = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    const aArray = a.split(\"\");\n    const bArray = b.split(\"\");\n    const aLength = a.length;\n    const bLength = b.length;\n    let aIndex = 0;\n    let bIndex = 0;\n    while (aIndex < aLength && bIndex < bLength) {\n        if (aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n            continue;\n        }\n        while (aIndex < aLength && bIndex < bLength && aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n        }\n        if (aIndex === aLength && bIndex < bLength) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst cyclicPattern3 = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    const aArray = a.split(\"\");\n    const bArray = b.split(\"\");\n    const aLength = a.length;\n    const bLength = b.length;\n    let aIndex = 0;\n    let bIndex = 0;\n    while (aIndex < aLength && bIndex < bLength) {\n        if (aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n            continue;\n        }\n        while (aIndex < aLength && bIndex < bLength && aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n        }\n        if (aIndex === aLength && bIndex < bLength) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst cyclicPattern4 = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    const aArray = a.split(\"\");\n    const bArray = b.split(\"\");\n    const aLength = a.length;\n    const bLength = b.length;\n    let aIndex = 0;\n    let bIndex = 0;\n    while (aIndex < aLength && bIndex < bLength) {\n        if (aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n            continue;\n        }\n        while (aIndex < aLength && bIndex < bLength && aArray[aIndex] === bArray[bIndex]) {\n            aIndex++;\n            bIndex++;\n        }\n        if (aIndex === aLength && bIndex < bLength) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = {\n    cyclicPattern,\n    cyclicPattern2,\n    cyclicPattern3,\n    cyclicPattern4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 1;\n    let odd = 1;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n        num -= 1;\n    }\n    return (even, odd);\n};\n\n/*GReturns a tuple with the largest and smallest of the given list.\n\n   Example:\n      greatestMin([4, 2, 1, 3]) ==> (4, 1)\n      greatestMin([-1, -2, -3, -4]) ==> (-1, -4)\n  */\nconst greatestMin = (list) => {\n    let biggest = 0;\n    let smallest = Number.MAX_VALUE;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] < smallest) {\n            smallest = list[i];\n        }\n        if (list[i] > biggest) {\n            biggest = list[i];\n        }\n    }\n    return (biggest, smallest);\n};\n\n/*GReturns a tuple with the largest and smallest of the given list.\n\n   Example:\n      greatestMin([4, 2, 1, 3]) ==> (4, 1)\n      greatestMin([-1, -2, -3, -4]) ==> (-1, -4)\n  */\nconst greatestMax = (list) => {\n    let biggest = 0;\n    let smallest = Number.MIN_VALUE;\n    for (let i = 0; i < list.length; i++) {\n        if (list[i] > biggest) {\n            biggest = list[i];\n        }\n        if (list[i] < smallest) {\n            smallest = list[i];\n        }\n    }\n    return (biggest, smallest);\n};\n\n/*GReturns the number of adjacent ones in the given number.\n\n   Example:\n      adjacentCount(12345) ==> 4\n  */\nconst adjacentCount = (num) => {\n    let count = 0;\n    for (let i = 1; i <= num; i++) {\n        if (num % i === 0) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/*GReturns the largest and smallest number with the given number of adjacent ones.\n\n   Example:\n      largestMinAdjacent(12345) ==> 12345\n      largestMinAdjacent(12345) ==> 12345\n  */\nconst largestMinAdjacent = (num) => {\n    let max = 0;\n    let min = 0;\n    let i = 1;\n    while (i <= num) {\n        if (adjacentCount(i) > max) {\n            max = adjacentCount(i);\n            min = i;\n        }\n        i++;\n    }\n    return (min, max);\n};\n\n/*GReturns the largest and smallest number with the given number of adjacent ones.\n\n   Example:\n      largestMinAdjacent(12345) ==> 12345\n      largestMinAdjacent(12345) ==> 12345\n  */\nconst largestMaxAdjacent = (num) => {\n    let max = 0;\n    let min = 0;\n    let i = 1;\n    while (i <= num) {\n        if (adjacentCount(i) > max) {\n            max = adjacentCount(i);\n            min = i;\n        }\n        i++;\n    }\n    return (min, max);\n};\n\n/*GReturns the largest and smallest number with the given number of adjacent ones.\n\n   Example:\n      largestMinAdjacent(12345) ==> 12345\n      largestMinAdjacent(12345) ==> 12345\n  */\nconst smallestMaxAdjacent = (num) => {\n    let max = 0;\n    let min = 0;\n    let i = 1;\n    while (i <= num) {\n        if (adjacentCount(i) < max) {\n            max = adjacentCount(i);\n            min = i;\n        }\n        i++;\n    }\n    return (min, max);\n};\n\n/*GReturns the largest and smallest number with the given number of adjacent ones.\n\n   Example:\n      largestMinAdjacent(12345) ==> 12345\n      largestMinAdjacent(12345) ==> 12345\n  */\nconst smallestMinAdjacent = (num) => {\n    let max = 0;\n    let min = 0;\n    let i = 1;\n    while (i <= num) {\n        if (adjacentCount(i) < max) {\n            max = adjacentCount(i);\n            min = i;\n        }\n        i++;\n    }\n    return (min, max);\n};\n\n/*GReturns the number of digits in the given number.\n\n   Example:\n      digitCount(12345) ==> 5\n  */\nconst digitCount = (num) => {\n    return (num).toString().length;\n};\n\n/*GReturns the number of digits in the given number.\n\n   Example:\n      digitCount(12345) ==> 5\n  */\nconst largestDigitCount = (num) => {\n    let max = 0;\n    let i = 1;\n    while (i <= num) {\n        if (digitCount(i) > max) {\n            max = digitCount(i);\n        }\n        i++;\n    }\n    return max;\n};\n\n/*GReturns the number of digits in the given number.\n\n   Example:\n      digitCount(12345) ==> 5\n  */\nconst smallestDigitCount = (num) => {\n    let max = 0;\n    let i = 1;\n    while (i <= num) {\n        if (digitCount(i) < max) {\n            max = digitCount(i);\n        }\n        i++;\n    }\n    return max;\n};\n\n/*GReturns the number of digits in the given number.\n\n   Example:\n      digitCount(12345) ==> 5\n  */\nconst largestMinDigitCount = (num) => {\n    let max = 0;\n    let min = 0;\n    let i = 1;\n    while (i <= num) {\n        if (digitCount(i) > max) {\n            max = digit"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = [];\n  for (let i = 0; i <= number; i++) {\n    if (i >= 1000) {\n      result.push('M');\n      i = i - 1000;\n    }\n    if (i >= 900) {\n      result.push('CM');\n      i = i - 900;\n    }\n    if (i >= 500) {\n      result.push('D');\n      i = i - 500;\n    }\n    if (i >= 400) {\n      result.push('CD');\n      i = i - 400;\n    }\n    if (i >= 100) {\n      result.push('C');\n      i = i - 100;\n    }\n    if (i >= 90) {\n      result.push('XC');\n      i = i - 90;\n    }\n    if (i >= 50) {\n      result.push('L');\n      i = i - 50;\n    }\n    if (i >= 40) {\n      result.push('XL');\n      i = i - 40;\n    }\n    if (i >= 10) {\n      result.push('X');\n      i = i - 10;\n    }\n    if (i >= 9) {\n      result.push('IX');\n      i = i - 9;\n    }\n    if (i >= 5) {\n      result.push('V');\n      i = i - 5;\n    }\n    if (i >= 4) {\n      result.push('IV');\n      i = i - 4;\n    }\n    if (i >= 1) {\n      result.push('I');\n      i = i - 1;\n    }\n  }\n  return result.join('');\n};\n\nconst romanToInt = (num) => {\n  let result = 0;\n  let i = num.length - 1;\n  let prev = num[i];\n  while (i >= 0) {\n    if (num[i] === 'I') {\n      result += 1;\n    } else if (num[i] === 'V') {\n      result += 5;\n    } else if (num[i] === 'X') {\n      result += 10;\n    } else if (num[i] === 'L') {\n      result += 50;\n    } else if (num[i] === 'C') {\n      result += 100;\n    } else if (num[i] === 'D') {\n      result += 500;\n    } else if (num[i] === 'M') {\n      result += 1000;\n    }\n    i--;\n  }\n  return result;\n};\n\nconsole.log(intToMiniRoman(romanToInt(intToMiniRoman(424))));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const a_b_c = Math.sqrt((a * a) + (b * b) + (c * c));\n    return (a_b_c == Math.sqrt((a * a) + (b * b)));\n}\n\nconst rightAngleTriangle2 = (a, b, c) => {\n    const a_b_c = Math.sqrt((a * a) + (b * b) + (c * c));\n    return (a_b_c == Math.sqrt((a * a) + (b * b)) && a_b_c == Math.sqrt((a * a) + (b * b) + (c * c)));\n}\n\nconst rightAngleTriangle3 = (a, b, c) => {\n    const a_b_c = Math.sqrt((a * a) + (b * b) + (c * c));\n    return (a_b_c == Math.sqrt((a * a) + (b * b)) && a_b_c == Math.sqrt((a * a) + (b * b) + (c * c)) && a_b_c == Math.sqrt((a * a) + (b * b) + (c * c)));\n}\n\nmodule.exports = {\n    rightAngleTriangle,\n    rightAngleTriangle2,\n    rightAngleTriangle3\n}<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const value = map.get(words[i]);\n    if (value) {\n      value++;\n    } else {\n      map.set(words[i], 1);\n    }\n  }\n  let max = -Infinity;\n  for (let [key, value] of map) {\n    if (value > max) {\n      max = value;\n    }\n  }\n  return words.find((word) => map.get(word) === max);\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(findMax([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"])); // \"\"aaaaaaa\"\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number, remaining]\n  } else {\n    return [number, need - number]\n  }\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const add = (a, b) => a + b\n    const subtract = (a, b) => a - b\n    const multiply = (a, b) => a * b\n    const floorDivide = (a, b) => Math.floor(a / b)\n    const exponentiate = (a, b) => a ** b\n    const isOperator = (operator) => Array.isArray(operator) && operator.length >= 2\n    const isOperand = (operand) => Array.isArray(operand) && operand.length >= 2\n\n    const isEqual = (a, b) => a === b\n\n    let result = 0\n\n    if (!isOperator(operator) ||!isOperand(operand)) {\n        throw new Error('Invalid arguments')\n    }\n\n    if (operand.length > 1) {\n        if (operator.length === 1) {\n            if (isEqual(operator[0], operand[0])) {\n                return operand[0]\n            }\n        } else if (operator.length === 2) {\n            if (isEqual(operator[0], operand[0]) && isEqual(operator[1], operand[1])) {\n                return operand[0] * operand[1]\n            } else if (isEqual(operator[0], operand[1]) && isEqual(operator[1], operand[0])) {\n                return operand[1] * operand[0]\n            }\n        }\n    }\n\n    if (operator.length === 1) {\n        if (operator[0] === '+') {\n            result = operand.reduce((a, b) => a + b, 0)\n        } else if (operator[0] === '-') {\n            result = operand.reduce((a, b) => a - b, 0)\n        } else if (operator[0] === '*') {\n            result = operand.reduce((a, b) => a * b, 1)\n        } else if (operator[0] === '/') {\n            result = operand.reduce((a, b) => a / b, 1)\n        } else if (operator[0] === '**') {\n            result = exponentiate(operand[0], operand[1])\n        }\n    } else if (operator.length === 2) {\n        if (operator[0] === '+' && operator[1] === '+') {\n            result = add(operand[0], operand[1])\n        } else if (operator[0] === '+' && operator[1] === '-') {\n            result = subtract(operand[0], operand[1])\n        } else if (operator[0] === '+' && operator[1] === '*') {\n            result = multiply(operand[0], operand[1])\n        } else if (operator[0] === '+' && operator[1] === '/') {\n            result = floorDivide(operand[0], operand[1])\n        } else if (operator[0] === '+' && operator[1] === '**') {\n            result = exponentiate(operand[0], operand[1])\n        } else if (operator[0] === '-' && operator[1] === '+') {\n            result = subtract(operand[1], operand[0])\n        } else if (operator[0] === '-' && operator[1] === '-') {\n            result = subtract(operand[0], operand[1])\n        } else if (operator[0] === '-' && operator[1] === '*') {\n            result = subtract(operand[0], operand[1])\n        } else if (operator[0] === '-' && operator[1] === '/') {\n            result = subtract(operand[0], operand[1])\n        } else if (operator[0] === '-' && operator[1] === '**') {\n            result = exponentiate(operand[0], operand[1])\n        } else if (operator[0] === '*' && operator[1] === '+') {\n            result = multiply(operand[0], operand[1])\n        } else if (operator[0] === '*' && operator[1] === '-') {\n            result = multiply(operand[1], operand[0])\n        } else if (operator[0] === '*' && operator[1] === '*') {\n            result = multiply(operand[0], operand[1])\n        } else if (operator[0] === '*' && operator[1] === '/') {\n            result = multiply(operand[0], operand[1])\n        } else if (operator[0] === '*' && operator[1] === '**') {\n            result = exponentiate(operand[0], operand[1])\n        } else if (operator[0] === '/' && operator[1] === '+') {\n            result = subtract(operand[1], operand[0])\n        } else if (operator[0] === '/' && operator[1] === '-') {\n            result = subtract(operand[1], operand[0])\n        } else if (operator[0] === '/' && operator[1] === '*') {\n            result = subtract(operand[0], operand[1])\n        } else if (operator[0] === '/' && operator[1] === '**') {\n            result = exponentiate(operand[0], operand[1])"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const map = {\n    a: 'a',\n    b: 'B',\n    c: 'C',\n    d: 'D',\n    e: 'E',\n    f: 'F',\n    g: 'G',\n    h: 'H',\n    i: 'I',\n    j: 'J',\n    k: 'K',\n    l: 'L',\n    m: 'M',\n    n: 'N',\n    o: 'O',\n    p: 'P',\n    q: 'Q',\n    r: 'R',\n    s: 'S',\n    t: 'T',\n    u: 'U',\n    v: 'V',\n    w: 'W',\n    x: 'X',\n    y: 'Y',\n    z: 'Z'\n  }\n  const ret = s.split('')\n   .map(\n      (letter) =>\n        letter === map[ret[ret.length - 1]]\n         ? (ret.pop()).toUpperCase()\n          : (map[ret[ret.length - 1]]).toUpperCase()\n    )\n   .join('')\n  return ret.join('')\n}\n\nconsole.log(solve('1234'))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (!text) {\n        return \"\";\n    }\n\n    return crypto.createHash(\"md5\").update(text).digest(\"hex\");\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenDigits = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateOddDigits = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2!== 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenAndOddDigits = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0 || num % 2!== 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenAndOddDigits1 = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n  }\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2!== 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenDigitsByDivide = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n    if (num % 3 === 0) {\n      result.push(num)\n    }\n    if (num % 5 === 0) {\n      result.push(num)\n    }\n    if (num % 7 === 0) {\n      result.push(num)\n    }\n    if (num % 11 === 0) {\n      result.push(num)\n    }\n    if (num % 13 === 0) {\n      result.push(num)\n    }\n    if (num % 17 === 0) {\n      result.push(num)\n    }\n    if (num % 19 === 0) {\n      result.push(num)\n    }\n    if (num % 23 === 0) {\n      result.push(num)\n    }\n    if (num % 29 === 0) {\n      result.push(num)\n    }\n    if (num % 31 === 0) {\n      result.push(num)\n    }\n    if (num % 37 === 0) {\n      result.push(num)\n    }\n    if (num % 41 === 0) {\n      result.push(num)\n    }\n    if (num % 43 === 0) {\n      result.push(num)\n    }\n    if (num % 47 === 0) {\n      result.push(num)\n    }\n    if (num % 53 === 0) {\n      result.push(num)\n    }\n    if (num % 59 === 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenDigitsByAdd = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n    if (num % 3 === 0) {\n      result.push(num)\n    }\n    if (num % 5 === 0) {\n      result.push(num)\n    }\n    if (num % 7 === 0) {\n      result.push(num)\n    }\n    if (num % 11 === 0) {\n      result.push(num)\n    }\n    if (num % 13 === 0) {\n      result.push(num)\n    }\n    if (num % 17 === 0) {\n      result.push(num)\n    }\n    if (num % 19 === 0) {\n      result.push(num)\n    }\n    if (num % 23 === 0) {\n      result.push(num)\n    }\n    if (num % 29 === 0) {\n      result.push(num)\n    }\n    if (num % 31 === 0) {\n      result.push(num)\n    }\n    if (num % 37 === 0) {\n      result.push(num)\n    }\n    if (num % 41 === 0) {\n      result.push(num)\n    }\n    if (num % 43 === 0) {\n      result.push(num)\n    }\n    if (num % 47 === 0) {\n      result.push(num)\n    }\n    if (num % 53 === 0) {\n      result.push(num)\n    }\n    if (num % 59 === 0) {\n      result.push(num)\n    }\n  }\n  return result\n}\n\nconst generateEvenDigitsBySubtract = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i++) {\n    let num = parseInt(i)\n    if (num % 2 === 0) {\n      result.push(num)\n    }\n    if (num % 3 === 0) {\n      result.push(num)\n    }\n    if (num % 5 === 0) {\n      result.push(num)\n    }\n    if (num % 7 === 0) {\n"}
