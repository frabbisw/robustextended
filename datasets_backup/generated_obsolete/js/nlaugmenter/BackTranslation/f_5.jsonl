{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const nums = numbers.sort();\n  for (let i = 1; i < nums.length; i++) {\n    if (Math.abs(nums[i] - nums[i - 1]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// ---------------------------------------------------------------------------\n//  @returns the number of digits in the given number.\n//  @example:\n//  >>> digitLength('12345')\n//  5\n//  >>> digitLength('123.45')\n//  3\n//  >>> digitLength('12.34')\n//  2\n//  >>> digitLength(1234)\n//  4\n//  >>> digitLength(1e-3)\n//  4\n//  >>> digitLength('abc')\n//  0\n//  >>> digitLength(1)\n//  0\n//  >>> digitLength(0.0000001)\n//  5\n//  >>> digitLength(-0.0000001)\n//  5\n//  >>> digitLength(-1)\n//  0\n//  >>> digitLength(-1e-3)\n//  0\n//  >>> digitLength(-0.0000001)\n//  5\n//  >>> digitLength(0)\n//  0\n//  >>> digitLength(0.0)\n//  0\n//  >>> digitLength('abc')\n//  0\n//  >>> digitLength(true)\n//  0\n//  >>> digitLength(false)\n//  0\n//  >>> digitLength(undefined)\n//  0\n//  >>> digitLength({})\n//  0\n//  >>> digitLength([])\n//  0\n//  >>> digitLength('')\n//  0\n//  >>> digitLength(' ')\n//  0\n//  >>> digitLength('abc')\n//  0\n//  >>> digitLength(null)\n//  0\n//  >>> digitLength(NaN)\n//  0\n//  >>> digitLength(Infinity)\n//  0\n//  >>> digitLength(-Infinity)\n//  0\n//  >>> digitLength('abc', 5)\n//  0\n//  >>> digitLength('abc', 3)\n//  0\n//  >>> digitLength('abc', 1)\n//  0\n//  >>> digitLength('abc', 0)\n//  0\n//  >>> digitLength('abc', -1)\n//  0\n//  >>> digitLength('abc', -3)\n//  0\n//  >>> digitLength('abc', -5)\n//  0\n//  >>> digitLength('abc', -9)\n//  0\n//  >>> digitLength('abc', -10)\n//  0\n//  >>> digitLength('abc', -100)\n//  0\n//  >>> digitLength('abc', -1000)\n//  0\n//  >>> digitLength('abc', -1e3)\n//  0\n//  >>> digitLength('abc', -1e-3)\n//  0\n//  >>> digitLength('abc', -1e-4)\n//  0\n//  >>> digitLength('abc', -1e-5)\n//  0\n//  >>> digitLength('abc', -1e-6)\n//  0\n//  >>> digitLength('abc', -1e-7)\n//  0\n//  >>> digitLength('abc', -1e-8)\n//  0\n//  >>> digitLength('abc', -1e-9)\n//  0\n//  >>> digitLength('abc', -1e-10)\n//  0\n//  >>> digitLength('abc', -1e-20)\n//  0\n//  >>> digitLength('abc', -1e-30)\n//  0\n//  >>> digitLength('abc', -1e-40)\n//  0\n//  >>> digitLength('abc', -1e-50)\n//  0\n//  >>> digitLength('abc', -1e-100)\n//  0\n//  >>> digitLength('abc', -1e-1000)\n//  0\n//  >>> digitLength('abc', -1e-10000)\n//  0\n//  >>> digitLength('abc', -1e-100000)\n//  0\n//  >>> digitLength('abc', -1e-1000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-10000000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-100000000000000000000000000)\n//  0\n//  >>> digitLength('abc', -1e-1000000000000000000000000000)\n//  0"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = [];\n  let parens = paren_string.split('(');\n  parens.forEach(element => {\n    if (element === '(') {\n      stack.push(element);\n    } else if (element === ')') {\n      if (stack.length > 0) {\n        stack.pop();\n      } else {\n        return;\n      }\n      const paren_stack = stack.join('(');\n      if (paren_stack === paren_string) {\n        return;\n      }\n      return paren_stack.split('(').map(element => {\n        if (element === ')') {\n          return element;\n        }\n        return `(${element})`;\n      }).join('');\n    }\n  });\n  return stack.map(element => {\n    if (element === ')') {\n      return element;\n    }\n    return `(${element})`;\n  });\n};\n\nconst splitByParen = (input) => {\n  const paren_groups = separateParenGroups(input);\n  return paren_groups.map((group) => {\n    const result = group.split('(');\n    if (result.length > 1) {\n      const result_without_parens = result.slice(1, result.length - 1);\n      return result_without_parens.map((element) => {\n        if (element === ')') {\n          return element;\n        }\n        return `(${element})`;\n      });\n    } else {\n      return result;\n    }\n  });\n};\n\nconst parse = (input) => {\n  const result = splitByParen(input);\n  return result.map((group) => {\n    const element = group.map((element) => {\n      if (element === ')') {\n        return element;\n      }\n      return element.replace('(', '').replace(')', '');\n    });\n    return {\n      group: group,\n      element: element\n    };\n  });\n};\n\nconst parse_array = (input) => {\n  const result = splitByParen(input);\n  return result.map((group) => {\n    const element = group.map((element) => {\n      if (element === ')') {\n        return element;\n      }\n      return element.replace('(', '').replace(')', '');\n    });\n    return {\n      group: group,\n      element: element\n    };\n  });\n};\n\nconst parse_string = (input) => {\n  const result = splitByParen(input);\n  return result.map((group) => {\n    const element = group.map((element) => {\n      if (element === ')') {\n        return element;\n      }\n      return element.replace('(', '').replace(')', '');\n    });\n    return {\n      group: group,\n      element: element\n    };\n  });\n};\n\nconst parse_object = (input) => {\n  const result = splitByParen(input);\n  return result.map((group) => {\n    const element = group.map((element) => {\n      if (element === ')') {\n        return element;\n      }\n      return element.replace('(', '').replace(')', '');\n    });\n    return {\n      group: group,\n      element: element\n    };\n  });\n};\n\nconst get_type = (input) => {\n  if (input.length === 0) {\n    return 'empty';\n  }\n  if (input.indexOf('(') === -1) {\n    return 'array';\n  }\n  if (input.indexOf('{') === -1) {\n    return 'object';\n  }\n  if (input.indexOf('\"') === -1) {\n    return'string';\n  }\n};\n\nconst parse_all = (input) => {\n  const type = get_type(input);\n  if (type === 'array') {\n    return parse_array(input);\n  }\n  if (type === 'object') {\n    return parse_object(input);\n  }\n  if (type ==='string') {\n    return parse_string(input);\n  }\n};\n\nconst parse_group = (input) => {\n  const type = get_type(input);\n  if (type === 'array') {\n    return parse_array(input);\n  }\n  if (type === 'object') {\n    return parse_object(input);\n  }\n  if (type ==='string') {\n    return parse_string(input);\n  }\n};\n\nconst parse_groups = (input) => {\n  const type = get_type(input);\n  if (type === 'array') {\n    return parse_array(input);\n  }\n  if (type === 'object') {\n    return parse_object(input);\n  }\n  if (type ==='string') {\n    return parse_string(input);\n  }\n};\n\nconst to_string = (parse_list) => {\n  if (parse_list.length === 0) {\n    return 'empty';\n  }\n  if (parse_list.length === 1) {\n    return parse_list[0].group;\n  }\n  const result = [];\n  for (let i = 0; i < parse_list.length; i++) {\n    result.push(parse_list[i].group);\n  }\n  return result.join('');\n};\n\nmodule.exports = {\n  parse: parse,\n  parse_groups: parse_groups,\n  parse_all: parse_all,\n  to_string: to_string\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const float = number % 1;\n  const int = Math.floor(number);\n  const max = Math.pow(10, int.length - 1);\n  return float >= max? int + 1 : int;\n};\n\n/*\n  Given a list of numbers, it will return the minimum number in the list.\n  >>> minNumber(3, 4, 5, 6)\n  3\n  */\nconst minNumber = (...numbers) => {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (min > numbers[i]) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Given a list of numbers, it will return the maximum number in the list.\n  >>> maxNumber(3, 4, 5, 6)\n  6\n  */\nconst maxNumber = (...numbers) => {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (max < numbers[i]) {\n      max = numbers[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the sum of the list.\n  >>> sumNumber(3, 4, 5, 6)\n  12\n  */\nconst sumNumber = (...numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list of numbers, it will return the average of the list.\n  >>> averageNumber(3, 4, 5, 6)\n  4.5\n  */\nconst averageNumber = (...numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum / numbers.length;\n};\n\n/*\n  Given a list of numbers, it will return the median of the list.\n  >>> medianNumber(3, 4, 5, 6)\n  4\n  */\nconst medianNumber = (...numbers) => {\n  const max = maxNumber(...numbers);\n  const min = minNumber(...numbers);\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  if (max % 2 === 0) {\n    return sorted[max / 2];\n  } else {\n    return sorted[max / 2 + 1];\n  }\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber = (...numbers) => {\n  const set = new Set(numbers);\n  return set.values()[0];\n};\n\n/*\n  Given a list of numbers, it will return the median of the list.\n  >>> medianNumber(3, 4, 5, 6)\n  4\n  */\nconst medianNumber2 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const median = sorted[half];\n  return median;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber3 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const max = sorted[half];\n  const min = sorted[half - 1];\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the median of the list.\n  >>> medianNumber(3, 4, 5, 6)\n  4\n  */\nconst medianNumber4 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const median = sorted[half];\n  return median;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber5 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const max = sorted[half];\n  const min = sorted[half - 1];\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber6 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const max = sorted[half];\n  const min = sorted[half - 1];\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber7 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const max = sorted[half];\n  const min = sorted[half - 1];\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber(3, 4, 5, 6)\n  3\n  */\nconst modeNumber8 = (...numbers) => {\n  const sorted = numbers.slice().sort((a, b) => a - b);\n  const half = sorted.length / 2;\n  const max = sorted[half];\n  const min = sorted[half - 1];\n  return max;\n};\n\n/*\n  Given a list of numbers, it will return the mode of the list.\n  >>> modeNumber("}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const sum = (a, b) => a + b\n  const sub = (a, b) => a - b\n  const getOp = (operations, index) => operations[index]\n\n  let sum1 = 0\n  let sum2 = 0\n  let total = 0\n  let total2 = 0\n\n  for (let i = 0; i < operations.length; i++) {\n    sum1 += getOp(operations, i)\n    sum2 += getOp(operations, i)\n  }\n\n  if (sum1 === sum2) {\n    if (sum1 >= 0) {\n      total = sum1\n    } else {\n      total = sum1 + sum2\n    }\n  } else {\n    total = sum1 - sum2\n  }\n\n  if (total < 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconsole.log(belowZero([1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let sum = 0.0\n  for (let number of numbers) {\n    sum += Math.abs(number - Math.round(number))\n  }\n  return sum / numbers.length\n}\n\n/**\n  * @function range\n  * For a given list of numbers, calculate the range (inclusive)\n  * of the numbers in the list.\n  *\n  * @param {Array} numbers\n  * @returns {Array}\n  */\nconst range = (numbers) => {\n  let min = numbers[0]\n  let max = numbers[0]\n  for (let number of numbers) {\n    if (number < min) {\n      min = number\n    } else if (number > max) {\n      max = number\n    }\n  }\n  return [min, max]\n}\n\n/**\n  * @function median\n  * For a given list of numbers, calculate the median of the list.\n  *\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst median = (numbers) => {\n  let sortedNumbers = numbers.sort()\n  if (numbers.length % 2 === 0) {\n    return (sortedNumbers[(numbers.length - 1) / 2] + sortedNumbers[(numbers.length - 1) / 2 + 1]) / 2\n  } else {\n    return sortedNumbers[(numbers.length - 1) / 2]\n  }\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  range,\n  median\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length;\n  if (length === 0) return [];\n  const [start, end] = [0, length - 1];\n  let index = start;\n  while (index < end) {\n    const next = index + delimeter;\n    if (next === length) return numbers.slice(start, length);\n    numbers[index] = numbers[next];\n    index++;\n  }\n  return [...numbers];\n};\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> head = intersperse([1, 2, 3], 4);\n  >>> head\n  [1, 4, 2, 4, 3]\n  >>> head.shift()\n  4\n  >>> head\n  [1, 2, 3]\n  */\nconst head = (numbers, value) => intersperse(numbers, value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> tail = intersperse([1, 2, 3], 4);\n  >>> tail\n  [1, 2, 3, 4]\n  >>> tail.shift()\n  1\n  >>> tail\n  [2, 3, 4]\n  */\nconst tail = (numbers, value) => intersperse(numbers, value, true);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).reverse()\n  [3, 2, 1, 4]\n  */\nconst reverse = (numbers, value) => intersperse(numbers.slice().reverse(), value, true);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice(1, 2)\n  [2, 4]\n  */\nconst slice = (numbers, value) => intersperse(numbers, value, true, true);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice(1, 3)\n  [2, 4]\n  */\nconst slice2 = (numbers, value) => intersperse(numbers, value, true, false);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice(2, 3)\n  [3]\n  */\nconst slice3 = (numbers, value) => intersperse(numbers, value, false, true);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice(2, 4)\n  [3]\n  */\nconst slice4 = (numbers, value) => intersperse(numbers, value, false, false);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice(2)\n  [2, 3]\n  */\nconst slice5 = (numbers, value) => intersperse(numbers, value, false, false);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).slice()\n  [1, 2, 3, 4]\n  */\nconst slice6 = (numbers, value) => intersperse(numbers, value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).sort()\n  [1, 2, 3, 4]\n  */\nconst sort = (numbers, value) => intersperse(numbers.sort(), value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).splice(1, 1)\n  [1, 2, 4]\n  */\nconst splice = (numbers, value) => intersperse(numbers.splice(1), value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).unshift(5)\n  [5, 1, 2, 3, 4]\n  */\nconst unshift = (numbers, value) => intersperse(numbers.unshift(value), value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is replaced with the argument\n  value.\n\n  >>> intersperse([1, 2, 3], 4).values()\n  [1, 2, 3, 4]\n  */\nconst values = (numbers, value) => intersperse(numbers.values(), value);\n\n/*\n  Return a new list that contains the elements of the original list in order,\n  except for the first (or last) element, which is"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = []\n  const brackets = []\n\n  paren_string.split(' ').forEach((p) => {\n    const next = brackets.pop()\n    const next_next = brackets.pop()\n\n    if (next === '(') {\n      stack.push(next)\n      stack.push('(')\n    } else if (next === ')') {\n      if (stack.pop() === '(') {\n        stack.pop()\n        stack.push(')')\n      }\n    } else if (next === '(') {\n      stack.push(next)\n      stack.push('(')\n    } else if (next === ')') {\n      stack.push(next)\n    }\n  })\n\n  const max_levels = Math.max(...stack)\n\n  return brackets.concat(Array(max_levels + 1).fill(0))\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  >>> parseNestedParens('((()))')\n  [2, 1]\n  >>> parseNestedParens('(()()(()))')\n  [2, 3, 1, 2]\n  >>> parseNestedParens('(())())')\n  [2, 2, 1, 1]\n  >>> parseNestedParens('(())')\n  [2, 1]\n  >>> parseNestedParens('((())())')\n  [3, 2, 1, 2]\n  >>> parseNestedParens('(()())')\n  [2, 2, 1, 1]\n  >>> parseNestedParens('()(())')\n  [1, 2, 1, 1]\n  >>> parseNestedParens('()(())')\n  [1, 1, 1, 1]\n  >>> parseNestedParens('(())')\n  [1]\n  >>> parseNestedParens('()')\n  [0]\n  >>> parseNestedParens('((())())')\n  [3, 2, 1, 2]\n  >>> parseNestedParens('()')\n  [0]\n  >>> parseNestedParens('((())')\n  [3, 1]\n  >>> parseNestedParens('(())')\n  [1]\n  >>> parseNestedParens('(())')\n  [1]\n  >>> parseNestedParens('(())')\n  [1]\n  >>> parseNestedParens('(()')\n  [1]\n  >>> parseNestedParens('(())')\n  [1]\n  >>> parseNestedParens('((())')\n  [3, 2, 1, 2]\n  >>> parseNestedParens('(()())')\n  [3, 2, 2, 1, 2]\n  >>> parseNestedParens('(())')\n  [2, 1]\n  >>> parseNestedParens('((())')\n  [3, 2, 1, 1]\n  >>> parseNestedParens('(()())')\n  [3, 2, 2, 1, 1]\n  >>> parseNestedParens('((())')\n  [3, 2, 1, 2]\n  >>> parseNestedParens('(()())')\n  [3, 2, 2, 1, 1]\n  >>> parseNestedParens('()(())')\n  [1, 2, 1, 1]\n  >>> parseNestedParens('()()')\n  [1, 1]\n  >>> parseNestedParens('()')\n  [0]\n  >>> parseNestedParens('(()')\n  [2]\n  >>> parseNestedParens('(())')\n  [2, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())')\n  [1, 1]\n  >>> parseNestedParens('(())"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter((item) => {\n    return item.indexOf(substring) >= 0;\n  });\n};\n\n/*\n  Sort a list of strings in a specific order\n  >>> sort('a', 'b', 'c')\n  ['a', 'b', 'c']\n  >>> sort('c', 'b', 'a')\n  ['a', 'b', 'c']\n  >>> sort('a', 'c', 'b')\n  ['a', 'b', 'c']\n  >>> sort('a', 'c', 'b', 'd')\n  ['a', 'b', 'c', 'd']\n  */\nconst sort = (...args) => {\n  const strings = args.slice();\n  let comparator = null;\n  const reverse = false;\n  let compareResult;\n\n  // If only one argument is passed in, we're sorting by length\n  if (strings.length === 1) {\n    strings.push('a');\n  }\n\n  // If more than one argument is passed in, we're sorting by first argument\n  if (strings.length > 1) {\n    comparator = (a, b) => {\n      compareResult = a.localeCompare(b);\n      if (reverse) {\n        compareResult *= -1;\n      }\n      return compareResult;\n    };\n  }\n\n  strings.sort(comparator);\n  return strings;\n};\n\n/*\n  Determines if a string contains another string\n  >>> contains('abc', 'c')\n  true\n  >>> contains('abc', 'b')\n  false\n  >>> contains('abc', 'cd')\n  false\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring) >= 0;\n};\n\n/*\n  Returns the last index of a substring in a string\n  >>> lastIndexOf('abc', 'c')\n  2\n  >>> lastIndexOf('abc', 'cd')\n  -1\n  >>> lastIndexOf('abc', 'a')\n  0\n  */\nconst lastIndexOf = (string, substring) => {\n  const index = string.lastIndexOf(substring);\n  return index >= 0? index : -1;\n};\n\n/*\n  Returns the last index of a substring in a string\n  >>> lastIndexOfReverse('abc', 'c')\n  0\n  >>> lastIndexOfReverse('abc', 'cd')\n  -1\n  >>> lastIndexOfReverse('abc', 'a')\n  2\n  */\nconst lastIndexOfReverse = (string, substring) => {\n  const index = string.lastIndexOf(substring);\n  return index >= 0? index : -1;\n};\n\n/*\n  Returns the substring from a string\n  >>> substr('abc', 1)\n  'b'\n  >>> substr('abc', 2)\n  'c'\n  >>> substr('abc', 3)\n  'c'\n  >>> substr('abc', 4)\n  ''\n  >>> substr('abc', -2)\n  'bc'\n  >>> substr('abc', -3)\n  'bc'\n  >>> substr('abc', -4)\n  'abc'\n  */\nconst substr = (string, start) => {\n  return string.substring(start);\n};\n\n/*\n  Returns the substring from a string\n  >>> substrReverse('abc', 1)\n  'c'\n  >>> substrReverse('abc', 2)\n  'b'\n  >>> substrReverse('abc', 3)\n  'b'\n  >>> substrReverse('abc', 4)\n  ''\n  >>> substrReverse('abc', -2)\n  'ab'\n  >>> substrReverse('abc', -3)\n  'ab'\n  >>> substrReverse('abc', -4)\n  'abc'\n  */\nconst substrReverse = (string, start) => {\n  return string.substring(start);\n};\n\n/*\n  Truncates a string at a given length\n  >>> truncate('abc', 2)\n  'ab'\n  >>> truncate('abc', 4)\n  'abcd'\n  >>> truncate('abc', -2)\n  'ab'\n  >>> truncate('abc', -4)\n  'abc'\n  */\nconst truncate = (string, length) => {\n  return string.substring(0, length);\n};\n\n/*\n  Returns a string with the characters at a given index removed\n  >>> removeAt('abcdef', 1)\n  'abcef'\n  >>> removeAt('abcdef', 3)\n  'ab'\n  >>> removeAt('abcdef', -3)\n  'abcdef'\n  */\nconst removeAt = (string, index) => {\n  return string.substring(0, index) + string.substring(index + 1);\n};\n\nmodule.exports = {\n  filterBySubstring,\n  sort,\n  contains,\n  lastIndexOf,\n  lastIndexOfReverse,\n  substr,\n  substrReverse,\n  truncate,\n  removeAt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let [sum, product] = [0, 1]\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0\n  let maxIndex = -1\n  let maxValue = numbers[0]\n  let i = 0\n  while (i < numbers.length - 1) {\n    if (numbers[i] > maxValue) {\n      max = numbers[i]\n      maxIndex = i\n      maxValue = numbers[i]\n    }\n    i++\n  }\n  if (numbers[i] > maxValue) {\n    max = numbers[i]\n    maxIndex = i\n    maxValue = numbers[i]\n  }\n  return [numbers[maxIndex],...numbers.slice(0, maxIndex),...numbers.slice(maxIndex + 1), max]\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  let result = '';\n  let i = 0;\n  let j = len - 1;\n  while (i < len && j >= 0) {\n    if (string[i]!= string[j]) {\n      break;\n    }\n    i++;\n    j--;\n  }\n  if (i == len) {\n    return string;\n  }\n  for (; i < len; i++) {\n    result += string[i];\n  }\n  for (; j >= 0; j--) {\n    result += string[j];\n  }\n  return result;\n}\n\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('');\n}\n\nmodule.exports = {\n  isPalindrome,\n  makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    const charA = a[i]\n    const charB = b[i]\n    result.push(charA ^ charB)\n  }\n  return result.join('')\n}\n\n/*\n  Given two strings a and b, return their common characters.\n  */\nconst stringIntersection = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i])\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given two strings a and b, return their difference.\n  */\nconst stringDifference = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(a[i])\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given two strings a and b, return their symmetric difference.\n  */\nconst stringSymmetricDifference = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(a[i])\n    }\n    if (b[i]!== a[i]) {\n      result.push(b[i])\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given two strings a and b, return the length of their common characters.\n  */\nconst commonLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their symmetric difference.\n  */\nconst symmetricDifferenceLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(1)\n    }\n    if (b[i]!== a[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their difference.\n  */\nconst differenceLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their common characters.\n  */\nconst intersectLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their symmetric difference.\n  */\nconst symmetricDifferenceLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(1)\n    }\n    if (b[i]!== a[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their difference.\n  */\nconst differenceLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i]!== b[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their intersection.\n  */\nconst intersectLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(1)\n    }\n  }\n  return result.reduce((sum, charCount) => sum + charCount, 0)\n}\n\n/*\n  Given two strings a and b, return the length of their symmetric difference.\n  */\nconst symmetricDifferenceLength = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest) {\n      longest = strings[i].length;\n    }\n  }\n  return longest > 0? strings[0].substring(0, longest) : 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let count = 0;\n  let i = 1;\n  let j = 1;\n\n  while (i <= a && j <= b) {\n    if (a % i === 0 && b % j === 0) {\n      count = count + 1;\n    }\n    i = i + 1;\n    j = j + 1;\n  }\n\n  return count;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = [];\n\n  for (let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i + 1);\n    prefixes.push(prefix);\n  }\n\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = [];\n\n  for (let i = 0; i < string.length; i++) {\n    let suffix = string.slice(i, string.length);\n    suffixes.push(suffix);\n  }\n\n  return suffixes;\n};\n\n/* Returns the longest common prefix of two strings\n  >>> longestCommonPrefix('abc', 'abd')\n  'ab'\n  >>> longestCommonPrefix('abc', 'abd')\n  'ab'\n  >>> longestCommonPrefix('abc', 'abc')\n  'abc'\n  */\nconst longestCommonPrefix = (string1, string2) => {\n  let prefix = string1.slice(0, string2.indexOf(string1));\n  return prefix;\n};\n\n/* Returns the longest common suffix of two strings\n  >>> longestCommonSuffix('abc', 'abd')\n  'd'\n  >>> longestCommonSuffix('abc', 'abd')\n  'abd'\n  >>> longestCommonSuffix('abc', 'abc')\n  'abc'\n  */\nconst longestCommonSuffix = (string1, string2) => {\n  let suffix = string1.slice(string2.indexOf(string1));\n  return suffix;\n};\n\n/* Returns a list of all permutations of the input string\n  >>> permutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  >>> permutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  >>> permutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst permutations = (string) => {\n  let stringCopy = string.slice();\n  let permutations = [];\n\n  for (let i = 0; i < stringCopy.length; i++) {\n    let permutation = [];\n    let last = stringCopy.slice(0, i);\n    let first = stringCopy.slice(i + 1);\n    permutation.push(last);\n    permutation.push(first);\n    permutations.push(permutation);\n  }\n\n  return permutations;\n};\n\n/* Returns a list of all palindromes from the shortest to the longest of the input strings\n  >>> allPalindromes('ab')\n  ['ab', 'ba']\n  >>> allPalindromes('ab')\n  ['ab', 'ba']\n  >>> allPalindromes('abc')\n  ['abc', 'bca', 'cab']\n  */\nconst allPalindromes = (string) => {\n  let palindromes = [];\n\n  for (let i = 0; i < string.length; i++) {\n    let palindrome = string.slice(i, string.length - i);\n    palindromes.push(palindrome);\n  }\n\n  return palindromes;\n};\n\n/* Returns a list of all permutations of the input string in which the first and last characters are equal\n  >>> permutations('ab')\n  [['ab', 'ba']]\n  >>> permutations('ab')\n  [['ab', 'ba']]\n  >>> permutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n  */\nconst permutationsWithSameFirstAndLast = (string) => {\n  let stringCopy = string.slice();\n  let permutations = [];\n\n  for (let i = 0; i < stringCopy.length; i++) {\n    let permutation = [];\n    let last = stringCopy.slice(0, i);\n    let first = stringCopy.slice(i + 1);\n    permutation.push(last);\n    permutation.push(first);\n    permutations.push(permutation);\n  }\n\n  return permutations;\n};\n\n/* Returns a list of all palindromes of the input string\n  >>> allPalindromes('ab')\n  ['ab', 'ba']\n  >>> allPalindromes('ab')\n  ['ab', 'ba']\n  >>> allPalindromes('abc')\n  ['abc', 'bca', 'cab']\n  */\nconst allPalindromesWithSameFirstAndLast = (string) => {\n  let stringCopy = string.slice();\n  let palindromes = [];\n\n  for (let i = 0; i < stringCopy.length; i++) {\n    let palindrome = string.slice(i, string.length - i);\n    palindromes.push(palindrome);\n  }\n\n  return palindromes;\n};\n\n/* Returns a list of all permutations of the input string in which the middle character is the same\n  >>> permutations('ab')\n  [['ab', 'ba']]\n  >>> permutations('ab')\n  [['ab', 'ba']]\n  >>> permutations('abc')\n  [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str +='';\n  }\n  return str;\n};\n\n/* Returns a string containing characters from 0 to n inclusive.\n  >>> stringSequence(0)\n  ''\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceWithLength = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += String.fromCharCode(i);\n  }\n  return str;\n};\n\n/* Returns a string containing all the characters in the given string.\n  >>> stringSequence('hello world')\n  'hello world'\n  >>> stringSequence('hello world')\n  'hello world'\n  */\nconst stringSequenceWithString = (str) => {\n  return str;\n};\n\n/* Returns a string containing all the characters in the given string, with\n  spaces inserted after each character.\n  >>> stringSequenceWithString('hello world')\n  'hello world'\n  >>> stringSequenceWithString('hello world')\n  'hello world'\n  */\nconst stringSequenceWithSpaces = (str) => {\n  return str.split('').map(c => `${c} `).join('');\n};\n\n/* Returns a string containing all the characters in the given string, with\n  spaces inserted after each character, but only after every n characters.\n  >>> stringSequenceWithSpaces('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpaces('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpaces('hello world', 7)\n  'hello world'\n  >>> stringSequenceWithSpaces('hello world', 7)\n  'hello world'\n  */\nconst stringSequenceWithSpacesAndLength = (str, n) => {\n  return str.split('').map(c => `${c} `).join('');\n};\n\n/* Returns a string containing all the characters in the given string, with\n  spaces inserted after each character, but only after every n characters.\n  >>> stringSequenceWithSpacesAndLength('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLength('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLength('hello world', 7)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLength('hello world', 7)\n  'hello world'\n  */\nconst stringSequenceWithSpacesAndLengthAndString = (str, n) => {\n  return str.split('').map(c => `${c} `).join('');\n};\n\n/* Returns a string containing all the characters in the given string, with\n  spaces inserted after each character, but only after every n characters.\n  >>> stringSequenceWithSpacesAndLengthAndString('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLengthAndString('hello world', 3)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLengthAndString('hello world', 7)\n  'hello world'\n  >>> stringSequenceWithSpacesAndLengthAndString('hello world', 7)\n  'hello world'\n  */\nconst stringSequenceWithSpacesAndLengthAndStringAndLength = (str, n) => {\n  return str.split('').map(c => `${c} `).join('');\n};\n\nmodule.exports = {\n  stringSequence,\n  stringSequenceWithLength,\n  stringSequenceWithSpaces,\n  stringSequenceWithSpacesAndLength,\n  stringSequenceWithSpacesAndLengthAndString,\n  stringSequenceWithSpacesAndLengthAndStringAndLength\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  // Create an array with all the lowercase characters.\n  const chars = string.split('').map(c => c.toLowerCase());\n\n  // Create a counter for each character.\n  const counts = new Map();\n  chars.forEach(c => {\n    if (counts.has(c)) {\n      counts.set(c, counts.get(c) + 1);\n    } else {\n      counts.set(c, 1);\n    }\n  });\n\n  // Return the number of distinct characters.\n  return counts.size;\n};\n\nconsole.log(countDistinctCharacters('xyzXYZ')); // 3\nconsole.log(countDistinctCharacters('Jerry')); // 4\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(\" \")\n  const beats = notes.map(note => {\n    switch(note) {\n      case 'o':\n        return 4\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      default:\n        return 0\n    }\n  })\n  return beats\n}\n\n/*\n  Part 2 - https://codility.com/demo/results/demo_rkq7k/\n*/\n\nconst parseMusic2 = (music_string) => {\n  const notes = music_string.split(\" \")\n  const beats = notes.map(note => {\n    switch(note) {\n      case 'o':\n        return 4\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      case 'o | ':\n        return 2\n      case 'o | ':\n        return 1\n      default:\n        return 0\n    }\n  })\n  return beats\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const n = string.length;\n  let c = 0;\n  for (let i = 0; i < n; i++) {\n    const j = i + 1;\n    while (j < n && string[i] === string[j]) {\n      c++;\n      j++;\n    }\n  }\n  return c;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  // \"sort\" is a built-in method\n  return numbers.sort();\n}\n\n/*\n  # A function that takes a list of numbers and sorts them in ascending order.\n  #\n  # Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  #\n  # Output is a list of numbers sorted in ascending order, with the largest number first.\n  #\n  # Examples:\n  #\n  #   sortNumbers('three one five')\n  #   // ['three', 'one', 'five']\n  #\n  #   sortNumbers('three one five')\n  #   // ['one', 'three', 'five']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('zero nine eight')\n  #   // ['zero', 'nine', 'eight']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('zero nine eight')\n  #   // ['zero', 'nine', 'eight']\n  #\n  #   sortNumbers('zero nine eight')\n  #   // ['zero', 'nine', 'eight']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('zero nine eight')\n  #   // ['zero', 'nine', 'eight']\n  #\n  #   sortNumbers('zero nine eight')\n  #   // ['zero', 'nine', 'eight']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('eight seven five two')\n  #   // ['two', 'five', 'eight','seven']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  #   sortNumbers('two five three one')\n  #   // ['two', 'five', 'one', 'three']\n  #\n  "}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const findClosest = (a, b) => {\n    const d = Math.abs(a - b);\n    return [a, b].sort((a, b) => {\n      return a - b;\n    })[0];\n  };\n  const two = Math.floor(Math.pow(numbers.length, 0.5));\n  const closestNumbers = [\n    findClosest(numbers[0], numbers[1]),\n    findClosest(numbers[numbers.length - 1], numbers[numbers.length - 2]),\n  ];\n  return closestNumbers;\n};\n\nconst main = () => {\n  const [numbers, expected] = [\n    [1.0, 2.0, 3.0, 4.0, 5.0, 2.2],\n    [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\n  ];\n  console.log(`The closest numbers to ${numbers} are: ${expected}`);\n  const closestNumbers = findClosestElements(numbers);\n  console.log(`The closest numbers to ${numbers} are: ${closestNumbers}`);\n  return closestNumbers;\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let max = numbers[0];\n  let min = numbers[0];\n  let unit = 1;\n  numbers.forEach(num => {\n    if (max < num) {\n      max = num;\n    }\n    if (min > num) {\n      min = num;\n    }\n  });\n  let unitFactor = 1.0 / (max - min);\n  let scaled = numbers.map((num, index) => {\n    return (num - min) * unitFactor;\n  });\n  return scaled;\n};\n\n/*\n  Given a list of numbers, return the sum of all of the numbers.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += num;\n  });\n  return sum;\n};\n\n/*\n  Given a list of numbers, return the product of all of the numbers.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (numbers) => {\n  let product = 1;\n  numbers.forEach(num => {\n    product *= num;\n  });\n  return product;\n};\n\n/*\n  Given a list of numbers, return the mean of all of the numbers.\n  >>> mean([1, 2, 3, 4, 5])\n  3.0\n  */\nconst mean = (numbers) => {\n  let sum = 0;\n  numbers.forEach(num => {\n    sum += num;\n  });\n  return sum / numbers.length;\n};\n\n/*\n  Given a list of numbers, return the mode (i.e., the largest number that occurs\n  in the list).\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  */\nconst mode = (numbers) => {\n  let max = numbers[0];\n  let mode = numbers[0];\n  numbers.forEach(num => {\n    if (max < num) {\n      max = num;\n      mode = num;\n    }\n  });\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the median (i.e., the middle number in the list).\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  let half = Math.floor(numbers.length / 2);\n  let nums = numbers.slice(0, half);\n  let nums2 = numbers.slice(half);\n  let median = (nums.length === 0 || nums2.length === 0)? undefined : (nums[0] + nums2[0]) / 2;\n  return median;\n};\n\n/*\n  Given a list of numbers, return the minimum number in the list.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  */\nconst min = (numbers) => {\n  let min = numbers[0];\n  numbers.forEach(num => {\n    if (min > num) {\n      min = num;\n    }\n  });\n  return min;\n};\n\n/*\n  Given a list of numbers, return the maximum number in the list.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  */\nconst max = (numbers) => {\n  let max = numbers[0];\n  numbers.forEach(num => {\n    if (max < num) {\n      max = num;\n    }\n  });\n  return max;\n};\n\n/*\n  Given a list of numbers, return the mode (i.e., the largest number that occurs\n  in the list).\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  */\nconst modeOf = (numbers) => {\n  let max = numbers[0];\n  let mode = numbers[0];\n  numbers.forEach(num => {\n    if (max < num) {\n      max = num;\n      mode = num;\n    }\n  });\n  return mode;\n};\n\n/*\n  Given a list of numbers, return the mode (i.e., the largest number that occurs\n  in the list).\n  >>> mode([1, 2, 3, 4, 5])\n  5\n  */\nconst modeOfReverse = (numbers) => {\n  let max = numbers[0];\n  let mode = numbers[0];\n  numbers.forEach(num => {\n    if (max < num) {\n      max = num;\n      mode = num;\n    }\n  });\n  return mode;\n};\n\nexport {\n  sum,\n  mean,\n  mode,\n  modeOf,\n  modeOfReverse,\n  median,\n  min,\n  max,\n  rescaleToUnit,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => typeof x === 'number')\n}\n\n/**\n  * Filters the specified list of arbitrary Python values for floats only\n  * @param {array} values\n  * @returns {array}\n  * @example\n  * // Filters the specified list of arbitrary Python values for floats only\n  * filterFloats([1, 2, 3, 'abc', {}, []])\n  * //[1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(x => typeof x === 'number')\n}\n\n/**\n * Filters the specified list of arbitrary Python values for strings only\n * @param {array} values\n * @returns {array}\n * @example\n * // Filters the specified list of arbitrary Python values for strings only\n * filterStrings([1, 2, 3, 'abc', {}, []])\n * //[1, 2, 3]\n */\nconst filterStrings = (values) => {\n  return values.filter(x => typeof x ==='string')\n}\n\n/**\n * Filters the specified list of arbitrary Python values for booleans only\n * @param {array} values\n * @returns {array}\n * @example\n * // Filters the specified list of arbitrary Python values for booleans only\n * filterBools([1, 2, 3, 'abc', {}, []])\n * //[1, 2, 3]\n */\nconst filterBools = (values) => {\n  return values.filter(x => typeof x === 'boolean')\n}\n\n/**\n * Filters the specified list of arbitrary Python values for bytes only\n * @param {array} values\n * @returns {array}\n * @example\n * // Filters the specified list of arbitrary Python values for bytes only\n * filterBytes([1, 2, 3, 'abc', {}, []])\n * //[1, 2, 3]\n */\nconst filterBytes = (values) => {\n  return values.filter(x => typeof x ==='string')\n}\n\n/**\n * Filters the specified list of arbitrary Python values for non-numeric values only\n * @param {array} values\n * @returns {array}\n * @example\n * // Filters the specified list of arbitrary Python values for non-numeric values only\n * filterOthers([1, 2, 3, 'abc', {}, []])\n * //[1, 2, 3]\n */\nconst filterOthers = (values) => {\n  return values.filter(x => typeof x!== 'number')\n}\n\nexport default {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterBools,\n  filterBytes,\n  filterOthers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    let len = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '\\n') {\n            len = i;\n            break;\n        }\n    }\n    return len + 1;\n};\n\n/**\n  * Checks if the given string is empty\n  *\n  * @param {string} string\n  * @returns {boolean}\n  * */\nconst isEmpty = (string) => {\n    return string.length === 0;\n};\n\n/**\n  * Checks if the given string is not empty\n  *\n  * @param {string} string\n  * @returns {boolean}\n  * */\nconst isNotEmpty = (string) => {\n    return string.length > 0;\n};\n\n/**\n  * Returns a list of the words in the given string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * */\nconst words = (string) => {\n    let words = string.split(' ');\n    return words.filter((word) =>!isEmpty(word));\n};\n\n/**\n  * Returns a list of the words in the given string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * */\nconst lines = (string) => {\n    let words = string.split('\\n');\n    return words.filter((word) =>!isEmpty(word));\n};\n\n/**\n  * Returns a list of the words in the given string\n  *\n  * @param {string} string\n  * @returns {string[]}\n  * */\nconst sentences = (string) => {\n    let words = string.split('.');\n    return words.filter((word) =>!isEmpty(word));\n};\n\n/**\n  * Returns the length of the given string\n  *\n  * @param {string} string\n  * @returns {number}\n  * */\nconst length = (string) => {\n    return string.length;\n};\n\nmodule.exports = {\n    words,\n    lines,\n    sentences,\n    strlen,\n    length,\n    isEmpty,\n    isNotEmpty\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is greater than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* Find for a given number n the largest number that divides n and is less than n\n  >>> largestDivisor(15)\n  3\n  */\nconst largestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is less than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the largest number that divides n and is greater than n\n  >>> largestDivisorLessThan(15)\n  5\n  */\nconst largestDivisorGreaterThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is greater than n\n  >>> largestDivisorLessThan(15)\n  5\n  */\nconst smallestDivisorGreaterThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is less than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the largest number that divides n and is less than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst largestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is less than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the largest number that divides n and is greater than n\n  >>> largestDivisorLessThan(15)\n  5\n  */\nconst largestDivisorGreaterThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is greater than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst smallestDivisorGreaterThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => b - a)[0]\n}\n\n/* Find for a given number n the smallest number that divides n and is less than n\n  >>> largestDivisorLessThan(15)\n  2\n  */\nconst smallestDivisorLessThan = (n) => {\n  const divisors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return divisors.sort((a, b) => a - b)[0]\n}\n\n/* Find for a given number n the largest number that divides n and is less than n\n  >>> largestDivis"}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [1]\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n /= i\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n)\n  }\n  return factors\n}\n\n/*\n  Input:\n    9\n  Output:\n    [1, 3, 3, 3]\n  Input:\n    100\n  Output:\n    [2, 2, 5, 10, 10, 10, 20, 25, 25]\n  Input:\n    900\n  Output:\n    [2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!seen.has(numbers[i])) {\n      seen.add(numbers[i]);\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map(char => {\n    if (char.toUpperCase() === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n};\n\n/**\n  * Remove duplicates from an array of strings.\n  * @param {string[]} strings - An array of strings.\n  * @returns {string[]} The array of strings without duplicates.\n  */\nconst removeDuplicates = (strings) => {\n  return strings.filter(e => e!== strings.find(e => e === strings.indexOf(e)));\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst firstElement = (array) => {\n  return array.length > 0? array[0] : undefined;\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst lastElement = (array) => {\n  return array.length > 0? array[array.length - 1] : undefined;\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst lastElementInArray = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst firstElementInArray = (array) => {\n  return array[0];\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst getLastElement = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst getLastElementInArray = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst getFirstElement = (array) => {\n  return array[0];\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst getFirstElementInArray = (array) => {\n  return array[0];\n};\n\n/**\n  * Return the last element of an array, if an array is passed in return the last element of the array.\n  * @param {any[]} array - The array to return the last element of.\n  * @returns {*} The last element of the array.\n  */\nconst getLastElementInArray = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst getFirstElementInArray = (array) => {\n  return array[0];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst getLastElementInArray = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst getLastElementInArray = (array) => {\n  return array[array.length - 1];\n};\n\n/**\n  * Return the first element of an array, if an array is passed in return the first element of the array.\n  * @param {any[]} array - The array to return the first element of.\n  * @returns {*} The first element of the array.\n  */\nconst getFirstElementInArray = (array) => {\n  return array[0];\n};\n\nmodule.exports = {\n  flipCase,\n  removeDuplicates,\n  firstElement,\n  lastElement,\n  lastElementInArray,\n  firstElementInArray,\n  getLastElement,\n  getLastElementInArray,\n  getFirstElement,\n  getFirstElementInArray,\n  getLastElementInArray,\n  getLastElementInArray,\n  getFirstElementInArray,\n  getFirstElementInArray,\n  getLastElementInArray,\n  getLastElementInArray,\n  getFirstElementInArray,\n  getFirstElementInArray,\n  getLastElementInArray,\n"}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, s) => acc + s, '');\n};\n\n// Concatenate the List of Integers into a Single String\nconst concatenateInts = (ints) => {\n  return ints.reduce((acc, i) => acc + i, '');\n};\n\n/* Merge List of Lists into a Single List\n  >>> merge([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst merge = (lists) => {\n  return lists.reduce((acc, l) => acc.concat(l), []);\n};\n\n// Add two numbers\nconst add = (a, b) => a + b;\n\n// Sum two lists\nconst sum = (a, b) => a + b;\n\n// Merge two Lists\nconst mergeLists = (a, b) => {\n  return merge(a).concat(merge(b));\n};\n\n// Sum two Lists\nconst sumLists = (a, b) => {\n  return sum(merge(a), merge(b));\n};\n\n/*\n  >>> sumLists([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumLists([1, 2, 3], [4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst sumLists = (a, b) => {\n  return sum(merge(a), merge(b));\n};\n\n/* Merge two Lists of Dictionaries into a Single List\n  >>> mergeLists([{a: 1}, {b: 2}, {c: 3}], [{x: 4}, {y: 5}, {z: 6}])\n  [{a: 1, b: 2, c: 3, x: 4, y: 5, z: 6}]\n  */\nconst mergeListsDicts = (a, b) => {\n  return merge(merge(a), merge(b));\n};\n\n// Sum two Lists of Dictionaries\nconst sumListsDicts = (a, b) => {\n  return sum(mergeLists(a, b));\n};\n\n/*\n  >>> sumListsDicts([{a: 1}, {b: 2}, {c: 3}], [{x: 4}, {y: 5}, {z: 6}])\n  [{a: 1, b: 2, c: 3, x: 4, y: 5, z: 6}]\n  >>> sumListsDicts([{a: 1}, {b: 2}, {c: 3}], [{x: 4}, {y: 5}, {z: 6, w: 7}])\n  [{a: 1, b: 2, c: 3, x: 4, y: 5, z: 6, w: 7}]\n  */\nconst sumListsDicts = (a, b) => {\n  return sum(mergeLists(a, b));\n};\n\n// Merge two Lists of Lists\nconst mergeListsOfLists = (a, b) => {\n  return merge(merge(a), merge(b));\n};\n\n// Sum two Lists of Lists\nconst sumListsOfLists = (a, b) => {\n  return sum(merge(merge(a), merge(b)));\n};\n\n/*\n  >>> sumListsOfLists([[1, 2, 3], [4, 5, 6]], [[1, 2, 3], [4, 5, 6, 7]])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst sumListsOfLists = (a, b) => {\n  return sum(merge(merge(a), merge(b)));\n};\n\n/*\n  >>> add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst add = (a, b) => {\n  return sum(merge(merge(a), merge(b)));\n};\n\n/*\n  >>> add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst add = (a, b) => {\n  return sum(merge(merge(a), merge(b)));\n};\n\n// Convert a string to a list of ints\nconst toInts = (s) => {\n  return s.split('').map(x => parseInt(x));\n};\n\n// Convert a string to a list of doubles\nconst toDoubles = (s) => {\n  return s.split('').map(x => parseFloat(x));\n};\n\n/*\n  >>> toInts('1, 2, 3')\n  [1, 2, 3]\n  >>> toInts('1, 2, 3, 4')\n  [1, 2, 3, 4]\n  >>> toInts('1, 2, 3, 4, 5')\n  [1, 2, 3, 4, 5]\n  >>> toInts('1, 2, 3, 4, 5, 6')\n  [1, 2, 3, 4, 5, 6]\n  */\nconst toInts"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(str => str.startsWith(prefix));\n};\n\n//# filterByPrefix\n//.\n//. Returns a new list of strings containing only those elements of `strings`\n//. whose strings start with `prefix`, in the same order as `strings`.\n//.\n//. @param {string[]} strings - A list of strings.\n//. @param {string} prefix - A prefix to filter for.\n//. @return {string[]} The new list of strings.\n//.\n//. ```javascript\n//. const filterByPrefix = require('../src/filterByPrefix');\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a');\n//. // => ['abc', 'array']\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix([], 'a');\n//. // => []\n//. ```\n//.\n//. ## Notes\n//.\n//. - `prefix` may contain a `.` character, in which case it will be replaced by `\\`.\n//.\n//. - This function is **thread-safe** and takes **O(n)** time where `n` is the length of the input list.\n//.\n//. - This function makes a **copy** of the input list, so the input list will not be affected by the function.\n//.\n//. - `filterByPrefix` **does not** return an empty list.\n//.\n//. ```javascript\n//. const filterByPrefix = require('../src/filterByPrefix');\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a');\n//. // => ['abc', 'array']\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix([], 'a');\n//. // => []\n//. ```\n//.\n//. @example\n//. const filterByPrefix = require('../src/filterByPrefix');\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a');\n//. // => ['abc', 'array']\n//.\n//. // Filter an input list of strings only for strings starting with a certain prefix.\n//. const filtered = filterByPrefix([], 'a');\n//. // => []\n//. ```\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n/*\n  Given a list of numbers, returns a list of pairs of numbers,\n  with the first number as the sum of the two.\n  >>> getSum([1, 2, 3, 4, 5])\n  [(1, 6), (2, 8), (3, 10), (4, 12), (5, 14)]\n  >>> getSum([1, 2, 3, 4, 5, 6])\n  [(1, 6), (2, 8), (3, 10), (4, 12), (5, 14), (6, 16)]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 6), (2, 8), (3, 10), (4, 12), (5, 14), (6, 16), (7, 18), (8, 20)]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 6), (2, 8), (3, 10), (4, 12), (5, 14), (6, 16), (7, 18), (8, 20), (9, 22)]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [(1, 6), (2, 8), (3, 10), (4, 12), (5, 14), (6, 16), (7, 18), (8, 20), (9, 22), (10, 24)]\n  */\nconst getSum = (l) => {\n  return l.reduce((acc, e) => {\n    acc[e] = [acc[e[0]], acc[e[1]]];\n    return acc;\n  }, {});\n};\n\n/*\n  Given a list of numbers, returns a list of pairs of numbers,\n  with the first number as the difference of the two.\n  >>> getDiff([1, 2, 3, 4, 5])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]\n  >>> getDiff([1, 2, 3, 4, 5, 6])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]\n  >>> getDiff([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16)]\n  >>> getDiff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18)]\n  >>> getDiff([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18), (10, 20)]\n  */\nconst getDiff = (l) => {\n  return l.reduce((acc, e) => {\n    acc[e] = [acc[e[0]], acc[e[1]]];\n    return acc;\n  }, {});\n};\n\n/*\n  Given a list of numbers, returns a list of pairs of numbers,\n  with the first number as the product of the two.\n  >>> getProd([1, 2, 3, 4, 5])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]\n  >>> getProd([1, 2, 3, 4, 5, 6])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]\n  >>> getProd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16)]\n  >>> getProd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16), (9, 18)]\n  */\nconst getProd = (l) => {\n  return l.reduce((acc, e) => {\n    acc[e] = [acc[e[0]], acc[e[1]]];\n    return acc;\n  }, {});\n};\n\n/*\n  Given a list of numbers, returns a list of pairs of numbers,\n  with the first number as the quotient of the two.\n  >>> getQuo([1, 2, 3, 4, 5])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10)]\n  >>> getQuo([1, 2, 3, 4, 5, 6])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12)]\n  >>> getQuo([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14), (8, 16)]\n  >>> getQuo([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 2), (2, 4), (3, 6), (4, 8), (5, 10), (6, 12), (7, 14"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  return n > 1 &&!(n % 2) &&!(n % 3) &&!(n % 5) &&!(n % 7) &&!(n % 11) &&!(n % 13) &&!(n % 17) &&!(n % 19) &&!(n % 23) &&!(n % 29) &&!(n % 31) &&!(n % 37) &&!(n % 41) &&!(n % 43) &&!(n % 47) &&!(n % 53) &&!(n % 59) &&!(n % 61) &&!(n % 67) &&!(n % 71) &&!(n % 73) &&!(n % 79) &&!(n % 83) &&!(n % 89) &&!(n % 97)\n}\n\n/*\n  Calculates the sum of all primes less than n\n  >>> sumPrime(100)\n  45\n  >>> sumPrime(12)\n  12\n  >>> sumPrime(15)\n  15\n  >>> sumPrime(100)\n  44\n  >>> sumPrime(101)\n  45\n  >>> sumPrime(2)\n  2\n  >>> sumPrime(1)\n  1\n  >>> sumPrime(10)\n  9\n  >>> sumPrime(1000000)\n  4995001\n  */\nconst sumPrime = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n}\n\n/*\n  Returns the sum of all even digits of n\n  >>> sumEvenDigits(12)\n  12\n  >>> sumEvenDigits(6)\n  6\n  >>> sumEvenDigits(10)\n  6\n  >>> sumEvenDigits(13)\n  5\n  >>> sumEvenDigits(19)\n  5\n  >>> sumEvenDigits(20)\n  10\n  >>> sumEvenDigits(21)\n  7\n  >>> sumEvenDigits(21)\n  7\n  >>> sumEvenDigits(1)\n  1\n  >>> sumEvenDigits(2)\n  1\n  >>> sumEvenDigits(3)\n  2\n  >>> sumEvenDigits(4)\n  4\n  >>> sumEvenDigits(5)\n  5\n  >>> sumEvenDigits(10)\n  6\n  >>> sumEvenDigits(15)\n  10\n  >>> sumEvenDigits(100)\n  56\n  */\nconst sumEvenDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.toString().length; i++) {\n    if (n.toString().charAt(i) % 2 === 0) {\n      sum += n.toString().charAt(i);\n    }\n  }\n  return sum;\n}\n\nmodule.exports = { sumEvenDigits, sumPrime, isPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  if (n < 2) return 0;\n  let i = 1;\n  while (i < n) {\n    if (xs[i] === 0) {\n      if (i % 2 === 0) return xs[i];\n      else break;\n    }\n    i += 2;\n  }\n  let x0 = 0;\n  let x1 = 0;\n  const p = poly(xs, 0);\n  let t = x1;\n  for (let j = 1; j < n; j += 2) {\n    if (xs[j]!== 0) {\n      x0 = x1;\n      x1 = t;\n    }\n    t = x0 + x1 * x;\n  }\n  return t;\n}\n\n/*\n  x is a real number.\n  return the number of roots of poly(x)\n  */\nconst countRoots = (x) => {\n  const n = poly(poly(x), 1).length;\n  if (n === 0) return 0;\n  return n;\n}\n\n/*\n  n is a positive integer.\n  x0 is a real number.\n  return the n roots of poly(x0 + x1 * x2 *... * xn)\n  */\nconst roots = (n, x0) => {\n  if (n === 0) return [];\n  return poly(poly(x0), n - 1);\n}\n\n/*\n  Evaluate polynomial of degree n at x0\n  and return n coefficients in array xs.\n  */\nconst evalPoly = (n, x0) => {\n  const xs = [];\n  for (let i = 0; i < n; i++) xs.push(x0);\n  return xs;\n}\n\n/*\n  Find the real roots of f(x) = (x - 1)^2 - x + 1\n  */\nconst realRoots = (x0) => {\n  const roots = roots(2, x0);\n  const n = roots.length;\n  if (n === 0) return [];\n  return [roots[0]];\n}\n\nconst findRoots = (x0) => {\n  const n = countRoots(x0);\n  if (n === 0) return [];\n  return realRoots(x0);\n}\n\n/*\n  findRoots(x0) returns a list of real roots of f(x) = (x - 1)^2 - x + 1\n  */\nconst findRootsList = (x0) => {\n  const n = countRoots(x0);\n  if (n === 0) return [];\n  return [x0];\n}\n\n/*\n  Evaluate f(x) = (x - 1)^2 - x + 1 for real roots\n  */\nconst evalPolyList = (n, x0) => {\n  const roots = findRoots(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n)];\n}\n\n/*\n  Evaluate f(x) = (x - 1)^2 - x + 1 for all real roots\n  */\nconst evalAllPolys = (x0) => {\n  const roots = findRoots(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n) for (let i = 0; i < roots.length; i++) roots[i]];\n}\n\n/*\n  n is a positive integer.\n  x0 is a real number.\n  return the n roots of poly(x0 + x1 * x2 *... * xn)\n  */\nconst evalAllPolysList = (n, x0) => {\n  const roots = findRootsList(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n) for (let i = 0; i < roots.length; i++) roots[i]];\n}\n\n/*\n  Find the roots of poly(x) = (x - 1)^2 - x + 1\n  */\nconst evalAllPolysList2 = (n, x0) => {\n  const roots = findRootsList(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n) for (let i = 0; i < roots.length; i++) roots[i]];\n}\n\n/*\n  Find the roots of poly(x) = (x - 1)^2 - x + 1\n  */\nconst evalAllPolysList3 = (n, x0) => {\n  const roots = findRootsList(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n) for (let i = 0; i < roots.length; i++) roots[i]];\n}\n\n/*\n  Find the roots of poly(x) = (x - 1)^2 - x + 1\n  */\nconst evalAllPolysList4 = (n, x0) => {\n  const roots = findRootsList(x0);\n  if (roots.length === 0) return [];\n  return [poly(poly(x0), n) for (let i = 0; i < roots.length;"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const arr = [...l];\n  const sortedArr = [];\n  const i = 0;\n  const j = 0;\n  let k = 0;\n  while (i < arr.length) {\n    if (arr[i] % 3 === 0) {\n      sortedArr[k] = arr[i];\n      k += 1;\n    }\n    i += 1;\n  }\n  while (j < sortedArr.length) {\n    if (sortedArr[j] % 3 === 0) {\n      sortedArr[k] = sortedArr[j];\n      k += 1;\n    }\n    j += 1;\n  }\n  return sortedArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = {}\n  return (a) => a.filter((el) => seen.hasOwnProperty(el))\n}\n\n/*\n  Check if a list contains a given element\n  >>> contains([1, 2, 3, 4, 5], 4)\n  true\n  >>> contains([1, 2, 3, 4, 5], 6)\n  false\n  >>> contains([1, 2, 3, 4, 5], 2, 3)\n  true\n  */\nconst contains = (l, el, cmp = (a, b) => a === b) => {\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    if (cmp(l[i], el)) return true\n  }\n  return false\n}\n\n/*\n  Return first index of a given element in a list\n  >>> findIndex([1, 2, 3, 4, 5], 3)\n  1\n  >>> findIndex([1, 2, 3, 4, 5], 6)\n  -1\n  >>> findIndex([1, 2, 3, 4, 5], 2, 3)\n  1\n  */\nconst findIndex = (l, el, cmp = (a, b) => a === b) => {\n  let i = 0\n  while (i < l.length) {\n    if (cmp(l[i], el)) return i\n    i++\n  }\n  return -1\n}\n\n/*\n  Return last index of a given element in a list\n  >>> findLastIndex([1, 2, 3, 4, 5], 3)\n  4\n  >>> findLastIndex([1, 2, 3, 4, 5], 6)\n  -1\n  >>> findLastIndex([1, 2, 3, 4, 5], 2, 3)\n  4\n  */\nconst findLastIndex = (l, el, cmp = (a, b) => a === b) => {\n  let i = l.length - 1\n  while (i >= 0) {\n    if (cmp(l[i], el)) return i\n    i--\n  }\n  return -1\n}\n\n/*\n  Get first element in a list\n  >>> first([1, 2, 3, 4, 5])\n  1\n  >>> first([1, 2, 3, 4, 5, 6])\n  1\n  >>> first([])\n  undefined\n  */\nconst first = (l) => {\n  if (l.length === 0) return undefined\n  return l[0]\n}\n\n/*\n  Get last element in a list\n  >>> last([1, 2, 3, 4, 5])\n  5\n  >>> last([1, 2, 3, 4, 5, 6])\n  6\n  >>> last([])\n  undefined\n  */\nconst last = (l) => {\n  if (l.length === 0) return undefined\n  return l[l.length - 1]\n}\n\n/*\n  Return a list of elements from the start of a list\n  >>> head([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5]\n  >>> head([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5]\n  >>> head([])\n  []\n  */\nconst head = (l) => {\n  if (l.length === 0) return []\n  return [l[0]]\n}\n\n/*\n  Return a list of elements from the end of a list\n  >>> tail([1, 2, 3, 4, 5, 6])\n  [6, 5, 4, 3, 2, 1]\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8])\n  [8, 7, 6, 5, 4, 3, 2, 1]\n  >>> tail([])\n  []\n  */\nconst tail = (l) => {\n  if (l.length === 0) return []\n  return l.slice(1)\n}\n\n/*\n  Return a list of elements from a given index\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8], 3)\n  [4, 5, 6, 7, 8]\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8], 5)\n  [6, 7, 8]\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8], 9)\n  []\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8], -1)\n  []\n  >>> tail([1, 2, 3, 4, 5, 6, 7, 8], -5)\n  [6, 7, 8]\n  >>> tail([], -1)\n  []\n  */\nconst tail = (l, index) => {\n  if (index < 0) return []\n  return l.slice(index)\n}\n\n/*\n  Return a list of elements from a given index\n  >>> skip([1, 2, 3, 4, 5, 6, 7, 8], 3)\n  [4, 5, 6, 7, 8]\n  >>> skip([1, 2, 3, 4, 5, 6, 7, 8], 5)\n  [6, 7, 8]\n  >>> skip([1, 2, 3, 4, 5, 6, 7, 8], 9)\n  []\n  >>> skip([1, 2, 3, 4, 5, 6, 7, 8], -1)\n  []\n  >>> skip([1, 2, 3, 4, 5, 6, 7, 8], -5)\n  [6, 7, 8]\n  >>> skip([], -1)\n  []\n  */\nconst skip = (l, index) => {\n  if (index < 0) return []\n  return l.slice(index + 1)\n}\n\nexport default {\n  unique,\n  contains,\n  findIndex,\n  findLastIndex,\n  first,\n  last,\n  head,\n  tail,\n  skip\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = Number.MIN_VALUE;\n  l.forEach(e => max = Math.max(max, e));\n  return max;\n};\n\n/**\n  Rearranges the elements in the list in ascending order.\n  >>> sorted([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-10, -3, -5, 0, 1, 3, 3, 5, 9, 123, 2]\n  >>> sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 1, -5, -3, -2, 2])\n  [-2, -3, -5, -10, -5, 1, 1, 2, 3, 3, 5, 9, 123, 2]\n  >>> sorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 1, -5, -3, -2, 2, 5])\n  [-2, -3, -5, -10, -5, 1, 1, 2, 3, 3, 5, 9, 123, 2, 5]\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst sorted = (l) => {\n  l.sort((a, b) => a - b);\n  return l;\n};\n\n/**\n  Finds the number of elements in the list that are equal to a specified value.\n  >>> countEqualTo(1, [1, 2, 3, 4, 5, 6])\n  3\n  >>> countEqualTo(2, [1, 2, 3, 4, 5, 6])\n  1\n  >>> countEqualTo(9, [1, 2, 3, 4, 5, 6])\n  0\n  >>> countEqualTo(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  */\nconst countEqualTo = (value, l) => {\n  return l.filter(e => e === value).length;\n};\n\n/**\n  Returns the number of elements in the list that are equal to a specified value.\n  >>> countEqualTo(1, [1, 2, 3, 4, 5, 6])\n  3\n  >>> countEqualTo(2, [1, 2, 3, 4, 5, 6])\n  1\n  >>> countEqualTo(9, [1, 2, 3, 4, 5, 6])\n  0\n  >>> countEqualTo(1, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  2\n  >>> countEqualTo(2, [5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10, 1, -5, -3, -2, 2])\n  1\n  */\nconst countEqualTo2 = (value, l) => {\n  return l.filter(e => e === value).length;\n};\n\n/**\n  Reverse a list in place.\n  >>> reverse([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5, 6, 7])\n  [7, 6, 5, 4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  */\nconst reverse = (l) => {\n  l.reverse();\n  return l;\n};\n\n/**\n  Returns the first element of the list.\n  >>> first([1, 2, 3, 4])\n  1\n  >>> first([1, 2, 3, 4, 5])\n  1\n  >>> first([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> first([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> first([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  1\n  */\nconst first = (l) => l[0];\n\n/**\n  Returns the last element of the list.\n  >>> last([1, 2, 3, 4])\n  4\n  >>> last([1, 2, 3, 4, 5])\n  4\n  >>> last([1, 2, 3, 4, 5, 6, 7])\n  4\n  >>> last([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  4\n  >>> last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  4\n  */\nconst last = (l) => l[l.length - 1];\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const isDivisibleBy11 = (num) => num % 11 === 0;\n  const isDivisibleBy13 = (num) => num % 13 === 0;\n  const isDivisibleBy11Or13 = (num) => isDivisibleBy11(num) || isDivisibleBy13(num);\n\n  return n\n   .toString()\n   .split('')\n   .map(num => num === 7? '7' : (isDivisibleBy11Or13(num)? 'Fizz' : '') + (isDivisibleBy11(num)? '11' : '') + (isDivisibleBy13(num)? '13' : '') + (isDivisibleBy11Or13(num)? 'Buzz' : ''))\n   .join('');\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  return l.filter((elem, index) => index % 2 === 0)\n       .sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the even indices, while its values in the odd indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 5, 6, 4]\n  */\nconst sortEven2 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven3 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven4 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven5 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven6 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven7 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven8 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven9 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n\n/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEven10 = (l) => {\n  return l.sort((elem1, elem2) => elem1 - elem2);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode = (s) => decode_cyclic(decodeCyclic(s));\nconst encode = (s) => encode_cyclic(encodeCyclic(s));\n\nexport { decode, encode }\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n === 1) {\n        return 2;\n    }\n    return ((primeFib(n - 1) + primeFib(n - 2)) % 10).toString();\n};\n\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0\n  let triples = {}\n  let count = 0\n  l.forEach((x, i) => {\n    if (count === 0) {\n      sum += x\n    } else if (sum === 0) {\n      if (triples[x] === undefined) {\n        triples[x] = i\n      } else {\n        triples[x] = undefined\n      }\n      count++\n      sum = x\n    } else {\n      if (sum + x === 0) {\n        if (triples[x] === undefined) {\n          triples[x] = i\n        } else {\n          triples[x] = undefined\n        }\n      }\n    }\n  })\n  return triples.length === 3\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n    const cars = new Array(n);\n    let counter = 0;\n    for (let i = 0; i < n; i++) {\n        cars[i] = {\n            left: {x: 0, y: 0},\n            right: {x: 0, y: 0}\n        };\n    }\n    cars[0].left.x = 1;\n    cars[0].left.y = -1;\n    cars[0].right.x = -1;\n    cars[0].right.y = -1;\n\n    cars[n - 1].left.x = -1;\n    cars[n - 1].left.y = 1;\n    cars[n - 1].right.x = 1;\n    cars[n - 1].right.y = 1;\n\n    let next = 0;\n    let prev = 0;\n    let move = 1;\n    let step = 1;\n\n    while (true) {\n        cars[next].x += cars[prev].x * move;\n        cars[next].y += cars[prev].y * move;\n        cars[next].x = Math.round(cars[next].x);\n        cars[next].y = Math.round(cars[next].y);\n        if (cars[next].x >= n) {\n            cars[next].x = 0;\n            cars[next].y = -1;\n            cars[prev].x = 0;\n            cars[prev].y = 1;\n            move = -1;\n            step++;\n            if (step > n) {\n                return counter;\n            }\n        } else if (cars[next].x <= -1) {\n            cars[next].x = n - 1;\n            cars[next].y = 1;\n            cars[prev].x = n - 1;\n            cars[prev].y = -1;\n            move = -1;\n            step++;\n            if (step > n) {\n                return counter;\n            }\n        }\n        next++;\n        if (next === n) {\n            next = 0;\n        }\n        prev = next;\n    }\n};\n\nmodule.exports = carRaceCollision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const result = new Set();\n    for (let i = 0; i < l.length; i++) {\n        const value = l[i];\n        if (value === 0) {\n            result.add(i);\n            continue;\n        }\n        for (let j = i + 1; j < l.length; j++) {\n            const pair = [l[i], l[j]];\n            if (pair.every(x => x >= 0)) {\n                result.add(pair);\n            }\n        }\n    }\n    return result.size === 2;\n};\n\n//Test\nconsole.log(pairsSumToZero([1, 3, 5, 0]));\nconsole.log(pairsSumToZero([1, 3, -2, 1]));\nconsole.log(pairsSumToZero([1, 2, 3, 7]));\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7]));\nconsole.log(pairsSumToZero([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x;\n  while (x > 0) {\n    result = (x % base) + result;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*Cconverts a number represented as a string to the base x. The function returns the integer representation of the number.\n  >>> toBase(999, 3)\n  999\n  >>> toBase(999, 2)\n  3\n  >>> toBase(999, 4)\n  999\n  >>> toBase(1000, 3)\n  0\n  >>> toBase(10, 3)\n  0\n  >>> toBase(10, 2)\n  2\n  >>> toBase(10, 4)\n  0\n  */\nconst toBase = (x, base) => {\n  let result = 0;\n  for (let i = x.length - 1; i >= 0; i--) {\n    result += (x[i] * Math.pow(base, x.length - i - 1));\n  }\n  return result;\n};\n\n/*Creturns the string representation of the integer value x.\n  >>> intToStr(999)\n  '999'\n  >>> intToStr(9)\n  '9'\n  >>> intToStr(0)\n  '0'\n  >>> intToStr(999, 3)\n  '999'\n  >>> intToStr(999, 2)\n  '999'\n  >>> intToStr(999, 4)\n  '999'\n  >>> intToStr(1000, 3)\n  '0'\n  >>> intToStr(10, 3)\n  '0'\n  >>> intToStr(10, 2)\n  '10'\n  >>> intToStr(10, 4)\n  '0'\n  */\nconst intToStr = (x, base) => {\n  let result = x.toString();\n  while (result.length < base) {\n    result = '0' + result;\n  }\n  return result;\n};\n\n/*Cconverts a number represented as a string to the base x. The function returns the integer representation of the number.\n  >>> changeBase(999, 2)\n  999\n  >>> changeBase(999, 3)\n  999\n  >>> changeBase(999, 4)\n  999\n  >>> changeBase(999, 5)\n  999\n  >>> changeBase(999, 6)\n  999\n  >>> changeBase(999, 7)\n  999\n  >>> changeBase(999, 8)\n  999\n  >>> changeBase(999, 9)\n  999\n  >>> changeBase(999, 10)\n  999\n  >>> changeBase(999, 11)\n  999\n  >>> changeBase(999, 12)\n  999\n  >>> changeBase(999, 13)\n  999\n  >>> changeBase(999, 14)\n  999\n  >>> changeBase(999, 15)\n  999\n  >>> changeBase(999, 16)\n  999\n  >>> changeBase(999, 17)\n  999\n  >>> changeBase(999, 18)\n  999\n  >>> changeBase(999, 19)\n  999\n  >>> changeBase(999, 20)\n  999\n  >>> changeBase(999, 21)\n  999\n  >>> changeBase(999, 22)\n  999\n  >>> changeBase(999, 23)\n  999\n  >>> changeBase(999, 24)\n  999\n  >>> changeBase(999, 25)\n  999\n  >>> changeBase(999, 26)\n  999\n  >>> changeBase(999, 27)\n  999\n  >>> changeBase(999, 28)\n  999\n  >>> changeBase(999, 29)\n  999\n  >>> changeBase(999, 30)\n  999\n  >>> changeBase(999, 31)\n  999\n  >>> changeBase(999, 32)\n  999\n  >>> changeBase(999, 33)\n  999\n  >>> changeBase(999, 34)\n  999\n  >>> changeBase(999, 35)\n  999\n  >>> changeBase(999, 36)\n  999\n  >>> changeBase(999, 37)\n  999\n  >>> changeBase(999, 38)\n  999\n  >>> changeBase(999, 39)\n  999\n  >>> changeBase(999, 40)\n  999\n  >>> changeBase(999, 41)\n  999\n  >>> changeBase(999, 42)\n  999\n  >>> changeBase(999, 43)\n  999\n  >>> changeBase(999, 44)\n  999\n  >>> changeBase(999, 45)\n  999\n  >>> changeBase(999, 46)\n  999\n  >>> changeBase(999, 47)\n  999\n  >>> changeBase(999, 48)\n  999\n  >>> changeBase(999, 49)\n  999\n  >>> changeBase(999, 50)\n  999\n  >>> changeBase(999, 51)\n  999\n  >>> changeBase(999, 52)\n  999\n  >>> changeBase(999, 53)\n  999\n  >>> changeBase(999, 54)\n  999\n  >>> changeBase(999, 55)\n  999\n  >>> changeBase(999, 56)\n  999\n  >>> changeBase(999, 57)\n  999\n  >>> changeBase(999, 58)\n  999\n  >>> changeBase(999, 59)\n  999\n  >>> changeBase(999, 60)\n  999\n  >>> changeBase(999, 61)\n  999\n  >>> changeBase(999, 62)\n  999\n  >>> changeBase(999, 63)\n  999\n  >>> changeBase(999, 64)\n  999\n  >>> changeBase(999, 65)\n  999\n  >>> changeBase(999, 66)\n  999\n  >>> changeBase(999, 67)\n  999\n  >>> changeBase(999, 68)\n  999\n  >>> changeBase(999, 69)\n  999\n  >>> changeBase(999, 70)\n  999\n  >>> changeBase(999, 71)\n  999\n  >>> changeBase(999, 72)\n  999\n  >>> changeBase(999, 73)\n  999\n  >>> changeBase(999, 74)\n  "}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.abs(\n    (a * h / 2) -\n    Math.sqrt(\n      Math.pow(h, 2) * (Math.pow(a, 2) - Math.pow(h, 2)) + Math.pow(a, 2)\n    )\n  );\n};\n\nconst isPointInTriangle = (p, a, b, c) => {\n  return (\n    Math.abs(\n      (a * p.x) +\n      (b * p.y) +\n      (c * p.z) -\n      ((a * p.x) + (b * p.y) + (c * p.z))\n    ) <\n    Math.sqrt(\n      Math.pow(a, 2) +\n      Math.pow(b, 2) +\n      Math.pow(c, 2) -\n      2 * a * b -\n      2 * b * c -\n      2 * c * a\n    )\n  );\n};\n\nconst isInsideTriangle = (p, a, b, c) => {\n  return triangleArea(a, b, c) > 0? isPointInTriangle(p, a, b, c) :\n                                      isPointInTriangle(p, b, a, c) ||\n                                      isPointInTriangle(p, c, a, b);\n};\n\nexport default isInsideTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 2\n  return fib4(n - 1) + fib4(n - 2)\n}\n\n/*\n  ## The Fibonacci sequence is a sequence that starts with 1 and ends with n, where n is the largest integer.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  15791\n  >>> fibonacci(23)\n  23404\n  >>> fibonacci(24)\n  36763\n  >>> fibonacci(25)\n  59436\n  >>> fibonacci(26)\n  89443\n  >>> fibonacci(27)\n  131915\n  >>> fibonacci(28)\n  177209\n  >>> fibonacci(29)\n  269832\n  >>> fibonacci(30)\n  347077\n  >>> fibonacci(31)\n  484472\n  >>> fibonacci(32)\n  641387\n  >>> fibonacci(33)\n  824695\n  >>> fibonacci(34)\n  1009109\n  >>> fibonacci(35)\n  1276606\n  >>> fibonacci(36)\n  1587113\n  >>> fibonacci(37)\n  1876136\n  >>> fibonacci(38)\n  2077383\n  >>> fibonacci(39)\n  2414797\n  >>> fibonacci(40)\n  2699194\n  >>> fibonacci(41)\n  2858269\n  >>> fibonacci(42)\n  3023694\n  >>> fibonacci(43)\n  3272901\n  >>> fibonacci(44)\n  3579125\n  >>> fibonacci(45)\n  3825330\n  >>> fibonacci(46)\n  4029077\n  >>> fibonacci(47)\n  4215982\n  >>> fibonacci(48)\n  4445187\n  >>> fibonacci(49)\n  4670320\n  >>> fibonacci(50)\n  4885843\n  >>> fibonacci(51)\n  5119006\n  >>> fibonacci(52)\n  5428291\n  >>> fibonacci(53)\n  5691597\n  >>> fibonacci(54)\n  5939156\n  >>> fibonacci(55)\n  6170933\n  >>> fibonacci(56)\n  6508529\n  >>> fibonacci(57)\n  6826370\n  >>> fibonacci(58)\n  7166686\n  >>> fibonacci(59)\n  7516337\n  >>> fibonacci(60)\n  7901697\n  >>> fibonacci(61)\n  8241574\n  >>> fibonacci(62)\n  8744771\n  >>> fibonacci(63)\n  9241597\n  >>> fibonacci(64)\n  9674567\n  >>> fibonacci(65)\n  9999936\n  >>> fibonacci(66)\n  10332726\n  >>> fibonacci(67)\n  10737418\n  >>> fibonacci(68)\n  1125899\n  >>> fibonacci(69)\n  11791577\n  >>> fibonacci(70)\n  12252656\n  >>> fibonacci(71)\n  12683763\n  >>> fibonacci(72)\n  13201242\n  >>> fibonacci(73)\n  13663737\n  >>> fibonacci(74)\n  14209714\n  >>> fibonacci(75)\n  14728591\n  >>> fibonacci(76)\n  15380191\n  >>> fibonacci(77)\n  15874162\n  >>> fibonacci(78)\n  16442498\n  >>> fibonacci(79)\n  17065517\n  >>> fibonacci(80)\n  17692615\n  >>> fibonacci(81)\n  18376564\n  >>> fibonacci(82)\n  18962323\n  >>> fibonacci(83)\n  19600621\n  >>> fibonacci(84)\n  20013983\n  >>> fibonacci(85)\n  20565562\n  >>> fibonacci(86)\n  21037762\n  >>> fibonacci(87)\n  21589591\n  >>> fibonacci(88)\n  22017515\n  >>> fibonacci(89)\n  22588578\n  >>> fibonacci(90)\n  23082424\n  >>> fibonacci(91)\n  23581764\n  >>> fibonacci(92)\n  24181526\n  >>> fibonacci(93)\n  24686078\n  >>> fibonacci(94)\n  25282631\n  >>> fibonacci(95)\n  25787623\n  >>> fibon"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const a = l.slice(0);\n  const n = a.length;\n  let j = 0;\n  let h = 0;\n  let i = n / 2;\n  while (j < n) {\n    if (a[j] < a[i]) {\n      h += i - j;\n      j = i + 1;\n    } else if (a[j] > a[i]) {\n      h += i;\n      i = j + 1;\n    } else {\n      h += i;\n      j++;\n      i++;\n    }\n  }\n  return a[Math.floor(h / 2)];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  if (!text) {\n    return false\n  }\n  const len = text.length\n  let i = 0\n  let j = len - 1\n  while (i < j) {\n    if (text[i]!== text[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Tests if the given number is a palindrome\n  >>> isPalindrome(1)\n  true\n  >>> isPalindrome(2)\n  true\n  >>> isPalindrome(4)\n  true\n  >>> isPalindrome(-1)\n  true\n  >>> isPalindrome(999)\n  false\n  >>> isPalindrome(1234567)\n  false\n  >>> isPalindrome(123)\n  true\n  */\nconst isPalindromeNumber = (n) => {\n  return (n % 1 === 0) && (n > 0)\n}\n\n/*\n  Tests if the given character is a letter\n  >>> isLetter('a')\n  true\n  >>> isLetter('1')\n  false\n  >>> isLetter('0')\n  false\n  >>> isLetter('A')\n  true\n  */\nconst isLetter = (char) => {\n  return (/^[a-zA-Z]+$/.test(char))\n}\n\n/*\n  Tests if the given string is a digit\n  >>> isDigit('1')\n  true\n  >>> isDigit('0')\n  true\n  >>> isDigit('3')\n  true\n  >>> isDigit('9')\n  true\n  >>> isDigit('1a')\n  false\n  >>> isDigit('abc')\n  false\n  */\nconst isDigit = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^\\d+$/.test(text))\n}\n\n/*\n  Tests if the given string is a alphanumeric\n  >>> isAlphanumeric('1')\n  true\n  >>> isAlphanumeric('0')\n  true\n  >>> isAlphanumeric('9')\n  true\n  >>> isAlphanumeric('a')\n  true\n  >>> isAlphanumeric('A')\n  true\n  >>> isAlphanumeric('1a')\n  false\n  >>> isAlphanumeric('abc')\n  false\n  */\nconst isAlphanumeric = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[a-zA-Z0-9]+$/.test(text))\n}\n\n/*\n  Tests if the given string is a whitespace\n  >>> isWhitespace(' ')\n  true\n  >>> isWhitespace('a')\n  false\n  >>> isWhitespace('\\t')\n  true\n  */\nconst isWhitespace = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^\\s+$/.test(text))\n}\n\n/*\n  Tests if the given string is a lowercase letter\n  >>> isLowercase('a')\n  true\n  >>> isLowercase('A')\n  true\n  >>> isLowercase('a1')\n  false\n  >>> isLowercase('a!')\n  false\n  >>> isLowercase('ab')\n  false\n  */\nconst isLowercase = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[a-z]+$/.test(text))\n}\n\n/*\n  Tests if the given string is an uppercase letter\n  >>> isUppercase('A')\n  true\n  >>> isUppercase('a')\n  true\n  >>> isUppercase('a1')\n  false\n  >>> isUppercase('a!')\n  false\n  >>> isUppercase('ab')\n  false\n  */\nconst isUppercase = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[A-Z]+$/.test(text))\n}\n\n/*\n  Tests if the given string is a valid integer\n  >>> isInteger('1')\n  true\n  >>> isInteger('1.0')\n  false\n  >>> isInteger('abc')\n  false\n  >>> isInteger('a1')\n  false\n  >>> isInteger(1)\n  true\n  */\nconst isInteger = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[0-9]+$/.test(text))\n}\n\n/*\n  Tests if the given string is a valid float\n  >>> isFloat('1')\n  true\n  >>> isFloat('1.0')\n  true\n  >>> isFloat('abc')\n  false\n  >>> isFloat('a1')\n  false\n  >>> isFloat(1)\n  true\n  */\nconst isFloat = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[0-9]+\\.[0-9]+$/.test(text))\n}\n\n/*\n  Tests if the given string is a valid boolean\n  >>> isBoolean('true')\n  true\n  >>> isBoolean('false')\n  true\n  >>> isBoolean('a')\n  false\n  >>> isBoolean('1')\n  false\n  */\nconst isBoolean = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^(true|false)$/.test(text))\n}\n\n/*\n  Tests if the given string is a valid identifier\n  >>> isIdentifier('foo')\n  true\n  >>> isIdentifier('Foo')\n  true\n  >>> isIdentifier('foo1')\n  false\n  >>> isIdentifier('foo!')\n  false\n  >>> isIdentifier('foo$bar')\n  false\n  */\nconst isIdentifier = (text) => {\n  if (!text) {\n    return false\n  }\n  return (/^[a-zA-Z_][a-zA-Z0-9_]+$/.test"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  } else if (n % p === 0) {\n    return 0\n  }\n  return modp(n - p, p) + modp(n, p)\n}\n\n//\n//  >>> modp(0, 3)\n//  0\n//  >>> modp(2, 3)\n//  0\n//  >>> modp(3, 3)\n//  1\n//  >>> modp(4, 3)\n//  1\n//  >>> modp(5, 3)\n//  2\n//  >>> modp(6, 3)\n//  2\n//  >>> modp(7, 3)\n//  1\n//  >>> modp(8, 3)\n//  0\n//  >>> modp(9, 3)\n//  1\n//  >>> modp(10, 3)\n//  1\n//  >>> modp(11, 3)\n//  2\n//  >>> modp(12, 3)\n//  2\n//  >>> modp(13, 3)\n//  1\n//  >>> modp(14, 3)\n//  0\n//  >>> modp(15, 3)\n//  1\n//  >>> modp(16, 3)\n//  0\n//  >>> modp(17, 3)\n//  1\n//  >>> modp(18, 3)\n//  0\n//  >>> modp(19, 3)\n//  1\n//  >>> modp(20, 3)\n//  0\n//  >>> modp(21, 3)\n//  1\n//  >>> modp(22, 3)\n//  1\n//  >>> modp(23, 3)\n//  0\n//  >>> modp(24, 3)\n//  0\n//  >>> modp(25, 3)\n//  1\n//  >>> modp(26, 3)\n//  1\n//  >>> modp(27, 3)\n//  1\n//  >>> modp(28, 3)\n//  0\n//  >>> modp(29, 3)\n//  1\n//  >>> modp(30, 3)\n//  1\n//  >>> modp(31, 3)\n//  1\n//  >>> modp(32, 3)\n//  0\n//  >>> modp(33, 3)\n//  0\n//  >>> modp(34, 3)\n//  1\n//  >>> modp(35, 3)\n//  1\n//  >>> modp(36, 3)\n//  0\n//  >>> modp(37, 3)\n//  1\n//  >>> modp(38, 3)\n//  0\n//  >>> modp(39, 3)\n//  1\n//  >>> modp(40, 3)\n//  0\n//  >>> modp(41, 3)\n//  1\n//  >>> modp(42, 3)\n//  1\n//  >>> modp(43, 3)\n//  0\n//  >>> modp(44, 3)\n//  0\n//  >>> modp(45, 3)\n//  1\n//  >>> modp(46, 3)\n//  0\n//  >>> modp(47, 3)\n//  0\n//  >>> modp(48, 3)\n//  1\n//  >>> modp(49, 3)\n//  1\n//  >>> modp(50, 3)\n//  0\n//  >>> modp(51, 3)\n//  0\n//  >>> modp(52, 3)\n//  1\n//  >>> modp(53, 3)\n//  1\n//  >>> modp(54, 3)\n//  0\n//  >>> modp(55, 3)\n//  0\n//  >>> modp(56, 3)\n//  1\n//  >>> modp(57, 3)\n//  0\n//  >>> modp(58, 3)\n//  0\n//  >>> modp(59, 3)\n//  1\n//  >>> modp(60, 3)\n//  1\n//  >>> modp(61, 3)\n//  0\n//  >>> modp(62, 3)\n//  0\n//  >>> modp(63, 3)\n//  1\n//  >>> modp(64, 3)\n//  0\n//  >>> modp(65, 3)\n//  0\n//  >>> modp(66, 3)\n//  1\n//  >>> modp(67, 3)\n//  1\n//  >>> modp(68, 3)\n//  0\n//  >>> modp(69, 3)\n//  0\n//  >>> modp(70, 3)\n//  1\n//  >>> modp(71, 3)\n//  1\n//  >>> modp(72, 3)\n//  0\n//  >>> modp(73, 3)\n//  0\n//  >>> modp(74, 3)\n//  1\n//  >>> modp(75, 3)\n//  1\n//  >>> modp(76, 3)\n//  0\n//  >>> modp(77, 3)\n//  0\n//  >>> modp(78, 3)\n//  1\n//  >>> modp(79, 3)\n//  1\n//  >>> modp(80, 3)\n//  0\n//  >>> modp(81, 3)\n//  0\n//  >>> modp(82, 3)\n//  1\n//  >>> modp(83, 3)\n//  1\n//  >>> modp(84, 3)\n//  0\n//  >>> modp(85, 3)\n//  0\n//  >>> modp(86, 3)\n//  1\n//  >>> modp(87, 3)\n//  1\n//  >>> modp(88, 3)\n//  0\n//  >>> modp(89, 3)\n//  0\n//  >>> modp(90, 3)\n//  1\n//  >>> modp(91, 3)\n//  1\n//  "}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let c = 0;\n  let decoded = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let digit = String.fromCharCode(s.charCodeAt(i) - \"a\".charCodeAt(0))\n    let decodedChar = String.fromCharCode(\n      ((c + (digit.charCodeAt(0) - \"a\".charCodeAt(0))) % 26) + \"a\".charCodeAt(0)\n    );\n    decoded += decodedChar;\n    c = c + 5;\n  }\n  return decoded;\n}\n\n/*\n  returns true if input string contains any numbers.\n  */\nconst is_numeric = (s) => {\n  return /\\d/.test(s);\n}\n\n/*\n  returns true if input string is valid.\n  */\nconst is_valid = (s) => {\n  return /^[A-Za-z0-9_]+$/.test(s);\n}\n\nconst get_encoding_type = (s) => {\n  if (is_numeric(s)) {\n    return \"numeric\";\n  } else if (is_valid(s)) {\n    return \"alphanumeric\";\n  } else {\n    return \"invalid\";\n  }\n}\n\nconst encode = (s) => {\n  let encoded = encodeShift(s);\n  if (get_encoding_type(s) == \"numeric\") {\n    return \"N\" + encoded;\n  } else {\n    return \"A\" + encoded;\n  }\n}\n\nconst decode = (s) => {\n  return decodeShift(s.substring(1));\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  is_valid,\n  is_numeric,\n  get_encoding_type\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let re = /[AEIOU]/i;\n  return text.replace(re, '');\n}\n\n/*\n  isUpperCase is a function that returns true if the character is capitalized.\n  >>> isUpperCase('')\n  false\n  >>> isUpperCase('abcdef')\n  false\n  >>> isUpperCase('ABCDEF')\n  true\n  >>> isUpperCase('aBcDf')\n  true\n  >>> isUpperCase('aBcDeF')\n  false\n  >>> isUpperCase('Aa')\n  false\n  >>> isUpperCase('aA')\n  true\n  >>> isUpperCase('Zz')\n  false\n  */\nconst isUpperCase = (text) => {\n  return text[0].toUpperCase() === text[0];\n}\n\n/*\n  isLowerCase is a function that returns true if the character is lowercase.\n  >>> isLowerCase('')\n  false\n  >>> isLowerCase('abcdef')\n  false\n  >>> isLowerCase('abcDef')\n  false\n  >>> isLowerCase('aBcDeF')\n  true\n  >>> isLowerCase('aBcDf')\n  true\n  >>> isLowerCase('Aa')\n  false\n  >>> isLowerCase('aA')\n  true\n  >>> isLowerCase('Zz')\n  true\n  */\nconst isLowerCase = (text) => {\n  return text[0].toLowerCase() === text[0];\n}\n\n/*\n  isVowel is a function that returns true if the character is a vowel.\n  >>> isVowel('')\n  false\n  >>> isVowel('a')\n  true\n  >>> isVowel('e')\n  true\n  >>> isVowel('f')\n  false\n  >>> isVowel('g')\n  false\n  >>> isVowel('h')\n  true\n  >>> isVowel('i')\n  true\n  >>> isVowel('o')\n  true\n  >>> isVowel('u')\n  true\n  >>> isVowel('A')\n  false\n  >>> isVowel('B')\n  false\n  >>> isVowel('C')\n  false\n  >>> isVowel('D')\n  false\n  >>> isVowel('E')\n  false\n  >>> isVowel('F')\n  false\n  >>> isVowel('G')\n  false\n  >>> isVowel('H')\n  false\n  >>> isVowel('I')\n  false\n  >>> isVowel('J')\n  false\n  >>> isVowel('K')\n  false\n  >>> isVowel('L')\n  false\n  >>> isVowel('M')\n  false\n  >>> isVowel('N')\n  false\n  >>> isVowel('O')\n  false\n  >>> isVowel('P')\n  false\n  >>> isVowel('Q')\n  false\n  >>> isVowel('R')\n  false\n  >>> isVowel('S')\n  false\n  >>> isVowel('T')\n  false\n  >>> isVowel('U')\n  false\n  >>> isVowel('V')\n  false\n  >>> isVowel('W')\n  false\n  >>> isVowel('X')\n  false\n  >>> isVowel('Y')\n  false\n  >>> isVowel('Z')\n  false\n  */\nconst isVowel = (text) => {\n  return /[AEIOU]/.test(text);\n}\n\nconst removeVowels = (text) => {\n  return text.replace(/[AEIOU]/g, '');\n}\n\nconst capitalize = (text) => {\n  return text[0].toUpperCase() + text.slice(1);\n}\n\nconst isUpperCase = (text) => {\n  return text[0].toUpperCase() === text[0];\n}\n\nconst isLowerCase = (text) => {\n  return text[0].toLowerCase() === text[0];\n}\n\nconst isVowel = (text) => {\n  return /[AEIOU]/.test(text);\n}\n\nconst isCapitalized = (text) => {\n  return text[0].toUpperCase() === text[0];\n}\n\nmodule.exports = {\n  removeVowels,\n  isUpperCase,\n  isLowerCase,\n  isVowel,\n  capitalize,\n  isCapitalized\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let result = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a collection of numbers, return a list of the\n  sum of the squares of the numbers.\n  >>> squares([1, 2, 3])\n  [1, 4, 9]\n  >>> squares([-1, 0, 2, 3, 4])\n  [-1, 0, 4, 9, 16]\n  >>> squares([])\n  []\n  >>> squares([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  >>> squares([-1, 0, 2, 3, 4, 5])\n  [-1, 0, 4, 9, 16, 25]\n  >>> squares([-1, 0, 2, 3, 4, 5, 6])\n  [-1, 0, 4, 9, 16, 25, 36]\n  */\nconst squares = (nums) => {\n  let squares = [];\n  for (let i = 0; i < nums.length; i++) {\n    squares.push(nums[i] * nums[i]);\n  }\n  return squares;\n};\n\n/*\n  Given two lists, return a list of all the two-element\n  pairs from the lists.\n  >>> pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n  >>> pairs([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n  >>> pairs([1, 2, 3, 4, 5, 6], [1, 2, 3])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]\n  */\nconst pairs = (l, r) => {\n  let lPairs = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < r.length; j++) {\n      lPairs.push([l[i], r[j]]);\n    }\n  }\n  return lPairs;\n};\n\n/*\n  Given a list of numbers, return a list of all the subsets of\n  the list.\n  >>> subsets([1, 2, 3])\n  [[1, 2, 3], [1, 3], [2, 3], [1, 2], [1], [2], [3], []]\n  >>> subsets([1, 2, 3, 4])\n  [[1, 2, 3, 4], [1, 2, 4], [1, 3, 4], [1, 3], [2, 3], [2, 4], [1, 2], [1], [2], [3], [4], []]\n  >>> subsets([1, 2, 3])\n  [[1, 2, 3], [1, 2], [1, 3], [2, 3], [1], [2], [3], []]\n  */\nconst subsets = (nums) => {\n  let subsets = [];\n  for (let i = 0; i < nums.length + 1; i++) {\n    subsets = subsets.concat(pairs(nums, nums.slice(0, i)));\n  }\n  return subsets;\n};\n\n/*\n  Given a collection of numbers, return the largest number in the collection.\n  >>> largest([1, 2, 3, 4, 5])\n  5\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([1, 2, 3, 4, 5, 6])\n  6\n  */\nconst largest = (nums) => {\n  let largest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      largest = nums[i];\n    }\n  }\n  return largest;\n};\n\n/*\n  Given a collection of numbers, return a list of the second largest\n  number in the collection.\n  >>> secondLargest([1, 2, 3, 4, 5])\n  4\n  >>> secondLargest([1, 2, 3])\n  2\n  >>> secondLargest([1, 2, 3, 4, 5, 6])\n  5\n  */\nconst secondLargest = (nums) => {\n  let secondLargest = nums[0];\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > secondLargest) {\n      secondLargest = nums[i];\n      maxIndex = i;\n    }\n  }\n  return secondLargest;\n};\n\n/*\n  Given a collection of numbers, return a list of the smallest\n  number in the collection.\n  >>> smallest([1, 2, 3, 4, 5])\n  1\n  >>> smallest([1, 2, 3])\n  1\n  >>> smallest([1, 2, 3, 4, 5, 6])\n  1\n  */\nconst smallest = (nums) => {\n  let smallest = nums[0];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      smallest = nums[i];\n    }\n  }\n  return smallest;\n};\n\n/*\n  Return a list of the numbers in the collection that are\n  not divisible by any number in the collection.\n  >>> nonDivisible([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> nonDivisible([1, 2, 3])\n  [1, 2, 3]\n  >>> nonDivisible([1, 2, 3, 4"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  210\n  >>> multiply(5, 7)\n  210\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*\n  Subtract two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*\n  Calculate the factorial of n\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(10)\n  3628800\n  >>> factorial(20)\n  7255800\n  >>> factorial(30)\n  4564800\n  >>> factorial(100)\n  5.61941512285064e+47\n  >>> factorial(500)\n  1.44151175006596e+554\n  >>> factorial(1000)\n  1.72888855449314e+1000\n  >>> factorial(2000)\n  1.12291588331798e+2000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e+5000\n  >>> factorial(5000)\n  1.58486211709846e"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len!== s1_len) {\n    return false;\n  }\n\n  for (let i = 0; i < s0_len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check that two words have the same letters and that they have a common\n  length.\n  >>> sameCharsLength('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsLength('abcd', 'dddddddabc')\n  false\n  >>> sameCharsLength('dddddddabc', 'abcd')\n  false\n  >>> sameCharsLength('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsLength('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameCharsLength = (s0, s1) => {\n  const s0_len = s0.length;\n  const s1_len = s1.length;\n  if (s0_len!== s1_len) {\n    return false;\n  }\n\n  for (let i = 0; i < s0_len; i++) {\n    if (s0.charCodeAt(i)!== s1.charCodeAt(i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  sameChars,\n  sameCharsLength,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1, b = 1, prev = a, next = b;\n  for (let i = 1; i < n; i++) {\n    next = a + b;\n    a = b;\n    b = next;\n  }\n  return b;\n};\n\n// ###################################################################\n// Problem 2\n/*\n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n  >>> divisors(1)\n  1\n  >>> divisors(20)\n  20\n  >>> divisors(8)\n  2\n  >>> divisors(18)\n  2\n  >>> divisors(9)\n  3\n  >>> divisors(7)\n  4\n  >>> divisors(0)\n  0\n  >>> divisors(1)\n  1\n  >>> divisors(10)\n  5\n  >>> divisors(20)\n  7\n  >>> divisors(21)\n  21\n  */\nconst divisors = (n) => {\n  const factors = [];\n  const count = 1;\n  while (count < n) {\n    const divisor = count;\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        factors.push(i);\n        factors.push(divisor);\n        count++;\n      }\n    }\n  }\n  return factors.reduce((a, b) => a * b);\n};\n\n// ###################################################################\n// Problem 3\n/*\n  What is the largest prime factor of the number 15?\n  >>> prime(15)\n  3\n  >>> prime(21)\n  3\n  >>> prime(15)\n  3\n  >>> prime(8)\n  2\n  >>> prime(7)\n  7\n  >>> prime(0)\n  0\n  >>> prime(1)\n  1\n  >>> prime(20)\n  5\n  >>> prime(2)\n  2\n  >>> prime(3)\n  3\n  >>> prime(5)\n  5\n  >>> prime(10)\n  5\n  >>> prime(15)\n  3\n  >>> prime(20)\n  5\n  */\nconst prime = (n) => {\n  let prime = 1;\n  while (prime < n) {\n    if (n % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return prime;\n};\n\n// ###################################################################\n// Problem 4\n/*\n  What is the largest number that can be divided by each of the numbers from 1 to 20?\n  >>> divisor(1)\n  1\n  >>> divisor(20)\n  20\n  >>> divisor(8)\n  4\n  >>> divisor(18)\n  3\n  >>> divisor(9)\n  4\n  >>> divisor(7)\n  7\n  >>> divisor(0)\n  0\n  >>> divisor(1)\n  1\n  >>> divisor(10)\n  10\n  >>> divisor(20)\n  20\n  >>> divisor(21)\n  21\n  */\nconst divisor = (n) => {\n  const divisors = [];\n  for (let i = 1; i < n; i++) {\n    const divisor = i;\n    for (let j = 1; j < n; j++) {\n      if (n % j === 0) {\n        divisors.push(divisor);\n        divisors.push(n / j);\n      }\n    }\n  }\n  return divisors.reduce((a, b) => a * b);\n};\n\n// ###################################################################\n// Problem 5\n/*\n  What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 50 and by 7?\n  >>> divisors(1)\n  1\n  >>> divisors(50)\n  50\n  >>> divisors(1)\n  1\n  >>> divisors(7)\n  7\n  >>> divisors(8)\n  8\n  >>> divisors(20)\n  20\n  >>> divisors(18)\n  9\n  >>> divisors(9)\n  3\n  >>> divisors(7)\n  7\n  >>> divisors(0)\n  0\n  >>> divisors(1)\n  1\n  >>> divisors(10)\n  10\n  >>> divisors(20)\n  20\n  >>> divisors(21)\n  21\n  >>> divisors(50)\n  28\n  */\nconst divisors = (n) => {\n  const divisors = [];\n  let count = 1;\n  while (count < n) {\n    const divisor = count;\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        divisors.push(divisor);\n        divisors.push(n / i);\n        count++;\n      }\n    }\n  }\n  const divisor7 = 7;\n  for (let i = 0; i < divisors.length; i++) {\n    if (divisors[i] % divisor7 === 0) {\n      return divisors[i];\n    }\n  }\n  return divisors[0];\n};\n\n// ###################################################################\n// Problem 6\n/*\n  What is the largest prime factor of the number 600851475143?\n  >>> prime(600851475143)\n  600851475143\n  >>> prime(1)\n  1\n  >>> prime(600851475143)\n  600851475143\n  >>> prime(2)\n  2\n  >>> prime(3)\n  3\n  >>> prime(5)\n  5\n  >>> prime(8)\n  8\n  >>> prime(9)\n  9\n  >>> prime(600851475143)\n  600851475143\n  >>> prime(600851475144)\n  600851475144\n  >>> prime(600851475153)\n  600851475153\n  >>> prime(600851475158)\n  600851475158\n  "}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let i = 0\n  let j = 0\n  let openingBracket = \"\"\n  let closingBracket = \"\"\n  while (i < brackets.length) {\n    openingBracket = brackets[i]\n    closingBracket = \"\"\n    if (i < brackets.length - 1) {\n      closingBracket = brackets[i + 1]\n    }\n    if (openingBracket === closingBracket) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  given a string of brackets, returns a string of opening brackets and a string of closing brackets.\n  e.g.\n  >>> bracketsToOpeningAndClosingBrackets(\"<>\")\n  [\"<\",\">\",\"<\",\">\"]\n  >>> bracketsToOpeningAndClosingBrackets(\"<><>\")\n  [\"<\",\">\",\"<\",\">\",\"<\",\">\"]\n  >>> bracketsToOpeningAndClosingBrackets(\"<>\")\n  [\"<\",\">\",\"<\",\">\"]\n  >>> bracketsToOpeningAndClosingBrackets(\"<>\")\n  [\"<\",\">\",\"<\",\">\"]\n  >>> bracketsToOpeningAndClosingBrackets(\"<><>\")\n  [\"<\",\">\",\"<\",\">\",\"<\",\">\"]\n  >>> bracketsToOpeningAndClosingBrackets(\"<>\")\n  [\"<\",\">\",\"<\",\">\"]\n  */\nconst bracketsToOpeningAndClosingBrackets = (brackets) => {\n  let openingBrackets = []\n  let closingBrackets = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      openingBrackets.push(brackets[i])\n    }\n    if (brackets[i] === \">\") {\n      closingBrackets.push(brackets[i])\n    }\n  }\n  return openingBrackets.concat(closingBrackets)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const arr = l.slice().reverse()\n\n  return arr.every((el, index) => el >= arr[index + 1])\n}\n\n/*\n  RIt is true that list elements are all distinct.\n  >>> distinct([1, 2, 3, 1])\n  false\n  >>> distinct([1, 2, 3, 4])\n  true\n  >>> distinct([1, 2, 3, 2, 3])\n  true\n  */\nconst distinct = (l) => l.every((el, index) => index === l.indexOf(el))\n\n/*\n  RIt is true that all elements in the list are greater than 1.\n  >>> greaterThanOne([1, 2, 3, 4])\n  false\n  >>> greaterThanOne([1, 2, 3, 1])\n  true\n  >>> greaterThanOne([0, 1, -1, -10])\n  true\n  */\nconst greaterThanOne = (l) => l.every((el, index) => el > 1)\n\n/*\n  RIt is true that all elements in the list are less than 1.\n  >>> lessThanOne([1, 2, 3, 4])\n  true\n  >>> lessThanOne([0, 1, -1, -10])\n  false\n  >>> lessThanOne([1, 2, 3, 1])\n  false\n  */\nconst lessThanOne = (l) => l.every((el, index) => el < 1)\n\n/*\n  RIt is true that all elements in the list are non-negative.\n  >>> nonNegative([1, 2, 3, 4])\n  true\n  >>> nonNegative([0, 1, -1, -10])\n  false\n  >>> nonNegative([1, 2, 3, 1])\n  false\n  */\nconst nonNegative = (l) => l.every((el, index) => el >= 0)\n\n/*\n  RIt is true that all elements in the list are in the range [1, 10].\n  >>> inRange([1, 2, 3, 4])\n  false\n  >>> inRange([1, 2, 3, 10])\n  true\n  >>> inRange([1, 2, 3, 1])\n  false\n  >>> inRange([1, 2, 3, -1])\n  false\n  >>> inRange([1, 2, 3, 10, -10])\n  true\n  */\nconst inRange = (l) => l.every((el, index) => el >= 1 && el <= 10)\n\n/*\n  RIt is true that all elements in the list are unique.\n  >>> unique([1, 2, 3, 4])\n  false\n  >>> unique([1, 2, 3, 4, 2])\n  true\n  >>> unique([1, 2, 3, 4, 2, 3])\n  true\n  */\nconst unique = (l) => l.every((el, index) => index === l.indexOf(el))\n\n/*\n  RIt is true that all elements in the list are odd.\n  >>> odd([1, 2, 3, 4])\n  false\n  >>> odd([1, 2, 3, 5])\n  true\n  >>> odd([1, 2, 3, 3])\n  false\n  >>> odd([1, 2, 3, 4, 2])\n  false\n  >>> odd([1, 2, 3, 4, 5])\n  true\n  */\nconst odd = (l) => l.every((el, index) => el % 2 === 1)\n\n/*\n  RIt is true that all elements in the list are even.\n  >>> even([1, 2, 3, 4])\n  true\n  >>> even([1, 2, 3, 5])\n  false\n  >>> even([1, 2, 3, 3])\n  true\n  >>> even([1, 2, 3, 4, 2])\n  true\n  >>> even([1, 2, 3, 4, 5])\n  false\n  */\nconst even = (l) => l.every((el, index) => el % 2 === 0)\n\n/*\n  RIt is true that all elements in the list are prime.\n  >>> prime([1, 2, 3, 4])\n  false\n  >>> prime([1, 2, 3, 5])\n  false\n  >>> prime([1, 2, 3, 3])\n  true\n  >>> prime([1, 2, 3, 4, 2])\n  false\n  >>> prime([1, 2, 3, 4, 5])\n  false\n  >>> prime([1, 2, 3, 5, 7])\n  true\n  */\nconst prime = (l) => l.every((el, index) => {\n  if (index === l.length - 1) return el % 2 === 1\n  return el % 2 === 0 && index > 0 && prime(l.slice(0, index))\n})\n\n/*\n  RIt is true that all elements in the list are odd and prime.\n  >>> oddPrime([1, 2, 3, 4])\n  false\n  >>> oddPrime([1, 2, 3, 5])\n  false\n  >>> oddPrime([1, 2, 3, 3])\n  true\n  >>> oddPrime([1, 2, 3, 4, 2])\n  false\n  >>> oddPrime([1, 2, 3, 4, 5])\n  false\n  >>> oddPrime([1, 2, 3, 5, 7])\n  true\n  */\nconst oddPrime = (l) => l.every((el, index) => odd(l.slice(0, index)) && prime(l.slice(0, index)))\n\n/*\n  RIt is true that all elements in the list are even and prime.\n  >>> evenPrime([1, 2, 3, 4])\n  true\n  >>> evenPrime([1, 2, 3, 5])\n  false\n  >>> evenPrime([1, 2, 3, 3])\n  true\n  >>> evenPrime([1, 2, 3, 4, 2])\n  true\n  >>> evenPrime([1, 2, 3, 4, 5])\n  false\n  >>> evenPrime([1, 2, 3, 5, 7])\n  true\n  */\nconst evenPrime = (l) => l.every((el, index) => even(l.slice(0,"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const sortedL1 = sort(l1);\n  const sortedL2 = sort(l2);\n  return sortedL1.slice(0, -1).indexOf(sortedL2.slice(0, -1)) >= 0;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let largestPrimeFactor = 2\n  let i = 3\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      if (isPrime(i)) {\n        largestPrimeFactor = i\n      }\n      break\n    }\n    i += 2\n  }\n  return largestPrimeFactor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return (n + 1) * sumToN(n - 1);\n};\n\nconsole.log(sumToN(5));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let lastOpening = brackets[0];\n  for (let i = 1; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      if (brackets[i + 1]!== ')') {\n        return false;\n      }\n      lastOpening = brackets[i + 1];\n    } else if (brackets[i] === ')') {\n      if (brackets[i - 1]!== '(') {\n        return false;\n      }\n      lastOpening = brackets[i - 1];\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  correctBracketing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const length = xs.length\n  const derivative = []\n  for (let i = 0; i < length - 1; i++) {\n    derivative.push(xs[i + 1] - xs[i])\n  }\n  return derivative\n}\n\n/**\n  Given a list of terms and a polynomial, evaluate the polynomial at a given value\n  @param {Array} terms\n  @param {Number} x\n  @returns {Number}\n  */\nconst eval = (terms, x) => {\n  const len = terms.length\n  let sum = 0\n  for (let i = len - 1; i >= 0; i--) {\n    sum = terms[i] + sum * x\n  }\n  return sum\n}\n\n/**\n  Given a polynomial, returns its roots.\n  @param {Array} terms\n  @returns {Array}\n  */\nconst roots = (terms) => {\n  const len = terms.length\n  let x = 0\n  let i = len - 1\n  let j = 0\n  let result = []\n  let sum = 0\n  while (i >= 0) {\n    sum = terms[i] + sum * x\n    if (sum === 0) {\n      result.push(x)\n      i--\n      j++\n    } else if (sum === terms[i]) {\n      i--\n    } else {\n      result.push(x)\n      x = sum / terms[i]\n      i--\n      j++\n    }\n  }\n  return result\n}\n\n/**\n  Given a polynomial, returns the number of terms in the polynomial.\n  @param {Array} terms\n  @returns {Number}\n  */\nconst numTerms = (terms) => {\n  const len = terms.length\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (terms[i]!== 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/**\n  Given a polynomial, returns a list of the terms of the polynomial.\n  @param {Array} terms\n  @returns {Array}\n  */\nconst terms = (terms) => {\n  const len = terms.length\n  let terms = []\n  for (let i = len - 1; i >= 0; i--) {\n    terms.push(terms[i])\n  }\n  return terms\n}\n\nexport {\n  derivative,\n  roots,\n  eval,\n  numTerms,\n  terms\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    const fib = [0, 1, 1]\n    return fib[n]\n}\n\nconsole.log(fibfib(3))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const len = s.length\n  let i = 0\n  let count = 0\n  while (i < len) {\n    const char = s[i]\n    if (vowels.indexOf(char) >= 0) {\n      count++\n    }\n    i++\n  }\n  return count\n}\n\n/**\n  * CountVowels is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word.\n  *\n  * @param {string} s\n  * @return {number}\n  */\nexport function countVowels(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const len = s.length\n  let i = 0\n  let count = 0\n  while (i < len) {\n    const char = s[i]\n    if (vowels.indexOf(char) >= 0) {\n      count++\n    }\n    i++\n  }\n  return count\n}\n\n/**\n * isVowel is a vowel check function that takes a string as input and returns a boolean\n *\n * @param {string} s\n * @return {boolean}\n */\nexport function isVowel(s) {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n  const len = s.length\n  let i = 0\n  while (i < len) {\n    const char = s[i]\n    if (vowels.indexOf(char) >= 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const numberOfDigits = x.length;\n  if (shift > numberOfDigits) {\n    return x.toString().substr(0, numberOfDigits) + x.toString().substr(0, numberOfDigits - shift);\n  } else {\n    return x.toString().substr(0, numberOfDigits - shift) + x.toString().substr(shift, numberOfDigits);\n  }\n}\n\n/*\n  >>> circularShift(12, 2)\n  \"21\"\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 0)\n  \"12\"\n  >>> circularShift(12, 3)\n  \"12\"\n  >>> circularShift(12, 4)\n  \"12\"\n  >>> circularShift(12, 5)\n  \"12\"\n  >>> circularShift(12, 6)\n  \"12\"\n  >>> circularShift(12, 7)\n  \"12\"\n  >>> circularShift(12, 8)\n  \"12\"\n  >>> circularShift(12, 9)\n  \"12\"\n  >>> circularShift(12, 10)\n  \"12\"\n  >>> circularShift(12, 11)\n  \"12\"\n  >>> circularShift(12, 12)\n  \"12\"\n  >>> circularShift(12, 13)\n  \"12\"\n  >>> circularShift(12, 14)\n  \"12\"\n  >>> circularShift(12, 15)\n  \"12\"\n  >>> circularShift(12, 16)\n  \"12\"\n  >>> circularShift(12, 17)\n  \"12\"\n  >>> circularShift(12, 18)\n  \"12\"\n  >>> circularShift(12, 19)\n  \"12\"\n  >>> circularShift(12, 20)\n  \"12\"\n  >>> circularShift(12, 21)\n  \"12\"\n  >>> circularShift(12, 22)\n  \"12\"\n  >>> circularShift(12, 23)\n  \"12\"\n  >>> circularShift(12, 24)\n  \"12\"\n  >>> circularShift(12, 25)\n  \"12\"\n  >>> circularShift(12, 26)\n  \"12\"\n  >>> circularShift(12, 27)\n  \"12\"\n  >>> circularShift(12, 28)\n  \"12\"\n  >>> circularShift(12, 29)\n  \"12\"\n  >>> circularShift(12, 30)\n  \"12\"\n  >>> circularShift(12, 31)\n  \"12\"\n  >>> circularShift(12, 32)\n  \"12\"\n  >>> circularShift(12, 33)\n  \"12\"\n  >>> circularShift(12, 34)\n  \"12\"\n  >>> circularShift(12, 35)\n  \"12\"\n  >>> circularShift(12, 36)\n  \"12\"\n  >>> circularShift(12, 37)\n  \"12\"\n  >>> circularShift(12, 38)\n  \"12\"\n  >>> circularShift(12, 39)\n  \"12\"\n  >>> circularShift(12, 40)\n  \"12\"\n  >>> circularShift(12, 41)\n  \"12\"\n  >>> circularShift(12, 42)\n  \"12\"\n  >>> circularShift(12, 43)\n  \"12\"\n  >>> circularShift(12, 44)\n  \"12\"\n  >>> circularShift(12, 45)\n  \"12\"\n  >>> circularShift(12, 46)\n  \"12\"\n  >>> circularShift(12, 47)\n  \"12\"\n  >>> circularShift(12, 48)\n  \"12\"\n  >>> circularShift(12, 49)\n  \"12\"\n  >>> circularShift(12, 50)\n  \"12\"\n  >>> circularShift(12, 51)\n  \"12\"\n  >>> circularShift(12, 52)\n  \"12\"\n  >>> circularShift(12, 53)\n  \"12\"\n  >>> circularShift(12, 54)\n  \"12\"\n  >>> circularShift(12, 55)\n  \"12\"\n  >>> circularShift(12, 56)\n  \"12\"\n  >>> circularShift(12, 57)\n  \"12\"\n  >>> circularShift(12, 58)\n  \"12\"\n  >>> circularShift(12, 59)\n  \"12\"\n  >>> circularShift(12, 60)\n  \"12\"\n  >>> circularShift(12, 61)\n  \"12\"\n  >>> circularShift(12, 62)\n  \"12\"\n  >>> circularShift(12, 63)\n  \"12\"\n  >>> circularShift(12, 64)\n  \"12\"\n  >>> circularShift(12, 65)\n  \"12\"\n  >>> circularShift(12, 66)\n  \"12\"\n  >>> circularShift(12, 67)\n  \"12\"\n  >>> circularShift(12, 68)\n  \"12\"\n  >>> circularShift(12, 69)\n  \"12\"\n  >>> circularShift(12, 70)\n  \"12\"\n  >>> circularShift(12, 71)\n  \"12\"\n  >>> circularShift(12, 72)\n  \"12\"\n  >>> circularShift(12, 73)\n  \"12\"\n  >>> circularShift(12, 74)\n  \"12\"\n  >>> circularShift(12, 75)\n  \"12\"\n  >>> circularShift(12, 76)\n  \"12\"\n  >>> circularShift(12, 77)\n  \"12\"\n  >>> circularShift(12, 78)\n  \"12\"\n  >>> circularShift(12, 79)\n  \"12\"\n  >>> circularShift(12, 80)\n  \"12\"\n  >>> circularShift(12, 81)\n  \"12\"\n  >>> circularShift(12, 82)\n  \"12\"\n  >>> circularShift(12, 83)\n  \"12\"\n  >>> circularShift(12, 84)\n  \"12\"\n  >>> circularShift(12, 85)\n  \"12\"\n  >>> circularShift(12, 86)\n  \"12\"\n  >>> circularShift(12, 87)\n  \"12\"\n  >>> circularShift(12, 88)\n  \"12\"\n  >>> circularShift(12"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const upper = s.toUpperCase();\n  return upper.reduce((prev, current) => prev + Number(current), 0);\n};\n\n/*Task Writes a function that takes a string as input and returns the first\n  letter of the string.\n  Examples:\n    firstLetter(\"hello\") => \"h\"\n    firstLetter(\"helloWorld\") => \"h\"\n    firstLetter(\"helloworld\") => \"h\"\n    firstLetter(\"\") => \"\"\n*/\nconst firstLetter = (s) => {\n  return s.charAt(0);\n};\n\n/*Task Writes a function that takes a string as input and returns the last\n  letter of the string.\n  Examples:\n    lastLetter(\"hello\") => \"o\"\n    lastLetter(\"helloWorld\") => \"d\"\n    lastLetter(\"helloworld\") => \"o\"\n    lastLetter(\"\") => \"\"\n*/\nconst lastLetter = (s) => {\n  return s.slice(-1);\n};\n\n/*Task Writes a function that takes a string as input and returns the last\n  two letters of the string.\n  Examples:\n    lastTwoLetters(\"hello\") => \"el\"\n    lastTwoLetters(\"helloWorld\") => \"orw\"\n    lastTwoLetters(\"helloworld\") => \"wol\"\n    lastTwoLetters(\"\") => \"\"\n*/\nconst lastTwoLetters = (s) => {\n  return s.slice(-2);\n};\n\n/*Task Writes a function that takes a string as input and returns the number\n  of times the string appears in the input.\n  Examples:\n    frequency(\"hello\") => 1\n    frequency(\"hello\") => 2\n    frequency(\"hello\") => 3\n    frequency(\"h\") => 0\n*/\nconst frequency = (s) => {\n  return s.split('').reduce((prev, current) => prev + 1, 0);\n};\n\n/*Task Writes a function that takes a string as input and returns the sum of\n  all the strings in the input.\n  Examples:\n    sum(\"hello\") => \"hel\"\n    sum(\"hello\") => \"hll\"\n    sum(\"hello\") => \"hell\"\n    sum(\"\") => \"\"\n*/\nconst sum = (s) => {\n  return s.split('').reduce((prev, current) => prev + current, 0);\n};\n\n/*Task Writes a function that takes a string as input and returns the number\n  of words in the string.\n  Examples:\n    words(\"hello world\") => 2\n    words(\"hello world\") => 2\n    words(\"hello world\") => 3\n    words(\"\") => 0\n*/\nconst words = (s) => {\n  return s.split(' ').length;\n};\n\n/*Task Writes a function that takes a string as input and returns the length\n  of the string.\n  Examples:\n    length(\"hello\") => 5\n    length(\"hello\") => 6\n    length(\"hello\") => 7\n    length(\"\") => 0\n*/\nconst length = (s) => {\n  return s.length;\n};\n\n/*Task Writes a function that takes a string as input and returns a\n  string containing the same letters as the string, but the order is\n  reversed.\n  Examples:\n    reverse(\"hello\") => \"olleh\"\n    reverse(\"hello\") => \"ellh\"\n    reverse(\"hello\") => \"oelh\"\n    reverse(\"\") => \"\"\n*/\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the first letter in lower case.\n  Examples:\n    lowerFirst(\"hello\") => \"hello\"\n    lowerFirst(\"hello\") => \"hello\"\n    lowerFirst(\"Hello\") => \"hello\"\n    lowerFirst(\"\") => \"\"\n*/\nconst lowerFirst = (s) => {\n  return s.toLowerCase();\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the first letter in upper case.\n  Examples:\n    upperFirst(\"hello\") => \"Hello\"\n    upperFirst(\"hello\") => \"Hello\"\n    upperFirst(\"Hello\") => \"Hello\"\n    upperFirst(\"\") => \"\"\n*/\nconst upperFirst = (s) => {\n  return s.toUpperCase();\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the first two letters in upper case.\n  Examples:\n    upperTwoFirst(\"hello\") => \"Hello\"\n    upperTwoFirst(\"hello\") => \"Hello\"\n    upperTwoFirst(\"Hello\") => \"Hello\"\n    upperTwoFirst(\"\") => \"\"\n*/\nconst upperTwoFirst = (s) => {\n  return s.slice(0, 2).toUpperCase();\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the last two letters in upper case.\n  Examples:\n    upperTwoLast(\"hello\") => \"Hello\"\n    upperTwoLast(\"hello\") => \"Hello\"\n    upperTwoLast(\"Hello\") => \"Hello\"\n    upperTwoLast(\"\") => \"\"\n*/\nconst upperTwoLast = (s) => {\n  return s.slice(-2).toUpperCase();\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the first letter in lower case and the last two letters\n  in upper case.\n  Examples:\n    lowerTwoLast(\"hello\") => \"Hello\"\n    lowerTwoLast(\"hello\") => \"Hello\"\n    lowerTwoLast(\"Hello\") => \"Hello\"\n    lowerTwoLast(\"\") => \"\"\n*/\nconst lowerTwoLast = (s) => {\n  return s.slice(-2).toUpperCase();\n};\n\n/*Task Writes a function that takes a string as input and returns the\n  string with the last two letters in upper case and the first letter\n  in lower case.\n  Examples:\n    lowerTwoFirst(\"hello\") => \"Hello\"\n    lowerTwoFirst(\"hello\") => \"Hello\"\n    lowerTwoFirst(\"Hello\") => \"Hello\"\n    "}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let count = 0\n  let temp = 0\n  let current = s\n  while (current > 0) {\n    temp = parseInt(current)\n    if (temp > n) {\n      count += temp - n\n    } else {\n      count += temp\n      current = current - temp\n    }\n  }\n  return count\n}\n\nconst fruitDistribution = (s, n) => {\n  let count = 0\n  let temp = 0\n  let current = s\n  while (current > 0) {\n    temp = parseInt(current)\n    if (temp > n) {\n      count += temp - n\n    } else {\n      count += temp\n      current = current - temp\n    }\n  }\n  return count\n}\n\nfruitDistribution(\"5 apples and 6 oranges\", 19)\n\nfruitDistribution(\"0 apples and 1 oranges\",3)\n\nfruitDistribution(\"2 apples and 3 oranges\", 100)\n\nfruitDistribution(\"100 apples and 1 oranges\",120)\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = arr[0];\n  let index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n      index = i;\n    }\n  }\n  return [min, index];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let k in count) {\n    if (count[k] >= k) {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a non-empty list, returns the largest integer number, which is less than or equal to the value of the integer itself. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search_down = (lst) => {\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let k in count) {\n    if (count[k] > k) {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a non-empty list, returns the largest integer number, which is less than or equal to the value of the integer itself. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search_up = (lst) => {\n  const count = {};\n  for (let i = lst.length - 1; i >= 0; i--) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let k in count) {\n    if (count[k] > k) {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a non-empty list, returns the largest integer number, which is less than or equal to the value of the integer itself. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search_by_length = (lst) => {\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let k in count) {\n    if (count[k] > k) {\n      return k;\n    }\n  }\n  return -1;\n};\n\n/*\n  Given a non-empty list, returns the largest integer number, which is less than or equal to the value of the integer itself. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == 4\n  */\nconst search_by_frequency = (lst) => {\n  const count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]] || 0) + 1;\n  }\n  for (let k in count) {\n    if (count[k] > k) {\n      return k;\n    }\n  }\n  return -1;\n};\n\nexport {\n  search,\n  search_down,\n  search_up,\n  search_by_length,\n  search_by_frequency\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = [...lst];\n  const min = sorted.reduce((a, b) => Math.min(a, b), 0);\n  const max = sorted.reduce((a, b) => Math.max(a, b), 0);\n  const min_index = sorted.indexOf(min);\n  const max_index = sorted.indexOf(max);\n  const left = sorted.slice(0, min_index);\n  const right = sorted.slice(max_index + 1);\n  const sorted_left = [...left,...right];\n  return sorted_left.sort((a, b) => a - b);\n};\n\n//console.log(strangeSortList([5, 5, 5, 5]));<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c) / 2\n}\n\n/*\n  Given the length of the two sides of a rectangle, return the area of the rectangle rounded to 2 decimal points if the two sides form a valid rectangle. Otherwise, return -1 Two sides a valid rectangle if the sum of two sides is greater than the third side.\n  Example:\n  rectangleArea(3, 4, 5) == 6.00\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleArea = (width, height, length) => {\n  if (width === 0 || height === 0 || length === 0) {\n    return -1\n  }\n  return (width * height) / 2 * length\n}\n\n/*\n  Given the area of a triangle, return the smallest valid triangle that can be created from the given triangle.\n  Example:\n  triangleArea(6) == 6\n  triangleArea(2) == 3\n  triangleArea(3) == 3\n  triangleArea(1) == -1\n  */\nconst triangleAreaSmaller = (area) => {\n  if (area === 0 || area === -1) {\n    return -1\n  }\n  return Math.sqrt(area)\n}\n\n/*\n  Given the length of the three sides of a triangle, return the largest valid triangle that can be created from the given triangle.\n  Example:\n  triangleArea(3, 4, 5) == 6\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleAreaLarger = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c)\n}\n\n/*\n  Given the area of a rectangle, return the smallest valid rectangle that can be created from the given rectangle.\n  Example:\n  rectangleArea(3, 4, 5) == 6\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleAreaSmaller = (width, height, length) => {\n  if (width === 0 || height === 0 || length === 0) {\n    return -1\n  }\n  return (width * height) / 2 * length\n}\n\n/*\n  Given the area of a rectangle, return the largest valid rectangle that can be created from the given rectangle.\n  Example:\n  rectangleArea(3, 4, 5) == 6\n  rectangleArea(1, 2, 10) == -1\n  */\nconst rectangleAreaLarger = (width, height, length) => {\n  if (width === 0 || height === 0 || length === 0) {\n    return -1\n  }\n  return (width * height) / 2 * length\n}\n\n/*\n  Given the perimeter of a triangle, return the largest valid triangle that can be created from the given triangle.\n  Example:\n  perimeter(3, 4, 5) == 9\n  perimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeterLarger = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c)\n}\n\n/*\n  Given the perimeter of a rectangle, return the largest valid rectangle that can be created from the given rectangle.\n  Example:\n  perimeter(3, 4, 5) == 9\n  perimeter(1, 2, 10) == -1\n  */\nconst rectanglePerimeterLarger = (width, height, length) => {\n  if (width === 0 || height === 0 || length === 0) {\n    return -1\n  }\n  return (width * height) / 2 * length\n}\n\n/*\n  Given the perimeter of a triangle, return the smallest valid triangle that can be created from the given triangle.\n  Example:\n  perimeter(3, 4, 5) == 9\n  perimeter(1, 2, 10) == -1\n  */\nconst trianglePerimeterSmaller = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return -1\n  }\n  return Math.sqrt(a * a + b * b - 2 * a * b * c)\n}\n\n/*\n  Given the perimeter of a rectangle, return the smallest valid rectangle that can be created from the given rectangle.\n  Example:\n  perimeter(3, 4, 5) == 9\n  perimeter(1, 2, 10) == -1\n  */\nconst rectanglePerimeterSmaller = (width, height, length) => {\n  if (width === 0 || height === 0 || length === 0) {\n    return -1\n  }\n  return (width * height) / 2 * length\n}\n\nmodule.exports = {\n  triangleArea,\n  triangleAreaLarger,\n  triangleAreaSmaller,\n  rectangleArea,\n  rectangleAreaSmaller,\n  rectangleAreaLarger,\n  trianglePerimeterLarger,\n  trianglePerimeterSmaller,\n  rectanglePerimeterLarger,\n  rectanglePerimeterSmaller,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((a, b) => a + b, 0);\n  const maxSum = w + sum;\n  return q.length === 1 && sum <= maxSum;\n};\n\nconsole.log(willItFly([1, 2, 3, 2, 3], 9));\nconsole.log(willItFly([1, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    const arrLen = arr.length;\n\n    if (arrLen === 0) {\n        return 0;\n    }\n\n    let smallest = arr[0];\n    let smallestVal = arr[0];\n    let smallestIndex = 0;\n\n    for (let i = 1; i < arrLen; i++) {\n        const current = arr[i];\n        const currentVal = current;\n        const currentIndex = i;\n\n        if (currentVal < smallestVal) {\n            smallest = current;\n            smallestVal = currentVal;\n            smallestIndex = currentIndex;\n        }\n    }\n\n    let index = 0;\n    let change = smallestVal;\n\n    while (index < arrLen) {\n        const current = arr[index];\n        const currentVal = current;\n        const currentIndex = index;\n\n        if (currentVal === smallestVal) {\n            arr[currentIndex] = smallest;\n            index++;\n            smallest = smallestVal;\n            smallestVal = currentVal;\n            smallestIndex = currentIndex;\n        } else {\n            arr[currentIndex] = change;\n            change = smallestVal;\n            smallestVal = currentVal;\n            smallestIndex = currentIndex;\n        }\n    }\n\n    return smallestIndex;\n};\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let counter = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i])!== -1) {\n      counter++\n    }\n  }\n  return counter === lst1.length? lst1 : lst2\n}\n\n/*\n  Write a function that takes two lists of strings and returns the list that contains the most elements in the first list, and the second list that has the least number of elements. If the lists contain the same number of elements, return the first list.\n\n  Examples\n  leastCommon([], []) ➞ []\n  leastCommon([['hi', 'hi', 'admin'], ['hi', 'admin']], [['hi', 'hi', 'admin'], ['admin']]) ➞ [['hi', 'hi', 'admin']]\n  leastCommon([['hi', 'hi', 'admin'], ['hi', 'admin']], [['hi', 'admin'], ['hi', 'hi', 'admin']]) ➞ [['hi', 'hi', 'admin']]\n  leastCommon([['hi', 'hi', 'admin'], ['hi', 'hi', 'admin']], [['hi', 'hi', 'admin', 'project'], ['hi', 'hi', 'admin']]) ➞ [['hi', 'hi', 'admin']]\n  leastCommon([['hi', 'hi', 'admin'], ['hi', 'hi', 'admin']], [['hi', 'hi', 'admin', 'project'], ['hi', 'hi', 'admin', 'project', 'admin']]) ➞ [['hi', 'hi', 'admin', 'project']]\n  leastCommon([['hi', 'hi', 'admin'], ['hi', 'hi', 'admin']], [['hi', 'hi', 'admin', 'project'], ['hi', 'hi', 'admin', 'project', 'admin']]) ➞ [['hi', 'hi', 'admin', 'project']]\n  leastCommon([['4'], ['1', '2', '3', '4', '5']], [['1', '2', '3', '4', '5'], ['4']]) ➞ [['1', '2', '3', '4', '5']]\n  */\nconst leastCommon = (lst1, lst2) => {\n  let counter = 0\n  let smallest = lst1\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst1.indexOf(lst2[i])!== -1) {\n      counter++\n    }\n    if (counter > counter) {\n      smallest = lst2\n    }\n  }\n  return counter === lst1.length? lst1 : smallest\n}\n\nmodule.exports = {\n  totalMatch,\n  leastCommon\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let count = 0;\n  let i = 1;\n  while (i < a) {\n    let num = a;\n    while (num % i === 0) {\n      num /= i;\n    }\n    if (num === 1) {\n      return true;\n    }\n    i += 1;\n  }\n  return false;\n};\n\nconst isPrime = (n) => {\n  if (n === 2) return true;\n  if (n === 1 || n === 3) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i += 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (x) => x === parseInt(x);\n\nconst isDivisibleByThree = (x) => x === parseInt(x) && x % 3 === 0;\n\nconst isDivisibleByFive = (x) => x === parseInt(x) && x % 5 === 0;\n\nconst isDivisibleBy7 = (x) => x === parseInt(x) && x % 7 === 0;\n\nconst isDivisibleBy15 = (x) => x === parseInt(x) && x % 15 === 0;\n\nconst isDivisibleBy19 = (x) => x === parseInt(x) && x % 19 === 0;\n\nconst isDivisibleBy31 = (x) => x === parseInt(x) && x % 31 === 0;\n\nconst isDivisibleBy61 = (x) => x === parseInt(x) && x % 61 === 0;\n\nconst isDivisibleBy87 = (x) => x === parseInt(x) && x % 87 === 0;\n\nconst isDivisibleBy1011 = (x) => x === parseInt(x) && x % 1011 === 0;\n\nconst isDivisibleBy1937 = (x) => x === parseInt(x) && x % 1937 === 0;\n\nconst isDivisibleBy3761 = (x) => x === parseInt(x) && x % 37601 === 0;\n\nconst isDivisibleBy47123 = (x) => x === parseInt(x) && x % 47123 === 0;\n\nconst isDivisibleBy71789 = (x) => x === parseInt(x) && x % 71789 === 0;\n\nconst isDivisibleBy131737 = (x) => x === parseInt(x) && x % 131737 === 0;\n\nconst isDivisibleBy152537 = (x) => x === parseInt(x) && x % 152537 === 0;\n\nconst isDivisibleBy156719 = (x) => x === parseInt(x) && x % 156719 === 0;\n\nconst isDivisibleBy171701 = (x) => x === parseInt(x) && x % 171701 === 0;\n\nconst isDivisibleBy18 = (x) => x === parseInt(x) && x % 18 === 0;\n\nconst isDivisibleBy30 = (x) => x === parseInt(x) && x % 30 === 0;\n\nconst isDivisibleBy60 = (x) => x === parseInt(x) && x % 60 === 0;\n\nconst isDivisibleBy300 = (x) => x === parseInt(x) && x % 300 === 0;\n\nconst isDivisibleBy360 = (x) => x === parseInt(x) && x % 360 === 0;\n\nconst isDivisibleBy900 = (x) => x === parseInt(x) && x % 900 === 0;\n\nconst isDivisibleBy142857 = (x) => x === parseInt(x) && x % 142857 === 0;\n\nconst isDivisibleBy28125 = (x) => x === parseInt(x) && x % 28125 === 0;\n\nconst isDivisibleBy640 = (x) => x === parseInt(x) && x % 640 === 0;\n\nconst isDivisibleBy8192 = (x) => x === parseInt(x) && x % 8192 === 0;\n\nconst isDivisibleBy16384 = (x) => x === parseInt(x) && x % 16384 === 0;\n\nconst isDivisibleBy32768 = (x) => x === parseInt(x) && x % 32768 === 0;\n\nconst isDivisibleBy64 = (x) => x === parseInt(x) && x % 64 === 0;\n\nconst isDivisibleBy1024 = (x) => x === parseInt(x) && x % 1024 === 0;\n\nconst isDivisibleBy2048 = (x) => x === parseInt(x) && x % 2048 === 0;\n\nconst isDivisibleBy4096 = (x) => x === parseInt(x) && x % 4096 === 0;\n\nconst isDivisibleBy8192 = (x) => x === parseInt(x) && x % 8192 === 0;\n\nconst isDivisibleBy16384 = (x) => x === parseInt(x) && x % 16384 === 0;\n\nconst isDivisibleBy32768 = (x) => x === parseInt(x) && x % 32768 === 0;\n\nconst isDivisibleBy64 = (x) => x === parseInt(x) && x % 64 === 0;\n\nconst isDivisibleBy1024 = (x) => x === parseInt(x) && x % 1024 === 0;\n\nconst isDivisibleBy2048 = (x) => x === parseInt(x) && x % 2048 === 0;\n\nconst isDivisibleBy4096 = (x) => x === parseInt(x) && x % 4096 === 0;\n\nconst isDivisibleBy8192 = (x) => x === parseInt(x) && x % 8192 === 0;\n\nconst isDivisibleBy16384 = (x) => x === parseInt(x) && x % 16384 === 0;\n\nconst isDivisibleBy32768 = (x) => x === parseInt(x) && x % 32768 === 0;\n\nconst isDivisibleBy64 = (x) => x === parseInt(x) && x % 64 === 0;\n\nconst isDivisibleBy1024 = (x) => x === parseInt(x) && x % 1024 === 0;\n\nconst isDiv"}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x % n === 0 && (x / n) === Math.floor((x / n));\n}\n\n/*\n * Your task is to write a function that returns true if a number x is a prime number and in other cases a false one. x is a prime number if there exists no positive integer number n for which x * n is a prime number.\n * For example:\n * isPrime(3) => true\n * isPrime(1) => false\n * isPrime(2) => true\n * isPrime(5) => true\n */\nconst isPrime = (x) => {\n  let i = 1;\n  while (i < x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime = (x) => {\n  let i = 1;\n  while (i < x) {\n    if (x % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/*\n * Your task is to write a function that returns true if a number x is a perfect power of n and in other cases a false one. x is a perfect power of n if n * n * int = x.\n * For example:\n * isPerfectPower(3, 2) => true\n * isPerfectPower(1, 4) => true\n * isPerfectPower(2, 4) => false\n */\nconst isPerfectPower = (x, n) => {\n  return x === Math.pow(n, 2);\n}\n\nconst isPerfectPower = (x, n) => {\n  return x === Math.pow(n, 2);\n}\n\n/*\n * Your task is to write a function that returns true if a number x is an abundant number and in other cases a false one. x is an abundant number if the sum of its positive divisors is greater than the number itself.\n * For example:\n * isAbundant(3) => true\n * isAbundant(2) => true\n * isAbundant(1) => false\n */\nconst isAbundant = (x) => {\n  let sum = 1;\n  for (let i = 1; i < x; i++) {\n    sum += x % i;\n  }\n  return sum > x;\n}\n\nconst isAbundant = (x) => {\n  let sum = 1;\n  for (let i = 1; i < x; i++) {\n    sum += x % i;\n  }\n  return sum > x;\n}\n\nconst isAbundant = (x) => {\n  let sum = 1;\n  for (let i = 1; i < x; i++) {\n    sum += x % i;\n  }\n  return sum > x;\n}\n\n/*\n * Your task is to write a function that returns true if a number x is a Carmichael number and in other cases a false one. x is a Carmichael number if it is a square number that is also an abundant number.\n * For example:\n * isCarmichael(8) => true\n * isCarmichael(13) => true\n * isCarmichael(19) => true\n * isCarmichael(1) => false\n */\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael = (x) => {\n  return isAbundant(Math.pow(x, 2));\n}\n\nconst isCarmichael"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a % 3 === 0 && a % 5 === 0) return true;\n  if (a % 3 === 0) {\n    if (a % 5 === 0) {\n      if (a % 7 === 0) return true;\n    }\n  }\n  return false;\n};\n\nexport { iscube };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === '0' || num[i] === '1' || num[i] === '2' || num[i] === '3' || num[i] === '4' || num[i] === '5' || num[i] === '6' || num[i] === '7' || num[i] === '8' || num[i] === '9' || num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nexport default hexKey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    // Base-10 to base-2\n    let binary = decimal.toString(2);\n\n    // Add '1' in front of each digit\n    binary = binary.split('0').join('1');\n\n    // Add 'db' to the front\n    binary = 'db' + binary;\n\n    // Add '1' to the end\n    binary = binary + '1';\n\n    // Remove 'db' from the end\n    binary = binary.slice(0, -2);\n\n    return binary;\n};\n\n// Test Code\n// console.log(decimalToBinary(32));\n// console.log(decimalToBinary(15));\n\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\n\nThe most difficult part of this challenge was figuring out how to convert a decimal number to\nbinary. The only challenge I found was the math. I thought about it a bit and I thought about the\nformatting of the binary number. I went through the process and I figured out the correct way to\nformat the binary number.\n\nWhat did you learn about creating objects and functions?\n\nI learned how to create objects and functions using the 'new' keyword. I also learned how to use\n'this' keyword to refer to the object in a function.\n\nDid you learn about any new built-in methods you could use? If so, which ones?\n\nI learned how to convert a decimal number to binary.\n\nHow can you access and manipulate properties of objects?\n\nI learned how to access and manipulate properties of objects.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let n = s.length\n  let arr = []\n  let sum = 0\n\n  while (n) {\n    let x = s[n - 1]\n    if (n >= 2) {\n      let y = s[n - 2]\n      if (x === y) {\n        return false\n      }\n      sum += x * x\n    }\n    n -= 1\n  }\n\n  return sum === 1\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  // Your code here\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true\n  let num = parseInt(string)\n  if (num === 0 || num === 1) return false\n\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*\n  IsPrime is a function that takes an integer and returns true if it is a prime\n  or otherwise wrong\n  Examples\n  isPrime(1) == true\n  isPrime(2) == true\n  isPrime(3) == false\n  isPrime(7) == true\n  isPrime(12) == true\n  isPrime(9) == false\n  isPrime(0) == false\n  isPrime(100) == false\n  isPrime(123) == false\n  isPrime(4) == true\n  isPrime(11) == true\n  isPrime(17) == true\n  isPrime(26) == true\n  isPrime(30) == true\n  isPrime(43) == true\n  isPrime(98) == true\n  isPrime(99) == false\n  */\nconst isPrime = (num) => {\n  let isPrime = true\n  if (num === 0 || num === 1) return false\n\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*\n  CountPrimes is a function that takes a number and returns the number of primes it has\n  Examples\n  countPrimes(1) == 0\n  countPrimes(2) == 1\n  countPrimes(3) == 2\n  countPrimes(7) == 3\n  countPrimes(12) == 4\n  countPrimes(4) == 1\n  countPrimes(11) == 2\n  countPrimes(17) == 3\n  countPrimes(26) == 4\n  countPrimes(30) == 5\n  countPrimes(43) == 6\n  countPrimes(98) == 7\n  countPrimes(99) == 1\n  */\nconst countPrimes = (num) => {\n  let count = 0\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  IsPrime is a function that takes an integer and returns true if it is a prime\n  or otherwise wrong\n  Examples\n  isPrime(1) == true\n  isPrime(2) == true\n  isPrime(3) == false\n  isPrime(7) == true\n  isPrime(12) == true\n  isPrime(9) == false\n  isPrime(0) == false\n  isPrime(100) == false\n  isPrime(123) == false\n  isPrime(4) == true\n  isPrime(11) == true\n  isPrime(17) == true\n  isPrime(26) == true\n  isPrime(30) == true\n  isPrime(43) == true\n  isPrime(98) == true\n  isPrime(99) == false\n  */\nconst isPrime = (num) => {\n  let isPrime = true\n  if (num === 0 || num === 1) return false\n\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*\n  CountPrimes is a function that takes a number and returns the number of primes it has\n  Examples\n  countPrimes(1) == 0\n  countPrimes(2) == 1\n  countPrimes(3) == 2\n  countPrimes(7) == 3\n  countPrimes(12) == 4\n  countPrimes(4) == 1\n  countPrimes(11) == 2\n  countPrimes(17) == 3\n  countPrimes(26) == 4\n  countPrimes(30) == 5\n  countPrimes(43) == 6\n  countPrimes(98) == 7\n  countPrimes(99) == 1\n  */\nconst countPrimes = (num) => {\n  let count = 0\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  IsPrime is a function that takes an integer and returns true if it is a prime\n  or otherwise wrong\n  Examples\n  isPrime(1) == true\n  isPrime(2) == true\n  isPrime(3) == false\n  isPrime(7) == true\n  isPrime(12) == true\n  isPrime(9) == false\n  isPrime(0) == false\n  isPrime(100) == false\n  isPrime(123) == false\n  isPrime(4) == true\n  isPrime(11) == true\n  isPrime(17) == true\n  isPrime(26) == true\n  isPrime(30) == true\n  isPrime(43) == true\n  isPrime(98) == true\n  isPrime(99) == false\n  */\nconst isPrime = (num) => {\n  let isPrime = true\n  if (num === 0 || num === 1) return false\n\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      isPrime = false\n      break\n    }\n  }\n  return isPrime\n}\n\n/*\n  CountPrimes is a function that takes a number and returns the number of primes it has\n  Examples\n  countPrimes(1) == 0\n  countPrimes(2) == 1\n  countPrimes(3) == 2\n  countPrimes(7) == 3\n  countPrimes(12) == 4\n  countPrimes(4) == 1\n  countPrimes(11) == 2\n  countPrimes(17) == 3\n  count"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      }\n    }\n    return count\n  }\n  * / const endsOneStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count++\n        if (i % 10 === 1) {\n          count--\n        }\n      }\n    }\n    return count\n  }\n  * / const startsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const startsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const startsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const endsEnds = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const endsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const startsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count++\n      } else {\n        count--\n      }\n    }\n    return count\n  }\n  * / const endsStarts = (n) = > {\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n      if (i % 10 === 1) {\n        count--\n      } else {\n        count++\n      }\n    }\n    return count\n  }\n  * / const endsEnds = (n) = > {\n    let count = 0\n"}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const total = Math.pow(2, N) - 1\n    const totalLength = Math.log10(total) + 1\n    const result = [0]\n    let current = 0\n    while (current <= total) {\n        result.unshift(Math.floor(current / 2))\n        current = Math.floor(current / 2)\n    }\n    return result.reverse().join('').slice(0, totalLength)\n}\n\nconsole.log(solve(147))<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    var sum = 0,\n        i = 0,\n        j = 0;\n    for (i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const words = s.split(' ')\n  const newWords = []\n\n  words.forEach((w) => {\n    const sorted = w.split('').sort((a, b) => {\n      return a - b\n    })\n\n    newWords.push(sorted.join(''))\n  })\n\n  return newWords.join(' ')\n}\n\nconst test = (s) => {\n  const expected = antiShuffle(s)\n  const actual = antiShuffle(s)\n\n  console.log(`Input: ${s}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual:   ${actual}`)\n\n  console.log(`---`)\n}\n\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi')\ntest('Hello World!!!')\ntest('hi"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = [];\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        ret.push([i, j]);\n      }\n    }\n  }\n  return ret.sort((a, b) => {\n    if (a[0] > b[0]) {\n      return 1;\n    } else if (a[0] < b[0]) {\n      return -1;\n    } else {\n      return a[1] - b[1];\n    }\n  });\n};\n\nconsole.log(getRow([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  return array.sort((a, b) => {\n    const [a_sum, b_sum] = [a, b].map(value => value * value);\n    if (a_sum % 2 === 0) {\n      return b_sum - a_sum;\n    } else {\n      return a_sum - b_sum;\n    }\n  });\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newArray = []\n  for(let i=0; i<s.length; i++) {\n    newArray.push(rotate(s[i]))\n  }\n  return newArray.join('')\n}\n\nconst rotate = (c) => {\n  let c = c.toUpperCase()\n  switch(c) {\n    case 'A': return 'B'\n    case 'B': return 'C'\n    case 'C': return 'D'\n    case 'D': return 'E'\n    case 'E': return 'F'\n    case 'F': return 'G'\n    case 'G': return 'H'\n    case 'H': return 'I'\n    case 'I': return 'J'\n    case 'J': return 'K'\n    case 'K': return 'L'\n    case 'L': return 'M'\n    case 'M': return 'N'\n    case 'N': return 'O'\n    case 'O': return 'P'\n    case 'P': return 'Q'\n    case 'Q': return 'R'\n    case 'R': return 'S'\n    case 'S': return 'T'\n    case 'T': return 'U'\n    case 'U': return 'V'\n    case 'V': return 'W'\n    case 'W': return 'X'\n    case 'X': return 'Y'\n    case 'Y': return 'Z'\n    case 'Z': return 'A'\n    default: return c\n  }\n}\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let newArray = []\n  for(let i=0; i<s.length; i++) {\n    newArray.push(rotate(s[i]))\n  }\n  return newArray.join('')\n}\n\nconst encryptArray = (string) => {\n  let newArray = []\n  for(let i=0; i<string.length; i++) {\n    newArray.push(rotate(string[i]))\n  }\n  return newArray.join('')\n}\n\nmodule.exports = {\n  encrypt,\n  decrypt,\n  rotate,\n  encryptArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  const min = Math.min(...lst)\n  if (!lst.length) return null\n  return lst[lst.indexOf(min) + 1]\n}\n\nnextSmallest([1, 2, 3, 4, 5])\n//=> 2\nnextSmallest([5, 1, 4, 3, 2])\n//=> 2\nnextSmallest([])\n//=> null\nnextSmallest([1, 1])\n//=> null\n */\n\n/*\n  Write a function nextLargest() that returns the largest element in the list. Returns zero if there is no such element. nextLargest([1, 2, 3, 4, 5]) = = 4 nextLargest([5, 1, 4, 3, 2]) = = 4 nextLargest([]) = = null nextLargest([1, 1]) = = null * / const nextLargest = (lst) = > {\n  const max = Math.max(...lst)\n  if (!lst.length) return null\n  return lst[lst.indexOf(max) - 1]\n}\n\nnextLargest([1, 2, 3, 4, 5])\n//=> 4\nnextLargest([5, 1, 4, 3, 2])\n//=> 4\nnextLargest([])\n//=> null\nnextLargest([1, 1])\n//=> null\n */\n\n/*\n  Write a function lastElement() that returns the last element in the list. Returns zero if there is no such element. lastElement([1, 2, 3, 4, 5]) = = 5 lastElement([5, 1, 4, 3, 2]) = = 5 lastElement([]) = = null lastElement([1, 1]) = = null * / const lastElement = (lst) = > {\n  return lst[lst.length - 1]\n}\n\nlastElement([1, 2, 3, 4, 5])\n//=> 5\nlastElement([5, 1, 4, 3, 2])\n//=> 5\nlastElement([])\n//=> null\nlastElement([1, 1])\n//=> null\n */\n\n/*\n  Write a function largest() that returns the largest element in the list. Returns zero if there is no such element. largest([1, 2, 3, 4, 5]) = = 5 largest([5, 1, 4, 3, 2]) = = 5 largest([]) = = null largest([1, 1]) = = null * / const largest = (lst) = > {\n  return Math.max(...lst)\n}\n\nlargest([1, 2, 3, 4, 5])\n//=> 5\nlargest([5, 1, 4, 3, 2])\n//=> 5\nlargest([])\n//=> null\nlargest([1, 1])\n//=> null\n */\n\n/*\n  Write a function largest() that returns the largest element in the list. Returns zero if there is no such element. largest([1, 2, 3, 4, 5]) = = 5 largest([5, 1, 4, 3, 2]) = = 5 largest([]) = = null largest([1, 1]) = = null * / const largest = (lst) = > {\n  return Math.max(...lst)\n}\n\nlargest([1, 2, 3, 4, 5])\n//=> 5\nlargest([5, 1, 4, 3, 2])\n//=> 5\nlargest([])\n//=> null\nlargest([1, 1])\n//=> null\n */\n\n/*\n  Write a function median() that returns the median of the list. Returns zero if there is no such element. median([1, 2, 3, 4, 5]) = = 3.5 median([5, 1, 4, 3, 2]) = = 3.5 median([]) = = null median([1, 1]) = = null * / const median = (lst) = > {\n  const half = lst.length / 2\n  const sorted = lst.sort((a, b) => a - b)\n  if (!half) return sorted[0]\n  return (sorted[half - 1] + sorted[half]) / 2\n}\n\nmedian([1, 2, 3, 4, 5])\n//=> 3.5\nmedian([5, 1, 4, 3, 2])\n//=> 3.5\nmedian([])\n//=> null\nmedian([1, 1])\n//=> null\n */\n\n/*\n  Write a function smallest() that returns the smallest element in the list. Returns zero if there is no such element. smallest([1, 2, 3, 4, 5]) = = 1 smallest([5, 1, 4, 3, 2]) = = 1 smallest([]) = = null smallest([1, 1]) = = null * / const smallest = (lst) = > {\n  return Math.min(...lst)\n}\n\nsmallest([1, 2, 3, 4, 5])\n//=> 1\nsmallest([5, 1, 4, 3, 2])\n//=> 1\nsmallest([])\n//=> null\nsmallest([1, 1])\n//=> null\n */\n\n/*\n  Write a function smallest() that returns the smallest element in the list. Returns zero if there is no such element. smallest([1, 2, 3, 4, 5]) = = 1 smallest([5, 1, 4, 3, 2]) = = 1 smallest([]) = = null smallest([1, 1]) = = null * / const smallest = (lst) = > {\n  return Math.min(...lst)\n}\n\nsmallest([1, 2, 3, 4, 5])\n//=> 1\nsmallest([5, 1, 4, 3, 2])\n//=> 1\nsmallest([])\n//=> null\nsmallest([1, 1])\n//=> null\n */\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const regex = /^I?(?: )?(?:[.,!?]|:|\\?|\\*|\\d+|\\$|\\^|[\\s\\S]*)/\n  const regex2 = /^I?(?: )?(?:[.,!?]|:|\\?|\\*|\\d+|\\$|\\^|[\\s\\S]*)/\n  const regex3 = /^I?(?: )?(?:[.,!?]|:|\\?|\\*|\\d+|\\$|\\^|[\\s\\S]*)/\n  return regex.test(S) || regex2.test(S) || regex3.test(S)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x == +y + z && x >= 0 && x <= 9999 && y >= 0 && y <= 9999 && z >= 0 && z <= 9999)\n}\n\n/*\n  Given a positive number N, print all the numbers in the range 0 to N that are a sum of two distinct prime numbers.\n  Example\n  primes(10) ➞ [0, 2, 3, 5, 7, 9, 10]\n  primes(15) ➞ [0, 2, 5, 7, 9, 11, 13, 15, 17, 19]\n  primes(15) ➞ [0, 2, 5, 7, 9, 11, 13, 15, 17, 19]\n  */\nconst primes = N => {\n  const primeNumbers = []\n  const numbers = [0, 1]\n\n  while(numbers.length < N) {\n    const number = +(numbers.pop() + numbers.pop() + 1)\n    const isPrime = isPrime(number)\n\n    if(isPrime) {\n      primeNumbers.push(number)\n    }\n\n    if(isPrime) {\n      numbers.push(number)\n    }\n  }\n\n  return primeNumbers\n}\n\n/*\n  Given an array of positive numbers, return the number of the smallest number in the array that is not a prime.\n  Example\n  primes([0, 2, 3, 5, 7, 9, 10]) ➞ 7\n  primes([0, 2, 5, 7, 9, 11, 13, 15, 17, 19]) ➞ 15\n  */\nconst smallestPrime = array => {\n  return array.find(n =>!isPrime(n))\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of two distinct prime numbers.\n  Example\n  sumOfPrimes(15) ➞ 30\n  sumOfPrimes(10) ➞ 6\n  sumOfPrimes(5) ➞ 4\n  */\nconst sumOfPrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and two distinct prime numbers.\n  Example\n  sumOfTwoPrimes(15) ➞ 22\n  sumOfTwoPrimes(10) ➞ 8\n  sumOfTwoPrimes(5) ➞ 5\n  */\nconst sumOfTwoPrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and three distinct prime numbers.\n  Example\n  sumOfThreePrimes(15) ➞ 33\n  sumOfThreePrimes(10) ➞ 17\n  sumOfThreePrimes(5) ➞ 5\n  */\nconst sumOfThreePrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and four distinct prime numbers.\n  Example\n  sumOfFourPrimes(15) ➞ 39\n  sumOfFourPrimes(10) ➞ 21\n  sumOfFourPrimes(5) ➞ 5\n  */\nconst sumOfFourPrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and five distinct prime numbers.\n  Example\n  sumOfFivePrimes(15) ➞ 50\n  sumOfFivePrimes(10) ➞ 30\n  sumOfFivePrimes(5) ➞ 5\n  */\nconst sumOfFivePrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and six distinct prime numbers.\n  Example\n  sumOfSixPrimes(15) ➞ 61\n  sumOfSixPrimes(10) ➞ 42\n  sumOfSixPrimes(5) ➞ 5\n  */\nconst sumOfSixPrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and seven distinct prime numbers.\n  Example\n  sumOfSevenPrimes(15) ➞ 69\n  sumOfSevenPrimes(10) ➞ 45\n  sumOfSevenPrimes(5) ➞ 5\n  */\nconst sumOfSevenPrimes = N => {\n  const primeNumbers = primes(N)\n  const sum = primeNumbers.reduce((sum, number) => sum + number)\n\n  return sum\n}\n\n/*\n  Given a number N, return the sum of all numbers in the range 0 to N that are a sum of a prime number and eight distinct prime numbers.\n  Example\n  sumOfEightPrimes(15) ➞ 78\n  sumOfEightPrimes(10) ➞ 54\n  sumOfEightPrimes(5) ➞ 5\n  */\nconst sumOfEightPrimes = N => {\n  const primeNumbers = primes"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z']\n  const alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n  let out = ''\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i]\n    if (vowels.includes(char.toUpperCase())) {\n      out += alphabet[(alphabet.indexOf(char.toUpperCase()) + 1) % 26]\n    } else {\n      out += char.toUpperCase()\n    }\n  }\n  return out\n}\n\n// encode('This is a message')\n// 'TGST'\n// encode('This is a message')\n// 'HKS KS C MGSSCGG'\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    if(lst.length === 0) {\n        return 0;\n    }\n    if(lst.length === 1) {\n        return lst[0];\n    }\n    const max = Math.max(...lst);\n    let sum = 0;\n    for(let i = 1; i < max + 1; i++) {\n        if(lst.indexOf(i) > -1) {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\nconst main = () => {\n    let lst = [\n        0,\n        3,\n        2,\n        1,\n        3,\n        5,\n        7,\n        4,\n        5,\n        5,\n        5,\n        2,\n        181,\n        32,\n        4,\n        32,\n        3,\n        2,\n        32,\n        324,\n        4,\n        3\n    ];\n    console.log(skjkasdkd(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    const result = Object.keys(dict).every((key) => key.toLowerCase() === key.toUpperCase());\n    return result;\n}\n\n// const dict = {'a':'apple', 'b':'banana', 'c':'orange', 'd':'apple'}\n// const checkDictCase = dict => {\n//     let result = Object.keys(dict).every((key) => key.toLowerCase() === key.toUpperCase());\n//     return result;\n// }\n\n/*\n  Given an array of ints, return the array of ints in the same order with all adjacent ints combined. For example, [1,2,3] -> [1,3,2,3].\n  Examples:\n  combine([1,2,3]) -> [1,2,3]\n  combine([1,2,4]) -> [1,2,4,1,2,4]\n  combine([4,1,2,3]) -> [1,2,3,4,1,2,3,4,1,2,3,4]\n  combine([1,2,3,4,5,6,7,8,9,10]) -> [1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10,1,2,3,4,5,6,7,8,9,10]\n  */\nconst combine = (array) => {\n    const result = [];\n    let index = 0;\n    let previous = 0;\n    while (index < array.length) {\n        let value = array[index];\n        result.push(value);\n        if (index < array.length - 1) {\n            let next = array[index + 1];\n            result.push(next);\n            index++;\n        }\n    }\n    return result;\n}\n\nconst findMax = (array) => {\n    const max = array[0];\n    for (let index in array) {\n        if (array[index] > max) {\n            max = array[index];\n        }\n    }\n    return max;\n}\n\nconst findMin = (array) => {\n    const min = array[0];\n    for (let index in array) {\n        if (array[index] < min) {\n            min = array[index];\n        }\n    }\n    return min;\n}\n\nconst findMaxMin = (array) => {\n    const max = array[0];\n    const min = array[0];\n    for (let index in array) {\n        if (array[index] > max) {\n            max = array[index];\n        }\n        if (array[index] < min) {\n            min = array[index];\n        }\n    }\n    return [max, min];\n}\n\nconst isPalindrome = (num) => {\n    return num.toString() === num.toString().split('').reverse().join('');\n}\n\nconst findMedian = (array) => {\n    const result = [];\n    let middle;\n    let left = 0;\n    let right = array.length - 1;\n    while (left <= right) {\n        middle = (left + right) / 2;\n        if (array[middle] >= array[middle + 1]) {\n            left = middle + 1;\n        } else {\n            right = middle - 1;\n        }\n    }\n    result.push(array[left]);\n    result.push(array[right]);\n    return result;\n}\n\nconst findMaxMedian = (array) => {\n    const result = [];\n    let middle;\n    let left = 0;\n    let right = array.length - 1;\n    while (left <= right) {\n        middle = (left + right) / 2;\n        if (array[middle] >= array[middle + 1]) {\n            left = middle + 1;\n        } else {\n            right = middle - 1;\n        }\n    }\n    result.push(array[left]);\n    result.push(array[right]);\n    result.push(array[middle]);\n    return result;\n}\n\nconst getNthToLastDigit = (num) => {\n    const numString = num.toString();\n    const lastDigitIndex = numString.length - 1;\n    return numString.charAt(lastDigitIndex);\n}\n\nconst getNthToLastChar = (num) => {\n    const numString = num.toString();\n    const lastDigitIndex = numString.length - 1;\n    return numString.charAt(lastDigitIndex);\n}\n\nconst findNthToLast = (array, n) => {\n    const result = [];\n    let index = array.length - 1;\n    while (index >= 0) {\n        if (index - n >= 0) {\n            result.push(array[index - n]);\n            index -= n;\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n\nconst findNthToLastChar = (array, n) => {\n    const result = [];\n    let index = array.length - 1;\n    while (index >= 0) {\n        if (index - n >= 0) {\n            result.push(array[index - n]);\n            index -= n;\n        } else {\n            break;\n        }\n    }\n    return result;\n}\n\nconst getNthToLastTwo = (array, n) => {\n    const result = [];\n    let index = array.length - 1;\n    while (index >= 0) {\n        if ("}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  for(let i = 2; i < n; i++) {\n    const prime = isPrime(i);\n    if(prime) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\n/*IImplement a function that takes an array of integers and returns the sum of the multiples of each number in the array.\n  for example:\n  arr = [2,3,5,7]\n  sumOfMultiples(arr) => 10\n  arr = [2,3,4,5]\n  sumOfMultiples(arr) => 15\n  arr = [2,3,4,5,7]\n  sumOfMultiples(arr) => 21\n  arr = [2,3,4,7,11,13,17,19,23,29,31,37,41]\n  sumOfMultiples(arr) => 63\n  arr = [2,3,4,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,119,121,127,131,137,139,143,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,247,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,437,449,451,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n  sumOfMultiples(arr) => 1515\n*/\nconst sumOfMultiples = (arr) => {\n  let sum = 0;\n  for(let i = 0; i < arr.length; i++) {\n    for(let j = 1; j <= arr[i]; j++) {\n      sum += j;\n    }\n  }\n  return sum;\n}\n\nmodule.exports = {\n  countUpTo,\n  sumOfMultiples\n};<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let aSign = a < 0,\n    bSign = b < 0,\n    aValue = Math.abs(a),\n    bValue = Math.abs(b),\n    aLen = aValue.toString().length,\n    bLen = bValue.toString().length,\n    z = [];\n\n  // check the case of the two numbers\n  if (aValue === 0) {\n    return 0;\n  }\n\n  if (bValue === 0) {\n    return 0;\n  }\n\n  if (aSign) {\n    a = a - Math.pow(-1, aLen);\n  }\n\n  if (bSign) {\n    b = b - Math.pow(-1, bLen);\n  }\n\n  for (let i = aLen, j = bLen, k = 0; i >= 0 && j >= 0; i--, j--) {\n    z.push(aValue.charCodeAt(i) * bValue.charCodeAt(j) % 10);\n  }\n\n  let ans = 0;\n  for (let i = z.length - 1; i >= 0; i--) {\n    ans = (ans + z[i]) % 10;\n  }\n\n  if (aSign) {\n    ans = 10 - ans;\n  }\n\n  return ans;\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const valueAsNumber = Number(value);\n  const twoIntegers = valueAsNumber - Math.round(valueAsNumber);\n  return valueAsNumber >= 0? Math.round(valueAsNumber) : Math.round(valueAsNumber) - 1;\n};\n\nconsole.log(closestInteger(\"10\"));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-14.5\"));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return [1]\n  if (n === 1) return [2]\n  if (n === 2) return [2, 4]\n  return [...makeAPile(n - 1), n - 1,...makeAPile(n - 2), n - 2]\n}\n\nconst makeAPile2 = (n) => {\n  if (n === 0) return [1]\n  if (n === 1) return [2]\n  return makeAPile(n - 1).reduce((a, b) => a.concat(b), [])\n}\n\n// const makeAPile3 = (n) => {\n//   if (n === 0) return [1]\n//   if (n === 1) return [2]\n//   if (n === 2) return [2, 4]\n//   return makeAPile(n - 1).reduce((a, b) => a.concat(b), [])\n// }\n\nconst makeAPile4 = (n) => {\n  if (n === 0) return [1]\n  if (n === 1) return [2]\n  let a = makeAPile(n - 1).reduce((a, b) => a.concat(b), [])\n  a.unshift(n)\n  return a\n}\n\nconsole.log(makeAPile(5))\nconsole.log(makeAPile2(5))\nconsole.log(makeAPile3(5))\nconsole.log(makeAPile4(5))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/\\s+/);\n  if (words.length === 1) {\n    words = words.map(word => word.trim());\n  }\n  return words;\n}\n\n/*\n  Let's take a look at our wordsString function.\n  \n  It takes a string and splits it into words.\n  If there are no spaces, it returns an array of one item.\n  If there are spaces, it splits the string by spaces and returns an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  \n  As a bonus, if there are commas, it will split the string into an array of words.\n  If there are not commas, it will split the string into an array of single words.\n  \n  For example:\n  wordsString(\"Hi, my name is John, I love dogs\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"I\", \"love\", \"dogs\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString2 = (s) => {\n  let words = s.split(/\\s+/);\n  if (words.length === 1) {\n    return [words[0]];\n  }\n  return words;\n}\n\n/*\n  Let's take a look at our wordsString2 function.\n  \n  It takes a string and splits it into words.\n  If there are no spaces, it returns an array of one item.\n  If there are spaces, it splits the string by spaces and returns an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  \n  As a bonus, if there are commas, it will split the string into an array of words.\n  If there are not commas, it will split the string into an array of single words.\n  \n  For example:\n  wordsString(\"Hi, my name is John, I love dogs\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"I\", \"love\", \"dogs\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString3 = (s) => {\n  let words = s.split(/,\\s*/);\n  if (words.length === 1) {\n    return [words[0]];\n  }\n  return words;\n}\n\n/*\n  Let's take a look at our wordsString3 function.\n  \n  It takes a string and splits it into words.\n  If there are no spaces, it returns an array of one item.\n  If there are spaces, it splits the string by spaces and returns an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  \n  As a bonus, if there are commas, it will split the string into an array of words.\n  If there are not commas, it will split the string into an array of single words.\n  \n  For example:\n  wordsString(\"Hi, my name is John, I love dogs\") === [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"I\", \"love\", \"dogs\"]\n  wordsString(\"One, two, three, four, five, six\") === [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString4 = (s) => {\n  let words = s.split(/\\s+/);\n  if (words.length === 1) {\n    return [words[0]];\n  }\n  return words;\n}\n\nconst words = wordsString(\"Hi, my name is John\");\nconsole.log(words); //=> ['Hi','my', 'name', 'is', 'John']\n\nconst words2 = wordsString2(\"Hi, my name is John\");\nconsole.log(words2); //=> ['Hi','my', 'name', 'is', 'John']\n\nconst words3 = wordsString3(\"Hi, my name is John, I love dogs\");\nconsole.log(words3); //=> ['Hi','my', 'name', 'is', 'John', 'I', 'love', 'dogs']\n\nconst words4 = wordsString4(\"Hi, my name is John, I love dogs\");\nconsole.log(words4); //=> ['Hi','my', 'name', 'is', 'John', 'I', 'love', 'dogs']<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  return Math.floor((x + y) / 2)\n}\n\nconst checkRange = (num) => {\n  return num > 0 && num <= 50\n}\n\nconst checkRange2 = (num) => {\n  return num > 50 && num <= 100\n}\n\nconst checkRange3 = (num) => {\n  return num > 100 && num <= 200\n}\n\nconst checkRange4 = (num) => {\n  return num > 200 && num <= 300\n}\n\nconst checkRange5 = (num) => {\n  return num > 300 && num <= 400\n}\n\nconst checkRange6 = (num) => {\n  return num > 400 && num <= 500\n}\n\nconst checkRange7 = (num) => {\n  return num > 500 && num <= 600\n}\n\nconst checkRange8 = (num) => {\n  return num > 600 && num <= 700\n}\n\nconst checkRange9 = (num) => {\n  return num > 700 && num <= 800\n}\n\nconst checkRange10 = (num) => {\n  return num > 800 && num <= 900\n}\n\nconst checkRange11 = (num) => {\n  return num > 900 && num <= 1000\n}\n\nconst checkRange12 = (num) => {\n  return num > 1000 && num <= 1100\n}\n\nconst checkRange13 = (num) => {\n  return num > 1100 && num <= 1200\n}\n\nconst checkRange14 = (num) => {\n  return num > 1200 && num <= 1300\n}\n\nconst checkRange15 = (num) => {\n  return num > 1300 && num <= 1400\n}\n\nconst checkRange16 = (num) => {\n  return num > 1400 && num <= 1500\n}\n\nconst checkRange17 = (num) => {\n  return num > 1500 && num <= 1600\n}\n\nconst checkRange18 = (num) => {\n  return num > 1600 && num <= 1700\n}\n\nconst checkRange19 = (num) => {\n  return num > 1700 && num <= 1800\n}\n\nconst checkRange20 = (num) => {\n  return num > 1800 && num <= 1900\n}\n\nconst checkRange21 = (num) => {\n  return num > 1900 && num <= 2000\n}\n\nconst checkRange22 = (num) => {\n  return num > 2000 && num <= 2100\n}\n\nconst checkRange23 = (num) => {\n  return num > 2100 && num <= 2200\n}\n\nconst checkRange24 = (num) => {\n  return num > 2200 && num <= 2300\n}\n\nconst checkRange25 = (num) => {\n  return num > 2300 && num <= 2400\n}\n\nconst checkRange26 = (num) => {\n  return num > 2400 && num <= 2500\n}\n\nconst checkRange27 = (num) => {\n  return num > 2500 && num <= 2600\n}\n\nconst checkRange28 = (num) => {\n  return num > 2600 && num <= 2700\n}\n\nconst checkRange29 = (num) => {\n  return num > 2700 && num <= 2800\n}\n\nconst checkRange30 = (num) => {\n  return num > 2800 && num <= 2900\n}\n\nconst checkRange31 = (num) => {\n  return num > 2900 && num <= 3000\n}\n\nconst checkRange32 = (num) => {\n  return num > 3000 && num <= 3100\n}\n\nconst checkRange33 = (num) => {\n  return num > 3100 && num <= 3200\n}\n\nconst checkRange34 = (num) => {\n  return num > 3200 && num <= 3300\n}\n\nconst checkRange35 = (num) => {\n  return num > 3300 && num <= 3400\n}\n\nconst checkRange36 = (num) => {\n  return num > 3400 && num <= 3500\n}\n\nconst checkRange37 = (num) => {\n  return num > 3500 && num <= 3600\n}\n\nconst checkRange38 = (num) => {\n  return num > 3600 && num <= 3700\n}\n\nconst checkRange39 = (num) => {\n  return num > 3700 && num <= 3800\n}\n\nconst checkRange40 = (num) => {\n  return num > 3800 && num <= 3900\n}\n\nconst checkRange41 = (num) => {\n  return num > 3900 && num <= 4000\n}\n\nconst checkRange42 = (num) => {\n  return num > 4000 && num <= 4100\n}\n\nconst checkRange43 = (num) => {\n  return num > 4100 && num <= 4200\n}\n\nconst checkRange44 = (num) => {\n  return num > 4200 && num <= 4300\n}\n\nconst checkRange45 = (num) => {\n  return num > 4300 && num <= 4400\n}\n\nconst checkRange46 = (num) => {\n  return num > 4400 && num <= 4500\n}\n\nconst checkRange47 = (num) => {\n  return num > 4500 && num <= 4600\n}\n\nconst checkRange48 = (num) => {\n  return num > 4600 && num <= 4700\n}\n\nconst checkRange49 = (num) => {\n  return num > 4700 && num <= 4800\n}\n\nconst checkRange50 = (num) => {\n  return num > 4800 && num <= 4900\n}\n\nconst checkRange51 = (num) => {\n  return num > 4900 && num <= 5000\n}\n\nconst checkRange52 = (num) => {\n  return num > 5000 && num <= 5100\n}\n\nconst checkRange53 = (num) => {\n  return num > 5100 && num <= 5200\n}\n\nconst checkRange54 = (num) => {\n  return num > 5200 && num <= 5300\n}\n\nconst checkRange55 = (num) => {\n  return num > 5300 && num <= 5400\n}\n\nconst checkRange56 = (num) => {\n  return num > 5400 && num <= 5500\n}\n\nconst checkRange57 = (num) => {\n  return num > 5500 && num <= 5600\n}\n\nconst checkRange58 = (num"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const intToBin = (n, m) => (n >= m? -1 : n > 0? `${(n - 1).toString(2)}01` : `0${(n - 1).toString(2)}`)\n\n  const binToInt = (s) => parseInt(s, 2)\n\n  return `0b${intToBin(binToInt(s), binToInt(s))}`\n}\n\n// console.log(roundedAvg(1, 5))\n// //=> \"0b11\"\n// console.log(roundedAvg(7, 5))\n// //=> -1\n// console.log(roundedAvg(10, 20))\n// //=> \"0b1111\"\n// console.log(roundedAvg(20, 33))\n// //=> \"0b11010\"\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const sortedDigits = x.sort((a, b) => a - b)\n  const positiveDigits = sortedDigits.filter((x) => x > 0)\n  const hasEvenDigit = positiveDigits.find((x) => x % 2 === 0)\n  if (hasEvenDigit) {\n    return []\n  } else {\n    return sortedDigits\n  }\n}\n\nmodule.exports = uniqueDigits\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = []\n  const length = arr.length\n  for (let i = 1; i <= 9; i++) {\n    let index = 0\n    while (index < length && arr[index] < i) {\n      index++\n    }\n    if (index === length) {\n      break\n    }\n    names.push(arr[index])\n  }\n  names.reverse()\n  return names\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let factorial = [];\n  if (n === 1) {\n    factorial = [1];\n  } else if (n === 2) {\n    factorial = [1, 1];\n  } else if (n % 2 === 0) {\n    factorial = f(n / 2);\n    factorial.unshift(n);\n  } else {\n    for (let i = 1; i <= n; i += 1) {\n      factorial.unshift(i * f(i - 1));\n    }\n  }\n  return factorial;\n};\n\nconsole.log(f(5));\n\n/*\n  Implement a function to count the total number of divisors of a number.\n  A divisor of a number n is a number that evenly divides n. For example, 4 has two divisors, 4 and 1.\n  The number of divisors of 27 is three because every digit of 27 (1, 2, 3, 4, 6, 9, 10, 12, 14, 18, 19, 21, 24, 27) is a divisor of 27.\n  Write a function:\n  divisors(n) that takes a number as an argument, and returns the number of its divisors.\n  Example:\n  divisors(27) == 5\n  */\nconst divisors = (n) => {\n  const divisors = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors.length;\n};\n\nconsole.log(divisors(27));\n\n/*\n  Implement a function that takes a number n and returns the sum of the squares of its digits.\n  If n has a digit 9, it will be returned as 9, otherwise it will be returned as n * n.\n  Example:\n  squareDigits(9) == 1\n  squareDigits(7) == 49\n  */\nconst squareDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i += 1) {\n    sum += n.charCodeAt(i) * n.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(squareDigits(9));\nconsole.log(squareDigits(7));\n\n/*\n  Implement a function that takes a number n and returns the sum of the squares of its digits.\n  If n has a digit 9, it will be returned as 9, otherwise it will be returned as n * n.\n  Example:\n  squareDigits(9) == 1\n  squareDigits(7) == 49\n  */\nconst squareDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i += 1) {\n    sum += n.charCodeAt(i) * n.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(squareDigits(9));\nconsole.log(squareDigits(7));\n\n/*\n  Implement a function to count the total number of divisors of a number.\n  A divisor of a number n is a number that evenly divides n. For example, 4 has two divisors, 4 and 1.\n  The number of divisors of 27 is three because every digit of 27 (1, 2, 3, 4, 6, 9, 10, 12, 14, 18, 19, 21, 24, 27) is a divisor of 27.\n  Write a function:\n  divisors(n) that takes a number as an argument, and returns the number of its divisors.\n  Example:\n  divisors(27) == 5\n  */\nconst divisors = (n) => {\n  let divisors = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors.length;\n};\n\nconsole.log(divisors(27));\n\n/*\n  Implement a function that takes a number n and returns the sum of the squares of its digits.\n  If n has a digit 9, it will be returned as 9, otherwise it will be returned as n * n.\n  Example:\n  squareDigits(9) == 1\n  squareDigits(7) == 49\n  */\nconst squareDigits = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n.length; i += 1) {\n    sum += n.charCodeAt(i) * n.charCodeAt(i);\n  }\n  return sum;\n};\n\nconsole.log(squareDigits(9));\nconsole.log(squareDigits(7));\n\n/*\n  Implement a function to count the total number of divisors of a number.\n  A divisor of a number n is a number that evenly divides n. For example, 4 has two divisors, 4 and 1.\n  The number of divisors of 27 is three because every digit of 27 (1, 2, 3, 4, 6, 9, 10, 12, 14, 18, 19, 21, 24, 27) is a divisor of 27.\n  Write a function:\n  divisors(n) that takes a number as an argument, and returns the number of its divisors.\n  Example:\n  divisors(27) == 5\n  */\nconst divisors = (n) => {\n  let divisors = [];\n  for (let i = 1; i <= n; i += 1) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors.length;\n};\n\nconsole.log(divisors(27));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    let str = '' + i;\n    while (str.length % 2!== 0) {\n      str = str + str;\n    }\n    if (str.indexOf(str) === 0) {\n      result.push(str);\n    }\n  }\n  return result;\n};\n\nconsole.log(evenOddPalindrome(12));\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const nums = arr.filter(x => x > 0);\n  return nums.reduce((acc, n) => acc + (n > 9), 0);\n};\n\nconsole.log(countNums([-1, 11, -11])); // 1\nconsole.log(countNums([1, 1, 2])); // 3\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  \n  const leftBound = arr[0];\n  let i = 1;\n  while (i < arr.length) {\n    if (arr[i] < leftBound) {\n      const j = i + 1;\n      while (j < arr.length && arr[j] <= leftBound) {\n        i = j;\n        j += 1;\n      }\n      const index = j - i;\n      if (index === 1) {\n        return false;\n      }\n      const leftBound = arr[i];\n      arr.splice(i, index);\n    }\n    i += 1;\n  }\n  return true;\n};\n\nexport {\n  moveOneBall,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  if (lst1Length!== lst2Length) {\n    return 'NO';\n  }\n  for (let i = 0; i < lst1Length; i++) {\n    if (lst1[i] % 2!== 0 || lst2[i] % 2!== 0) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const dictionary = {};\n    const regex = /([a-z])([a-z]*)/g;\n    let count = 0;\n    let max = 0;\n    let words = test.split(' ');\n    words.forEach((word, index) => {\n        const wordCount = words.slice(0, index + 1).reduce((sum, letter) => {\n            if (dictionary[letter] === undefined) {\n                dictionary[letter] = 1;\n                return sum + 1;\n            } else {\n                dictionary[letter]++;\n                return sum;\n            }\n        }, 0);\n        if (wordCount > max) {\n            max = wordCount;\n            count = 1;\n        } else if (wordCount == max) {\n            count++;\n        }\n    });\n    return dictionary;\n};\n\nmodule.exports = histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  // console.log(`${s} - ${c}`)\n  const len = s.length\n  const result = []\n  let i = 0\n  let j = 0\n  for (; i < len; i++) {\n    if (c.indexOf(s[i]) > -1) {\n      j = i\n      break\n    }\n  }\n  for (; j < len; j++) {\n    result.push(s[j])\n  }\n  return (result.join(''), s.length === result.length)\n}\n\nconsole.log(reverseDelete('abcdef', 'ae'))\nconsole.log(reverseDelete('abcdef', 'b'))\nconsole.log(reverseDelete('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const list = lst.map(x => x.split(''))\n  return list.reduce((pre, current) => {\n    let count = 0\n    for (let i = 0; i < current.length; i++) {\n      if (current[i] % 2 === 1) {\n        count++\n      }\n    }\n    return [pre, count]\n  }, [0, 0])\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    for (let i = start + 1; i < end; i++) {\n      minSum = Math.min(minSum, nums[i] + findMin(i, end));\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst minSubArraySum2 = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    for (let i = start + 1; i < end; i++) {\n      minSum = Math.min(minSum, nums[i] + findMin(i, end));\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst minSubArraySum3 = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    let i = start;\n    while (i < end) {\n      minSum = Math.min(minSum, nums[i] + findMin(i + 1, end));\n      i++;\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst minSubArraySum4 = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    for (let i = start + 1; i < end; i++) {\n      minSum = Math.min(minSum, nums[i] + findMin(i + 1, end));\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst minSubArraySum5 = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    for (let i = start + 1; i < end; i++) {\n      minSum = Math.min(minSum, nums[i] + findMin(i + 1, end));\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst minSubArraySum6 = (nums) => {\n  const findMin = (start, end) => {\n    const curSum = 0;\n    for (let i = start; i < end; i++) {\n      curSum += nums[i];\n      if (curSum > 0) {\n        return curSum;\n      }\n    }\n    return -1;\n  };\n  const findMinSum = (start, end) => {\n    let minSum = nums[start];\n    let i = start;\n    while (i < end) {\n      minSum = Math.min(minSum, nums[i] + findMin(i + 1, end));\n      i++;\n    }\n    return minSum;\n  };\n  return findMinSum(0, nums.length - 1);\n};\n\nconst findMinSubArraySum = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + findMinSubArraySum(nums, i));\n  }\n  return minSum;\n};\n\nconst findMinSubArraySum2 = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + findMinSubArraySum2(nums, i));\n  }\n  return minSum;\n};\n\nconst findMinSubArraySum3 = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    minSum = Math.min(minSum, nums[i] + findMinSubArraySum3(nums, i));\n  }\n  return minSum;\n};\n\nconst findMinSubArraySum4 = (nums) => {\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    min"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let [width, height] = grid.length;\n    let [wells, buckets] = grid.map(([row, col]) => row * col);\n    let [totalWater, numFill] = new Array(wells).fill(0);\n    let [numBuckets, totalBuckets] = new Array(buckets).fill(0);\n\n    for (let i = 0; i < wells; i++) {\n        totalWater[i] = Math.min(buckets, capacity - totalBuckets);\n        numFill[i] = 0;\n    }\n\n    while (totalWater > 0) {\n        let minIndex = -1;\n        let minBucket = Infinity;\n\n        for (let i = 0; i < wells; i++) {\n            if (numFill[i] < totalWater) {\n                if (minBucket > totalBuckets[i] + numFill[i]) {\n                    minBucket = totalBuckets[i] + numFill[i];\n                    minIndex = i;\n                }\n            }\n        }\n\n        if (minIndex === -1) break;\n\n        totalBuckets[minIndex] += 1;\n        totalWater -= 1;\n        numFill[minIndex] += 1;\n    }\n\n    return numFill.reduce((a, b) => a + b);\n};\n\nconst solution = maxFill([\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n]);\n\nconsole.log(solution);\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = []\n  const sortedArrLen = arr.length\n  const binaryStr = (val) => (val > 0? '1' : '0').repeat(val)\n  for (let i = 0; i < sortedArrLen; i++) {\n    sortedArr[i] = binaryStr(arr[i])\n  }\n\n  const binaryStrCmp = (val1, val2) => {\n    if (val1.length < val2.length) {\n      return val1.length < val2.length? -1 : 1\n    } else if (val1.length > val2.length) {\n      return val1.length > val2.length? 1 : -1\n    } else {\n      return val1 < val2? -1 : val1 > val2? 1 : 0\n    }\n  }\n\n  const sortByDecimal = (val1, val2) => {\n    if (val1.length < val2.length) {\n      return val1.length < val2.length? -1 : 1\n    } else if (val1.length > val2.length) {\n      return val1.length > val2.length? 1 : -1\n    } else {\n      return val1 - val2\n    }\n  }\n\n  let i = 0\n  let j = sortedArrLen - 1\n  let k = sortedArrLen - 1\n  while (i <= j) {\n    if (binaryStrCmp(sortedArr[i], sortedArr[j]) > 0) {\n      const temp = sortedArr[i]\n      sortedArr[i] = sortedArr[j]\n      sortedArr[j] = temp\n      j--\n    } else {\n      i++\n    }\n  }\n  return sortedArr\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let curr = s[i];\n        if (curr.match(/\\w/) && n === 0) {\n            result.push(curr);\n            n--;\n        }\n        for (let j = 0; j < curr.length; j++) {\n            let char = curr[j];\n            if (char.match(/\\w/) && n === 0) {\n                result.push(curr);\n                n--;\n            }\n        }\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  // find the first vowel from the end of the word\n  const vowel = word.split('').reverse().find((v) => v.toLowerCase() === 'a');\n  // if no vowel is found, return an empty string\n  if (vowel === undefined) return '';\n\n  // if a vowel is found, find the first consonant on the right side of the vowel\n  const consonant = word.split('').reverse().find((c) => vowels.indexOf(c.toLowerCase())!== -1 && vowels.indexOf(c.toLowerCase()) < vowels.indexOf(vowel.toLowerCase()));\n  // if no consonant is found, return an empty string\n  if (consonant === undefined) return '';\n\n  // if a consonant is found, return the vowel\n  return vowels.indexOf(vowel.toLowerCase()) < vowels.indexOf(consonant.toLowerCase())? vowel : '';\n};\n\n// http://www.cs.rit.edu/~ncs/pub/fel00/dcs.pdf\nconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\n// test cases\nconst testCases = [\n  ['a', 'b', 'c'],\n  ['k', 't', 'b'],\n  ['v', 'v', 'n'],\n  ['s', 'y', 'r'],\n  ['d','s', 'z'],\n  ['b', 'h', 'w'],\n  ['a','s', 'o'],\n  ['d', 't', 'f'],\n  ['v', 'z', 'g'],\n  ['a', 'k', 'n'],\n  ['d', 't', 'r'],\n  ['k', 'g', 'z'],\n  ['c', 't', 'z'],\n  ['k','s', 'u'],\n  ['y', 'e', 'd'],\n  ['g', 'e', 'l'],\n  ['r', 'd', 't'],\n  ['g', 'k','m'],\n  ['c', 'h', 'n'],\n  ['m', 'a', 'h'],\n  ['d', 'e', 'i'],\n  ['r', 'b', 'c'],\n  ['s', 'l', 'o'],\n  ['n', 'u', 't'],\n  ['k', 'l', 'c'],\n  ['e', 'o', 'u'],\n  ['m', 'u','s'],\n  ['b', 'c', 'd'],\n  ['l', 't', 'i'],\n  ['i', 'e', 'k'],\n  ['t', 'n', 'o'],\n  ['l', 'p', 'e'],\n  ['v', 'y', 'l'],\n  ['d', 'a', 'w'],\n  ['p', 't', 'n'],\n  ['m', 'r', 'h'],\n  ['d', 'n', 'w'],\n  ['p', 'g','s'],\n  ['c','s', 'e'],\n  ['d', 'e', 'v'],\n  ['g','s', 'r'],\n  ['b', 'd', 'g'],\n  ['i', 'g','s'],\n  ['k', 'd', 'e'],\n  ['g', 'i', 'h'],\n  ['r', 'l', 'a'],\n  ['a', 'r', 'i'],\n  ['l', 'v', 'e'],\n  ['p','s', 'd'],\n  ['r', 'e', 'v'],\n  ['e', 'r', 'e'],\n  ['s', 'e', 't'],\n  ['u', 'n', 'd'],\n  ['n', 'd', 'o'],\n  ['s', 'c', 'e'],\n  ['u', 'c', 'k'],\n  ['c', 'e', 'c'],\n  ['v', 'n', 'k'],\n  ['k', 'n', 'g'],\n  ['e', 'e', 'g'],\n  ['h', 'e','m'],\n  ['m', 'h','m'],\n  ['t', 'd', 'n'],\n  ['u', 'r', 'e'],\n  ['n', 'o','m'],\n  ['t', 'o', 'r'],\n  ['l', 'p', 'r'],\n  ['e', 'r', 'u'],\n  ['g', 'e', 'r'],\n  ['t', 'o','s'],\n  ['l', 'a', 'l'],\n  ['d', 'c', 'r'],\n  ['a', 'l', 'e'],\n  ['r', 'c', 'e'],\n  ['g', 'l', 'v'],\n  ['p', 'l', 'e'],\n  ['b','s', 'i'],\n  ['c', 'e', 'd'],\n  ['t', 'i', 'c'],\n  ['g', 'r', 'n'],\n  ['e', 'g', 'e'],\n  ['e', 'c', 't'],\n  ['t', 'h','s'],\n  ['u','s', 'r'],\n  ['n','s', 'l'],\n  ['g', 'e', 'l'],\n  ['i', 'e', 'd'],\n  ['e', 'i', 'd'],\n  ['s', 'e', 'e'],\n  ['n', 't', 'h'],\n  ['d', '"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let prev = lst[0];\n  let len = lst.length;\n  let stack = [];\n  let hasBalance = true;\n\n  for (let i = 1; i < len; i++) {\n    const cur = lst[i];\n    const curParens = cur.match(/\\(([^()]*)\\)/g);\n    if (curParens) {\n      for (let j = 0; j < curParens.length; j++) {\n        const paren = curParens[j];\n        stack.push(paren);\n      }\n    } else if (cur === ')') {\n      stack.pop();\n      if (stack.length === 0) {\n        hasBalance = false;\n        break;\n      }\n    } else {\n      stack.push(cur);\n    }\n  }\n\n  return hasBalance && stack.length === 0;\n};\n\nexport default matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let sortedArr = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const max = sortedArr.findIndex(element => element >= arr[i]);\n    sortedArr.splice(max, 0, arr[i]);\n    if (sortedArr.length > k) sortedArr.splice(k, 1);\n  }\n  return sortedArr;\n};\n\n/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the minimum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n  let sortedArr = [];\n  const len = arr.length;\n  for (let i = 0; i < len; i++) {\n    const min = sortedArr.findIndex(element => element <= arr[i]);\n    sortedArr.splice(min, 0, arr[i]);\n    if (sortedArr.length > k) sortedArr.splice(k, 1);\n  }\n  return sortedArr;\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    return lst.reduce((a, b) => {\n        if (b % 2 === 0) {\n            return a + b;\n        } else {\n            return a;\n        }\n    });\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0)\n  return Math.pow(10, k) * (sum - k + 1)\n}\n\n/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of k digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsWithMaxDigits = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0)\n  return sum - k + 1\n}\n\n/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a minimum of k digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 4 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsWithMinDigits = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0)\n  return sum - k + 1\n}\n\nconst addElementsWithMaxDigitsAndMinDigits = (arr, k) => {\n  const sum = arr.reduce((acc, n) => acc + n, 0)\n  return sum - k + 1\n}\n\nconst main = async () => {\n  const arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n  const k = 4\n  const addElements = await addElements(arr, k)\n  console.log(addElements)\n  const addElementsWithMaxDigits = await addElementsWithMaxDigits(arr, k)\n  console.log(addElementsWithMaxDigits)\n  const addElementsWithMinDigits = await addElementsWithMinDigits(arr, k)\n  console.log(addElementsWithMinDigits)\n  const addElementsWithMaxDigitsAndMinDigits = await addElementsWithMaxDigitsAndMinDigits(arr, k)\n  console.log(addElementsWithMaxDigitsAndMinDigits)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const list = []\n  let num = n\n  while (num > 1) {\n    if (num % 2 === 0) {\n      num = num / 2\n    } else {\n      num = 3 * num + 1\n    }\n    list.push(num)\n  }\n  return list\n}\n\nmodule.exports = getOddCollatz\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  //console.log(date);\n  if (date === '') {\n    return false;\n  }\n  const split = date.split('-');\n  let month = split[1];\n  let day = split[2];\n  let year = split[0];\n  if (month.length === 1) {\n    month = month + '0';\n  }\n  if (day.length === 1) {\n    day = day + '0';\n  }\n  if (month < '01' || month > '12') {\n    return false;\n  }\n  if (day < '01' || day > '31') {\n    return false;\n  }\n  if (year < '1900' || year > '2040') {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(' ');\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    res.push(words[i].toLowerCase());\n  }\n  return res;\n};\n\n/*\n  getIndexInArray(arr, item)\n    returns the index of the given item in the array, if it is found\n    returns -1 if the item is not found\n    Examples\n    getIndexInArray([\"a\", \"b\", \"c\"], \"b\") ➞ 2\n    getIndexInArray([\"a\", \"b\", \"c\"], \"d\") ➞ -1\n  */\nconst getIndexInArray = (arr, item) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === item) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  isInArray(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArray(\"b\", [\"a\", \"b\", \"c\"]) ➞ true\n    isInArray(\"d\", [\"a\", \"b\", \"c\"]) ➞ false\n  */\nconst isInArray = (item, arr) => {\n  return getIndexInArray(arr, item)!== -1;\n};\n\n/*\n  isInArrayInOddOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInOddOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ true\n    isInArrayInOddOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ false\n  */\nconst isInArrayInOddOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  isInArrayInEvenOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInEvenOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ false\n    isInArrayInEvenOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ true\n  */\nconst isInArrayInEvenOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  isInArrayInOddAndEvenOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInOddAndEvenOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ true\n    isInArrayInOddAndEvenOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ false\n  */\nconst isInArrayInOddAndEvenOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  isInArrayInEvenAndOddOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInEvenAndOddOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ false\n    isInArrayInEvenAndOddOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ true\n  */\nconst isInArrayInEvenAndOddOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  isInArrayInOddAndEvenAndOddAndEvenOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInOddAndEvenAndOddAndEvenOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ true\n    isInArrayInOddAndEvenAndOddAndEvenOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ false\n  */\nconst isInArrayInOddAndEvenAndOddAndEvenOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\n  isInArrayInOddAndOddAndEvenAndOddOrder(item, arr)\n    returns true if the given item is in the array, false otherwise\n    Examples\n    isInArrayInOddAndOddAndEvenAndOddOrder(\"b\", [\"a\", \"b\", \"c\"]) ➞ false\n    isInArrayInOddAndOddAndEvenAndOddOrder(\"d\", [\"a\", \"b\", \"c\"]) ➞ true\n  */\nconst isInArrayInOddAndOddAndEvenAndOddOrder = (item, arr) => {\n  let index = getIndexInArray(arr, item);\n  if (index!== -1) {\n    if (index % 2 === 1) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule"}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 0\n  while (i < lst.length - 1) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n    i += 1\n  }\n  return true\n}\n\nexport default isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const { start1, end1 } = interval1;\n  const { start2, end2 } = interval2;\n  if (start1 >= start2 && start1 <= end2) {\n    return end1 - start1;\n  }\n  if (start2 >= start1 && start2 <= end1) {\n    return end2 - start2;\n  }\n  return false;\n};\n\nconst isPrime = (number) => {\n  const limit = Math.sqrt(number);\n  for (let i = 2; i <= limit; i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isIntersectionPrime = (intersection) => {\n  return intersection % 1 === 0 && isPrime(intersection);\n};\n\nmodule.exports = {\n  intersection,\n  isIntersectionPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  const arr2 = arr.slice().sort((a, b) => a - b);\n  const a = arr2[0];\n  const b = arr2[1];\n  const s = 1;\n  let c = 0;\n  while (a >= 0) {\n    c = c + s * a;\n    s = s * b;\n    a = a / 10;\n    b = b / 10;\n  }\n  return c;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let max = [Infinity, Infinity];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      let cur = grid[i][j];\n      if (cur < max[0]) {\n        max[0] = cur;\n        max[1] = i;\n        max[2] = j;\n      }\n    }\n  }\n  let res = [];\n  for (let i = 0; i < k; i++) {\n    res.push(grid[max[1]][max[2]]);\n    max[1] = max[1] + max[0];\n    max[2] = max[2] + 1;\n    if (max[2] > grid[0].length - 1) {\n      max[1] = max[1] - grid[0].length + 1;\n      max[2] = 0;\n    }\n  }\n  return res;\n};\n\nconst sol = (grid, k) => {\n  let dp = [];\n  for (let i = 0; i < grid.length; i++) {\n    dp[i] = [];\n    for (let j = 0; j < grid[0].length; j++) {\n      dp[i][j] = grid[i][j];\n    }\n  }\n  for (let i = 0; i < k; i++) {\n    dp[max[1]][max[2]] = i + 1;\n    max[1] = max[1] + max[0];\n    max[2] = max[2] + 1;\n    if (max[2] > grid[0].length - 1) {\n      max[1] = max[1] - grid[0].length + 1;\n      max[2] = 0;\n    }\n  }\n  return dp;\n};\n\nexport default {\n  minPath,\n  sol\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = [1, 1, 2];\n  let sum = fib[0] + fib[1];\n  for (let i = 2; i <= n; i++) {\n    sum = fib[i - 1] + sum;\n  }\n  return fib;\n};\n\nconst expected = [1, 3, 2, 8];\n\nconst test = [\n  [1, 2, 3],\n  [1, 2, 3, 4],\n  [1, 2, 3, 4, 5],\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 5, 6, 7],\n  [1, 2, 3, 4, 5, 6, 7, 8],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n];\n\nfor (let testCase of test) {\n  let actual = tri(testCase[0]);\n  let diff = actual.length - expected[testCase[0]].length;\n  let error = 0;\n  for (let i = 0; i < actual.length; i++) {\n    error += Math.abs(actual[i] - expected[testCase[0]][i]);\n  }\n  console.log(`tri(${testCase[0]}) = ${actual}, diff = ${diff}, error = ${error}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n % 2 === 0) return 0;\n  return n * (digits(n - 1) + 1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const brackets = {\n    '[': ']',\n    '[[': ']]',\n    '[[': ']]',\n    '[[[': ']]]'\n  };\n  const nested = [];\n\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === brackets[string[i + 1]]) {\n      nested.push(string[i]);\n    } else {\n      if (nested.length) {\n        return nested.join('') === string;\n      }\n      return false;\n    }\n  }\n  return nested.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const result = 0;\n  for (const x of lst) {\n    result += x * x;\n  }\n  return result;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const isALetter = (letter) => /[a-zA-Z]/.test(letter);\n  const isWord = (letter) => /[a-zA-Z]+/.test(letter);\n\n  if (txt.length === 0) {\n    return false;\n  }\n\n  const last = txt.charAt(txt.length - 1);\n  if (isALetter(last) &&!isWord(last)) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Given an array of words, return all the words that can be constructed by taking\n  the first character of each word and appending it to the end of the word.\n  For example:\n  wordsToConcatenate(\"apple\", \"pie\") ➞ [\"apple pIE\", \"apple pi \", \"apple pi e\"]\n  wordsToConcatenate(\"apple\", \"pie\", \"apple\") ➞ [\"apple pIE\", \"apple pi \", \"apple pi e\"]\n  */\nconst wordsToConcatenate = (...words) => {\n  const concatenated = words.reduce((prev, curr) => {\n    const next = prev + curr;\n    return next;\n  }, \"\");\n\n  return words.reduce((prev, curr) => {\n    return prev + curr.charAt(0);\n  }, concatenated);\n};\n\nmodule.exports = {\n  checkIfLastCharIsALetter,\n  wordsToConcatenate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if(arr.length == 0)\n    return -1;\n  else if(arr.length == 1)\n    return 0;\n  let start = 0;\n  let end = arr.length - 1;\n  while(end > start) {\n    let mid = Math.floor((start + end) / 2);\n    if(arr[mid] >= arr[start])\n      start = mid + 1;\n    else\n      end = mid;\n  }\n  return start;\n};\n\nconst isSubset = (subset, set) => {\n  for(let i = 0; i < subset.length; i++) {\n    if(subset[i] > set[i])\n      return false;\n  }\n  return true;\n};\n\nconst canPartition = (arr) => {\n  let start = 0;\n  let end = arr.length - 1;\n  while(end > start) {\n    let mid = Math.floor((start + end) / 2);\n    if(arr[mid] < arr[end])\n      start = mid + 1;\n    else\n      end = mid;\n  }\n  let left = arr.slice(start);\n  let right = arr.slice(0, end + 1);\n  if(isSubset(left, right) &&!isSubset(left, right))\n    return true;\n  return false;\n};\n\n/*\n  Partition array\n  \n  Parameters:\n  arr - an array\n  \n  Returns an array of two subarrays, such that the first is a subset of the original array and the second is a subset of the original array.\n*/\nconst partition = (arr) => {\n  let left = [];\n  let right = [];\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] < arr[0]) {\n      left.push(arr[i]);\n    } else {\n      right.push(arr[i]);\n    }\n  }\n  return [left, right];\n};\n\nmodule.exports = {\n  canArrange,\n  canPartition,\n  partition\n};<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const lstSize = lst.length\n  let a = null\n  let b = null\n\n  if (lstSize) {\n    let a = lst[0]\n    let b = lst[0]\n\n    for (let i = 1; i < lstSize; i++) {\n      if (lst[i] < 0) {\n        a = lst[i]\n      } else if (lst[i] > 0) {\n        b = lst[i]\n      }\n    }\n  }\n\n  return (a, b)\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  const one = typeof a === 'number'? a : a.toString();\n  const two = typeof b === 'number'? b : b.toString();\n\n  const isInt = /^[0-9]+$/.test(one);\n  const isFloat = /^[0-9]+\\.[0-9]+$/.test(one);\n  const isString = /^[0-9]+,[0-9]+$/.test(one);\n\n  const isInt2 = /^[0-9]+$/.test(two);\n  const isFloat2 = /^[0-9]+\\.[0-9]+$/.test(two);\n  const isString2 = /^[0-9]+,[0-9]+$/.test(two);\n\n  if (isInt && isInt2) return parseInt(one) > parseInt(two)? one : two;\n  if (isFloat && isFloat2) return parseFloat(one) > parseFloat(two)? one : two;\n  if (isString && isString2) return one.localeCompare(two) > 0? one : two;\n\n  return null;\n};\n\nconst compareOneTest = [\n  [1, 2.5],\n  [1, \"2,3\"],\n  [\"5,1\", \"6\"],\n  [\"1\", 1]\n];\n\ncompareOneTest.forEach(t => {\n  const a = t[0];\n  const b = t[1];\n  console.log(`${a} ➞ ${b}`);\n  console.log(compareOne(a, b));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let num = n;\n  let sum = n;\n  while (num) {\n    if (num % 2 === 0 && sum % 2 === 0) {\n      return false;\n    }\n    if (num % 2!== 0 && sum % 2 === 0) {\n      sum -= num;\n    }\n    num = parseInt(num / 2, 10);\n  }\n  return true;\n};\n\n/*\n  Evaluate whether the given number can be written as the sum of the exact numbers 1 to n.\n  Example\n  isEqualToSumOneToN(3) == false\n  isEqualToSumOneToN(5) == true\n  isEqualToSumOneToN(8) == true\n  */\nconst isEqualToSumOneToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number can be written as the sum of the odd numbers 1 to n.\n  Example\n  isEqualToSumOdd(1) == true\n  isEqualToSumOdd(5) == false\n  isEqualToSumOdd(8) == false\n  */\nconst isEqualToSumOdd = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number can be written as the sum of the even numbers 1 to n.\n  Example\n  isEqualToSumEven(1) == true\n  isEqualToSumEven(5) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum === n;\n};\n\n/*\n  Evaluate whether the given number can be written as the sum of the odd and even numbers 1 to n.\n  Example\n  isEqualToSumOddAndEven(1) == true\n  isEqualToSumOddAndEven(5) == true\n  isEqualToSumOddAndEven(8) == false\n  */\nconst isEqualToSumOddAndEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      sum += i + 1;\n    }\n  }\n  return sum === n;\n};\n\nconst isEqualToSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nconst equalToSum = (n) => {\n  return (\n    isEqualToSum(n) &&\n    isEqualToSumOdd(n) &&\n    isEqualToSumEven(n) &&\n    isEqualToSumOddAndEven(n)\n  );\n};\n\nexport default equalToSum;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the Fibonacci\n  number of this integer.\n  */\nconst fibonacci = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of divisors of this integer.\n  */\nconst numberOfDivisors = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of palindromes of this integer.\n  */\nconst numberOfPalindromes = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of rotations of this integer.\n  */\nconst numberOfRotations = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of rotations of this integer.\n  */\nconst numberOfCycles = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of permutations of this integer.\n  */\nconst numberOfPermutations = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of combinations of this integer.\n  */\nconst numberOfCombinations = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfAbundants = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfLargestAbundant = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of perfect numbers of this integer.\n  */\nconst numberOfPerfect = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of primes of this integer.\n  */\nconst numberOfPrimes = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingIntegers = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacci = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy3 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy5 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy7 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy13 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy17 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy19 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy21 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy25 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy27 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy29 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy31 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst numberOfDividingFibonacciBy33 = (n) => {\n    //TODO: write the function\n};\n\n/*The function will receive an integer as input and should return the number\n  of abundant numbers of this integer.\n  */\nconst"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    text = text.replace(/\\s+/g, '_');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2,}/g, '-');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and returns a list of the words in the string.\n  This is accomplished by splitting the string on spaces and removing any empty strings.\n  This means that \"Hello World\" will return [\"Hello\", \"World\"]\n  */\nconst words = (text) => {\n    return text.split(/\\s+/g).filter((x) => x!== \"\");\n}\n\n/*\n  This function takes a string and replaces all spaces with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst spaces = (text) => {\n    text = text.replace(/\\s+/g, '_');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2,}/g, '-');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and replaces all underscores with spaces, and if a string has more than 2 consecutive underscores, replace all consecutive underscores with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example 1\"\n  fixSpaces(\" Example 2\") == \"Example 2\"\n  fixSpaces(\" Example   3\") == \"Example 3\"\n  */\nconst fixunderscores = (text) => {\n    text = text.replace(/_+/g,'');\n    if (text.length > 2) {\n        text = text.replace(/(_+)/g, '-');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and removes all spaces, and if a string has more than 2 consecutive spaces, removes all consecutive spaces.\n  This means that \"Example 1\" will return \"Example1\"\n  */\nconst removeSpaces = (text) => {\n    text = text.replace(/\\s+/g, '');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2,}/g, '');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and replaces all underscores with spaces, and if a string has more than 2 consecutive underscores, replaces all consecutive underscores with - fixunderscores (\"Example\") == \"Example\"\n  fixunderscores(\"Example 1\") == \"Example 1\"\n  fixunderscores(\" Example 2\") == \"Example 2\"\n  fixunderscores(\" Example   3\") == \"Example 3\"\n  */\nconst removeunderscores = (text) => {\n    text = text.replace(/_+/g,'');\n    if (text.length > 2) {\n        text = text.replace(/(_+)/g, '');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and removes all spaces, and if a string has more than 2 consecutive spaces, removes all consecutive spaces.\n  This means that \"Example 1\" will return \"Example1\"\n  */\nconst removeallspaces = (text) => {\n    text = text.replace(/\\s+/g, '');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2,}/g, '');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and removes all underscores, and if a string has more than 2 consecutive underscores, removes all consecutive underscores.\n  This means that \"Example 1\" will return \"Example1\"\n  */\nconst removeallunderscores = (text) => {\n    text = text.replace(/_+/g, '');\n    if (text.length > 2) {\n        text = text.replace(/(_+)/g, '');\n    }\n    return text;\n}\n\n/*\n  This function takes a string and replaces all spaces with underscores, and if a string has more than 2 consecutive spaces, replaces all consecutive spaces with - fixunderscores (\"Example\") == \"Example\"\n  fixunderscores(\"Example 1\") == \"Example_1\"\n  fixunderscores(\" Example 2\") == \"_Example_2\"\n  fixunderscores(\" Example   3\") == \"_Example-3\"\n  */\nconst removeallspaces = (text) => {\n    text = text.replace(/\\s+/g, '_');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2,}/g, '_');\n    }\n    return text;\n}\n\nmodule.exports = {\n    words,\n    spaces,\n    fixunderscores,\n    removeSpaces,\n    removeunderscores,\n    removeallspaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/^(.*\\.txt)$/)) {\n    return 'Yes';\n  } else if (file_name.match(/^(.*\\.exe)$/)) {\n    return 'Yes';\n  } else if (file_name.match(/^(.*\\.dll)$/)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\nconst isValidFileName = (file_name) => {\n  const file_name_check = fileNameCheck(file_name);\n  return file_name_check === 'Yes';\n}\n\nconst isValidFileName_v2 = (file_name) => {\n  const file_name_check = fileNameCheck(file_name);\n  return file_name_check === 'No';\n}\n\nconsole.log(isValidFileName(\"0.txt\"));\nconsole.log(isValidFileName(\"example.exe\"));\nconsole.log(isValidFileName(\"example.dll\"));\nconsole.log(isValidFileName(\"1example.txt\"));\nconsole.log(isValidFileName(\"2example.txt\"));\nconsole.log(isValidFileName(\"3example.txt\"));\nconsole.log(isValidFileName(\"4example.txt\"));\nconsole.log(isValidFileName(\"5example.txt\"));\nconsole.log(isValidFileName(\"6example.txt\"));\nconsole.log(isValidFileName(\"7example.txt\"));\nconsole.log(isValidFileName(\"8example.txt\"));\nconsole.log(isValidFileName(\"9example.txt\"));\nconsole.log(isValidFileName(\"10example.txt\"));\nconsole.log(isValidFileName(\"11example.txt\"));\nconsole.log(isValidFileName(\"12example.txt\"));\nconsole.log(isValidFileName(\"13example.txt\"));\nconsole.log(isValidFileName(\"14example.txt\"));\nconsole.log(isValidFileName(\"15example.txt\"));\nconsole.log(isValidFileName(\"16example.txt\"));\nconsole.log(isValidFileName(\"17example.txt\"));\nconsole.log(isValidFileName(\"18example.txt\"));\nconsole.log(isValidFileName(\"19example.txt\"));\nconsole.log(isValidFileName(\"20example.txt\"));\nconsole.log(isValidFileName(\"21example.txt\"));\nconsole.log(isValidFileName(\"22example.txt\"));\nconsole.log(isValidFileName(\"23example.txt\"));\nconsole.log(isValidFileName(\"24example.txt\"));\nconsole.log(isValidFileName(\"25example.txt\"));\nconsole.log(isValidFileName(\"26example.txt\"));\nconsole.log(isValidFileName(\"27example.txt\"));\nconsole.log(isValidFileName(\"28example.txt\"));\nconsole.log(isValidFileName(\"29example.txt\"));\nconsole.log(isValidFileName(\"30example.txt\"));\nconsole.log(isValidFileName(\"31example.txt\"));\nconsole.log(isValidFileName(\"32example.txt\"));\nconsole.log(isValidFileName(\"33example.txt\"));\nconsole.log(isValidFileName(\"34example.txt\"));\nconsole.log(isValidFileName(\"35example.txt\"));\nconsole.log(isValidFileName(\"36example.txt\"));\nconsole.log(isValidFileName(\"37example.txt\"));\nconsole.log(isValidFileName(\"38example.txt\"));\nconsole.log(isValidFileName(\"39example.txt\"));\nconsole.log(isValidFileName(\"40example.txt\"));\nconsole.log(isValidFileName(\"41example.txt\"));\nconsole.log(isValidFileName(\"42example.txt\"));\nconsole.log(isValidFileName(\"43example.txt\"));\nconsole.log(isValidFileName(\"44example.txt\"));\nconsole.log(isValidFileName(\"45example.txt\"));\nconsole.log(isValidFileName(\"46example.txt\"));\nconsole.log(isValidFileName(\"47example.txt\"));\nconsole.log(isValidFileName(\"48example.txt\"));\nconsole.log(isValidFileName(\"49example.txt\"));\nconsole.log(isValidFileName(\"50example.txt\"));\nconsole.log(isValidFileName(\"51example.txt\"));\nconsole.log(isValidFileName(\"52example.txt\"));\nconsole.log(isValidFileName(\"53example.txt\"));\nconsole.log(isValidFileName(\"54example.txt\"));\nconsole.log(isValidFileName(\"55example.txt\"));\nconsole.log(isValidFileName(\"56example.txt\"));\nconsole.log(isValidFileName(\"57example.txt\"));\nconsole.log(isValidFileName(\"58example.txt\"));\nconsole.log(isValidFileName(\"59example.txt\"));\nconsole.log(isValidFileName(\"60example.txt\"));\nconsole.log(isValidFileName(\"61example.txt\"));\nconsole.log(isValidFileName(\"62example.txt\"));\nconsole.log(isValidFileName(\"63example.txt\"));\nconsole.log(isValidFileName(\"64example.txt\"));\nconsole.log(isValidFileName(\"65example.txt\"));\nconsole.log(isValidFileName(\"66example.txt\"));\nconsole.log(is"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let i = 0\n  let sum = 0\n  lst.forEach(num => {\n    if (i % 3 === 0) {\n      sum += num * num\n    } else if (i % 4 === 0) {\n      sum += num * num * num\n    }\n    i++\n  })\n  return sum\n}\n\nconsole.log(sumSquares([1,2,3]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let s = sentence.split(' ');\n  let words = [];\n  let index = 0;\n  while (index < s.length) {\n    if (isPrime(s[index])) {\n      words.push(s[index]);\n      index++;\n    } else {\n      words.push(s[index]);\n      words.splice(index, 1);\n    }\n  }\n  return words.join(' ');\n};\n\nconst isPrime = (num) => {\n  let isPrime = false;\n  let i = 2;\n  while (!isPrime) {\n    if (i * i > num) {\n      return isPrime;\n    }\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n};\n\nconsole.log(wordsInSentence(\"This is a test\"));\nconsole.log(wordsInSentence(\"lets go for swimming\"));\nconsole.log(wordsInSentence(\"lets go for swimming\"));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const isInteger = x.match(/^\\d+$/)\n  const [numerator, denominator] = x.split('/')\n  return isInteger && numerator.length === denominator.length && n === numerator + '/' + denominator\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  nums.forEach((num, index) => {\n    if (num === 0) {\n      sorted.push(index);\n    } else {\n      while (num > 0) {\n        sorted.push(index);\n        num = num % 10;\n      }\n    }\n  });\n  return sorted;\n};\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = (number) => {\n    return number % 2 && number > 10 && number % 10 === 0 && number % 11!== 0;\n  };\n\n  const oddLastDigits = _.findLast(nums, filter);\n  const oddFirstDigits = _.findLast(nums, filter);\n\n  return oddLastDigits === oddFirstDigits? 0 : 1;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(n).keys()]\n  let result = 0\n\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result++\n        }\n      }\n    }\n  }\n\n  return result\n}\n\nexport default getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const a = (p1, p2) => {\n    const p1 = p1.toLowerCase();\n    const p2 = p2.toLowerCase();\n\n    if (p1 === p2) {\n      return (\"Earth\");\n    }\n\n    const s1 = p1.split(\" \").sort((a, b) => {\n      const a1 = a.toLowerCase();\n      const b1 = b.toLowerCase();\n\n      if (a1 < b1) {\n        return -1;\n      }\n\n      if (a1 > b1) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    const s2 = p2.split(\" \").sort((a, b) => {\n      const a2 = a.toLowerCase();\n      const b2 = b.toLowerCase();\n\n      if (a2 < b2) {\n        return -1;\n      }\n\n      if (a2 > b2) {\n        return 1;\n      }\n\n      return 0;\n    });\n\n    return (s1.concat(s2));\n  };\n\n  const bf2 = (p1, p2) => {\n    const a = (p1, p2) => {\n      const p1 = p1.toLowerCase();\n      const p2 = p2.toLowerCase();\n\n      if (p1 === p2) {\n        return (\"Earth\");\n      }\n\n      const s1 = p1.split(\" \").sort((a, b) => {\n        const a1 = a.toLowerCase();\n        const b1 = b.toLowerCase();\n\n        if (a1 < b1) {\n          return -1;\n        }\n\n        if (a1 > b1) {\n          return 1;\n        }\n\n        return 0;\n      });\n\n      const s2 = p2.split(\" \").sort((a, b) => {\n        const a2 = a.toLowerCase();\n        const b2 = b.toLowerCase();\n\n        if (a2 < b2) {\n          return -1;\n        }\n\n        if (a2 > b2) {\n          return 1;\n        }\n\n        return 0;\n      });\n\n      return (s1.concat(s2));\n    };\n\n    const bf3 = (p1, p2) => {\n      const a = (p1, p2) => {\n        const p1 = p1.toLowerCase();\n        const p2 = p2.toLowerCase();\n\n        if (p1 === p2) {\n          return (\"Earth\");\n        }\n\n        const s1 = p1.split(\" \").sort((a, b) => {\n          const a1 = a.toLowerCase();\n          const b1 = b.toLowerCase();\n\n          if (a1 < b1) {\n            return -1;\n          }\n\n          if (a1 > b1) {\n            return 1;\n          }\n\n          return 0;\n        });\n\n        const s2 = p2.split(\" \").sort((a, b) => {\n          const a2 = a.toLowerCase();\n          const b2 = b.toLowerCase();\n\n          if (a2 < b2) {\n            return -1;\n          }\n\n          if (a2 > b2) {\n            return 1;\n          }\n\n          return 0;\n        });\n\n        return (s1.concat(s2));\n      };\n\n      const bf4 = (p1, p2) => {\n        const a = (p1, p2) => {\n          const p1 = p1.toLowerCase();\n          const p2 = p2.toLowerCase();\n\n          if (p1 === p2) {\n            return (\"Earth\");\n          }\n\n          const s1 = p1.split(\" \").sort((a, b) => {\n            const a1 = a.toLowerCase();\n            const b1 = b.toLowerCase();\n\n            if (a1 < b1) {\n              return -1;\n            }\n\n            if (a1 > b1) {\n              return 1;\n            }\n\n            return 0;\n          });\n\n          const s2 = p2.split(\" \").sort((a, b) => {\n            const a2 = a.toLowerCase();\n            const b2 = b.toLowerCase();\n\n            if (a2 < b2) {\n              return -1;\n            }\n\n            if (a2 > b2) {\n              return 1;\n            }\n\n            return 0;\n          });\n\n          return (s1.concat(s2));\n        };\n\n        const bf5 = (p1, p2) => {\n          const a = (p1, p2) => {\n            const p1 = p1.toLowerCase();\n            const p2 = p2.toLowerCase();\n\n            if (p1 === p2) {\n              return (\"Earth\");\n            }\n\n            const s1 = p1.split(\" \").sort((a, b) => {\n              const a1 = a.toLowerCase();\n              const b1 = b.toLowerCase();\n\n              if (a1 < b1) {\n                return -1;\n              }\n\n              if (a1 > b1) {\n                return 1;\n              }\n\n              return 0;\n            });\n\n            const s2 = p2.split(\" \").sort((a, b) => {\n              const a2 = a.toLowerCase();\n              const b2 = b.toLowerCase();\n\n              if (a2 < b2) {\n                return -1;\n"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const map = {};\n  lst.forEach((word) => {\n    if (!map[word]) {\n      map[word] = 1;\n    } else {\n      map[word] += 1;\n    }\n  });\n\n  const sortedMap = Object.keys(map).sort((a, b) => {\n    return map[b] - map[a];\n  });\n\n  return sortedMap.map((word) => {\n    const number = map[word];\n    return `${word}${number}`;\n  });\n};\n\nconsole.log(sortedListSum([`a`, `a`, `a`, `a`, `a`, `a`, `a`, `a`]));\nconsole.log(sortedListSum([`ab`, `ab`, `ab`, `ab`, `ab`, `ab`, `ab`, `ab`]));\nconsole.log(sortedListSum([`aa`, `aa`, `aa`, `aa`, `aa`, `aa`, `aa`, `aa`]));\nconsole.log(sortedListSum([`a`, `aa`, `a`, `aaa`, `aa`, `ab`, `a`, `aa`]));\nconsole.log(sortedListSum([`aa`, `a`, `aa`, `aaa`, `aa`, `ab`, `a`, `aa`]));\nconsole.log(sortedListSum([`aa`, `a`, `aa`, `aa`, `aa`, `ab`, `a`, `aa`]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y\n  } else {\n    return x\n  }\n}\n\n/*\n  A simple program that should return the sum of the digits in x.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 56\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst sumOfDigits = (n, x, y) => {\n  const num = xOrY(n, x, y)\n  return n - (num % n)\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOf = (n, x, y) => {\n  if (n % y === 0) {\n    return x\n  } else {\n    return y\n  }\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multiplyOf = (n, x, y) => {\n  return xOrY(n, x, y) * y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst divideOf = (n, x, y) => {\n  return xOrY(n, x, y) / y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst moduloOf = (n, x, y) => {\n  return xOrY(n, x, y) % y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst divideOfThenModuloOf = (n, x, y) => {\n  return xOrY(n, x, y) / y % y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOfThenModuloOf = (n, x, y) => {\n  return xOrY(n, x, y) * y % y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOfThenDivideOf = (n, x, y) => {\n  return xOrY(n, x, y) * y / y\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOfThenMultipleOf = (n, x, y) => {\n  return xOrY(n, x, y) * x\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOfThenMultipleOfThenMultipleOf = (n, x, y) => {\n  return xOrY(n, x, y) * x * x\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  */\nconst multipleOfThenMultipleOfThenMultipleOfThenMultipleOf = (n, x, y) => {\n  return xOrY(n, x, y) * x * x * x\n}\n\n/*\n  A program that should return the value of x if n is a multiple of y and should return the value of y otherwise.\n  \n  Examples:\n  for xOrY(9, 34, 12) == 12\n  for xOrY(5, 8, 5) == 8\n  for xOrY(9, 8, 5) == 5\n  \n  "}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, x) => {\n    const nextAcc = acc + (x * x)\n    return (nextAcc % 2) === 0? nextAcc : 0\n  }, 0)\n}\n\n// -------------------------------------------------\n\n// #### doubleTheDifference([1, 3, 2, 0])\n// =>\n// 10\n\n// #### doubleTheDifference([-1, -2, 0])\n// =>\n// 0\n\n// #### doubleTheDifference([9, -2])\n// =>\n// 81\n\n// #### doubleTheDifference([0])\n// =>\n// 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    // console.log(game, guess);\n    if(game.length!== guess.length){\n        console.log(`${game.length}!= ${guess.length}`);\n        return null;\n    }\n\n    const matches = [];\n    for (let i = 0; i < game.length; i++) {\n        const max = game[i] > guess[i]? game[i] : guess[i];\n        const min = game[i] < guess[i]? game[i] : guess[i];\n\n        if (max === min) {\n            matches.push(0);\n        } else {\n            matches.push(Math.abs(max - guess[i]));\n        }\n    }\n    return matches;\n}\n\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = extensions.map(ext => ext.replace(/\\./g, ''));\n  const strength = classes.map(ext => {\n    const cap = ext.replace(/[a-z]/g, 'A').replace(/[A-Z]/g, 'a').toUpperCase();\n    const strength = (cap - ext.replace(/[a-z]/g, 'a').replace(/[A-Z]/g, 'A').toUpperCase()) / cap;\n    return strength;\n  }).reduce((prev, curr) => Math.max(prev, curr), -1);\n  const name = class_name + '.' + classes[strength];\n  return name;\n};\n\n// This test will get the strongest extension from a class.\n// This test will not get the strongest extension from an extension.\n// It will get the strongest extension from a class.\ndescribe('Strongest Extension', () => {\n  it('get the strongest extension from a class', () => {\n    expect(strongestExtension('my_class', ['AA', 'Be', 'CC'])).toEqual('my_class.AA');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArr = a.split(\"\");\n  let bArr = b.split(\"\");\n  let x = aArr.length - 1;\n  let y = bArr.length - 1;\n  let k = 0;\n  while (x >= 0 && y >= 0) {\n    if (aArr[x]!== bArr[y]) {\n      return false;\n    }\n    x--;\n    y--;\n    k++;\n    if (k === bArr.length) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/*\nGiven a string, find the longest palindromic substring in it.\n\nExample 1:\n\nInput: \"babad\"\n\nOutput: \"bab\"\n\nExplanation: The longest palindromic substring is \"bab\", which is \"bab\".\n\nExample 2:\n\nInput: \"cbbd\"\n\nOutput: \"bb\"\n\nExplanation: The longest palindromic substring is \"bb\", which is \"bb\".\n\nNote:\n\n1. The input string may contain letters other than lowercase letters, but only\n   one instance of each letter is allowed in the input string.\n2. The input string length must be in the range [1, 1000].\n3. The input string consists of lowercase letters, and its size is at most 600.\n*/\nconst longestPalindrome = (str) => {\n  let n = str.length;\n  if (n < 2) {\n    return \"\";\n  }\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(str[i]);\n  }\n  let start = 0;\n  let end = 1;\n  let max = 0;\n  while (end < n) {\n    while (end < n && arr[end] === arr[start]) {\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      start = end - 1;\n    }\n  }\n  return str.slice(start, start + max);\n};\n\nconst longestPalindrome = (str) => {\n  let n = str.length;\n  if (n < 2) {\n    return \"\";\n  }\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(str[i]);\n  }\n  let start = 0;\n  let end = 1;\n  let max = 0;\n  while (end < n) {\n    while (end < n && arr[end] === arr[start]) {\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      start = end - 1;\n    }\n  }\n  return str.slice(start, start + max);\n};\n\nconst longestPalindrome = (str) => {\n  let n = str.length;\n  if (n < 2) {\n    return \"\";\n  }\n  let arr = [];\n  for (let i = 0; i < n; i++) {\n    arr.push(str[i]);\n  }\n  let start = 0;\n  let end = 1;\n  let max = 0;\n  while (end < n) {\n    while (end < n && arr[end] === arr[start]) {\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      start = end - 1;\n    }\n  }\n  return str.slice(start, start + max);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) {\n    return [0, 1]\n  }\n  if (num === 1) {\n    return [1, 1]\n  }\n\n  let count = 0\n  let odd = true\n\n  while (num > 0) {\n    let x = num % 2\n    num = Math.floor(num / 2)\n\n    if (x === 1) {\n      odd =!odd\n    }\n\n    if (odd) {\n      count++\n    }\n  }\n\n  return [count, odd]\n}\n\n/*GReturns a tuple with a string of the number of digits in the number.\n\n   Example:\n      digitCount(-12) ==> \"1\"\n      digitCount(123) ==> \"3\"\n  */\nconst digitCount = (num) => {\n  if (num === 0) {\n    return \"0\"\n  }\n\n  let count = 0\n  let digits = []\n  while (num > 0) {\n    digits.unshift(num % 10)\n    num = Math.floor(num / 10)\n  }\n\n  while (digits.length > 0) {\n    count += digits[0]\n    digits.shift()\n  }\n\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const roman = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X', 'XI', 'XII']\n\n  const romanToNum = (roman) => {\n    const num = {\n      I: 1,\n      II: 2,\n      III: 3,\n      IV: 4,\n      V: 5,\n      VI: 6,\n      VII: 7,\n      VIII: 8,\n      IX: 9,\n      X: 10,\n      XI: 11,\n      XII: 12\n    }\n    return num[roman]\n  }\n\n  const num = number\n  let res = ''\n  while (num > 0) {\n    const temp = num % 10\n    const index = romanToNum(roman[temp])\n    res += index\n    num = Math.floor(num / 10)\n  }\n  return res.toLowerCase()\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return false;\n  }\n\n  return ((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) % (2 * Math.pow(c, 2))) === 0;\n};\n\nexport {\n  rightAngleTriangle,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  if(words.length === 1) {\n    return words[0];\n  }\n  let max = 0;\n  let maxUnique = 0;\n  let count = 0;\n  let unique = 0;\n  for(let i = 0; i < words.length; i++) {\n    let current = words[i];\n    let uniqueCharacters = 0;\n    for(let j = 0; j < current.length; j++) {\n      if(words.indexOf(current.substring(0, j + 1))!== -1) {\n        uniqueCharacters++;\n      }\n    }\n    if(uniqueCharacters > maxUnique) {\n      max = current;\n      maxUnique = uniqueCharacters;\n      count = 1;\n    } else if(uniqueCharacters === maxUnique) {\n      count++;\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const need = number - number % need\n  const needRemaining = number % need\n  const leftToEat = need - needRemaining\n\n  return [needRemaining, leftToEat]\n}\n\nconst result = eat(5, 6, 10)\n\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const size = Math.min(operator.length, operand.length)\n  let result = 0\n\n  for (let i = 0; i < size; i++) {\n    const op = operator[i]\n    const opVal = operand[i]\n\n    if (op === '+') {\n      result += opVal\n    } else if (op === '-') {\n      result -= opVal\n    } else if (op === '*') {\n      result *= opVal\n    } else if (op === '//') {\n      result //= opVal\n    } else if (op === '**') {\n      result **= opVal\n    } else {\n      throw new Error(`operator[${i}] is not valid!`)\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doArithmetic = (operator, operand) => {\n  const size = Math.min(operator.length, operand.length)\n  let result = 0\n\n  for (let i = 0; i < size; i++) {\n    const op = operator[i]\n    const opVal = operand[i]\n\n    if (op === '+') {\n      result += opVal\n    } else if (op === '-') {\n      result -= opVal\n    } else if (op === '*') {\n      result *= opVal\n    } else if (op === '//') {\n      result //= opVal\n    } else if (op === '**') {\n      result **= opVal\n    } else {\n      throw new Error(`operator[${i}] is not valid!`)\n    }\n  }\n  return result\n}\n\nconst doCalc = (operand) => {\n  const size = operand.length\n\n  if (size === 0) {\n    throw new Error(`Operand list is empty`)\n  }\n\n  if (operand[0] === '+' || operand[0] === '-') {\n    return doArithmetic(operand, operand.slice(1))\n  }\n\n  if (operand[0] === '*' || operand[0] === '/' || operand[0] === '//') {\n    return doAlgebra(operand, operand.slice(1))\n  }\n\n  return doArithmetic(operand, operand.slice(1))\n}\n\nconst doEvaluate = (operand) => {\n  let result = 0\n  const size = operand.length\n\n  if (size === 0) {\n    throw new Error(`Operand list is empty`)\n  }\n\n  if (operand[0] === '+') {\n    result = doArithmetic(operand, operand.slice(1))\n  }\n\n  if (operand[0] === '-') {\n    result = doArithmetic(operand, operand.slice(1))\n    result = -result\n  }\n\n  if (operand[0] === '*') {\n    result = doAlgebra(operand, operand.slice(1))\n  }\n\n  if (operand[0] === '/') {\n    result = doAlgebra(operand, operand.slice(1))\n    result = 1 / result\n  }\n\n  if (operand[0] === '//') {\n    result = doAlgebra(operand, operand.slice(1))\n    result = Math.floor(result)\n  }\n\n  if (operand[0] === '**') {\n    result = doAlgebra(operand, operand.slice(1))\n    result = Math.pow(result, 2)\n  }\n\n  return result\n}\n\nconst parse = (operand) => {\n  let result = []\n  const size = operand.length\n\n  if (size === 0) {\n    throw new Error(`Operand list is empty`)\n  }\n\n  if (operand[0] === '+') {\n    result = parse(operand.slice(1))\n  }\n\n  if (operand[0] === '-') {\n    result = parse(operand.slice(1))\n    result.unshift(-1)\n  }\n\n  if (operand[0] === '*') {\n    result = parse(operand.slice(1))\n  }\n\n  if (operand[0] === '/') {\n    result = parse(operand.slice(1))\n    result.unshift(1)\n  }\n\n  if (operand[0] === '//') {\n    result = parse(operand.slice(1))\n    result.unshift(Math.floor(1 / result"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i = s.length - 1;\n  while (i >= 0) {\n    if (s[i] === '#') {\n      result += s[i];\n      i--;\n    } else {\n      if (s[i] === '@') {\n        result += s[i];\n        i--;\n      } else {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n          result += s[i].toUpperCase();\n          i--;\n        } else {\n          result += s[i].toLowerCase();\n          i--;\n        }\n      }\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  if(text) {\n    md5.update(text)\n  }\n  return md5.digest('hex')\n}\n\n/*\n  Returns a random number between the two numbers you give it.\n\n  >>> randInt(10, 100)\n  */\nconst randInt = (a, b) => Math.floor(Math.random() * (b - a + 1)) + a\n\n/*\n  A helper function that will convert a hex string to an integer\n  */\nconst hexToInt = (hex) => {\n  return parseInt(hex, 16)\n}\n\n/*\n  Takes in a string and returns the md5 hash\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  This is a convenience function for finding the length of a string\n  */\nconst lengthOf = (text) => {\n  return text.length\n}\n\n/*\n  This is a convenience function for finding the min of two numbers\n  */\nconst min = (a, b) => {\n  if(a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  This is a convenience function for finding the max of two numbers\n  */\nconst max = (a, b) => {\n  if(a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  Returns a string of a random character\n  */\nconst char = () => {\n  const charSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  return charSet[randInt(0, charSet.length - 1)]\n}\n\n/*\n  Returns a random string of the given length\n  */\nconst randomString = (length) => {\n  let chars = ''\n  for(let i = 0; i < length; i++) {\n    chars += char()\n  }\n  return chars\n}\n\n/*\n  Takes in a string and returns the corresponding MD5 hash\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Returns a random number between the two numbers you give it.\n  */\nconst randInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1)) + a\n}\n\n/*\n  This is a convenience function for finding the length of a string\n  */\nconst lengthOf = (text) => {\n  return text.length\n}\n\n/*\n  This is a convenience function for finding the min of two numbers\n  */\nconst min = (a, b) => {\n  if(a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  This is a convenience function for finding the max of two numbers\n  */\nconst max = (a, b) => {\n  if(a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  Returns a string of a random character\n  */\nconst char = () => {\n  const charSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  return charSet[randInt(0, charSet.length - 1)]\n}\n\n/*\n  Returns a random string of the given length\n  */\nconst randomString = (length) => {\n  let chars = ''\n  for(let i = 0; i < length; i++) {\n    chars += char()\n  }\n  return chars\n}\n\n/*\n  Takes in a string and returns the corresponding MD5 hash\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Returns a random number between the two numbers you give it.\n  */\nconst randInt = (a, b) => {\n  return Math.floor(Math.random() * (b - a + 1)) + a\n}\n\n/*\n  This is a convenience function for finding the length of a string\n  */\nconst lengthOf = (text) => {\n  return text.length\n}\n\n/*\n  This is a convenience function for finding the min of two numbers\n  */\nconst min = (a, b) => {\n  if(a < b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  This is a convenience function for finding the max of two numbers\n  */\nconst max = (a, b) => {\n  if(a > b) {\n    return a\n  } else {\n    return b\n  }\n}\n\n/*\n  Returns a string of a random character\n  */\nconst char = () => {\n  const charSet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n  return charSet[randInt(0, charSet.length - 1)]\n}\n\n/*\n  Returns a random string of the given length\n  */\nconst randomString = (length) => {\n  let chars = ''\n  for(let i = 0; i < length; i++) {\n    chars += char()\n  }\n  return chars\n}\n\n/*\n  Takes in a string and returns the corresponding MD5 hash\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a\n  let j = b\n  let list = []\n  while (i <= j) {\n    list.push(i)\n    i += 2\n  }\n  return list\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>"}
