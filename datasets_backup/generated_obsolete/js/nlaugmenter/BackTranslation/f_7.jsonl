{"task_id": "JavaScript/0", "prompt": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check that in the given list of numbers, any two numbers are closer together than the given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const pairs = [];\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const d = Math.abs(numbers[i] - numbers[j]);\n      if (d <= threshold) {\n        pairs.push([numbers[i], numbers[j]]);\n      }\n    }\n  }\n  return pairs.length!== 0;\n};\n\nexport {hasCloseElements};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string containing multiple groups of nested brackets, the goal of which is to separate this group into separate strings and return the list of them. Separate groups are balanced (each open bracket is properly closed), not nested Ignore spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    // Check for empty string\n    if (!paren_string || paren_string.length === 0) {\n        return [];\n    }\n\n    // Split into an array of strings\n    const split_string = paren_string.split(/\\(|\\)|\\(|\\)/);\n\n    // Split each string into a list of substrings\n    const splits = split_string.map(s => s.split(/(?=\\()|(?=\\))/));\n\n    // The list of lists of substrings is the list of strings\n    return splits;\n}\n\nmodule.exports = separateParenGroups;<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_2 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_3 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_4 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\n/*\n  In the case of a positive floating point number, it can be divided into an integer part (largest integer smaller than the specified number) and decimal numbers (remaining part always smaller than 1).\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber_5 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_6 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_7 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_8 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_9 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_10 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_11 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_12 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_13 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_14 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_15 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_16 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_17 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_18 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_19 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_20 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_21 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_22 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_23 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_24 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_25 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_26 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_27 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_28 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_29 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_30 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_31 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_32 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_33 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);\n  }\n  return number;\n};\n\nconst truncateNumber_34 = (number) => {\n  if (number > 1) {\n    return Math.floor(number);"}
{"task_id": "JavaScript/3", "prompt": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You will be given a list of deposits and withdrawals into a bank account, starting with an account balance of zero. Your task is to determine if the account balance drops below zero at any point, and at that point the function should be correct again, otherwise it should be incorrect.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsLength = operations.length\n  let result = false\n\n  if (operationsLength === 0) {\n    return result\n  }\n\n  let currentOperations = operations[operationsLength - 1]\n  let currentOperationsLength = currentOperations.length\n\n  if (currentOperationsLength === 0) {\n    return result\n  }\n\n  let currentOperationsSum = 0\n  for (let i = 0; i < currentOperationsLength; i++) {\n    currentOperationsSum += currentOperations[i]\n  }\n\n  if (currentOperationsSum === 0) {\n    return result\n  }\n\n  let previousOperations = operations[operationsLength - 2]\n  let previousOperationsLength = previousOperations.length\n  let previousOperationsSum = 0\n\n  for (let i = 0; i < previousOperationsLength; i++) {\n    previousOperationsSum += previousOperations[i]\n  }\n\n  if (previousOperationsSum === 0) {\n    return result\n  }\n\n  let difference = currentOperationsSum - previousOperationsSum\n  if (difference < 0) {\n    result = true\n  }\n\n  return result\n}\n\nconsole.log(belowZero([1, 2, -4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate the mean absolute deviation around the mean value of this dataset. The mean absolute deviation is the mean absolute difference between each element and a midpoint (mean in this case): MAD = average | x - x _ mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const numbersList = Array.isArray(numbers)? numbers : [numbers];\n  const numberListLength = numbersList.length;\n\n  if (numberListLength === 0) {\n    throw new Error('Input should be a list of numbers');\n  }\n\n  let sum = 0;\n  let mean = 0;\n  let midpoint = 0;\n  for (let i = 0; i < numberListLength; i++) {\n    sum += Math.abs(numbersList[i] - mean);\n    mean += numbersList[i];\n    midpoint += (mean / numberListLength);\n  }\n  return sum / numberListLength;\n};\n\nmodule.exports = meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number \"delimeter\" between two consecutive elements of the \"Numbers\" input list.\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    const array = [];\n    let i = 0;\n    while (i < numbers.length - 1) {\n        array.push(numbers[i]);\n        i += 1;\n    }\n    array.push(numbers[i]);\n    array.push(delimeter);\n    while (i < numbers.length) {\n        array.push(numbers[i]);\n        i += 1;\n    }\n    return array;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([], 4)\n  []\n  */\nmodule.exports = intersperse;<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string representing multiple groups of nested brackets, separated by spaces. For each group, the lowest level of nesting of brackets is output. E.g. () ()) has a maximum of two levels of nesting, while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    if(!paren_string) {\n        return [0, 0];\n    }\n\n    // Get the number of levels of nesting\n    const nested_paren_string = paren_string.replace(/\\(/g, '').replace(/\\)/g, '');\n    const levels = nested_paren_string.split(')').length;\n\n    // Return the result\n    return [levels, levels + 1];\n}\n\n/*\n  This function takes in a string and returns a nested array, containing the levels of nesting for each\n  group of brackets, as well as the total number of levels of nesting.\n\n  >>> parseNestedBrackets('((()()())(())())')\n  [3, 6]\n  >>> parseNestedBrackets('(())()')\n  [2, 2]\n  >>> parseNestedBrackets('(())')\n  [1, 1]\n  >>> parseNestedBrackets('()')\n  [0, 0]\n  >>> parseNestedBrackets('()')\n  [0, 0]\n  >>> parseNestedBrackets('()')\n  [0, 0]\n  >>> parseNestedBrackets('((()()())')\n  [3, 4]\n  >>> parseNestedBrackets('((())')\n  [3, 3]\n  >>> parseNestedBrackets('((())')\n  [3, 3]\n  >>> parseNestedBrackets('((()()())')\n  [4, 5]\n  >>> parseNestedBrackets('((()())')\n  [4, 4]\n  >>> parseNestedBrackets('((()()))')\n  [4, 4]\n  >>> parseNestedBrackets('((()))')\n  [4, 3]\n  >>> parseNestedBrackets('((())')\n  [4, 3]\n  >>> parseNestedBrackets('((())')\n  [4, 3]\n  >>> parseNestedBrackets('((()()())')\n  [5, 6]\n  >>> parseNestedBrackets('((()())')\n  [5, 5]\n  >>> parseNestedBrackets('((()()))')\n  [5, 5]\n  >>> parseNestedBrackets('((()))')\n  [5, 4]\n  >>> parseNestedBrackets('((())')\n  [5, 4]\n  >>> parseNestedBrackets('((()))')\n  [5, 4]\n  >>> parseNestedBrackets('((())')\n  [5, 3]\n  >>> parseNestedBrackets('((()))')\n  [5, 3]\n  >>> parseNestedBrackets('((())')\n  [5, 3]\n  >>> parseNestedBrackets('((()))')\n  [5, 2]\n  >>> parseNestedBrackets('((()()()))')\n  [6, 7]\n  >>> parseNestedBrackets('((()()))')\n  [6, 6]\n  >>> parseNestedBrackets('((()))')\n  [6, 5]\n  >>> parseNestedBrackets('((()))')\n  [6, 5]\n  >>> parseNestedBrackets('((()))')\n  [6, 4]\n  >>> parseNestedBrackets('((())')\n  [6, 4]\n  >>> parseNestedBrackets('((()))')\n  [6, 3]\n  >>> parseNestedBrackets('((())')\n  [6, 3]\n  >>> parseNestedBrackets('((()))')\n  [6, 2]\n  >>> parseNestedBrackets('((()))')\n  [6, 2]\n  >>> parseNestedBrackets('((()))')\n  [6, 1]\n  >>> parseNestedBrackets('((()))')\n  [6, 1]\n  >>> parseNestedBrackets('((()()))')\n  [7, 8]\n  >>> parseNestedBrackets('((()()))')\n  [7, 7]\n  >>> parseNestedBrackets('((()()))')\n  [7, 7]\n  >>> parseNestedBrackets('((()()))')\n  [7, 6]\n  >>> parseNestedBrackets('((()()))')\n  [7, 6]\n  >>> parseNestedBrackets('((()()))')\n  [7, 5]\n  >>> parseNestedBrackets('((()()))')\n  [7, 5]\n  >>> parseNestedBrackets('((()()))')\n  [7, 4]\n  >>> parseNestedBrackets('((()()))')\n  [7, 4]\n  >>> parseNestedBrackets('((()()))')\n  [7, 3]\n  >>> parseNestedBrackets('((()()))')\n  [7, 3]\n  >>> parseNestedBrackets('((()()))')\n  [7, 2]\n  >>> parseNestedBrackets('((()()))')\n  [7, 2]\n  >>> parseNestedBrackets('((()()))')\n  [7, 1]\n  >>> parseNestedBrackets('((()()))')\n  [7, 1]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBrackets('((()()))')\n  [7, 0]\n  >>> parseNestedBr"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings that contain a specific substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter((string) => {\n    return string.indexOf(substring)!== -1;\n  });\n};\n\n// ## Helpers\n// ### _isNumeric_\n// Returns true if string is a numeric value\nconst _isNumeric_ = string => {\n  return!isNaN(parseFloat(string)) && isFinite(string);\n};\n\n// ### _isEmpty_\n// Returns true if string is an empty string\nconst _isEmpty_ = string => {\n  return!string || string === '' || string ==='' || string === '\\n' || string === '\\t' || string === '\\r' || string === '\\f';\n};\n\n// ### _trim_\n// Returns string without leading and trailing spaces\nconst _trim_ = string => {\n  return string.trim();\n};\n\n// ### _unescape_\n// Unescapes HTML entities\nconst _unescape_ = string => {\n  return string.replace(/&([a-z]|[0-9]|#|[xX]|[0-9]{1,5}|'|\"|\\^|\\$|\\*|\\+|\\-|\\?|\\.|\\(|\\)|\\[|\\]|\\{|\\}|\\|)+/g, function (match) {\n    const m = match.replace(/&#/g, '&').replace(/&/g, '&amp;').replace(/\\</g, '&lt;').replace(/\\>/g, '&gt;').replace(/\\'/g, '&#39;').replace(/\\\"/g, '&#34;').replace(/\\^/g, '&#98;').replace(/\\$/g, '&#36;').replace(/\\*/g, '&#42;').replace(/\\+/g, '&#43;').replace(/\\-/g, '&#45;').replace(/\\?/g, '&#47;').replace(/\\//g, '&#58;').replace(/\\(/g, '&#40;').replace(/\\)/g, '&#41;').replace(/\\[/g, '&#91;').replace(/\\]/g, '&#93;').replace(/\\{/g, '&#123;').replace(/\\}/g, '&#125;');\n    return m;\n  });\n};\n\n// ## Export\nmodule.exports = {\n  // Returns true if string is a numeric value\n  isNumeric: _isNumeric_,\n\n  // Returns true if string is an empty string\n  isEmpty: _isEmpty_,\n\n  // Returns string without leading and trailing spaces\n  trim: _trim_,\n\n  // Unescapes HTML entities\n  unescape: _unescape_\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Write a function sumProduct(numbers) that takes a list of integers as input and returns a tuple consisting of a sum and a product of all integers in a list. Empty sum should be 0 and empty product should be 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 2160)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return"}
{"task_id": "JavaScript/9", "prompt": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Generate from a given list of integers a list of rotating maximum elements found up to a certain moment in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = _.max(numbers);\n  const maxList = [];\n  let index = 0;\n  while (index < numbers.length) {\n    const list = [];\n    let i = 0;\n    while (i < max) {\n      const maxAtI = numbers[index + i];\n      if (maxAtI > max) {\n        break;\n      }\n      list.push(maxAtI);\n      i += 1;\n    }\n    if (i === max) {\n      maxList.push(list);\n      index += max;\n    }\n    else {\n      break;\n    }\n  }\n  return maxList;\n};\n\nexport { rollingMax };\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": false, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  for (let i = 0; i < string.length; i++) {\n    if (isPalindrome(string.slice(i))) {\n      prefix = string.slice(0, i);\n      suffix = string.slice(i, string.length);\n      break;\n    }\n  }\n  return prefix + suffix.split('').reverse().join('');\n}\n\nmodule.exports = {\n  isPalindrome: isPalindrome,\n  makePalindrome: makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b, consisting of only 1s and 0s. Execute binary XOR on these inputs and return the result as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n};\n\n// ------------------------------------------------\n// Tests\n\n// Tests for solution\ndescribe('#stringXor', () => {\n  it('should return correct result', () => {\n    expect(stringXor('010', '110')).toBe('100');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Returns the longest string from the list of strings. Returns the first one if there are multiple strings of the same length. Returns zero if the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return 0;\n  }\n\n  return strings.reduce((max, str) => {\n    const [strLength, maxLength] = str.match(/\\d+/g) || [0, 0];\n    return Math.max(maxLength, strLength);\n  }, 0);\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Returns the largest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n  return a;\n};\n\nconst gcd = (a, b) => {\n  while (b!== 0) {\n    const tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n  return a;\n};\n\n/**\n * Returns the number of factors of a number\n * @param {number} number\n * @returns {number}\n */\nconst numberOfFactors = (number) => {\n  let factors = 1;\n  let i;\n  let j;\n  let tmp;\n  for (i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      factors++;\n      tmp = number / i;\n      for (j = 2; j <= tmp; j++) {\n        if (tmp % j === 0) {\n          factors++;\n          tmp = tmp / j;\n        }\n      }\n    }\n  }\n  return factors;\n};\n\n/**\n * Finds the number of integers between two numbers\n * @param {number} start\n * @param {number} end\n * @returns {number}\n */\nconst numberOfIntegersBetween = (start, end) => {\n  let a = start;\n  let b = end;\n  let count = 0;\n  while (a <= end) {\n    if (a % b === 0) {\n      count++;\n    }\n    a++;\n  }\n  return count;\n};\n\n/**\n * Finds the number of positive integers between two numbers\n * @param {number} start\n * @param {number} end\n * @returns {number}\n */\nconst numberOfPositiveIntegersBetween = (start, end) => {\n  let a = start;\n  let b = end;\n  let count = 0;\n  while (a <= end) {\n    if (a % b === 0 && a > 0) {\n      count++;\n    }\n    a++;\n  }\n  return count;\n};\n\n/**\n * Finds the number of negative integers between two numbers\n * @param {number} start\n * @param {number} end\n * @returns {number}\n */\nconst numberOfNegativeIntegersBetween = (start, end) => {\n  let a = start;\n  let b = end;\n  let count = 0;\n  while (a <= end) {\n    if (a % b === 0 && a < 0) {\n      count++;\n    }\n    a++;\n  }\n  return count;\n};\n\n/**\n * Finds the number of positive integers divisible by a number\n * @param {number} number\n * @returns {number}\n */\nconst numberOfPositiveIntegersDivisibleBy = (number) => {\n  let count = 0;\n  let i;\n  let j;\n  for (i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      count++;\n      for (j = 2; j <= number / i; j++) {\n        if (number % j === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Finds the number of positive integers divisible by a number\n * @param {number} number\n * @returns {number}\n */\nconst numberOfNegativeIntegersDivisibleBy = (number) => {\n  let count = 0;\n  let i;\n  let j;\n  for (i = 2; i <= number; i++) {\n    if (number % i === 0) {\n      count++;\n      for (j = 2; j <= number / i; j++) {\n        if (number % j === 0 && number < 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/**\n * Finds the number of negative integers divisible by a number\n * @param {number} number\n * @returns {number}\n */\nconst numberOfNegativeIntegersNotDivisibleBy = (number) => {\n  let count = 0;\n  let i;\n  let j;\n  for (i = 2; i <= number; i++) {\n    if (number % i === 0 && number < 0) {\n      count++;\n      for (j = 2; j <= number / i; j++) {\n        if (number % j === 0) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  greatestCommonDivisor,\n  gcd,\n  numberOfFactors,\n  numberOfIntegersBetween,\n  numberOfPositiveIntegersBetween,\n  numberOfNegativeIntegersBetween,\n  numberOfPositiveIntegersDivisibleBy,\n  numberOfNegativeIntegersDivisibleBy,\n  numberOfNegativeIntegersNotDivisibleBy,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Returns a list of all prefixes from the shortest to the longest of the input strings\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  const stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    prefixes.push(string.slice(0, i + 1));\n  }\n  return prefixes;\n};\n\n/* Returns a list of all suffixes from the shortest to the longest of the input strings\n  >>> allSuffixes('abc')\n  ['b', 'c', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  const stringLength = string.length;\n  for (let i = 0; i < stringLength; i++) {\n    suffixes.push(string.slice(i));\n  }\n  return suffixes;\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings\n  >>> allPrefixesAndSuffixes('abc')\n  [['a', 'ab', 'abc'], ['b', 'c', 'abc']]\n  */\nconst allPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes];\n};\n\n/* Returns a list of the longest prefix of the input strings\n  >>> longestPrefix('abc')\n  ['a', 'ab', 'abc']\n  */\nconst longestPrefix = (string) => {\n  const prefixes = allPrefixes(string);\n  return prefixes[prefixes.length - 1];\n};\n\n/* Returns a list of the longest suffix of the input strings\n  >>> longestSuffix('abc')\n  ['c', 'abc']\n  */\nconst longestSuffix = (string) => {\n  const suffixes = allSuffixes(string);\n  return suffixes[suffixes.length - 1];\n};\n\n/* Returns a list of the longest prefix and suffix of the input strings\n  >>> longestPrefixAndSuffix('abc')\n  [['a', 'ab', 'abc'], ['c', 'abc']]\n  */\nconst longestPrefixAndSuffix = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes[prefixes.length - 1], suffixes[suffixes.length - 1]];\n};\n\n/* Returns a list of the longest prefix and suffix of the input strings and their length\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixAndSuffixLength = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes[prefixes.length - 1], suffixes[suffixes.length - 1], string.length];\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixAndSuffixLengths = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes[prefixes.length - 1], suffixes[suffixes.length - 1], string.length];\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings and their length\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixesAndSuffixes = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes, string.length];\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings and their length\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixesAndSuffixLengths = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes, string.length];\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings and their length\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixesAndSuffixLengthsWithLength = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes, string.length];\n};\n\n/* Returns a list of all prefixes and suffixes of the input strings and their length\n  >>> longestPrefixAndSuffixLength('abc')\n  [['a', 3], ['c', 3]]\n  */\nconst longestPrefixesAndSuffixLengthsWithLengths = (string) => {\n  const prefixes = allPrefixes(string);\n  const suffixes = allSuffixes(string);\n  return [prefixes, suffixes, string.length];\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allPrefixesAndSuffixes,\n  longestPrefix,\n  longestSuffix,\n  longestPrefixAndSuffix,\n  longestPrefixAndSuffixLength,\n  longestPrefixAndSuffixLengths,\n  longestPrefixAndSuffixLengthsWithLength,\n  longestPrefixAndSuffixLengthsWithLengths,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Returns a string containing spaces from 0 to n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s +='';\n  }\n  return s;\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Find out how many different characters a string consists of (regardless of the case).\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr] = (prev[curr] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithLowerCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithUpperCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithLowerCaseAndUpperCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\nconst countDistinctCharactersWithLowerCaseAndUpperCaseAndCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithAllCases = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\n/*\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  >>> countDistinctCharacters('JERRY')\n  2\n  >>> countDistinctCharacters('jerry')\n  3\n  */\nconst countDistinctCharactersWithLowerCaseAndUpperCaseAndCase = (string) => {\n    return string.split('').reduce((prev, curr) => {\n        prev[curr.toUpperCase()] = (prev[curr.toUpperCase()] || 0) + 1;\n        prev[curr.toLowerCase()] = (prev[curr.toLowerCase()] || 0) + 1;\n        return prev;\n    }, {});\n};\n\nmodule.exports = {\n    countDistinctCharacters,\n    countDistinctCharactersWithLowerCase,\n    countDistinctCharactersWithUpperCase,\n    countDistinctCharactersWithCase,\n    countDistinctCharactersWithLowerCaseAndUpperCase,\n    countDistinctCharactersWithLowerCaseAndUpperCaseAndCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Entering this function is a string that represents notes in a special ASCII format. Your task is to analyze this string and return a list of integers corresponding to the number of beats each one does not hold. Here's a legend: \"o\" - whole note, takes four beats \"o | '- half note, takes two beats.\"\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const beat_times = music_string.split(\" \")\n  const beats = beat_times.map((string) => {\n    let beats = 0\n    const strings = string.split(\"|\")\n    const notes = strings.map((string) => {\n      const note = string.split(\" \")\n      if (note[0] === 'o') {\n        beats += 4\n      } else if (note[0] === '|') {\n        beats += 2\n      }\n      return parseInt(note[1])\n    })\n    return beats\n  })\n  return beats\n}\n\n/**\n  * @param {string} input\n  * @return {number}\n  */\nconst beat = (input) => {\n  const music = parseMusic(input)\n  const beats = music.filter((item) => item > 0)\n  return beats.length\n}\n\n// console.log(beat(\"o o|.| o| o|.|.|.|.| o o\"))\n// console.log(beat(\"o o|.| o| o|.|.|.|.| o o\"))\n// console.log(beat(\"o o|.| o| o|.|.|.|.| o o\"))\n\n/**\n * @param {string} input\n * @return {number}\n */\nconst tempo = (input) => {\n  const music = parseMusic(input)\n  const beats = music.filter((item) => item > 0)\n  return beats.length\n}\n\n// console.log(tempo(\"o o|.| o| o|.|.|.|.| o o\"))\n// console.log(tempo(\"o o|.| o| o|.|.|.|.| o o\"))\n// console.log(tempo(\"o o|.| o| o|.|.|.|.| o o\"))\n\nmodule.exports = {\n  beat,\n  tempo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find out how often a particular substring can be found in the original string. Count overlapping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string.length === 0) {\n    return 0;\n  }\n\n  const stringLength = string.length;\n  const substringLength = substring.length;\n\n  const lastIndex = stringLength - substringLength;\n\n  const matchFound = string.match(substring);\n  const matchCount = matchFound? matchFound.length : 0;\n\n  if (matchFound) {\n    for (let i = 0; i < matchCount; i++) {\n      const matchStart = matchFound[i].index;\n      const overlapStart = matchStart < lastIndex? matchStart + 1 : matchStart;\n      const overlapEnd = overlapStart + substringLength - 1;\n\n      if (string.charAt(overlapStart) === substring.charAt(0)) {\n        return 1 + howManyTimes(string.slice(overlapStart + 1), substring.slice(1));\n      }\n    }\n  }\n\n  return matchCount;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a sequence of numbers delimited by spaces from \"zero\" to \"nine.\" Valid options are \"zero,\" \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight\" and \"nine.\"\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const splitNumbers = numbers.split(' ');\n    const sortedNumbers = splitNumbers.sort((a, b) => a - b);\n    return sortedNumbers.join(' ');\n};\n\n/*\n  Exercise 5\n  */\nconst sortLetters = (words) => {\n    const splitWords = words.split(' ');\n    const sortedWords = splitWords.sort((a, b) => a.toLowerCase() > b.toLowerCase()? 1 : -1);\n    return sortedWords.join(' ');\n};\n\n/*\n  Exercise 6\n  */\nconst isPalindrome = (str) => {\n    let reversedString = '';\n    for (let i = str.length - 1; i >= 0; i--) {\n        reversedString += str[i];\n    }\n    return str === reversedString;\n};\n\n/*\n  Exercise 7\n  */\nconst hasDuplicate = (str) => {\n    const splitStr = str.split(' ');\n    const set = new Set(splitStr);\n    return set.size > 1;\n};\n\n/*\n  Exercise 8\n  */\nconst hasDuplicateInTheMiddle = (str) => {\n    const splitStr = str.split(' ');\n    const set = new Set(splitStr);\n    const middle = splitStr[Math.floor(splitStr.length / 2)];\n    return set.has(middle);\n};\n\n/*\n  Exercise 9\n  */\nconst hasDuplicateAtEnd = (str) => {\n    const splitStr = str.split(' ');\n    const set = new Set(splitStr);\n    const last = splitStr[splitStr.length - 1];\n    return set.has(last);\n};\n\n/*\n  Exercise 10\n  */\nconst hasAllLetters = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    return allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 11\n  */\nconst hasNumbers = (str) => {\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 12\n  */\nconst hasLetters = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    return allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 13\n  */\nconst hasNumbersOrLetters = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allLetters.indexOf(str)!== -1 || allNumbers.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 14\n  */\nconst hasLettersAndNumbers = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allLetters.indexOf(str)!== -1 && allNumbers.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 15\n  */\nconst hasAllNumbersAndLetters = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1 && allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 16\n  */\nconst hasAllNumbersAndLettersOrSpaces = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1 || allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 17\n  */\nconst hasAllLettersAndNumbers = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1 && allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 18\n  */\nconst hasAllLettersAndNumbersOrSpaces = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1 || allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 19\n  */\nconst hasAllLettersOrNumbers = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allLetters.indexOf(str)!== -1 || allNumbers.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 20\n  */\nconst hasAllLettersOrNumbersOrSpaces = (str) => {\n    const allLetters = 'abcdefghijklmnopqrstuvwxyz';\n    const allNumbers = '0123456789';\n    return allNumbers.indexOf(str)!== -1 || allLetters.indexOf(str)!== -1;\n};\n\n/*\n  Exercise 21\n  */\nconst hasDuplicateInTheMiddleAndEnd = (str) => {\n    const splitStr = str.split(' ');\n    const set = new Set(splitStr);\n    const last = splitStr[splitStr.length - 1];\n    const middle = splitStr[Math.floor(splitStr.length / 2)];\n    return set.has(middle) && set.has(last);\n};\n\n/*\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a list of numbers (with a length of at least two) select and return two numbers closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  let smallestIndex = 0;\n  let largestIndex = 0;\n\n  // Loop through all elements in the array, find the smallest one, and find the largest one\n  // and save them.\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n      smallestIndex = i;\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n      largestIndex = i;\n    }\n  }\n  return [smallest, largest];\n}\n\n//# sourceMappingURL=findClosestElements.js.map<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  if (numbers.length < 2) {\n    return numbers;\n  }\n  const max = numbers[numbers.length - 1];\n  const min = numbers[0];\n  const minMultiplier = max / min;\n  return [\n    minMultiplier * numbers[0],\n    minMultiplier * numbers[1],\n   ...numbers.slice(2),\n  ];\n};\n\n/* Given a list of numbers (consisting of at least two elements), apply a linear transformation to this list so that the smallest number becomes 0 and the largest becomes 1.\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  if (numbers.length < 2) {\n    return numbers;\n  }\n  const max = numbers[numbers.length - 1];\n  const min = numbers[0];\n  const minMultiplier = max / min;\n  return [\n    minMultiplier * numbers[0],\n    minMultiplier * numbers[1],\n   ...numbers.slice(2),\n  ];\n};\n\nexport { rescaleToUnit, rescaleToUnit2 };\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filters the specified list of arbitrary Python values for integers only\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(isInteger)\n}\n\n/* Filters the specified list of arbitrary Python values for floats only\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(isFloat)\n}\n\n/* Filters the specified list of arbitrary Python values for floats only\n  >>> filterFloats(['a', 3.14, 5])\n  [3.14]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(isString)\n}\n\n/* Filters the specified list of arbitrary Python values for strings only\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '3.14']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter(isObject)\n}\n\n/* Filters the specified list of arbitrary Python values for lists only\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values.filter(isList)\n}\n\n/* Filters the specified list of arbitrary Python values for dicts only\n  >>> filterDicts(['a', 3.14, 5])\n  [5]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  return values.filter(isDict)\n}\n\n/* Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter(isNumber)\n}\n\n/* Filters the specified list of arbitrary Python values for numbers only\n  >>> filterNumbers(['a', 3.14, 5])\n  [3.14]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(isBoolean)\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterBooleans(['a', 3.14, 5])\n  [True, True, True]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNone = (values) => {\n  return values.filter(isNone)\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterNone(['a', 3.14, 5])\n  []\n  >>> filterNone([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  return values\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterAll(['a', 3.14, 5])\n  [True, True, True]\n  >>> filterAll([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterTrue = (values) => {\n  return values.filter(isTrue)\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterTrue(['a', 3.14, 5])\n  []\n  >>> filterTrue([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFalse = (values) => {\n  return values.filter(isFalse)\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterFalse(['a', 3.14, 5])\n  [False, False, False]\n  >>> filterFalse([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAny = (values) => {\n  return values.filter(isAny)\n}\n\n/* Filters the specified list of arbitrary Python values for booleans only\n  >>> filterAny(['a', 3.14, 5])\n  [True, True, True]\n  >>> filterAny([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNone = (values) => {\n  return values.filter(isNone)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Returns the length of the given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const length = string.length\n  let index = 0\n  while (index < length) {\n    if (string[index] === 0) {\n      return index\n    }\n    index++\n  }\n  return index\n}\n\n/* Returns the length of the given string\n  >>> strlen('ab')\n  2\n  >>> strlen('a')\n  1\n  >>> strlen('abc')\n  3\n  >>> strlen('a')\n  1\n  */\nconst strlen2 = (string) => {\n  const length = string.length\n  let index = 0\n  while (index < length) {\n    if (string[index] === 0) {\n      return index\n    }\n    index++\n  }\n  return index\n}\n\n/* Returns the number of occurences of a character in a string\n  >>> strcount('abc', 'a')\n  2\n  >>> strcount('abc', 'x')\n  0\n  >>> strcount('abc', 'x', 0, 3)\n  1\n  >>> strcount('abc', 'x', 0, 3)\n  1\n  >>> strcount('abc', 'x', 0, 3, 4)\n  0\n  */\nconst strcount = (string, character, start = 0, end = strlen(string)) => {\n  let index = start\n  let count = 0\n  while (index < end) {\n    if (string[index] === character) {\n      count++\n    }\n    index++\n  }\n  return count\n}\n\n/* Returns a copy of the string with spaces in the beginning and end\n  >>> strpad('abc', 3)\n 'abc '\n  >>> strpad('abc', 3, '_')\n  '_abc_'\n  */\nconst strpad = (string, length, pad = '') => {\n  if (length < strlen(string)) {\n    throw new Error('Length is not enough to pad string')\n  }\n  return pad + string + pad\n}\n\n/* Returns a copy of the string with spaces in the beginning and end\n  >>> strpad('abc', 3, '_')\n  '_abc_'\n  >>> strpad('abc', 3, '_', '_')\n  '_abc_'\n  */\nconst strpad2 = (string, length, pad = '_') => {\n  if (length < strlen2(string)) {\n    throw new Error('Length is not enough to pad string')\n  }\n  return pad + string + pad\n}\n\n/* Returns a copy of the string with spaces in the beginning and end\n  >>> strpad('abc', 3, '_', '_')\n  '_abc_'\n  >>> strpad('abc', 3, '_', '_','')\n  '_abc_'\n  >>> strpad('abc', 3, '_', '_', '_','')\n  '_abc_'\n  */\nconst strpad3 = (string, length, pad = '_', space ='') => {\n  if (length < strlen3(string)) {\n    throw new Error('Length is not enough to pad string')\n  }\n  return pad + string + pad + space + string + pad\n}\n\n/* Returns a copy of the string with spaces in the beginning and end\n  >>> strpad('abc', 3, '_', '_','')\n  '_abc_'\n  >>> strpad('abc', 3, '_', '_', '_','')\n  '_abc_'\n  >>> strpad('abc', 3, '_', '_', '_', '_','')\n  '_abc_'\n  */\nconst strpad4 = (string, length, pad = '_', space = '_', dash = '-') => {\n  if (length < strlen4(string)) {\n    throw new Error('Length is not enough to pad string')\n  }\n  return pad + string + pad + space + string + pad + dash + string + pad\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* Find for a given number n the largest number dividing n equally, less than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = Math.floor(n / 2)\n  while (n % maxDivisor!== 0) {\n    maxDivisor = Math.floor(n / maxDivisor)\n  }\n  return maxDivisor\n}\n\n/* Find for a given number n the smallest number, dividing n evenly, more than n\n  >>> smallestDivisor(15)\n  3\n  */\nconst smallestDivisor = (n) => {\n  let minDivisor = Math.floor(n / 2)\n  while (n % minDivisor === 0) {\n    minDivisor = Math.floor(n / minDivisor)\n  }\n  return minDivisor\n}\n\n/* Find the sum of the squares of the first n numbers, from 1 to n\n  >>> sumOfSquares(5)\n  25\n  */\nconst sumOfSquares = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n odd numbers, from 1 to n\n  >>> sumOfSquaresOdd(5)\n  25\n  */\nconst sumOfSquaresOdd = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n even numbers, from 1 to n\n  >>> sumOfSquaresEven(5)\n  25\n  */\nconst sumOfSquaresEven = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 1) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of 3, from 1 to n\n  >>> sumOfSquaresMultiple(5)\n  225\n  */\nconst sumOfSquaresMultiple = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of 5, from 1 to n\n  >>> sumOfSquaresMultiple(5)\n  625\n  */\nconst sumOfSquaresMultiple5 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 5 === 0) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 3 and 5, from 1 to n\n  >>> sumOfSquaresMultiple3and5(5)\n  375\n  */\nconst sumOfSquaresMultiple3and5 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 3 and 5, from 1 to n\n  >>> sumOfSquaresMultiple3and5(5)\n  375\n  */\nconst sumOfSquaresMultiple5and3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 5 and 3, from 1 to n\n  >>> sumOfSquaresMultiple3and5(5)\n  375\n  */\nconst sumOfSquaresMultiple5and3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 5 and 3, from 1 to n\n  >>> sumOfSquaresMultiple5and3(5)\n  375\n  */\nconst sumOfSquaresMultiple3and5and7 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0) && (i % 7 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 5 and 3, from 1 to n\n  >>> sumOfSquaresMultiple5and3(5)\n  375\n  */\nconst sumOfSquaresMultiple3and5and13 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0) && (i % 13 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 3 and 5, from 1 to n\n  >>> sumOfSquaresMultiple3and5(5)\n  375\n  */\nconst sumOfSquaresMultiple3and5and37 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0) && (i % 37 === 0)) {\n      sum += i * i\n    }\n  }\n  return sum\n}\n\n/* Find the sum of the squares of the first n multiples of both 3 and 5, from 1 to n\n  >>> sumOfSquaresMultiple3and5(5)\n  375\n  */\nconst sumOfSquaresMultiple3and5and17 = (n) => {\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Returns the prime factors of a given integer in order from the smallest to the largest. Each of these factors should be listed as often as it occurs in the factorization. Input number should correspond to the product of all factors.\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  let factor = 2\n  while (n > 1) {\n    if (n % factor === 0) {\n      factors.push(factor)\n      n = n / factor\n    } else {\n      factor = factor + 1\n    }\n  }\n  return factors\n}\n\nmodule.exports = factorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Remove from a list of integers all elements that occur more than once, and leave the order of the elements the same as when you entered them.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const newArray = []\n  let index = 0\n  let hasFound = false\n  for (let i = 0; i < numbers.length; i++) {\n    if (!hasFound) {\n      if (numbers[i]!== undefined) {\n        newArray.push(numbers[i])\n        hasFound = true\n      }\n    } else {\n      if (numbers[i] === numbers[index]) {\n        index++\n      } else {\n        newArray.push(numbers[i])\n      }\n    }\n  }\n  return newArray\n}\n\nexport default removeDuplicates\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* Flip lowercase letters to uppercase letters and uppercase letters to lowercase letters.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  if (typeof string!=='string') throw new TypeError('Expected a string');\n  let res = '';\n  for (let i = 0; i < string.length; i++) {\n    res += string[i].toUpperCase() === string[i].toLowerCase()? string[i].toLowerCase() : string[i].toUpperCase();\n  }\n  return res;\n};\n\nmodule.exports = flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Merge List of Strings into a Single String\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n// Merge two lists into a single list\nconst merge = (list1, list2) => {\n  let list = [];\n  for (let i = 0; i < list1.length; i++) {\n    list.push(list1[i]);\n  }\n  for (let i = 0; i < list2.length; i++) {\n    list.push(list2[i]);\n  }\n  return list;\n};\n\n// Sort a list\nconst sort = (list) => {\n  return list.sort();\n};\n\n// Concatenate two lists\nconst concatenateLists = (list1, list2) => {\n  let list = [];\n  for (let i = 0; i < list1.length; i++) {\n    list.push(list1[i]);\n  }\n  for (let i = 0; i < list2.length; i++) {\n    list.push(list2[i]);\n  }\n  return list;\n};\n\nmodule.exports = {\n  concatenate,\n  merge,\n  sort,\n  concatenateLists\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for strings starting with a certain prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let res = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      res.push(strings[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  * Filter an input list of strings only for strings starting with a certain prefix\n  * and ending with a certain postfix.\n  * @param  {Array} strings List of strings to filter.\n  * @param  {String} prefix  Prefix for the filter.\n  * @param  {String} postfix Postfix for the filter.\n  * @return {Array}        List of strings after filtering.\n  *\n  * @example\n  *\n  * filterByPrefixAndPostfix([], 'a', '')\n  * // => []\n  *\n  * filterByPrefixAndPostfix(['abc', 'bcd', 'cde', 'array'], 'a', '')\n  * // => ['abc', 'array']\n  *\n  * filterByPrefixAndPostfix(['abc', 'bcd', 'cde', 'array'], 'a', 'de')\n  * // => ['abc', 'array']\n  */\nconst filterByPrefixAndPostfix = (strings, prefix, postfix) => {\n  let res = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix) && strings[i].endsWith(postfix)) {\n      res.push(strings[i]);\n    }\n  }\n  return res;\n};\n\n/**\n  * Remove duplicate strings from an input list of strings.\n  * @param  {Array} strings List of strings to remove duplicates from.\n  * @return {Array}        List of strings without duplicates.\n  *\n  * @example\n  *\n  * removeDuplicates([])\n  * // => []\n  *\n  * removeDuplicates(['a', 'b', 'a', 'c'])\n  * // => ['a', 'b', 'c']\n  *\n  * removeDuplicates(['a', 'b', 'a', 'b'])\n  * // => ['a', 'b']\n  */\nconst removeDuplicates = (strings) => {\n  let res = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (res.indexOf(strings[i]) === -1) {\n      res.push(strings[i]);\n    }\n  }\n  return res;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterByPrefixAndPostfix,\n  removeDuplicates\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RThe list contains only positive numbers.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is a prime number and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2)\n    if (n % i === 0) return false\n  return true\n}\n\n/*\n  >>> isPrime(12)\n  true\n  >>> isPrime(15)\n  false\n  >>> isPrime(24)\n  true\n  >>> isPrime(42)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(500)\n  false\n  >>> isPrime(3)\n  false\n  >>> isPrime(2)\n  true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": false, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const maxCoefficient = Math.max(...xs.map(x => Math.abs(x)));\n  if (maxCoefficient === 0) {\n    return 0;\n  }\n\n  const numberOfCoefficients = xs.length;\n  const half = Math.floor(numberOfCoefficients / 2);\n  const middle = xs.slice(half);\n  const halfOfFirst = xs.slice(0, half);\n  const first = [1,...halfOfFirst];\n  const middleOfFirst = [...middle, 1,...halfOfFirst];\n  const second = [1,...middleOfFirst, 1,...halfOfFirst];\n\n  // xs[0] * (x^halfOfFirst + x^second) = 0\n  const firstCoefficient = [\n    xs[0],\n    poly(...halfOfFirst,...second),\n    poly(...halfOfFirst,...first)\n  ];\n  const secondCoefficient = [\n    poly(...halfOfFirst,...first),\n    xs[0],\n    poly(...halfOfFirst,...first)\n  ];\n  const firstResult = poly(...firstCoefficient);\n  const secondResult = poly(...secondCoefficient);\n\n  const firstZero = firstResult === 0? first : null;\n  const secondZero = secondResult === 0? second : null;\n  return [...first, firstZero,...second, secondZero];\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst findRoot = (xs, x) => {\n  let last = xs[0];\n  let i = 1;\n  let k = xs.length;\n  while (i < k) {\n    const current = xs[i];\n    const next = xs[i + 1];\n    const mid = (last + next) / 2;\n    if (poly(...xs, mid) === 0) {\n      return mid;\n    } else if (poly(...xs, mid) < 0) {\n      last = mid;\n    } else {\n      i += 2;\n    }\n  }\n  return last;\n}\n\nexport default {\n  poly,\n  findZero,\n  findRoot\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in indices that are not divisible by three, while its values for indices divisible by three correspond to the values of the corresponding indices of l but are sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l except that it has all the elements of l' sorted in ascending order.\n  >>> sortFirst([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortFirst([3, 5, 8, 4, 2, 9, 1])\n  [3, 5, 8, 4, 2, 9, 1]\n  >>> sortFirst([5, 8, 9, 2, 1, 4, 3])\n  [1, 2, 3, 4, 5, 8, 9, 2]\n  */\nconst sortFirst = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l except that it has all the elements of l' sorted in descending order.\n  >>> sortLast([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortLast([3, 5, 8, 4, 2, 9, 1])\n  [1, 2, 3, 4, 5, 8, 9, 2]\n  >>> sortLast([5, 8, 9, 2, 1, 4, 3])\n  [5, 8, 9, 2, 3, 4, 1, 2]\n  */\nconst sortLast = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l except that it has all the elements of l' sorted in descending order.\n  >>> sortDesc([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortDesc([3, 5, 8, 4, 2, 9, 1])\n  [1, 2, 3, 4, 5, 8, 9, 2]\n  >>> sortDesc([5, 8, 9, 2, 1, 4, 3])\n  [5, 8, 9, 2, 3, 4, 1, 2]\n  */\nconst sortDesc = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l except that it has all the elements of l' sorted in ascending order.\n  >>> sortAsc([5, 6, 3, 4, 8, 9, 2])\n  [5, 6, 3, 4, 8, 9, 2]\n  >>> sortAsc([3, 5, 8, 4, 2, 9, 1])\n  [3, 5, 8, 4, 2, 9, 1]\n  >>> sortAsc([5, 8, 9, 2, 1, 4, 3])\n  [5, 8, 9, 2, 3, 4, 1, 2]\n  */\nconst sortAsc = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\n/*Tits function takes a list l and returns a list l' that is identical to l except that it has all the elements of l' sorted in ascending order.\n  >>> sortDsc([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  >>> sortDsc([3, 5, 8, 4, 2, 9, 1])\n  [1, 2, 3, 4, 5, 8, 9, 2]\n  >>> sortDsc([5, 8, 9, 2, 1, 4, 3])\n  [5, 8, 9, 2, 3, 4, 1, 2]\n  */\nconst sortDsc = (l) => {\n  const ret = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      ret.push(l[i]);\n    }\n  }\n  return ret;\n};\n\nmodule.exports = {\n  sortFirst,\n  sortLast,\n  sortThird,\n  sortAsc,\n  sortDsc\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique items in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniq = []\n  const len = l.length\n  for (let i = 0; i < len; i++) {\n    const val = l[i]\n    const index = uniq.indexOf(val)\n    if (index === -1) {\n      uniq.push(val)\n    }\n  }\n  return uniq\n}\n\n/**\n  # Return the max value in a list\n  >>> max([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  9\n  >>> max([])\n  N/A\n  >>> max([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst max = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return Math.max.apply(Math, l)\n}\n\n/**\n  # Return the min value in a list\n  >>> min([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  0\n  >>> min([])\n  N/A\n  >>> min([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst min = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return Math.min.apply(Math, l)\n}\n\n/**\n  # Return the mean value in a list\n  >>> mean([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4.25\n  >>> mean([])\n  N/A\n  >>> mean([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst mean = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return sum(l) / l.length\n}\n\n/**\n  # Return the median value in a list\n  >>> median([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  4.0\n  >>> median([])\n  N/A\n  >>> median([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return median.select(l)\n}\n\n/**\n  # Return the mode value in a list\n  >>> mode([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  3\n  >>> mode([])\n  N/A\n  >>> mode([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  const map = {}\n  l.forEach((val) => {\n    if (map[val] === undefined) {\n      map[val] = 1\n    } else {\n      map[val]++\n    }\n  })\n  const max = max(Object.keys(map).map((key) => map[key]))\n  return max\n}\n\n/**\n  # Return the standard deviation value in a list\n  >>> std([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  2.0\n  >>> std([])\n  N/A\n  >>> std([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst std = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  const mean = mean(l)\n  const sum = sum(l)\n  const devSum = sum(l) - sum(l) / l.length\n  return Math.sqrt(devSum / (l.length - 1))\n}\n\n/**\n  # Return the sum of a list\n  >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  15\n  >>> sum([])\n  N/A\n  >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  N/A\n  */\nconst sum = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return l.reduce((sum, val) => sum + val, 0)\n}\n\n/**\n  # Return the sorted list\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 3, 5, 5, 9, 123]\n  >>> sorted([])\n  []\n  >>> sorted([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined])\n  []\n  */\nconst sorted = (l) => {\n  const sorted = l.sort()\n  return unique(sorted)\n}\n\n/**\n  # Return the top values in a list\n  >>> top([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  [9, 5, 5]\n  >>> top([], 3)\n  []\n  >>> top([5, 3, 5, 2, 3, 3, 9, 0, 123, null, undefined], 3)\n  []\n  */\nconst top = (l, n) => {\n  if (l.length === 0) {\n    return []\n  }\n  const sorted = l.sort()\n  const top = sorted.slice(0, n)\n  return top\n}\n\nmodule.exports = {\n  max,\n  min,\n  mean,\n  median,\n  mode,\n  std,\n  sum,\n  sorted,\n  top\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Rreturns the maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = 0;\n  let current = 0;\n  l.forEach((element) => {\n    if (element > max) {\n      max = element;\n    }\n    if (element > current) {\n      current = element;\n    }\n  });\n  return current;\n};\n\n/*Rreturns the minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = 0;\n  let current = 0;\n  l.forEach((element) => {\n    if (element < min) {\n      min = element;\n    }\n    if (element < current) {\n      current = element;\n    }\n  });\n  return current;\n};\n\n/*Rreturns the sum of all the elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst sum = (l) => {\n  let sum = 0;\n  l.forEach((element) => {\n    sum += element;\n  });\n  return sum;\n};\n\n/*Rreturns the average of all the elements in the list.\n  >>> average([1, 2, 3])\n  2\n  >>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  5.4\n  */\nconst average = (l) => {\n  let sum = 0;\n  l.forEach((element) => {\n    sum += element;\n  });\n  return sum / l.length;\n};\n\n/*Rreturns the median of all the elements in the list.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  */\nconst median = (l) => {\n  let median = sum(l) / 2;\n  let elements = [];\n  l.forEach((element) => {\n    if (element < median) {\n      elements.push(element);\n    }\n  });\n  elements.push(median);\n  let length = elements.length;\n  if (length % 2 === 1) {\n    return elements[Math.floor(length / 2)];\n  } else {\n    return (elements[Math.floor(length / 2 - 1)] + elements[Math.floor(length / 2)]) / 2;\n  }\n};\n\nmodule.exports = {\n  minElement,\n  maxElement,\n  sum,\n  average,\n  median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Rindicates how often the digit 7 appears in integers smaller than n, which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    return (n === 1)? \"1\" : (n % 5 === 0 && n % 7 === 0)? \"7\" : (n % 3 === 0)? \"11\" : (n % 2 === 0)? \"13\" : n;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*Tits function takes a list l and returns a list l'so that l' is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = []\n  const odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [even, odd]\n}\n\n// ##Exercises\n// 1. Use `sortEven` to sort `[1, 2, 3]` into `[1, 2, 3]` and `[3, 2, 1]`\n// 2. Use `sortEven` to sort `[5, 6, 3, 4]` into `[3, 6, 5, 4]` and `[4, 5, 6, 3]`\n// 3. Use `sortEven` to sort `[3, 4, 2, 6, 7, 9, 8, 1, 5, 0]` into `[3, 4, 2, 6, 7, 9, 8, 1, 5, 0]` and `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n// 4. Use `sortEven` to sort `[2, 1, 5, 3, 4, 6, 0, 9, 7, 8]` into `[2, 1, 5, 3, 4, 6, 0, 9, 7, 8]` and `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n// 5. Use `sortEven` to sort `[3, 4, 2, 6, 7, 9, 8, 1, 5, 0]` into `[3, 4, 2, 6, 7, 9, 8, 1, 5, 0]` and `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n// 6. Use `sortEven` to sort `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]` into `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]` and `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`\n\n// ####What is the difference between `sortEven` and `sortOdd`?\n// `sortEven` takes a list and returns a list of the same length that l is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n// `sortOdd` takes a list and returns a list of the same length that l is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n// ####Exercise:\n// `sortEven([1, 2, 3])`\n// `sortEven([5, 6, 3, 4])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([2, 1, 5, 3, 4, 6, 0, 9, 7, 8])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])`\n\n// ####What is the difference between `sortEven` and `sortOdd`?\n// `sortEven` takes a list and returns a list of the same length that l is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n// `sortOdd` takes a list and returns a list of the same length that l is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n// ####Exercise:\n// `sortEven([1, 2, 3])`\n// `sortEven([5, 6, 3, 4])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([2, 1, 5, 3, 4, 6, 0, 9, 7, 8])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])`\n\n// ####What is the difference between `sortEven` and `sortOdd`?\n// `sortEven` takes a list and returns a list of the same length that l is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n// `sortOdd` takes a list and returns a list of the same length that l is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n// ####Exercise:\n// `sortEven([1, 2, 3])`\n// `sortEven([5, 6, 3, 4])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([2, 1, 5, 3, 4, 6, 0, 9, 7, 8])`\n// `sortEven([3, 4, 2, 6, 7, 9, 8, 1, 5, 0])`\n// `sortEven([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])`\n\n// ####What is the difference between `sortEven` and `sortOdd`?\n// `sortEven` takes a list and returns a list of the same length that l is identical to l in the odd indices, while its values in the even indices correspond to the values of the even indices of l but are sorted.\n// `sortOdd` takes a list and returns a list of the same length that l is identical to l in the even indices, while its values in the odd indices correspond to the values of the odd indices of l but are sorted.\n// ####Exercise:\n// `sortEven([1, 2,"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min((i * 3) + 3, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeLinear = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 1) / 2); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 2), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeLinear function. Returns decoded string.\n  */\nconst decodeLinear = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 1) / 2); i++) {\n    groups.push(s.slice(Math.min((i * 2), s.length), Math.min((i * 2) + 2, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of four characters.\n  */\nconst encodeOctal = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n    groups.push(s.slice(4 * i, Math.min((4 * i + 4), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeOctal function. Returns decoded string.\n  */\nconst decodeOctal = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 3) / 4); i++) {\n    groups.push(s.slice(Math.min((i * 4), s.length), Math.min((i * 4) + 4, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of two characters.\n  */\nconst encodeBase36 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 1) / 2); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 2), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeBase36 function. Returns decoded string.\n  */\nconst decodeBase36 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 1) / 2); i++) {\n    groups.push(s.slice(Math.min((i * 2), s.length), Math.min((i * 2) + 2, s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns encoded string by cycling groups of six characters.\n  */\nconst encodeXML = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 5) / 6); i++) {\n    groups.push(s.slice(6 * i, Math.min((6 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 5)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  "}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns the n-th number, which is a Fibonacci number, and also a prime number.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if(n < 1) {\n    return 2;\n  }\n  if(n == 1) {\n    return 2;\n  }\n  if(n == 2) {\n    return 3;\n  }\n  if(n == 3) {\n    return 5;\n  }\n  return primeFib(n-1) + primeFib(n-2);\n}\n\nmodule.exports = primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as input. It returns true if there are three unique elements in the list that add up to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let result = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          result = true;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nexport {triplesSumToZero};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": false, "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let carsLeftToRight = [];\n  let carsRightToLeft = [];\n\n  for (let i = 0; i < n; i++) {\n    carsLeftToRight.push(new Car({\n      speed: 1,\n      direction: 'left',\n      startingPosition: {\n        x: Math.random(),\n        y: Math.random()\n      },\n      maxSpeed: 1,\n      maxTurn: 360\n    }));\n\n    carsRightToLeft.push(new Car({\n      speed: 1,\n      direction: 'right',\n      startingPosition: {\n        x: Math.random(),\n        y: Math.random()\n      },\n      maxSpeed: 1,\n      maxTurn: 360\n    }));\n  }\n\n  let collisions = 0;\n  carsLeftToRight.forEach(car => {\n    carsRightToLeft.forEach(collidingCar => {\n      if (car.collidesWith(collidingCar)) {\n        collisions++;\n      }\n    });\n  });\n\n  return collisions;\n};\n\nconst carsOnTheRoad = (n) => {\n  let cars = [];\n\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car({\n      speed: 1,\n      direction: 'left',\n      startingPosition: {\n        x: Math.random(),\n        y: Math.random()\n      },\n      maxSpeed: 1,\n      maxTurn: 360\n    }));\n  }\n\n  cars.forEach(car => {\n    cars.forEach(collidingCar => {\n      if (car.collidesWith(collidingCar)) {\n        car.speed = 0;\n      }\n    });\n  });\n\n  return cars;\n};\n\nconst printCar = (car) => {\n  console.log(car.toString());\n};\n\nconst carRace = (n) => {\n  return new Promise((resolve, reject) => {\n    console.log(`${n} cars are on the road.`);\n\n    carsOnTheRoad(n).forEach(car => {\n      car.collisions = carRaceCollision(n);\n      resolve(car);\n    });\n  });\n};\n\nconst carRacePromise = (n) => {\n  return new Promise((resolve, reject) => {\n    console.log(`${n} cars are on the road.`);\n\n    carRace(n).then(cars => {\n      cars.forEach(car => {\n        printCar(car);\n      });\n      resolve(cars);\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\n\nmodule.exports = {\n  carRace,\n  carRacePromise\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increased by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = l.slice()\n  list.push(1)\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction incrListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 1]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst decrList = (l) => {\n  const list = l.slice()\n  list.pop()\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction decrListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst addList = (l) => {\n  const list = l.slice()\n  list.unshift(1)\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction addListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst subList = (l) => {\n  const list = l.slice()\n  list.pop()\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction subListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst modList = (l) => {\n  const list = l.slice()\n  list.pop()\n  list.pop()\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction modListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst shiftList = (l) => {\n  const list = l.slice()\n  list.shift()\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction shiftListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst concatList = (l) => {\n  const list = l.slice()\n  list.push(1)\n  return list\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction concatListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst zipList = (l) => {\n  const list = l.slice()\n  const list2 = l.slice()\n  list.push(1)\n  list2.unshift(1)\n  return [...list,...list2]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nfunction zipListSafe(l) {\n  if (l.length === 0) {\n    return []\n  }\n  return [...l, 0,...l]\n}\n\n/**\n  * Return a list with elements increased by 1.\n  * If the list is empty, return an empty list.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst sortList ="}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let result = false;\n    for(let i = 0; i < l.length - 1; i++) {\n        if(l[i] === 0 && l[i + 1] === 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  pairsSumToZeroWithArray takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZeroWithArray([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroWithArray([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroWithArray([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroWithArray([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroWithArray([1])\n  false\n  */\nconst pairsSumToZeroWithArray = (l) => {\n    let result = false;\n    for(let i = 0; i < l.length - 1; i++) {\n        if(l[i] === 0 && l[i + 1] === 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n};\n\n/*\n  pairsSumToZeroWithArray2 takes a list of integers as input. It returns true if there are two different elements in the list that add up to zero, and false otherwise.\n  >>> pairsSumToZeroWithArray2([1, 3, 5, 0])\n  false\n  >>> pairsSumToZeroWithArray2([1, 3, -2, 1])\n  false\n  >>> pairsSumToZeroWithArray2([1, 2, 3, 7])\n  false\n  >>> pairsSumToZeroWithArray2([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZeroWithArray2([1])\n  false\n  */\nconst pairsSumToZeroWithArray2 = (l) => {\n    let result = false;\n    for(let i = 0; i < l.length - 1; i++) {\n        if(l[i] === 0 && l[i + 1] === 0) {\n            result = true;\n            break;\n        }\n    }\n    return result;\n};\n\nmodule.exports = {\n    pairsSumToZero,\n    pairsSumToZeroWithArray,\n    pairsSumToZeroWithArray2\n};<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Cdepend numerical base of the input number x to the base. Returns the string representation after the conversion. Base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = '';\n  let i = 1;\n  let temp = x;\n  while(temp > 0) {\n    let remainder = temp % base;\n    temp = temp / base;\n    result = remainder + result;\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Convert a number represented in base n to base 10.\n  * @param n number to convert\n  * @param base the base of n\n  * @return number in base 10\n  * @example\n  *   >>> convertBase(23, 3)\n  *   '23'\n  * @example\n  *   >>> convertBase(23, 2)\n  *   '11'\n  * @example\n  *   >>> convertBase(23, 16)\n  *   '4b'\n  */\nconst convertBase = (n, base) => {\n  let result = '';\n  let i = 1;\n  let temp = n;\n  while(temp > 0) {\n    let remainder = temp % base;\n    temp = temp / base;\n    result = remainder + result;\n    i++;\n  }\n  return result;\n}\n\n/**\n  * Convert a number represented in base 10 to base n.\n  * @param n number to convert\n  * @param base the base of n\n  * @return number in base n\n  * @example\n  *   >>> convertBase(23, 3)\n  *   '11'\n  * @example\n  *   >>> convertBase(23, 2)\n  *   '4'\n  * @example\n  *   >>> convertBase(23, 16)\n  *   '4b'\n  */\nconst convertBackBase = (n, base) => {\n  let result = '';\n  let i = n.length - 1;\n  let temp = n[i];\n  while(i >= 0) {\n    let remainder = temp % base;\n    temp = temp / base;\n    result = remainder + result;\n    i--;\n  }\n  return result;\n}\n\nconst sum = (x, y) => x + y;\n\nconst divide = (x, y) => x / y;\n\nconst multiply = (x, y) => x * y;\n\nconst subtract = (x, y) => x - y;\n\nconst mod = (x, y) => x % y;\n\nconst divMod = (x, y) => {\n  let r = x / y;\n  return {\n    quotient: x - y * r,\n    remainder: y * r\n  };\n};\n\nmodule.exports = {\n  convertBase,\n  convertBackBase,\n  changeBase,\n  sum,\n  divide,\n  multiply,\n  subtract,\n  mod,\n  divMod\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GThe length of one side is the same and the return face is high for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const s = a * h / 2;\n  return s / 2;\n}\n\n/**\n  * @param {number} a - side length of triangle.\n  * @param {number} b - side length of triangle.\n  * @returns {number} - area of triangle.\n  * @description:\n  *  - The area of triangle is calculated by a * b / 2\n  *  - The return value is the same for a triangle with same sides.\n  *  - The return value is the same for a triangle with opposite sides.\n  *  - The return value is the same for a triangle with the same length.\n  *  - The return value is the same for a triangle with opposite length.\n  *  - The return value is the same for a triangle with the same area.\n  *  - The return value is the same for a triangle with opposite area.\n  *  - The return value is the same for a triangle with same side and opposite length.\n  *  - The return value is the same for a triangle with opposite side and opposite length.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with opposite side and opposite side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with opposite side and same length.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with opposite side and same side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with opposite side and same length.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with opposite side and same side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with same side and opposite length.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with opposite side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with same side and opposite length.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with same side and opposite length.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same length.\n  *  - The return value is the same for a triangle with same side and opposite length.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and opposite side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  - The return value is the same for a triangle with same side and same side.\n  *  -"}
{"task_id": "JavaScript/46", "prompt": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*TThe Fib4 sequence is a sequence similar to the Fibbonacci sequence, which is defined as: fib4 (0) - > 0 fib4 (1) - > 0 fib4 (2) - > 2 fib4 (3) - > 0 fib4 (n-1) - > fib4 (n-2) + fib4 (n-3) + fib4 (n-4).\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const fib3 = (n - 1) + fib4(n - 2)\n  return fib3 + fib4(n - 3)\n}\n\nexport { fib4 }\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RThe median number of items in the list.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const copy = l.slice(0);\n  copy.sort((a, b) => a - b);\n  return copy.length > 0? copy[copy.length / 2] : undefined;\n};\n\n/*R The median of a sorted list.\n  >>> medianSorted([3, 1, 2, 4, 5])\n  3\n  >>> medianSorted([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianSorted = (l) => {\n  return l.length > 0? l[l.length / 2] : undefined;\n};\n\nmodule.exports = {\n  median,\n  medianSorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Tests if the given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textL = text.split('');\n    return textL.reduce((prev, curr, idx) => {\n        if (idx == textL.length - 1) {\n            return prev + curr === curr;\n        } else {\n            return prev + curr === curr;\n        }\n    }, false);\n};\n\n// Tests if the given string is a palindrome\nconst isPalindrome = (text) => {\n    let textL = text.split('');\n    return textL.reduce((prev, curr, idx) => {\n        if (idx == textL.length - 1) {\n            return prev + curr === curr;\n        } else {\n            return prev + curr === curr;\n        }\n    }, false);\n};\n\nmodule.exports = isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2 ^ n modulo p (Attention Numeric).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n = n % p\n  while (n < 0) {\n    n += p\n  }\n  return n\n}\n\n/* Return the number of different ways to distribute n over p elements.\n  >>> n_ways(3, 2)\n  3\n  >>> n_ways(3, 3)\n  9\n  >>> n_ways(0, 1)\n  1\n  >>> n_ways(0, 0)\n  1\n  */\nconst n_ways = (n, p) => {\n  if (n < p) {\n    return 1\n  } else {\n    return n_ways(n - 1, p) + n_ways(n - p, p)\n  }\n}\n\n// Test\nconsole.log(modp(100, 101))\nconsole.log(n_ways(3, 2))\nconsole.log(n_ways(0, 0))\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": false, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const l = s.length;\n  let c = 0;\n  const decoded = [];\n  for (let i = 0; i < l; i++) {\n    c = (c + s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0);\n    decoded.push(String.fromCharCode(c));\n  }\n  return decoded.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst encodeShift2 = (s) => {\n  const l = s.length;\n  let c = 0;\n  const decoded = [];\n  for (let i = 0; i < l; i++) {\n    c = (c + s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0);\n    decoded.push(String.fromCharCode(c));\n  }\n  return decoded.join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift2 = (s) => {\n  const l = s.length;\n  let c = 0;\n  const decoded = [];\n  for (let i = 0; i < l; i++) {\n    c = (c + s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0);\n    decoded.push(String.fromCharCode(c));\n  }\n  return decoded.join(\"\");\n}\n\nconst test = (func) => {\n  const l = getRandomLength();\n  const l2 = getRandomLength();\n  const s1 = getRandomString(l);\n  const s2 = getRandomString(l2);\n  console.log(\"input1 = \", s1, \"input2 = \", s2);\n  const encode_s1 = encodeShift(s1);\n  const encode_s2 = encodeShift2(s2);\n  console.log(\"encode_s1 = \", encode_s1, \"encode_s2 = \", encode_s2);\n  const decode_s1 = decodeShift(encode_s1);\n  const decode_s2 = decodeShift2(encode_s2);\n  console.log(\"decode_s1 = \", decode_s1, \"decode_s2 = \", decode_s2);\n  const encode_s3 = encodeShift(decode_s1);\n  const encode_s4 = encodeShift2(decode_s2);\n  console.log(\"encode_s3 = \", encode_s3, \"encode_s4 = \", encode_s4);\n  const decode_s3 = decodeShift(encode_s3);\n  const decode_s4 = decodeShift2(encode_s4);\n  console.log(\"decode_s3 = \", decode_s3, \"decode_s4 = \", decode_s4);\n  assert(decode_s3 === decode_s1);\n  assert(decode_s4 === decode_s2);\n  const r = func(s1, s2);\n  console.log(\"encoded = \", r);\n  assert(r === encode_s1);\n  assert(r === encode_s2);\n  assert(r === encode_s3);\n  assert(r === encode_s4);\n  const d = func(encode_s1, encode_s2);\n  console.log(\"decoded = \", d);\n  assert(d === decode_s1);\n  assert(d === decode_s2);\n  assert(d === decode_s3);\n  assert(d === decode_s4);\n}\n\nfunction getRandomLength() {\n  return Math.floor(Math.random() * 50) + 1;\n}\n\nfunction getRandomString(l) {\n  const a = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let r = \"\";\n  for (let i = 0; i < l; i++) {\n    r += a.charAt(Math.floor(Math.random() * a.length));\n  }\n  return r;\n}\n\nmodule.exports = {\n  test,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes strings and returns strings without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const words = text.split(' ')\n  return words.filter((word) => {\n    return word.length > 0 &&!isVowel(word.charAt(0))\n  })\n}\n\nexport default removeVowels\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in list l are below the t threshold.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] >= t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  >>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True)\n  [16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> sorted(a, key=abs, reverse=True, reverse=True, key=abs, reverse=True, reverse=True, reverse=True, reverse=True, reverse=True)\n  [1, 2, 3"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  0\n  >>> add(-1, 1)\n  0\n  >>> add(-1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, 1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(1, 1)\n  2\n  >>> add(-1, -1)\n  -2\n  >>> add(0, 1)\n  1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(-1, -1)\n  -2\n  >>> add(0, 0)\n  0\n  >>> add(-1, 0)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(-1, 1)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(1, 1)\n  2\n  >>> add(-1, -1)\n  -2\n  >>> add(0, 1)\n  1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(-1, -1)\n  -2\n  >>> add(0, 0)\n  0\n  >>> add(-1, 0)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(-1, 1)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(1, -1)\n  -1\n  >>> add(-1, 1)\n  -1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, 1)\n  1\n  >>> add(-1, 0)\n  -1\n  >>> add(0, -1)\n  -1\n  >>> add(1, -1)\n  -1\n  >>> add(0, 0)\n  0\n  >>> add(-1, -1)\n  -2\n  >>> add(1, 1)\n  2\n  >>> add(1, 1)\n  2\n  >>> add(1, 0)\n  1\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check that two words have the same letters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) {\n    return false;\n  }\n\n  let i = 0;\n  while (i < s0.length) {\n    if (s0.charAt(i)!== s1.charAt(i)) {\n      return false;\n    }\n    i++;\n  }\n\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RThe Fibonacci number is the ninth.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst sum = (a, b) => a + b;\nconst product = (a, b) => a * b;\nconst division = (a, b) => a / b;\n\nconst factorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n};\n\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n};\n\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b);\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 1 || n === 3) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst lcmPrime = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    if (isPrime(i)) {\n      while (n % i === 0) {\n        n = n / i;\n        factors.push(i);\n      }\n    }\n    i = i + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return lcm(...factors);\n};\n\nconst isPrimeFast = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSlow = (n) => {\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeWhile = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeRecursive = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return isPrimeRecursive(n - 1);\n};\n\nconst isPrimeNaive = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeSieve = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  let count = 1;\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      count++;\n    }\n  }\n  return count === 2;\n};\n\nconst isPrimeNaiveSlow = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNaiveFast = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeNaiveWhile = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeNaiveRecursive = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return isPrimeNaiveRecursive(n - 1);\n};\n\nconst isPrimeSlow = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let limit = (Math.sqrt(n) + 1);\n  for (let i = 2; i < limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeWhile = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst isPrimeRecursive = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  if (n === 1) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  return isPrimeRecursive(n - 1);\n};\n\nconst primeFactors = (n) => {\n  let factors = [];\n  let i = 2;\n  while (i"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">.\" returns false if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  if (len % 2 === 0) return true\n  for (let i = 0; i < len; i += 1) {\n    if (brackets[i] === '<' && brackets[i + 1] === '>') {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a bracketed string, returns a string that has all the brackets removed,\n  and the contents concatenated together.\n*/\nconst stripBrackets = (brackets) => {\n  let stripped = ''\n  const len = brackets.length\n  for (let i = 0; i < len; i += 1) {\n    stripped += brackets[i]\n  }\n  return stripped\n}\n\n/*\n  Given a bracketed string, returns a string that has all the brackets removed,\n  and the contents concatenated together.\n*/\nconst stripBracketsInverse = (brackets) => {\n  let stripped = ''\n  const len = brackets.length\n  for (let i = 0; i < len; i += 1) {\n    stripped += brackets[len - i - 1]\n  }\n  return stripped\n}\n\nmodule.exports = {\n  correctBracketing,\n  stripBrackets,\n  stripBracketsInverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RIt is true that list elements monotonously increase or decrease.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const p = [...l].sort((a, b) => a - b);\n  return p[1] >= p[2] || p[1] <= p[3];\n};\n\n// Your MyList object will be instantiated and called as such:\n// var obj = Object.create(MyList).create(1, 2, 3, 4, 5);\n// obj.add(n);\n// obj.remove(n);\n// obj.get(n);\n// obj.size();\n// obj.clear();\n// obj.isEmpty();\n// obj.find(predicate);\n// obj.contains(element);\n// obj.findLast(predicate);\n// obj.containsLast(element);\n// obj.indexOf(element);\n// obj.lastIndexOf(element);\n// obj.head();\n// obj.tail();\n// obj.reverse();\n// obj.reverse(1, 3);\n// obj.reverse(3, 1);\n// obj.sort();\n// obj.sort(1, 3);\n// obj.sort(3, 1);\n// obj.rotate(k);\n// obj.rotate(k, 1, 3);\n// obj.rotate(k, 3, 1);\n// obj.reverse();\n// obj.isSorted();\n// obj.isSorted(1, 3);\n// obj.isSorted(3, 1);\n// obj.isMonotonic();\n// obj.isMonotonic(1, 3);\n// obj.isMonotonic(3, 1);\n// obj.isUnique();\n// obj.isUnique(1, 3);\n// obj.isUnique(3, 1);\n// obj.sum();\n// obj.sum(1, 3);\n// obj.sum(3, 1);\n// obj.min();\n// obj.min(1, 3);\n// obj.min(3, 1);\n// obj.max();\n// obj.max(1, 3);\n// obj.max(3, 1);\n// obj.average();\n// obj.average(1, 3);\n// obj.average(3, 1);\n// obj.median();\n// obj.median(1, 3);\n// obj.median(3, 1);\n// obj.interval(1, 3);\n// obj.interval(3, 1);\n// obj.range(1, 3);\n// obj.range(3, 1);\n// obj.toArray();\n// obj.toArray(1, 3);\n// obj.toArray(3, 1);\n// obj.toArray(1, 3, -1);\n// obj.toArray(1, 3, -1, 2);\n// obj.toArray(1, 3, -1, 2, 3);\n// obj.toArray(1, 3, -1, 2, 3, 4);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23);\n// obj.toArray(1, 3, -1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"}
{"task_id": "JavaScript/58", "prompt": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // Get the union of the two lists.\n  const union = l1.concat(l2);\n\n  // Set to the list of common elements.\n  const common = [];\n\n  // Loop through the union of the two lists.\n  for (const i of union) {\n    // Check if the current element is in both lists.\n    if (l1.indexOf(i) >= 0 && l2.indexOf(i) >= 0) {\n      // Add the current element to the common list.\n      common.push(i);\n    }\n  }\n\n  // Return the list of common elements.\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // Get the union of the two lists.\n  const union = l1.concat(l2);\n\n  // Set to the list of common elements.\n  const common = [];\n\n  // Loop through the union of the two lists.\n  for (const i of union) {\n    // Check if the current element is in both lists.\n    if (l1.indexOf(i) >= 0 && l2.indexOf(i) >= 0) {\n      // Add the current element to the common list.\n      common.push(i);\n    }\n  }\n\n  // Return the list of common elements.\n  return common;\n};\n\n/*RHe sorted out unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  // Get the union of the two lists.\n  const union = l1.concat(l2);\n\n  // Set to the list of common elements.\n  const common = [];\n\n  // Loop through the union of the two lists.\n  for (const i of union) {\n    // Check if the current element is in both lists.\n    if (l1.indexOf(i) >= 0 && l2.indexOf(i) >= 0) {\n      // Add the current element to the common list.\n      common.push(i);\n    }\n  }\n\n  // Return the list of common elements.\n  return common;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RSuppose n > 1 and is not a prime number.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 0;\n  const sqrtN = Math.sqrt(n);\n  while (i < sqrtN) {\n    if (n % i === 0) {\n      return i;\n    }\n    ++i;\n  }\n  return n;\n};\n\n/*RIf n < 1 or n is a prime number, return 0.\n  >>> largestPrimeFactor(-1)\n  0\n  >>> largestPrimeFactor(0)\n  0\n  >>> largestPrimeFactor(1)\n  1\n  >>> largestPrimeFactor(2)\n  1\n  >>> largestPrimeFactor(3)\n  1\n  >>> largestPrimeFactor(4)\n  2\n  >>> largestPrimeFactor(5)\n  2\n  >>> largestPrimeFactor(6)\n  3\n  >>> largestPrimeFactor(7)\n  3\n  >>> largestPrimeFactor(8)\n  4\n  >>> largestPrimeFactor(9)\n  4\n  >>> largestPrimeFactor(10)\n  5\n  >>> largestPrimeFactor(11)\n  5\n  >>> largestPrimeFactor(12)\n  6\n  >>> largestPrimeFactor(13)\n  7\n  >>> largestPrimeFactor(14)\n  7\n  >>> largestPrimeFactor(15)\n  7\n  >>> largestPrimeFactor(16)\n  8\n  >>> largestPrimeFactor(17)\n  8\n  >>> largestPrimeFactor(18)\n  9\n  >>> largestPrimeFactor(19)\n  9\n  >>> largestPrimeFactor(20)\n  9\n  >>> largestPrimeFactor(21)\n  10\n  >>> largestPrimeFactor(22)\n  11\n  >>> largestPrimeFactor(23)\n  11\n  >>> largestPrimeFactor(24)\n  12\n  >>> largestPrimeFactor(25)\n  12\n  >>> largestPrimeFactor(26)\n  13\n  >>> largestPrimeFactor(27)\n  13\n  >>> largestPrimeFactor(28)\n  14\n  >>> largestPrimeFactor(29)\n  14\n  >>> largestPrimeFactor(30)\n  15\n  >>> largestPrimeFactor(31)\n  15\n  >>> largestPrimeFactor(32)\n  16\n  >>> largestPrimeFactor(33)\n  17\n  >>> largestPrimeFactor(34)\n  17\n  >>> largestPrimeFactor(35)\n  17\n  >>> largestPrimeFactor(36)\n  18\n  >>> largestPrimeFactor(37)\n  19\n  >>> largestPrimeFactor(38)\n  19\n  >>> largestPrimeFactor(39)\n  20\n  >>> largestPrimeFactor(40)\n  21\n  >>> largestPrimeFactor(41)\n  21\n  >>> largestPrimeFactor(42)\n  22\n  >>> largestPrimeFactor(43)\n  23\n  >>> largestPrimeFactor(44)\n  24\n  >>> largestPrimeFactor(45)\n  24\n  >>> largestPrimeFactor(46)\n  25\n  >>> largestPrimeFactor(47)\n  25\n  >>> largestPrimeFactor(48)\n  26\n  >>> largestPrimeFactor(49)\n  26\n  >>> largestPrimeFactor(50)\n  26\n  >>> largestPrimeFactor(51)\n  27\n  >>> largestPrimeFactor(52)\n  28\n  >>> largestPrimeFactor(53)\n  28\n  >>> largestPrimeFactor(54)\n  28\n  >>> largestPrimeFactor(55)\n  29\n  >>> largestPrimeFactor(56)\n  30\n  >>> largestPrimeFactor(57)\n  30\n  >>> largestPrimeFactor(58)\n  30\n  >>> largestPrimeFactor(59)\n  31\n  >>> largestPrimeFactor(60)\n  32\n  >>> largestPrimeFactor(61)\n  32\n  >>> largestPrimeFactor(62)\n  32\n  >>> largestPrimeFactor(63)\n  33\n  >>> largestPrimeFactor(64)\n  34\n  >>> largestPrimeFactor(65)\n  34\n  >>> largestPrimeFactor(66)\n  35\n  >>> largestPrimeFactor(67)\n  35\n  >>> largestPrimeFactor(68)\n  36\n  >>> largestPrimeFactor(69)\n  36\n  >>> largestPrimeFactor(70)\n  37\n  >>> largestPrimeFactor(71)\n  37\n  >>> largestPrimeFactor(72)\n  37\n  >>> largestPrimeFactor(73)\n  38\n  >>> largestPrimeFactor(74)\n  39\n  >>> largestPrimeFactor(75)\n  39\n  >>> largestPrimeFactor(76)\n  39\n  >>> largestPrimeFactor(77)\n  40\n  >>> largestPrimeFactor(78)\n  41\n  >>> largestPrimeFactor(79)\n  41\n  >>> largestPrimeFactor(80)\n  42\n  >>> largestPrimeFactor(81)\n  43\n  >>> largestPrimeFactor(82)\n  43\n  >>> largestPrimeFactor(83)\n  44\n  >>> largestPrimeFactor(84)\n  45\n  >>> largestPrimeFactor(85)\n  45\n  >>> largestPrimeFactor(86)\n  46\n  >>> largestPrimeFactor(87)\n  46\n  >>> largestPrimeFactor(88)\n  47\n  >>> largestPrimeFactor(89)\n  48\n  >>> largestPrimeFactor(90)\n  48\n  >>> largestPrimeFactor(91)\n  48\n  >>> largestPrimeFactor(92)\n  49\n  >>> largestPrimeFactor(93)\n  50\n  >>> largestPrimeFactor(94)\n  51\n  >>> largestPrimeFactor(95)\n  51\n  >>> largestPrimeFactor(96)\n  52\n  >>> largestPrimeFactor(97)\n  53\n  >>> largestPrimeFactor(98)\n  54\n  >>> largestPrimeFactor(99)\n  55\n  >>> largestPrimeFactor(100)\n  56\n  >>> largestPrimeFactor(101)\n  57\n  >>> largestPrimeFactor(102)\n  58\n  >>> largestPrimeFactor(103)\n  59\n  >>> largestPrimeFactor(104)\n  60\n  >>> largestPrimeFactor(105)\n  61\n  >>> largestPrimeFactor(106)\n  62\n  >>> largestPrimeFactor(107)\n  63\n  >>> largestPrimeFactor(108)\n  64\n  >>> largestPrimeFactor(109)\n  65\n  >>> largestPrimeFactor(110)\n  66\n  >>> largestPrimeFactor(111)\n  67\n  >>> largestPrimeFactor(112)\n  68\n  >>> largestPrimeFactor(113)\n  69\n  >>> largestPrimeFactor(114)\n  70\n  >>> largestPrimeFactor"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that adds numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (sum = 0) => {\n    while (sum < n) {\n      sum += (1 + Math.sqrt(1 + 8 * sum));\n    }\n    return sum;\n  };\n};\n\n/*\n  sumNToN is a function that adds numbers from 1 to n.\n  >>> sumNToN(30)\n  465\n  >>> sumNToN(100)\n  5050\n  >>> sumNToN(5)\n  15\n  >>> sumNToN(10)\n  55\n  >>> sumNToN(1)\n  1\n  */\nconst sumNToN = (n) => {\n  return (sum = 0) => {\n    while (sum < n) {\n      sum += (1 + Math.sqrt(1 + 8 * sum));\n    }\n    return sum;\n  };\n};\n\nconst fibonacci = (n) => {\n  const a = 0, b = 1, c = a + b;\n  while (c < n) {\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return c;\n};\n\nconst fibonacciSum = (n) => {\n  const a = 0, b = 1, c = a + b;\n  let sum = 0;\n  while (c < n) {\n    sum += (1 + Math.sqrt(1 + 8 * c));\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return sum;\n};\n\nconst fibonacciSumToN = (n) => {\n  const a = 0, b = 1, c = a + b;\n  let sum = 0;\n  while (c < n) {\n    sum += (1 + Math.sqrt(1 + 8 * c));\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return sum;\n};\n\nconst fibonacciSumNToN = (n) => {\n  const a = 0, b = 1, c = a + b;\n  let sum = 0;\n  while (c < n) {\n    sum += (1 + Math.sqrt(1 + 8 * c));\n    a = b;\n    b = c;\n    c = a + b;\n  }\n  return sum;\n};\n\nconst testSum = (testName, n) => {\n  console.log(`${testName} sum = ${sumToN(n)}`);\n  console.log(`${testName} sum = ${sumNToN(n)}`);\n};\n\n/*\n  Sum fibonacci numbers to n.\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)\n  44\n  >>> fibonacciSum(20)"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \").\" returns true if each opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let isCorrect = true\n  let counter = 1\n  let stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else {\n      if (stack.pop() === ')') {\n        counter--\n      } else {\n        isCorrect = false\n        break\n      }\n    }\n  }\n  return isCorrect\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs [0] + xs [1] * x + xs [2] * x ^ 2 +.... return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.reduce((prev, current) => {\n    return [\n      prev[0] + current,\n      prev[1] + current * prev[0]\n    ];\n  }, [0, 1]);\n};\n\n// Add the derivative to the list of results.\nderivative(solution).forEach(result => {\n  if (!result.length) {\n    return;\n  }\n\n  results.push(result);\n});\n\n// Run the main analysis.\nanalyse(solution);\n\n// Run the final analysis.\nanalyse(results);\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*TThe FibFib number sequence is a sequence similar to the Fibbonacci sequence, which is defined as follows: fibfib (0) = = 0 fibfib (1) = = 0 fibfib (2) = = 1 fibfib (n) = fibfib (n-1) + fibfib (n-2) + fibfib (n-3). Please write a function to efficiently calculate the nth element of the FibFib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  else if (n === 1) return 1;\n  else if (n === 2) return 2;\n  else {\n    let fib = fibfib(n-1) + fibfib(n-2);\n    return fib;\n  }\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n\nodd = [\n  1,\n  3,\n  5,\n  7,\n  9\n]\n\neven = [\n  2,\n  4,\n  6,\n  8\n]\n\n\nconst sum = (n) => {\n  return odd[n] + even[n];\n}\n\nconst product = (n) => {\n  return odd[n] * even[n];\n}\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n}\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n}\n\n\nconst removeOdd = (n) => {\n  return n.filter(x => isEven(x));\n}\n\nconst removeEven = (n) => {\n  return n.filter(x => isOdd(x));\n}\n\nconst remove = (n) => {\n  return n.filter(x =>!(isOdd(x) || isEven(x)));\n}\n\nconst sumBy3 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy2 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy3 = (n) => {\n  return n.filter(x => x % 3 === 0);\n}\n\nconst removeBy2 = (n) => {\n  return n.filter(x => x % 2 === 0);\n}\n\nconst sumBy5 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy5 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy5 = (n) => {\n  return n.filter(x => x % 5 === 0);\n}\n\nconst removeBy4 = (n) => {\n  return n.filter(x => x % 4 === 0);\n}\n\nconst sumBy7 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy4 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy7 = (n) => {\n  return n.filter(x => x % 7 === 0);\n}\n\nconst removeBy6 = (n) => {\n  return n.filter(x => x % 6 === 0);\n}\n\nconst sumBy11 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy3 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy11 = (n) => {\n  return n.filter(x => x % 11 === 0);\n}\n\nconst removeBy10 = (n) => {\n  return n.filter(x => x % 10 === 0);\n}\n\nconst sumBy15 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy5 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy15 = (n) => {\n  return n.filter(x => x % 15 === 0);\n}\n\nconst removeBy14 = (n) => {\n  return n.filter(x => x % 14 === 0);\n}\n\nconst sumBy17 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy7 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy17 = (n) => {\n  return n.filter(x => x % 17 === 0);\n}\n\nconst removeBy16 = (n) => {\n  return n.filter(x => x % 16 === 0);\n}\n\nconst sumBy19 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy9 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy19 = (n) => {\n  return n.filter(x => x % 19 === 0);\n}\n\nconst removeBy18 = (n) => {\n  return n.filter(x => x % 18 === 0);\n}\n\nconst sumBy23 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 0);\n}\n\nconst productBy13 = (n) => {\n  return n.reduce((carry, x) => {\n    return carry + x;\n  }, 1);\n}\n\nconst removeBy23 = (n) =>"}
{"task_id": "JavaScript/64", "prompt": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write is a vowel count function that takes a string that represents a word as input and returns the number of vowels in the string. In this case, vowels are \"a,\" \"e,\" \"i,\" \"o,\" \"u.\" Again, \"y\" is a vowel, but only if it is at the end of the given word. Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let count = 0\n    for (let i = 0; i < s.length; i++) {\n        if (isVowel(s[i])) {\n            count++\n        }\n    }\n    if (s[s.length - 1] === 'y') {\n        count++\n    }\n    return count\n}\n\n// const vowelsCount = (s) => {\n//     const s2 = s.replace(/y$/, '')\n//     const result = vowelsCount(s2)\n//     return result\n// }\n\n/**\n * Given an array of words, return all the words that can be formed by taking\n * a vowel out of some word in the original array and concatenating them to\n * form a new word. In this case, a word is \"able\" if it has a vowel in it.\n * Example:\n *\n *   >>> wordCombinations([\"a\", \"b\", \"c\", \"d\", \"e\"])\n *   [\"b\", \"c\", \"d\"]\n *   >>> wordCombinations([\"a\", \"e\"])\n *   []\n *   >>> wordCombinations([\"a\", \"a\", \"b\", \"c\", \"c\", \"d\", \"e\", \"e\"])\n *   [\"a\", \"b\", \"c\", \"d\", \"e\"]\n *\n * @param {string[]} words\n * @return {string[]}\n */\nconst wordCombinations = (words) => {\n    let result = []\n    for (let i = 0; i < words.length; i++) {\n        let word = words[i]\n        let suffix = ''\n        if (isVowel(word[word.length - 1])) {\n            suffix = word.slice(word.length - 1)\n        }\n        let prefix = word.slice(0, word.length - 1)\n        if (!isVowel(word[word.length - 1])) {\n            result = result.concat([prefix + suffix])\n        }\n    }\n    return result\n}\n\nmodule.exports = {\n    vowelsCount,\n    wordCombinations\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular displacement of digits of integer x, displacement of digits to the right by displacing and returning the result as a string. If displacement > number of digits, return the digits inversely.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let result = x;\n  while (shift-- > 0) result = parseInt(result.slice(1), 10) + parseInt(result.slice(0, 1), 10);\n  return result;\n}\n\n// Part 1 - Write a function to determine the sum of two given numbers.\nconst sum = (a, b) => {\n  const x = a + b;\n  let result = x;\n  while (x >= 10) {\n    result -= x % 10;\n    x = x / 10;\n  }\n  return result;\n}\n\n// Part 2 - Write a function to determine the difference between two given numbers.\nconst difference = (a, b) => {\n  const x = a - b;\n  let result = x;\n  while (x >= 10) {\n    result += x % 10;\n    x = x / 10;\n  }\n  return result;\n}\n\n// Part 3 - Write a function to determine the product of two given numbers.\nconst product = (a, b) => {\n  const x = a * b;\n  let result = x;\n  while (x >= 10) {\n    result -= x % 10;\n    x = x / 10;\n  }\n  return result;\n}\n\n// Part 4 - Write a function to determine the quotient of two given numbers.\nconst quotient = (a, b) => {\n  const x = a / b;\n  let result = x;\n  while (x >= 10) {\n    result -= x % 10;\n    x = x / 10;\n  }\n  return result;\n}\n\n// Part 5 - Write a function to determine the remainder of two given numbers.\nconst remainder = (a, b) => {\n  const x = a % b;\n  let result = x;\n  while (x >= 10) {\n    result += x % 10;\n    x = x / 10;\n  }\n  return result;\n}\n\n// Part 6 - Write a function to convert a base number to a string.\nconst convertToBase = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = parseInt(number % base, 10) + result;\n    number = parseInt(number / base, 10);\n  }\n  return result;\n}\n\n// Part 7 - Write a function to convert a string to a base number.\nconst convertToNumber = (number, base) => {\n  let result = 0;\n  while (number.length > 0) {\n    result += parseInt(number[number.length - 1] * Math.pow(base, number.length - 1), 10);\n    number = number.slice(0, number.length - 1);\n  }\n  return result;\n}\n\n// Part 8 - Write a function to convert a number represented in base to a string.\nconst convertToBaseNumber = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = number % base + result;\n    number = Math.floor(number / base);\n  }\n  return result;\n}\n\n// Part 9 - Write a function to convert a string to a number represented in base.\nconst convertToNumberBase = (number, base) => {\n  let result = 0;\n  while (number.length > 0) {\n    result += parseInt(number[0] * Math.pow(base, number.length - 1), 10);\n    number = number.slice(1, number.length);\n  }\n  return result;\n}\n\n// Part 10 - Write a function to convert a number represented in base to a string.\nconst convertToBaseNumberBase = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = number % base + result;\n    number = Math.floor(number / base);\n  }\n  return result;\n}\n\n// Part 11 - Write a function to convert a base number to a string.\nconst convertToBaseNumber = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = parseInt(number % base, 10) + result;\n    number = parseInt(number / base, 10);\n  }\n  return result;\n}\n\n// Part 12 - Write a function to convert a string to a number represented in base.\nconst convertToNumberBase = (number, base) => {\n  let result = 0;\n  while (number.length > 0) {\n    result += parseInt(number[0] * Math.pow(base, number.length - 1), 10);\n    number = number.slice(1, number.length);\n  }\n  return result;\n}\n\n// Part 13 - Write a function to convert a number represented in base to a string.\nconst convertToNumber = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = number % base + result;\n    number = Math.floor(number / base);\n  }\n  return result;\n}\n\n// Part 14 - Write a function to convert a number represented in base to a string.\nconst convertToBase = (number, base) => {\n  let result = \"\";\n  while (number > 0) {\n    result = number % base + result;\n    number = Math.floor(number / base);\n  }\n  return result;\n}\n\n// Part 15 - Write a function to convert a string to a number represented in base.\nconst convertToNumberBase = (number, base) => {\n  let result = 0;\n  while (number.length > 0) {\n    result += parseInt(number[0] * Math.pow(base, number.length - 1), 10);\n    number = number.slice(1, number.length);\n  }\n  return result;\n}\n\n// Part 16 - Write a function to calculate the power of two.\nconst calculatePower = (number) => {\n  let result = 0;\n  while (number > 0) {\n    result += 1;\n    number = number / 2;\n  }\n  return result;\n}\n\n// Part 17 - Write a function to get the maximum of two numbers.\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task Writes a function that takes a string as input and returns only the sum of the upper letters of 'ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.split('')\n   .map(c => c.toUpperCase())\n   .reduce((a, b) => a + b, 0);\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": false, "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  // Split the string into an array\n  const fruits = s.split(' ').map(x => parseInt(x));\n\n  // Sum the number of fruits in the array\n  const totalFruit = fruits.reduce((prev, curr) => prev + curr, 0);\n\n  // Calculate the number of mango fruits in the basket\n  return n - totalFruit;\n}\n\n// Test\nfruitDistribution(\"5 apples and 6 oranges\", 19);\nfruitDistribution(\"0 apples and 1 oranges\", 3);\nfruitDistribution(\"2 apples and 3 oranges\", 100);\nfruitDistribution(\"100 apples and 1 oranges\", 120);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": false, "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let i, j, smallest_value, smallest_index;\n\n  if (arr.length === 0) {\n    return [];\n  }\n\n  let arr_copy = arr.slice(0);\n  arr_copy.sort(function(a, b) {\n    return a - b;\n  });\n\n  for (i = 0; i < arr.length; i += 2) {\n    if (arr[i] % 2 === 0) {\n      smallest_value = arr[i];\n      smallest_index = i;\n      break;\n    }\n  }\n\n  for (j = 1; j < arr.length; j += 2) {\n    if (arr[j] % 2 === 0) {\n      if (smallest_value === arr[j]) {\n        if (smallest_index < j) {\n          smallest_index = j;\n        }\n      } else {\n        smallest_index = j;\n        smallest_value = arr[j];\n      }\n    }\n  }\n\n  return [smallest_value, smallest_index];\n};\n\nexport { pluck };\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You get a non-empty list of positive integers. Returns the largest integer number, which is greater than zero and has a frequency greater than or equal to the value of the integer itself. Frequency of an integer is the number of times it appears in the list. If no such value exists, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  const max = parseInt(lst[0])\n  for (let i = 1; i < len; i++) {\n    const n = parseInt(lst[i])\n    if (n > max) {\n      max = n\n    }\n  }\n  return max\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Strange sorting is when you start with the minimum, then with the maximum of the remaining integers, then with the minimum, and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    const len = lst.length\n    const list = Array.from(lst)\n    let sortedList = list\n\n    let i = 0\n    let j = len - 1\n    while (i <= j) {\n        if (i === j) {\n            sortedList = list.slice(i)\n            break\n        }\n        if (list[i] > list[j]) {\n            swap = sortedList[j]\n            sortedList[j] = sortedList[i]\n            sortedList[i] = swap\n            i++\n            j--\n        } else if (list[i] < list[j]) {\n            swap = sortedList[i]\n            sortedList[i] = sortedList[j]\n            sortedList[j] = swap\n            i++\n            j--\n        } else {\n            i++\n        }\n    }\n\n    return sortedList\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the length of the three sides of a triangle. Return the area of the triangle rounded to 2 decimal points if the three sides form a valid triangle. Otherwise, return -1 Three sides a valid triangle if the sum of two sides is greater than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  if (a <= 0 || b <= 0 || c <= 0 || s <= 0) {\n    return -1;\n  }\n  const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return roundTo2Dec(area);\n};\n\nconst roundTo2Dec = (num) => {\n  const str = num.toFixed(2);\n  return parseFloat(str);\n};\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true when the object q flies, and false otherwise. If the object q flies when it is balanced (it is a palindromic list) and the sum of its elements is less than or equal to the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    const sum = q.reduce((a, b) => a + b);\n    return sum <= w && sum % 2 === 0;\n}\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  A palindromic array is an array that is read forward and backward. In a change, you can convert one element to another element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  const dp = {};\n  const change = {};\n  for (let i = 0; i < len; i++) {\n    const [x, y] = arr[i];\n    dp[x] = dp[x] || {};\n    dp[x][y] = 1;\n    change[x] = change[x] || {};\n    change[x][y] = arr[i];\n  }\n  let min = Infinity;\n  let index = 0;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len; j++) {\n      const [x, y] = change[i];\n      if (dp[x][y] > min) {\n        min = dp[x][y];\n        index = [x, y];\n      }\n    }\n  }\n  return index;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that is the total number of characters in all strings of the list less than the other list. If both lists have the same number of characters, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const n1 = lst1.length\n  const n2 = lst2.length\n  const match = lst1.filter(s => lst2.indexOf(s) > -1)\n\n  return match.length === n1? match : match.concat(lst2)\n}\n\n/*\n  Write a function that compares two lists of strings and returns the shortest of the two lists of strings. If the two lists are equal, return the first list.\n\n  Examples\n  equal([1, 2, 3], [1, 2, 3]) ➞ [1, 2, 3]\n  equal(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  equal(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  equal(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst equal = (lst1, lst2) => {\n  return lst1.length === lst2.length? lst1 : lst1.length < lst2.length? lst1 : lst2\n}\n\n/*\n  Write a function that compares two lists of strings and returns the largest of the two lists of strings. If the two lists are equal, return the first list.\n\n  Examples\n  greater([1, 2, 3], [1, 2, 3]) ➞ [1, 2, 3]\n  greater(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin', 'project']\n  greater(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  greater(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst greater = (lst1, lst2) => {\n  return lst1.length === lst2.length? lst1 : lst1.length > lst2.length? lst1 : lst2\n}\n\n/*\n  Write a function that compares two lists of strings and returns the smallest of the two lists of strings. If the two lists are equal, return the first list.\n\n  Examples\n  less([1, 2, 3], [1, 2, 3]) ➞ [1, 2, 3]\n  less(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin', 'project']\n  less(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  less(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst less = (lst1, lst2) => {\n  return lst1.length === lst2.length? lst1 : lst1.length < lst2.length? lst1 : lst2\n}\n\n/*\n  Write a function that takes a list of strings and returns the string that appears most in the list.\n\n  Examples\n  mostOccurring(['hi', 'admin', 'hi', 'hi', 'hi']) ➞ 'hi'\n  mostOccurring(['hi', 'hi', 'hi']) ➞ 'hi'\n  mostOccurring(['4', '5', '6', '7', '8']) ➞ '4'\n*/\nconst mostOccurring = (lst) => {\n  return lst.length === 1? lst[0] : lst.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a = b\n    }\n    return a\n  })\n}\n\n/*\n  Write a function that takes a list of strings and returns the string that appears least in the list.\n\n  Examples\n  leastOccurring(['hi', 'admin', 'hi', 'hi', 'hi']) ➞ 'hi'\n  leastOccurring(['hi', 'hi', 'hi']) ➞ 'hi'\n  leastOccurring(['4', '5', '6', '7', '8']) ➞ '4'\n*/\nconst leastOccurring = (lst) => {\n  return lst.length === 1? lst[0] : lst.reduce((a, b) => {\n    if (a.indexOf(b) === -1) {\n      a = b\n    }\n    return a\n  })\n}\n\n/*\n  Write a function that takes two lists of strings and returns a list of strings that contains the largest number of strings in each list.\n\n  Examples\n  largestNumber([1, 2, 3], [1, 2, 3, 4]) ➞ [1, 3]\n  largestNumber([1, 2, 3], [1, 2, 3, 4, 5]) ➞ [3]\n  largestNumber([1, 2, 3, 4], [1, 2, 3, 4, 5]) ➞ [1, 2]\n  largestNumber([1, 2, 3, 4], [1, 2, 3]) ➞ [3, 4]\n*/\nconst largestNumber = (lst1, lst2) => {\n  const max = Math.max(lst1.length, lst2.length)\n  const n1 = lst1.length\n  const"}
{"task_id": "JavaScript/75", "prompt": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write is a function that returns true if the given number is the multiplication of 3 prime numbers and wrong otherwise. Knowing that (a) is less than 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const sum = a * (a + 1) / 2;\n  let isPrime = true;\n\n  for (let i = 2; i <= sum; i++) {\n    if (a % i === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime;\n};\n\nconst isPrime = (a) => {\n  if (a === 1) return false;\n  let i = 2;\n  while (i * i <= a) {\n    if (a % i === 0) return false;\n    i++;\n  }\n  return true;\n};\n\nconst prime = (a) => {\n  if (a === 1) return false;\n  let i = 2;\n  while (i * i <= a) {\n    if (a % i === 0) return false;\n    i++;\n  }\n  return true;\n};\n\nconst primeFactor = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return i;\n    i++;\n  }\n  return false;\n};\n\nconst isPrimeFactor = (a) => {\n  return primeFactor(a)!== false;\n};\n\nconst isPrimeFactorList = (list) => {\n  return list.every((x) => isPrimeFactor(x));\n};\n\nconst isPrime = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i++;\n  }\n  return true;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) return [i];\n    i++;\n  }\n  return false;\n};\n\nconst primeFactorList = (n) => {\n  if (n === 1) return false;\n  let i ="}
{"task_id": "JavaScript/76", "prompt": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*YOur task is to write a function that returns true if a number x is a simple power of n and in other cases a false one. x is a simple power of n if n * * int = x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) {\n    return true;\n  }\n  if (x === 1) {\n    return true;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  if (n === 1) {\n    return false;\n  }\n  return isSimplePower(x, n / 2);\n};\n\n/*\n  Your task is to write a function that takes a string and returns the number of times the number of times each character appears in the string\n  For example:\n  stringToCharacterCount(\"Hello\") => {\n    'h' => 1\n    'e' => 1\n    'l' => 2\n    'o' => 2\n  }\n  stringToCharacterCount(\"Hello World\") => {\n    'h' => 1\n    'e' => 1\n    'l' => 2\n    'o' => 2\n   '' => 1\n    'w' => 1\n    'r' => 1\n    'd' => 1\n  }\n  stringToCharacterCount(\"Hello World\") => {\n    'h' => 1\n    'e' => 1\n    'l' => 2\n    'o' => 2\n   '' => 1\n    'w' => 1\n    'r' => 1\n    'd' => 1\n  }\n*/\nconst stringToCharacterCount = (str) => {\n  let cMap = {};\n  let countMap = {};\n  str.split(\"\").forEach((char) => {\n    if (cMap[char]) {\n      cMap[char] += 1;\n    } else {\n      cMap[char] = 1;\n    }\n  });\n  Object.keys(cMap).forEach((key) => {\n    if (countMap[key] === undefined) {\n      countMap[key] = 0;\n    }\n    countMap[key] += cMap[key];\n  });\n  return countMap;\n};\n\n/*\n  Your task is to write a function that takes a string and returns a string with each character of the input string in reverse order.\n  For example:\n  stringToReverse(\"Hello\") => \"olleH\"\n  stringToReverse(\"Hello World\") => \"dlrow woH\"\n  stringToReverse(\"Hello World\") => \"dlrow woH\"\n*/\nconst stringToReverse = (str) => {\n  let result = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\nconst isSimpleNumber = (x) => {\n  return typeof x === \"number\" && x % 1 === 0;\n};\n\nconst isPowerOfTwo = (n) => {\n  return n > 0 && (n & (n - 1)) === 0;\n};\n\nconst isSimplePower = (x, n) => {\n  if (isPowerOfTwo(n)) {\n    return x % n === 0;\n  }\n  return isSimplePower(x, n * 2);\n};\n\nconst isPerfectPower = (x, n) => {\n  return x === n && isPowerOfTwo(n);\n};\n\nconst isSimpleNumberOrPower = (x) => {\n  return isSimpleNumber(x) || isSimplePower(x, 2);\n};\n\n/*\n  Your task is to write a function that takes a string and returns a string with each character of the input string in reverse order.\n  For example:\n  stringToReverse(\"Hello\") => \"olleH\"\n  stringToReverse(\"Hello World\") => \"dlrow woH\"\n  stringToReverse(\"Hello World\") => \"dlrow woH\"\n*/\nconst stringToReverse = (str) => {\n  let result = \"\";\n  for (let i = str.length - 1; i >= 0; i--) {\n    result += str[i];\n  }\n  return result;\n};\n\nconst isSimpleNumberOrPower = (x) => {\n  return isSimpleNumber(x) || isSimplePower(x, 2);\n};\n\nconst isPerfectPower = (x, n) => {\n  return x === n && isPowerOfTwo(n);\n};\n\nconst isSimpleNumberOrPower = (x) => {\n  return isSimpleNumber(x) || isSimplePower(x, 2);\n};\n\n/*\n  Your task is to write a function that takes an integer and returns true if it is a perfect power and false otherwise. A perfect power is a number that is the same as its square root.\n  For example:\n  isPerfectPower(3) => true\n  isPerfectPower(4) => true\n  isPerfectPower(5) => true\n  isPerfectPower(6) => false\n*/\nconst isPerfectPower = (n) => {\n  return n > 0 && isSimpleNumberOrPower(Math.sqrt(n));\n};\n\n/*\n  Your task is to write a function that takes a string and returns a boolean indicating whether it is a palindrome. For example:\n  isPalindrome(\"A man, a plan, a canal, Panama\") => true\n  isPalindrome(\"race a car\") => false\n*/\nconst isPalindrome = (str) => {\n  const strArr = str.split(\"\");\n  const isPal = strArr.every((char) => {\n    return char === strArr[strArr.length - 1] && char === strArr[0];\n  });\n  return isPal;\n};\n\n/*\n  Your task is to write a function that takes a string and returns a boolean indicating whether it is a palindrome. For example:\n  isPalindrome(\"A man, a plan, a canal, Panama\") => true\n  isPalindrome(\"race a car\") => false\n*/\nconst isPalindrome = (str) => {\n  const strArr = str.split(\"\");\n  const isPal = strArr."}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integer a and returns true if this ingeger is a die of an integer. Note: You can assume that the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true;\n  }\n  if (a % 6 === 0) {\n    return true;\n  }\n  return false;\n};\n\nexport default iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": false, "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const numHex = num.toUpperCase().split('');\n  const hex = [];\n  for (let i = 0; i < numHex.length; i++) {\n    if (numHex[i]!== 'F') {\n      hex.push(numHex[i].toUpperCase());\n    }\n  }\n  const prime = new Set(\n    Array.from(new Array(10).fill(true)).map((x, i) => i * i + i)\n  );\n  let count = 0;\n  for (let i = 0; i < hex.length; i++) {\n    if (prime.has(hex[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": false, "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = '';\n  while (decimal > 0) {\n    binary += (decimal % 2)? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n  }\n  return binary + 'db';\n};\n\n// Decimal to Binary\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let currentChar = '0';\n  let isLastChar = false;\n  while (binary.length > 0) {\n    currentChar = binary.charAt(0);\n    if (currentChar === '1') {\n      decimal += 1;\n    }\n    if (currentChar === '0') {\n      decimal += 1;\n    }\n    if (isLastChar) {\n      break;\n    }\n    binary = binary.slice(1);\n    isLastChar = true;\n  }\n  return decimal;\n};\n\n// Test Cases\nconst testCases = [\n  {\n    decimal: 15,\n    binary: 'db1111db',\n    decimalBinary: 15,\n  },\n  {\n    decimal: 32,\n    binary: 'db100000db',\n    decimalBinary: 32,\n  },\n  {\n    decimal: -1,\n    binary: 'db1111db',\n    decimalBinary: -1,\n  },\n];\n\n// Test Run\nconst testRun = (testCase) => {\n  console.log(decimalToBinary(testCase.decimal));\n  console.log(decimalToBinary(testCase.decimalBinary));\n};\n\n// Test Main\nconst testMain = () => {\n  for (let i = 0; i < testCases.length; i++) {\n    testRun(testCases[i]);\n  }\n};\n\ntestMain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*YYou get a string s. Your task is to check whether the string is happy or not. A string is happy if it is at least 3 long and all three consecutive letters are clearly distinguishable from each other.\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const l = s.length\n  if (l <= 2) return true\n  const a = s[0]\n  const b = s[1]\n  const c = s[2]\n  if (a == b && b == c) return isHappy(s.slice(3))\n  if (a!= b && a!= c && b!= c) return false\n  const ans = [a, b, c]\n  let sum = 0\n  for (let i = 0; i < l; i++) {\n    sum += ans[i]\n  }\n  return sum % 7 == 0\n}\n\nexport default isHappy\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": false, "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const total = grades.reduce((a, b) => a + b, 0);\n  const a = total / 10;\n  const b = total % 10;\n  if (a >= 3.7) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 3.3) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 3.0) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 2.7) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 2.3) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 2.0) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 1.7) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 1.3) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 1.0) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 0.7) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else if (a >= 0.0) {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  } else {\n    return ['A+', 'A', 'B+', 'B', 'C-'];\n  }\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a string and returns true if the string length is a prime or otherwise wrong\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let length = string.length;\n  for (let i = 2; i < length; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primes = (limit) => {\n  let prime = 1;\n  let isPrime = true;\n  for (let i = 2; i < limit; i++) {\n    if (primeLength(i.toString()) === true) {\n      prime = i;\n      while (primeLength(prime.toString()) === true) {\n        prime += 1;\n      }\n      if (isPrime === true) {\n        console.log(prime);\n        isPrime = false;\n      }\n    }\n  }\n};\n\nprimes(10000);\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  For a positive integer n, the number of n-digit positive integers starting or ending with 1 is returned. * / const startsOneEnds = (n) = > {\n    let result = 0;\n    for (let i = 2; i <= n; i++) {\n      if (i >= Math.pow(10, n)) {\n        break;\n      }\n      result += i;\n    }\n    return result;\n  }\n}\n\nconst startsOneEnds = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds2 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds3 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds4 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds5 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds6 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds7 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds8 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds9 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds10 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds11 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds12 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds13 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds14 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds15 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds16 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds17 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds18 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.pow(10, n)) {\n      break;\n    }\n    result += i;\n  }\n  return result;\n}\n\nconst startsOneEnds19 = (n) = > {\n  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    if (i >= Math.p"}
{"task_id": "JavaScript/84", "prompt": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GIf you use a positive integer N, return the sum total of its digits in binary form.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let num = N\n  let str = []\n  let sum = 0\n\n  while (num > 0) {\n    sum = sum + num % 2\n    num = num / 2\n  }\n\n  while (sum > 0) {\n    str.unshift(sum % 2)\n    sum = sum / 2\n  }\n\n  return str.join('')\n}\n\nconsole.log(solve(10000))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const a = []\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      a.push(lst[i])\n    } else {\n      a.push(a[count] + lst[i])\n      count++\n    }\n  }\n  return a\n}\n\nadd([4, 2, 6, 7])\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string and returns an ordered version of it. The ordered version of string is a string in which all words (separated by spaces) are replaced by a new word in which all characters are ordered in ascending order based on the ascii value. Note: You should keep the order of words and spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const word = /[^\\s]+/g;\n  const arr = s.split(word).map(n => n.toUpperCase());\n  return arr.join('');\n};\n\nconst shuffle = (s) => {\n  const word = /[^\\s]+/g;\n  const arr = s.split(word).map(n => n.toLowerCase());\n  return arr.join('');\n};\n\nconst shuffleArray = (s) => {\n  const word = /[^\\s]+/g;\n  const arr = s.split(word).map(n => n.toUpperCase());\n  return arr.map(e => e);\n};\n\nmodule.exports = {\n  antiShuffle,\n  shuffle,\n  shuffleArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const [len1, len2] = [len, len]\n  const ret = []\n  \n  for (let row = 0; row < len1; row++) {\n    let col = 0\n    const rowList = lst[row]\n    \n    while (col < len2) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      } else {\n        col += 1\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow2 = (lst, x) => {\n  const ret = []\n  \n  for (let row = 0; row < lst.length; row++) {\n    const rowList = lst[row]\n    \n    for (let col = 0; col < rowList.length; col++) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow3 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = 0; col < rowList.length; col++) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow4 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow5 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow6 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow7 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow8 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow9 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = 0; col < rowList.length; col++) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow10 = (lst, x) => {\n  const len = lst.length\n  const ret = []\n  \n  for (let row = 0; row < len; row++) {\n    const rowList = lst[row]\n    \n    for (let col = rowList.length - 1; col >= 0; col--) {\n      if (rowList[col] === x) {\n        ret.push([row, col])\n        break\n      }\n    }\n  }\n  \n  return ret\n}\n\nconst getRow11 = (lst, x) => {\n  "}
{"task_id": "JavaScript/88", "prompt": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of non-negative integers, return a copy of the given array after sorting. You sort the given array in ascending order if the sum (first index value, last index value) is odd, or sort it in descending order if the sum (first index value, last index value) is even. Note: * Do not change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sorted = array.slice();\n  const length = sorted.length;\n  let i;\n\n  for (i = 0; i < length; i += 1) {\n    sorted[i] = sorted[i].sort();\n  }\n\n  sorted.sort(function(a, b) {\n    return (a + b) % 2 === 0? a - b : b - a;\n  });\n\n  return sorted;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CEncrypt a function that takes a string as argument and returns a string that is encrypted with the rotating alphabet. Rotate the alphabet so that the letters move down by two multiplied by two digits.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let len = s.length\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let encrypted = ''\n\n  while (len--) {\n    let digit = parseInt(s.charCodeAt(len) / 2)\n    digit = alphabet.splice(digit, 1)[0]\n    encrypted += digit\n  }\n  return encrypted\n}\n\n/*CDecrypt a function that takes a string as argument and returns a string that is decrypted with the rotating alphabet. Rotate the alphabet so that the letters move up by two multiplied by two digits.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let len = s.length\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  let decrypted = ''\n\n  while (len--) {\n    let digit = parseInt(s.charCodeAt(len) / 2)\n    digit = alphabet.splice(digit, 1)[digit]\n    decrypted += digit\n  }\n  return decrypted\n}\n\nconst main = () => {\n  let a = 'asdfghjkl'\n  let b = 'et'\n  let c = 'gf'\n  console.log(encrypt(a))\n  console.log(decrypt(c))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function nextSmallest () that returns the second smallest element in the list. Returns zero if there is no such element. nextSmallest ([1, 2, 3, 4, 5]) = = 2 nextSmallest ([5, 1, 4, 3, 2]) = = 2 nextSmallest ([]) = = null nextSmallest ([1, 1]) = = null * / const nextSmallest = (lst) = > {\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      return lst[i + 1];\n    }\n  }\n  return null;\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Boredom is a sentence that begins with the word \"I.\" Sentences are delimited by. \",\"? \"or\"!. \"For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    return S[0].toLowerCase() === 'i'\n};\n\n/*\n  The word \"is\" is also a part of the Boredom. But it is not a sentence, because it can not be used to delimit sentences.\n  If \"is\" is the first word in a sentence, then we can call it \"a sentence\" and the sentence can not contain \"is.\"\n  */\nconst isSentence = (S) => {\n    return S[0].toLowerCase() === 'is'\n};\n\n/*\n  This method converts a sentence into a list of words, delimited by \"and\", \"or\", \"and\", \"or\", \"or\" or \"or\".\n  This is an example of a sentence:\n  >>> isSentence(\"I love this weather\")\n  0\n  >>> isSentence(\"I love this weather and I feel fine\")\n  1\n  >>> isSentence(\"I love this weather and I feel good\")\n  0\n  >>> isSentence(\"I love this weather or I feel good\")\n  0\n  >>> isSentence(\"I love this weather or I feel fine\")\n  1\n  >>> isSentence(\"I love this weather or I feel good and I feel fine\")\n  1\n  >>> isSentence(\"I love this weather and I feel good or I feel fine\")\n  1\n  >>> isSentence(\"I love this weather and I feel good and I feel bad\")\n  0\n  >>> isSentence(\"I love this weather or I feel good and I feel bad\")\n  0\n  >>> isSentence(\"I love this weather and I feel good or I feel bad\")\n  0\n  >>> isSentence(\"I love this weather or I feel good and I feel bad and I feel really good\")\n  0\n  >>> isSentence(\"I love this weather and I feel good and I feel bad or I feel really good\")\n  0\n  >>> isSentence(\"I love this weather and I feel good and I feel bad or I feel really good and I feel really bad\")\n  0\n  >>> isSentence(\"I love this weather and I feel good and I feel bad and I feel really good or I feel really bad\")\n  0\n  >>> isSentence(\"I love this weather and I feel good and I feel bad or I feel really good and I feel really bad and I feel really really good\")\n  0\n  */\nconst sentenceToWords = (S) => {\n    const words = S.split(' ')\n    const sentence = []\n\n    let word = \"\"\n\n    for (let i = 0; i < words.length; i++) {\n        if (i === 0) {\n            sentence.push(words[i])\n        } else if (isSentence(words[i])) {\n            if (word!== \"\") {\n                sentence.push(word)\n                word = \"\"\n            }\n            sentence.push(words[i])\n        } else if (isBored(words[i])) {\n            if (word!== \"\") {\n                sentence.push(word)\n                word = \"\"\n            }\n            sentence.push(words[i])\n        } else {\n            word += words[i] + \" \"\n        }\n    }\n    return sentence\n};\n\n/*\n  This method converts a sentence into a list of words, delimited by \"and\", \"or\", \"and\", \"or\", \"or\", \"or\" or \"or\".\n  This is an example of a sentence:\n  >>> sentenceToWords(\"I love this weather and I feel good and I feel bad and I feel really good\")\n  [\n    'i love this weather',\n    'and',\n    'I feel good',\n    'and',\n    'I feel bad',\n    'and',\n    'I feel really good'\n  ]\n  >>> sentenceToWords(\"I love this weather and I feel good and I feel bad and I feel really good or I feel really bad\")\n  [\n    'i love this weather',\n    'and',\n    'I feel good',\n    'and',\n    'I feel bad',\n    'and',\n    'I feel really good',\n    'or',\n    'I feel really bad'\n  ]\n  >>> sentenceToWords(\"I love this weather and I feel good and I feel bad and I feel really good or I feel really bad\")\n  [\n    'i love this weather',\n    'and',\n    'I feel good',\n    'and',\n    'I feel bad',\n    'and',\n    'I feel really good',\n    'or',\n    'I feel really bad'\n  ]\n  >>> sentenceToWords(\"I love this weather and I feel good and I feel bad and I feel really good or I feel really bad and I feel really really good\")\n  [\n    'i love this weather',\n    'and',\n    'I feel good',\n    'and',\n    'I feel bad',\n    'and',\n    'I feel really good',\n    'or',\n    'I feel really bad',\n    'and',\n    'I feel really really good'\n  ]\n  */\nconst sentenceToWordsBySentence = (S) => {\n    const words = sentenceToWords(S)\n    const sentence = []\n    let word = \"\"\n\n    for (let i = 0; i < words.length; i++) {\n        if (isSentence(words[i])) {\n            if (word!== \"\") {\n                sentence.push(word)\n                word = \"\"\n            }\n            sentence.push(words[i])\n        } else {\n            word += words[i] + \" \"\n        }\n    }\n    return sentence\n};\n\nmodule.exports = {\n    sentenceToWords,\n    sentenceToWordsBySentence\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function consisting of 3 numbers. Returns true if one of the numbers is equal to the sum of the other two and all numbers are integers. Returns false in all other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let sum = x + y + z;\n  return!(isNaN(sum) ||!isFinite(sum) || Math.floor(sum)!== sum);\n};\n\n/*\n  Returns a boolean indicating whether the numbers passed as arguments are all equal.\n  Examples\n  isEqual(5, 5) ➞ true\n  isEqual(5, 5.0) ➞ true\n  isEqual(5, -5) ➞ false\n  isEqual(5, 0) ➞ false\n  isEqual(5, -5, 0) ➞ true\n  isEqual(3.0, 5.0, 3) ➞ true\n  isEqual(3.0, 5.0, 5) ➞ true\n  isEqual(3.0, 3, 5) ➞ false\n  isEqual(3.0, 3, 3) ➞ false\n  isEqual(3, 3.0, 3) ➞ true\n  isEqual(3.0, 5, 5) ➞ false\n  */\nconst isEqual = (...numbers) => {\n  if (numbers.length === 1) {\n    return isNaN(numbers[0]);\n  }\n  if (numbers.length === 0) {\n    return false;\n  }\n  let x = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]!== x) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Returns a boolean indicating whether the number passed as argument is positive.\n  Examples\n  isPositive(5) ➞ true\n  isPositive(-5) ➞ false\n  isPositive(0) ➞ false\n  isPositive(3.0) ➞ true\n  isPositive(-3.0) ➞ false\n  */\nconst isPositive = (x) => x >= 0;\n\n/*\n  Returns a boolean indicating whether the number passed as argument is negative.\n  Examples\n  isNegative(5) ➞ false\n  isNegative(-5) ➞ true\n  isNegative(0) ➞ true\n  isNegative(3.0) ➞ false\n  isNegative(-3.0) ➞ true\n  */\nconst isNegative = (x) => x < 0;\n\n/*\n  Returns a boolean indicating whether the number passed as argument is odd.\n  Examples\n  isOdd(5) ➞ true\n  isOdd(-5) ➞ false\n  isOdd(0) ➞ false\n  isOdd(3.0) ➞ true\n  isOdd(-3.0) ➞ false\n  */\nconst isOdd = (x) => (x % 2 === 1);\n\n/*\n  Returns a boolean indicating whether the number passed as argument is even.\n  Examples\n  isEven(5) ➞ false\n  isEven(-5) ➞ true\n  isEven(0) ➞ true\n  isEven(3.0) ➞ false\n  isEven(-3.0) ➞ true\n  */\nconst isEven = (x) => (x % 2 === 0);\n\n/*\n  Returns a boolean indicating whether the number passed as argument is prime.\n  Examples\n  isPrime(5) ➞ true\n  isPrime(0) ➞ false\n  isPrime(2) ➞ true\n  isPrime(4) ➞ true\n  isPrime(9) ➞ true\n  isPrime(15) ➞ true\n  isPrime(20) ➞ false\n  isPrime(30) ➞ false\n  isPrime(100) ➞ true\n  isPrime(200) ➞ false\n  */\nconst isPrime = (x) => {\n  if (x <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= x; i++) {\n    if (x % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Returns a boolean indicating whether the number passed as argument is a palindrome.\n  Examples\n  isPalindrome(5) ➞ true\n  isPalindrome(-5) ➞ true\n  isPalindrome(0) ➞ false\n  isPalindrome(3.0) ➞ true\n  isPalindrome(-3.0) ➞ true\n  */\nconst isPalindrome = (x) => x.toString() === x.toString().split('').reverse().join('');\n\n/*\n  Returns a boolean indicating whether the number passed as argument is a perfect square.\n  Examples\n  isPerfectSquare(5) ➞ false\n  isPerfectSquare(0) ➞ false\n  isPerfectSquare(9) ➞ true\n  isPerfectSquare(15) ➞ true\n  isPerfectSquare(100) ➞ true\n  isPerfectSquare(200) ➞ true\n  isPerfectSquare(3000) ➞ false\n  */\nconst isPerfectSquare = (x) => isInteger(x) && x * x === x * x * x;\n\n/*\n  Returns a boolean indicating whether the number passed as argument is a prime power.\n  Examples\n  isPrimePower(5) ➞ false\n  isPrimePower(0) ➞ false\n  isPrimePower(3) ➞ true\n  isPrimePower(9) ➞ true\n  isPrimePower(15) ➞ true\n  isPrimePower(100) ➞ true\n  isPrimePower(200) ➞ true\n  isPrimePower(3000) ➞ true\n  */\nconst isPrimePower = (x) => isInteger(x) && isPrime(Math.sqrt(x));\n\n/*\n  Returns a boolean indicating"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that captures a message and encodes it so that it reverses the uppercase letters of all letters and replaces all vowels in the message with the letter that appears 2 places in front of that vowel in the English alphabet. Let's just say letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const regex = /[A-Za-z]/g;\n  let result = '';\n  let isFirstLetter = true;\n  let vowelIndex = 0;\n\n  for (let char of message) {\n    if (isFirstLetter) {\n      result += char.toUpperCase();\n      isFirstLetter = false;\n    } else {\n      if (vowelIndex === 0) {\n        result += char;\n      } else if (vowelIndex === 1) {\n        result += char.toUpperCase();\n      } else if (vowelIndex === 2) {\n        result += char.toLowerCase();\n      }\n    }\n\n    if (char === 'v') {\n      vowelIndex += 1;\n    } else {\n      vowelIndex = 0;\n    }\n  }\n  return result;\n};\n\nencode('This is a message');\nencode('This is a test message');\nencode('This is a test message');\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of integers. You have to find the largest primary value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const largest = lst.reduce((prev, curr, index) => {\n    if (index === lst.length - 1) {\n      return parseInt(curr);\n    }\n\n    return Math.max(parseInt(curr), largest(curr));\n  }, 0);\n\n  return largest.toString(10);\n};\n\nconsole.log(largest(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify a dictionary, you return true if all key strings are lowercase or all key strings are uppercase, otherwise you return false. If the specified dictionary is empty, the function should return false.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let res = true;\n  for(let key in dict){\n    if(dict.hasOwnProperty(key)){\n      if(!(key.match(/[a-zA-Z]/))){\n        res = false;\n      }\n    }\n  }\n  return res;\n};\n\nconst checkWords = (dict, words) => {\n  if(!checkDictCase(dict)){\n    console.log(\"Error: dictionary does not contain all words\");\n  }\n  else{\n    let found = false;\n    for(let word of words){\n      if(dict.hasOwnProperty(word)){\n        found = true;\n      }\n    }\n    if(!found){\n      console.log(\"Error: dictionary does not contain any of the following words: \" + words.join(\", \"));\n    }\n  }\n}\n\ncheckWords({a:\"apple\", b:\"banana\", c:\"cabbage\"}, [\"apple\", \"banana\", \"cabbage\"]);\ncheckWords({a:\"apple\", A:\"banana\", B:\"banana\", c:\"cabbage\"}, [\"apple\", \"banana\", \"cabbage\"]);\ncheckWords({a:\"apple\", b:\"banana\", c:\"cabbage\", A:\"apple\", B:\"banana\", C:\"cabbage\"}, [\"apple\", \"banana\", \"cabbage\"]);\ncheckWords({Name:\"John\", Age:\"36\", City:\"Houston\"}, [\"John\", \"36\", \"Houston\"]);\ncheckWords({Name:\"John\", Age:\"36\", City:\"Houston\", STATE:\"NC\", ZIP:\"12345\" }, [\"John\", \"36\", \"Houston\", \"NC\", \"12345\"]);\ncheckWords({Name:\"John\", Age:\"36\", City:\"Houston\", STATE:\"NC\", ZIP:\"12345\" }, [\"John\", \"36\", \"Houston\", \"NC\", \"12345\"]);\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*IImplement a function that takes a non-negative integer and returns an array of the first n integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const prime = isPrime(n);\n  const upTo = [];\n  const i = 1;\n  while (i < n) {\n    if (prime(i)) {\n      upTo.push(i);\n    }\n    i++;\n  }\n  return upTo;\n};\n\nexport default countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CComplete the function that takes two integers and returns the product of their unit digits. Suppose the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    const a_int = Number(a);\n    const b_int = Number(b);\n    const a_int_digit = Math.log(a_int) / Math.log(10);\n    const b_int_digit = Math.log(b_int) / Math.log(10);\n    const product = a_int_digit * b_int_digit;\n    return product;\n};\n\nmodule.exports = multiply;<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  For a string s, the number of uppercase letters in even indexes is counted.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let i = 0,\n    len = s.length;\n\n  for (i = 0; i < len; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/*\n  For a string s, the number of uppercase letters in odd indexes is counted.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let i = 1,\n    len = s.length;\n\n  for (i = 1; i < len; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      return i;\n    }\n  }\n\n  return 0;\n};\n\n/*\n  For a string s, count the number of words.\n  \n  A word is a string of non-whitespace characters.\n  */\nconst countWords = (s) => {\n  let i = 0,\n    len = s.length,\n    word = false,\n    words = [],\n    wordLen = 0;\n\n  for (i = 0; i < len; i += 1) {\n    if (s[i] ==='') {\n      if (word) {\n        words.push(word);\n        word = false;\n        wordLen = 0;\n      }\n    } else if (word === false) {\n      word = s[i];\n      wordLen = 1;\n    } else {\n      word += s[i];\n      wordLen += 1;\n    }\n  }\n\n  if (word) {\n    words.push(word);\n  }\n\n  return words;\n};\n\nmodule.exports = {\n  countUpper,\n  countLower,\n  countWords\n};<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) that represents a number and returns the nearest integer to it. If the number is equal to two integers, round it from zero. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseInt(value);\n  let closest = number;\n  let difference = Math.abs(number);\n  const remainder = difference % 1;\n  if (remainder === 0) {\n    closest = Math.round(number);\n  } else if (number > 0) {\n    closest = Math.ceil(number);\n  } else {\n    closest = Math.floor(number);\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let numStones = 1;\n  while (numStones < n) {\n    numStones += (numStones % 2)? (n - numStones) + 1 : n - numStones;\n  }\n  return [numStones];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/[,\\s]+/);\n}\n\n/*\n  You get a set of integers separated by commas or spaces. Your task is to split the string into words and return an array of integers.\n  \n  For example:\n  intArray(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  intArray(\"1,2,3,4,5,6,7,8,9,10\") == [1,2,3,4,5,6,7,8,9,10]\n  */\nconst intArray = (s) => {\n  return s.split(/[,\\s]+/);\n}\n\n/*\n  You get a set of numbers separated by commas or spaces. Your task is to split the string into words and return an array of numbers.\n  \n  For example:\n  intArray(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  intArray(\"1,2,3,4,5,6,7,8,9,10\") == [1,2,3,4,5,6,7,8,9,10]\n  */\nconst intArray2 = (s) => {\n  return s.split(/[,\\s]+/);\n}\n\n/*\n  You get a set of words separated by commas or spaces. Your task is to split the string into words and return an array of words.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  return s.split(/[,\\s]+/);\n}\n\n/*\n  Given a set of words, return a set of unique words. \n  \n  For example:\n  wordsUnique(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsUnique(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsUnique = (s) => {\n  var wordSet = new Set();\n  \n  for (var i = 0; i < wordsString(s).length; i++) {\n    wordSet.add(wordsString(s)[i]);\n  }\n  \n  return Array.from(wordSet);\n}\n\n/*\n  Given a set of integers, return a set of unique integers. \n  \n  For example:\n  intUnique(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  intUnique(\"1,2,3,4,5,6,7,8,9,10\") == [1,2,3,4,5,6,7,8,9,10]\n  */\nconst intUnique = (s) => {\n  var intSet = new Set();\n  \n  for (var i = 0; i < intArray(s).length; i++) {\n    intSet.add(intArray(s)[i]);\n  }\n  \n  return Array.from(intSet);\n}\n\n/*\n  Given a set of integers, return a set of unique integers. \n  \n  For example:\n  intUnique(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  intUnique(\"1,2,3,4,5,6,7,8,9,10\") == [1,2,3,4,5,6,7,8,9,10]\n  */\nconst intUnique2 = (s) => {\n  var intSet = new Set();\n  \n  for (var i = 0; i < intArray2(s).length; i++) {\n    intSet.add(intArray2(s)[i]);\n  }\n  \n  return Array.from(intSet);\n}\n\n/*\n  Given a set of words, return a set of unique words. \n  \n  For example:\n  wordsUnique(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsUnique(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsUnique2 = (s) => {\n  var wordSet = new Set();\n  \n  for (var i = 0; i < wordsArray(s).length; i++) {\n    wordSet.add(wordsArray(s)[i]);\n  }\n  \n  return Array.from(wordSet);\n}\n\n/*\n  Given a set of words, return a set of unique words. \n  \n  For example:\n  wordsUnique(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsUnique(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsUnique3 = (s) => {\n  var wordSet = new Set();\n  \n  for (var i = 0; i < wordsArray(s).length; i++) {\n    wordSet.add(wordsArray(s)[i]);\n  }\n  \n  return Array.from(wordSet);\n}\n\n/*\n  Given a set of integers, return a set of unique integers. \n  \n  For example:\n  intUnique(\"1,2,3,4,5,6\") == [1,2,3,4,5,6]\n  intUnique(\"1,2,3,4,5,6,7,8,9,10\") == [1,2,3,4,5,6,7,8,9,10]\n  "}
{"task_id": "JavaScript/102", "prompt": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*TIts function takes two positive numbers x and y and returns the largest even integer, which is in the range [x, y]. If there is no such number, the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x >= y) return -1;\n  if (x === y) return x;\n  return Math.floor(Math.pow(x, y) / 2) - 1;\n}\n\nconst isEven = n => n % 2 === 0;\n\nconst chooseEven = (x, y) => chooseNum(x, y);\n\nconst chooseOdd = (x, y) => chooseNum(x, y) + 1;\n\nconst choose = (x, y) => {\n  if (isEven(x)) return chooseEven(x, y);\n  return chooseOdd(x, y);\n};\n\nconst test = [\n  { x: 1, y: 2, expected: 2 },\n  { x: 1, y: 3, expected: -1 },\n  { x: 2, y: 3, expected: -1 },\n  { x: 3, y: 3, expected: -1 },\n  { x: 4, y: 3, expected: 3 },\n  { x: 5, y: 3, expected: 3 },\n  { x: 6, y: 3, expected: 3 },\n  { x: 7, y: 3, expected: -1 },\n  { x: 8, y: 3, expected: 3 },\n  { x: 9, y: 3, expected: 3 },\n  { x: 10, y: 3, expected: -1 },\n  { x: 11, y: 3, expected: -1 },\n  { x: 12, y: 3, expected: 3 },\n  { x: 13, y: 3, expected: -1 },\n  { x: 14, y: 3, expected: 3 },\n  { x: 15, y: 3, expected: 3 },\n  { x: 16, y: 3, expected: 3 },\n  { x: 17, y: 3, expected: -1 },\n  { x: 18, y: 3, expected: 3 },\n  { x: 19, y: 3, expected: 3 },\n  { x: 20, y: 3, expected: -1 },\n  { x: 21, y: 3, expected: -1 },\n  { x: 22, y: 3, expected: 3 },\n  { x: 23, y: 3, expected: -1 },\n  { x: 24, y: 3, expected: 3 },\n  { x: 25, y: 3, expected: 3 },\n  { x: 26, y: 3, expected: 3 },\n  { x: 27, y: 3, expected: -1 },\n  { x: 28, y: 3, expected: 3 },\n  { x: 29, y: 3, expected: 3 },\n  { x: 30, y: 3, expected: -1 },\n  { x: 31, y: 3, expected: -1 },\n  { x: 32, y: 3, expected: 3 },\n  { x: 33, y: 3, expected: -1 },\n  { x: 34, y: 3, expected: 3 },\n  { x: 35, y: 3, expected: 3 },\n  { x: 36, y: 3, expected: 3 },\n  { x: 37, y: 3, expected: -1 },\n  { x: 38, y: 3, expected: 3 },\n  { x: 39, y: 3, expected: 3 },\n  { x: 40, y: 3, expected: -1 },\n  { x: 41, y: 3, expected: -1 },\n  { x: 42, y: 3, expected: 3 },\n  { x: 43, y: 3, expected: 3 },\n  { x: 44, y: 3, expected: 3 },\n  { x: 45, y: 3, expected: -1 },\n  { x: 46, y: 3, expected: 3 },\n  { x: 47, y: 3, expected: 3 },\n  { x: 48, y: 3, expected: 3 },\n  { x: 49, y: 3, expected: 3 },\n  { x: 50, y: 3, expected: 3 },\n  { x: 51, y: 3, expected: -1 },\n  { x: 52, y: 3, expected: 3 },\n  { x: 53, y: 3, expected: 3 },\n  { x: 54, y: 3, expected: 3 },\n  { x: 55, y: 3, expected: 3 },\n  { x: 56, y: 3, expected: 3 },\n  { x: 57, y: 3, expected: -1 },\n  { x: 58, y: 3, expected: 3 },\n  { x: 59, y: 3, expected: 3 },\n  { x: 60, y: 3, expected: 3 },\n  { x: 61, y: 3, expected: 3 },\n  { x: 62, y: 3, expected: 3 },\n  { x: 63, y: 3, expected: -1 },\n  { x: 64, y: 3, expected: 3 },\n  { x: 65, y: 3, expected: 3 },\n  { x: 66, y: 3, expected: 3 },\n  { x: 67, y: 3, expected: 3 },\n  { x: 68, y: 3, expected: 3 },\n  { x: 69, y: 3, expected: -1 },\n  { x: 70, y: 3, expected: 3 },\n  { x: 71, y: 3, expected: 3 },\n  { x: 72, y: 3, expected: 3 },\n  { x: 73, y: 3, expected: 3 },\n  { x: 74, y: 3, expected: 3 },\n  { x: 75, y: 3, expected: -1 },\n  { x: 76, y: 3, expected: 3 },\n  { x: 77, y: 3, expected: 3 },\n  { x: 78, y: 3, expected: 3 },\n  { x: 79, y: 3, expected: 3 },\n  { x: 80, y: 3, expected: 3 },\n  { x: 81, y: 3, expected: -1 },\n  { x: 82, y: 3, expected: 3 },\n  { x: 83, y: 3, expected: 3 },\n  { x: 84, y: 3, expected:"}
{"task_id": "JavaScript/103", "prompt": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*YYou get two positive integers n and m, and your task is to calculate the average of integers from n to m (including n and m). Round up the answer to the next integer and convert it to binaries. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let result = 0\n  for (let i = n; i <= m; i++) {\n    result += i\n  }\n  return Math.round(result / (m - n + 1))\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GWhen creating a list of positive integers x, return a sorted list of all elements that do not have an even digit. Note: The returned list should be sorted in increasing order. Example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let list = [...Array(x)].filter(x => x < 10);\n  for (let i = 1; i < list.length; i++) {\n    if (list[i] % 2!== 0) {\n      list.splice(i, 1);\n    }\n  }\n  return list;\n};\n\nconsole.log(uniqueDigits(4));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  For an array of integers, you sort the integers that lie between 1 and 9, reverse the resulting array, and then replace each digit with its corresponding name of \"one,\" \"two,\" \"three,\" \"four,\" \"five,\" \"six,\" \"seven,\" \"eight,\" \"nine.\"\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    arr.sort((a, b) => a.length - b.length);\n    return arr.reverse().map(x => x.toString().charAt(0)).join('');\n};\n\nconsole.log(byLength([3, 2, 1, 5, 4, 8, 2, 3]));\nconsole.log(byLength([]));\nconsole.log(byLength([1, -1, 55]));\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement function f, which takes n as parameter, and return a list of the size n, so that the value of the element at index i is the factorial of i if i is even, or the sum of the numbers from 1 to i. i starts with 1. The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    const p = Math.pow(n, 2);\n    return n + p;\n  };\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(factorial(i));\n    } else {\n      result.push(factorial(i) + result[i - 1]);\n    }\n  }\n  return result;\n};\n\nf(6);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a positive integer n, you return a tuple with the number of even and odd integer palindromes within the range (1, n), including.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let even = 0;\n  let odd = 0;\n  for (let i = 1; i < n; i++) {\n    let j = parseInt(String(i).repeat(2), 10);\n    if (isPalindrome(j)) {\n      if (j % 2) {\n        odd++;\n      } else {\n        even++;\n      }\n    }\n  }\n  return [even, odd];\n};\n\nconst isPalindrome = (n) => {\n  if (n === 0) {\n    return false;\n  }\n  let k = n;\n  while (k > 0) {\n    k = k / 10;\n  }\n  return n === parseInt(String(n).repeat(2), 10);\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst isPalindrome = (n) => {\n  return n.toString().replace(/\\d/g, 'd').replace(/d/g, 'd') === n.toString();\n};\n\nconst"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums that takes an array of integers and returns the number of elements that have a sum of digits > 0. If a number is negative, its first signed digit is negative: For example, -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums2 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums3 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums4 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums5 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums6 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums7 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums8 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums9 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums10 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums11 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result += 1;\n      }\n    }\n  }\n  return result;\n};\n\nconst countNums12 = (arr) => {\n  let result = 0;\n  for (let ele of arr) {\n    if (ele > 0) {\n      result += 1;\n    }\n    if (ele < 0) {\n      let signedDigit = ele.toString().charAt(0);\n      let sum = ele + parseInt(signedDigit, 10);\n      if (sum > 0) {\n        result +="}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": false, "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let sorted = sort(arr);\n  let n = arr.length;\n  let i = n - 1;\n  while (i >= 0) {\n    if (sorted[i] < sorted[i + 1]) {\n      break;\n    }\n    i--;\n  }\n  if (i === 0) {\n    return true;\n  }\n  let j = n - 1;\n  while (j > i) {\n    if (sorted[j] > sorted[j - 1]) {\n      break;\n    }\n    j--;\n  }\n  if (j === i) {\n    return true;\n  }\n  return false;\n}\n\nfunction sort(arr) {\n  let n = arr.length;\n  if (n === 0) {\n    return [];\n  }\n  let left = [arr[0]];\n  let right = arr.slice(1);\n  while (n > 1) {\n    let mid = n / 2;\n    let leftLeft = left.slice(0, mid);\n    let rightLeft = right.slice(0, mid);\n    let sortedLeft = sort(leftLeft);\n    let sortedRight = sort(rightLeft);\n    let merged = merge(sortedLeft, sortedRight);\n    left = merged.slice(0, mid);\n    right = merged.slice(mid);\n    n = right.length;\n  }\n  return left;\n}\n\nfunction merge(left, right) {\n  let sorted = [];\n  while (left.length && right.length) {\n    if (left[0] < right[0]) {\n      sorted.push(left[0]);\n      left.shift();\n    } else {\n      sorted.push(right[0]);\n      right.shift();\n    }\n  }\n  if (left.length) {\n    sorted.push(...left);\n  }\n  if (right.length) {\n    sorted.push(...right);\n  }\n  return sorted;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": false, "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  //TODO: Complete the function\n  return \"NO\";\n}\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GIf a string is a lowercase letter separated by spaces, return a dictionary of the letter with the largest repetition and the corresponding number. If several letters have the same occurrence, return all.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {};\n  let count = 0;\n  let max = 0;\n  let letter = '';\n  let countLetter = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (result[test[i]]) {\n      result[test[i]] = result[test[i]] + 1;\n      count = count + 1;\n    } else {\n      result[test[i]] = 1;\n      count = 1;\n    }\n  }\n  for (let i in result) {\n    if (result[i] > max) {\n      max = result[i];\n      letter = i;\n    }\n  }\n  return {\n    letter: letter,\n    count: count\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We get two strings s and c, you have to delete all characters in s that correspond to any character in c, then check if the result string is palindrome. A string is called palindrome if it reads the same backward as forward. You should return a tuple that contains the result string and true / false for verification.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = s.replace(c, '');\n  return [result, result.split('').reverse().join('') === s];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GIf you create a list of strings in which each string consists only of digits, you return a list. Each element i of the output should be \"the number of odd elements in the string i of input,\" with all i's being replaced by the number of odd digits in the i'th string of input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let arr = []\n  for (let i of lst) {\n    let cnt = 0\n    for (let j of i) {\n      if (j % 2!== 0) {\n        cnt++\n      }\n    }\n    arr.push(`the number of odd elements ${cnt} in the string ${i} of input.`)\n  }\n  return arr\n}\n\nconsole.log(oddCount(['1','2','3','4','5','6','7','8','9']))\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, search for the minimum sum of all non-empty sub-arrays of numbers.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let current_sum = 0\n  let current_sum_count = 0\n  let result = 0\n\n  let start = 0\n  let end = nums.length - 1\n\n  for (let i = start; i <= end; i++) {\n    for (let j = i; j <= end; j++) {\n      if (j === i) {\n        current_sum += nums[j]\n      } else {\n        current_sum += nums[j] - nums[i]\n      }\n\n      if (current_sum === 0) {\n        current_sum_count += 1\n      } else {\n        current_sum = 0\n        current_sum_count = 0\n      }\n\n      if (current_sum_count === 2) {\n        result = current_sum\n        break\n      }\n    }\n  }\n\n  return result\n}\n\nconst test = [\n  [2, 3, 4, 1, 2, 4],\n  [-1, -2, -3],\n]\n\nconst expected = [\n  1,\n  -6,\n]\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(`Min sub-array sum: ${minSubArraySum(test[i])}`)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": false, "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  // create array of 1\n  let arr = Array.from(new Array(grid.length)).fill(1);\n  let count = 0;\n\n  // loop through the array and find the max\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        arr[i][j] = 0;\n        count++;\n      }\n    }\n  }\n\n  let minCount = arr.reduce((a, b) => Math.min(a, b));\n\n  // loop through the array again and add 1\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        arr[i][j]++;\n        if (arr[i][j] >= capacity) {\n          count++;\n          arr[i][j] = 0;\n        }\n      }\n    }\n  }\n\n  return count;\n};\n\nconst test = () => {\n  let grid = [\n    [0,0,1,0],\n    [0,1,0,0],\n    [1,1,1,1]\n  ];\n  let grid2 = [\n    [0,0,1,1],\n    [0,0,0,0],\n    [1,1,1,1]\n  ];\n\n  let arr = Array.from(new Array(grid.length)).fill(1);\n  let count = 0;\n  \n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 1) {\n        arr[i][j] = 0;\n        count++;\n      }\n    }\n  }\n\n  let minCount = arr.reduce((a, b) => Math.min(a, b));\n\n  console.log(count);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this kata, you must sort an array of non-negative integers by the number of ones in their binary representation in ascending order. If the number of ones is similar, sort by decimal value. It must be implemented as follows:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let last = -1\n  const sortArr = []\n\n  for (let i = 0; i < arr.length; i++) {\n    const newValue = arr[i]\n    if (newValue > 0) {\n      sortArr.push(newValue)\n      last = newValue\n    } else if (last + 1 > newValue) {\n      sortArr.push(newValue)\n      last = newValue\n    }\n  }\n\n  return sortArr\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": false, "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    if (s.length === 0) return [];\n    const consonants = ['a', 'e', 'i', 'o', 'u', 'y', 'c', 'f', 'h', 'k', 'l','m', 'n', 'p', 'r','s', 't', 'v', 'w', 'x', 'z'];\n    const result = [];\n    for (let i = 0; i < s.length; i++) {\n        const words = [];\n        for (let j = 0; j < s.length; j++) {\n            if (j === i) continue;\n            if (consonants.indexOf(s[j]) === -1) continue;\n            if (words.indexOf(s.slice(i, j + 1))!== -1) continue;\n            words.push(s.slice(i, j + 1));\n        }\n        if (words.length > n) {\n            for (let j = 0; j < words.length - n; j++) {\n                result.push(words.slice(j, j + n));\n            }\n        }\n    }\n    return result;\n}\n\nconst words = selectWords(\"Mary had a little lamb\", 4);\n\nconsole.log(words);<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*YYour task is to find the next vowel between two consonants on the right side of the word (case-insensitive), vowels at the beginning and end do not count, and you return an empty string if you have not found a vowel that meets the above condition, and you can assume that the given string contains only English letters.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if (!word) return ''\n  let vowel = false\n  let previousChar = ''\n  let char = ''\n  let i = 0\n  while (i < word.length) {\n    char = word[i]\n    if (vowel) {\n      if (char === 'a' || char === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        return char\n      }\n    } else if (char === 'a') {\n      vowel = true\n    }\n    if (previousChar === 'a' || previousChar === 'e' || previousChar === 'i' || previousChar === 'o' || previousChar === 'u') {\n      i++\n    } else {\n      i = i + 1\n    }\n    previousChar = char\n  }\n  return ''\n}\n\n/*\n  * Given a string, find the first appearance of any of the given words in the string.\n  *\n  * Return the list of indexes of the given words in the given string, where the strings are given in lowercase letters.\n  *\n  * Example:\n  *\n  * findWords(\"Hello World!\", [\"hello\", \"goodbye\"]) ==> [0, 13]\n  * findWords(\"Hello World!\", [\"hell\", \"good\"]) ==> [0, 6]\n  * findWords(\"Hello World!\", [\"Hello\", \"Goodbye\"]) ==> [0, 7]\n  * findWords(\"Hello World!\", [\"Goodbye\", \"World!\"]) ==> [9, 13]\n  * findWords(\"Hello World!\", [\"World\", \"Hello\"]) ==> []\n  * findWords(\"Hello World!\", [\"Hello\", \"World!\"]) ==> [0, 7]\n  * findWords(\"Hello World!\", [\"Hello!\", \"World!\"]) ==> [0, 7]\n  * findWords(\"Hello World!\", [\"Hello\", \"World\", \"Goodbye\"]) ==> [0, 7, 13]\n  *\n  * You can assume that the given words are always given in lowercase letters, and that the given string always contains only english letters.\n  *\n  * */\nconst findWords = (string, words) => {\n  let result = []\n  for (let i = 0; i < words.length; i++) {\n    let index = string.indexOf(words[i].toLowerCase())\n    if (index!== -1) {\n      result.push(index)\n    }\n  }\n  return result\n}\n\n// Test\n\nlet testString = \"Hello World!\"\nlet words = [\"hello\", \"goodbye\"]\n\nconsole.log(findWords(testString, words))\nconsole.log(getClosestVowel(testString))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You get a list of two strings, both strings consisting only of open brackets' ('or closed brackets') '. Your task is to check if it is possible to concatenate the two strings in a certain order so that the resulting string is good. A string S is considered good if and only if all the brackets in S are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push('(')\n    } else if (lst[i] === ')') {\n      stack.pop()\n    }\n  }\n  return stack.length === 0\n}\n\n/*\n  Given two strings S and T, write a method to determine if S contains all the characters in T in a certain order. For example, if S = 'ab', T = 'abc', then the method should return true, since all the characters are present in T.\n  However, if S = 'abcd', T = 'ab', then the method should return false, since 'cd' is missing.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  containsInOrder('ab', 'abc') == 'Yes'\n  containsInOrder('abcd', 'ab') == 'No'\n  */\nconst containsInOrder = (s, t) => {\n  for (let i = 0; i < t.length; i++) {\n    if (s.indexOf(t[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given two strings S and T, write a method to determine if S contains all the characters in T in a certain order. For example, if S = 'ab', T = 'abc', then the method should return true, since 'ab' is a permutation of 'abc'.\n  However, if S = 'abcd', T = 'ab', then the method should return false, since 'cd' is missing.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  containsInOrder('ab', 'abc') == 'Yes'\n  containsInOrder('abcd', 'ab') == 'No'\n  */\nconst containsInOrder2 = (s, t) => {\n  const map = {}\n  for (let i = 0; i < t.length; i++) {\n    map[t[i]] = 1\n  }\n  for (let i = 0; i < t.length; i++) {\n    if (s.indexOf(t[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string S and a string T, return the index of the first character of T in S. If there's no character of T in S, return -1.\n  For example:\n  find(S = 'abcd', T = 'abc') == 2\n  */\nconst find = (s, t) => {\n  const tMap = {}\n  for (let i = 0; i < t.length; i++) {\n    tMap[t[i]] = 1\n  }\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (tMap[s[i]] === 1) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst test = () => {\n  assert(containsInOrder('ab', 'abc'), 'ab')\n  assert(containsInOrder('abcd', 'ab'), 'No')\n  assert(containsInOrder('ab', 'abc'), 'Yes')\n  assert(containsInOrder2('ab', 'abc'), 'Yes')\n  assert(containsInOrder2('abcd', 'ab'), 'No')\n  assert(containsInOrder2('ab', 'abc'), 'Yes')\n  assert(find('abcd', 'abc') === 2, 'Yes')\n  assert(find('abcd', 'ab') === -1, 'No')\n  assert(find('ab', 'abc') === 2, 'Yes')\n  assert(find('ab', 'ab') === -1, 'No')\n}\n\nif (require.main === module) {\n  test()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  If you specify an array of integers and a positive integer k, you return a sorted list of length k with the maximum k numbers in Arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let index = 0;\n  while (index < k) {\n    let max = arr[index];\n    for (let i = index + 1; i < arr.length; i++) {\n      if (arr[i] > max) {\n        max = arr[i];\n        index = i;\n      }\n    }\n    result.push(max);\n    index++;\n  }\n  return result;\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GIf you create a non-empty list of integers, you return the sum of all odd elements in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return sum % 2 === 1? sum : 0;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  For a non-empty array of integers arr and an integer k, the sum of the elements with a maximum of two digits from the first k elements of arr is returned.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const maxDigits = k;\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  const nums = arr.slice(k).map((x) => {\n    return x.toString();\n  });\n  for (let i = 0; i < nums.length; i++) {\n    let tmp = sum;\n    let index = 0;\n    for (let j = 0; j < nums[i].length; j++) {\n      tmp = tmp + parseInt(nums[i][j]);\n      index++;\n      if (index === maxDigits) break;\n    }\n    sum = tmp;\n  }\n  return sum;\n};\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4));\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": false, "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const list = [];\n  const counter = 1;\n  while (counter <= n) {\n    const isOdd = counter % 2 === 1;\n    if (isOdd) {\n      list.push(counter);\n    }\n    counter = counter * 3 + 1;\n  }\n  return list;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getEvenCollatz(5) returns [1, 2, 4, 5, 8, 10] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the even numbers are only 2, 4, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  const list = [];\n  const counter = 1;\n  while (counter <= n) {\n    const isOdd = counter % 2 === 0;\n    if (!isOdd) {\n      list.push(counter);\n    }\n    counter = counter * 3 + 1;\n  }\n  return list;\n}\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in prime-collatz sequence.\n\n  The Prime-Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is prime, the next term is one half of \n  the previous term. If the previous term is not prime, the next term is the square of the previous term.\n  The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getPrimeCollatz(5) returns [1, 2, 4, 5, 16, 25] # The prime-collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the prime numbers are only 2, 4, and 5.\n  */\nconst getPrimeCollatz = (n) => {\n  const list = [];\n  const counter = 1;\n  while (counter <= n) {\n    const isPrime = isPrime(counter);\n    if (isPrime) {\n      list.push(counter);\n    }\n    counter = counter * 2 + 1;\n  }\n  return list;\n}\n\nexport { getOddCollatz, getEvenCollatz, getPrimeCollatz };\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": false, "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const m = /^\\d{1,2}-\\d{1,2}-\\d{4}$/.exec(date);\n  if (m!== null) {\n    const day = parseInt(m[0].slice(0, 2));\n    const month = parseInt(m[0].slice(3, 5));\n    const year = parseInt(m[0].slice(6));\n    const days = ['01', '03', '05', '07', '08', '10', '12'];\n    const months = ['01', '03', '05', '07', '08', '10', '12'];\n    const monthsDays = ['01', '03', '05', '07', '08', '10', '12', '01', '03', '05', '07', '08', '10', '12'];\n    if (day < 1 || day > 31) {\n      return false;\n    }\n    if (month < 1 || month > 12) {\n      return false;\n    }\n    if (month === 2) {\n      if (year < 0 || year > 2099) {\n        return false;\n      }\n      if (day < 1 || day > 29) {\n        return false;\n      }\n    } else {\n      if (day < 1 || day > 30) {\n        return false;\n      }\n    }\n    if (year < 0 || year > 2099) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* If you specify a word sequence, you return a list of words divided into spaces. If there are no spaces in the text, you should split them into commas. \"If there are no commas, you return the number of lowercase letters in odd order in the alphabet: ord (\" a \") = 0, ord (\" b \") = 1,... ord (\" z \") = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/);\n  const wordsLength = words.length;\n  const oddLetters = [];\n  for (let i = 0; i < wordsLength; i += 2) {\n    oddLetters.push(words[i]);\n  }\n  return oddLetters;\n};\n\nexport default splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* If the list has more than one duplicate of the same number, return false. Suppose there are no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let prev = null\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < lst[i + 1]) {\n      if (prev) {\n        return false\n      }\n      prev = lst[i]\n    } else {\n      if (!prev) {\n        return false\n      }\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You get two intervals, each interval being a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1.start) return false;\n  if (!interval2.start) return false;\n  if (interval1.start < interval2.start) return false;\n  if (interval1.end > interval2.end) return false;\n  if (interval1.end < interval2.start) return false;\n  if (interval1.start > interval2.end) return false;\n  return true;\n};\n\nconsole.log(intersection((-3, -1), (-5, 5)));\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You get an array of integers, and you must return the sum of orders of magnitude multiplied by the product of all the characters of each number in the array, represented by 1, -1, or 0.\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let order = arr[i];\n        if (order === 0) {\n            sum += order * order;\n            continue;\n        }\n        sum += order;\n    }\n    return sum;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": false, "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const m = grid.length\n  const n = grid[0].length\n\n  const dp = new Array(m * n)\n\n  // init\n  for (let i = 0; i < m * n; i++) {\n    dp[i] = [0, i]\n  }\n\n  // base case\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] < k) {\n        dp[i * n + j][1] = grid[i][j]\n      }\n    }\n  }\n\n  let ans = []\n  let cur = dp[0][0]\n\n  while (cur[1] < m * n) {\n    ans.push(cur[0])\n    cur = dp[cur[1]][0]\n  }\n\n  return ans\n}\n\n// ---------------------------------------------------------------------------\n\nconst grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nconst k = 3\nconst ans = minPath(grid, k)\n\nconsole.log(ans)\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EThe Fibonacci sequence is very well known, it has been thoroughly studied by mathematicians in recent centuries, but what people do not know is the Tribonacci sequence. The Tribonacci sequence is defined by repetition: tri (1) = 3 tri (n) = 1 + n / 2 if n is. tri (n) = tri (n - 1) + tri (n - 2) + tri (n + 1) if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let a = 1\n  let b = 1\n  let c = 1\n  while (n > 1) {\n    let tmp = c\n    c = a + b\n    a = b\n    b = tmp\n    n--\n  }\n  return [a, b, c]\n}\n\ntri(3)<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GIf you return a positive integer n, you get the product of the odd digits. If you return 0, all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let cnt = 0;\n  let ans = 1;\n\n  while (n > 0) {\n    let r = n % 10;\n    if (r > 0) {\n      cnt += r;\n    }\n    n = Math.floor(n / 10);\n  }\n\n  for (let i = 0; i < cnt; i++) {\n    ans *= 2;\n  }\n\n  return ans;\n};\n\nmodule.exports = digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let valid = false;\n\n  if(!string) {\n    return valid;\n  }\n\n  let index = 0;\n  let bracketCount = 0;\n  let foundNested = false;\n  let openingBracket = string.charAt(index);\n  let openingBracketIndex = 0;\n  let closingBracket = string.charAt(index);\n  let closingBracketIndex = 0;\n\n  while(index < string.length) {\n    if(openingBracket == string.charAt(index)) {\n      index++;\n      bracketCount++;\n      if(bracketCount > 1) {\n        foundNested = true;\n      }\n    } else if(closingBracket == string.charAt(index)) {\n      index++;\n      bracketCount--;\n      if(bracketCount < 1) {\n        valid = true;\n      }\n    } else {\n      index++;\n    }\n  }\n\n  return valid;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*YYou get a list of numbers. You have to return the sum of the square numbers in the given list and round each element in the list to the top int (ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr * curr, 0);\n  return lst.reduce((prev, curr, i) => prev + curr, sum);\n};\n\nconst lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100];\n\nconsole.log(sumSquares(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns true if the last character in a given string is an alphabetic character and not part of a word, and otherwise incorrect. Note: \"Word\" is a group of characters separated by spaces.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.replace(/\\s+/g, '');\n  return txt.replace(/[^a-zA-Z]+/g, '').length === 0;\n};\n\nconst test = [\n  {\n    txt: 'apple pie',\n    isWord: false\n  },\n  {\n    txt: 'apple pi e',\n    isWord: true\n  },\n  {\n    txt: 'apple pi e '\n  },\n  {\n    txt: 'apple pie '\n  }\n];\n\nconst result = test.map(({ txt, isWord }) => {\n  return {\n    txt,\n    isWord,\n    isALetter: checkIfLastCharIsALetter(txt)\n  };\n});\n\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CReturns the largest index of an element that is not larger or equal to the element immediately in front of it. If no such element exists, it returns -1. The given array will not contain duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length === 0) {\n    return -1\n  }\n  let i = 0\n  while (i < arr.length - 1) {\n    if (arr[i] > arr[i + 1]) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n  const largest = lst[0]\n  const smallest = largest\n  const negatives = largestSmallestIntegers(lst.slice(1))\n  const positives = largestSmallestIntegers(lst.slice(1).reverse())\n  if (negatives.length > 0 && positives.length > 0) {\n    return (Math.min(Math.max(negatives[0], 0), Math.max(positives[0], 0)), Math.min(Math.max(negatives[1], 0), Math.max(positives[1], 0)))\n  }\n  return (largest, smallest)\n}\n\n/**\n  * Create a function that returns a tuple (a, b), where \"a\" is the largest negative integer and \"b\" is the smallest positive integer in a list. If there are no negative or positive integers, return them as zero.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegersInPlace = (lst) => {\n  let largest = lst[0]\n  let smallest = largest\n  lst.slice(1).forEach(x => {\n    if (x < 0) {\n      largest = Math.min(largest, x)\n    }\n    else if (x > 0) {\n      smallest = Math.max(smallest, x)\n    }\n  })\n  return largestSmallestIntegers([largest, smallest])\n}\n\nconst largestSmallestIntegersInPlaceTest = () => {\n  const test = largestSmallestIntegersInPlace([2, 4, 1, 3, 5, 7])\n  console.log(`largestSmallestIntegersInPlaceTest: ${test.toString()}`)\n}\n\nconst largestSmallestIntegersTest = () => {\n  const test = largestSmallestIntegers([2, 4, 1, 3, 5, 7])\n  console.log(`largestSmallestIntegersTest: ${test.toString()}`)\n}\n\nconst largestSmallestIntegersInPlaceTest = () => {\n  const test = largestSmallestIntegersInPlace([2, 4, 1, 3, 5, 7])\n  console.log(`largestSmallestIntegersInPlaceTest: ${test.toString()}`)\n}\n\nlargestSmallestIntegersTest()\nlargestSmallestIntegersInPlaceTest()\nlargestSmallestIntegersInPlaceTest()\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": false, "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        const aFloat = parseFloat(a);\n        const bFloat = parseFloat(b);\n\n        if (aFloat > bFloat) {\n            return a;\n        } else if (bFloat > aFloat) {\n            return b;\n        } else {\n            return null;\n        }\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a > b? a : b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a function that takes two numbers, and returns the larger number.\n  Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        const aFloat = parseFloat(a);\n        const bFloat = parseFloat(b);\n\n        if (aFloat > bFloat) {\n            return a;\n        } else if (bFloat > aFloat) {\n            return b;\n        } else {\n            return null;\n        }\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a > b? a : b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a function that takes two numbers, and returns the smaller number.\n  Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo2 = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        const aFloat = parseFloat(a);\n        const bFloat = parseFloat(b);\n\n        if (aFloat < bFloat) {\n            return a;\n        } else if (bFloat < aFloat) {\n            return b;\n        } else {\n            return null;\n        }\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a < b? a : b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a function that takes two numbers, and returns the smaller number.\n  Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo3 = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        const aFloat = parseFloat(a);\n        const bFloat = parseFloat(b);\n\n        if (aFloat < bFloat) {\n            return a;\n        } else if (bFloat < aFloat) {\n            return b;\n        } else {\n            return null;\n        }\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a < b? a : b;\n    } else {\n        return null;\n    }\n};\n\n/*\n  Create a function that takes two numbers, and returns the smaller number.\n  Return null if the values are equal.\n  Note: If a number is represented as a string, the floating point might be. or,\n\n  compareTwo(1, 2.5) ➞ 2.5\n  compareTwo(1, \"2,3\") ➞ \"2,3\"\n  compareTwo(\"5,1\", \"6\") ➞ \"5\"\n  compareTwo(\"1\", 1) ➞ null\n  */\nconst compareTwo4 = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        const aFloat = parseFloat(a);\n        const bFloat = parseFloat(b);\n\n        if (aFloat > bFloat) {\n            return a;\n        } else if (bFloat > aFloat) {\n            return b;\n        } else {\n            return null;\n        }\n    } else if (typeof a === \"number\" && typeof b === \"number\") {\n        return a > b? a : b;\n    } else {\n        return null;\n    }\n};\n\nconst values = [\n    1,\n    2.5,\n    \"2,3\",\n    \"5,1\",\n    1\n];\n\nconst results = values.map(compareOne);\n\nconsole.log(\"Compare 1\");\nconsole.log(results);\n\nresults.forEach(function (result) {\n    console.log(\"compareOne(\" + result + \", \" + values[1] + \")\");\n    console.log(result);\n});\n\nresults = values.map(compareTwo);\n\nconsole.log(\"Compare 2\");\nconsole.log(results);\n\nresults.forEach(function (result) {"}
{"task_id": "JavaScript/138", "prompt": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Eevaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0) && (n > 4) && (n % 4 === 0)\n}\n\nconst isSumOfDigits = (n) => {\n  return (n % 10 === 0) && (n > 10)\n}\n\nconst getLengthOfSum = (n) => {\n  return (Math.log(n) / Math.log(10)) + 1\n}\n\nconst getUniqueDigits = (n) => {\n  const uniqueDigits = []\n  for (let i = 1; i < n; i++) {\n    const lengthOfSum = getLengthOfSum(i)\n    for (let j = 0; j < lengthOfSum; j++) {\n      const currentDigits = [...uniqueDigits, i * 10 + j]\n      if (isSumOfDigits(currentDigits.reduce((a, b) => a + b, 0))) {\n        uniqueDigits.push(i * 10 + j)\n      }\n    }\n  }\n  return uniqueDigits\n}\n\nconsole.log(getUniqueDigits(9))\nconsole.log(getUniqueDigits(19))\nconsole.log(getUniqueDigits(37))\nconsole.log(getUniqueDigits(10))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian faculty is defined as: brazilian _ factorial (n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 for example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // const specialFactorial = (n) => n!* (n-1)!* (n-2)!*... * 1;\n  let factorial = 1;\n  // const factorial = (n) => n!* (n-1)!* (n-2)!*... * 1;\n\n  for (let i = 2; i <= n; i++) {\n    factorial *= i;\n  }\n\n  return factorial;\n};\n\nconsole.log(specialFactorial(3));\nconsole.log(specialFactorial(4));\nconsole.log(specialFactorial(10));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  For a string text, replace all spaces in it with underscores, and if a string has more than 2 consecutive spaces, replace all consecutive spaces with - fixSpaces (\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/ /g, '_').replace(/\\s{2,}/g, '-');\n}\n\n/**\n  Replaces a string of -'s with a space, and then replaces all the spaces with underscores\n  fixPunctuation(\"This-is-good\") == \"This-is-good\"\n  fixPunctuation(\"This is good\") == \"This_is_good\"\n  fixPunctuation(\"This is-good\") == \"This_is_good\"\n  fixPunctuation(\"This is, good\") == \"This_is, good\"\n  fixPunctuation(\"This is good.\") == \"This_is_good.\"\n  fixPunctuation(\"This is good.  \") == \"This_is_good.  \"\n  */\nconst fixPunctuation = (text) => {\n    return text.replace(/\\s/g, '_').replace(/-/g, '_');\n}\n\n/**\n  Replaces a string of dashes with underscores\n  fixDashes(\"Example\") == \"Example\"\n  fixDashes(\"Example 1\") == \"Example_1\"\n  fixDashes(\"Example-1\") == \"Example_1\"\n  fixDashes(\"Example--1\") == \"Example_1\"\n  */\nconst fixDashes = (text) => {\n    return text.replace(/-/g, '_');\n}\n\n/**\n  Replaces a string of dashes with underscores\n  fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example_1\"\n  fixPunctuation(\"Example-1\") == \"Example_1\"\n  fixPunctuation(\"Example--1\") == \"Example_1\"\n  */\nconst fixDoubleDashes = (text) => {\n    return text.replace(/\\s{2,}/g, '_');\n}\n\n/**\n  Replaces an initial string of dashes with underscores\n  fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example_1\"\n  fixPunctuation(\"Example-1\") == \"Example_1\"\n  */\nconst fixInitialDashes = (text) => {\n    return text.replace(/-/g, '_');\n}\n\n/**\n  Returns the text, with all spaces replaced with underscores,\n  and all punctuation removed\n  fixPunctuation(\"Example\") == \"Example\"\n  fixPunctuation(\"Example 1\") == \"Example_1\"\n  fixPunctuation(\"Example-1\") == \"Example_1\"\n  */\nconst fixPunctuationAll = (text) => {\n    return fixDashes(fixPunctuation(fixSpaces(fixPunctuation(text))));\n}\n\nmodule.exports = {\n    fixSpaces,\n    fixPunctuation,\n    fixDashes,\n    fixDoubleDashes,\n    fixInitialDashes,\n    fixPunctuationAll\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": false, "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    var check_str = file_name.replace(/\\s+/g, '');\n    if (check_str.match(/[0-9]+$/))\n        return 'No';\n    if (check_str.match(/^[a-zA-Z]/))\n        return 'No';\n    if (check_str.match(/\\.txt$/))\n        return 'Yes';\n    if (check_str.match(/\\.exe$/))\n        return 'Yes';\n    if (check_str.match(/\\.dll$/))\n        return 'Yes';\n    return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n    var check_str = file_name.replace(/\\s+/g, '');\n    if (check_str.match(/^[a-zA-Z]+$/))\n        return 'No';\n    if (check_str.match(/\\.txt$/))\n        return 'Yes';\n    if (check_str.match(/\\.exe$/))\n        return 'Yes';\n    if (check_str.match(/\\.dll$/))\n        return 'Yes';\n    return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n    var check_str = file_name.replace(/\\s+/g, '');\n    if (check_str.match(/^[a-zA-Z]+$/))\n        return 'No';\n    if (check_str.match(/\\.txt$/))\n        return 'Yes';\n    if (check_str.match(/\\.exe$/))\n        return 'Yes';\n    if (check_str.match(/\\.dll$/))\n        return 'Yes';\n    return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck4 = (file_name) => {\n    var check_str = file_name.replace(/\\s+/g, '');\n    if (check_str.match(/^[a-zA-Z]+$/))\n        return 'No';\n    if (check_str.match(/\\.txt$/))\n        return 'Yes';\n    if (check_str.match(/\\.exe$/))\n        return 'Yes';\n    if (check_str.match(/\\.dll$/))\n        return 'Yes';\n    return 'No';\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these:"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": false, "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const lstLength = lst.length\n  if (lstLength === 0) {\n    return 0\n  }\n  let sum = 0\n  for (let i = 0; i < lstLength; i += 1) {\n    const num = lst[i]\n    if (i % 3 === 0) {\n      sum += num * num\n    } else if (i % 4 === 0) {\n      sum += num * num * num\n    } else {\n      sum += num\n    }\n  }\n  return sum\n}\n\n// TEST\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,2,3,4,5]))\nconsole.log(sumSquares([1,2,3,4,5,6]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8]))\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You get a string that represents a sentence, the sentence contains some words separated by a space, and you have to return a string that contains the words of the original sentence, the length of which is primes, the order of the words in the new string should be the same as the original.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  let i = 1,\n    j = 0,\n    len = words.length,\n    count = 0,\n    newWord = ''\n  for (i = 1; i < len; i++) {\n    if (isPrime(i)) {\n      count++\n    }\n  }\n\n  if (count === 0) {\n    newWord = words[0]\n  } else {\n    for (i = 0; i < words.length; i++) {\n      if (isPrime(i + 1)) {\n        newWord = newWord + words[i] +''\n      } else {\n        newWord = newWord + words[i]\n      }\n    }\n  }\n  return newWord\n}\n\nconst isPrime = (number) => {\n  let i = 2\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": false, "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const parts = x.split(\"/\").map(Number);\n  const num = parts[0];\n  const den = parts[1];\n  if (num.length === 0 || num === 0) {\n    return false;\n  }\n  if (den.length === 0 || den === 0) {\n    return true;\n  }\n  return num === Math.floor(num / den) && den === Math.floor(den / num);\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that sorts the specified list of integers in ascending order according to the sum of their digits. Note: If there are several elements with a similar sum of their digits, order them by their index in the original list. Example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  return nums.sort((a, b) => {\n    const diff = a - b;\n    return diff > 0? 1 : diff < 0? -1 : 0;\n  });\n};\n\nexport {\n  orderByPoints,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write is a function that takes a number array as input and returns the number of elements in the array that are greater than 10 and are both the first and last digits of a number odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const odd = nums.filter((n) => n % 2 === 1)\n  const firstAndLast = nums.filter((n) => n % 10 === 1 && n % 100!== 11)\n  return odd.length + firstAndLast.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  For each i (1 ≤ i ≤ n) the value of a [i] = i * i - i + 1 is given. You give the number of triples (a [i], a [j], a [k]) from a where i < j < k and a [i] + a [j] + a [k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let t = []\n  for (let i = 0; i < a.length - 1; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        t.push([a[i], a[j], a[k]])\n      }\n    }\n  }\n  return t.filter(([a, b, c]) => {\n    return a + b + c % 3 === 0\n  })\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": false, "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  const sun = \"Sun\"\n  const distance = (planet1, planet2) => {\n    return Math.sqrt(Math.pow(planet1.x - planet2.x, 2) + Math.pow(planet1.y - planet2.y, 2))\n  }\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\nconst allOrbits = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst bf2 = (planet1, planet2) => {\n  return allOrbits(planet1, planet2)\n}\n\nconst closestOrbit = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst closestOrbit2 = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst closestOrbit3 = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst closestOrbit4 = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return distance(planet1, planet2) <= 1.5\n  }\n  const sort = (planet1, planet2) => {\n    if (planet1 === planet2) return \"Sun\"\n    if (planet1 === \"Sun\") return planet2\n    if (planet2 === \"Sun\") return planet1\n    return distance(planet1, planet2)\n  }\n  return (planet1, planet2) => {\n    return (\n      (closeOrbit(planet1, planet2)?\n        planetNames.filter(x => sort(planet1, x) === sort(planet2, x)) :\n        []\n      )\n    )\n  }\n}\n\nconst closestOrbit5 = (planet1, planet2) => {\n  const closeOrbit = (planet1, planet2) => {\n    return"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const l = lst.length;\n  let last_sum = 0;\n  const new_lst = [];\n  for (let i = 0; i < l; i++) {\n    const curr = lst[i];\n    last_sum += curr.length;\n    if (last_sum % 2!== 0) {\n      new_lst.push(curr);\n    }\n  }\n  return new_lst.sort((a, b) => a.length - b.length);\n};\n\n/*\n  Write a function that accepts a list of integers as a parameter,\n  sorts the list in ascending order,\n  and returns the list in sorted order.\n  The list may contain duplicates.\n  The order of the list should be ascending by length of each number, and you\n  should return the list sorted by that rule.\n  For example:\n  assert sorted_list_sum([3, 2, 1, 5, 3]) => [1, 2, 3, 3, 5]\n  assert sorted_list_sum([3, 2, 1, 5]) => [1, 2, 3, 5]\n  assert sorted_list_sum([1, 2, 3]) => [1, 2, 3]\n  assert sorted_list_sum([]) => []\n  assert sorted_list_sum([1, 2, 3, 2, 1]) => [1, 2, 3, 2, 1]\n  */\nconst sortedListSum = (lst) => {\n  const l = lst.length;\n  let last_sum = 0;\n  const new_lst = [];\n  for (let i = 0; i < l; i++) {\n    const curr = lst[i];\n    last_sum += curr;\n    if (last_sum % 2!== 0) {\n      new_lst.push(curr);\n    }\n  }\n  return new_lst.sort((a, b) => a - b);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program that should return the value of x if n is a prime and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = n => {\n  if (n < 2) {\n    return false;\n  } else if (n === 2) {\n    return true;\n  } else if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primeCount = (max) => {\n  const count = 0;\n  for (let i = 2; i <= max; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport { xOrY, isPrime, primeCount };\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": false, "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const result = 0;\n  if (lst.length === 0) {\n    return result;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const n = lst[i];\n    if (n!== 0 && n % 2 === 1) {\n      sum += n * n;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": false, "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let {length} = game.length\n  let {length} = guess.length\n  let result = []\n  for(let i = 0; i < length; i++) {\n    if(game[i] === guess[i]) {\n      result.push(0)\n    } else {\n      let diff = Math.abs(game[i] - guess[i])\n      result.push(diff)\n    }\n  }\n  return result\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": false, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_names = extensions.map(ext => ext.toLowerCase());\n  const strength = extension_names.reduce((a, b) => {\n    const cap_a = a.replace(/[^A-Z]/g, '').length;\n    const cap_b = b.replace(/[^A-Z]/g, '').length;\n    const diff = cap_a - cap_b;\n    return (diff > 0? diff : 0);\n  });\n  const ext_name = class_name + '.' + extension_names[strength];\n  return ext_name;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": false, "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const aArr = a.split(\"\");\n  const bArr = b.split(\"\");\n  return aArr.every(i => bArr.indexOf(i) > -1)\n}\n\nconst solution = cycpatternCheck(\"whassup\",\"psus\")\n\nconsole.log(solution)\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GReturns a tuple with even or odd digits.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 1;\n    let odd = 1;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (odd, even);\n};\n\nexport {\n    evenOddCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  With a positive integer, you get your Roman number equivalent as a string and return it in lowercase letters. Limitations: 1 < = number < = 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 0) {\n    throw new Error('number should be positive')\n  }\n\n  let roman = []\n  for (let i = 1; i < number; i++) {\n    roman.push(i)\n  }\n\n  let num = number - 1\n  while (num > 0) {\n    let num = number - 1\n    for (let i = roman.length - 1; i >= 0; i--) {\n      if (num == 0) {\n        break\n      }\n\n      let i = roman.length - 1\n      if (num <= roman[i]) {\n        roman[i] = roman[i] - num\n        num = 0\n        break\n      }\n\n      num -= roman[i]\n    }\n  }\n\n  return roman.reverse().join('')\n}\n\nmodule.exports = intToMiniRoman\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if(a === b && b === c) return true\n  if(a === c && b === c) return true\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle3 = (a, b, c) => {\n  if(a === b && b === c) return true\n  if(a === c && b === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle4 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle5 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle6 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle7 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle8 = (a, b, c) => {\n  if(a === b && b === c && b === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle9 = (a, b, c) => {\n  if(a === b && b === c && c === a) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle10 = (a, b, c) => {\n  if(a === b && b === c && b === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90 degrees.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle11 = (a, b, c) => {\n  if(a === b && b === c && a === c) return true\n  return false\n}\n\n/*\n Given the length of the three sides of a triangle. Returns true if the three sides form a right-angled triangle, otherwise wrong. A right-angled triangle is a triangle in which an angle is right-angled or 90"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": false, "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const len = words.length;\n  const map = new Map();\n  for (let i = 0; i < len; i += 1) {\n    let max = map.get(words[i]);\n    if (!max) {\n      max = words[i];\n      map.set(words[i], words[i]);\n    } else {\n      if (words[i].length > max.length) {\n        max = words[i];\n      }\n    }\n  }\n  return max;\n}\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": false, "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const need_without_remaining = number - remaining\n  const number_eaten = need_without_remaining - number\n\n  // If there are not enough remaining carrots, we can't eat anything.\n  if (number_eaten <= 0) {\n    return [number, remaining]\n  }\n\n  return [ number_eaten, remaining - number_eaten ]\n}\n\nconst [total, remaining] = eat(3, 8, 10)\n\nconsole.log(`You have eaten ${total} carrots.\nYou still have ${remaining} left.`)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": false, "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    // check number of operators and operands\n    if (operator.length < 2 || operand.length < 2) {\n        throw new Error('Operator list length must be at least 2');\n    }\n\n    // iterate through operators\n    const result = 0;\n    for (let i = 0; i < operator.length; i++) {\n        // iterate through operands\n        let operandResult = 0;\n        for (let j = 0; j < operand.length; j++) {\n            // perform operation\n            operandResult = operandResult * 10 + operand[j];\n            if (operator[i] == '+') {\n                operandResult += result;\n            } else if (operator[i] == '-') {\n                operandResult -= result;\n            } else if (operator[i] == '*') {\n                operandResult *= result;\n            } else if (operator[i] == '//') {\n                operandResult /= result;\n            } else if (operator[i] == '**') {\n                operandResult **= result;\n            }\n        }\n\n        // save result\n        result = operandResult;\n    }\n    return result;\n};\n\n// tests\nlet tests = [\n    ['2+3*4-5', 9],\n    ['2+3*4', 7],\n    ['2+3*4-', 9],\n    ['2*3+4', 7],\n    ['2*3-4', 7],\n    ['2*3-', 9],\n    ['2*3-', 9],\n    ['2+3-4', 6],\n    ['2+3-', 9],\n    ['2+3*4*5', 285],\n    ['2*3*4-5', 285],\n    ['2-3*4+5', 15],\n    ['2*3-4-5', -5],\n    ['2*3-4+5', 15],\n    ['2*3-4*5', -5],\n    ['2*3+4-5', 15],\n    ['2*3+4*5', 285],\n    ['2*3+4*5-5', 285],\n    ['2*3*4+5', 285],\n    ['2*3-4-5*6', -5 * 6],\n    ['2*3-4+5*6', 15 * 6],\n    ['2*3+4-5*6', 15 * 6],\n    ['2*3-4*5-6', -5 * 6],\n    ['2*3-4+5*6', 15 * 6],\n    ['2*3+4*5-6', 15 * 6],\n    ['2*3-4*5+6', 15 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2+3*4*5-6', 285 * 6],\n    ['2+3*4*5+6', 285 * 6],\n    ['2+3*4*5*6', 285 * 6],\n    ['2-3*4+5*6', -5 * 6],\n    ['2*3-4-5*6', -5 * 6],\n    ['2*3-4+5*6', -5 * 6],\n    ['2*3+4-5*6', -5 * 6],\n    ['2*3+4*5+6', 285 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3-4-5*6', -5 * 6],\n    ['2*3-4+5*6', -5 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3*4+5*6', 285 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3-4*5+6', -5 * 6],\n    ['2*3+4*5+6', 285 * 6],\n    ['2*3-4*5*6', -5 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3*4-5*6', -5 * 6],\n    ['2*3+4-5*6', -5 * 6],\n    ['2*3-4*5*6', -5 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3-4-5*6', -5 * 6],\n    ['2*3-4+5*6', -5 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2*3+4*5*6-6', 285 * 6],\n    ['2*3*4+5*6', 285 * 6],\n    ['2*3-4*5-6', -5 * 6],\n    ['2*3+4*5-6', -5 * 6],\n    ['2*3-4*5+6', -5 * 6],\n    ['2*3+4*5*6', 285 * 6],\n    ['2"}
{"task_id": "JavaScript/161", "prompt": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*YIf s [i] is a letter, the uppercase letter is reversed from the bottom to the top or vice versa, otherwise it remains as it is. If the string contains no letters, the string is reversed. The function should return the resulting string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  return s.split('').reduce((a, b) => {\n    if (a[0] === b) {\n      return a;\n    } else if (a[0] === b.toUpperCase()) {\n      return a.slice(0, -1).concat(b.toUpperCase(), a[1]).join('');\n    } else if (a[0] === b.toLowerCase()) {\n      return a.slice(0, -1).concat(b.toLowerCase(), a[1]).join('');\n    } else {\n      return a;\n    }\n  }, []).join('');\n}\n\n/*\n  function solve(s) {\n    return s.split('').reverse().join('');\n  }\n*/\n\n// console.log(solve('1a2b3c'));\n// console.log(solve('123a'));\n// console.log(solve('a@b@C'));\n// console.log(solve('abac'));\n// console.log(solve('a1b2c3'));\n// console.log(solve('a1b2c'));\n// console.log(solve('#a#@b@c'));\n// console.log(solve('#A#@B#@c'));\n// console.log(solve('A@b@C'));\n// console.log(solve('A@B@C'));\n// console.log(solve('aA@b@C'));\n// console.log(solve('aA@b@c'));\n// console.log(solve('a@b@C'));\n// console.log(solve('a@b@C'));\n// console.log(solve('@a@b@c'));\n// console.log(solve('@a@b@c'));\n// console.log(solve('@A@B@c'));\n// console.log(solve('@A@B@c'));\n// console.log(solve('aA@b@c'));\n// console.log(solve('aA@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('@b@c'));\n// console.log(solve('@b@c'));\n// console.log(solve('@c'));\n// console.log(solve('@c'));\n// console.log(solve('@C'));\n// console.log(solve('@C'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b@c'));\n// console.log(solve('a@b"}
{"task_id": "JavaScript/162", "prompt": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  If you return a string \"text,\" you return the corresponding md5 hash string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  This will convert a string to a hex string.\n  If you return a string \"text,\" you return the corresponding hex string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToHex('Hello world') == '68656c6c6f20776f726c64'\n  */\nconst stringToHex = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  This will convert a hex string to a string.\n  If you return a string \"text,\" you return the corresponding hex string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToHex('68656c6c6f20776f726c64') == 'Hello world'\n  */\nconst stringToHex = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  This will convert a hex string to a string.\n  If you return a string \"text,\" you return the corresponding hex string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToHex('68656c6c6f20776f726c64') == 'Hello world'\n  */\nconst stringToHex = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  This will convert a string to a base64 string.\n  If you return a string \"text,\" you return the corresponding base64 string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBase64('Hello world') == 'SGVsbG8sIHdvcmxk'\n  */\nconst stringToBase64 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('base64');\n};\n\n/**\n  This will convert a base64 string to a string.\n  If you return a string \"text,\" you return the corresponding base64 string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBase64('SGVsbG8sIHdvcmxk') == 'Hello world'\n  */\nconst stringToBase64 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('base64');\n};\n\n/**\n  This will convert a base64 string to a string.\n  If you return a string \"text,\" you return the corresponding base64 string. If \"text\" is an empty string, you return zero.\n\n  >>> stringToBase64('SGVsbG8sIHdvcmxk') == 'Hello world'\n  */\nconst stringToBase64 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('base64');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  For two positive integers a and b, return the even digits between a and b in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n\n  result.sort((a, b) => a - b);\n\n  let last = result.pop();\n  while (result.length > 0) {\n    last = result.pop() + last;\n    result.push(last);\n  }\n\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
