{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const len = numbers.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) <= threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  // Get the current character.\n  const currentChar = paren_string[0];\n  // Add this character to the output array.\n  let output = [currentChar];\n  // If the current character is ')', set the current_string to the empty string.\n  let current_string = '';\n  // If the current character is '(' and the previous character is ')', set current_string to ')()'.\n  // Set the current_string to the empty string otherwise.\n  if (currentChar === ')' && paren_string[1] === '(') {\n    current_string = ')()';\n  } else {\n    current_string = '';\n  }\n  // Keep going while we have characters to add to the output array and the current_string is not empty.\n  while (current_string!== '') {\n    // Add the next character to the current_string.\n    current_string += paren_string[1];\n    // Set the current character to the next character.\n    currentChar = paren_string[1 + 1];\n    // If the current character is ')', set the current_string to ')()' and set the current_string to the empty string.\n    if (currentChar === ')') {\n      current_string = ')()';\n    } else {\n      current_string = '';\n    }\n    // Add the current_string to the output array.\n    output.push(current_string);\n  }\n  // Return the output array.\n  return output;\n};\n\n/*\n  Input to this functoin is a string containing multiple numbers. Your goal is to return a list of those numbers.\n  Ignore any spaces in the input string.\n  >>> separateNumbers('1 2 3 4 5')\n  [1, 2, 3, 4, 5]\n  */\nconst separateNumbers = (number_string) => {\n  // Get the current character.\n  const currentChar = number_string[0];\n  // Add this character to the output array.\n  let output = [currentChar];\n  // Keep going while we have characters to add to the output array and the current_string is not empty.\n  while (number_string[1]!== '') {\n    // Add the next character to the current_string.\n    output.push(number_string[1]);\n    // Set the current character to the next character.\n    currentChar = number_string[1 + 1];\n    // Add the current_string to the output array.\n    output.push(currentChar);\n  }\n  // Return the output array.\n  return output;\n};\n\n/*\n  Input to this functoin is a string containing multiple words. Your goal is to return a list of those words.\n  Ignore any spaces in the input string.\n  >>> separateWords('hello world')\n  ['hello', 'world']\n  */\nconst separateWords = (word_string) => {\n  // Get the current character.\n  const currentChar = word_string[0];\n  // Add this character to the output array.\n  let output = [currentChar];\n  // Keep going while we have characters to add to the output array and the current_string is not empty.\n  while (word_string[1]!== '') {\n    // Add the next character to the current_string.\n    output.push(word_string[1]);\n    // Set the current character to the next character.\n    currentChar = word_string[1 + 1];\n    // Add the current_string to the output array.\n    output.push(currentChar);\n  }\n  // Return the output array.\n  return output;\n};\n\n/*\n  Input to this functoin is a string containing multiple words. Your goal is to return a list of those words.\n  Ignore any spaces in the input string.\n  >>> separateWords(' hello world ')\n  ['hello', 'world']\n  */\nconst separateWords2 = (word_string) => {\n  // Get the current character.\n  const currentChar = word_string[0];\n  // Add this character to the output array.\n  let output = [currentChar];\n  // Keep going while we have characters to add to the output array and the current_string is not empty.\n  while (word_string[1]!== '') {\n    // Add the next character to the current_string.\n    output.push(word_string[1]);\n    // Set the current character to the next character.\n    currentChar = word_string[1 + 1];\n    // Add the current_string to the output array.\n    output.push(currentChar);\n  }\n  // Return the output array.\n  return output;\n};\n\n/*\n  Input to this functoin is a string containing multiple words. Your goal is to return a list of those words.\n  Ignore any spaces in the input string.\n  >>> separateWords2(' hello world ')\n  ['hello', 'world']\n  */\nconst separateWords3 = (word_string) => {\n  // Get the current character.\n  const currentChar = word_string[0];\n  // Add this character to the output array.\n  let output = [currentChar];\n  // Keep going while we have characters to add to the output array and the current_string is not empty.\n  while (word_string[1]!== '') {\n    // Add the next character to the current_string.\n    output.push(word_string[1]);\n    // Set the current character to the next character.\n    currentChar = word_string[1 + 1];\n    // Add the current_string to the output array.\n    output.push(currentChar);\n    // Set the current character to the next character.\n    currentChar = word_string[1 + 2];\n    // Add the current_string to the output array.\n    output.push(currentChar);\n  }\n  // Return the output array.\n  return output;\n};\n\n/*\n  Input to this functoin is a string containing multiple words. Your goal is to return a list of those"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let result = number;\n\n  const index = result.toString().indexOf('.');\n\n  if (index!== -1) {\n    const decimalPart = parseInt(result.toString().slice(index+1), 10);\n    result = result.toString().slice(0, index);\n    return decimalPart;\n  }\n  return result;\n}\n\nconst numberWithDecimals = (number, decimals) => {\n  const decimalPart = truncateNumber(number);\n  const formattedNumber = `${number}${decimalPart}`;\n  const index = formattedNumber.indexOf('.');\n\n  return (index === -1)? formattedNumber : formattedNumber.slice(0, index+decimals);\n}\n\nexport default numberWithDecimals;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let stack = [];\n  let sum = 0;\n  for (let item of operations) {\n    if (item < 0) {\n      stack.push(item);\n    } else {\n      sum += item;\n    }\n  }\n  let result = sum === 0 && stack.length === 0;\n  return result;\n};\n\nconsole.log(belowZero([-1, -2, 3, -4, 5, -7]));\nconsole.log(belowZero([-1, -2, 3, -4, 5, 6, -7]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let sum = 0;\n    for (let i = 0; i < len; i++) {\n        sum = sum + numberList[i];\n    }\n    return sum / len;\n};\n\n// For a given list of input numbers, caclulate Variance.\n// Variance is the average of squared difference bteween elements.\n// Note: This is not the same as Standard Deviation\n// Variance = E(x^2) - E(x)^2\n// >>> variance([1.0, 2.0, 3.0, 4.0])\n// 3.0\nconst variance = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let sum = 0;\n    let squareSum = 0;\n    for (let i = 0; i < len; i++) {\n        sum = sum + numberList[i];\n        squareSum = squareSum + (numberList[i] * numberList[i]);\n    }\n    return (sum * sum) / len - (squareSum / len);\n};\n\n// For a given list of input numbers, caclulate Standard Deviation.\n// Standard Deviation is the average of squared difference bteween elements.\n// Note: This is not the same as Variance\n// Standard Deviation = E(x^2) - E(x)^2\n// >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n// 1.732\nconst standardDeviation = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let sum = 0;\n    let squareSum = 0;\n    for (let i = 0; i < len; i++) {\n        sum = sum + numberList[i];\n        squareSum = squareSum + (numberList[i] * numberList[i]);\n    }\n    return Math.sqrt((sum * sum) / len - (squareSum / len));\n};\n\n// For a given list of input numbers, caclulate Mean\n// Mean is the average of the list\n// >>> mean([1.0, 2.0, 3.0, 4.0])\n// 2.0\nconst mean = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let sum = 0;\n    for (let i = 0; i < len; i++) {\n        sum = sum + numberList[i];\n    }\n    return sum / len;\n};\n\n// For a given list of input numbers, caclulate Median\n// Median is the middle value of the list\n// >>> median([1.0, 2.0, 3.0, 4.0])\n// 2.0\nconst median = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    if (len === 0) {\n        return undefined;\n    }\n    if (len % 2 === 1) {\n        return numberList[len / 2];\n    }\n    return (numberList[len / 2 - 1] + numberList[len / 2]) / 2;\n};\n\n// For a given list of input numbers, caclulate Mode\n// Mode is the most common value in the list\n// >>> mode([1.0, 2.0, 3.0, 4.0])\n// 3.0\nconst mode = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let currentMode = 0;\n    let currentCount = 0;\n    for (let i = 0; i < len; i++) {\n        if (numberList[i] === currentMode) {\n            currentCount++;\n        } else {\n            if (currentCount > 0) {\n                currentMode = numberList[i];\n                currentCount = 1;\n            }\n        }\n    }\n    return currentMode;\n};\n\n// For a given list of input numbers, caclulate Mode\n// Mode is the most common value in the list\n// >>> mode([1.0, 2.0, 3.0, 4.0])\n// 3.0\nconst mode = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let currentMode = 0;\n    let currentCount = 0;\n    for (let i = 0; i < len; i++) {\n        if (numberList[i] === currentMode) {\n            currentCount++;\n        } else {\n            if (currentCount > 0) {\n                currentMode = numberList[i];\n                currentCount = 1;\n            }\n        }\n    }\n    return currentMode;\n};\n\n// For a given list of input numbers, caclulate Mode\n// Mode is the most common value in the list\n// >>> mode([1.0, 2.0, 3.0, 4.0])\n// 3.0\nconst mode = (numbers) => {\n    const result = [];\n    const numberList = numbers.slice(0);\n    const len = numberList.length;\n    let currentMode = 0;\n    let currentCount = 0;\n    for (let i = 0; i < len; i++) {\n        if (numberList[i] === currentMode) {\n            currentCount++;\n        } else {\n            if (currentCount > 0) {\n                currentMode = numberList[i];\n                currentCount = 1;\n            }\n        }\n    }\n    return currentMode;\n};\n\n// For a given list of input numbers, caclulate Mode\n// Mode is the most common value in the list\n// >>> mode([1.0"}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = [];\n  for (let i = 0; i < numbers.length - 1; i += 2) {\n    result.push(numbers[i]);\n    result.push(delimeter);\n  }\n  if (numbers.length % 2 === 1) {\n    result.push(numbers[numbers.length - 1]);\n  }\n  return result;\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const parse_parens = (paren_string) => {\n    const parse_level = (nested_string) => {\n      const parse_string = (string) => {\n        const nest_array = nested_string.split(' ');\n        const nest_array_length = nest_array.length;\n        const nest_array_depth = nest_array.map((x) => parseInt(x));\n        const nest_array_depth_index = nest_array_length - 1;\n\n        //return (nest_array_depth[nest_array_depth_index])\n        return nest_array_depth[nest_array_depth_index];\n      }\n\n      return nest_array_depth(nested_string);\n    }\n\n    return parse_level(paren_string);\n  }\n\n  const parse_level = (nested_string) => {\n    const nested_string_array = nested_string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  const parse_string = (string) => {\n    const nested_string_array = string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  const parse_array = (array) => {\n    const parse_level = (nested_array) => {\n      const nested_array_length = nested_array.length;\n      const nested_array_depth = nested_array.map((x) => parseInt(x));\n      const nested_array_depth_index = nested_array_length - 1;\n\n      return nested_array_depth[nested_array_depth_index];\n    }\n\n    return parse_level(array);\n  }\n\n  const parse_string_array = (string) => {\n    const nested_string_array = string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  return parse_array(paren_string);\n}\n\n/*\n  parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\nconst parseNestedParens2 = (paren_string) => {\n  const parse_parens = (paren_string) => {\n    const parse_level = (nested_string) => {\n      const nest_array = nested_string.split(' ');\n      const nest_array_length = nest_array.length;\n      const nest_array_depth = nest_array.map((x) => parseInt(x));\n      const nest_array_depth_index = nest_array_length - 1;\n\n      return nest_array_depth[nest_array_depth_index];\n    }\n\n    return parse_level(paren_string);\n  }\n\n  const parse_level = (nested_string) => {\n    const nested_string_array = nested_string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  const parse_string = (string) => {\n    const nested_string_array = string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  const parse_array = (array) => {\n    const nested_string_array = array.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  const parse_string_array = (string) => {\n    const nested_string_array = string.split(' ');\n    const nested_string_length = nested_string_array.length;\n    const nested_string_depth = nested_string_array.map((x) => parseInt(x));\n    const nested_string_depth_index = nested_string_length - 1;\n\n    return nested_string_depth[nested_string_depth_index];\n  }\n\n  return parse_array(paren_string);\n}\n\nconst main = () => {\n  const test = parseNestedParens('(()()) ((())) () ((())()())');\n  console.log(test);\n  return parseNestedParens2('(()()) ((())) () ((())()())');\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n  * Filter an inupt list of strings only for ones that contain given substring\n  *\n  * @param {Array} strings - list of strings to filter\n  * @param {String} substring - substring to look for\n  * @return {Array} list of strings containing given substring\n  *\n  * @example\n  * filterByContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // ['abc', 'bacd']\n  */\nconst filterByContainsSubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) > -1);\n};\n\n/**\n  * Filter an inupt list of strings only for ones that do not contain given substring\n  *\n  * @param {Array} strings - list of strings to filter\n  * @param {String} substring - substring to look for\n  * @return {Array} list of strings not containing given substring\n  *\n  * @example\n  * filterByNotContainsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // ['cde', 'array']\n  */\nconst filterByNotContainsSubstring = (strings, substring) => {\n  return strings.filter(str => str.indexOf(substring) < 0);\n};\n\n/**\n  * Check if an inupt list contains the given substring\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {String} substring - substring to look for\n  * @return {boolean} whether the list contains the substring\n  *\n  * @example\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // true\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  * // false\n  */\nconst containsSubstring = (strings, substring) => {\n  return strings.some(str => str.indexOf(substring) > -1);\n};\n\n/**\n  * Check if an inupt list does not contain the given substring\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {String} substring - substring to look for\n  * @return {boolean} whether the list does not contain the substring\n  *\n  * @example\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // false\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  * // true\n  */\nconst notContainsSubstring = (strings, substring) => {\n  return!containsSubstring(strings, substring);\n};\n\n/**\n  * Check if an inupt list contains all the given strings\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {Array} substrings - substrings to look for\n  * @return {boolean} whether the list contains all substrings\n  *\n  * @example\n  * containsAll(['abc', 'bacd', 'cde', 'array'], ['a', 'b'])\n  * // true\n  * containsAll(['abc', 'bacd', 'cde', 'array'], ['a', 'b', 'c'])\n  * // false\n  */\nconst containsAll = (strings, substrings) => {\n  return substrings.every(str => containsSubstring(strings, str));\n};\n\n/**\n  * Check if an inupt list does not contain all the given strings\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {Array} substrings - substrings to look for\n  * @return {boolean} whether the list does not contain all substrings\n  *\n  * @example\n  * containsAll(['abc', 'bacd', 'cde', 'array'], ['a', 'b'])\n  * // false\n  * containsAll(['abc', 'bacd', 'cde', 'array'], ['a', 'b', 'c'])\n  * // true\n  */\nconst notContainsAll = (strings, substrings) => {\n  return!containsAll(strings, substrings);\n};\n\n/**\n  * Check if an inupt list contains the given substring\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {String} substring - substring to look for\n  * @return {boolean} whether the list contains the given substring\n  *\n  * @example\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // true\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  * // false\n  */\nconst containsSubstringWithCaseSensitive = (strings, substring) => {\n  return strings.some(str => str.indexOf(substring) > -1);\n};\n\n/**\n  * Check if an inupt list does not contain the given substring\n  *\n  * @param {Array} strings - list of strings to check\n  * @param {String} substring - substring to look for\n  * @return {boolean} whether the list does not contain the given substring\n  *\n  * @example\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // false\n  * containsSubstring(['abc', 'bacd', 'cde', 'array'], 'z')\n  * // true\n  */\nconst notContainsSubstringWithCaseSensitive = (strings, substring) => {\n  return!containsSubstringWithCaseSensitive(strings, substring);\n};\n\nmodule.exports = {\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const prod = 1;\n  for (const number of numbers) {\n    sum += number;\n    prod *= number;\n  }\n  return [sum, prod];\n};\n\nconsole.log(sumProduct([1, 2, 3, 4])); // [10, 24]\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = -Infinity\n  let res = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    if (numbers[i] === max) {\n      res.push(max)\n    }\n  }\n  return res\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let start = 0;\n  let end = string.length - 1;\n  let mid = start + (end - start) / 2;\n  while (end - start > 0) {\n    if (string.charAt(end)!= string.charAt(start)) {\n      start = mid + 1;\n      mid = start + (end - start) / 2;\n    } else {\n      end = mid;\n      mid = start + (end - start) / 2;\n    }\n  }\n  return string.split('').reverse().join('') + string.substring(0, mid);\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Function to find the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[cnt] == string2[cnt]) {\n    cnt++;\n  }\n  while (i < string1.length && j < string2.length && string1[i] == string2[j]) {\n    i++;\n    j++;\n  }\n  return cnt;\n}\n\n/* Function to find the longest common suffix of two strings */\nconst longestCommonSuffix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[string1.length - 1 - cnt] == string2[string2.length - 1 - cnt]) {\n    cnt++;\n  }\n  while (i < string1.length && j < string2.length && string1[i] == string2[j]) {\n    i++;\n    j++;\n  }\n  return cnt;\n}\n\n/* Function to find the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[cnt] == string2[cnt]) {\n    cnt++;\n  }\n  while (i < string1.length && j < string2.length && string1[i] == string2[j]) {\n    i++;\n    j++;\n  }\n  return cnt;\n}\n\n/* Function to find the longest common suffix of two strings */\nconst longestCommonSuffix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[string1.length - 1 - cnt] == string2[string2.length - 1 - cnt]) {\n    cnt++;\n  }\n  while (i < string1.length && j < string2.length && string1[i] == string2[j]) {\n    i++;\n    j++;\n  }\n  return cnt;\n}\n\n/* Test if string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Function to find the longest common prefix of two strings */\nconst longestCommonPrefix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[cnt] == string2[cnt]) {\n    cnt++;\n  }\n  while (i < string1.length && j < string2.length && string1[i] == string2[j]) {\n    i++;\n    j++;\n  }\n  return cnt;\n}\n\n/* Function to find the longest common suffix of two strings */\nconst longestCommonSuffix = (string1, string2) => {\n  if (string1.length == 0) {\n    return string2.length;\n  }\n  if (string2.length == 0) {\n    return string1.length;\n  }\n  let cnt = 0;\n  let i = 0;\n  let j = 0;\n  while (cnt < string1.length && cnt < string2.length && string1[string1.length - 1 - cnt] == string2[string2.length - 1 - cnt]) {\n"}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1'? '0' : '1');\n    result += (b[i] === '1'? '0' : '1');\n  }\n  return result;\n};\n\n/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary AND on these inputs and return reuslt also as a string.\n  >>> stringAnd('010', '110')\n  '00'\n  */\nconst stringAnd = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += (a[i] === '1' && b[i] === '1'? '1' : '0');\n  }\n  return result;\n};\n\n/* ePrform a function to check whether a given string is palindrome or not.\n  The function returns true if the string is palindrome else false.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abcc')\n  False\n  */\nconst isPalindrome = (str) => {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return str === reversed;\n};\n\n/* ePrform a function to check whether a given string is a palindrome or not.\n  The function returns true if the string is a palindrome else false.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abcc')\n  False\n  */\nconst isPalindrome2 = (str) => {\n  for (let i = 0, j = str.length - 1; i < j; i++, j--) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* ePrform a function to check whether a given number is a palindrome or not.\n  The function returns true if the number is a palindrome else false.\n  >>> isPalindrome(123)\n  True\n  >>> isPalindrome(123)\n  False\n  >>> isPalindrome(-123)\n  False\n  >>> isPalindrome(-123)\n  True\n  */\nconst isPalindrome3 = (num) => {\n  let str = String(num);\n  if (num > 0) {\n    return isPalindrome(str.substr(1, str.length - 1));\n  } else if (num < 0) {\n    return isPalindrome(str.substr(1, str.length - 1)) && isPalindrome(str.substr(0, str.length - 2));\n  } else {\n    return false;\n  }\n};\n\n/* ePrform a function to check whether a given number is a palindrome or not.\n  The function returns true if the number is a palindrome else false.\n  >>> isPalindrome(123)\n  True\n  >>> isPalindrome(-123)\n  False\n  >>> isPalindrome(123)\n  False\n  >>> isPalindrome(-123)\n  True\n  >>> isPalindrome(0)\n  True\n  >>> isPalindrome(0)\n  False\n  */\nconst isPalindrome4 = (num) => {\n  let str = String(num);\n  if (num > 0) {\n    return isPalindrome(str.substr(0, str.length - 1)) && isPalindrome(str.substr(1, str.length - 1));\n  } else if (num < 0) {\n    return isPalindrome(str.substr(0, str.length - 1)) && isPalindrome(str.substr(1, str.length - 1));\n  } else {\n    return false;\n  }\n};\n\n/* ePrform a function to check whether a given string is a palindrome or not.\n  The function returns true if the string is a palindrome else false.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abcc')\n  False\n  */\nconst isPalindrome5 = (str) => {\n  return isPalindrome2(str) && isPalindrome3(str) && isPalindrome4(str);\n};\n\n/* ePrform a function to check whether a given string is a palindrome or not.\n  The function returns true if the string is a palindrome else false.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abcc')\n  False\n  */\nconst isPalindrome6 = (str) => {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return str === reversed;\n};\n\n/* ePrform a function to check whether a given string is a palindrome or not.\n  The function returns true if the string is a palindrome else false.\n  >>> isPalindrome('abc')\n  True\n  >>> isPalindrome('abcc')\n  False\n  */\nconst isPalindrome7 = (str) => {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return str === reversed;\n};\n\nexport default {\n  isPalindrome,\n  isPalindrome2,\n  isPalindrome3,\n  isPalindrome4,\n  isPalindrome5,\n  isPalindrome6,\n  isPalindrome7\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return strings.reduce((a, b) => {\n    if (a.length < b.length) return b;\n    return a;\n  });\n};\n\nconsole.log(longest([1, 2, 3])); // 1\nconsole.log(longest(['a', 'bb', 'ccc'])); // 'ccc'\nconsole.log(longest(['a', 'bb', 'cc'])); // 'cc'\nconsole.log(longest([])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return a;\n    }\n    const aIsEven = a % 2 === 0;\n    const bIsEven = b % 2 === 0;\n\n    if (aIsEven && bIsEven) {\n        return greatestCommonDivisor(a / 2, b / 2);\n    } else {\n        return Math.max(a, b);\n    }\n};\n\nexport default greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let len = string.length;\n  const result = [];\n  let i = 0;\n  while (i < len) {\n    let prefix = string.substring(0, i + 1);\n    result.push(prefix);\n    i++;\n  }\n  return result;\n};\n\n/* Return list of all suffixes frmo shortest to loengst of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  let len = string.length;\n  const result = [];\n  let i = len - 1;\n  while (i >= 0) {\n    let suffix = string.substring(i, len);\n    result.push(suffix);\n    i--;\n  }\n  return result;\n};\n\n/* Return list of all permutation of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'bc'], ['a', 'c'], ['ab', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations = (string) => {\n  const result = [];\n  let i = 0;\n  let permutation = [];\n  while (i < string.length) {\n    let letter = string.charAt(i);\n    permutation.push(letter);\n    i++;\n  }\n  let len = permutation.length;\n  let len2 = string.length;\n  let i2 = 0;\n  while (i2 < len2) {\n    let newPermutation = [];\n    let j = 0;\n    while (j < len) {\n      newPermutation.push(permutation.slice());\n      newPermutation.pop();\n      j++;\n    }\n    newPermutation.push(string.slice(0, i2));\n    newPermutation.push(string.slice(i2, len2));\n    result.push(newPermutation);\n    i2++;\n  }\n  return result;\n};\n\n/* Return all permutation of the input string\n  >>> allPermutations('abc')\n  [['a', 'b', 'c'], ['a', 'bc'], ['a', 'c'], ['ab', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations2 = (string) => {\n  const result = [];\n  let i = 0;\n  let permutation = [];\n  while (i < string.length) {\n    let letter = string.charAt(i);\n    permutation.push(letter);\n    i++;\n  }\n  let len = permutation.length;\n  let len2 = string.length;\n  let i2 = 0;\n  while (i2 < len2) {\n    let newPermutation = [];\n    let j = 0;\n    while (j < len) {\n      newPermutation.push(permutation.slice());\n      newPermutation.pop();\n      j++;\n    }\n    newPermutation.push(string.slice(0, i2));\n    newPermutation.push(string.slice(i2, len2));\n    result.push(newPermutation);\n    i2++;\n  }\n  return result;\n};\n\nmodule.exports = {\n  allPermutations,\n  allPermutations2,\n  allPrefixes,\n  allSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  do {\n    s = `${s} ${n}`;\n    n = n - 1;\n  } while (n > 0);\n  return s;\n};\n\n/**\n  * @name sortBy\n  * @description Returns a sorted copy of the passed array, according to the\n  * value of the given property.\n  * @param {Array} arr\n  * @param {String} property\n  * @return {Array}\n  * @example\n  *\n  *     sortBy(['1', '2', '3'], 'length');\n  *     // => ['1', '2', '3']\n  *\n  *     sortBy(['1', '2', '3'], 'length');\n  *     // => ['1', '2', '3']\n  *\n  *     sortBy([{x: 1}, {x: 2}, {x: 3}], 'x');\n  *     // => [{x: 1}, {x: 2}, {x: 3}]\n  */\nconst sortBy = (arr, property) => arr.sort((a, b) => a[property] - b[property]);\n\n/**\n  * @name filterBy\n  * @description Returns a subset of the passed array, containing only the\n  * elements which pass the given filter function.\n  * @param {Array} arr\n  * @param {Function} fn\n  * @return {Array}\n  * @example\n  *\n  *     filterBy([1, 2, 3, 4, 5, 6], x => x % 2 === 0);\n  *     // => [2, 4, 6]\n  */\nconst filterBy = (arr, fn) => arr.filter(fn);\n\n/**\n  * @name findBy\n  * @description Returns the first element in the array which matches the given\n  * filter function.\n  * @param {Array} arr\n  * @param {Function} fn\n  * @return {Any}\n  * @example\n  *\n  *     findBy([1, 2, 3, 4, 5, 6], x => x % 2 === 0);\n  *     // => 2\n  */\nconst findBy = (arr, fn) => arr.find(fn);\n\n/**\n  * @name forEach\n  * @description Executes the given function on every element of the given array.\n  * @param {Array} arr\n  * @param {Function} fn\n  * @example\n  *\n  *     forEach([1, 2, 3, 4, 5, 6], x => x * 2);\n  *     // => [2, 4, 6, 8, 10, 12]\n  */\nconst forEach = (arr, fn) => {\n  for (let i = 0; i < arr.length; i++) {\n    fn(arr[i], i);\n  }\n};\n\n/**\n  * @name toArray\n  * @description Returns a copy of the passed array, with the elements converted\n  * into a new Array.\n  * @param {Array} arr\n  * @return {Array}\n  * @example\n  *\n  *     toArray([1, 2, 3, 4, 5, 6]);\n  *     // => [1, 2, 3, 4, 5, 6]\n  */\nconst toArray = (arr) => arr.slice(0);\n\nexport {\n  array,\n  findBy,\n  forEach,\n  filterBy,\n  sortBy,\n  toArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const distinctChars = []\n  let charCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (charCount === undefined) {\n      charCount = 1\n    } else {\n      charCount++\n      if (charCount > distinctChars.length) {\n        distinctChars.push(charCount)\n      }\n      charCount = 0\n    }\n    if (string[i]!== undefined) {\n      distinctChars.push(string[i])\n    }\n  }\n  return distinctChars.length\n}\n\n/**\n  *  iGven a string, count the number of unique characters (regardless of case)\n  *  >>> countUniqueLetters('Jerry')\n  3\n  *  >>> countUniqueLetters('Jerry')\n  2\n  */\nconst countUniqueLetters = (string) => {\n  const uniqueLetters = []\n  let charCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (charCount === undefined) {\n      charCount = 1\n    } else {\n      charCount++\n      if (charCount > uniqueLetters.length) {\n        uniqueLetters.push(charCount)\n      }\n      charCount = 0\n    }\n    if (string[i]!== undefined) {\n      if (string[i].toLowerCase()!== string[i].toUpperCase()) {\n        uniqueLetters.push(string[i].toLowerCase())\n      }\n    }\n  }\n  return uniqueLetters.length\n}\n\n/**\n  *  iGven a string, count the number of words in the string.\n  *  >>> countWords('hello there')\n  2\n  *  >>> countWords('hello there')\n  2\n  */\nconst countWords = (string) => {\n  const words = []\n  let charCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (charCount === undefined) {\n      charCount = 1\n    } else {\n      charCount++\n      if (charCount > words.length) {\n        words.push(charCount)\n      }\n      charCount = 0\n    }\n    if (string[i]!== undefined) {\n      if (string[i].toUpperCase() ==='') {\n        words.push(string.slice(i - charCount, i))\n        charCount = 0\n      }\n    }\n  }\n  return words.length\n}\n\n/**\n  *  iGven a string, return the length of the longest substring that contains\n  *  all unique characters.\n  *  >>> longestSubstring('ababa')\n  2\n  *  >>> longestSubstring('ababa')\n  2\n  */\nconst longestSubstring = (string) => {\n  const uniqueLetters = []\n  let subStrLen = 0\n  let currentCharCount = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i]!== undefined) {\n      if (currentCharCount === undefined) {\n        currentCharCount = 1\n      } else {\n        currentCharCount++\n      }\n      if (uniqueLetters.indexOf(string[i]) === -1) {\n        uniqueLetters.push(string[i])\n      }\n    }\n  }\n  for (let i = 0; i < uniqueLetters.length; i++) {\n    subStrLen += 1\n  }\n  return subStrLen\n}\n\nconst test = () => {\n  const string = 'ababa'\n  console.log(countWords(string))\n  console.log(countDistinctCharacters(string))\n  console.log(countUniqueLetters(string))\n  console.log(longestSubstring(string))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const len = music_string.length;\n  const result = [];\n  const notes = music_string.split(' ');\n\n  for (let i = 0; i < len; i += 1) {\n    const note = notes[i];\n    const note_len = note.length;\n    let num_beats = 0;\n    if (note_len === 1) {\n      num_beats = 1;\n    } else if (note_len === 2) {\n      num_beats = 2;\n    } else if (note_len === 3) {\n      num_beats = 4;\n    }\n    result.push(num_beats);\n  }\n  return result;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const result = 0;\n  const lastIndex = string.length - substring.length;\n  for (let i = 0; i <= lastIndex; i++) {\n    const currentString = string.slice(i, i + substring.length);\n    if (currentString === substring) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArray = numbers.split(' ').map(number => Number(number))\n  const sortedNumbers = numbersArray.sort((a, b) => {\n    return a - b\n  })\n  return sortedNumbers.join(' ')\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that returns True if the string is a valid\n  IPv4 address, and False otherwise.\n  A valid IPv4 address has 4 parts, separated by a period.\n  The first part is a number (0-255)\n  The second part is a number (0-255)\n  The third part is a number (0-255)\n  The fourth part is a number (0-255)\n  A string is a valid IPv4 address if it is formatted as\n  '<number> <number> <number> <number>'\n  */\nconst isIPv4 = (str) => {\n  return /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})$/.test(str)\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that returns True if the string is a valid\n  IPv6 address, and False otherwise.\n  A valid IPv6 address has 8 parts, separated by a period.\n  The first part is a number (0-255)\n  The second part is a number (0-255)\n  The third part is a number (0-255)\n  The fourth part is a number (0-255)\n  The fifth part is a number (0-255)\n  The sixth part is a number (0-255)\n  The seventh part is a number (0-255)\n  The eighth part is a number (0-255)\n  A string is a valid IPv6 address if it is formatted as\n  '<number> <number> <number> <number> <number> <number> <number> <number>'\n  */\nconst isIPv6 = (str) => {\n  return /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})$/.test(str)\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that returns True if the string is a valid\n  IP address, and False otherwise.\n  A valid IP address has either 4 or 8 parts, separated by a period.\n  The first part is a number (0-255)\n  The second part is a number (0-255)\n  The third part is a number (0-255)\n  The fourth part is a number (0-255)\n  The fifth part is a number (0-255)\n  The sixth part is a number (0-255)\n  The seventh part is a number (0-255)\n  The eighth part is a number (0-255)\n  A string is a valid IP address if it is formatted as\n  '<number> <number> <number> <number>'\n  or\n  '<number> <number> <number> <number> <number> <number> <number> <number>'\n  */\nconst isIP = (str) => {\n  return /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})$/.test(str) || /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})$/.test(str)\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that returns True if the string is a valid\n  MAC address, and False otherwise.\n  A valid MAC address has 6 parts, separated by a colon.\n  The first part is a number (0-255)\n  The second part is a number (0-255)\n  The third part is a number (0-255)\n  The fourth part is a number (0-255)\n  The fifth part is a number (0-255)\n  The sixth part is a number (0-255)\n  A string is a valid MAC address if it is formatted as\n  '<number> <number> <number> <number> <number> <number>'\n  */\nconst isMAC = (str) => {\n  return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(str)\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that returns True if the string is a valid\n  IPv4 address with an optional '-ip' suffix, and False otherwise.\n  A valid IPv4 address with an '-ip' suffix has 4 parts,\n  separated by a period.\n  The first part is a number (0-255)\n  The second part is a number (0-255)\n  The third part is a number (0-255)\n  The fourth part is a number (0-255)\n  A string is a valid IPv4 address with an '-ip' suffix if it is\n  formatted as '<number> <number> <number> <number>'.\n  */\nconst isIPv4WithSuffix = (str) => {\n  return /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})$/.test(str) || /^(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.(\\d{1,2})\\.ip$/.test(str)\n}\n\n/*\n  Given a string containing only digits from 0 to 9 inclusive,\n  write a function that"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    let min_index = numbers.indexOf(min);\n    let max_index = numbers.indexOf(max);\n    let smaller = numbers.splice(min_index, 1);\n    let larger = numbers.splice(max_index, 1);\n    return [smaller[0], larger[0]];\n};\n\n/* From a supplied list of numbers (of length at least two) seelct and return two that are the\n  closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosest = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    let min_index = numbers.indexOf(min);\n    let max_index = numbers.indexOf(max);\n    let smaller = numbers.splice(min_index, 1);\n    let larger = numbers.splice(max_index, 1);\n    return [smaller[0], larger[0]];\n};\n\n/* From a supplied list of numbers (of length at least two) seelct and return two that are the\n  closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestToEachOther = (numbers) => {\n    let min = numbers[0];\n    let max = numbers[0];\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n    }\n    let min_index = numbers.indexOf(min);\n    let max_index = numbers.indexOf(max);\n    let smaller = numbers.splice(min_index, 1);\n    let larger = numbers.splice(max_index, 1);\n    return [smaller[0], larger[0]];\n};\n\nmodule.exports = {\n    findClosestElements,\n    findClosest,\n    findClosestToEachOther\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": false, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = Math.min(...numbers);\n  let max = Math.max(...numbers);\n  let normalized = numbers.map(n => (n - min) / (max - min));\n  return normalized.map(n => n.toFixed(4));\n};\n\nexport default rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const ret = [];\n  values.forEach((val) => {\n    if (typeof val === 'number' && isInt(val)) {\n      ret.push(val);\n    }\n  });\n  return ret;\n};\n\n/**\n  * Filter given list of strings for numbers\n  * @param {array} values\n  * @return {array}\n  */\nconst filterStrings = (values) => {\n  const ret = [];\n  values.forEach((val) => {\n    if (typeof val ==='string') {\n      const number = parseInt(val);\n      if (isNaN(number)) {\n        ret.push(val);\n      }\n    }\n  });\n  return ret;\n};\n\n/**\n * Get a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getIntegers = (values) => {\n  return filterIntegers(filterStrings(values));\n};\n\n/**\n * Get a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getStrings = (values) => {\n  return filterStrings(values);\n};\n\n/**\n * Get a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAll = (values) => {\n  return values;\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllStrings = (values) => {\n  return filterStrings(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllIntegers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllNumbers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAll = (values) => {\n  return values;\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllStrings = (values) => {\n  return filterStrings(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllIntegers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllNumbers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllAll = (values) => {\n  return values;\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllAllStrings = (values) => {\n  return filterStrings(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllAllIntegers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllAllNumbers = (values) => {\n  return filterIntegers(values);\n};\n\n/**\n * Return a list of integers from a list of strings\n * @param {array} values\n * @return {array}\n */\nconst getAllAllAllAll = (values) => {\n  return values;\n};\n\nmodule.exports = {\n  getAll,\n  getAllAll,\n  getAllAllAll,\n  getAllAllAll,\n  getAllAllAllIntegers,\n  getAllAllAllNumbers,\n  getAllAllAllStrings,\n  getAllAllAllStrings,\n  getAllAllAllIntegers,\n  getAllAllAllNumbers,\n  getAllAllAllAll,\n  getAllAllAllAllStrings,\n  getAllAllAllAllIntegers,\n  getAllAllAllAllNumbers,\n  getAllAllAllAllAll,\n  getIntegers,\n  getStrings,\n  getAllStrings,\n  getAllIntegers,\n  getAllNumbers,\n  getAllAll,\n  getAllAllAll,\n  getAllAllAllStrings,\n  getAllAllAllAllIntegers,\n  getAllAllAllAllNumbers,\n  getAllAllAllAllAll,\n  getAllAllAllAllAllStrings,\n  getAllAllAllAllAllIntegers,\n  getAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAll,\n  getAllAllAllAllAllAllStrings,\n  getAllAllAllAllAllAllIntegers,\n  getAllAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAllAll,\n  getAllAllAllAllAllAllAllStrings,\n  getAllAllAllAllAllAllAllIntegers,\n  getAllAllAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAllAllAllStrings,\n  getAllAllAllAllAllAllAllIntegers,\n  getAllAllAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAllAllAllStrings,\n  getAllAllAllAllAllAllAllIntegers,\n  getAllAllAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAllAllAllStrings,\n  getAllAllAllAllAllAllAllIntegers,\n  getAllAllAllAllAllAllAllAllNumbers,\n  getAllAllAllAllAllAllAllAllStr"}
{"task_id": "JavaScript/23", "prompt": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const count = 0\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) < 128? 1 : 2\n  }\n  return count\n}\n\n/* Return the string with whitespace removed from the left.\n  >>> strleft(\"a  b c\")\n  'a b c'\n  >>> strleft(\"\")\n  ''\n  >>> strleft(\"abc\")\n  'abc'\n  >>> strleft(\" \")\n  ''\n  >>> strleft(\"  \")\n  ''\n  >>> strleft(\"a b c\")\n  'a b c'\n  */\nconst strleft = (string) => {\n  return string.replace(/^\\s+/, \"\")\n}\n\n/* Return the string with whitespace removed from the right.\n  >>> strright(\"a  b c\")\n  'a  b c'\n  >>> strright(\"\")\n  ''\n  >>> strright(\"abc\")\n  'abc'\n  >>> strright(\" \")\n  ''\n  >>> strright(\"  \")\n  ''\n  >>> strright(\"a b c\")\n  'a b c'\n  */\nconst strright = (string) => {\n  return string.replace(/\\s+$/, \"\")\n}\n\n/* Return the string with whitespace removed from the left and right.\n  >>> strboth(\"a  b c\")\n  'a b c'\n  >>> strboth(\"\")\n  ''\n  >>> strboth(\"abc\")\n  'abc'\n  >>> strboth(\" \")\n  ''\n  >>> strboth(\"  \")\n  ''\n  >>> strboth(\"a b c\")\n  'a b c'\n  */\nconst strboth = (string) => {\n  return strleft(string) + strright(string)\n}\n\n/* Return the string with whitespace removed from the left and right.\n  >>> strboth(\"a b c\")\n  'a b c'\n  >>> strboth(\"\")\n  ''\n  >>> strboth(\"abc\")\n  'abc'\n  >>> strboth(\" \")\n  ''\n  >>> strboth(\"  \")\n  ''\n  >>> strboth(\"a b c\")\n  'a b c'\n  */\nconst strboth = (string) => {\n  return strleft(string) + strright(string)\n}\n\n/* Return the string with whitespace trimmed from the left and right.\n  >>> strboth(\"a b c\")\n  'a b c'\n  >>> strboth(\"\")\n  ''\n  >>> strboth(\"abc\")\n  'abc'\n  >>> strboth(\" \")\n  ''\n  >>> strboth(\"  \")\n  ''\n  >>> strboth(\"a b c\")\n  'a b c'\n  */\nconst strboth = (string) => {\n  return strleft(string).replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the left.\n  >>> strleft(\"a b c\")\n  'a b c'\n  >>> strleft(\"\")\n  ''\n  >>> strleft(\"abc\")\n  'abc'\n  >>> strleft(\" \")\n  ''\n  >>> strleft(\"  \")\n  ''\n  >>> strleft(\"a b c\")\n  'a b c'\n  */\nconst strleft = (string) => {\n  return string.replace(/^\\s+/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the right.\n  >>> strright(\"a b c\")\n  'a b c'\n  >>> strright(\"\")\n  ''\n  >>> strright(\"abc\")\n  'abc'\n  >>> strright(\" \")\n  ''\n  >>> strright(\"  \")\n  ''\n  >>> strright(\"a b c\")\n  'a b c'\n  */\nconst strright = (string) => {\n  return string.replace(/\\s+$/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the left and right.\n  >>> strboth(\"a b c\")\n  'a b c'\n  >>> strboth(\"\")\n  ''\n  >>> strboth(\"abc\")\n  'abc'\n  >>> strboth(\" \")\n  ''\n  >>> strboth(\"  \")\n  ''\n  >>> strboth(\"a b c\")\n  'a b c'\n  */\nconst strboth = (string) => {\n  return strleft(string).replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the left.\n  >>> strleft(\"a b c\")\n  'a b c'\n  >>> strleft(\"\")\n  ''\n  >>> strleft(\"abc\")\n  'abc'\n  >>> strleft(\" \")\n  ''\n  >>> strleft(\"  \")\n  ''\n  >>> strleft(\"a b c\")\n  'a b c'\n  */\nconst strleft = (string) => {\n  return string.replace(/^\\s+/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the right.\n  >>> strright(\"a b c\")\n  'a b c'\n  >>> strright(\"\")\n  ''\n  >>> strright(\"abc\")\n  'abc'\n  >>> strright(\" \")\n  ''\n  >>> strright(\"  \")\n  ''\n  >>> strright(\"a b c\")\n  'a b c'\n  */\nconst strright = (string) => {\n  return string.replace(/\\s+$/, \"\")\n}\n\n/* Return the string with whitespace trimmed from the left and right.\n  >>> strboth(\"a b c\")\n  'a b c'\n  >>> strboth(\"\")\n  ''\n  >>> strboth(\"abc\")\n  'abc'\n  >>> strboth(\" \")\n  ''\n  >>> strboth(\"  \")\n  ''\n  >>> strboth(\"a b c\")\n  'a b c'\n  */\nconst strboth = (string) => {\n  return strleft(string).replace(/^\\s+/, \"\").replace(/\\s+$/, \"\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let a = 0;\n  let b = n;\n  let l = 0;\n  let r = n;\n  while (b > 0) {\n    a = n % b;\n    if (a > l) {\n      l = a;\n    }\n    r = b;\n    b = a;\n  }\n  return r;\n};\n\n/*\n  Given two integers, a and b, return the greatest common divisor of a and b.\n  >>> gcd(6, 12)\n  6\n  >>> gcd(24, 24)\n  12\n  >>> gcd(12, 24)\n  12\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  >>> gcd(-4, 4)\n  4\n  >>> gcd(-4, -4)\n  4\n  >>> gcd(-4, -12)\n  12\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(12, 12)\n  12\n  >>> gcd(24, 12)\n  12\n  >>> gcd(6, 12)\n  6\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  >>> gcd(-4, 4)\n  4\n  >>> gcd(-4, -4)\n  4\n  >>> gcd(-4, -12)\n  12\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(12, 12)\n  12\n  >>> gcd(24, 12)\n  12\n  >>> gcd(6, 12)\n  6\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  >>> gcd(-4, 4)\n  4\n  >>> gcd(-4, -4)\n  4\n  >>> gcd(-4, -12)\n  12\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(12, 12)\n  12\n  >>> gcd(24, 12)\n  12\n  >>> gcd(6, 12)\n  6\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  >>> gcd(-4, 4)\n  4\n  >>> gcd(-4, -4)\n  4\n  >>> gcd(-4, -12)\n  12\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(12, 12)\n  12\n  >>> gcd(24, 12)\n  12\n  >>> gcd(6, 12)\n  6\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  >>> gcd(-4, 4)\n  4\n  >>> gcd(-4, -4)\n  4\n  >>> gcd(-4, -12)\n  12\n  >>> gcd(0, 0)\n  0\n  >>> gcd(1, 1)\n  1\n  >>> gcd(12, 12)\n  12\n  >>> gcd(24, 12)\n  12\n  >>> gcd(6, 12)\n  6\n  >>> gcd(3, 4)\n  1\n  >>> gcd(0, 1)\n  1\n  >>> gcd(1, 0)\n  1\n  >>> gcd(2, -1)\n  1\n  >>> gcd(0, 0)\n  0\n  >>> gcd(-1, 2)\n  1\n  >>> gcd(12, -12)\n  12\n  >>> gcd(-12, 12)\n  12\n  >>> gcd(4, -12)\n  4\n  >>> gcd(4, -4)\n  4\n  "}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let prime = [];\n  let i;\n  let x;\n\n  // first find prime factors\n  for (i = 2; i * i <= n; i += 1) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n  }\n  // then find largest prime factors\n  while (n > 1) {\n    x = Math.sqrt(n);\n    if (n % x === 0) {\n      factors.push(x);\n      n = n / x;\n    } else {\n      break;\n    }\n  }\n  return factors;\n}\n\n/* Return the number of divisors of a given number.\n  The number of divisors of a given number n is the number of ways to divide n into prime factors.\n  >>> divisors(4)\n  2\n  >>> divisors(1)\n  1\n  >>> divisors(4)\n  2\n  >>> divisors(9)\n  3\n  >>> divisors(0)\n  0\n  >>> divisors(16)\n  4\n  >>> divisors(24)\n  6\n  >>> divisors(24)\n  6\n  */\nconst divisors = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let count = 0;\n  for (let i = 2; i * i <= n; i += 1) {\n    while (n % i === 0) {\n      count = count + 1;\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    count = count + 1;\n  }\n  return count;\n}\n\n/* Given two numbers, return the greatest number which is lesser than both of them.\n  >>> max(1, 3)\n  3\n  >>> max(1, 4)\n  1\n  >>> max(9, 3)\n  9\n  >>> max(8, 3)\n  8\n  >>> max(8, 4)\n  8\n  >>> max(9, 4)\n  9\n  */\nconst max = (x, y) => {\n  if (x > y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/* Return the smallest number which is greater than both of them.\n  >>> min(1, 3)\n  2\n  >>> min(1, 4)\n  2\n  >>> min(9, 3)\n  9\n  >>> min(8, 3)\n  7\n  >>> min(8, 4)\n  7\n  >>> min(9, 4)\n  9\n  */\nconst min = (x, y) => {\n  if (x < y) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n/* Given two numbers, return the product of both of them.\n  >>> product(1, 3)\n  3\n  >>> product(1, 4)\n  4\n  >>> product(9, 3)\n  27\n  >>> product(8, 3)\n  24\n  >>> product(8, 4)\n  32\n  >>> product(9, 4)\n  81\n  */\nconst product = (x, y) => {\n  return x * y;\n}\n\n/* Given two numbers, return the sum of both of them.\n  >>> sum(1, 3)\n  4\n  >>> sum(1, 4)\n  5\n  >>> sum(9, 3)\n  12\n  >>> sum(8, 3)\n  10\n  >>> sum(8, 4)\n  16\n  >>> sum(9, 4)\n  25\n  */\nconst sum = (x, y) => {\n  return x + y;\n}\n\n/* Given two numbers, return the difference of both of them.\n  >>> difference(1, 3)\n  2\n  >>> difference(1, 4)\n  0\n  >>> difference(9, 3)\n  6\n  >>> difference(8, 3)\n  4\n  >>> difference(8, 4)\n  4\n  >>> difference(9, 4)\n  1\n  */\nconst difference = (x, y) => {\n  return x - y;\n}\n\n/* Given two numbers, return the sum of the squares of both of them.\n  >>> sum_squares(1, 3)\n  9\n  >>> sum_squares(1, 4)\n  16\n  >>> sum_squares(9, 3)\n  81\n  >>> sum_squares(8, 3)\n  64\n  >>> sum_squares(8, 4)\n  128\n  >>> sum_squares(9, 4)\n  243\n  */\nconst sum_squares = (x, y) => {\n  return x * x + y * y;\n}\n\n/* Given two numbers, return the difference of the squares of both of them.\n  >>> difference_squares(1, 3)\n  4\n  >>> difference_squares(1, 4)\n  0\n  >>> difference_squares(9, 3)\n  6\n  >>> difference_squares(8, 3)\n  8\n  >>> difference_squares(8, 4)\n  16\n  >>> difference_squares(9, 4)\n  25\n  */\nconst difference_squares = (x, y) => {\n  return x * x - y * y;\n}\n\n/* Given two numbers, return the quotient of the division of the two of them.\n  >>> quotient(1, 3)\n  1\n  >>> quotient(1, 4)\n  0\n  >>> quotient(9, 3)\n  3\n  >>> quotient(8, 3)\n  2\n  >>> quotient(8, 4)\n  2\n  >>> quotient(9, 4)\n  1\n  */\nconst quotient = (x, y) => {\n  return x / y;\n}\n\n/* Given two numbers,"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  const seen = {};\n  for (let number of numbers) {\n    if (seen[number]) {\n      continue;\n    }\n    seen[number] = true;\n    result.push(number);\n  }\n  return result;\n};\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();\n};\n\n// For a given string, swap two characters.\n// For example, if the string is 'aac', swap 'a' and 'c'.\n// 'aac' would then be 'cac'.\n// 'gdd' would be 'ddg'\nconst swapCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();\n};\n\n// For a given string, change the case of all characters to lowercase.\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n// For a given string, change the case of all characters to uppercase.\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n// For a given string, change the case of all characters to titlecase.\n// For example, if the string is 'Hello World', it would become 'Hello World'\nconst titleCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1 $2').toUpperCase();\n};\n\n// For a given string, change the case of all characters to initial case.\n// For example, if the string is 'Hello World', it would become 'hELLO world'\nconst initialCase = (string) => {\n  return string.replace(/([a-z])([A-Z])/g, '$1 $2').toLowerCase();\n};\n\n// For a given string, add a prefix.\nconst addPrefix = (string, prefix) => {\n  return `${prefix}${string}`;\n};\n\n// For a given string, add a suffix.\nconst addSuffix = (string, suffix) => {\n  return `${string}${suffix}`;\n};\n\n// For a given string, add a prefix and a suffix.\nconst addPrefixSuffix = (string, prefix, suffix) => {\n  return `${prefix}${string}${suffix}`;\n};\n\n// For a given string, replace a prefix with a suffix.\nconst replacePrefix = (string, prefix, suffix) => {\n  return `${string.replace(new RegExp(`^${prefix}`), `${suffix}`)}`;\n};\n\n// For a given string, replace a suffix with a prefix.\nconst replaceSuffix = (string, suffix, prefix) => {\n  return `${string.replace(new RegExp(`${suffix}$`), `${prefix}`)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix.\nconst replacePrefixSuffix = (string, prefix, suffix, prefix2, suffix2) => {\n  return `${replacePrefix(string, prefix, prefix2)}${replaceSuffix(string, suffix, suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefixSuffix2 = (string, prefix, suffix, prefix2, suffix2) => {\n  return `${replacePrefixSuffix(string, prefix, suffix, prefix2, suffix2)}${addPrefix(prefix2, suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addSuffix2 = (string, suffix, suffix2) => {\n  return `${replaceSuffix(string, suffix, suffix2)}${addSuffix(suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefix2 = (string, prefix, prefix2) => {\n  return `${replacePrefix(string, prefix, prefix2)}${addPrefix(prefix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addSuffix2 = (string, suffix, suffix2) => {\n  return `${replaceSuffix(string, suffix, suffix2)}${addSuffix(suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefixSuffix = (string, prefix, suffix, prefix2, suffix2) => {\n  return `${replacePrefixSuffix(string, prefix, suffix, prefix2, suffix2)}${addPrefix(prefix2, suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addSuffix = (string, suffix, suffix2) => {\n  return `${replaceSuffix(string, suffix, suffix2)}${addSuffix(suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefix = (string, prefix, prefix2) => {\n  return `${replacePrefix(string, prefix, prefix2)}${addPrefix(prefix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addSuffix = (string, suffix, suffix2) => {\n  return `${replaceSuffix(string, suffix, suffix2)}${addSuffix(suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefixSuffix = (string, prefix, suffix, prefix2, suffix2) => {\n  return `${replacePrefixSuffix(string, prefix, suffix, prefix2, suffix2)}${addPrefix(prefix2, suffix2)}`;\n};\n\n// For a given string, replace a prefix and suffix with a prefix and suffix,\n// and add a new prefix and suffix.\nconst addPrefixS"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const result = '';\n  strings.forEach((s) => result += s);\n  return result;\n};\n\nmodule.exports = concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const arr = strings.filter(s => s.startsWith(prefix));\n  return arr;\n};\n\nmodule.exports = {\n  filterByPrefix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = []\n  for (const n of l) {\n    if (n > 0) {\n      r.push(n)\n    }\n  }\n  return r\n}\n\n// SOLUTION 2\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive2 = (l) => {\n  const r = []\n  for (const n of l) {\n    if (n > 0) {\n      r.push(n)\n    }\n  }\n  return r\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  const prime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (prime(n) === false) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return the sum of all the primes below n.\n  >>> sumOfPrimes(100)\n  3039\n  >>> sumOfPrimes(1000)\n  8833993\n  >>> sumOfPrimes(1000000)\n  715238823991\n  */\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the product of all the primes below n.\n  >>> sumOfPrimes(100)\n  3039\n  >>> sumOfPrimes(1000)\n  8833993\n  >>> sumOfPrimes(1000000)\n  715238823991\n  */\nconst productOfPrimes = (n) => {\n  let sum = 1;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum *= i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfPrimes2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n/*\n  Return the sum of the even terms in the sequence 1, 2, 3,..., n.\n  >>> sumOfEvenTerms(100)\n  3039\n  >>> sumOfEvenTerms(1000)\n  8833993\n  >>> sumOfEvenTerms(1000000)\n  715238823991\n  >>> sumOfEvenTerms(2147483647)\n  2147483647\n  >>> sumOfEvenTerms(1)\n  1\n  >>> sumOfEvenTerms(2)\n  0\n  */\nconst sumOfEvenTerms = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\nconst sumOfEvenTerms13 = (n) => {\n  let sum = 0;\n  for (let"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let zero = 0;\n  let max = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < xs.length; i++) {\n    let x = xs[i];\n    if (x === 0) {\n      return x;\n    }\n    if (x > max) {\n      max = x;\n    }\n    if (x < min) {\n      min = x;\n    }\n  }\n  if (min - max === 0) {\n    return min;\n  }\n  let x = Math.floor(Math.pow((min - max), 1 / (xs.length - 1)));\n  while (x < min) {\n    x = Math.floor(x * 2);\n  }\n  return x;\n}\n\n/*\n  Find roots of poly(x) = 0.\n  >>> round(findRoots([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  [-1.0, -2.0]\n  >>> round(findRoots([1, -3, 4, 5, -6, 9, -8]), 2) # f(x) = 1 - 3x + 4x^2 - 6x^3 + 9x^4\n  [-3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8 + 10x^9\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8 + 10x^9 + 11x^10\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8 + 10x^9 + 11x^10 + 12x^11\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8 + 10x^9 + 11x^10 + 12x^11 + 13x^12\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2) # f(x) = 1 + 2x + 3x^2 + 4x^3 + 5x^4 + 6x^5 + 7x^6 + 8x^7 + 9x^8 + 10x^9 + 11x^10 + 12x^11 + 13x^12 + 14x^13 + 15x^14\n  [-2.5, -3.0, -4.0]\n  >>> round(findRoots([1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = l.slice();\n  const sortedIdx = [0, 1, 2].map(idx => {\n    return idx + (sorted[idx] % 3 === 0? 1 : 0);\n  });\n  return sorted.slice(sortedIdx[0], sortedIdx[2]).concat(sorted.slice(sortedIdx[2], sortedIdx[1]), sorted.slice(sortedIdx[1]));\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  const list = [];\n  let i = 0;\n  for (let el in l) {\n    list.push(el);\n  }\n  for (let el in list) {\n    if (uniqueList.indexOf(list[el]) === -1) {\n      uniqueList.push(list[el]);\n    }\n  }\n  return uniqueList;\n}\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let max = 0\n  while (i < j) {\n    const x = l[i]\n    const y = l[j]\n    if (x < y) {\n      i += 1\n    } else if (x > y) {\n      j -= 1\n    } else {\n      return l[i]\n    }\n  }\n  return l[i]\n}\n\n/**\n * Return minimum element in the list.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let i = 0\n  let j = l.length - 1\n  let min = Infinity\n  while (i < j) {\n    const x = l[i]\n    const y = l[j]\n    if (x < y) {\n      i += 1\n    } else if (x > y) {\n      j -= 1\n    } else {\n      return l[i]\n    }\n  }\n  return l[j]\n}\n\n/**\n * Returns the number of positive elements in the list.\n  >>> positiveElements([1, 2, 3, -4, -5])\n  3\n  >>> positiveElements([-1, -2, -3, 4, 5])\n  3\n  >>> positiveElements([1, -2, -3, 4, 5])\n  0\n  >>> positiveElements([-1, -2, -3, 4, -5])\n  1\n  */\nconst positiveElements = (l) => {\n  let count = 0\n  for (let x of l) {\n    if (x > 0) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/**\n * Returns the sum of all elements in the list.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([-1, -2, -3, 4, 5])\n  10\n  >>> sum([-1, -2, -3, 4, -5])\n  -5\n  >>> sum([-1, -2, -3, 4, -5, 5])\n  0\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let x of l) {\n    sum += x\n  }\n  return sum\n}\n\n/**\n * Returns the difference between the max and the min of the list.\n  >>> maxMinDifference([1, 2, 3])\n  2\n  >>> maxMinDifference([-1, -2, -3, 4, 5])\n  -1\n  >>> maxMinDifference([-1, -2, -3, 4, -5])\n  0\n  >>> maxMinDifference([-1, -2, -3, 4, -5, 5])\n  1\n  */\nconst maxMinDifference = (l) => {\n  let min = Infinity\n  let max = -Infinity\n  for (let x of l) {\n    if (x < min) {\n      min = x\n    }\n    if (x > max) {\n      max = x\n    }\n  }\n  return max - min\n}\n\n/**\n * Returns the difference between the sum and the max of the list.\n  >>> sumMaxDifference([1, 2, 3])\n  0\n  >>> sumMaxDifference([-1, -2, -3, 4, 5])\n  -5\n  >>> sumMaxDifference([-1, -2, -3, 4, -5])\n  -3\n  >>> sumMaxDifference([-1, -2, -3, 4, -5, 5])\n  4\n  */\nconst sumMaxDifference = (l) => {\n  let sum = 0\n  for (let x of l) {\n    sum += x\n  }\n  return sum - maxElement(l)\n}\n\n/**\n * Returns the difference between the sum and the min of the list.\n  >>> sumMinDifference([1, 2, 3])\n  0\n  >>> sumMinDifference([-1, -2, -3, 4, 5])\n  5\n  >>> sumMinDifference([-1, -2, -3, 4, -5])\n  3\n  >>> sumMinDifference([-1, -2, -3, 4, -5, 5])\n  2\n  */\nconst sumMinDifference = (l) => {\n  let sum = 0\n  for (let x of l) {\n    sum += x\n  }\n  return sum - minElement(l)\n}\n\n/**\n * Returns the product of all elements in the list.\n  >>> product([1, 2, 3])\n  6\n  >>> product([-1, -2, -3, 4, 5])\n  -15\n  >>> product([-1, -2, -3, 4, -5])\n  -15\n  >>> product([-1, -2, -3, 4, -5, 5])\n  -30\n  */\nconst product = (l) => {\n  let product = 1\n  for (let x of l) {\n    product *= x\n  }\n  return product\n}\n\n/**\n * Returns the quotient of the max and the sum of the list.\n  >>> maxSumQuotient([1, 2, 3])\n  3\n  >>> maxSumQuotient([-1, -2, -3, 4, 5])\n  -2\n  >>> maxSumQuotient([-1, -2, -3, 4, -5])\n  -1\n  >>> maxSumQuotient([-1, -2, -3, 4, -5, 5])\n  -1\n  */\nconst maxSumQuotient = (l) => {\n  let maxSum = maxSumDifference(l)\n  let sum = sum(l)\n  return maxSum / sum\n}\n\n/**\n * Returns the quotient of the min and the sum of the list.\n  >>> minSumQuotient([1, 2, 3])\n  1\n  >>> minSumQuotient([-"}
{"task_id": "JavaScript/36", "prompt": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if ((i % 3 === 0) && (i % 5 === 0)) {\n            result++;\n        }\n    }\n    return result;\n};\n\n/*\n  Exercise:\n  - Return the number of integers less than n that are divisible by both 11 and 13.\n  - Return the number of integers less than n that are divisible by both 11 and 17.\n  - Return the number of integers less than n that are divisible by both 11 and 19.\n  - Return the number of integers less than n that are divisible by both 11 and 23.\n  - Return the number of integers less than n that are divisible by both 11 and 29.\n  - Return the number of integers less than n that are divisible by both 11 and 31.\n  - Return the number of integers less than n that are divisible by both 13 and 17.\n  - Return the number of integers less than n that are divisible by both 13 and 19.\n  - Return the number of integers less than n that are divisible by both 13 and 23.\n  - Return the number of integers less than n that are divisible by both 13 and 29.\n  - Return the number of integers less than n that are divisible by both 13 and 31.\n  - Return the number of integers less than n that are divisible by both 17 and 19.\n  - Return the number of integers less than n that are divisible by both 17 and 23.\n  - Return the number of integers less than n that are divisible by both 17 and 29.\n  - Return the number of integers less than n that are divisible by both 17 and 31.\n  - Return the number of integers less than n that are divisible by both 19 and 23.\n  - Return the number of integers less than n that are divisible by both 19 and 29.\n  - Return the number of integers less than n that are divisible by both 19 and 31.\n  - Return the number of integers less than n that are divisible by both 23 and 29.\n  - Return the number of integers less than n that are divisible by both 23 and 31.\n  - Return the number of integers less than n that are divisible by both 29 and 31.\n  */\nconst fizzBuzzCount = (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if ((i % 3 === 0) && (i % 5 === 0)) {\n            result++;\n        }\n    }\n    return result;\n};\n\n/*\n  Exercise:\n  - Return the number of integers less than n that are divisible by both 11 and 13 and 17.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and 23.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and 29.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and 31.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 13 and 19.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 13 and 23.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 13 and 29.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 13 and 31.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 17 and 19.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 17 and 23.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 17 and 29.\n  - Return the number of integers less than n that are divisible by both 11 and 17 and both 17 and 31.\n  - Return the number of integers less than n that are divisible by both 17 and 19 and both 17 and 23.\n  - Return the number of integers less than n that are divisible by both 17 and 19 and both 17 and 29.\n  - Return the number of integers less than n that are divisible by both 17 and 19 and both 17 and 31.\n  - Return the number of integers less than n that are divisible by both 17 and 23 and both 17 and 29.\n  - Return the number of integers less than n that are divisible by both 17 and 23 and both 17 and 31.\n  - Return the number of integers less than n that are divisible by both 17 and 29 and both 17 and 31.\n  - Return the number of integers less than n that are divisible by both 17 and 31 and both 17 and 29.\n  - Return the number of integers less than n that are divisible by both 17 and 31 and both 17 and 31.\n  */\nconst fizzBuzzCount2 = (n) => {\n    let result = 0;\n    for (let i = 1; i <= n; i++) {\n        if ((i % 3 === 0) && (i % 5 === 0)) {\n            result++;\n        }\n    }\n    return result;\n};\n\n// console.log(fizzBuzzCount(10));\n// console.log(fizzBuzzCount2(10));\n// console.log(fizzBuzzCount(12));\n// console.log(fizzBuzzCount2(12));\n// console.log(fizzBuzzCount(19));\n// console.log(fizzBuzzCount2(19));\n// console.log(fizzBuzzCount(20));\n// console.log(fizzBuzzCount2(20));\n// console.log(fizzBuzzCount(23));\n// console.log(fizzBuzzCount2(23));\n// console.log(fizzBuzzCount(24));\n// console.log(fizzBuzzCount2(24));\n// console.log(fizzBuzzCount(29));\n// console.log(fizzBuzzCount2(29));\n// console.log(fizzBuzzCount(30));\n// console.log(fizzBuzzCount2(30));\n// console.log(fizzBuzzCount(31));\n// console.log(fizzBuzzCount2(31));\n// console.log(fizzBuzzCount(33));\n// console.log(fizzBuzzCount2(33));\n// console.log(fizzBuzzCount(34));\n// console"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let evens = l.filter((e) => e % 2 === 0)\n  return evens.sort((a, b) => a - b)\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns string in hexadecimal format by cycling groups of htree characters.\n  */\nconts encodeHex = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 2), s.length)));\n  }\n  for (const group of groups) {\n    groups2.push(group.slice(1) + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeHex = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 2); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 2), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  encodeCyclic: encodeCyclic,\n  decodeCyclic: decodeCyclic,\n  encodeHex: encodeHex,\n  decodeHex: decodeHex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    if (n == 1) {\n        return 2;\n    }\n    else {\n        return ((primeFib(n - 1) + primeFib(n - 2)) % 10);\n    }\n};\n\nconsole.log(\"primeFib(1) = \" + primeFib(1));\nconsole.log(\"primeFib(2) = \" + primeFib(2));\nconsole.log(\"primeFib(3) = \" + primeFib(3));\nconsole.log(\"primeFib(4) = \" + primeFib(4));\nconsole.log(\"primeFib(5) = \" + primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let s = 0;\n    l.forEach((n) => {\n        if (s + n < 0) {\n            return false;\n        }\n        s += n;\n    });\n    return (s === 0);\n};\n\n/*\n  triplesSumToZero2 takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero2([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero2([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero2([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero2([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero2([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    let s = 0;\n    l.forEach((n) => {\n        if (s + n < 0) {\n            return false;\n        }\n        s += n;\n    });\n    return (s === 0);\n};\n\nconst findTriplesSumToZero = (l) => {\n    let s = 0;\n    let r = [];\n    l.forEach((n) => {\n        if (s + n < 0) {\n            return false;\n        }\n        s += n;\n        r.push([s, n]);\n    });\n    return r;\n};\n\nconst findTriplesSumToZero2 = (l) => {\n    let s = 0;\n    let r = [];\n    l.forEach((n) => {\n        if (s + n < 0) {\n            return false;\n        }\n        s += n;\n        r.push([s, n]);\n    });\n    return r;\n};\n\nconst main = () => {\n    let l = [2, 3, 4, 5, 6, 7, 9, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n    var collisions = [];\n    for(var i = 0; i < n; i++) {\n        collisions.push([]);\n        for(var j = 0; j < n; j++) {\n            collisions[i].push(0);\n        }\n    }\n    var car1 = {carId: 0, speed: 0, left: 1, right: 0};\n    var car2 = {carId: 1, speed: 0, left: 0, right: 1};\n    var cars = [car1, car2];\n    var collisionsByCar = collisions;\n    for(var i = 0; i < n; i++) {\n        for(var j = 0; j < n; j++) {\n            collisionsByCar[i][j] = carRaceCollisionByCar(cars, i, j);\n        }\n    }\n    var allCollisions = true;\n    for(var i = 0; i < n; i++) {\n        for(var j = 0; j < n; j++) {\n            if(collisionsByCar[i][j]!= 0) {\n                allCollisions = false;\n                break;\n            }\n        }\n    }\n    return allCollisions? 1 : collisionsByCar.reduce((carry, num) => carry + num, 0);\n}\n\nvar cars = [\n    {carId: 0, speed: 10, left: 1, right: 0},\n    {carId: 1, speed: 10, left: 0, right: 1},\n    {carId: 2, speed: 10, left: 1, right: 1},\n    {carId: 3, speed: 10, left: 0, right: 0},\n    {carId: 4, speed: 10, left: 1, right: 0},\n    {carId: 5, speed: 10, left: 0, right: 1},\n    {carId: 6, speed: 10, left: 1, right: 1},\n    {carId: 7, speed: 10, left: 0, right: 0},\n    {carId: 8, speed: 10, left: 1, right: 0},\n    {carId: 9, speed: 10, left: 0, right: 1},\n    {carId: 10, speed: 10, left: 1, right: 1},\n    {carId: 11, speed: 10, left: 0, right: 0}\n];\n\nvar collisionsByCar = cars.map((car) => {\n    var collisions = [];\n    for(var i = 0; i < car.speed; i++) {\n        for(var j = 0; j < car.speed; j++) {\n            if(car.left && car.right) {\n                collisions.push(0);\n            } else {\n                collisions.push(carRaceCollisionByCar(cars, car.carId, j));\n            }\n        }\n    }\n    return collisions;\n});\n\nconsole.log(cars.map((car) => car.carId));\nconsole.log(collisionsByCar);\n\n//var allCollisions = cars.map((car) => car.carId);\n//for(var i = 0; i < cars.length; i++) {\n//    for(var j = 0; j < cars.length; j++) {\n//        if(cars[i].carId!= cars[j].carId) {\n//            allCollisions[i] += cars[j].carId;\n//        }\n//    }\n//}\n//console.log(allCollisions);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = l.slice(0);\n  for (let i = 1; i < l.length; i++) {\n    result[i] = l[i] + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconsole.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let found = false\n    l.forEach((i) => {\n        if(found) {\n            return false\n        }\n        let sum = i\n        for(let j = i + 1; j < l.length; j++) {\n            sum += l[j]\n            if(sum === 0) {\n                found = true\n                break\n            }\n        }\n        if(sum === 0) {\n            return false\n        }\n    })\n    return found\n}\n\n/*\n  findPairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> findPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> findPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> findPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> findPairsSumToZero([1])\n  false\n  */\nconst findPairsSumToZero = (l) => {\n    let found = false\n    l.forEach((i) => {\n        let sum = i\n        for(let j = i + 1; j < l.length; j++) {\n            sum += l[j]\n            if(sum === 0) {\n                found = true\n                break\n            }\n        }\n    })\n    return found\n}\n\nmodule.exports = {\n    pairsSumToZero,\n    findPairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const str = x.toString(base)\n  const n = parseInt(str, base)\n  const result = (n < base)? changeBase(n, base) : str\n  return result\n}\n\nexport default changeBase\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 12);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 2)\n  2.5\n  */\nconst triangleArea2 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 6);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 4)\n  4.5\n  */\nconst triangleArea3 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 4);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 5)\n  5.0\n  */\nconst triangleArea4 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 3);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 6)\n  6.25\n  */\nconst triangleArea5 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 2);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 7)\n  7.875\n  */\nconst triangleArea6 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 1.5);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 8)\n  8.25\n  */\nconst triangleArea7 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 1);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 9)\n  9.0\n  */\nconst triangleArea8 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.5);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 10)\n  10.0\n  */\nconst triangleArea9 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.25);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 11)\n  11.0\n  */\nconst triangleArea10 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.125);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 12)\n  12.0\n  */\nconst triangleArea11 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.0625);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 13)\n  13.0\n  */\nconst triangleArea12 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.03125);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 14)\n  14.0\n  */\nconst triangleArea13 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.015625);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 15)\n  15.0\n  */\nconst triangleArea14 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.0078125);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 16)\n  16.0\n  */\nconst triangleArea15 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.00390625);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 17)\n  17.0\n  */\nconst triangleArea16 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.0009765625);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 18)\n  18.0\n  */\nconst triangleArea17 = (a, h) => {\n    const s = a * h / 2;\n    return Math.sqrt(s * (s - a) * (s - h) / 0.00048828125);\n};\n\n/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 19)\n  19.0\n  */\nconst triangleArea"}
{"task_id": "JavaScript/46", "prompt": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nmodule.exports = fib4\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return undefined;\n  }\n\n  let mid = (l.length - 1) / 2\n  if (l.length % 2) {\n    return l[mid];\n  }\n\n  return (l[mid] + l[mid + 1]) / 2;\n}\n\n/**\n  * @name sum\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum2\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum2 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum3\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum3 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum4\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum4 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum5\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum5 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum6\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum6 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum7\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum7 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum8\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum8 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum9\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum9 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum10\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum10 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum11\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum11 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum12\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum12 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum13\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum13 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum14\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum14 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum15\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum15 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum16\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum16 = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n}\n\n/**\n  * @name sum17\n  * @description Return sum of elements in the list l.\n  * @param {List} l List\n  * @returns {number} Sum of elements in the list.\n  */\nconst sum17"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let chars = text.split('');\n    let length = chars.length;\n    let odd = false;\n    let even = false;\n    for (let i = 0; i < length / 2; i++) {\n        if (chars[i]!== chars[length - i - 1]) {\n            odd = true;\n        } else {\n            even = true;\n        }\n    }\n    return even && odd;\n}\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1;\n  if (n === 1) return p;\n  return n % p;\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns the string in alphabetical order\n  */\nconst decodeShiftInOrder = (s) => {\n  let s2 = decodeShift(s);\n  let sorted = s2.split(\"\");\n  return sorted.sort();\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns the string in reverse alphabetical order\n  */\nconst decodeShiftInReverseOrder = (s) => {\n  let s2 = decodeShift(s);\n  let sorted = s2.split(\"\");\n  return sorted.reverse().sort();\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string of the length of the input\n  string that contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLength = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = 0; i < s2.length; i++) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string that is the length of the\n  input string, but contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLengthReverse = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = s2.length - 1; i >= 0; i--) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string that is the length of the\n  input string, but contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLengthInReverse = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = 0; i < s2.length; i++) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string that is the length of the\n  input string, but contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLengthInOrder = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = 0; i < s2.length; i++) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string that is the length of the\n  input string, but contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLengthInReverseOrder = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = s2.length - 1; i >= 0; i--) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns a string that is the length of the\n  input string, but contains all the characters from the alphabet that are present in the input string.\n  */\nconst decodeShiftLengthInOrderReverse = (s) => {\n  let s2 = decodeShift(s);\n  let s3 = \"\";\n  for (let i = 0; i < s2.length; i++) {\n    if (s2.charAt(i) == \"\") {\n      s3 = s3 + \" \";\n    } else {\n      s3 = s3 + s2.charAt(i);\n    }\n  }\n  return s3;\n}\n\nexport {\n  encodeShift,\n  decodeShift,\n  encodeShiftInOrder,\n  encodeShiftInReverse,\n  decodeShiftInOrder,\n  decodeShiftInReverse,\n  decodeShiftLength,\n  decodeShiftLengthReverse,\n  decodeShiftLengthInOrder,\n  decodeShiftLengthInReverse,\n  decodeShiftLengthInOrderReverse,\n  decodeShiftLengthInReverseOrder,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  const result = [];\n  vowels.forEach(vowel => {\n    let letterIndex = 0;\n    for (let i = 0; i < text.length; i++) {\n      if (text[i] === vowel) {\n        result.push(text[i]);\n        letterIndex++;\n      }\n    }\n    text = text.slice(letterIndex);\n  });\n  return result.join('');\n};\n\n/*\n  getVowelCount is a function that takes string and returns number of vowel in string.\n  >>> getVowelCount('')\n  0\n  >>> getVowelCount('abcdef\\nghijklm')\n  2\n  >>> getVowelCount('abcdef')\n  1\n  >>> getVowelCount('aaaaa')\n  0\n  >>> getVowelCount('aaBAA')\n  1\n  >>> getVowelCount('zbcd')\n  1\n  */\nconst getVowelCount = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  let vowelCount = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i]) > -1) {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\n/*\n  getWordCount is a function that takes string and returns number of words in string.\n  >>> getWordCount('')\n  0\n  >>> getWordCount('abcdef\\nghijklm')\n  2\n  >>> getWordCount('abcdef')\n  1\n  >>> getWordCount('aaaaa')\n  0\n  >>> getWordCount('aaBAA')\n  1\n  >>> getWordCount('zbcd')\n  1\n  */\nconst getWordCount = (text) => {\n  const words = text.split(' ');\n  return words.length;\n};\n\n/*\n  getWords is a function that takes string and returns string with all words removed.\n  >>> getWords('')\n  ''\n  >>> getWords('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> getWords('abcdef')\n  'bcdf'\n  >>> getWords('aaaaa')\n  ''\n  >>> getWords('aaBAA')\n  'B'\n  >>> getWords('zbcd')\n  'zbcd'\n  */\nconst getWords = (text) => {\n  const words = text.split(' ');\n  return words.join(' ');\n};\n\n/*\n  main is the main function.\n  */\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(v => v < t)\n}\n\n/* Return true if the number n is a power of two.\n  >>> isPowerOfTwo(2)\n  true\n  >>> isPowerOfTwo(4)\n  false\n  >>> isPowerOfTwo(16)\n  false\n  */\nconst isPowerOfTwo = n => {\n  return n && (n & (n - 1)) === 0\n}\n\n/* Return true if the number n is a perfect power of two.\n  >>> isPerfectPowerOfTwo(2)\n  false\n  >>> isPerfectPowerOfTwo(4)\n  true\n  >>> isPerfectPowerOfTwo(16)\n  true\n  >>> isPerfectPowerOfTwo(16)\n  true\n  >>> isPerfectPowerOfTwo(32)\n  false\n  */\nconst isPerfectPowerOfTwo = n => {\n  return isPowerOfTwo(n) && n!== 1\n}\n\n/* Return true if the number n is a prime number.\n  >>> isPrime(2)\n  false\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  >>> isPrime(6)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(11)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(18)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(23)\n  true\n  >>> isPrime(24)\n  true\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  true\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*Multiply two numbers x nad y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*Divide two numbers x nad y\n  >>> divide(10, 2)\n  5\n  >>> divide(10, 3)\n  3\n  >>> divide(10, 5)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/*Subtract two numbers x nad y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*Subtract two numbers x nad y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n//Test the above functions\n//2 + 3 = 5\n//3 * 2 = 6\n//10 / 2 = 5\n//5 - 7 = 2\n//8 - 6 = 2\n//1 * 2 = 2\n//4 / 2 = 2\n//5 * 2 = 10\n//1 * 2 = 2\n//4 * 2 = 8\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0 === s1) {\n        return true;\n    }\n\n    if (s0.length!== s1.length) {\n        return false;\n    }\n\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nexport {\n    sameChars,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  if (n === 3) {\n    return 2\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\nmodule.exports = fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let i = 0\n  while (i < brackets.length) {\n    if (brackets[i] === \">\") {\n      let j = i + 1\n      while (j < brackets.length && brackets[j]!== \"<\") {\n        j++\n      }\n      if (j < brackets.length && brackets[j] === \"<\") {\n        i = j\n      } else {\n        return false\n      }\n    } else {\n      i++\n    }\n  }\n  return true\n}\n\nconst bracketing = (brackets) => {\n  if (!correctBracketing(brackets)) {\n    throw new Error(\"Invalid bracketing\")\n  }\n  return brackets\n}\n\nconst parse = (input) => {\n  let brackets = input.split(/\\s*\\<\\s*/)\n  return bracketing(brackets)\n}\n\nconst solve = (input) => {\n  let brackets = parse(input)\n  let i = 0\n  let j = brackets.length - 1\n  let result = brackets[i] + brackets[j]\n  while (i < j) {\n    let min = Math.min(i + 1, j)\n    let max = Math.max(i + 1, j)\n    while (min < max) {\n      let mid = Math.floor((min + max) / 2)\n      let newResult = brackets[mid] + brackets[i] + brackets[j]\n      if (newResult === result) {\n        return result\n      } else if (newResult < result) {\n        min = mid + 1\n      } else {\n        max = mid\n      }\n    }\n    i++\n    j--\n  }\n  return result\n}\n\nconst valid = (input) => {\n  let brackets = parse(input)\n  for (let i = 0; i < brackets.length; i++) {\n    for (let j = i + 1; j < brackets.length; j++) {\n      if (brackets[i] === brackets[j]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst runTests = (tests) => {\n  for (let test of tests) {\n    console.log(solve(test))\n  }\n}\n\nconst tests = [\n  \"<><><>\",\n  \"<><>\",\n  \"<><\",\n  \"<>\",\n  \"<>\",\n  \"<\",\n  \">\",\n  \">><>\",\n  \">><<\",\n  \">><\",\n  \">><\",\n  \"<><\",\n  \"<><\",\n  \"<><><\",\n  \"<><><>\"\n]\n\nrunTests(tests)\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let a = 1\n  let b = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < b) {\n      return false\n    }\n    if (l[i] > a) {\n      b = l[i]\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list contains only distinct elements\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst distinct = (l) => {\n  if (l.length === 0) {\n    return false\n  }\n  let a = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list contains no duplicates\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst noDuplicates = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list is sorted\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst sorted = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list is a permutation\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst isPermutation = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  let b = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list is a unique permutation\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst isUniquePermutation = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  let b = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list is a unique permutation\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst isUniquePermutation2 = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  let b = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * Return true if list is a unique permutation\n  *\n  * @param {Array} l\n  * @returns {Boolean}\n  */\nconst isUniquePermutation3 = (l) => {\n  if (l.length === 0) {\n    return true\n  }\n  let a = l[0]\n  let b = l[0]\n  let c = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] === a) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  monotonic,\n  distinct,\n  sorted,\n  isPermutation,\n  isUniquePermutation,\n  isUniquePermutation2,\n  isUniquePermutation3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const m1 = {};\n  const m2 = {};\n  for (let i = 0; i < l1.length; i++) {\n    m1[l1[i]] = true;\n  }\n  for (let i = 0; i < l2.length; i++) {\n    m2[l2[i]] = true;\n  }\n  const r = [];\n  for (let i = 0; i < Object.keys(m1).length; i++) {\n    if (m2[Object.keys(m1)[i]]) {\n      r.push(Object.keys(m1)[i]);\n    }\n  }\n  return r;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\nconsole.log(largestPrimeFactor(13195));\nconsole.log(largestPrimeFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return ((n * (n + 1)) / 2);\n};\n\nexport default sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  let currentBracketCount = 1\n\n  for (let i = 0; i < bracketsLength - 1; i++) {\n    if (brackets[i] === '(' && brackets[i + 1] === ')') {\n      currentBracketCount--\n    }\n    if (brackets[i] === '(' && brackets[i + 1] === '(') {\n      currentBracketCount++\n    }\n  }\n\n  if (currentBracketCount === 0) {\n    return true\n  }\n\n  return false\n}\n\nexport {correctBracketing}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": false, "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return [...new Array(xs.length - 1).fill(0)]\n   .concat(xs.slice(1))\n   .map((x, i) => xs[i + 1] * (xs.length - 1 - i))\n}\n\n// xs represent coefficients of a polynomial.\n// Return derivative of this polynomial in the same form.\nconst polyDerivative = (xs) => {\n  return derivative(xs)\n}\n\nconst solve = (xs) => {\n  const num = xs.length - 1\n  const den = xs[0]\n\n  return num === 0? den : xs[1] / den\n}\n\n// xs represent coefficients of a polynomial.\n// Return a new polynomial.\nconst polyAdd = (xs, ys) => {\n  return xs.concat(ys)\n}\n\n// xs represent coefficients of a polynomial.\n// Return a new polynomial.\nconst polySubtract = (xs, ys) => {\n  return xs.slice(0, -ys.length)\n   .concat(ys.slice(1))\n}\n\n// xs represent coefficients of a polynomial.\n// Return a new polynomial.\nconst polyMultiply = (xs, ys) => {\n  return xs.map((x, i) => x * ys[i])\n}\n\n// xs represent coefficients of a polynomial.\n// Return a new polynomial.\nconst polyDivide = (xs, ys) => {\n  return xs.map((x, i) => x / ys[i])\n}\n\n// xs represent coefficients of a polynomial.\n// Return a new polynomial.\nconst polyPower = (xs, n) => {\n  if (n === 1) {\n    return xs\n  } else {\n    return polyMultiply(polyPower(xs, n - 1), xs)\n  }\n}\n\nconst polySum = (xs) => {\n  return xs.reduce((a, b) => a + b)\n}\n\nconst polyDifference = (xs) => {\n  return xs.reduce((a, b) => a - b)\n}\n\nconst polyProduct = (xs) => {\n  return xs.reduce((a, b) => a * b)\n}\n\nconst polyQuotient = (xs) => {\n  return xs.reduce((a, b) => a / b)\n}\n\nconst polyNegate = (xs) => {\n  return xs.slice(0, -1).concat([-xs[xs.length - 1]])\n}\n\nconst polyIntegral = (xs) => {\n  return polyDifference(xs)\n}\n\nconst polyReverse = (xs) => {\n  return xs.reverse()\n}\n\nconst polyReplace = (xs, i, y) => {\n  return xs.slice(0, i)\n   .concat([y], xs.slice(i + 1))\n}\n\nconst polyToString = (xs) => {\n  return xs.join(' ')\n}\n\nconst polyZero = (num) => {\n  return []\n}\n\nconst polyOne = (num) => {\n  return [1]\n}\n\nconst polyZeroToOne = (num) => {\n  return [1, 0]\n}\n\nconst polyIsZero = (xs) => {\n  return xs.length === 1 && xs[0] === 0\n}\n\nconst polyIsOne = (xs) => {\n  return xs.length === 1 && xs[0] === 1\n}\n\nconst polyIsPositive = (xs) => {\n  return xs.every((x) => x > 0)\n}\n\nconst polyIsNegative = (xs) => {\n  return xs.every((x) => x < 0)\n}\n\nconst polyIsNonNegative = (xs) => {\n  return xs.every((x) => x >= 0)\n}\n\nconst polyIsNonPositive = (xs) => {\n  return xs.every((x) => x <= 0)\n}\n\nconst polyIsPositiveOrZero = (xs) => {\n  return xs.every((x) => x > 0 || x === 0)\n}\n\nconst polyIsNegativeOrZero = (xs) => {\n  return xs.every((x) => x < 0 || x === 0)\n}\n\nconst polyIsNonNegativeOrZero = (xs) => {\n  return xs.every((x) => x >= 0 || x === 0)\n}\n\nconst polyIsNonPositiveOrZero = (xs) => {\n  return xs.every((x) => x <= 0 || x === 0)\n}\n\nconst polyIsNonZero = (xs) => {\n  return xs.length > 0 && xs.every((x) => x!== 0)\n}\n\nconst polyIsNonNegative = (xs) => {\n  return xs.length > 0 && xs.every((x) => x >= 0)\n}\n\nconst polyIsNonPositive = (xs) => {\n  return xs.length > 0 && xs.every((x) => x <= 0)\n}\n\nconst polyIsNonZero = (xs) => {\n  return xs.length > 0 && xs.every((x) => x!== 0)\n}\n\nconst polyIsNonPositiveOrZero = (xs) => {\n  return xs.length > 0 && xs.every((x) => x <= 0 || x === 0)\n}\n\nconst polyIsNonNegativeOrZero = (xs) => {\n  return xs.length > 0 && xs.every((x) => x >= 0 || x === 0)\n}\n\nconst polyIsNonPositiveOrZero = (xs) => {\n  return xs.length > 0 && xs.every((x) => x <= 0 || x === 0)\n}\n\nconst polyIsNonZero"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let i = 0, j = 1, k = 0;\n  return ((i <= n)? i : j) + ((j <= n)? j : k) + ((k <= n)? k : 0);\n}\n\nexport default fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels[s[i]]) {\n      result += 1;\n    }\n  }\n  if (s.length > 0 && s[s.length - 1] === 'y') {\n    result += 1;\n  }\n  return result;\n};\n\nexport {\n  vowelsCount,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const newX = x << shift | x >>> (32 - shift);\n  return newX.toString(2);\n};\n\n/*\n  The number of digits in the number x, return the number of digits.\n  >>> countDigits(1)\n  1\n  >>> countDigits(10)\n  2\n  >>> countDigits(10000)\n  5\n  >>> countDigits(123456789)\n  9\n  >>> countDigits(987654321)\n  10\n  >>> countDigits(1234567)\n  6\n  */\nconst countDigits = (x) => {\n  let count = 0;\n  while (x > 0) {\n    x = x / 10;\n    count += 1;\n  }\n  return count;\n};\n\n/*\n  The number of digits in the number x, return the number of digits.\n  >>> countDigitsReverse(1)\n  1\n  >>> countDigitsReverse(10)\n  2\n  >>> countDigitsReverse(10000)\n  5\n  >>> countDigitsReverse(123456789)\n  9\n  >>> countDigitsReverse(987654321)\n  10\n  >>> countDigitsReverse(1234567)\n  6\n  */\nconst countDigitsReverse = (x) => {\n  let count = 0;\n  while (x > 0) {\n    x = x / 10;\n    count += 1;\n  }\n  return count;\n};\n\n// TESTS\n[\n  [1, 1],\n  [10, 2],\n  [123456789, 9],\n  [987654321, 10],\n  [1234567, 6],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10],\n  [987654321, 10"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const arr = s.split('')\n    const result = 0\n    for (const c of arr) {\n        result += c.charCodeAt(0) - 64\n    }\n    return result\n}\n\n/*\n  Task\n  Write a function that sums the two passed parameters and returns the result in int32_t type\n  Example:\n      sum(\"3\", \"5\") => 8\n  */\nconst sum = (a, b) => {\n    return parseInt(a) + parseInt(b)\n}\n\n/*\n  Task\n  Write a function that adds the first parameter to the second and returns the result in int32_t type\n  Example:\n      add(\"1\", \"2\") => 3\n  */\nconst add = (a, b) => {\n    return parseInt(a) + parseInt(b)\n}\n\n/*\n  Task\n  Write a function that returns the number of the characters of a string\n  Example:\n      stringLength(\"Hello World\") => 12\n  */\nconst stringLength = (s) => {\n    return s.length\n}\n\n/*\n  Task\n  Write a function that takes a string and a character and returns the number of occurrences of the character\n  Example:\n      occurences(\"abc\", \"c\") => 2\n  */\nconst occurences = (s, c) => {\n    return s.split(c).length - 1\n}\n\n/*\n  Task\n  Write a function that takes a string and a character and returns the number of occurrences of the character\n  Example:\n      occurences(\"abc\", \"b\") => 2\n  */\nconst occurences = (s, c) => {\n    return s.split(c).length - 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 10\n  Example:\n      randomNumber() => 4\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 10) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 3\n  Example:\n      randomNumber() => 2\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 3) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 5\n  Example:\n      randomNumber() => 4\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 5) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 7\n  Example:\n      randomNumber() => 6\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 7) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 9\n  Example:\n      randomNumber() => 7\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 9) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 15\n  Example:\n      randomNumber() => 9\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 15) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 17\n  Example:\n      randomNumber() => 10\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 17) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 19\n  Example:\n      randomNumber() => 11\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 19) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 21\n  Example:\n      randomNumber() => 12\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 21) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 23\n  Example:\n      randomNumber() => 13\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 23) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 25\n  Example:\n      randomNumber() => 14\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 25) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 27\n  Example:\n      randomNumber() => 15\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 27) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 29\n  Example:\n      randomNumber() => 16\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 29) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 31\n  Example:\n      randomNumber() => 17\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 31) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 33\n  Example:\n      randomNumber() => 18\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 33) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 35\n  Example:\n      randomNumber() => 19\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 35) + 1\n}\n\n/*\n  Task\n  Write a function that returns a random number between 1 and 37\n  Example:\n      randomNumber() => 20\n  */\nconst randomNumber = () => {\n    return Math.floor(Math.random() * 37) + 1"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let [total, apple, orange] = s.split(\" \").map(v => Number(v));\n  let [apples, oranges] = n.split(\" \").map(v => Number(v));\n  let totalApple = apples * total;\n  let totalOrange = oranges * total;\n  let mangoFruit = totalApple + totalOrange;\n  return mangoFruit;\n}\n\nmodule.exports = fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  const root = arr[0]\n  let left = root.left\n  let right = root.right\n  let [value, index] = [root.value, root.index]\n  while (left) {\n    if (left.value % 2 === 0) {\n      [value, index] = [left.value, left.index]\n      right = left.right\n      while (right) {\n        if (right.value % 2 === 0) {\n          [value, index] = [right.value, right.index]\n          right = right.right\n        } else {\n          break\n        }\n      }\n    } else {\n      break\n    }\n    left = left.left\n  }\n  return [value, index]\n}\n\n// @param {number[]} arr\n// @return {number}\n//\n// time complexity: O(n)\n// space complexity: O(1)\nconst minValue = (arr) => {\n  if (arr.length === 0) return 0\n  let min = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return min\n}\n\n// @param {number[]} arr\n// @return {number}\n//\n// time complexity: O(n)\n// space complexity: O(1)\nconst maxValue = (arr) => {\n  if (arr.length === 0) return 0\n  let max = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = 0;\n    for (let i = 0; i < lst.length; i++) {\n        const cur = lst[i];\n        if (cur > 0 && cur > max) {\n            max = cur;\n        }\n    }\n    return max;\n};\n\nexport {\n    search\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const list = [];\n  for (let i = min; i <= max; i++) {\n    list.push(lst.filter(i => i!= i));\n  }\n  return list.sort(\n    (a, b) => a[0] > b[0]? 1 : a[0] < b[0]? -1 : 0\n  );\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a + b > c) {\n        return (a + b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n    } else {\n        return -1\n    }\n}\n\nconst triangleArea2 = (a, b, c) => {\n    const ab = Math.pow(a, 2) + Math.pow(b, 2)\n    const bc = Math.pow(b, 2) + Math.pow(c, 2)\n    const ac = Math.pow(a, 2) + Math.pow(c, 2)\n    const bc_ab = Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(a, 2)\n    if (bc > ab && bc > ac) {\n        return (b + c) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n    } else if (bc < ab && bc > ac) {\n        return (b + a) / 2 * Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(a, 2))\n    } else if (bc < ab) {\n        return (c + a) / 2 * Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2))\n    } else {\n        return -1\n    }\n}\n\n// triangleArea2(1, 2, 3)\n// triangleArea2(1, 1, 2)\n// triangleArea2(1, 2, 2)\n\nconsole.log(triangleArea(3, 4, 5))\nconsole.log(triangleArea(1, 2, 10))\nconsole.log(triangleArea(1, 2, 3))\nconsole.log(triangleArea2(1, 2, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    if (q.length < 2) return false;\n    let sum = 0;\n    for (let i = 0; i < q.length / 2; i++) {\n        sum += q[i];\n    }\n    if (sum >= w) return true;\n    if (sum <= w) return false;\n    let x = q.slice(0, q.length / 2);\n    let y = q.slice(q.length / 2);\n    if (x.join() === y.reverse().join()) return true;\n    return false;\n};\n\nconsole.log(willItFly([1, 2, 3], 5)); // true\nconsole.log(willItFly([1, 2, 3], 9)); // true\nconsole.log(willItFly([1, 2, 3], 4)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length;\n  let min = 0;\n  let index = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (min === 0) {\n        min = i;\n      }\n    } else {\n      if (min!== 0) {\n        if (i - min < min) {\n          min = i - min;\n          index = i;\n        }\n      }\n      min = 0;\n    }\n  }\n  return index;\n};\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const max = Math.max(lst1.length, lst2.length);\n  const result = [];\n\n  for (let i = 0; i < max; i++) {\n    if (lst1[i] === lst2[i]) {\n      result.push(lst1[i]);\n    }\n  }\n\n  if (lst1.length === max) {\n    return result;\n  }\n\n  if (lst2.length === max) {\n    return result;\n  }\n\n  return lst1;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  // the number must be prime\n  if (isPrime(a) && isPrime(a * 2) && isPrime(a * 3)) {\n    return true;\n  }\n  return false;\n};\n\nconst findPrimes = (n) => {\n  // the array to store the primes\n  const primes = [];\n  // the number of prime to find\n  const count = n;\n  // the number of times to search\n  const times = Math.floor(Math.sqrt(n));\n\n  // loop through every number from 1 to times\n  for (let i = 1; i < times; i++) {\n    // if the number is not a prime\n    if (!isPrime(i)) {\n      // loop through the next number\n      for (let j = i + 1; j < times + i; j++) {\n        // if the number is a prime\n        if (isPrime(j)) {\n          // create a new prime\n          const prime = j;\n          // if the number is prime\n          if (prime > n) {\n            // add the prime to the array\n            primes.push(prime);\n          }\n          // if the number is not a prime\n          else {\n            // loop through the number\n            for (let k = i; k < times + i; k++) {\n              // if the number is prime\n              if (prime * k > n) {\n                // add the prime to the array\n                primes.push(prime * k);\n              }\n              // if the number is not a prime\n              else {\n                // loop through the number\n                for (let l = i; l < times + i; l++) {\n                  // if the number is prime\n                  if (prime * k * l > n) {\n                    // add the prime to the array\n                    primes.push(prime * k * l);\n                  }\n                  // if the number is not a prime\n                  else {\n                    // loop through the number\n                    for (let m = i; m < times + i; m++) {\n                      // if the number is prime\n                      if (prime * k * l * m > n) {\n                        // add the prime to the array\n                        primes.push(prime * k * l * m);\n                      }\n                      // if the number is not a prime\n                      else {\n                        // loop through the number\n                        for (let n = i; n < times + i; n++) {\n                          // if the number is prime\n                          if (prime * k * l * m * n > n) {\n                            // add the prime to the array\n                            primes.push(prime * k * l * m * n);\n                          }\n                          // if the number is not a prime\n                          else {\n                            // loop through the number\n                            for (let p = i; p < times + i; p++) {\n                              // if the number is prime\n                              if (prime * k * l * m * n * p > n) {\n                                // add the prime to the array\n                                primes.push(prime * k * l * m * n * p);\n                              }\n                              // if the number is not a prime\n                              else {\n                                // loop through the number\n                                for (let q = i; q < times + i; q++) {\n                                  // if the number is prime\n                                  if (prime * k * l * m * n * p * q > n) {\n                                    // add the prime to the array\n                                    primes.push(prime * k * l * m * n * p * q);\n                                  }\n                                  // if the number is not a prime\n                                  else {\n                                    // loop through the number\n                                    for (let r = i; r < times + i; r++) {\n                                      // if the number is prime\n                                      if (prime * k * l * m * n * p * q * r > n) {\n                                        // add the prime to the array\n                                        primes.push(prime * k * l * m * n * p * q * r);\n                                      }\n                                      // if the number is not a prime\n                                      else {\n                                        // loop through the number\n                                        for (let s = i; s < times + i; s++) {\n                                          // if the number is prime\n                                          if (prime * k * l * m * n * p * q * r * s > n) {\n                                            // add the prime to the array\n                                            primes.push(prime * k * l * m * n * p * q * r * s);\n                                          }\n                                          // if the number is not a prime\n                                          else {\n                                            // loop through the number\n                                            for (let t = i; t < times + i; t++) {\n                                              // if the number is prime\n                                              if (prime * k * l * m * n * p * q * r * s * t > n) {\n                                                // add the prime to the array\n                                                primes.push(prime * k * l * m * n * p * q * r * s * t);\n                                              }\n                                              // if the number is not a prime\n                                              else {\n                                                // loop through the number\n                                                for (let u = i; u < times + i; u++) {\n                                                  // if the number is prime\n                                                  if (prime * k * l * m * n * p * q * r * s * t * u > n) {\n                                                    // add the prime to the array\n                                                    primes.push(prime * k * l * m * n * p * q * r * s * t * u);\n                                                  }\n                                                  // if the number is not a prime\n                                                  else {\n                                                    // loop through the number\n                                                    for (let v = i; v < times + i; v++) {\n                                                      // if the number is prime\n                                                      if (prime * k * l * m"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": false, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x % n === 0 && x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\n//export function main() {\n//  const tests = [\n//    {x: 1, n: 4},\n//    {x: 2, n: 2},\n//    {x: 8, n: 2},\n//    {x: 3, n: 2},\n//    {x: 3, n: 1},\n//    {x: 5, n: 3}\n//  ];\n//\n//  tests.forEach(test => {\n//    console.log(isSimplePower(test.x, test.n));\n//  });\n//}\n\nexport function isSimplePower(x, n) {\n  return x % n === 0 && x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n}\n\n//export main();\n\n// Your function returns true if the given string is a palindrome\n// and false otherwise.\n// You may assume that the string contains only lowercase letters.\n//\n// For example, \"A man, a plan, a canal: Panama\" is a palindrome.\n//\n// Note that \"race a car\" is not a palindrome.\n//\n//\nconst isPalindrome = str => {\n  return str.split('').reverse().join('') === str;\n}\n\n//export function main() {\n//  const tests = [\n//    {str: 'A man, a plan, a canal: Panama', isPalindrome: true},\n//    {str: 'race a car', isPalindrome: false},\n//    {str: 'race a car', isPalindrome: false},\n//    {str: 'race a car', isPalindrome: false},\n//    {str: 'race a car', isPalindrome: false}\n//  ];\n//\n//  tests.forEach(test => {\n//    console.log(test.str, isPalindrome(test.str));\n//  });\n//}\n\nconst isPalindrome = str => {\n  return str.split('').reverse().join('') === str;\n}\n\nexport function main() {\n  const tests = [\n    {str: 'A man, a plan, a canal: Panama', isPalindrome: true},\n    {str: 'race a car', isPalindrome: false},\n    {str: 'race a car', isPalindrome: false},\n    {str: 'race a car', isPalindrome: false},\n    {str: 'race a car', isPalindrome: false}\n  ];\n  const test = tests[0];\n\n  console.log(test.str, isPalindrome(test.str));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const sum = a * a * a\n  return sum === a\n}\n\nmodule.exports = iscube\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let numLetters = num.length;\n  const letters = num.split('');\n  const numLettersHex = numLetters.map(\n    (n, i) => (i < numLettersHex.length)\n     ? (n.charCodeAt(0) - '0').toString(16)\n      : '0'\n  );\n\n  const keys = letters.map(\n    (letter, i) =>\n      (i % 2 === 0)\n       ? (i < numLettersHex.length)\n         ? (numLettersHex[i].charCodeAt(0) - '0').toString(16)\n          : '0'\n        : (numLettersHex[i - 1].charCodeAt(0) - '0').toString(16)\n    )\n  );\n\n  const keysToNumber =\n    (keys.reduce((acc, num, i) => {\n      if (acc < num) acc = num;\n      return acc;\n    }, 0))\n   .toString(16);\n\n  return keysToNumber;\n};\n\nconst findPrime = (n) => {\n  const nPrime =\n    (n + 1).toString(16).substr(1, n.toString(16).length)\n     .split('')\n     .map(\n        (n, i) => (i < nPrime.length)\n         ? (nPrime[i].charCodeAt(0) - '0').toString(16)\n          : '0'\n      );\n\n  const primes = nPrime.filter((n) => n > 1);\n\n  return primes;\n};\n\nconst isPrime = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 1 && prime.length < n.toString(16).length;\n};\n\nconst isPrimeSparse = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 1 && prime.length < n.toString(16).length;\n};\n\nconst isPrime2 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 2 && prime.length < n.toString(16).length;\n};\n\nconst isPrime3 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 3 && prime.length < n.toString(16).length;\n};\n\nconst isPrime4 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 4 && prime.length < n.toString(16).length;\n};\n\nconst isPrime5 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 5 && prime.length < n.toString(16).length;\n};\n\nconst isPrime6 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 6 && prime.length < n.toString(16).length;\n};\n\nconst isPrime7 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 7 && prime.length < n.toString(16).length;\n};\n\nconst isPrime8 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 8 && prime.length < n.toString(16).length;\n};\n\nconst isPrime9 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 9 && prime.length < n.toString(16).length;\n};\n\nconst isPrime10 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 10 && prime.length < n.toString(16).length;\n};\n\nconst isPrime11 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 11 && prime.length < n.toString(16).length;\n};\n\nconst isPrime12 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 12 && prime.length < n.toString(16).length;\n};\n\nconst isPrime13 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 13 && prime.length < n.toString(16).length;\n};\n\nconst isPrime14 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 14 && prime.length < n.toString(16).length;\n};\n\nconst isPrime15 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 15 && prime.length < n.toString(16).length;\n};\n\nconst isPrime16 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 16 && prime.length < n.toString(16).length;\n};\n\nconst isPrime17 = (n) => {\n  const prime = findPrime(n);\n  return prime.length > 17 && prime.length < n.toString(16).length;\n};\n\nconst isPrime18"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const isNegative = (decimal < 0);\n  const isPositive =!isNegative;\n  let binary = '';\n  if (isNegative) {\n    decimal = -decimal;\n  }\n  while (decimal > 0) {\n    const mod = decimal % 2;\n    binary += mod? '1' : '0';\n    decimal = Math.floor(decimal / 2);\n  }\n  if (isPositive) {\n    binary += '1';\n  }\n  binary += 'db';\n  return binary.slice(0, -2);\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 1\n  for (let i = 0; i < s.length; i++) {\n    if (i < s.length - 2 && count % 2 === 0) {\n      count++\n    } else {\n      if (count % 2 === 1) {\n        return false\n      }\n      count = 1\n    }\n  }\n  return count >= 3\n}\n\nconsole.log(isHappy('a'))\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    let grades = ['A+', 'B', 'C-', 'C', 'A-'];\n\n    for (let i = 0; i < grades.length; i++) {\n        let val = grades[i];\n        let nextVal = grades[i + 1];\n        let diff = parseFloat(val) - parseFloat(nextVal);\n\n        if (diff > 0.3) {\n            grades.splice(i, 1, 'A');\n        } else if (diff < -0.3) {\n            grades.splice(i, 1, 'D');\n        } else {\n            grades.splice(i, 1, 'C');\n        }\n    }\n\n    return grades;\n};\n\nconsole.log(numericalLetterGrade([4.0, 3.0, 2.0, 1.0, 0.0]));\n\n/*\n  Given a string, compute the number of characters in the first appearance\n  of any number of lowercase letters.\n\nExample:\n  numberOfLetters(\"aaabbb\") ==> 4\n  numberOfLetters(\"abba\") ==> 5\n  numberOfLetters(\"aaa\") ==> 3\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"aaabbb\"));\n\n/*\n  Given a string, compute the number of distinct lowercase letters.\n\nExample:\n  numberOfLetters(\"aaabbb\") ==> 3\n  numberOfLetters(\"aaa\") ==> 1\n  numberOfLetters(\"aaa\") ==> 1\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 1;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"aaabbb\"));\n\n/*\n  Given a string, compute the number of distinct uppercase letters.\n\nExample:\n  numberOfLetters(\"AAabbb\") ==> 2\n  numberOfLetters(\"aaa\") ==> 1\n  numberOfLetters(\"aaa\") ==> 1\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 1;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"AAabbb\"));\n\n/*\n  Given a string, compute the number of uppercase letters.\n\nExample:\n  numberOfLetters(\"aaabbb\") ==> 4\n  numberOfLetters(\"aaa\") ==> 1\n  numberOfLetters(\"aaa\") ==> 1\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"aaabbb\"));\n\n/*\n  Given a string, compute the number of lowercase letters.\n\nExample:\n  numberOfLetters(\"aaabbb\") ==> 3\n  numberOfLetters(\"aaa\") ==> 1\n  numberOfLetters(\"aaa\") ==> 1\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"aaabbb\"));\n\n/*\n  Given a string, compute the number of numbers.\n\nExample:\n  numberOfLetters(\"a1b2c3\") ==> 3\n  numberOfLetters(\"a1b\") ==> 2\n  numberOfLetters(\"a1b\") ==> 2\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            letterCount++;\n        }\n    }\n\n    return letterCount;\n};\n\nconsole.log(numberOfLetters(\"a1b2c3\"));\n\n/*\n  Given a string, compute the number of digits.\n\nExample:\n  numberOfLetters(\"a1b2c3\") ==> 3\n  numberOfLetters(\"a1b\") ==> 2\n  numberOfLetters(\"a1b\") ==> 2\n*/\nconst numberOfLetters = (str) => {\n    let letterCount = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i"}
{"task_id": "JavaScript/82", "prompt": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n    if (typeof string!=='string') {\n        return false;\n    }\n    const length = string.length;\n    const isPrime = (number) => {\n        if (number < 2) {\n            return false;\n        }\n        for (let i = 2; i < Math.pow(number, 0.5); i++) {\n            if (number % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    };\n    for (let i = 2; i < length; i++) {\n        if (isPrime(i)) {\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  Write a function that checks for the number if it is a palindrome\n  Examples\n  isPalindrome('Hello') == true\n  isPalindrome('abcdcba') == true\n  isPalindrome('kittens') == false\n  */\nconst isPalindrome = (string) => {\n    if (typeof string!=='string') {\n        return false;\n    }\n    const length = string.length;\n    let i = 0;\n    let j = length - 1;\n    while (i < j) {\n        if (string[i]!== string[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n};\n\n/*\n  Write a function that adds a random number to the string\n  Examples\n  addRandomNumber('Hello') == 'Hello1'\n  addRandomNumber('Hello') == 'Hello2'\n  addRandomNumber('Hello') == 'Hello3'\n  */\nconst addRandomNumber = (string) => {\n    if (typeof string!=='string') {\n        return false;\n    }\n    const length = string.length;\n    const randomNumber = (number) => {\n        if (number < 0) {\n            return false;\n        }\n        if (number > 9) {\n            return false;\n        }\n        return (Math.floor(Math.random() * 10)).toString();\n    };\n    const i = length - 1;\n    const j = 0;\n    while (i >= j) {\n        string[i] = string[j];\n        i--;\n        j++;\n    }\n    string[j] = randomNumber();\n    return string;\n};\n\n/*\n  Write a function that removes the first occurrence of the word\n  Examples\n  removeWord('Hello') == 'Helloc'\n  removeWord('Hello') == 'Hellow'\n  removeWord('Hello') == 'Helloc'\n  */\nconst removeWord = (string) => {\n    if (typeof string!=='string') {\n        return false;\n    }\n    const length = string.length;\n    let i = 0;\n    let j = length - 1;\n    while (i < j) {\n        if (string[i] === string[j]) {\n            i++;\n        } else {\n            j--;\n        }\n    }\n    return string.substring(i);\n};\n\nmodule.exports = {\n    primeLength,\n    isPalindrome,\n    addRandomNumber,\n    removeWord\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j >= i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  negative inetgers that start or end with 1.\n  */\nocnst endsOneStarts = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j < i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 0.\n  */\nocnst startsZeroEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j >= i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  negative inetgers that start or end with 0.\n  */\nocnst endsZeroStarts = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j < i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start with 1.\n  */\nocnst startsOneStarts = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(i == j){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  negative inetgers that start with 0.\n  */\nocnst endsZeroStarts = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(i == j){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that end with 1.\n  */\nocnst endsOneEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j <= i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  negative inetgers that end with 0.\n  */\nocnst startsZeroEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(i == j){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that end with 1.\n  */\nocnst startsOneEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j <= i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\n/**\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  negative inetgers that end with 0.\n  */\nocnst endsZeroEnds = (n) => {\n  let count = 0;\n  for(let i = 1; i <= n; i++){\n    for(let j = 1; j <= n; j++){\n      if(j >= i){\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n\nmodule.exports = {\n  startsOneEnds,\n  endsOneStarts,\n  startsOneStarts,\n  endsZeroStarts,\n  endsZeroEnds,\n  endsOneEnds\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  return sum;\n};\n\nexport { solve };\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const evens = lst.filter((x) => x % 2 === 0);\n  return lst.reduce((acc, i) => acc + evens[i], 0);\n};\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\nExamples:\n  add([4, 2, 6, 7]) ==> 10\n\n  add([9, 3, 5, 1, 2, 4, 6, 7, 8, 0]) ==> 16\n*/\nconst add = (lst) => {\n  const evens = lst.filter((x) => x % 2 === 0);\n  return lst.reduce((acc, i) => acc + evens[i], 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let newString = s;\n  newString = newString.replace(/ /g,' ');\n  newString = newString.replace(/\\b/g,' ');\n  newString = newString.replace(/\\b/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  newString = newString.replace(/\\s/g,' ');\n  "}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let row = [],\n    length = lst.length,\n    i = 0,\n    col = 0;\n  while (i < length) {\n    if (lst[i] && lst[i][col] === x) {\n      row.push((col, lst[i][col]));\n      col++;\n    } else {\n      col = 0;\n    }\n    if (col >= lst[i].length) {\n      col = 0;\n      i++;\n    }\n  }\n  return row;\n};\n\n// console.log(getRow([\n//   [1,2,3,4,5,6],\n//   [1,2,3,4,1,6],\n//   [1,2,3,4,5,1]\n// ], 1));\n\n// console.log(getRow([], 1));\n// console.log(getRow([[], [1], [1, 2, 3]], 3));\n\n// getRow([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]], 1)\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let sorted = array.slice(0)\n  let index = 0\n  let len = sorted.length\n  let i = 0\n\n  while (i < len) {\n    let sum = sorted[i]\n    let j = i\n    while (j < len) {\n      let sum2 = sorted[j]\n      if (sum + sum2 > sum) {\n        sum = sum + sum2\n        sorted[i] = sum\n        sorted[j] = sorted[len - 1]\n        index = i\n        len = len - 1\n        i = j - 1\n      }\n      j++\n    }\n    i++\n  }\n\n  return sorted\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = '';\n  for(let i = 0; i < s.length; i++){\n    let x = s.charCodeAt(i);\n    if (x < 26){\n      let y = x + (x - 2) * 26;\n      result += String.fromCharCode(y);\n    }else{\n      let y = x - 26;\n      result += String.fromCharCode(y);\n    }\n  }\n  return result;\n};\n\nconsole.log(encrypt('asdfghjkl'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const list = lst.slice()\n  const result = list.pop()\n  const size = list.length\n  const index = size - 1\n\n  for (let i = index; i >= 0; i--) {\n    if (list[i] < result) {\n      result = list[i]\n      index = i\n    }\n  }\n  \n  if (result) {\n    list.push(result)\n  }\n\n  return result\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.match(/^I/)? S.slice(1).split(\" \").length : 0;\n}\n\n/*\n  Here's a version that uses regex:\n \n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n \n  This version is better than the first one because it uses a regex to\n  split the sentence into words.\n \n  If you don't have regex, you should think of a simple version that\n  returns 0 if the input string is empty.\n \n  */\nconst isBoredRegex = (S) => {\n  return S.length > 0 && S.match(/^I/)? S.match(/\\s.*/g).length : 0;\n}\n\n// Test\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\nconsole.log(isBoredRegex(\"Hello world\"));\nconsole.log(isBoredRegex(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (\n    x === y + z ||\n    x === z + y ||\n    x === y - z ||\n    x === z - y ||\n    x === y * z ||\n    x === z * y ||\n    x === y / z ||\n    x === z / y ||\n    x === y % z ||\n    x === z % y\n  )\n}\n\nconst check = (x, y, z) => {\n  if (anyInt(x, y, z)) {\n    console.log('yes')\n  } else {\n    console.log('no')\n  }\n}\n\ncheck(5, 2, 7)\ncheck(3, 2, 2)\ncheck(3, -2, 1)\ncheck(3.6, -2.2, 2)\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encodedMessage = message\n   .toLowerCase()\n   .replace(/[aeiou]/g, (letter) => letter.toUpperCase())\n   .replace(/[aeiou]/g, (letter) => letter.toLowerCase());\n\n  return encodedMessage;\n}\n\nconst decode = (message) => {\n  let decodedMessage = message\n   .toUpperCase()\n   .replace(/[A-Z]/g, (letter) => letter.toLowerCase());\n\n  return decodedMessage;\n}\n\nconsole.log(encode('This is a message'));\nconsole.log(decode('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const primes = []\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    const index = lst[i]\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] < index) {\n        const isPrime = numberIsPrime(index)\n        if (isPrime) {\n          primes.push(index)\n          result += numberToDigits(index)\n          break\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst numberToDigits = (n) => {\n  let result = 0\n  while (n > 0) {\n    result += n % 10\n    n = Math.floor(n / 10)\n  }\n  return result\n}\n\nconst numberIsPrime = (n) => {\n  if (n === 2 || n === 3) return true\n  if (n < 2 || n % 2 === 0) return false\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconsole.log(primesToString(primesToList(10)))\n\nfunction primesToList(n) {\n  const primes = []\n  let result = 0\n  for (let i = 1; i <= n; i++) {\n    if (numberIsPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nfunction primesToString(primes) {\n  let result = ''\n  for (let i = 0; i < primes.length; i++) {\n    result += primes[i]\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    return Object.keys(dict).reduce((result, key) => {\n        return result && (typeof key ==='string' && key.toLowerCase() === key || typeof key ==='string' && key.toUpperCase() === key);\n    }, true);\n}\n\nconst checkDict = (dict) => {\n    return Object.keys(dict).reduce((result, key) => {\n        return result && (typeof key ==='string' && key.toLowerCase() === key || typeof key ==='string' && key.toUpperCase() === key);\n    }, true);\n}\n\nmodule.exports = {\n    checkDictCase,\n    checkDict\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n < 0) {\n    return [];\n  }\n  let count = 1;\n  let result = [];\n  while (count <= n) {\n    if (isPrime(count)) {\n      result.push(count);\n    }\n    count++;\n  }\n  return result;\n};\n\nconst isPrime = (number) => {\n  for (let i = 2; i <= Math.sqrt(number); i++) {\n    if (number % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return a*b;\n}\n\nconst multiply2 = (a, b) => {\n  return a*b;\n}\n\n//const multiply3 = (a, b) => {\n//  return a*b;\n//}\n\nconst multiply4 = (a, b) => {\n  return a*b;\n}\n\nconst multiply5 = (a, b) => {\n  return a*b;\n}\n\nconst multiply6 = (a, b) => {\n  return a*b;\n}\n\nconst multiply7 = (a, b) => {\n  return a*b;\n}\n\nconst multiply8 = (a, b) => {\n  return a*b;\n}\n\nconst multiply9 = (a, b) => {\n  return a*b;\n}\n\nconst multiply10 = (a, b) => {\n  return a*b;\n}\n\nconst multiply11 = (a, b) => {\n  return a*b;\n}\n\nconst multiply12 = (a, b) => {\n  return a*b;\n}\n\nconst multiply13 = (a, b) => {\n  return a*b;\n}\n\nconst multiply14 = (a, b) => {\n  return a*b;\n}\n\nconst multiply15 = (a, b) => {\n  return a*b;\n}\n\nconst multiply16 = (a, b) => {\n  return a*b;\n}\n\nconst multiply17 = (a, b) => {\n  return a*b;\n}\n\nconst multiply18 = (a, b) => {\n  return a*b;\n}\n\nconst multiply19 = (a, b) => {\n  return a*b;\n}\n\nconst multiply20 = (a, b) => {\n  return a*b;\n}\n\nconst multiply21 = (a, b) => {\n  return a*b;\n}\n\nconst multiply22 = (a, b) => {\n  return a*b;\n}\n\nconst multiply23 = (a, b) => {\n  return a*b;\n}\n\nconst multiply24 = (a, b) => {\n  return a*b;\n}\n\nconst multiply25 = (a, b) => {\n  return a*b;\n}\n\nconst multiply26 = (a, b) => {\n  return a*b;\n}\n\nconst multiply27 = (a, b) => {\n  return a*b;\n}\n\nconst multiply28 = (a, b) => {\n  return a*b;\n}\n\nconst multiply29 = (a, b) => {\n  return a*b;\n}\n\nconst multiply30 = (a, b) => {\n  return a*b;\n}\n\nconst multiply31 = (a, b) => {\n  return a*b;\n}\n\nconst multiply32 = (a, b) => {\n  return a*b;\n}\n\nconst multiply33 = (a, b) => {\n  return a*b;\n}\n\nconst multiply34 = (a, b) => {\n  return a*b;\n}\n\nconst multiply35 = (a, b) => {\n  return a*b;\n}\n\nconst multiply36 = (a, b) => {\n  return a*b;\n}\n\nconst multiply37 = (a, b) => {\n  return a*b;\n}\n\nconst multiply38 = (a, b) => {\n  return a*b;\n}\n\nconst multiply39 = (a, b) => {\n  return a*b;\n}\n\nconst multiply40 = (a, b) => {\n  return a*b;\n}\n\nconst multiply41 = (a, b) => {\n  return a*b;\n}\n\nconst multiply42 = (a, b) => {\n  return a*b;\n}\n\nconst multiply43 = (a, b) => {\n  return a*b;\n}\n\nconst multiply44 = (a, b) => {\n  return a*b;\n}\n\nconst multiply45 = (a, b) => {\n  return a*b;\n}\n\nconst multiply46 = (a, b) => {\n  return a*b;\n}\n\nconst multiply47 = (a, b) => {\n  return a*b;\n}\n\nconst multiply48 = (a, b) => {\n  return a*b;\n}\n\nconst multiply49 = (a, b) => {\n  return a*b;\n}\n\nconst multiply50 = (a, b) => {\n  return a*b;\n}\n\nconst multiply51 = (a, b) => {\n  return a*b;\n}\n\nconst multiply52 = (a, b) => {\n  return a*b;\n}\n\nconst multiply53 = (a, b) => {\n  return a*b;\n}\n\nconst multiply54 = (a, b) => {\n  return a*b;\n}\n\nconst multiply55 = (a, b) => {\n  return a*b;\n}\n\nconst multiply56 = (a, b) => {\n  return a*b;\n}\n\nconst multiply57 = (a, b) => {\n  return a*b;\n}\n\nconst multiply58 = (a, b) => {\n  return a*b;\n}\n\nconst multiply59 = (a, b) => {\n  return a*b;\n}\n\nconst multiply60 = (a, b) => {\n  return a*b;\n}\n\nconst multiply61 = (a, b) => {\n  return a*b;\n}\n\nconst multiply62 = (a, b) => {\n  return a*b;\n}\n\nconst multiply63 = (a, b) => {\n  return a*b;\n}\n\nconst multiply64 = (a, b) => {\n  return a*b;\n}\n\nconst multiply65 = (a, b) => {\n  return a*b;\n}\n\nconst multiply"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a srting s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toLowerCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst wordCount = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst numberCount = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst numberCount = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() === s[i]) {\n            count++;\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    countUpper,\n    countLower,\n    wordCount,\n    numberCount\n}<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const number = parseFloat(value)\n  if (isNaN(number)) {\n    throw new TypeError(`Invalid input: ${value}`)\n  }\n\n  // if the number is an integer, return the integer\n  if (number % 1 === 0) {\n    return number\n  }\n\n  // get the integer value of the number\n  const intValue = Math.floor(number)\n  const floatValue = number - intValue\n\n  // get the integer value of the number - 1\n  const intValueMinusOne = Math.floor(floatValue)\n\n  // if the difference between the two is less than one, return the one\n  if (intValueMinusOne - intValue < 1) {\n    return intValue\n  }\n\n  // if the difference between the two is more than one, return the one\n  if (intValueMinusOne - intValue > 1) {\n    return intValueMinusOne\n  }\n\n  // if the difference is 0, return the integer value of the number\n  return intValue\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let result = [];\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let stones = n - (i * 2);\n    if (stones >= 2) {\n      count = i;\n      result.push(stones);\n    }\n  }\n  return result;\n};\n\n// ----------------------------------------------------------\n\n/*\n  Given a collection of numbers, return the index of the maximum number.\n\n  Examples:\n  >>> findMax(1, 2, 3, 4, 5)\n  5\n  >>> findMax(3, 1, 2, 3, 1)\n  3\n  >>> findMax(1, 2, 3, 4, 5, 6)\n  6\n  >>> findMax([1, 2, 3, 4, 5])\n  5\n  >>> findMax([])\n  -1\n  >>> findMax([3, 1, 2, 3, 1])\n  3\n  >>> findMax([1, 2, 3, 4, 5, 6])\n  6\n  >>> findMax(1, 2, 3, 4, 5)\n  5\n  */\nconst findMax = (...numbers) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\n// ----------------------------------------------------------\n\n/*\n  Given two lists, return their union.\n\n  Examples:\n  >>> union([1, 2, 3, 4], [5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> union([1, 2, 3, 4], [5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> union([1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> union([1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> union([1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11], [12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  */\nconst union = (...lists) => {\n  let result = [];\n  for (let i = 0; i < lists.length; i++) {\n    result = result.concat(lists[i]);\n  }\n  return result;\n};\n\n// ----------------------------------------------------------\n\n/*\n  Given a collection of numbers, return the sum of the numbers.\n\n  Examples:\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  */\nconst sum = (...numbers) => {\n  let result = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    result += numbers[i];\n  }\n  return result;\n};\n\n// ----------------------------------------------------------\n\n/*\n  Given a collection of numbers, return the average of the numbers.\n\n  Examples:\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  >>> average([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> average([])\n  NaN\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  >>> average([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> average([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  */\nconst average = (...numbers) => {\n  let sum = sum(numbers);\n  return sum / numbers.length;\n};\n\n// ----------------------------------------------------------\n\nconst main = (n) => {\n  let max = findMax(n);\n  let result = makeAPile(max);\n  let sum = sum(result);\n  let average = average(result);\n  console.log(`max = ${max}`);\n  console.log(`result = ${result}`);\n  console.log(`sum = ${sum}`);\n  console.log(`average = ${average}`);\n};\n\nmain(4);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const result = [];\n  let currentWord = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i];\n    if (c ==='' || c === ',') {\n      result.push(currentWord);\n      currentWord = '';\n    } else {\n      currentWord += c;\n    }\n  }\n  if (currentWord.length > 0) {\n    result.push(currentWord);\n  }\n  return result;\n};\n\nwordsString('Hi, my name is John'); // ['Hi','my', 'name', 'is', 'John']\nwordsString('One, two, three, four, five, six'); // ['One', 'two', 'three', 'four', 'five','six']\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    // 如果x和y的和不是两者的平方和，则返回-1\n    if (x + y!== x * y) {\n        return -1;\n    }\n\n    // 如果x和y的和是2的平方和，则返回x\n    if (x === 2) {\n        return x;\n    }\n\n    // 如果x和y的和是3的平方和，则返回6，这样x和y都没有满足等于3的平方和\n    if (x === 3) {\n        return 6;\n    }\n\n    // 如果x和y的和是4的平方和，则返回10，这样x和y都没有满足等于4的平方和\n    if (x === 4) {\n        return 10;\n    }\n\n    // 如果x和y的和是5的平方和，则返回15，这样x和y都没有满足等于5的平方和\n    if (x === 5) {\n        return 15;\n    }\n\n    // 如果x和y的和是6的平方和，则返回21，这样x和y都没有满足等于6的平方和\n    if (x === 6) {\n        return 21;\n    }\n\n    // 如果x和y的和是7的平方和，则返回28，这样x和y都没有满足等于7的平方和\n    if (x === 7) {\n        return 28;\n    }\n\n    // 如果x和y的和是8的平方和，则返回36，这样x和y都没有满足等于8的平方和\n    if (x === 8) {\n        return 36;\n    }\n\n    // 如果x和y的和是9的平方和，则返回45，这样x和y都没有满足等于9的平方和\n    if (x === 9) {\n        return 45;\n    }\n\n    // 如果x和y的和是10的平方和，则返回55，这样x和y都没有满足等于10的平方和\n    if (x === 10) {\n        return 55;\n    }\n\n    // 如果x和y的和是11的平方和，则返回66，这样x和y都没有满足等于11的平方和\n    if (x === 11) {\n        return 66;\n    }\n\n    // 如果x和y的和是12的平方和，则返回81，这样x和y都没有满足等于12的平方和\n    if (x === 12) {\n        return 81;\n    }\n\n    // 如果x和y的和是13的平方和，则返回90，这样x和y都没有满足等于13的平方和\n    if (x === 13) {\n        return 90;\n    }\n\n    // 如果x和y的和是14的平方和，则返回99，这样x和y都没有满足等于14的平方和\n    if (x === 14) {\n        return 99;\n    }\n\n    // 如果x和y的和是15的平方和，则返回108，这样x和y都没有满足等于15的平方和\n    if (x === 15) {\n        return 108;\n    }\n\n    // 如果x和y的和是16的平方和，则返回121，这样x和y都没有满足等于16的平方和\n    if (x === 16) {\n        return 121;\n    }\n\n    // 如果x和y的和是17的"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n_m = (n > m)? n - 1 : m - 1;\n  const avg = (n_m + n + m) / 2;\n  return Number(avg.toString(2));\n};\n\nconst roundedAvg2 = (n, m) => {\n  const n_m = (n > m)? n - 1 : m - 1;\n  const avg = (n_m + n + m) / 2;\n  return avg;\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const unique = []\n  for (let i = 0; i < x; i++) {\n    if (x % 2 === 0) {\n      continue\n    }\n    unique.push(x)\n  }\n  return unique.sort()\n}\n\nexport { uniqueDigits }\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const sortedArr = arr.sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr.map(digit => {\n    const intToName = {\n      1: 'One',\n      2: 'Two',\n      3: 'Three',\n      4: 'Four',\n      5: 'Five',\n      6: 'Six',\n      7: 'Seven',\n      8: 'Eight',\n      9: 'Nine'\n    }\n    return intToName[digit]\n  })\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const res = [];\n  const isEven = (i) => i % 2 === 0;\n  const isOdd = (i) => i % 2!== 0;\n  const isEvens = (n) => n.every(isEven);\n  const isOdds = (n) => n.every(isOdd);\n  for (let i = 1; i <= n; i++) {\n    if (isEvens(i) && isOdds(i)) {\n      res.push(i);\n    } else {\n      res.push(i * i);\n    }\n  }\n  return res;\n};\n\nconst eel = f(10);\nconsole.log(eel);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const arr = Array(n + 1);\n  for (let i = 1; i <= n; i++) {\n    arr[i] = i;\n  }\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    const half = arr[i];\n    if (half === arr[half]) {\n      result.push(half);\n      if (i % 2 === 0) {\n        result.push(half);\n      }\n    }\n  }\n  return result;\n};\n\n// TEST\nconst test = () => {\n  let n = 1;\n  while (n <= 100) {\n    console.log(`${n} = ${evenOddPalindrome(n)}`);\n    n++;\n  }\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      if (isNumeric(parseInt(arr[i], 10))) {\n        count += 1\n      }\n    } else {\n      if (isNumeric(parseInt(arr[i], 10))) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/*\n  Write a funtcion sumDigits which takes an array of inteegrs and returns\n  the sum of their digits.\n  e.g. -123 has sumdigits of 1, 2, 3\n  >>> sumDigits([]) == 0\n  >>> sumDigits([-1, 11, -11]) == -1\n  >>> sumDigits([1, 1, 2]) == 6\n  */\nconst sumDigits = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (isNumeric(parseInt(arr[i], 10))) {\n      sum += parseInt(arr[i], 10)\n    }\n  }\n  return sum\n}\n\nconst countLargestSum = (arr) => {\n  let largest = -1\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (sumDigits(arr[i]) > largest) {\n      largest = sumDigits(arr[i])\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Write a funtcion isPalindrome which takes an array of inteegrs and returns\n  whether it is a palindrome.\n  e.g. -123 is a palindrome.\n  >>> isPalindrome([])\n  >>> isPalindrome([-1, 11, -11])\n  >>> isPalindrome([1, 1, 2])\n  >>> isPalindrome([1, -1, 1])\n  >>> isPalindrome([-1, 11, -11, 0, 11])\n  */\nconst isPalindrome = (arr) => {\n  let len = arr.length\n  let count = 0\n  for (let i = 0; i < len / 2; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      count += 1\n    }\n  }\n  return count === 0\n}\n\nconst countPalindrome = (arr) => {\n  let count = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    if (isPalindrome(arr[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countAllPalindrome = (arr) => {\n  let count = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    if (isPalindrome(arr[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst sumDigits = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (isNumeric(parseInt(arr[i], 10))) {\n      sum += parseInt(arr[i], 10)\n    }\n  }\n  return sum\n}\n\n/*\n  Write a funtcion isPalindrome which takes an array of inteegrs and returns\n  whether it is a palindrome.\n  e.g. -123 is a palindrome.\n  >>> isPalindrome([])\n  >>> isPalindrome([-1, 11, -11])\n  >>> isPalindrome([1, 1, 2])\n  >>> isPalindrome([1, -1, 1])\n  >>> isPalindrome([-1, 11, -11, 0, 11])\n  */\nconst isPalindrome = (arr) => {\n  let len = arr.length\n  let count = 0\n  for (let i = 0; i < len / 2; i++) {\n    if (arr[i]!== arr[len - i - 1]) {\n      count += 1\n    }\n  }\n  return count === 0\n}\n\nconst countPalindrome = (arr) => {\n  let count = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    if (isPalindrome(arr[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countAllPalindrome = (arr) => {\n  let count = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    if (isPalindrome(arr[i])) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst count = countNums(arr)\nconsole.log(`Count of numbers with sum > 0: ${count}`)\nconsole.log(`Sum of digits of numbers with sum > 0: ${sumDigits(arr)}`)\nconsole.log(`Count of numbers with sum > 0 and a first digit < 0: ${countLargestSum(arr)}`)\nconsole.log(`Count of all numbers with sum > 0 and a first digit < 0: ${countAllLargestSum(arr)}`)\nconsole.log(`Count of all palindrome numbers: ${countPalindrome(arr)}`)\nconsole.log(`Count of all palindrome numbers: ${countAllPalindrome(arr)}`)\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an arrya 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an arrya 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  //console.log(arr);\n  if(arr.length === 0)\n    return true;\n  if(arr.length === 1)\n    return true;\n  \n  let arr1 = arr.slice(1, arr.length);\n  let arr2 = arr.slice(0, arr.length - 1);\n  let i = arr1.length - 1;\n  while(i >= 0)\n  {\n    let sum = arr1[i] + arr2[i];\n    let index = i;\n    while(index > 0 && arr2[index - 1] > sum)\n    {\n      arr1[index] = arr1[index - 1];\n      arr2[index] = arr2[index - 1];\n      index--;\n    }\n    arr1[index] = sum;\n    arr2[index] = arr[i];\n    i--;\n  }\n  return arr1.every(x => x <= arr[arr.length - 1]);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return false;\n  }\n  const lst1Even = [];\n  const lst2Even = [];\n  let lst1Start = 0;\n  let lst2Start = 0;\n  while (lst1Start < lst1.length && lst2Start < lst2.length) {\n    if (lst1[lst1Start] % 2 === 0 && lst2[lst2Start] % 2 === 0) {\n      lst1Even.push(lst1[lst1Start]);\n      lst2Even.push(lst2[lst2Start]);\n      lst1Start++;\n      lst2Start++;\n    } else if (lst1[lst1Start] % 2 === 1 && lst2[lst2Start] % 2 === 0) {\n      lst1Start++;\n    } else if (lst1[lst1Start] % 2 === 0 && lst2[lst2Start] % 2 === 1) {\n      lst2Start++;\n    }\n  }\n  return lst1Even.length === lst2Even.length && lst1Even.every(el => el % 2 === 0);\n};\n\nexport {\n  exchange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const hist = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (hist[letter] === undefined) {\n      hist[letter] = 1;\n    } else {\n      hist[letter]++;\n    }\n  }\n  return hist;\n};\n\n/* Given a string, return a dictionary containing the letters with the most\n  repeittion and the number of occurence of each of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram2 = (test) => {\n  const hist = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (hist[letter] === undefined) {\n      hist[letter] = 1;\n    } else {\n      hist[letter]++;\n    }\n  }\n  return hist;\n};\n\n/* Given a string, return a dictionary containing the letters with the most\n  repeittion and the number of occurence of each of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  */\nconst histogram3 = (test) => {\n  const hist = {};\n  for (let i = 0; i < test.length; i++) {\n    const letter = test.charAt(i);\n    if (hist[letter] === undefined) {\n      hist[letter] = 1;\n    } else {\n      hist[letter]++;\n    }\n  }\n  return hist;\n};\n\nconst test = histogram('a b c');\nconsole.log(test);\n\nconst test2 = histogram2('a b c');\nconsole.log(test2);\n\nconst test3 = histogram3('a b c');\nconsole.log(test3);\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let count = 0,\n    i = 0,\n    j = s.length - 1,\n    temp = '',\n    reversed = '',\n    index = 0;\n\n  while (i < j) {\n    if (s[i] === c[index]) {\n      index++;\n      count++;\n    }\n\n    if (index === c.length) {\n      index = 0;\n    }\n\n    temp = s[i];\n    s[i] = s[j];\n    s[j] = temp;\n    i++;\n    j--;\n  }\n\n  reversed = s.slice(0, j + 1);\n\n  if (reversed.length % 2!== 0) {\n    return [reversed, false];\n  } else {\n    return [reversed, true];\n  }\n};\n\nmodule.exports = {\n  reverseDelete\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const map = (lst) => {\n    let result = 0;\n    for(let i = 0; i < lst.length; i++) {\n      result += lst[i].split('').filter(x => x.match(/\\d/i)).length;\n    }\n    return result;\n  }\n  return map(lst);\n}\n\nconst test = function(){\n  const result = oddCount(['3',\"11111111\"]);\n  console.log(result);\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            return sum;\n        } else {\n            return Math.min(sum, nums.reduce((prev, curr) => prev + curr, 0) - curr);\n        }\n    }, sum);\n};\n\nconst minSubArraySum = (nums) => {\n    const sum = nums.reduce((prev, curr) => prev + curr, 0);\n    return nums.reduce((prev, curr) => {\n        if (curr === 0) {\n            "}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let dp = [];\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] === 0) {\n        dp[i][j] = 0;\n        continue;\n      }\n      dp[i][j] = Infinity;\n      let row = grid[i];\n      for (let k = 0; k < row.length; k++) {\n        if (row[k] === 1) {\n          dp[i][j] = Math.min(dp[i][j], capacity - dp[i][k] + 1);\n        }\n      }\n    }\n  }\n  return dp.reduce((prev, curr, index) => {\n    return prev + curr;\n  }, 0);\n}\n\nconst t1 = new Date().getTime();\nconsole.log(dp(grid(matrix([\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1],\n  [0,1,1,1]\n]), 1));\nconsole.log(dp(grid(matrix([\n  [0,0,0],\n  [0,0,0],\n  [0,0,1],\n  [1,1,1],\n  [1,1,1]\n]), 2));\nconsole.log(dp(grid(matrix([\n  [0,0,1,1],\n  [0,0,0,0],\n  [1,1,1,1],\n  [1,1,1,1]\n]), 5));\n\nconsole.log(new Date().getTime() - t1);\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sort = (a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  }\n  let result = []\n  let sorted = arr.slice()\n  sorted.sort((a, b) => {\n    if (a < 0) {\n      if (b < 0) {\n        return sort(-a, -b)\n      } else {\n        return -1\n      }\n    } else if (a > 0) {\n      if (b < 0) {\n        return 1\n      } else {\n        return sort(a, b)\n      }\n    } else {\n      return sort(b, a)\n    }\n  })\n  for (let i = 0; i < sorted.length; i++) {\n    result.push(sorted[i])\n  }\n  return result\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const words = [];\n    const consonants = ['a', 'e', 'i', 'o', 'u', 'y'];\n    const vowels = ['A', 'E', 'I', 'O', 'U', 'Y'];\n    let currWord = [];\n    let currLength = 0;\n    for (let i = 0; i < s.length; i++) {\n        let curr = s.charAt(i);\n        if (consonants.indexOf(curr)!== -1) {\n            currLength += 1;\n            if (currLength === n) {\n                words.push(currWord);\n                currWord = [];\n                currLength = 0;\n            }\n            currWord.push(curr);\n        } else if (vowels.indexOf(curr)!== -1) {\n            currWord.push(curr);\n        } else {\n            if (currWord.length > 0) {\n                words.push(currWord);\n            }\n            currWord = [];\n            currLength = 0;\n        }\n    }\n    if (currWord.length > 0) {\n        words.push(currWord);\n    }\n    return words;\n}<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let l = word.length\n  let res = ''\n  for (let i = 0; i < l; i++) {\n    if (word[i]!=='') {\n      let j = i + 1\n      while (j < l) {\n        if (word[j]!=='') {\n          let lj = j - i\n          if (lj > 1) {\n            let closest = getClosestVowel(word.substring(i, j))\n            if (closest) {\n              return closest\n            }\n          }\n          j++\n        }\n      }\n    }\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const result = {};\n  const stack = [lst];\n  while (stack.length) {\n    const cur = stack.pop();\n    if (cur === ')') {\n      if (result[cur] === undefined) {\n        result[cur] = 'No';\n      }\n    } else if (cur === '(') {\n      stack.push(cur);\n    }\n  }\n  return Object.keys(result).every(x => result[x] === 'Yes');\n};\n\nconsole.log(matchParens([]));\nconsole.log(matchParens(['(()', ')()']));\nconsole.log(matchParens([')', ')']));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let [n, i, j] = [0, 0, 0];\n  if(arr.length < k) {\n    return arr;\n  }\n  for(let i = 0; i < k; i++) {\n    if(arr[i] > arr[n]) {\n      n = i;\n    }\n  }\n  j = n + 1;\n  return [...arr.slice(0, n), arr[j],...arr.slice(j + 1)];\n}\n\n/*\n  Given an array of nitegers, return a list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let [n, i, j] = [0, 0, 0];\n  if(arr.length < k) {\n    return arr;\n  }\n  for(let i = 0; i < k; i++) {\n    if(arr[i] > arr[n]) {\n      n = i;\n    }\n  }\n  j = n + 1;\n  return [...arr.slice(0, n), arr[j],...arr.slice(j + 1)];\n}\n\n/*\n  Given an array of nitegers, return a list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let [n, i, j] = [0, 0, 0];\n  if(arr.length < k) {\n    return arr;\n  }\n  for(let i = 0; i < k; i++) {\n    if(arr[i] > arr[n]) {\n      n = i;\n    }\n  }\n  j = n + 1;\n  return [...arr.slice(0, n), arr[j],...arr.slice(j + 1)];\n}\n\nexport default maximum;<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(lst[i] % 2 === 0)\n      sum += lst[i];\n  }\n  return sum;\n};<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let ret = 0\n  for (let i = 0; i < k; i++) {\n    ret += arr[i]\n  }\n  return ret\n}\n\nconst addTwoElements = (arr, k) => {\n  let ret = 0\n  for (let i = 0; i < k; i++) {\n    ret += arr[i]\n  }\n  return ret\n}\n\nconst solution = (arr, k) => {\n  if (k === 1) return arr[0]\n  if (k === 2) return addTwoElements(arr, k)\n  return addElements(arr, k)\n}\n\nconsole.log(solution([111,21,3,4000,5,6,7,8,9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let arr = [1]\n    while (n > 1) {\n        if (n % 2 === 0) {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n        arr.unshift(n)\n    }\n    return arr\n}\n\nconsole.log(getOddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(!date) return false;\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(day === 31 && (month === 4 || month === 6 || month === 9 || month === 11)) return false;\n  if(day === 30 && (month === 2)) return false;\n  if(day === 29 && (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10)) return false;\n  if(day === 29 && (month === 1 || month === 2 || month === 3 || month === 4 || month === 5 || month === 6 || month === 7 || month === 8 || month === 9 || month === 10 || month === 11)) return false;\n  return true;\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst parseDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!== 3) return false;\n  let month = splitDate[1];\n  let day = splitDate[2];\n  let year = splitDate[0];\n  return {\n    day: day,\n    month: month,\n    year: year\n  };\n};\n\n/*\n  This function accepts a date stirng in the format: dd-MM-yyyy\n  and returns a date object in the format: {day, month, year}\n  */\nconst convertDate = (date) => {\n  const splitDate = date.split(\"-\");\n  if(splitDate.length!=="}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).filter((w) => w.length > 0);\n  const numLetters = words.length;\n  const isOdd = (i) => (numLetters - i) % 2 === 0;\n  return words.map(w => w.split('').filter((w) => w.length > 0).sort((a, b) => isOdd(a) - isOdd(b)).join(''));\n};\n\n/* Given a string of words, return the number of words in the string\n */\nconst numWords = (txt) => {\n  return splitWords(txt).length;\n};\n\n/* Given a string of words, return the number of non-empty words in the string\n */\nconst numNonEmptyWords = (txt) => {\n  return splitWords(txt).filter((w) => w.length > 0).length;\n};\n\n/* Given a string of words, return the number of non-empty, non-whitespace words in the string\n */\nconst numNonEmptyNonWhitespaceWords = (txt) => {\n  return splitWords(txt).filter((w) => w.length > 0 && w.trim().length > 0).length;\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuation = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toLowerCase() > b.toLowerCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removeLowerCase = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCase = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removeLowerCaseAndPunctuation = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCaseAndRemovePunctuation = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCaseAndRemoveLowerCase = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removeLowerCaseAndPunctuationAndRemoveLowerCase = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removeLowerCaseAndPunctuationAndRemovePunctuation = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCaseAndRemovePunctuation = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCaseAndRemoveLowerCase = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given a string of words, return a list of all the words in the string, without\n * the punctuation and lowercase.\n */\nconst removePunctuationAndLowerCaseAndRemoveWhitespace = (txt) => {\n  return txt.split('').filter((w) => w.length > 0).sort((a, b) => a.toUpperCase() > b.toUpperCase()).join('');\n};\n\n/* Given"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n    const len = lst.length\n    for(let i = 0; i < len - 1; i++){\n        if(lst[i] > lst[i + 1]){\n            return false\n        }\n    }\n    return true\n}\n\nexport {isSorted}<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n  if (start1 > start2) {\n    [start1, end1] = [end1, start1];\n  }\n  if (end1 < end2) {\n    [start2, end2] = [end2, start2];\n  }\n  if (start1 <= start2 && end2 <= end1) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\nconst test = () => {\n  [{ start: -1, end: 1 }, { start: 0, end: 4 }]\n   .map(intersection);\n}\n\nmodule.exports = test;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = []\n  let prod = 1\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      prod = -prod\n      signs.push(1)\n    } else if (arr[i] > 0) {\n      prod = prod\n      signs.push(-1)\n    } else {\n      prod = 1\n      signs.push(0)\n    }\n  }\n  return [prod, signs]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let curr = grid[0];\n    let path = [];\n    let lst = [1];\n    let lst_k = [];\n\n    // first round, collect the k values\n    while (k-- > 0) {\n        lst.push(grid[curr[0]][curr[1]]);\n        curr = grid[curr[0]][curr[1]];\n    }\n\n    // then find the answer\n    for (let i = 0; i < grid.length; i++) {\n        let curr_row = grid[i];\n        for (let j = 0; j < curr_row.length; j++) {\n            if (curr_row[j]!== 0) {\n                lst_k = [];\n                for (let l = 0; l < lst.length; l++) {\n                    let lst_curr = lst[l];\n                    if (lst_curr === curr_row[j]) {\n                        lst_k.push(k);\n                    }\n                }\n                if (lst_k.length === 0) {\n                    lst_k.push(k);\n                }\n                if (lst_k.length === 1) {\n                    path.push(lst_k[0]);\n                } else {\n                    if (lst_k.length > 1) {\n                        let min_k = lst_k[0];\n                        for (let k = 1; k < lst_k.length; k++) {\n                            if (lst_k[k] < min_k) {\n                                min_k = lst_k[k];\n                            }\n                        }\n                        path.push(min_k);\n                    }\n                }\n            }\n        }\n    }\n\n    return path;\n}\n\nconst grid = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n];\n\nconst k = 1;\n\nconsole.log(minPath(grid, k));\n\n/*\n  Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n  Output: [1]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let fib = [1, 3, 2]\n  let tri = []\n  while (fib.length < n + 1) {\n    let t = fib[fib.length - 1] + fib[fib.length - 2]\n    tri.push(t)\n    fib.push(t)\n  }\n  return tri\n}\n\nexport default tri<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if(n === 0) return 0\n  const a = n % 10\n  const b = (n - a) / 10\n  if(a === 0) return 0\n  return a * b * (digits(b) + 1)\n}\n\nconst main = () => {\n  console.log(digits(12345))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n  let index = 0\n  let stack = []\n  let valid = false\n  let length = string.length\n  while (index < length) {\n    if (string[index] === '[' && stack.length === 0) {\n      stack.push(index)\n    } else if (string[index] === ']' && stack.length!== 0) {\n      stack.pop()\n      if (stack.length === 0) {\n        valid = true\n        break\n      }\n    }\n    index++\n  }\n  return valid\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => (curr * curr) + prev, 0);\n}\n\nconst test_sumSquares = () => {\n  let lst = [1, 2, 3];\n  assert.equal(sumSquares(lst), 14);\n  lst = [1, 4, 9];\n  assert.equal(sumSquares(lst), 98);\n  lst = [1, 3, 5, 7];\n  assert.equal(sumSquares(lst), 84);\n  lst = [1.4, 4.2, 0];\n  assert.equal(sumSquares(lst), 29);\n  lst = [-2.4, 1, 1];\n  assert.equal(sumSquares(lst), 6);\n}\n\n/*\n  Find the largest and smallest elements in an array\n  O(n) time\n  O(1) space\n  Find the largest and smallest elements in an array using recursion\n  O(n) time\n  O(n) space\n  Find the largest and smallest elements in an array using for loop\n  O(n) time\n  O(n) space\n  Find the largest and smallest elements in an array using while loop\n  O(n) time\n  O(n) space\n  Find the largest and smallest elements in an array using for loop\n  O(n) time\n  O(n) space\n  Find the largest and smallest elements in an array using while loop\n  O(n) time\n  O(n) space\n  Find the largest and smallest elements in an array using recursion\n  O(n) time\n  O(1) space\n  Find the largest and smallest elements in an array using for loop\n  O(n) time\n  O(1) space\n  Find the largest and smallest elements in an array using while loop\n  O(n) time\n  O(1) space\n  Find the largest and smallest elements in an array using for loop\n  O(n) time\n  O(1) space\n  Find the largest and smallest elements in an array using while loop\n  O(n) time\n  O(1) space\n*/\nconst findMinMax = (arr) => {\n  let min = arr[0], max = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return {\n    min: min,\n    max: max\n  }\n}\n\nconst test_findMinMax = () => {\n  let arr = [1, 2, 3];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 3);\n  arr = [1, 2, 3, 4, 5];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 5);\n  arr = [1, 2, 3, 4, 5, 6];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 6);\n  arr = [1, 2, 3, 4, 5, 6, 7];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 7);\n  arr = [1, 2, 3, 4, 5, 6, 7, 8];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 8);\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 9);\n}\n\nconst test_findMinMax = () => {\n  let arr = [1, 2, 3];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 3);\n  arr = [1, 2, 3, 4, 5];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 5);\n  arr = [1, 2, 3, 4, 5, 6];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 6);\n  arr = [1, 2, 3, 4, 5, 6, 7];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 7);\n  arr = [1, 2, 3, 4, 5, 6, 7, 8];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 8);\n  arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 9);\n}\n\nconst test_findMinMax = () => {\n  let arr = [1, 2, 3];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 3);\n  arr = [1, 2, 3, 4, 5];\n  assert.equal(findMinMax(arr).min, 1);\n  assert.equal(findMinMax(arr).max, 5);\n  arr = [1, 2, 3, 4, 5, 6];\n  assert.equal(findMinMax(arr).min, 1"}
{"task_id": "JavaScript/134", "prompt": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.charAt(txt.length - 1).match(/[a-zA-Z]/) &&!isAlphaNumeric(txt.charAt(txt.length - 2));\n}\n\n/*\n  This is the main function that runs the whole program.\n  Note: This function will accept one argument: the string\n  to be analized.\n  */\nconst main = (txt) => {\n  const words = txt.split(/\\s+/);\n  const letters = txt.split(/\\W+/);\n\n  //check if the last character of the string is an alphabetic character\n  if (checkIfLastCharIsALetter(txt)) {\n    console.log(`${txt} is a valid alphabetic word`);\n  } else {\n    console.log(`${txt} is NOT a valid alphabetic word`);\n  }\n\n  //check if the first character of the string is an alphabetic character\n  if (checkIfFirstCharIsALetter(txt)) {\n    console.log(`${txt} is a valid alphabetic word`);\n  } else {\n    console.log(`${txt} is NOT a valid alphabetic word`);\n  }\n\n  //check if the string is a valid alphabetic word\n  if (checkIfIsAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alphabetic word`);\n  } else {\n    console.log(`${txt} is NOT a valid alphabetic word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfIsAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n    console.log(`${txt} is a valid alpha numeric word`);\n  } else {\n    console.log(`${txt} is NOT a valid alpha numeric word`);\n  }\n\n  //check if the string is a valid alpha numeric word\n  if (checkIfAlphaNumeric(txt)) {\n"}
{"task_id": "JavaScript/135", "prompt": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let last = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= last) {\n      last = arr[i]\n    } else {\n      return i - 1\n    }\n  }\n  return -1\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null);\n  }\n\n  let smallest = lst.length;\n  let largest = lst.length;\n  for (let i = 0; i < lst.length; i++) {\n    let value = lst[i];\n    if (value < 0) {\n      if (largest < i) largest = i;\n    } else if (value > 0) {\n      if (smallest > i) smallest = i;\n    }\n  }\n  if (largest === smallest) {\n    return (lst[smallest], lst[smallest]);\n  } else {\n    return (largest, smallest);\n  }\n}\n\n/**\n  Given a list of integers, return a list where the lagest of the\n  negative numbers is replaced with zero.\n  */\nconst largestSmallestIntegers_1 = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  let smallest = lst.length;\n  let largest = lst.length;\n  for (let i = 0; i < lst.length; i++) {\n    let value = lst[i];\n    if (value < 0) {\n      if (largest < i) largest = i;\n    } else if (value > 0) {\n      if (smallest > i) smallest = i;\n    }\n  }\n  lst[largest] = 0;\n  return lst;\n}\n\n// Testing\n\n/*\nlargestSmallestIntegers([2, 4, 1, 3, 5, 7])\nlargestSmallestIntegers([])\nlargestSmallestIntegers([0])\nlargestSmallestIntegers([-1, 0, 1])\nlargestSmallestIntegers([-1, 0, 1, -2])\nlargestSmallestIntegers([-1, 0, 1, -2, -3])\nlargestSmallestIntegers([-1, 0, 1, -2, -3, 4])\n*/\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([-1, 0, 1]));\nconsole.log(largestSmallestIntegers([-1, 0, 1, -2]));\nconsole.log(largestSmallestIntegers([-1, 0, 1, -2, -3]));\nconsole.log(largestSmallestIntegers([-1, 0, 1, -2, -3, 4]));\n\nconsole.log(largestSmallestIntegers_1([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers_1([]));\nconsole.log(largestSmallestIntegers_1([0]));\nconsole.log(largestSmallestIntegers_1([-1, 0, 1]));\nconsole.log(largestSmallestIntegers_1([-1, 0, 1, -2]));\nconsole.log(largestSmallestIntegers_1([-1, 0, 1, -2, -3]));\nconsole.log(largestSmallestIntegers_1([-1, 0, 1, -2, -3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n  if (a < b) return b\n  if (a > b) return a\n  return null\n}\n\nconst r = compareOne(1, 2)\nconsole.log(r) // 2.5\n\nconst str = compareOne(\"1\", 1)\nconsole.log(str) // null\n\nconst str1 = compareOne(\"1\", \"2\")\nconsole.log(str1) // \"2\"\n\nconst str2 = compareOne(1, \"2\")\nconsole.log(str2) // \"2\"\n\nconst str3 = compareOne(\"2\", \"1\")\nconsole.log(str3) // \"2\"\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  const count = countEven(n);\n  return count === 4;\n};\n\n// export\nexports.isEqualToSumEven = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) {\n    return 1;\n  }\n\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    const split = text.split(' ')\n    return split.reduce((prev, curr) => {\n        return prev.replace(/\\s+/g, '_').replace(/\\s+\\s+/g, '-')\n    }, text)\n}\n\nconst capitalize = (str) => {\n    return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\nconst getFileName = (str) => {\n    return str.substring(0, str.lastIndexOf('.'))\n}\n\nconst getFileExtension = (str) => {\n    return str.substring(str.lastIndexOf('.') + 1)\n}\n\nconst getFileDate = (str) => {\n    const date = new Date(str)\n    return date.toLocaleDateString()\n}\n\nconst getFileTime = (str) => {\n    const time = new Date(str)\n    return time.toLocaleTimeString()\n}\n\nconst getFileSize = (str) => {\n    const bytes = str.substring(str.lastIndexOf('.') + 1)\n    return Number(bytes.slice(0, -1))\n}\n\nconst getFileType = (str) => {\n    const extension = getFileExtension(str)\n    return capitalize(extension)\n}\n\nconst getFileDateTime = (str) => {\n    const date = getFileDate(str)\n    const time = getFileTime(str)\n    return date +'' + time\n}\n\nconst getFileSizeDateTime = (str) => {\n    const size = getFileSize(str)\n    const dateTime = getFileDateTime(str)\n    return size +'' + dateTime\n}\n\nconst getFileSizeDateTimeType = (str) => {\n    const size = getFileSize(str)\n    const dateTime = getFileDateTime(str)\n    const type = getFileType(str)\n    return size +'' + dateTime +'' + type\n}\n\nconst getFileNameDateTimeType = (str) => {\n    const name = getFileName(str)\n    const size = getFileSizeDateTimeType(str)\n    const type = getFileType(str)\n    return name +'' + size +'' + type\n}\n\nconst getFileNameDateTimeTypeSize = (str) => {\n    const name = getFileName(str)\n    const size = getFileSizeDateTimeType(str)\n    const type = getFileType(str)\n    const dateTime = getFileDateTime(str)\n    return name +'' + size +'' + type +'' + dateTime\n}\n\nmodule.exports = {\n    fixSpaces,\n    capitalize,\n    getFileName,\n    getFileExtension,\n    getFileDate,\n    getFileTime,\n    getFileSize,\n    getFileType,\n    getFileDateTime,\n    getFileSizeDateTime,\n    getFileSizeDateTimeType,\n    getFileNameDateTimeType,\n    getFileNameDateTimeTypeSize\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let split = file_name.split('.');\n  if (split.length > 1) {\n    if (split[0].length > 0) {\n      if (split[0].match(/^[a-zA-Z]/) && split[1] === 'txt' || split[1] === 'exe' || split[1] === 'dll') {\n        return 'Yes';\n      }\n      else {\n        return 'No';\n      }\n    }\n  }\n  return 'No';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let output = 0;\n  for (let i of lst) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      output += i * i;\n    } else if (i % 3 === 0 && i % 4 === 0) {\n      output += i;\n    }\n  }\n  return output;\n}\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ')\n  return words\n}\n\nconst wordsInSentence2 = (sentence) => {\n  const words = sentence.split(' ')\n  const wordsLength = words.length\n  const wordsLength2 = words.length\n\n  const wordsLength3 = words.length\n  const wordsLength4 = words.length\n\n  const wordsLength5 = words.length\n\n  let i = 0\n  let j = 0\n  let k = 0\n  let l = 0\n  let m = 0\n  let n = 0\n  let o = 0\n  let p = 0\n\n  while (i < wordsLength) {\n    let word = words[i]\n    i++\n    if (i == wordsLength) {\n      return word\n    }\n    if (j < wordsLength) {\n      let word2 = words[j]\n      j++\n      if (i == wordsLength2) {\n        return word +'' + word2\n      }\n      if (k < wordsLength2) {\n        let word3 = words[k]\n        k++\n        if (i == wordsLength3) {\n          return word +'' + word2 +'' + word3\n        }\n        if (l < wordsLength3) {\n          let word4 = words[l]\n          l++\n          if (i == wordsLength4) {\n            return word +'' + word2 +'' + word3 +'' + word4\n          }\n          if (m < wordsLength4) {\n            let word5 = words[m]\n            m++\n            if (i == wordsLength5) {\n              return word +'' + word2 +'' + word3 +'' + word4 +'' + word5\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = wordsInSentence2<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n  let num = parseInt(x)\n  let den = parseInt(n)\n\n  return num && den && num!== 0 && den!== 0 && (num % den === 0)\n}\n\n/*\n  Your tsak is to implement a function that will convert the fraction into a decimal number.\n  Your function should return the same number of fraction.\n\nn */\n\nconst f = (x, n) => {\n  let xs = x.split('/')\n  let ys = n.split('/')\n  return xs[0].match(/\\d+/)[0] * parseInt(ys[1]) / parseInt(ys[0])\n}\n\nconsole.log(simplify(\"1/3\", \"3/1\"))\nconsole.log(simplify(\"3/1\", \"1/3\"))\nconsole.log(simplify(\"3/2\", \"2/1\"))\nconsole.log(simplify(\"1/2\", \"2/1\"))\nconsole.log(simplify(\"1/3\", \"3/1\"))\nconsole.log(simplify(\"3/1\", \"1/3\"))\nconsole.log(simplify(\"3/2\", \"2/1\"))\nconsole.log(simplify(\"2/1\", \"1/3\"))\nconsole.log(simplify(\"2/1\", \"1/3\"))\nconsole.log(simplify(\"3/1\", \"1/3\"))\nconsole.log(simplify(\"1/3\", \"3/1\"))\nconsole.log(simplify(\"3/2\", \"2/1\"))\nconsole.log(simplify(\"1/2\", \"2/1\"))\nconsole.log(simplify(\"1/3\", \"3/1\"))\nconsole.log(simplify(\"3/1\", \"1/3\"))\nconsole.log(simplify(\"3/2\", \"2/1\"))\nconsole.log(simplify(\"2/1\", \"1/3\"))\nconsole.log(simplify(\"2/1\", \"1/3\"))\n"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    for (let j = i + 1; j < nums.length; j++) {\n      if (nums[j] > num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints2 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] > num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints3 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] < num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints4 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] <= num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints5 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] >= num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints6 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] > num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints7 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] < num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n      }\n    }\n  }\n  return sorted;\n};\n\nconst orderByPoints8 = (nums) => {\n  const sorted = [];\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i];\n    let j = i + 1;\n    while (j < nums.length) {\n      if (nums[j] >= num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else if (nums[j] === num) {\n        sorted.push(nums[j]);\n        nums.splice(j, 1);\n        j--;\n      } else {\n        j++;\n"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter((x) => x > 10 && (x % 2 === 1 || x % 3 === 1 || x % 5 === 1 || x % 7 === 1 || x % 9 === 1));\n}\n\n/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are both odd and their sum \n  is greater than 100.\n  For example:\n  specialFilter([-3, 45, -9, -15, -15, -17, -33]) => 3 \n  specialFilter([-6, -5, -3, -4, -10, -3, -10, -3, -2, -9, -8, -8, -8, -9]) => 5\n  specialFilter([-4, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4]) => 0 \n  */\nconst specialFilter2 = (nums) => {\n  return nums.filter((x) => x % 2 === 1 && x > 0 && x % 4 === 1);\n}\n\n//console.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter2([-3, 45, -9, -15, -15, -17, -33]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.filter((x) => {\n    return a.filter((y) => {\n      return a.filter((z) => {\n        return x + y + z === n;\n      });\n    });\n  }).length;\n  return result;\n};\n\nconst getMaxTriples = (n) => {\n  const a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  const result = a.filter((x) => {\n    return a.filter((y) => {\n      return a.filter((z) => {\n        return x + y + z === n;\n      });\n    });\n  }).length;\n  return result;\n};\n\nmodule.exports = {\n  getMaxTriples,\n};<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (planet1 == \"Earth\" || planet2 == \"Earth\") return ()\n  if (planet1 == \"Mars\" || planet2 == \"Mars\") return ()\n  if (planet1 == \"Jupiter\" || planet2 == \"Jupiter\") return ()\n  if (planet1 == \"Saturn\" || planet2 == \"Saturn\") return ()\n  if (planet1 == \"Uranus\" || planet2 == \"Uranus\") return ()\n  if (planet1 == \"Neptune\" || planet2 == \"Neptune\") return ()\n\n  const sun = (x, y) => (x.toFixed(1) == y.toFixed(1))\n  const suns = [0, 0, 0, 0, 0, 0, 0, 0]\n  const sun_i = 0\n  const sun_j = 0\n  for (let i = 0; i < 8; i++) {\n    suns[i] = planet(i)\n    if (sun(planet(i), planet(i + 1))) {\n      if (sun(planet(i), planet(i + 1))) {\n        if (suns[sun_i] < suns[sun_j]) {\n          if (sun(planet(i), planet(i + 1))) {\n            sun_j = i + 1\n          }\n        }\n      }\n    }\n  }\n\n  const suns_tuple = () => suns.reduce((p, n, i) => p.concat(n), [])\n  return suns_tuple()\n}\n\nconst planet = (x) => {\n  const a = 6.957e6\n  const b = 7.347e6\n  const c = 0.000564\n  const e = 0.001819\n  const f = 0.0\n  const g = 0.002400\n  const n = a * (1 - c * Math.pow(Math.tan(x * Math.PI / 180), 2)) / (Math.pow(a, 5) * (1 - Math.pow(e, 2) * Math.pow(Math.sin(x * Math.PI / 180), 2)))\n  const m = n * (1 + f * Math.pow(Math.tan(x * Math.PI / 180), 2) + g * Math.pow(Math.tan(x * Math.PI / 180), 4))\n  const r = a * (1 - b * Math.pow(Math.tan(x * Math.PI / 180), 2) * Math.pow(Math.tan(x * Math.PI / 180), 3)) / (Math.pow(a, 5) * (1 - Math.pow(e, 2) * Math.pow(Math.sin(x * Math.PI / 180), 2)))\n\n  return r\n}\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Earth\", \"Mercury\"))\nconsole.log(bf(\"Earth\", \"Neptune\"))\nconsole.log(bf(\"Earth\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\", \"Saturn\"))\nconsole.log(bf(\"Mercury\", \"Uranus\"))\nconsole.log(bf(\"Mercury\", \"Neptune\"))\nconsole.log(bf(\"Mercury\", \"Jupiter\"))\nconsole.log(bf(\"Mercury\","}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.filter((item, index) => index % 2 == 0).sort((a, b) => {\n    return a.length - b.length;\n  }).map(item => item.length + item);\n}\n\nconst test = () => {\n  let lst = [\"aa\", \"a\", \"aaa\", \"ab\"];\n  console.log(sortedListSum(lst));\n};\n\nmodule.exports = sortedListSum;<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const xOrY = (n, x, y) => {\n    if(xOrY(n-1, x, y)) return x\n    else return y\n  }\n  return xOrY(n, x, y)\n}\n\nconsole.log(xOrY(19, 1, 2))<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst.reduce((acc, x) => x % 2 === 0? acc + x * x : acc, 0)\n}\n\nexport {\n  doubleTheDifference,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  //console.log(\"Game:\", game, \"guess:\", guess);\n  //console.log(\"game\", game);\n  //console.log(\"guess\", guess);\n  const gameLength = game.length;\n  const guessLength = guess.length;\n  const diffs = [];\n  const difference = Math.abs(game[guess[0]] - guess[1]);\n  diffs.push(difference);\n  for (let i = 2; i < gameLength; i++) {\n    const nextGame = game[i];\n    const nextGuess = guess[i];\n    const diff = Math.abs(nextGame - nextGuess);\n    diffs.push(diff);\n    //console.log(diffs);\n    if (nextGame === nextGuess) {\n      //console.log(\"i\", i, \"difference:\", difference, \"diffs\", diffs);\n      return [diffs[diffs.length - 1], dists[diffs.length - 1]];\n    } else {\n      diffs.push(diff);\n      difference = Math.abs(difference + diff);\n      //console.log(\"difference:\", difference, \"diffs\", diffs);\n    }\n  }\n  //console.log(\"guessLength:\", guessLength, \"gameLength:\", gameLength, \"difference:\", difference, \"diffs\", diffs);\n  return [diffs[diffs.length - 1], dists[diffs.length - 1]];\n}\n\nconst game = [1, 2, 3, 4, 5, 1];\nconst guess = [1, 2, 3, 4, 2, -2];\nconst dists = compare(game, guess);\n// console.log(dists);\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const ext_count = extensions.length\n  if(ext_count === 0) {\n    return class_name\n  }\n  const ext_strength = extensions.map(ext => {\n    return class_name.toUpperCase().charAt(0) - ext.toUpperCase().charAt(0)\n  })\n  let ext_index = 0\n  while(ext_strength[ext_index] === 0) {\n    if(ext_index === (ext_count - 1)) {\n      return class_name + extensions[ext_index]\n    }\n    ext_index++\n  }\n  return class_name + '.' + extensions[ext_index]\n}\n\nconst extend = (target, source) => {\n  for (var key in source) {\n    if (source.hasOwnProperty(key)) {\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\nconst getClassName = (extension) => {\n  const parts = extension.split('.')\n  return parts[parts.length - 1]\n}\n\nmodule.exports = {\n  extend,\n  getClassName,\n  strongestExtension\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n  let found = false\n  let pattern = b.split(\"\")\n  for (let i = 0; i < pattern.length; i++) {\n    for (let j = 0; j < a.length; j++) {\n      if (pattern[i] === a[j]) {\n        found = true\n        break\n      }\n    }\n    if (!found) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  findCycPatternInString(\"abab\",\"baa\") => true\n  findCycPatternInString(\"abab\",\"cba\") => false\n  findCycPatternInString(\"abab\",\"aab\") => false\n  findCycPatternInString(\"abab\",\"abc\") => false\n  findCycPatternInString(\"abab\",\"aab\") => false\n  findCycPatternInString(\"abab\",\"aba\") => false\n  findCycPatternInString(\"abab\",\"ab\") => false\n  findCycPatternInString(\"abab\",\"aba\") => false\n  findCycPatternInString(\"abab\",\"ab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"ab\") => false\n  findCycPatternInString(\"abab\",\"aba\") => false\n  findCycPatternInString(\"abab\",\"aab\") => false\n  findCycPatternInString(\"abab\",\"ab\") => false\n  findCycPatternInString(\"abab\",\"ba\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cba\") => false\n  findCycPatternInString(\"abab\",\"aab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"ab\") => false\n  findCycPatternInString(\"abab\",\"abb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"bab\") => false\n  findCycPatternInString(\"abab\",\"bbb\") => false\n  findCycPatternInString(\"abab\",\"cbb\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"abab\",\"cab\") => false\n  findCycPatternInString(\"ab"}
{"task_id": "JavaScript/155", "prompt": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let odd = 0\n  let even = 0\n  while (num > 0) {\n    let current = num % 10\n    if (current === 0) {\n      even++\n      num /= 10\n    } else {\n      odd++\n      num = num / 10\n    }\n  }\n  return (even, odd)\n}\n\nexport default evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman = number.toString();\n  for (let i = 0; i < roman.length; i++) {\n    if (number - i > 0) {\n      roman = roman.substr(0, i) + roman[i].toUpperCase() + roman.substr(i + 1);\n    }\n  }\n  return roman;\n}\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b);\n};\n\n/*\n  Given the lengths of the three sides of a triangle.\n  Return the area of the triangle.\n  Area of triangle is a parallelogram\n  Example:\n  areaOfTriangle(3, 4, 5) == 6\n  areaOfTriangle(1, 2, 3) == 0\n  */\nconst areaOfTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b)? (a * b + b * c + c * a) / 2 : 0;\n};\n\n/*\n Given the lengths of the three sides of a triangle.\n Return the perimeter of the triangle.\n */\nconst perimeterOfTriangle = (a, b, c) => {\n  return a + b + c;\n};\n\n/*\n Given the lengths of the three sides of a triangle.\n Return the sum of the midpoints of the sides of the triangle.\n */\nconst midpointOfTriangle = (a, b, c) => {\n  return (a + b) / 2 + (b + c) / 2 + (c + a) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle.\n Return the sum of the midpoints of the sides of the triangle.\n */\nconst midpointOfTriangle = (a, b, c) => {\n  return (a + b) / 2 + (b + c) / 2 + (c + a) / 2;\n};\n\n/*\n Given the lengths of the three sides of a triangle.\n Return the sum of the midpoints of the sides of the triangle.\n */\nconst midpointOfTriangle = (a, b, c) => {\n  return (a + b) / 2 + (b + c) / 2 + (c + a) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max) {\n      max = words[i].length;\n      index = i;\n    }\n  }\n  return words[index];\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [0, remaining]\n  } else {\n    return [number, need]\n  }\n}\n\nconst getRemaining = (number, remaining) => {\n  if (remaining < number) {\n    return remaining\n  } else {\n    return remaining - number\n  }\n}\n\nconst check = (remaining, need, number) => {\n  if (remaining >= need) {\n    return number\n  } else {\n    return remaining + number\n  }\n}\n\nconst numberOfEaten = (number, remaining) => {\n  return (number - remaining) + number\n}\n\nconst numberOfNeeded = (number, remaining) => {\n  return remaining + number\n}\n\nconst checkEaten = (number, need, numberOfEaten, numberOfNeeded) => {\n  if (numberOfEaten === numberOfNeeded) {\n    return number\n  } else {\n    return numberOfNeeded\n  }\n}\n\nconst test = async () => {\n  const number = await readNumber()\n  const need = await readNumber()\n  const remaining = await readNumber()\n  const result = await eat(number, need, remaining)\n  console.log(result)\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  const result = eval(operands[0]);\n\n  for (let i = 1; i < operands.length; i++) {\n    result = operators[operators.length - 1](result, operands[i]);\n  }\n  return result;\n}\n\nconst doOperation = (operator, operand) => {\n  return eval(operand[0]);\n}\n\nconst isOperator = (operator) => {\n  return operator.length === 2 && operator[0]!== undefined && operator[1]!== undefined;\n}\n\nconst isOperand = (operand) => {\n  return operand.length > 1;\n}\n\nconst eval = (operand) => {\n  if (isOperand(operand)) {\n    return doOperation(operand[0], operand[1]);\n  } else if (isOperator(operand)) {\n    return doAlgebra(operand[0], operand[1]);\n  }\n}\n\nconst parse = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  operators.pop();\n  operands.pop();\n\n  const result = {\n    operators: operators,\n    operands: operands\n  }\n  return result;\n}\n\nconst getOperators = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  const result = [];\n  for (let i = 0; i < operands.length; i++) {\n    operators.pop();\n    result.push(operands[i]);\n  }\n  return result;\n}\n\nconst generateOperator = (operators, operands) => {\n  const operator = getOperators(operators, operands);\n  const operand = operands[operands.length - 1];\n  return operator[0] + operator[1] +'' + operand;\n}\n\nconst generateOperand = (operators, operands) => {\n  const operator = getOperators(operators, operands);\n  const operand = operands[operands.length - 1];\n  return operator[0] + operand;\n}\n\nconst parseOperation = (operators, operand) => {\n  const operators = operators.slice(0);\n  const operands = operand.slice(0);\n  operators.pop();\n  operands.pop();\n  return operators.concat(operands);\n}\n\nconst parseOperands = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  return operators.concat(operands);\n}\n\nconst evaluate = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  const result = eval(operands[operands.length - 1]);\n  operators.pop();\n  return result;\n}\n\nconst getOperator = (operators, operand) => {\n  const operators = operators.slice(0);\n  const operands = operand.slice(0);\n  operators.pop();\n  operands.pop();\n  return operators.concat(operands);\n}\n\nconst getOperand = (operators, operand) => {\n  const operators = operators.slice(0);\n  const operands = operand.slice(0);\n  return operands.concat(operators);\n}\n\nconst getOperands = (operator, operand) => {\n  const operators = operator.slice(0);\n  const operands = operand.slice(0);\n  operators.pop();\n  operands.pop();\n  return operators.concat(operands);\n}\n\nconst generateOperators = (operators, operands) => {\n  const operator = getOperators(operators, operands);\n  const operand = operands[operands.length - 1];\n  return operator[0] + operator[1] +'' + operand;\n}\n\nconst generateOperands = (operators, operands) => {\n  const operator = getOperators(operators, operands);\n  const operand = operands[operands.length - 1];\n  return operator[0] + operand;\n}\n\nconst evaluateOperator = (operators, operand) => {\n  const operator = getOperators(operators, operand);\n  const operand = operands[operands.length - 1];\n  return eval(operand) + operator[0] + operator[1] +'' + operand;\n}\n\nconst evaluateOperands = (operators, operand) => {\n  const operator = getOperators(operators, operand);\n  const operand = operands[operands.length - 1];\n  return eval(operand) + operator[0] + operand;\n}\n\nconst generate = (operators, operand) => {\n  const operator = getOperators(operators, operand);\n  const operand = operands[operands.length - 1];\n  return generateOperator(operators, operand) +'' + generateOperands(operators, operand) +'' + operator[0] +'' + operand;\n}\n\nconst parse = (operator, operand) => {\n  const operators"}
{"task_id": "JavaScript/161", "prompt": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.split('')\n  let r = ''\n  for(let i = 0, len = str.length; i < len; i++){\n    let c = str[i]\n    if(c.toLowerCase() === c.toUpperCase()){\n      r += c.toLowerCase()\n    }else{\n      r += c.toUpperCase()\n    }\n  }\n  return r\n}\n\nconsole.log(solve('1234'))\nconsole.log(solve('ab'))\nconsole.log(solve('#a@C'))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nexport {stringToMd5};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a;\n  let result = [];\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nconst generate = (a, b) => {\n  const result = generateIntegers(a, b);\n  const oddResult = result.filter(n => n % 2!= 0);\n  const evenResult = result.filter(n => n % 2 == 0);\n  return oddResult.concat(evenResult);\n};\n\nexport default generate;\n<|endoftext|>"}
