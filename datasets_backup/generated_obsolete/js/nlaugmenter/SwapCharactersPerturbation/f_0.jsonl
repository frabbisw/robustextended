{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const numberList = numbers.filter(number => number!== 0)\n\n  const sortedNumbers = numberList.sort()\n  const diffs = sortedNumbers.map(number => Math.abs(number - threshold))\n  const diffCount = diffs.reduce((acc, diff) => acc + 1)\n\n  if (diffCount > 1) {\n    return true\n  }\n\n  return false\n}\n\n/**\n  * Check if in given list of numbers, are any two numbers closer to each other than\n  * given threshold.\n  * @param {Array} numbers\n  * @param {Number} threshold\n  * @returns {Boolean}\n  */\nconst hasCloseElementsWithSameSign = (numbers, threshold) => {\n  const numberList = numbers.filter(number => number!== 0)\n\n  const sortedNumbers = numberList.sort()\n  const diffs = sortedNumbers.map(number => Math.abs(number - threshold))\n  const diffCount = diffs.reduce((acc, diff) => acc + 1)\n\n  if (diffCount > 1) {\n    return true\n  }\n\n  return false\n}\n\n/**\n  * Returns true if the given number is in the given list.\n  * @param {Number} number\n  * @param {Array} numbers\n  * @returns {Boolean}\n  */\nconst isInList = (number, numbers) => numbers.includes(number)\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst roundToNearestInt = number => Math.floor(number + 0.5)\n\n/**\n  * Returns the closest number to the given number.\n  * @param {Number} number\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst closestNumber = (number, numbers) => {\n  const closestNumber = numbers.reduce((closest, numberToCompare) => {\n    if (Math.abs(number - numberToCompare) < Math.abs(number - closest)) {\n      closest = numberToCompare\n    }\n    return closest\n  })\n\n  return closest\n}\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst min = (...numbers) => {\n  const minNumber = numbers.reduce((min, number) => Math.min(min, number))\n\n  return minNumber\n}\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst max = (...numbers) => {\n  const maxNumber = numbers.reduce((max, number) => Math.max(max, number))\n\n  return maxNumber\n}\n\n/**\n  * Returns the number closest to the given number.\n  * @param {Number} number\n  * @param {Array} numbers\n  * @returns {Number}\n  */\nconst closestNumberTo = (number, numbers) => {\n  const closestNumber = numbers.reduce((closest, numberToCompare) => {\n    if (Math.abs(number - numberToCompare) < Math.abs(number - closest)) {\n      closest = numberToCompare\n    }\n    return closest\n  })\n\n  return closest\n}\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst closestNumberWithSameSign = (number, numbers) => {\n  const closestNumber = numbers.reduce((closest, numberToCompare) => {\n    if (Math.abs(number - numberToCompare) < Math.abs(number - closest)) {\n      closest = numberToCompare\n    }\n    return closest\n  })\n\n  return closest\n}\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst closestNumberWithHigherSign = (number, numbers) => {\n  const closestNumber = numbers.reduce((closest, numberToCompare) => {\n    if (Math.abs(number - numberToCompare) < Math.abs(number - closest)) {\n      closest = numberToCompare\n    }\n    return closest\n  })\n\n  return closest\n}\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  */\nconst closestNumberWithLowerSign = (number, numbers) => {\n  const closestNumber = numbers.reduce((closest, numberToCompare) => {\n    if (Math.abs(number - numberToCompare) < Math.abs(number - closest)) {\n      closest = numberToCompare\n    }\n    return closest\n  })\n\n  return closest\n}\n\nmodule.exports = {\n  roundToNearestInt,\n  min,\n  max,\n  closestNumber,\n  closestNumberTo,\n  closestNumberWithSameSign,\n  closestNumberWithHigherSign,\n  closestNumberWithLowerSign,\n  isInList,\n  hasCloseElements,\n  hasCloseElementsWithSameSign,\n  roundToNearestInt,\n  hasCloseElements\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    let result = [];\n    let current_string = paren_string;\n    let balanced = true;\n    while (balanced) {\n        balanced = balanced && (paren_string.length > 0);\n        balanced = balanced && (paren_string[0] === '(');\n        balanced = balanced && (paren_string[paren_string.length - 1] === ')');\n        if (balanced) {\n            let group = paren_string.substring(1, paren_string.length - 1);\n            result.push(group);\n            paren_string = paren_string.substring(group.length + 1, paren_string.length);\n        }\n    }\n    return result;\n}\n\nconst balancedParens = (paren_string) => {\n    let balanced = true;\n    while (balanced) {\n        balanced = balanced && (paren_string.length > 0);\n        balanced = balanced && (paren_string[0] === '(');\n        balanced = balanced && (paren_string[paren_string.length - 1] === ')');\n        if (balanced) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n  Given a string of the form 'a(b)c', this function returns a list of the\n  strings 'a', 'b', 'c'\n  The list is in the order that they were found in the string.\n  Note that the list returned contains the strings in the order they were found in the string\n  but that the strings within a group are not necessarily in the same order.\n  >>> findParentheses(\")((((\"))\n  ['()', '()()', '(())']\n  */\nconst findParentheses = (string) => {\n    let result = [];\n    let index = 0;\n    while (index < string.length) {\n        let next_open = string.indexOf('(', index);\n        let next_close = string.indexOf(')', index);\n        if (next_open < 0) {\n            break;\n        }\n        if (next_close < 0 || next_close < next_open) {\n            result.push(string.substring(index, next_open + 1));\n            index = next_open + 1;\n            continue;\n        }\n        result.push(string.substring(index, next_close + 1));\n        index = next_close + 1;\n    }\n    return result;\n}\n\nconst test = () => {\n    let test_cases = [\n        [\n            \"((())\",\n            [\n                '()',\n                '()()',\n                '(())'\n            ]\n        ],\n        [\n            \")((())\",\n            [\n                ')()',\n                '()()',\n                '(())'\n            ]\n        ],\n        [\n            \"(())()\",\n            [\n                '()()',\n                '()()()',\n                '(())()'\n            ]\n        ],\n        [\n            \"(())(())\",\n            [\n                '()()',\n                '()()()',\n                '()()()'\n            ]\n        ],\n        [\n            \"(())()()\",\n            [\n                '()()()',\n                '()()()()',\n                '()()()()'\n            ]\n        ],\n        [\n            \"(())()()()()\",\n            [\n                '()()()()',\n                '()()()()()',\n                '()()()()()'\n            ]\n        ],\n        [\n            \"(())()()()()()()()\",\n            [\n                '()()()()()',\n                '()()()()()()',\n                '()()()()()()'\n            ]\n        ],\n        [\n            \")((())()()()())\",\n            [\n                '()()()()()',\n                '()()()()()()',\n                '()()()()()()()'\n            ]\n        ]\n    ];\n\n    for (let [input, expected] of test_cases) {\n        let result = separateParenGroups(input);\n        result.sort();\n        assert.deepEqual(result, expected);\n    }\n}\n\ndescribe('Find Parentheses', () => {\n    describe('#findParentheses()', () => {\n        test();\n    });\n\n    describe('#findParentheses()', () => {\n        it('returns an empty list when given an empty string', () => {\n            assert.deepEqual(findParentheses(''), []);\n        });\n\n        it('returns an empty list when given a string with no parentheses', () => {\n            assert.deepEqual(findParentheses('foo'), []);\n        });\n\n        it('returns a list of the strings that are found in the input', () => {\n            assert.deepEqual(findParentheses('()()()'), [\n                '()()()'\n            ]);\n        });\n\n        it('returns a list of the strings that are found in the input', () => {\n            assert.deepEqual(findParentheses('()(())()'), [\n                '()()()',\n                '()()()()',\n                '()()()()'\n            ]);\n        });\n\n        it('returns a list of the strings that are found in the input', () => {\n            assert.deepEqual(findParentheses('(()())()'), [\n                '()()()',\n                '()()()()',\n                '()()()()'\n            ]);\n        });\n\n        it('returns a list of the strings that are found in the input', () => {\n            assert.deepEqual(findParentheses('(((())))'), [\n                '()()',\n                '()()()',\n                '()()()()',\n                '()()()()'\n            ]);\n        });\n\n        it('returns a list of the strings that are found in the input', () => {\n            assert.deepEqual(findParentheses('(((())))'), [\n                '()"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const decimals = number.toString().split('.')[1]\n  return number.toString().split('.')[0]\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  return number.toString().split('.')[0]\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimal = (number) => {\n  return number.toString().split('.')[1]\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateDecimalInteger = (number) => {\n  return number.toString().split('.')[1]\n}\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateDecimalDecimal = (number) => {\n  return number.toString().split('.')[1]\n}\n\nmodule.exports = {\n  truncateInteger,\n  truncateDecimal,\n  truncateDecimalInteger,\n  truncateDecimalDecimal\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let balance = 0\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      balance = balance + operations[i]\n    }\n  }\n  return balance < 0\n}\n\nexport default belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const list = []\n  for (let i = 0; i < numbers.length; i++) {\n    list.push(numbers[i])\n  }\n  const mean = list.reduce((accumulator, value) => accumulator + value) / list.length\n  const deviation = list.reduce((accumulator, value) => {\n    const difference = value - mean\n    return accumulator + Math.abs(difference)\n  }, 0) / list.length\n  return deviation\n}\n\n/**\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nexport default meanAbsoluteDeviation\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    if (!numbers ||!numbers.length) {\n        return []\n    }\n    const result = []\n    let i = 0\n    let j = 0\n    while (i < numbers.length) {\n        if (j === 0) {\n            result.push(numbers[i])\n            j = 1\n        } else if (j === delimeter) {\n            result.push(numbers[i])\n            j = 0\n        } else {\n            result.push(numbers[i])\n            j += 1\n        }\n        i += 1\n    }\n    return result\n}\n\n/*\n  * Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  * and prepend it to the beginning of the list\n  */\nconst intersperse_prepend = (numbers, delimeter) => {\n    if (!numbers ||!numbers.length) {\n        return []\n    }\n    const result = []\n    let i = 0\n    let j = 0\n    while (i < numbers.length) {\n        if (j === 0) {\n            result.push(numbers[i])\n            j = 1\n        } else if (j === delimeter) {\n            result.push(numbers[i])\n            j = 0\n        } else {\n            result.unshift(numbers[i])\n            j += 1\n        }\n        i += 1\n    }\n    return result\n}\n\n/*\n  * Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  * and append it to the end of the list\n  */\nconst intersperse_append = (numbers, delimeter) => {\n    if (!numbers ||!numbers.length) {\n        return []\n    }\n    const result = []\n    let i = 0\n    let j = 0\n    while (i < numbers.length) {\n        if (j === 0) {\n            result.push(numbers[i])\n            j = 1\n        } else if (j === delimeter) {\n            result.push(numbers[i])\n            j = 0\n        } else {\n            result.push(numbers[i])\n            j += 1\n        }\n        i += 1\n    }\n    return result\n}\n\nmodule.exports = {\n    intersperse,\n    intersperse_prepend,\n    intersperse_append\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst getNestedLevel = (paren_string) => {\n    const level = paren_string.match(/\\(/g).length;\n    return level;\n};\n\nconst parseNestedParens2 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\n/*\n  >>> parseNestedParens2('(((()))()')\n  [2, 3, 1]\n  */\nconst parseNestedParens3 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens4 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens5 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens6 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens7 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens8 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens9 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens10 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens11 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens12 = (paren_string) => {\n    const levels = [];\n    const parenthesis_strings = paren_string.split(/\\s+/);\n    for (let i = 0; i < parenthesis_strings.length; i++) {\n        const level = getNestedLevel(parenthesis_strings[i]);\n        if (level) {\n            levels.push(level);\n        }\n    }\n    return levels;\n};\n\nconst parseNestedParens13 = (paren_string) => {\n    const levels = [];\n"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3], '1')\n  [1, 2, 3]\n  >>> filterBySubstring([1, 2, 3], '2')\n  [2, 3]\n  >>> filterBySubstring([1, 2, 3], '3')\n  [3]\n  >>> filterBySubstring([1, 2, 3], '4')\n  []\n  */\nconst filterBySubstringWithSubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring))\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3], '1', 2)\n  [1]\n  >>> filterBySubstring([1, 2, 3], '2', 2)\n  [2]\n  >>> filterBySubstring([1, 2, 3], '3', 2)\n  [3]\n  >>> filterBySubstring([1, 2, 3], '4', 2)\n  []\n  */\nconst filterBySubstringWithSubstringAndLength = (strings, substring, length) => {\n  return strings.filter(string => string.includes(substring) && string.length === length)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4], '1', 2)\n  [1]\n  >>> filterBySubstring([1, 2, 3, 4], '2', 2)\n  [2]\n  >>> filterBySubstring([1, 2, 3, 4], '3', 2)\n  [3]\n  >>> filterBySubstring([1, 2, 3, 4], '4', 2)\n  [4]\n  >>> filterBySubstring([1, 2, 3, 4], '5', 2)\n  []\n  */\nconst filterBySubstringWithSubstringAndLengthNotEqual = (strings, substring, length) => {\n  return strings.filter(string => string.includes(substring) && string.length!== length)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '1', 2)\n  [1]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '2', 2)\n  [2]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3', 2)\n  [3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '4', 2)\n  [4]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '5', 2)\n  [5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '6', 2)\n  []\n  */\nconst filterBySubstringWithSubstringAndLengthNotEqualAndLengthGreaterThan = (strings, substring, length) => {\n  return strings.filter(string => string.includes(substring) && string.length!== length && string.length > length)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '1', 2, 3)\n  [1, 2, 3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '2', 2, 3)\n  [2, 3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3', 2, 3)\n  [3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '4', 2, 3)\n  [4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '5', 2, 3)\n  [5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '6', 2, 3)\n  []\n  */\nconst filterBySubstringWithSubstringAndLengthNotEqualAndLengthGreaterThanAndLengthLessThan = (strings, substring, length) => {\n  return strings.filter(string => string.includes(substring) && string.length!== length && string.length > length && string.length < length)\n}\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '1', 2, 3)\n  [1, 2, 3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '2', 2, 3)\n  [2, 3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3', 2, 3)\n  [3]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '4', 2, 3)\n  [4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '5', 2, 3)\n  [5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], '6', 2, 3)\n  []\n  */\nconst filterBySubstringWithSubstringAndLengthNotEqualAndLengthGreaterThanAndLengthLessThanAndLengthGreaterThan = (strings, substring, length) => {\n  return strings.filter(string => string.includes(substring) && string.length!== length && string.length > length && string.length < length && string.length > length)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1\n  const sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n    sum += numbers[i]\n  }\n  return sum, product\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return sum, product\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct3 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n  }\n  return sum, product\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct4 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n  }\n  return sum, product\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct5 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let halfSum = 0\n  let halfProduct = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n    halfSum += numbers[i]\n    halfProduct *= numbers[i]\n  }\n  return sum, product, halfSum, halfProduct\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct6 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let halfSum = 0\n  let halfProduct = 1\n  let product1 = 1\n  let halfProduct1 = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n    halfSum += numbers[i]\n    halfProduct *= numbers[i]\n    if (i === numbers.length - 1) {\n      halfSum += int\n    }\n    product1 *= numbers[i]\n    halfProduct1 *= numbers[i]\n  }\n  return sum, product, halfSum, halfProduct, product1, halfProduct1\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct7 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let halfSum = 0\n  let halfProduct = 1\n  let product1 = 1\n  let halfProduct1 = 1\n  let product2 = 1\n  let halfProduct2 = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n    halfSum += numbers[i]\n    halfProduct *= numbers[i]\n    if (i === numbers.length - 1) {\n      halfSum += int\n    }\n    product1 *= numbers[i]\n    halfProduct1 *= numbers[i]\n    if (i === numbers.length - 1) {\n      halfProduct1 += int\n    }\n    product2 *= numbers[i]\n    halfProduct2 *= numbers[i]\n    if (i === numbers.length - 1) {\n      halfProduct2 += int\n    }\n  }\n  return sum, product, halfSum, halfProduct, product1, halfProduct1, product2, halfProduct2\n}\n\n// Another way to do sum and product\n// sumProduct([1, 2, 3, 4])\n// >>> sumProduct([1, 2, 3, 4])\n// (10, 24)\n\nconst sumProduct8 = (numbers, int) => {\n  let sum = 0\n  let product = 1\n  let halfSum = 0\n  let halfProduct = 1\n  let product1 = 1\n  let halfProduct1 = 1\n  let product2 = 1\n  let halfProduct2 = 1\n  let product3 = 1\n  let halfProduct3 = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n    if (i === numbers.length - 1) {\n      sum += int\n    }\n    halfSum += numbers[i]\n    halfProduct *= numbers[i]\n    if (i === numbers.length - 1) {\n      halfSum += int\n    }\n    product1 *= numbers[i"}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.slice(0, -1).reduce((prev, curr) => prev > curr? prev : curr, numbers[numbers.length - 1]);\n  return numbers.concat([max]);\n};\n\nexport default rollingMax;<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').reverse().join('');\n  const isPalindrome = isPalindrome(string);\n  return prefix + isPalindrome + suffix;\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  const half = string.split('').reverse().join('');\n  const full = string.split('').reverse().join('');\n  return half == full;\n}\n\n/* Append the supplied string to the supplied string.\n  If the supplied string is an aplindrome, append the supplied string to the start of the supplied string.\n  If the supplied string is not an aplindrome, append the supplied string to the end of the supplied string.\n  */\nconst append = (string, toAppend) => {\n  const isPalindrome = isPalindrome(string);\n  return isPalindrome? toAppend + string : string + toAppend;\n}\n\n/* Split the supplied string into an array of string.\n  If the supplied string is an aplindrome, split the supplied string into an array that begins with the supplied string.\n  If the supplied string is not an aplindrome, split the supplied string into an array that ends with the supplied string.\n  */\nconst split = (string, toSplit) => {\n  const isPalindrome = isPalindrome(string);\n  return isPalindrome? string.split('') : string.split('').reverse();\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the first element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the last element of the supplied array.\n  */\nconst contains = (array, element) => {\n  return array.indexOf(element)!== -1 || array.indexOf(element) === 0 || array.indexOf(element) === array.length - 1;\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst indexOf = (array, element) => {\n  return array.indexOf(element)!== -1? array.indexOf(element) : array.indexOf(element) === array.length - 1? array.length - 1 : -1;\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst lastIndexOf = (array, element) => {\n  return array.indexOf(element)!== -1? array.indexOf(element) : array.indexOf(element) === 0? array.length - 1 : -1;\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst containsAll = (array, elements) => {\n  return array.every(element => contains(elements, element));\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst indexOfAll = (array, elements) => {\n  return array.every(element => contains(elements, element) && contains(array, element));\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst lastIndexOfAll = (array, elements) => {\n  return array.every(element => contains(elements, element) && contains(array, element) && contains(array, element));\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst containsAllInArray = (array, elements) => {\n  return containsAll(array, elements);\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst indexOfAllInArray = (array, elements) => {\n  return indexOfAll(array, elements);\n}\n\n/* Test if the supplied array contains the supplied element.\n  If the supplied array contains the supplied element, test if the supplied element is the last element of the supplied array.\n  If the supplied array does not contain the supplied element, test if the supplied element is the first element of the supplied array.\n  */\nconst lastIndexOfAllInArray = (array, elements) => {\n  return lastIndexOfAll(array, elements);\n}\n\n"}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n    let result = '';\n    for(let i = 0; i < a.length; i++) {\n        result += a[i] ^ b[i];\n    }\n    return result;\n}\n\n/**\n  * @name checkString\n  * @description Check if input string is valid.\n  * @param {string} str String to be checked.\n  * @return {boolean} True if string is valid, false otherwise.\n  * @example\n  * checkString('abc')\n  * True\n  * checkString('abcd')\n  * False\n  * checkString('aaaa')\n  * False\n  */\nconst checkString = (str) => {\n    if(str.length === 0) {\n        return false;\n    }\n    let counter = 0;\n    let valid = true;\n    for(let i = 0; i < str.length; i++) {\n        if(str[i] === '1') {\n            counter++;\n        }\n    }\n    if(counter!== 1) {\n        valid = false;\n    }\n    return valid;\n}\n\n/**\n  * @name checkInteger\n  * @description Check if input integer is valid.\n  * @param {number} num Number to be checked.\n  * @return {boolean} True if integer is valid, false otherwise.\n  * @example\n  * checkInteger(0)\n  * True\n  * checkInteger(-1)\n  * False\n  * checkInteger(1)\n  * True\n  */\nconst checkInteger = (num) => {\n    if(num === 0) {\n        return false;\n    }\n    return true;\n}\n\n/**\n  * @name checkArray\n  * @description Check if input array is valid.\n  * @param {array} arr Array to be checked.\n  * @return {boolean} True if array is valid, false otherwise.\n  * @example\n  * checkArray([0, 0, 0, 0, 0, 0, 0, 0, 0])\n  * True\n  * checkArray([1, 1, 1, 1, 1, 1, 1, 1, 1])\n  * False\n  * checkArray([1, 0, 1, 0, 1, 0, 1, 0, 1])\n  * False\n  */\nconst checkArray = (arr) => {\n    let counter = 0;\n    let valid = true;\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] === 1) {\n            counter++;\n        }\n    }\n    if(counter!== 1) {\n        valid = false;\n    }\n    return valid;\n}\n\n/**\n  * @name checkInput\n  * @description Check if input is valid.\n  * @param {string} str String to be checked.\n  * @param {number} num Number to be checked.\n  * @param {array} arr Array to be checked.\n  * @return {boolean} True if all inputs are valid, false otherwise.\n  * @example\n  * checkInput('abc', 0, [0, 0, 0, 0, 0, 0, 0, 0, 0])\n  * True\n  * checkInput('abc', 1, [1, 1, 1, 1, 1, 1, 1, 1, 1])\n  * False\n  * checkInput('abc', 1, [1, 0, 1, 0, 1, 0, 1, 0, 1])\n  * False\n  * checkInput('abc', 0, [1, 0, 1, 0, 1, 0, 1, 0, 1])\n  * False\n  */\nconst checkInput = (str, num, arr) => {\n    if(checkString(str) === false) {\n        return false;\n    }\n    if(checkInteger(num) === false) {\n        return false;\n    }\n    if(checkArray(arr) === false) {\n        return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    stringXor,\n    checkString,\n    checkInteger,\n    checkArray,\n    checkInput\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    return strings.reduce((longest, string) => {\n        if (longest.length === 0) {\n            return string;\n        } else if (string.length > longest.length) {\n            return string;\n        }\n        return longest;\n    }, null);\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    const [r, q] = [a, b];\n    const [r1, q1] = [r, q];\n    b = q1;\n    a = r1;\n  }\n  return a;\n};\n\n/* Return a gretaest common multiple of two integesr a nad b\n  >>> greatestCommonMultiple(3, 5)\n  15\n  >>> greatestCommonMultiple(25, 15)\n  25\n  */\nconst greatestCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a gretaest common factor of two integesr a nad b\n  >>> greatestCommonFactor(3, 5)\n  1\n  >>> greatestCommonFactor(25, 15)\n  1\n  */\nconst greatestCommonFactor = (a, b) => {\n  return greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\n/* Return a gretaest common multiple of two integesr a nad b\n  >>> gcd(3, 5)\n  1\n  >>> gcd(25, 15)\n  5\n  >>> lcm(3, 5)\n  15\n  >>> lcm(25, 15)\n  25\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return a gretaest common factor of two integesr a nad b\n  >>> gcf(3, 5)\n  1\n  >>> gcf(25, 15)\n  1\n  >>> lcm(3, 5)\n  15\n  >>> lcm(25, 15)\n  25\n  */\nconst lcf = (a, b) => {\n  return greatestCommonDivisor(a, b) / greatestCommonDivisor(b, a);\n};\n\nexport default {\n  greatestCommonDivisor,\n  greatestCommonMultiple,\n  greatestCommonFactor,\n  lcm,\n  lcf,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let i = 0,\n    prefixes = [],\n    length = string.length;\n  for (i = 0; i < length; i++) {\n    prefixes.push(string.substring(0, i + 1));\n  }\n  return prefixes;\n};\n\n/* Return list of all prefixes for the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes2 = (string) => {\n  let i = 0,\n    prefixes = [],\n    length = string.length;\n  while (i < length) {\n    prefixes.push(string.substring(0, i + 1));\n    i++;\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  for (i = 0; i < length; i++) {\n    suffixes.push(string.substring(i, string.length));\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes for the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes2 = (string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, string.length));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN2 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN3 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN4 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN5 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN6 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN7 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length = string.length;\n  while (i < length) {\n    suffixes.push(string.substring(i, i + n));\n    i++;\n  }\n  return suffixes;\n};\n\n/* Return list of all suffixes of length n from shortest to longest of the input string\n  >>> allSuffixes(12, 'abc')\n  ['b', 'c', 'ac', 'bc', 'abc']\n  */\nconst allSuffixesN8 = (n, string) => {\n  let i = 0,\n    suffixes = [],\n    length ="}
{"task_id": "JavaScript/15", "prompt": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let sequence = []\n  while (n-- > 0) {\n    sequence.push(n)\n  }\n  return sequence.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const map = new Map()\n  for (const char of string) {\n    const curr = map.get(char)\n    if (curr === undefined) {\n      map.set(char, 1)\n    } else {\n      map.set(char, curr + 1)\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of lowercase letters in the string\n  >>> countLetters('Joe Smith')\n  1\n  >>> countLetters('I am Joe')\n  1\n  >>> countLetters('I am Joe')\n  1\n  */\nconst countLetters = (string) => {\n  const map = new Map()\n  for (const char of string) {\n    if (char.toLowerCase() === char) {\n      const curr = map.get(char)\n      if (curr === undefined) {\n        map.set(char, 1)\n      } else {\n        map.set(char, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of uppercase letters in the string\n  >>> countUppercaseLetters('I am Joe')\n  1\n  >>> countUppercaseLetters('I am Joe')\n  1\n  >>> countUppercaseLetters('I am Joe')\n  1\n  */\nconst countUppercaseLetters = (string) => {\n  const map = new Map()\n  for (const char of string) {\n    if (char.toUpperCase() === char) {\n      const curr = map.get(char)\n      if (curr === undefined) {\n        map.set(char, 1)\n      } else {\n        map.set(char, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of numbers in the string\n  >>> countNumbers('Joe Smith')\n  0\n  >>> countNumbers('I am Joe')\n  1\n  >>> countNumbers('I am Joe')\n  1\n  */\nconst countNumbers = (string) => {\n  const map = new Map()\n  for (const char of string) {\n    if (char.toLowerCase() === char) {\n      const curr = map.get(char)\n      if (curr === undefined) {\n        map.set(char, 1)\n      } else {\n        map.set(char, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of characters in the string\n  >>> countCharacters('Joe Smith')\n  0\n  >>> countCharacters('I am Joe')\n  8\n  >>> countCharacters('I am Joe')\n  8\n  */\nconst countCharacters = (string) => {\n  const map = new Map()\n  for (const char of string) {\n    map.set(char, map.get(char) + 1)\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of words in the string\n  >>> countWords('I am Joe')\n  1\n  >>> countWords('I am Joe')\n  1\n  >>> countWords('I am Joe')\n  1\n  */\nconst countWords = (string) => {\n  const map = new Map()\n  const words = string.split(' ')\n  for (const word of words) {\n    if (word.length > 0) {\n      const curr = map.get(word)\n      if (curr === undefined) {\n        map.set(word, 1)\n      } else {\n        map.set(word, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of syllables in the string\n  >>> countSyllables('I am Joe')\n  1\n  >>> countSyllables('I am Joe')\n  1\n  >>> countSyllables('I am Joe')\n  1\n  */\nconst countSyllables = (string) => {\n  const map = new Map()\n  const words = string.split(' ')\n  for (const word of words) {\n    if (word.length > 0) {\n      const syllables = countSyllables(word)\n      const curr = map.get(syllables)\n      if (curr === undefined) {\n        map.set(syllables, 1)\n      } else {\n        map.set(syllables, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\n/* iGven a string, return the number of syllables in the string\n  >>> countSyllables('I am Joe')\n  1\n  >>> countSyllables('I am Joe')\n  1\n  >>> countSyllables('I am Joe')\n  1\n  */\nconst countSyllables = (string) => {\n  const map = new Map()\n  const words = string.split(' ')\n  for (const word of words) {\n    if (word.length > 0) {\n      const syllables = countSyllables(word)\n      const curr = map.get(syllables)\n      if (curr === undefined) {\n        map.set(syllables, 1)\n      } else {\n        map.set(syllables, curr + 1)\n      }\n    }\n  }\n  return map.size\n}\n\nmodule.exports = {\n  countDistinctCharacters,\n  countLetters,\n  countUppercaseLetters,\n  countNumbers,\n  countCharacters,\n  countWords,\n  countSyllables\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    // your code here\n    return music_string.split(' ').map(e => parseInt(e, 10));\n};\n\nconst printMusic = (music_list) => {\n    // your code here\n    return music_list.map(e => e.toString()).join(' ');\n};\n\n// Test\nconst test = () => {\n    const music_list = parseMusic(test_music_string);\n    console.log(printMusic(music_list));\n};\n\n// Testing\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const counter = 0;\n  let index = 0;\n  while ((index = string.indexOf(substring, index))!== -1) {\n    counter++;\n    index += substring.length;\n  }\n  return counter;\n};\n\n/*\n  Find the longest substring that contains all characters of another string.\n  >>> findLongestSubstring('abc', 'cde')\n  'cde'\n  >>> findLongestSubstring('aa', 'a')\n  'a'\n  >>> findLongestSubstring('aa', 'b')\n  'aa'\n  >>> findLongestSubstring('aa', 'bba')\n  'aa'\n  >>> findLongestSubstring('abc', 'c')\n  'c'\n  >>> findLongestSubstring('aa', 'aa')\n  'aa'\n  */\nconst findLongestSubstring = (string, substring) => {\n  const index = string.indexOf(substring);\n  if (index === -1) return '';\n  const start = index;\n  const end = index + substring.length;\n  const longest = substring;\n  while (index!== -1) {\n    if (index + 1 < string.length && string.indexOf(substring, index + 1) === index + 1) {\n      end = index + 1;\n    } else {\n      break;\n    }\n    index = string.indexOf(substring, end);\n  }\n  return longest.slice(0, end - start);\n};\n\n/*\n  Find the longest substring that is not contained in another string.\n  >>> findLongestSubstring('abc', 'ab')\n  'abc'\n  >>> findLongestSubstring('abc', 'a')\n  'abc'\n  >>> findLongestSubstring('abc', 'b')\n  'abc'\n  >>> findLongestSubstring('abc', 'ba')\n  'abc'\n  >>> findLongestSubstring('abc', 'bc')\n  'abc'\n  >>> findLongestSubstring('abc', 'ac')\n  'abc'\n  >>> findLongestSubstring('abc', 'cc')\n  'abc'\n  */\nconst findLongestSubstringNotContained = (string, substring) => {\n  const index = string.indexOf(substring);\n  if (index === -1) return '';\n  const start = index;\n  const end = index + substring.length;\n  const longest = string.slice(0, start);\n  while (index!== -1) {\n    if (index + 1 < string.length && string.indexOf(substring, index + 1) === index + 1) {\n      end = index + 1;\n    } else {\n      break;\n    }\n    index = string.indexOf(substring, end);\n  }\n  return longest + substring.slice(end - start);\n};\n\n/*\n  Find the longest substring that does not contain any of the characters in the given string.\n  >>> findLongestSubstringNotContained('a', 'b')\n  ''\n  >>> findLongestSubstringNotContained('aa', 'b')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'bb')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'a')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'c')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'bba')\n  'aa'\n  >>> findLongestSubstringNotContained('abc', 'c')\n  'abc'\n  >>> findLongestSubstringNotContained('aa', 'aa')\n  'aa'\n  */\nconst findLongestSubstringNotContained = (string, substring) => {\n  const index = string.indexOf(substring);\n  if (index === -1) return '';\n  const start = index;\n  const end = index + substring.length;\n  const longest = string.slice(0, start);\n  while (index!== -1) {\n    if (index + 1 < string.length && string.indexOf(substring, index + 1) === index + 1) {\n      end = index + 1;\n    } else {\n      break;\n    }\n    index = string.indexOf(substring, end);\n  }\n  return longest + substring.slice(end - start);\n};\n\n/*\n  Find the longest substring that contains no characters in the given string.\n  >>> findLongestSubstringNotContained('a', 'b')\n  'a'\n  >>> findLongestSubstringNotContained('aa', 'b')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'bb')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'a')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'c')\n  'aa'\n  >>> findLongestSubstringNotContained('aa', 'bba')\n  'aa'\n  >>> findLongestSubstringNotContained('abc', 'c')\n  'abc'\n  >>> findLongestSubstringNotContained('aa', 'aa')\n  'aa'\n  */\nconst findLongestSubstringNotContained = (string, substring) => {\n  const index = string.indexOf(substring);\n  if (index === -1) return string;\n  const start = index;\n  const end = index + substring.length;\n  const longest = string.slice(0, start);\n  while (index!== -1) {\n    if (index + 1 < string.length && string.indexOf(substring, index + 1) === index + 1) {\n      end = index + 1;\n    } else {\n      break;\n    }\n    index = string.indexOf(substring, end);\n  }\n  return longest + substring.slice(end - start);\n};\n\nmodule.exports = {\n  findLongestSubstring,\n  findLongestSubstringNotContained,"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    return numbers.split(\" \").sort((a, b) => {\n        return a.toString().localeCompare(b.toString());\n    });\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The sum of the squares of all the numbers from 1 to N\n  */\nconst sumSquares = (n) => {\n    return (n * (n + 1) * (2 * n + 1) / 6);\n}\n\n/*\n  Input:\n  The number N\n  Output:\n  The sum of the squares of the odd numbers from 1 to N\n  */\nconst sumSquaresOdd = (n) => {\n    return (n * (n + 1) * (2 * n + 1) / 6);\n}\n\n/*\n  Input:\n  The number N\n  Output:\n  The sum of the squares of the even numbers from 1 to N\n  */\nconst sumSquaresEven = (n) => {\n    return (n * (n + 1) * (2 * n + 1) / 6);\n}\n\n/*\n  Input:\n  The number N\n  Output:\n  The sum of the numbers from 1 to N\n  */\nconst sum = (n) => {\n    return (n * (n + 1) / 2);\n}\n\n/*\n  Input:\n  The number N\n  Output:\n  The sum of the odd numbers from 1 to N\n  */\nconst sumOdd = (n) => {\n    return (n * (n + 1) / 2);\n}\n\n/*\n  Input:\n  The number N\n  Output:\n  The sum of the even numbers from 1 to N\n  */\nconst sumEven = (n) => {\n    return (n * (n + 1) / 2);\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of divisors of N.\n  */\nconst numberOfDivisors = (n) => {\n    let num = 1;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of prime numbers less than N.\n  */\nconst numberOfPrimes = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPrime(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of perfect numbers less than N.\n  */\nconst numberOfPerfect = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPerfect(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of abundant numbers less than N.\n  */\nconst numberOfAbundant = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isAbundant(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of prime power numbers less than N.\n  */\nconst numberOfPrimePower = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPrimePower(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of abundant numbers less than N.\n  */\nconst numberOfAbundantPower = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isAbundantPower(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of perfect numbers less than N.\n  */\nconst numberOfPerfectPower = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPerfectPower(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of abundant numbers less than N.\n  */\nconst numberOfAbundantPower2 = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isAbundantPower2(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of prime power numbers less than N.\n  */\nconst numberOfPrimePower2 = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPrimePower2(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of abundant numbers less than N.\n  */\nconst numberOfAbundantPower3 = (n) => {\n    let num = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isAbundantPower3(i)) {\n            num++;\n        }\n    }\n    return num;\n}\n\n/*\n  Input:\n  A number N.\n  Output:\n  The number of perfect numbers less than N.\n  */\nconst numberOfPerfectPower2 = (n) => {\n    let num = 0;\n"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const nums = numbers.slice();\n  const minDistance = Math.min(numbers[0], numbers[1]);\n  const closest = nums[0];\n  const secondClosest = nums[1];\n\n  nums.forEach((num, i) => {\n    if (num < minDistance) {\n      secondClosest = closest;\n      closest = num;\n    } else if (num < closest) {\n      secondClosest = num;\n    }\n  });\n\n  return [closest, secondClosest];\n};\n\nexport default findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": false, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  return numbers.map((number) => number / (Math.max(number, 1) - Math.min(number, 1)));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the greatest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [1, 2, 5, 4, 3].\n */\nconst removeSmallestNumber = (numbers) => {\n  return numbers.sort((a, b) => a - b)\n   .reverse()\n   .slice(1);\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the smallest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeLargestNumber = (numbers) => {\n  return numbers.sort((a, b) => b - a)\n   .reverse()\n   .slice(1);\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the smallest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeSmallestPercentage = (numbers) => {\n  return numbers.map((number) => number / (Math.max(number, 1) - Math.min(number, 1)));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the largest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeLargestPercentage = (numbers) => {\n  return numbers.map((number) => number / (Math.max(number, 1) - Math.min(number, 1)));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the smallest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeSmallestPercentageRounded = (numbers) => {\n  return numbers.map((number) => Math.floor(number / (Math.max(number, 1) - Math.min(number, 1))));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the largest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeLargestPercentageRounded = (numbers) => {\n  return numbers.map((number) => Math.floor(number / (Math.max(number, 1) - Math.min(number, 1))));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the smallest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeSmallestNumberRounded = (numbers) => {\n  return numbers.map((number) => Math.ceil(number / (Math.max(number, 1) - Math.min(number, 1))));\n}\n\n/**\n * Given a list of numbers, return a list of the same length with the largest\n * number at the beginning of the list.\n * For example, given [2, 1, 5, 4, 3], return [2, 1, 5, 4, 3].\n */\nconst removeLargestNumberRounded = (numbers) => {\n  return numbers.map((number) => Math.ceil(number / (Math.max(number, 1) - Math.min(number, 1))));\n}\n\nmodule.exports = {\n  rescaleToUnit,\n  removeSmallestNumber,\n  removeLargestNumber,\n  removeSmallestPercentage,\n  removeLargestPercentage,\n  removeSmallestPercentageRounded,\n  removeLargestPercentageRounded,\n  removeSmallestNumberRounded,\n  removeLargestNumberRounded,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((v) => {\n    const str = v.toString();\n    return str!== 'NaN' && str!== 'Infinity' && str!== '-Infinity';\n  });\n};\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return length of given string\n  * @param {string} string - input string\n  * @returns {number} length of given string\n  * @example\n  * strlen('abc')\n  * //=> 3\n  */\nconst strlen2 = (string) => {\n  return string.length;\n};\n\n/**\n  * Return length of given string\n  * @param {string} string - input string\n  * @returns {number} length of given string\n  * @example\n  * strlen('abc')\n  * //=> 3\n  */\nconst strlen3 = (string) => {\n  return string.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisor = largestDivisor(Math.sqrt(n));\n  return n/divisor;\n}\n\n/*\n  For a given unbmer"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let p = [1];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      p.push(i);\n      n = n / i;\n    }\n    if (n === 1) break;\n  }\n  return p;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let seen = {}\n  let result = []\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue\n    }\n    seen[numbers[i]] = true\n    result.push(numbers[i])\n  }\n  return result\n}\n\n// Part 1\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\nconst removeDuplicates = (numbers) => {\n  let seen = {}\n  let result = []\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (seen[numbers[i]]) {\n      continue\n    }\n    seen[numbers[i]] = true\n    result.push(numbers[i])\n  }\n  return result\n}\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//   }\n//   return result\n// }\n\n// const removeDuplicates = (numbers) => {\n//   let seen = {}\n//   let result = []\n\n//   for (let i = 0; i < numbers.length; i++) {\n//     if (seen[numbers[i]]) {\n//       continue\n//     }\n//     seen[numbers[i]] = true\n//     result.push(numbers[i])\n//"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let flip = string;\n  let flipped = string;\n  flipped = flip.toUpperCase();\n  flipped = flipped.replace(/([a-z])/g, (match) => {\n    return match.toLowerCase();\n  });\n  return flipped;\n}\n\n/* For a given string, return a string of the first letters in uppercase.\n  >>> firstLetters('Hello')\n  'Hello'\n  >>> firstLetters('hello')\n  'hello'\n  >>> firstLetters('Hellow')\n  'Hellow'\n  */\nconst firstLetters = (string) => {\n  return string.split('').map(x => x.toUpperCase()).join('');\n}\n\n/* For a given string, return a string of the first letters in lowercase.\n  >>> firstLetters('Hello')\n  'Hello'\n  >>> firstLetters('hello')\n  'hello'\n  >>> firstLetters('Hellow')\n  'hellow'\n  */\nconst firstLettersInLowerCase = (string) => {\n  return string.split('').map(x => x.toLowerCase()).join('');\n}\n\n/*\n  For a given string, return a string of the first letters in uppercase.\n  >>> firstLetters('Hello')\n  'Hello'\n  >>> firstLetters('hello')\n  'hello'\n  >>> firstLetters('Hellow')\n  'Hellow'\n  */\nconst firstLettersInUppercase = (string) => {\n  return string.split('').map(x => x.toUpperCase()).join('');\n}\n\n/* Return the longest common substring of two strings.\n  >>> lcs('Hello', 'World')\n  'ello'\n  >>> lcs('Hello', 'loW')\n  'ello'\n  >>> lcs('Hello', 'hello')\n  'ello'\n  >>> lcs('Hello', 'hell')\n  'ello'\n  >>> lcs('Hello', 'hello')\n  'ello'\n  >>> lcs('Hello', 'hellow')\n  'ello'\n  >>> lcs('Hello', 'helloworld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorld')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHelloWorldHello')\n  'ello'\n  >>> lcs('Hello', 'helloworldHelloWorldHelloWorldHelloWorldHello"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let buffer = ''\n  for (let string of strings) {\n    buffer += string\n  }\n  return buffer\n}\n\n/* Create an empty list\n  >>> emptyList()\n  []\n  */\nconst emptyList = () => []\n\n/* Create a list with a single element\n  >>> list(1)\n  [1]\n  >>> list(1, 2)\n  [1, 2]\n  >>> list(1, 2, 3)\n  [1, 2, 3]\n  */\nconst list = (...args) => args\n\n/* Convert a list to a string\n  >>> string(list(1, 2, 3))\n  '1 2 3'\n  >>> string(list())\n  ''\n  */\nconst string = (list) => `${concatenate(list)}`\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst list = (...args) => args.reduce((a, b) => [...a, b], [])\n\n/* Convert a list to a string\n  >>> string(list(1, 2, 3))\n  '1 2 3'\n  >>> string(list())\n  ''\n  */\nconst string = (list) => `${concatenate(list)}`\n\n/* Create a list with an integer as a single element\n  >>> list(1)\n  [1]\n  >>> list(1, 2)\n  [1, 2]\n  >>> list(1, 2, 3)\n  [1, 2, 3]\n  */\nconst list = (...args) => args\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst list = (...args) => args.reduce((a, b) => [...a, b], [])\n\n/* Create a list with an integer as a single element\n  >>> list(1)\n  [1]\n  >>> list(1, 2)\n  [1, 2]\n  >>> list(1, 2, 3)\n  [1, 2, 3]\n  */\nconst list = (...args) => args\n\n/* Create a list with a string as a single element\n  >>> list('a')\n  ['a']\n  >>> list('a', 'b')\n  ['a', 'b']\n  >>> list('a', 'b', 'c')\n  ['a', 'b', 'c']\n  */\nconst list = (...args) => args\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst list = (...args) => args.reduce((a, b) => [...a, b], [])\n\n/* Create a list with a string as a single element\n  >>> list('a')\n  ['a']\n  >>> list('a', 'b')\n  ['a', 'b']\n  >>> list('a', 'b', 'c')\n  ['a', 'b', 'c']\n  */\nconst list = (...args) => args\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst list = (...args) => args.reduce((a, b) => [...a, b], [])\n\n/* Create a list with a string as a single element\n  >>> list('a')\n  ['a']\n  >>> list('a', 'b')\n  ['a', 'b']\n  >>> list('a', 'b', 'c')\n  ['a', 'b', 'c']\n  */\nconst list = (...args) => args\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst list = (...args) => args.reduce((a, b) => [...a, b], [])\n\n/* Create a list with a string as a single element\n  >>> list('a')\n  ['a']\n  >>> list('a', 'b')\n  ['a', 'b']\n  >>> list('a', 'b', 'c')\n  ['a', 'b', 'c']\n  */\nconst list = (...args) => args\n\n/* Create a list with a list as a single element\n  >>> list([1, 2, 3])\n  [1, 2, 3]\n  >>> list([1, 2, 3], [4, 5, 6])"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n// ###################\n// ## Utility functions ##\n// ###################\n\n// ## Get a random number ##\nconst getRandomNumber = () => {\n  return Math.floor(Math.random() * 100)\n}\n\n// ## Concatenate two arrays ##\nconst concatArrays = (a, b) => a.concat(b)\n\n// ## Add a given number to an array ##\nconst addToArray = (a, b) => a.concat(b)\n\n// ## Return a random string ##\nconst getRandomString = (length = 20) => {\n  return Array(length).fill('a').join(' ')\n}\n\n// ## Remove an element from an array ##\nconst removeElement = (a, el) => a.filter(v => v!== el)\n\n// ## Concatenate two arrays ##\nconst concatArrays2 = (a, b) => [...a,...b]\n\n// ## Get the next item from an array ##\nconst getNextItem = (a, b) => a[a.length - 1]\n\n// ## Check if an item is in an array ##\nconst inArray = (a, el) => a.includes(el)\n\n// ## Check if an item is in an array in reverse order ##\nconst inArrayReverse = (a, el) => a.includes(el)\n\n// ## Create a list of all items in an array ##\nconst getAllItems = (a) => a.slice()\n\n// ## Get the number of elements in an array ##\nconst getArraySize = (a) => a.length\n\n// ## Check if an array is empty ##\nconst isArrayEmpty = (a) => getArraySize(a) === 0\n\n// ## Check if an array is not empty ##\nconst isArrayNotEmpty = (a) => getArraySize(a) > 0\n\n// ## Get an array in a given size ##\nconst getArraySize = (a, size) => a.slice(0, size)\n\n// ## Check if a given array is sorted ##\nconst isSorted = (a) => a.every(a => a < a[1] && a > a[0])\n\n// ## Check if a given array is sorted in reverse order ##\nconst isSortedReverse = (a) => a.every(a => a > a[1] && a < a[0])\n\n// ## Check if a given array is unique ##\nconst isUnique = (a) => a.every(a => a < a[1] && a > a[0])\n\n// ## Check if a given array is unique in reverse order ##\nconst isUniqueReverse = (a) => a.every(a => a > a[1] && a < a[0])\n\n// ## Check if an array contains only numbers ##\nconst isNumericArray = (a) => a.every(v => typeof v === 'number')\n\n// ## Check if an array contains only booleans ##\nconst isBooleanArray = (a) => a.every(v => typeof v === 'boolean')\n\n// ## Check if an array contains only strings ##\nconst isStringArray = (a) => a.every(v => typeof v ==='string')\n\n// ## Check if an array contains only objects ##\nconst isObjectArray = (a) => a.every(v => typeof v === 'object')\n\n// ## Check if an array contains only null ##\nconst isNullArray = (a) => a.every(v => v === null)\n\n// ## Check if an array contains only nulls ##\nconst isNullsArray = (a) => a.every(v => v === null)\n\n// ## Check if an array contains only undefined ##\nconst isUndefinedArray = (a) => a.every(v => typeof v === 'undefined')\n\n// ## Check if an array contains only undefineds ##\nconst isUndefinedsArray = (a) => a.every(v => typeof v === 'undefined')\n\n// ## Check if an array contains only empty arrays ##\nconst isEmptyArray = (a) => a.every(v => isArrayEmpty(v))\n\n// ## Check if an array contains only empty arrays in reverse order ##\nconst isEmptyArrayReverse = (a) => a.every(v => isArrayEmpty(v))\n\n// ## Check if an array contains only empty objects ##\nconst isEmptyObjectArray = (a) => a.every(v => isObjectEmpty(v))\n\n// ## Check if an array contains only empty objects in reverse order ##\nconst isEmptyObjectArrayReverse = (a) => a.every(v => isObjectEmpty(v))\n\n// ## Check if an array contains only empty strings ##\nconst isEmptyStringArray = (a) => a.every(v => isStringEmpty(v))\n\n// ## Check if an array contains only empty strings in reverse order ##\nconst isEmptyStringArrayReverse = (a) => a.every(v => isStringEmpty(v))\n\n// ## Check if an array contains only empty numbers ##\nconst isEmptyNumberArray = (a) => a.every(v => isNumericEmpty(v))\n\n// ## Check if an array contains only empty numbers in reverse order ##\nconst isEmptyNumberArrayReverse = (a) => a.every(v => isNumericEmpty(v))\n\n// ## Check if an array contains only empty booleans ##\nconst isEmptyBooleanArray = (a) => a.every(v => isBooleanEmpty(v))\n\n// ## Check if an array contains only empty booleans in reverse order ##\nconst isEmptyBooleanArrayReverse = (a) => a.every(v => isBooleanEmpty(v))\n\n// ## Check if an array contains only empty objects ##\nconst isEmptyObjectArray = (a) => a.every(v => isObjectEmpty(v))\n\n// ## Check if an array contains only empty objects in reverse order ##\nconst isEmptyObjectArrayReverse = (a) => a.every(v => isObjectEmpty(v))\n\n// ## Check if an array contains only empty strings ##\nconst isEmptyStringArray = (a) => a.every(v => isStringEmpty(v))"}
{"task_id": "JavaScript/30", "prompt": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0)\n}\n\n// #############################################################################\n\n/*\n  Given a string, return all substrings that contain at least one character of\n  a given string.\n\n  >>> getSubstrings('abac')\n  ['abac', 'baac', 'cbaac']\n  >>> getSubstrings('abac', 'b')\n  ['abac', 'abca', 'bcab', 'cabac']\n  >>> getSubstrings('abac', 'a')\n  ['abac', 'bac', 'cab']\n  >>> getSubstrings('abac', 'b', 'c')\n  ['abac', 'abca', 'bcab', 'cbaac']\n  >>> getSubstrings('abac', 'c', 'a')\n  ['abac', 'baac', 'cbaac']\n  */\nconst getSubstrings = (s, substring = '') => {\n  let res = []\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j <= s.length; j++) {\n      res.push(s.substring(i, j))\n    }\n  }\n  return res.filter((e) => e.indexOf(substring) > -1)\n}\n\n// #############################################################################\n\n/*\n  Given a string, return all substrings that contain at least one character of\n  a given string.\n\n  >>> getSubstrings('abac', 'c')\n  []\n  */\nconst getSubstrings2 = (s, substring = '') => {\n  let res = []\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      res.push(s.substring(i, j))\n    }\n  }\n  return res.filter((e) => e.indexOf(substring) > -1)\n}\n\n// #############################################################################\n\n/*\n  Given a string, return all substrings that contain at least one character of\n  a given string.\n\n  >>> getSubstrings('abac', 'b')\n  ['abac', 'abca', 'bcab', 'cbaac']\n  >>> getSubstrings('abac', 'c')\n  []\n  >>> getSubstrings('abac', 'b', 'c')\n  ['abac', 'abca', 'bcab', 'cbaac']\n  >>> getSubstrings('abac', 'a')\n  []\n  >>> getSubstrings('abac', 'b', 'c', 'a')\n  []\n  */\nconst getSubstrings3 = (s, substring = '') => {\n  let res = []\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      res.push(s.substring(i, j))\n    }\n  }\n  return res.filter((e) => e.indexOf(substring) > -1)\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the first character of a given string.\n\n  >>> indexOf('abac', 'b')\n  2\n  >>> indexOf('abac', 'c')\n  -1\n  */\nconst indexOf = (s, substring = '') => {\n  let i = s.indexOf(substring)\n  if (i > -1) {\n    return i\n  } else {\n    return -1\n  }\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the last character of a given string.\n\n  >>> indexOf('abac', 'c')\n  2\n  >>> indexOf('abac', 'b')\n  4\n  */\nconst indexOf2 = (s, substring = '') => {\n  let i = s.lastIndexOf(substring)\n  if (i > -1) {\n    return i\n  } else {\n    return -1\n  }\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the last character of a given string.\n\n  >>> indexOf2('abac', 'c')\n  2\n  >>> indexOf2('abac', 'b')\n  4\n  */\nconst indexOf3 = (s, substring = '') => {\n  let i = s.lastIndexOf(substring)\n  if (i > -1) {\n    return i\n  } else {\n    return -1\n  }\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the first character of a given string.\n\n  >>> indexOf3('abac', 'b')\n  2\n  >>> indexOf3('abac', 'c')\n  -1\n  */\nconst indexOf4 = (s, substring = '') => {\n  let i = s.indexOf(substring)\n  if (i > -1) {\n    return i\n  } else {\n    return -1\n  }\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the first character of a given string.\n\n  >>> indexOf4('abac', 'b')\n  2\n  >>> indexOf4('abac', 'c')\n  -1\n  */\nconst indexOf5 = (s, substring = '') => {\n  let i = s.indexOf(substring)\n  if (i > -1) {\n    return i\n  } else {\n    return -1\n  }\n}\n\n// #############################################################################\n\n/*\n  Given a string, return the index of the first character of a given string.\n\n  >>> indexOf5('abac', 'b')\n  2\n  >>> indexOf5('abac', 'c')\n  -1\n  */\nconst indexOf6 = (s, substring = '') => {\n  let i = s.indexOf(substring)"}
{"task_id": "JavaScript/31", "prompt": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    let i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) return false;\n        i += 1;\n    }\n    return true;\n}\n\nconst isPalindrome = (n) => {\n    let s = n.toString();\n    let rev = 0;\n    for (let i = 0; i < s.length / 2; i++) {\n        if (s.charAt(i)!== s.charAt(s.length - i - 1)) return false;\n    }\n    return true;\n}\n\nconst isFib = (n) => {\n    let n1 = 1;\n    let n2 = 1;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            n2 = n2 * 2;\n        }\n        n1 = n1 + n2;\n        n = n / 2;\n    }\n    return n1 === n;\n}\n\nconst isHappy = (n) => {\n    let i = 1;\n    let count = 1;\n    while (i <= n) {\n        let newCount = 0;\n        let newValue = 1;\n        for (let j = 1; j <= i; j++) {\n            newValue = newValue * (i - j + 1) / j;\n            newCount += newValue;\n        }\n        if (newCount!= count) return false;\n        i++;\n        count = newCount;\n    }\n    return true;\n}\n\nconst isPrimeAndPalindrome = (n) => {\n    return isPrime(n) && isPalindrome(n);\n}\n\nconst isHappyNumber = (n) => {\n    return isPrimeAndPalindrome(n) && isFib(n);\n}\n\nconst isHappyNumberWith1 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n);\n}\n\nconst isHappyNumberWith2 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n);\n}\n\nconst isHappyNumberWith3 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith4 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith5 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith6 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith7 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith8 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith9 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith10 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith11 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith12 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith13 = (n) => {\n    return isPrimeAndPalindrome(n) && isHappy(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n) && isFib(n);\n}\n\nconst isHappyNumberWith14 = (n) => {\n    return"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\n/*\n  Find x such that poly(x) = 0.\n  Returns only ony zero point, even fi teher are many.\n  */\nconst findPolynomialZero = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\n/*\n  xs is a list of polynoimals.\n  Returns the first zero point of the first polynomial.\n  */\nconst findPolynomialZero1 = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\n/*\n  Find x such that poly(x) = 0.\n  Returns only ony zero point, even fi teher are many.\n  */\nconst findPolynomialZero2 = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\nconst solvePolynomial = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\n/*\n  xs is a list of polynoimals.\n  Finds x and y such that poly(x) = poly(y).\n  Returns [x, y]\n  */\nconst findPolynomialSolution = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return [0, 0];\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  let y = x - 1;\n  while(y < len - 1 && xs[y] == 0) {\n    y++;\n  }\n\n  return [x, y];\n}\n\n/*\n  Solves the given polynomial x^n + x^(n-1) +... + x + a in x.\n  Return value is a number.\n  */\nconst solvePolynomial1 = (xs) => {\n  let len = xs.length;\n  let coeff = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(len - index, len - index);\n  }, 0);\n\n  if(coeff == 0) {\n    return 0;\n  }\n  \n  let x = len - Math.sqrt(coeff);\n  while(x < len - 1 && xs[x] == 0) {\n    x++;\n  }\n\n  return x;\n}\n\n/*\n  Finds the number of distinct values in the given array.\n  Returns number of distinct values.\n  */\nconst findNumberOfDistinctValues = (xs) => {\n  let len = xs.length;\n  let count = 1;\n  let i = 0;\n  while"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lCopy = l.slice(0);\n  const sortedThird = l.slice(0);\n  for (let i = 0; i < l.length; i += 3) {\n    const index = lCopy.indexOf(l[i]);\n    sortedThird[index] = l[i];\n    lCopy.splice(index, 1);\n  }\n  return sortedThird;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const l = Array.isArray(l)? l : [l];\n  return l.reduce((u, v) => {\n    if (u.indexOf(v) === -1) {\n      u.push(v);\n    }\n    return u;\n  }, []);\n};\n\n/**\n  * Return a new list with duplicates removed\n  * @param l {Array} list to remove duplicates from\n  * @param key {Function} function used to compare values\n  * @returns {Array}\n  * @example\n  * // Remove duplicates in a list\n  * unique([1, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10])\n  * // => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst uniqueBy = (l, key) => {\n  const r = [];\n  for (let i = 0; i < l.length; i++) {\n    const k = key(l[i]);\n    if (r.indexOf(k) === -1) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n\nexport default { unique, uniqueBy };\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  12\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  12\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  15\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  16\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  16\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  18\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  18\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  20\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  22\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  24\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  25\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  27\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  28\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  29\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  32\n  >>> maxElement([-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,"}
{"task_id": "JavaScript/36", "prompt": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if(n % 10 === 0 && n % 11 === 0 && n % 13 === 0) {\n    return 'FizzBuzz'\n  } else if (n % 10 === 0) {\n    return 'Fizz'\n  } else if (n % 11 === 0) {\n    return 'Buzz'\n  } else {\n    return n\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    return l.sort((a, b) => {\n        if (a % 2 === 1 && b % 2 === 0) {\n            return a - b\n        } else if (b % 2 === 1 && a % 2 === 0) {\n            return b - a\n        } else {\n            return a - b\n        }\n    })\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the even indicise, while tis avlues ta the odd indicises are equal\n  to the values of the odd idnicies of l, but sorted.\n  >>> sortOdd([1, 2, 3])\n  [2, 3, 1]\n  >>> sortOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortOdd = (l) => {\n    return l.sort((a, b) => {\n        if (a % 2 === 0 && b % 2 === 1) {\n            return a - b\n        } else if (b % 2 === 0 && a % 2 === 1) {\n            return b - a\n        } else {\n            return a - b\n        }\n    })\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the even indicise, while tis avlues ta the odd indicises are equal\n  to the values of the odd idnicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEvenOdd = (l) => {\n    return l.sort((a, b) => {\n        if (a % 2 === 0 && b % 2 === 1) {\n            return a - b\n        } else if (b % 2 === 0 && a % 2 === 1) {\n            return b - a\n        } else {\n            return a - b\n        }\n    })\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the even indicise, while tis avlues ta the odd indicises are equal\n  to the values of the odd idnicies of l, but sorted.\n  >>> sortEvenOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEvenOdd([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortEvenOddInverse = (l) => {\n    return l.sort((a, b) => {\n        if (a % 2 === 0 && b % 2 === 1) {\n            return b - a\n        } else if (b % 2 === 0 && a % 2 === 1) {\n            return a - b\n        } else {\n            return b - a\n        }\n    })\n}\n\nexport {\n    sortEven,\n    sortOdd,\n    sortEvenOdd,\n    sortEvenOddInverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  let groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 1) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclicInverse = (s) => {\n  let groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  given a string s, returns a htree of numbers with the number of the\n  character in the string, followed by the character itself.\n  */\nconst htree = (s) => {\n  let htree = {};\n  for (let i = 0; i < s.length; i++) {\n    if (!htree[s[i]])\n      htree[s[i]] = 1;\n    else\n      htree[s[i]]++;\n  }\n  return htree;\n}\n\n/*\n  returns an array of all the words in the string s, each element\n  is a list of the characters in the word.\n  */\nconst words = (s) => {\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!=='') {\n      if (!words[s[i]])\n        words[s[i]] = [];\n      words[s[i]].push(s.substr(i, 1));\n    }\n  }\n  return words;\n}\n\nconst stripPunctuation = (s) => {\n  let clean = s.replace(/[^a-zA-Z0-9\\s]+/g, '');\n  let clean2 = clean.replace(/\\s+/g,'');\n  return clean2;\n}\n\nconst contains = (s, target) => {\n  if (s.includes(target))\n    return true;\n  else\n    return false;\n}\n\nconst contains_any = (s, target) => {\n  for (let i = 0; i < target.length; i++)\n    if (s.includes(target[i]))\n      return true;\n  return false;\n}\n\nconst is_in_list = (s, target) => {\n  for (let i = 0; i < target.length; i++)\n    if (s === target[i])\n      return true;\n  return false;\n}\n\n/*\n  returns a boolean that says if a given string is a number\n  */\nconst is_number = (s) => {\n  return /^[+-]?\\d+$/.test(s);\n}\n\nconst is_in_list = (s, target) => {\n  for (let i = 0; i < target.length; i++)\n    if (s === target[i])\n      return true;\n  return false;\n}\n\nconst is_in_list_of_dict = (s, target) => {\n  for (let i = 0; i < target.length; i++)\n    if (s === target[i])\n      return true;\n  return false;\n}\n\nconst is_in_list_of_dict_without_space = (s, target) => {\n  for (let i = 0; i < target.length; i++)\n    if (s === target[i].replace(/ /g, ''))\n      return true;\n  return false;\n}\n\n/*\n  returns an array of strings, given an array of strings.\n  */\nconst flatten = (s) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++)\n    result.push(s[i]);\n  return result;\n}\n\n/*\n  returns a list of words, given an array of strings.\n  */\nconst getWords = (s) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c!=='')\n      result.push(c);\n  }\n  return result;\n}\n\n/*\n  returns a list of words, given an array of strings.\n  */\nconst get_words_without_spaces = (s) => {\n  let result = [];\n  for (let i = 0; i < s.length; i++)\n    result.push(s[i].replace(/\\s+/g, ''));\n  return result;\n}\n\n/*\n  returns a list of strings, given an array of strings.\n  */\nconst get_words_without_punctuation = (s) => {\n  let result = [];\n  for ("}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return fib(n)\n   .map(f => {\n      if (isPrime(f)) {\n        return f\n      }\n    })\n   .sort((a, b) => a - b)\n}\n\nmodule.exports = primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const len = l.length\n    const odd = (len & 1) === 1\n    const even =!odd\n    let sum = 0\n    let prevSum = 0\n    for (let i = 0; i < len; i++) {\n        sum = l[i] + sum\n        if ((i & 1) === 0 && sum === 0) return even\n        if ((i & 1) === 1 && sum === 0) return odd\n        if ((i & 1) === 0 && prevSum === 0) return even\n        if ((i & 1) === 1 && prevSum === 0) return odd\n        prevSum = sum\n    }\n    return false\n}\n\n/*\n  sumFromOneToThree takes a list of integers as an input.\n  it returns the sum of the elements from the first element to the third,\n  or 0 if there is no element.\n\n  >>> sumFromOneToThree([1, 2, 3, 4, 5])\n  10\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6])\n  16\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7])\n  21\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8])\n  28\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  36\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  45\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  52\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  59\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  66\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  73\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  80\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  87\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  94\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  101\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  108\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  115\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  122\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  129\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  136\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  143\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  150\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  157\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  164\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  171\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  178\n  >>> sumFromOneToThree([1, 2, 3, 4, 5, 6, 7, 8, 9,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [[], []];\n  cars[0].push([1, 0]);\n  cars[1].push([n - 1, n - 1]);\n  for (let i = 0; i < n; i++) {\n    let prev = cars[1].pop();\n    cars[0].push(prev);\n    let curr = cars[0].pop();\n    cars[1].push(curr);\n  }\n  let numCollisions = 0;\n  cars[0].forEach((car, i) => {\n    cars[1].forEach((car2, j) => {\n      if (car[0] > car2[0] && car[1] < car2[1]) {\n        numCollisions += 1;\n      }\n    });\n  });\n  return numCollisions;\n};\n\nconst test = () => {\n  let n = 10;\n  console.log(carRaceCollision(n));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0\n  let isSum = (el) => {\n    sum += el\n    return sum === 0\n  }\n  let isNotSum = (el) => {\n    sum += el\n    return sum!== 0\n  }\n  let notIsSum = (el) => {\n    sum += el\n    return sum!== 0\n  }\n  return _.every(l, isSum) && _.some(l, isNotSum)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let output = 0;\n  while (x > 0) {\n    output += x % base;\n    x = Math.floor(x / base);\n  }\n  return output.toString();\n};\n\nconst main = () => {\n  const N = parseInt(prompt(\"Enter a number: \"));\n  const output = changeBase(N, base);\n  console.log(`The number after conversion is: ${output}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a * h) / 2;\n};\n\n/*\n  # -*- coding: utf-8 -*-\n  # Copyright (C) 2010, 2011, 2012 Sebastian Wiesner <lunaryorn@gmail.com>\n  #                     D. Richard Hipp <hippd@sourceforge.net>\n  # \n  # This library is free software; you can redistribute it and/or\n  # modify it under the terms of the GNU Lesser General Public\n  # License as published by the Free Software Foundation; either\n  # version 2.1 of the License, or (at your option) any later version.\n  # \n  # This library is distributed in the hope that it will be useful,\n  # but WITHOUT ANY WARRANTY; without even the implied warranty of\n  # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  # Lesser General Public License for more details.\n  # \n  # You should have received a copy of the GNU Lesser General Public\n  # License along with this library; if not, write to the Free Software\n  # Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n  #\n  # or visit http://www.gnu.org/licenses/lgpl-2.1.html\n  #\n  #\n  # For further information visit http://semanticscience.org/\n  \n  The MIT License\n  \n  Copyright (c) 2010, 2011, 2012 Sebastian Wiesner <lunaryorn@gmail.com>\n  Copyright (c) 2011, 2012 D. Richard Hipp <hippd@sourceforge.net>\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n  \n  The above copyright notice and this permission notice shall be included in\n  all copies or substantial portions of the Software.\n  \n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  THE SOFTWARE.\n*/\n\nexport default class {\n  /**\n   * @param {number} a\n   * @param {number} h\n   * @return {number}\n   */\n  static triangleArea (a, h) {\n    return Math.sqrt(a * h) / 2;\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n <= 2) return n;\n  return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n\n  const sorted = l.sort((a, b) => a - b)\n  if (l.length % 2 === 0) {\n    return (sorted[l.length / 2 - 1] + sorted[l.length / 2]) / 2\n  } else {\n    return sorted[l.length / 2]\n  }\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text || text.length < 2) {\n        return true;\n    }\n    let currentChar = text[0];\n    let reversed = text.split('').reverse().join('');\n    let reverseIndex = reversed.length - 1;\n    for (let i = 0; i < text.length - 1; i++) {\n        if (text[i]!== reversed[reverseIndex]) {\n            return false;\n        }\n        reverseIndex--;\n    }\n    return true;\n}\n\nmodule.exports = {\n    isPalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n %= p;\n  if (n < 0) {\n    n += p;\n  }\n  return n;\n};\n\n//#endregion\n\n//#region Test\n\nconst test_modp = (n, p, expected) => {\n  console.log(`modp(${n}, ${p}) = ${modp(n, p)}`);\n  assert.equal(modp(n, p), expected);\n};\n\ntest_modp(0, 2, 0);\ntest_modp(1, 2, 1);\ntest_modp(2, 2, 1);\ntest_modp(3, 2, 1);\ntest_modp(4, 2, 1);\ntest_modp(5, 2, 1);\ntest_modp(6, 2, 1);\ntest_modp(7, 2, 1);\ntest_modp(8, 2, 1);\ntest_modp(9, 2, 1);\ntest_modp(10, 2, 1);\ntest_modp(11, 2, 1);\ntest_modp(12, 2, 2);\ntest_modp(13, 2, 1);\ntest_modp(14, 2, 2);\ntest_modp(15, 2, 1);\ntest_modp(16, 2, 2);\ntest_modp(17, 2, 1);\ntest_modp(18, 2, 2);\ntest_modp(19, 2, 1);\ntest_modp(20, 2, 2);\ntest_modp(21, 2, 1);\ntest_modp(22, 2, 2);\ntest_modp(23, 2, 1);\ntest_modp(24, 2, 2);\ntest_modp(25, 2, 1);\ntest_modp(26, 2, 2);\ntest_modp(27, 2, 1);\ntest_modp(28, 2, 2);\ntest_modp(29, 2, 1);\ntest_modp(30, 2, 2);\ntest_modp(31, 2, 1);\ntest_modp(32, 2, 2);\ntest_modp(33, 2, 1);\ntest_modp(34, 2, 2);\ntest_modp(35, 2, 1);\ntest_modp(36, 2, 2);\ntest_modp(37, 2, 1);\ntest_modp(38, 2, 2);\ntest_modp(39, 2, 1);\ntest_modp(40, 2, 2);\ntest_modp(41, 2, 1);\ntest_modp(42, 2, 2);\ntest_modp(43, 2, 1);\ntest_modp(44, 2, 2);\ntest_modp(45, 2, 1);\ntest_modp(46, 2, 2);\ntest_modp(47, 2, 1);\ntest_modp(48, 2, 2);\ntest_modp(49, 2, 1);\ntest_modp(50, 2, 2);\ntest_modp(51, 2, 1);\ntest_modp(52, 2, 2);\ntest_modp(53, 2, 1);\ntest_modp(54, 2, 2);\ntest_modp(55, 2, 1);\ntest_modp(56, 2, 2);\ntest_modp(57, 2, 1);\ntest_modp(58, 2, 2);\ntest_modp(59, 2, 1);\ntest_modp(60, 2, 2);\ntest_modp(61, 2, 1);\ntest_modp(62, 2, 2);\ntest_modp(63, 2, 1);\ntest_modp(64, 2, 2);\ntest_modp(65, 2, 1);\ntest_modp(66, 2, 2);\ntest_modp(67, 2, 1);\ntest_modp(68, 2, 2);\ntest_modp(69, 2, 1);\ntest_modp(70, 2, 2);\ntest_modp(71, 2, 1);\ntest_modp(72, 2, 2);\ntest_modp(73, 2, 1);\ntest_modp(74, 2, 2);\ntest_modp(75, 2, 1);\ntest_modp(76, 2, 2);\ntest_modp(77, 2, 1);\ntest_modp(78, 2, 2);\ntest_modp(79, 2, 1);\ntest_modp(80, 2, 2);\ntest_modp(81, 2, 1);\ntest_modp(82, 2, 2);\ntest_modp(83, 2, 1);\ntest_modp(84, 2, 2);\ntest_modp(85, 2, 1);\ntest_modp(86, 2, 2);\ntest_modp(87, 2, 1);\ntest_modp(88, 2, 2);\ntest_modp(89, 2, 1);\ntest_modp(90, 2, 2);\ntest_modp(91, 2, 1);\ntest_modp(92, 2, 2);\ntest_modp(93, 2, 1);\ntest_modp(94, 2, 2);\ntest_modp(95, 2, 1);\ntest_modp(96, 2, 2);\ntest_modp(97, 2, 1);\ntest_modp(98, 2, 2);\ntest_modp(99, 2, 1);\ntest_modp(100, 2, 2);\ntest_modp(101, 2, 1);\ntest_modp(102, 2, 2);\ntest_modp(103, 2, 1);\ntest_modp(104, 2, 2);\ntest_modp(105, 2, 1);\ntest_modp(106, 2, 2);\ntest_modp(107, 2, 1);\ntest_modp(108, 2, 2);\ntest_modp(109, 2, 1);\ntest_modp(110, 2, 2);"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns the reversed string.\n  */\nconst reverse = (s) => {\n  let t = [];\n  for (let i = s.length - 1; i >= 0; i--) {\n    t.push(s.charAt(i));\n  }\n  return t.join(\"\");\n}\n\n/*\n  returns the encoded string by combining the characters with the shift.\n  */\nconst encode = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    result += encodeShift(s.charAt(i));\n  }\n  return result;\n}\n\n/*\n  takes as input string and returns the decoded string by combining the characters with the shift.\n  */\nconst decode = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    result += decodeShift(s.charAt(i));\n  }\n  return result;\n}\n\n/*\n  returns the reverse of the string encoded with encode_shift.\n  */\nconst decode_reverse = (s) => {\n  return reverse(decode(s));\n}\n\n/*\n  returns the string that encodes with encode_shift.\n  */\nconst encode_reverse = (s) => {\n  return reverse(encode(s));\n}\n\n/*\n  returns the string that decodes with decode_shift.\n  */\nconst decode_reverse_decode = (s) => {\n  return decode(reverse(decode_reverse(s)));\n}\n\n/*\n  returns the string that encodes with encode_shift.\n  */\nconst encode_reverse_decode = (s) => {\n  return decode(reverse(encode_reverse(s)));\n}\n\n/*\n  returns the string that decodes with decode_shift.\n  */\nconst encode_decode = (s) => {\n  return decode(encode(s));\n}\n\n/*\n  returns the string that encodes with encode_shift.\n  */\nconst decode_decode = (s) => {\n  return decode(decode_reverse(s));\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encode_reverse,\n  decode_reverse,\n  encode_reverse_decode,\n  decode_reverse_decode,\n  encode_decode,\n  decode_decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    let chars = [...text];\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    return chars.reduce((string, char) => {\n        if (vowels.indexOf(char) === -1) {\n            return string + char;\n        }\n        return string;\n    }, \"\");\n};\n\n//------------------------------------------------------------------------------\n\nconst main = () => {\n    let text = removeVowels('abcdef\\nghijklm');\n    console.log(`The text without vowels is: ${text}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(el => el < t);\n};\n\n// #############################################################################\n// ######     END OF MAIN PROGRAM                                              #####\n// #############################################################################\n\n// #############################################################################\n// ######     MAIN PROGRAM                                                     ######\n// #############################################################################\n\n// #############################################################################\n// ######     BEGIN MAIN PROGRAM                                               ######\n// #############################################################################\n\n//  [1, 2, 4, 10, 20, 50, 100]\nlet nums = [1, 2, 4, 10, 20, 50, 100];\n\nconst belowThreshold = (l, t) => {\n  return l.every(el => el < t);\n};\n\nconst belowThreshold2 = (l, t) => {\n  return l.every(el => el <= t);\n};\n\n// #############################################################################\n// ######     END MAIN PROGRAM                                                 ######\n// #############################################################################\n\n// #############################################################################\n// ######     BEGIN TEST FUNCTIONS                                             ######\n// #############################################################################\n\n// #############################################################################\n// ######     END TEST FUNCTIONS                                               ######\n// #############################################################################\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  4\n  Add two numbers x and y\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result : 0;\n};\n\nconsole.log(add2(2, 3));\nconsole.log(add2(5, 7));\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  >>> add2(2, 3)\n  5\n  >>> add2(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  const result = x + y;\n  return result > 0? result"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    return s0.split('').every((c, i) => {\n        return i >= s1.length || c === s1.charAt(i);\n    });\n};\n\n/*\n  Check if two words have the same words.\n  >>> sameWords('eabcd', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameWords('eabcd', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('eabcd', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  true\n  >>> sameWords('eabcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n    return s0.split('').every((c, i) => {\n        return i >= s1.length || s1.charAt(i) === c;\n    });\n};\n\n/*\n  Check if two words are the same.\n  >>> sameWords('eabcd', 'eabcd')\n  true\n  >>> sameWords('eabcd', 'eabcdzzzz')\n  false\n  >>> sameWords('eabcd', 'eabcdzzzzz')\n  false\n  >>> sameWords('eabcd', 'eabcdzzzzzz')\n  false\n  >>> sameWords('abcd', 'abcd')\n  true\n  >>> sameWords('abcd', 'abcdzzzz')\n  false\n  >>> sameWords('abcd', 'abcdzzzzz')\n  false\n  */\nconst sameWords2 = (s0, s1) => {\n    return s0 === s1;\n};\n\n/*\n  Check if two words have the same length.\n  >>> sameLength('eabcd', 'eabcd')\n  true\n  >>> sameLength('eabcd', 'eabcdzzzz')\n  false\n  >>> sameLength('eabcd', 'eabcdzzzzz')\n  false\n  >>> sameLength('abcd', 'abcd')\n  true\n  >>> sameLength('abcd', 'abcdzzzz')\n  false\n  >>> sameLength('abcd', 'abcdzzzzz')\n  false\n  */\nconst sameLength = (s0, s1) => {\n    return s0.length === s1.length;\n};\n\nconst sameWordsAndLength = (s0, s1) => {\n    return sameWords(s0, s1) && sameLength(s0, s1);\n};\n\n// check same\nconsole.log(sameChars('eabcd', 'dddzzzzzzzddeddabc'));\nconsole.log(sameWords('eabcd', 'dddzzzzzzzddeddabc'));\nconsole.log(sameWordsAndLength('eabcd', 'dddzzzzzzzddeddabc'));\n\n// check not same\nconsole.log(!sameChars('eabcd', 'dddzzzzzzzddeddabc'));\nconsole.log(!sameWords('eabcd', 'dddzzzzzzzddeddabc'));\nconsole.log(!sameWordsAndLength('eabcd', 'dddzzzzzzzddeddabc'));\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [],\n    bracketsLength = brackets.length,\n    open = 0,\n    i = 0,\n    openBrackets = 0;\n\n  while (i < bracketsLength) {\n    const char = brackets[i];\n    if (char === \"<\") {\n      stack.push(\"<\");\n      open++;\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false;\n      }\n      const top = stack[stack.length - 1];\n      if (top === \"<\") {\n        stack.pop();\n        open--;\n      } else if (top === \">\") {\n        stack.pop();\n      } else {\n        return false;\n      }\n    }\n    i++;\n  }\n\n  if (stack.length === 0) {\n    return true;\n  }\n\n  return false;\n};\n\n/*\n  Returns the string s with all the opening brackets replaced by \" \"\n  and all the closing brackets replaced by \" \"\n  Example:\n  >>> removeBrackets(\"<a>b</a>\")\n  'b'\n  >>> removeBrackets(\"<a>b</a>c\")\n  'bc'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>\")\n  'bc<a>d</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>\")\n  'bc<a>d</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e\")\n  'bc<a>d</a>e'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>\")\n  'bc<a>d</a>e<a>f</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>\")\n  'bc<a>d</a>e<a>f</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> removeBrackets(\"<a>b</a>c<a>d</a>e<a>f</a>g<a>h</a>\")\n  'bc<a>d</a>e<a>f</a>g<a>h</a>'\n  >>> remove"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let n = l.length\n  let m = 0\n  let prev = 0\n  let prev_val = l[0]\n  for (let i = 1; i < n; i++) {\n    if (l[i] > l[i - 1]) {\n      if (prev < m) {\n        return false\n      } else {\n        prev = m\n      }\n    } else if (l[i] < l[i - 1]) {\n      if (prev > m) {\n        return false\n      } else {\n        prev = m\n      }\n    }\n    prev_val = l[i]\n    m++\n  }\n  if (prev < m) {\n    return false\n  } else {\n    return true\n  }\n}\n\n/**\n  * Returns true if the list is a permutation.\n  * @param l\n  * @returns {boolean}\n  */\nconst isPermutation = (l) => {\n  let n = l.length\n  let m = 0\n  for (let i = 0; i < n; i++) {\n    if (l[i]!== l[l.indexOf(l[i])]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * Returns true if list is a permutation of the natural numbers.\n * @param l\n * @returns {boolean}\n */\nconst isPermutationOfNaturalNumbers = (l) => {\n  let i = 1\n  let j = 1\n  while (i < l.length) {\n    if (l[i]!== l[l.indexOf(i)]) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nmodule.exports = {\n  monotonic,\n  isPermutation,\n  isPermutationOfNaturalNumbers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.reduce((acc, item, i) => {\n    if (l2.indexOf(item)!== -1) {\n      acc.push(item)\n    }\n    return acc\n  }, [])\n}\n\n// test\ncommon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\ncommon([5, 3, 2, 8], [3, 2])\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let i = 2, p = 1, nPrime = 0, result = 1;\n  while (n > 1) {\n    while (n % i == 0) {\n      n = n / i;\n      if (p > result) {\n        result = p;\n      }\n      p = i;\n    }\n    if (nPrime == 0) {\n      nPrime = i;\n    }\n    i = i + 1;\n  }\n  return result;\n};\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return the number of primes in [2, n].\n  * Assume that n is an integer.\n  * \n  * @example\n  * largestPrimeFactorCount(1)\n  * //=> 0\n  * largestPrimeFactorCount(2)\n  * //=> 1\n  * largestPrimeFactorCount(3)\n  * //=> 2\n  * largestPrimeFactorCount(4)\n  * //=> 2\n  * largestPrimeFactorCount(5)\n  * //=> 3\n  * largestPrimeFactorCount(6)\n  * //=> 3\n  * largestPrimeFactorCount(7)\n  * //=> 3\n  * largestPrimeFactorCount(8)\n  * //=> 3\n  * largestPrimeFactorCount(9)\n  * //=> 4\n  * largestPrimeFactorCount(10)\n  * //=> 4\n  * largestPrimeFactorCount(11)\n  * //=> 4\n  * largestPrimeFactorCount(12)\n  * //=> 4\n  * largestPrimeFactorCount(13)\n  * //=> 5\n  * largestPrimeFactorCount(14)\n  * //=> 5\n  * largestPrimeFactorCount(15)\n  * //=> 5\n  * largestPrimeFactorCount(16)\n  * //=> 5\n  * largestPrimeFactorCount(17)\n  * //=> 5\n  * largestPrimeFactorCount(18)\n  * //=> 5\n  * largestPrimeFactorCount(19)\n  * //=> 6\n  * largestPrimeFactorCount(20)\n  * //=> 6\n  * largestPrimeFactorCount(21)\n  * //=> 6\n  * largestPrimeFactorCount(22)\n  * //=> 6\n  * largestPrimeFactorCount(23)\n  * //=> 6\n  * largestPrimeFactorCount(24)\n  * //=> 6\n  * largestPrimeFactorCount(25)\n  * //=> 6\n  * largestPrimeFactorCount(26)\n  * //=> 6\n  * largestPrimeFactorCount(27)\n  * //=> 6\n  * largestPrimeFactorCount(28)\n  * //=> 6\n  * largestPrimeFactorCount(29)\n  * //=> 7\n  * largestPrimeFactorCount(30)\n  * //=> 7\n  * largestPrimeFactorCount(31)\n  * //=> 7\n  * largestPrimeFactorCount(32)\n  * //=> 7\n  * largestPrimeFactorCount(33)\n  * //=> 7\n  * largestPrimeFactorCount(34)\n  * //=> 7\n  * largestPrimeFactorCount(35)\n  * //=> 7\n  * largestPrimeFactorCount(36)\n  * //=> 7\n  * largestPrimeFactorCount(37)\n  * //=> 7\n  * largestPrimeFactorCount(38)\n  * //=> 7\n  * largestPrimeFactorCount(39)\n  * //=> 8\n  * largestPrimeFactorCount(40)\n  * //=> 8\n  * largestPrimeFactorCount(41)\n  * //=> 8\n  * largestPrimeFactorCount(42)\n  * //=> 8\n  * largestPrimeFactorCount(43)\n  * //=> 8\n  * largestPrimeFactorCount(44)\n  * //=> 8\n  * largestPrimeFactorCount(45)\n  * //=> 8\n  * largestPrimeFactorCount(46)\n  * //=> 8\n  * largestPrimeFactorCount(47)\n  * //=> 8\n  * largestPrimeFactorCount(48)\n  * //=> 8\n  * largestPrimeFactorCount(49)\n  * //=> 8\n  * largestPrimeFactorCount(50)\n  * //=> 8\n  * largestPrimeFactorCount(51)\n  * //=> 8\n  * largestPrimeFactorCount(52)\n  * //=> 8\n  * largestPrimeFactorCount(53)\n  * //=> 8\n  * largestPrimeFactorCount(54)\n  * //=> 8\n  * largestPrimeFactorCount(55)\n  * //=> 8\n  * largestPrimeFactorCount(56)\n  * //=> 8\n  * largestPrimeFactorCount(57)\n  * //=> 8\n  * largestPrimeFactorCount(58)\n  * //=> 8\n  * largestPrimeFactorCount(59)\n  * //=> 9\n  * largestPrimeFactorCount(60)\n  * //=> 9\n  * largestPrimeFactorCount(61)\n  * //=> 9\n  * largestPrimeFactorCount(62)\n  * //=> 9\n  * largestPrimeFactorCount(63)\n  * //=> 9\n  * largestPrimeFactorCount(64)\n  * //=> 9\n  * largestPrimeFactorCount(65)\n  * //=> 9\n  * largestPrimeFactorCount(66)\n  * //=> 9\n  * largestPrimeFactorCount(67)\n  * //=> 9\n  * largestPrimeFactorCount(68)\n  * //=> 9\n  * largestPrimeFactorCount(69)\n  * //=> 9\n  * largestPrimeFactorCount(70)\n  * //=> 9\n  * largestPrimeFactorCount(71)\n  * //=> 9\n  * largestPrimeFactorCount(72)\n  * //=> 9\n  * largestPrimeFactorCount(73)\n  * //=> 9\n  * largestPrimeFactorCount(74)\n  * //=> 9\n  * largestPrimeFactorCount(75)\n  * //=> 9\n  * largestPrimeFactorCount(76)\n  * //=> 9\n  * largestPrimeFactorCount(77)\n  * //=> 9\n  * largestPrimeFactorCount(78)\n  * //=> 9\n  * largestPrimeFactorCount(79)\n  * //=> 10\n  * largestPrimeFactorCount(80)\n  * //=> 10\n  * largestPrimeFactorCount(81)\n  * //=> 10\n  * largestPrimeFactorCount(82)\n  "}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN = (n) => {\n    let count = 1;\n    for (let i = 2; i <= n; i++) {\n        count += 1;\n    }\n    return count;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN2 = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        count += 1;\n    }\n    return count;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN3 = (n) => {\n    let count = 0;\n    let i = 1;\n    while (i <= n) {\n        count += 1;\n        i += 1;\n    }\n    return count;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN4 = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2 === 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN5 = (n) => {\n    let count = 0;\n    let i = 1;\n    while (i <= n) {\n        if (i % 2 === 0) {\n            count += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\n/**\n  * countToN is a function that counts to n.\n  >>> countToN(30)\n  15\n  >>> countToN(100)\n  50\n  >>> countToN(5)\n  1\n  >>> countToN(10)\n  5\n  >>> countToN(1)\n  1\n  */\nconst countToN6 = (n) => {\n    let count = 0;\n    let i = 1;\n    while (i <= n) {\n        if (i % 2!== 0) {\n            count += 1;\n        }\n        i += 1;\n    }\n    return count;\n}\n\nmodule.exports = {\n    sumToN,\n    countToN,\n    countToN2,\n    countToN3,\n    countToN4,\n    countToN5,\n    countToN6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let bracketStack = [];\n    let bracketCounter = 0;\n\n    for(let i = 0; i < brackets.length; i++){\n        bracketStack.push(brackets[i]);\n        if(bracketStack.length > 1){\n            if(bracketStack[bracketStack.length - 1] === \"(\" && bracketStack[bracketStack.length - 2] === \")\"){\n                bracketStack.pop();\n                bracketStack.pop();\n                bracketCounter--;\n            }\n        }\n    }\n    return (bracketStack.length === 0 && bracketCounter === 0);\n}\n\n// 5.2\n// Find the minimum path sum in the provided matrix\nconst findMinimumPathSum = (matrix) => {\n    let sum = 0;\n    for(let i = 0; i < matrix.length; i++){\n        for(let j = 0; j < matrix[i].length; j++){\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}\n\n// 5.3\n// Find the maximum path sum in the provided matrix\nconst findMaximumPathSum = (matrix) => {\n    let sum = 0;\n    for(let i = 0; i < matrix.length; i++){\n        for(let j = 0; j < matrix[i].length; j++){\n            sum += matrix[i][j];\n        }\n    }\n    return sum;\n}\n\n// 5.4\n// Find the longest path in the provided matrix\nconst findLongestPath = (matrix) => {\n    let longest = 0;\n    let i = 0;\n    let j = 0;\n\n    while(i < matrix.length && j < matrix[i].length){\n        if(matrix[i][j] > longest){\n            longest = matrix[i][j];\n        }\n        if(matrix[i][j] < longest){\n            longest = matrix[i][j];\n            i++;\n            j++;\n        }\n        else{\n            j++;\n        }\n    }\n    return longest;\n}\n\n// 5.5\n// Find the number of longest paths in the provided matrix\nconst findLongestPathCount = (matrix) => {\n    let longest = 0;\n    let i = 0;\n    let j = 0;\n\n    while(i < matrix.length && j < matrix[i].length){\n        if(matrix[i][j] > longest){\n            longest = matrix[i][j];\n        }\n        if(matrix[i][j] < longest){\n            longest = matrix[i][j];\n            i++;\n            j++;\n        }\n        else{\n            j++;\n        }\n    }\n    return i;\n}\n\n// 5.6\n// Find the row index of the maximum path sum in the provided matrix\nconst findMaxRow = (matrix) => {\n    let max = 0;\n    let row = 0;\n    for(let i = 0; i < matrix.length; i++){\n        if(matrix[i][0] > max){\n            max = matrix[i][0];\n            row = i;\n        }\n    }\n    return row;\n}\n\n// 5.7\n// Find the column index of the maximum path sum in the provided matrix\nconst findMaxColumn = (matrix) => {\n    let max = 0;\n    let column = 0;\n    for(let i = 0; i < matrix.length; i++){\n        if(matrix[0][i] > max){\n            max = matrix[0][i];\n            column = i;\n        }\n    }\n    return column;\n}\n\n// 5.8\n// Find the maximum path sum in the provided matrix\nconst findMaxPathSum = (matrix) => {\n    let max = 0;\n    let i = 0;\n    let j = 0;\n    while(i < matrix.length && j < matrix[i].length){\n        if(matrix[i][j] > max){\n            max = matrix[i][j];\n            i++;\n            j++;\n        }\n        else{\n            j++;\n        }\n    }\n    return max;\n}\n\n// 5.9\n// Find the maximum path sum in the provided matrix\nconst findMaxPathSum = (matrix) => {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let rowSum = 0;\n    let columnSum = 0;\n\n    while(i < matrix.length && j < matrix[i].length){\n        rowSum += matrix[i][j];\n        columnSum += matrix[j][i];\n        if(rowSum > columnSum){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return rowSum;\n}\n\n// 5.10\n// Find the maximum path sum in the provided matrix\nconst findMaxPathSum = (matrix) => {\n    let sum = 0;\n    let rowSum = 0;\n    let columnSum = 0;\n    let i = 0;\n    let j = 0;\n\n    while(i < matrix.length && j < matrix[i].length){\n        rowSum += matrix[i][j];\n        columnSum += matrix[j][i];\n        if(rowSum > columnSum){\n            i++;\n        }\n        else{\n            j++;\n        }\n    }\n    return columnSum;\n}\n\n// 5.11\n// Find the maximum path sum in the provided matrix\nconst findMaxPathSum = (matrix) => {\n    let sum = 0;\n    let i = 0;\n    let j = 0;\n    let max = 0;\n    let rowSum = 0;\n    let columnSum = 0;\n\n    while(i < matrix.length && j < matrix[i].length){\n        rowSum += matrix[i][j];\n        columnSum += matrix[j][i];\n        if(rowSum > columnSum){\n            max = rowSum;\n            i++;\n        }\n        else{\n            max = columnSum;\n            "}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": false, "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 0) {\n    return []\n  }\n  if (xs.length === 1) {\n    return xs\n  }\n  const result = [xs[0]]\n  let i = 1\n  while (i < xs.length) {\n    result.push(xs[i] * (i - 1))\n    i += 1\n  }\n  return result\n}\n\nconst findMax = (xs) => {\n  const max = xs[0]\n  let i = 1\n  while (i < xs.length) {\n    if (xs[i] > max) {\n      max = xs[i]\n    }\n    i += 1\n  }\n  return max\n}\n\nconst findMin = (xs) => {\n  const min = xs[0]\n  let i = 1\n  while (i < xs.length) {\n    if (xs[i] < min) {\n      min = xs[i]\n    }\n    i += 1\n  }\n  return min\n}\n\nconst findMedian = (xs) => {\n  const max = findMax(xs)\n  const min = findMin(xs)\n  let half = Math.floor(xs.length / 2)\n  return xs[half]\n}\n\nconst add = (xs, ys) => {\n  let i = 0\n  while (i < xs.length) {\n    xs[i] += ys[i]\n    i += 1\n  }\n  return xs\n}\n\nconst sub = (xs, ys) => {\n  let i = 0\n  while (i < xs.length) {\n    xs[i] -= ys[i]\n    i += 1\n  }\n  return xs\n}\n\nconst mul = (xs, ys) => {\n  let i = 0\n  while (i < xs.length) {\n    xs[i] *= ys[i]\n    i += 1\n  }\n  return xs\n}\n\nconst div = (xs, ys) => {\n  let i = 0\n  while (i < xs.length) {\n    xs[i] /= ys[i]\n    i += 1\n  }\n  return xs\n}\n\nconst pow = (xs, ys) => {\n  let i = 0\n  while (i < xs.length) {\n    xs[i] = xs[i] ** ys[i]\n    i += 1\n  }\n  return xs\n}\n\nconst sum = (xs) => {\n  let sum = 0\n  while (i < xs.length) {\n    sum += xs[i]\n    i += 1\n  }\n  return sum\n}\n\nconst sort = (xs) => {\n  let sorted = xs.slice()\n  sorted.sort((a, b) => a - b)\n  return sorted\n}\n\nconst reverse = (xs) => {\n  let reversed = xs.slice()\n  reversed.reverse()\n  return reversed\n}\n\nconst multiply = (a, b) => {\n  let product = 0\n  for (let i = 0; i < a.length; i++) {\n    product += a[i] * b[i]\n  }\n  return product\n}\n\nconst sum = (a, b) => {\n  return a + b\n}\n\nconst average = (xs) => {\n  const sum = sum(xs)\n  const n = xs.length\n  return sum / n\n}\n\nconst product = (xs) => {\n  let product = 1\n  while (i < xs.length) {\n    product *= xs[i]\n    i += 1\n  }\n  return product\n}\n\nconst sum = (xs) => {\n  let sum = 0\n  while (i < xs.length) {\n    sum += xs[i]\n    i += 1\n  }\n  return sum\n}\n\nconst sum = (xs) => {\n  let sum = 0\n  while (i < xs.length) {\n    sum += xs[i]\n    i += 1\n  }\n  return sum\n}\n\nconst reverse = (xs) => {\n  let reversed = xs.slice()\n  reversed.reverse()\n  return reversed\n}\n\nmodule.exports = {\n  add,\n  sub,\n  mul,\n  div,\n  pow,\n  sum,\n  average,\n  sort,\n  reverse,\n  multiply,\n  sum,\n  findMax,\n  findMin,\n  findMedian,\n  add,\n  sub,\n  mul,\n  div,\n  pow,\n  sum,\n  average,\n  reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length - 1; i++){\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){\n      count++;\n    }\n  }\n  return count;\n}\n\n//Test\nlet s = \"abcde\";\nconsole.log(vowelsCount(s));\nlet s = \"ACEDY\";\nconsole.log(vowelsCount(s));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let x_str = String(x)\n  x_str = x_str.split('').reverse().join('')\n  let result = \"\"\n  while (shift-- > 0) {\n    result += x_str.charAt(0)\n    x_str = x_str.slice(1)\n  }\n  return result\n}\n\n/*\n  Compute the number of bits used to represent a number of bytes.\n  >>> numberOfBits(4)\n  4\n  >>> numberOfBits(10)\n  10\n  >>> numberOfBits(12)\n  12\n  >>> numberOfBits(1024)\n  12\n  >>> numberOfBits(12345)\n  16\n  >>> numberOfBits(1234567)\n  17\n  >>> numberOfBits(123456789)\n  18\n  >>> numberOfBits(123456789012345)\n  20\n  >>> numberOfBits(12345678901234567)\n  21\n  >>> numberOfBits(1234567890123456789)\n  22\n  >>> numberOfBits(1234567890123456789012345)\n  23\n  >>> numberOfBits(12345678901234567890123456789)\n  24\n  >>> numberOfBits(12345678901234567890123456789012345)\n  25\n  >>> numberOfBits(9876543210987654321098765432109876543210)\n  28\n  >>> numberOfBits(98765432109876543210987654321098765432109876543210)\n  29\n  >>> numberOfBits(987654321098765432109876543210987654321098765432109876543210)\n  30\n  >>> numberOfBits(9876543210987654321098765432109876543210987654321098765432109876543210)\n  31\n  >>> numberOfBits(98765432109876543210987654321098765432109876543210987654321098765432109876543210)\n  32\n  >>> numberOfBits(0)\n  0\n  >>> numberOfBits(1)\n  1\n  >>> numberOfBits(2)\n  2\n  >>> numberOfBits(3)\n  2\n  >>> numberOfBits(4)\n  2\n  >>> numberOfBits(5)\n  3\n  >>> numberOfBits(6)\n  3\n  >>> numberOfBits(7)\n  3\n  >>> numberOfBits(8)\n  3\n  >>> numberOfBits(9)\n  4\n  >>> numberOfBits(10)\n  4\n  >>> numberOfBits(11)\n  4\n  >>> numberOfBits(12)\n  4\n  >>> numberOfBits(13)\n  5\n  >>> numberOfBits(14)\n  5\n  >>> numberOfBits(15)\n  5\n  >>> numberOfBits(16)\n  5\n  >>> numberOfBits(17)\n  6\n  >>> numberOfBits(18)\n  6\n  >>> numberOfBits(19)\n  6\n  >>> numberOfBits(20)\n  6\n  >>> numberOfBits(21)\n  7\n  >>> numberOfBits(22)\n  7\n  >>> numberOfBits(23)\n  7\n  >>> numberOfBits(24)\n  7\n  >>> numberOfBits(25)\n  8\n  >>> numberOfBits(26)\n  8\n  >>> numberOfBits(27)\n  8\n  >>> numberOfBits(28)\n  8\n  >>> numberOfBits(29)\n  9\n  >>> numberOfBits(30)\n  9\n  >>> numberOfBits(31)\n  9\n  >>> numberOfBits(32)\n  9\n  >>> numberOfBits(33)\n  10\n  >>> numberOfBits(34)\n  10\n  >>> numberOfBits(35)\n  10\n  >>> numberOfBits(36)\n  10\n  >>> numberOfBits(37)\n  11\n  >>> numberOfBits(38)\n  11\n  >>> numberOfBits(39)\n  11\n  >>> numberOfBits(40)\n  11\n  >>> numberOfBits(41)\n  12\n  >>> numberOfBits(42)\n  12\n  >>> numberOfBits(43)\n  12\n  >>> numberOfBits(44)\n  12\n  >>> numberOfBits(45)\n  12\n  >>> numberOfBits(46)\n  12\n  >>> numberOfBits(47)\n  13\n  >>> numberOfBits(48)\n  13\n  >>> numberOfBits(49)\n  13\n  >>> numberOfBits(50)\n  13\n  >>> numberOfBits(51)\n  13\n  >>> numberOfBits(52)\n  13\n  >>> numberOfBits(53)\n  14\n  >>> numberOfBits(54)\n  14\n  >>> numberOfBits(55)\n  14\n  >>> numberOfBits(56)\n  14\n  >>> numberOfBits(57)\n  14\n  >>> numberOfBits(58)\n  14\n  >>> numberOfBits(59)\n  15\n  >>> numberOfBits(60)\n  15\n  >>> numberOfBits(61)\n  15\n  >>> numberOfBits(62)\n  15\n  >>> numberOfBits(63)\n  15\n  >>> numberOfBits(64)\n  15\n  >>> numberOfBits(65)\n  16\n  >>> numberOfBits(66)\n  16\n  >>> numberOfBits(67)\n  16\n  >>> numberOfBits(68)\n  16\n  >>> numberOfBits(69)\n  16\n  >>> numberOfBits(70)\n  16\n  >>> numberOfBits("}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s[i].charCodeAt(0);\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n    const {apples, oranges} = s.split(' ').map(Number)\n    return fruits(n, apples, oranges)\n}\n\nconst fruits = (n, apples, oranges) => {\n    if (n <= apples) {\n        return apples\n    } else {\n        return fruits(n - apples, apples, oranges)\n    }\n}\n\nfruitDistribution(\"0 apples and 1 oranges\",3)\n\nfruitDistribution(\"2 apples adn 3 oranges\",100)\n\nfruitDistribution(\"100 apples and 1 oranges\",120)<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const even = arr.filter((elem) => {\n    return elem % 2 === 0;\n  });\n  const odd = arr.filter((elem) => {\n    return elem % 2 === 1;\n  });\n  let result = [];\n  if (odd.length > 0) {\n    result = [odd[0], odd.indexOf(odd[0])];\n  } else if (even.length > 0) {\n    result = [even[0], even.indexOf(even[0])];\n  }\n  return result;\n};\n\n// __________________________________________\n// Test\n// Your task is to implement a test function that can\n// verify the correctness of your solution.\n// ------------------------------------------------\n\nconst arr = [1,2,3,4,5];\n\nconst test = () => {\n  const result = pluck(arr);\n  console.log(`The first node from the branch is ${result[0]}, with index ${result[1]}`);\n};\n\n// __________________________________________\n// Refactoring\n// Check the code, then check the code again.\n// This time, try to do the refactoring by your own.\n// Try to do it in multiple lines.\n// Check the test to see if your code still works.\n// ------------------------------------------------\n\nfunction pluck(arr) {\n  const even = arr.filter((elem) => {\n    return elem % 2 === 0;\n  });\n  const odd = arr.filter((elem) => {\n    return elem % 2 === 1;\n  });\n  let result = [];\n  if (odd.length > 0) {\n    result = [odd[0], odd.indexOf(odd[0])];\n  } else if (even.length > 0) {\n    result = [even[0], even.indexOf(even[0])];\n  }\n  return result;\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0;\n  let max = -1;\n  while (i < lst.length) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n    }\n    i += 1;\n  }\n  return max;\n};\n\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst || lst.length === 0) return lst\n  const sortList = []\n  let min = Number.MAX_SAFE_INTEGER\n  for (const element of lst) {\n    min = Math.min(min, element)\n  }\n  for (const element of lst) {\n    sortList.push(min - element)\n  }\n  return sortList\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const area = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - 2 * Math.pow(s, 2));\n  return area;\n};\n\nconst triangleArea = (a, b, c)"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let max = 0\n  let count = 0\n  const list = q.reverse().concat(q)\n  for (let i = 0; i < list.length; i++) {\n    count += list[i]\n    max = Math.max(max, count)\n  }\n  return max <= w\n}\n\nconsole.log(willItFly([3, 2, 3], 1))\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3, 2, 3], 5))\nconsole.log(willItFly([3], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const array = arr.slice(0);\n  const length = array.length;\n  let count = 0;\n\n  while (true) {\n    if (array.every((i, index) => {\n      return i === array[index - 1];\n    })) {\n      return count;\n    }\n    count++;\n    const temp = array.map((item, index) => {\n      if (index < length - 1) {\n        array[index] = array[index + 1];\n      } else {\n        array[index] = 0;\n      }\n      return item;\n    });\n    array = temp;\n  }\n};\n\nmodule.exports = smallestChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let total = 0;\n  let match = true;\n\n  lst1.forEach(v => {\n    lst2.forEach(u => {\n      if (v === u) {\n        total += v.length;\n        match = false;\n      }\n    });\n  });\n\n  if (match) {\n    return lst1;\n  } else {\n    return lst1.concat(lst2.filter(v => v.length < total));\n  }\n};\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    return isPrime(a) && a % 2 === 0 && isPrime(a / 2);\n}\n\n//console.log(isMultiplyPrime(20));\n//console.log(isMultiplyPrime(10));\n//console.log(isMultiplyPrime(5));\n//console.log(isMultiplyPrime(15));\n//console.log(isMultiplyPrime(25));\n\nfunction sum(x, y) {\n    return x + y;\n}\n\n//console.log(sum(2, 3));\n//console.log(sum(4, 5));\n//console.log(sum(10, 15));\n//console.log(sum(10, 25));\n//console.log(sum(30, 45));\n//console.log(sum(60, 120));\n//console.log(sum(90, 210));\n\nfunction isMultiply(x, y) {\n    return x * y === x * y;\n}\n\n//console.log(isMultiply(2, 3));\n//console.log(isMultiply(4, 5));\n//console.log(isMultiply(10, 15));\n//console.log(isMultiply(10, 25));\n//console.log(isMultiply(30, 45));\n//console.log(isMultiply(60, 120));\n//console.log(isMultiply(90, 210));\n\nfunction isDivide(x, y) {\n    return x % y === 0;\n}\n\n//console.log(isDivide(2, 3));\n//console.log(isDivide(4, 5));\n//console.log(isDivide(10, 15));\n//console.log(isDivide(10, 25));\n//console.log(isDivide(30, 45));\n//console.log(isDivide(60, 120));\n//console.log(isDivide(90, 210));\n\nfunction isPow(x, y) {\n    return x === Math.pow(x, y);\n}\n\n//console.log(isPow(2, 3));\n//console.log(isPow(4, 5));\n//console.log(isPow(10, 15));\n//console.log(isPow(10, 25));\n//console.log(isPow(30, 45));\n//console.log(isPow(60, 120));\n//console.log(isPow(90, 210));\n\nfunction isGreaterThan(x, y) {\n    return x > y;\n}\n\n//console.log(isGreaterThan(2, 3));\n//console.log(isGreaterThan(4, 5));\n//console.log(isGreaterThan(10, 15));\n//console.log(isGreaterThan(10, 25));\n//console.log(isGreaterThan(30, 45));\n//console.log(isGreaterThan(60, 120));\n//console.log(isGreaterThan(90, 210));\n\nfunction isLessThan(x, y) {\n    return x < y;\n}\n\n//console.log(isLessThan(2, 3));\n//console.log(isLessThan(4, 5));\n//console.log(isLessThan(10, 15));\n//console.log(isLessThan(10, 25));\n//console.log(isLessThan(30, 45));\n//console.log(isLessThan(60, 120));\n//console.log(isLessThan(90, 210));\n\nfunction isGreaterOrEqualThan(x, y) {\n    return x >= y;\n}\n\n//console.log(isGreaterOrEqualThan(2, 3));\n//console.log(isGreaterOrEqualThan(4, 5));\n//console.log(isGreaterOrEqualThan(10, 15));\n//console.log(isGreaterOrEqualThan(10, 25));\n//console.log(isGreaterOrEqualThan(30, 45));\n//console.log(isGreaterOrEqualThan(60, 120));\n//console.log(isGreaterOrEqualThan(90, 210));\n\nfunction isLessOrEqualThan(x, y) {\n    return x <= y;\n}\n\n//console.log(isLessOrEqualThan(2, 3));\n//console.log(isLessOrEqualThan(4, 5));\n//console.log(isLessOrEqualThan(10, 15));\n//console.log(isLessOrEqualThan(10, 25));\n//console.log(isLessOrEqualThan(30, 45));\n//console.log(isLessOrEqualThan(60, 120));\n//console.log(isLessOrEqualThan(90, 210));\n\nfunction isBetween(x, y) {\n    return x > y && x < y;\n}\n\n//console.log(isBetween(2, 3));\n//console.log(isBetween(4, 5));\n//console.log(isBetween(10, 15));\n//console.log(isBetween(10, 25));\n//console.log(isBetween(30, 45));\n//console.log(isBetween(60, 120));\n//console.log(isBetween(90, 210));\n\nfunction isIn(x, y) {\n    return x === y || isBetween(x, y);\n}\n\n//console.log(isIn(2, 3));\n//console.log(isIn(4, 5));\n//console.log(isIn(10, 15));\n//console.log(isIn(10, 25));\n//console.log(isIn(30, 45));\n//console.log(isIn(60, 120));\n//console.log(isIn(90, 210));\n\nfunction isNotIn(x, y) {\n    return!isIn(x, y);\n}\n\n//console.log(isNotIn(2, 3));\n//console.log(isNotIn(4, 5));\n//console.log(is"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": false, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return (x & n) === x\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let [ n, c ] = a.toString().split(\"\");\n    if (c === \"\") {\n        return true;\n    }\n    let [ i, j ] = c.split(\"\");\n    for (let k = i; k <= j; k++) {\n        if (k === i) {\n            continue;\n        }\n        if (k === j) {\n            return false;\n        }\n        if (k * k > n) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst n = parseInt(console.input());\n\nconsole.print(iscube(n));<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hexArray = \"0123456789ABCDEF\";\n  const key = [];\n  for (let i = 0; i < num.length; i++) {\n    const index = num[i];\n    key.push(hexArray.indexOf(index));\n  }\n  return key;\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst primeNumbers = (num) => {\n  const primes = [];\n  for (let i = 2; i <= num; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}\n\nconst primeNumber = (num) => {\n  const primes = primeNumbers(num);\n  return primes[primes.length - 1];\n}\n\nconst solution = (num) => {\n  const key = hexKey(num);\n  return primeNumber(key[key.length - 2]) + primeNumber(key[key.length - 1]);\n}\n\nconsole.log(solution(\"ABED1A33\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    const binary = []\n    for (let i = 0; i < decimal; i++) {\n        binary.push(parseInt(decimal % 2))\n        decimal = Math.floor(decimal / 2)\n    }\n    return binary.reverse().join(\"\") + \"db\"\n}\n\nconst binaryToDecimal = (binary) => {\n    const decimal = 0\n    for (let i = 0; i < binary.length; i++) {\n        decimal += parseInt(binary[i])\n        if (i < binary.length - 1) {\n            decimal += 2 * parseInt(binary[i + 1])\n        }\n    }\n    return decimal\n}\n\nconst toBinary = (number) => {\n    return decimalToBinary(number)\n}\n\nconst toDecimal = (binary) => {\n    return binaryToDecimal(binary)\n}\n\nconst toDecimalToBinary = (number) => {\n    return decimalToBinary(toDecimal(number))\n}\n\nconst toBinaryToDecimal = (binary) => {\n    return binaryToDecimal(toBinary(binary))\n}\n\nconst isNumber = (str) => {\n    return /^(0|1){1}$/.test(str)\n}\n\nconst isValidNumber = (number) => {\n    return typeof number === \"number\" && number > 0 && number < 1e7\n}\n\nconst isValidBinary = (binary) => {\n    return binary.length > 0 && binary.length < 128\n}\n\nconst toNumber = (str) => {\n    return parseFloat(str)\n}\n\nconst isValidString = (str) => {\n    return typeof str === \"string\" && str.length > 0\n}\n\nconst isValidStringBinary = (str) => {\n    return isValidString(str) && str.length % 2 === 0\n}\n\nconst isValidStringDecimal = (str) => {\n    return isValidString(str) && str.length % 2 === 1\n}\n\nconst isValidBinaryString = (str) => {\n    return isValidBinary(str) && isValidString(str)\n}\n\nconst isValidBinaryStringDecimal = (str) => {\n    return isValidBinary(str) && isValidStringDecimal(str)\n}\n\nconst numberToBinary = (number) => {\n    return toBinary(number)\n}\n\nconst numberToDecimal = (number) => {\n    return toDecimal(number)\n}\n\nconst binaryToNumber = (binary) => {\n    return toNumber(binary)\n}\n\nconst binaryToDecimal = (binary) => {\n    return toDecimal(binary)\n}\n\nconst numberToBinaryToDecimal = (number) => {\n    return toDecimalToBinary(number)\n}\n\nconst binaryToNumberToDecimal = (binary) => {\n    return binaryToDecimal(binary)\n}\n\nconst toBinaryToNumber = (binary) => {\n    return binaryToNumber(toBinary(binary))\n}\n\nconst toNumberToBinary = (number) => {\n    return toBinary(numberToDecimal(number))\n}\n\nconst numberToString = (number) => {\n    return number.toString()\n}\n\nconst binaryToString = (binary) => {\n    return binary.toString()\n}\n\nconst binaryToStringDecimal = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringBinary = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringDecimalToBinary = (binary) => {\n    return binaryToString(binary)\n}\n\nconst stringToBinary = (str) => {\n    return str.split(\"\").map(Number)\n}\n\nconst stringToBinaryDecimal = (str) => {\n    return stringToBinary(str)\n}\n\nconst stringToBinaryBinary = (str) => {\n    return stringToBinary(str)\n}\n\nconst stringToBinaryDecimalToBinary = (str) => {\n    return stringToBinary(str)\n}\n\nconst stringToDecimal = (str) => {\n    return toDecimal(stringToBinary(str))\n}\n\nconst stringToDecimalToBinary = (str) => {\n    return stringToBinaryDecimal(str)\n}\n\nconst stringToDecimalToBinaryBinary = (str) => {\n    return stringToBinaryDecimal(str)\n}\n\nconst stringToBinaryToDecimal = (str) => {\n    return stringToBinaryDecimal(str)\n}\n\nconst stringToBinaryToDecimalToBinary = (str) => {\n    return stringToBinaryDecimal(str)\n}\n\nconst stringToBinaryToDecimalBinary = (str) => {\n    return stringToBinaryDecimal(str)\n}\n\nconst stringToNumber = (str) => {\n    return toNumber(stringToBinary(str))\n}\n\nconst numberToBinary = (number) => {\n    return numberToBinary(number)\n}\n\nconst numberToString = (number) => {\n    return number.toString()\n}\n\nconst binaryToStringBinary = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringDecimal = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringBinaryToDecimal = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringDecimalToBinary = (binary) => {\n    return binaryToString(binary)\n}\n\nconst binaryToStringDecimalToBinaryBinary = (binary)"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let arr = s.split(\"\")\n  let result = true\n  let len = arr.length\n  let i = 0\n  while(result && i < len){\n    let current = arr[i]\n    let j = i + 1\n    let k = i + 2\n    while(j < len && k < len){\n      let current_ = arr[j]\n      let next = arr[k]\n      if(current + next === current_ + next){\n        j++\n        k++\n      }else{\n        if(k - i === 2){\n          result = false\n          break\n        }\n        i++\n      }\n    }\n    if(i === len){\n      result = true\n      break\n    }\n    i++\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const average = grades.reduce((a, b) => (a + b)) / grades.length;\n  const gradesReverse = grades.reverse();\n  const gradesReverseLength = gradesReverse.length;\n  const index = gradesReverse.findIndex((grade) => {\n    return grade > average;\n  });\n  const index2 = gradesReverse.findIndex((grade) => {\n    return grade < average;\n  });\n\n  const grade = index === -1? gradesReverse[index2] : gradesReverse[index];\n\n  return grade.split('.').map(Number);\n};\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 0) {\n    return false;\n  }\n  let number = parseInt(string, 10);\n  return number >= 2 && number % 1 === 0 && number!== 1 && number!== 4;\n};\n\nmodule.exports = primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n    let s = \"\";\n    for (let i = 1; i <= n; i++) {\n        s += i;\n    }\n    let p = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i) == \"1\") {\n            p++;\n        }\n    }\n    return p;\n};\n\nconsole.log(startsOneEnds(1));\nconsole.log(startsOneEnds(7));\nconsole.log(startsOneEnds(19));\nconsole.log(startsOneEnds(26));\nconsole.log(startsOneEnds(39));\nconsole.log(startsOneEnds(50));\nconsole.log(startsOneEnds(100));\nconsole.log(startsOneEnds(101));\nconsole.log(startsOneEnds(199));\nconsole.log(startsOneEnds(200));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let count = 0;\n  let i = N;\n\n  while(i > 0) {\n    sum += i % 2;\n    count += 1;\n    i = i / 2;\n  }\n  return count + \" \" + sum;\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    var sum = 0;\n    var arr = [];\n    lst.forEach((element) => {\n        if (element % 2 === 1) {\n            arr.push(element);\n        }\n    })\n    return arr;\n}\n\nvar lst = add([4, 2, 6, 7]);\nconsole.log(lst);\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s.split('').map(ch => {\n    if (ch.length === 1) {\n      return ch\n    }\n    let ch_ = ch.split('')\n    ch_.sort(function (a, b) {\n      return a.charCodeAt(0) - b.charCodeAt(0)\n    })\n    let c = ch_.join('')\n    return c\n  })\n}\n\nconst shuffle = (s) => {\n  return s.split('').map(ch => {\n    if (ch.length === 1) {\n      return ch\n    }\n    let ch_ = ch.split('')\n    ch_.sort(function (a, b) {\n      return Math.random() - 0.5\n    })\n    let c = ch_.join('')\n    return c\n  })\n}\n\nconst isShuffle = (s) => {\n  return antiShuffle(s) === shuffle(s)\n}\n\nconst main = (s) => {\n  const shuffled = shuffle(s)\n  console.log(shuffled)\n  console.log(isShuffle(s))\n  console.log(antiShuffle(s))\n}\n\nmain('Hello World!!!')\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const getCoordinates = row => [row, 0]\n  const getCoordinatesRows = row => [row, row.length - 1]\n  const getCoordinatesColumns = row => [0, row.length - 1]\n  const coordSort = (a, b) => a[1] - b[1]\n  const rowSort = (a, b) => a[0] - b[0]\n  const getCoordinatesRows = row => row.sort(coordSort)\n  const getCoordinatesColumns = row => row.sort(rowSort)\n  const getCoordinates = (row, column) => [row, column]\n  const getRow = (lst, x) => {\n    return lst.map(row => {\n      const rowColumn = getCoordinates(row, x)\n      return rowColumn\n    })\n  }\n  return getRow(lst, x)\n}\n\nconst getRow = (lst, x) => {\n  const getCoordinates = row => [row, 0]\n  const getCoordinatesRows = row => [row, row.length - 1]\n  const getCoordinatesColumns = row => [0, row.length - 1]\n  const coordSort = (a, b) => a[1] - b[1]\n  const rowSort = (a, b) => a[0] - b[0]\n  const getCoordinatesRows = row => row.sort(coordSort)\n  const getCoordinatesColumns = row => row.sort(rowSort)\n  const getCoordinates = (row, column) => [row, column]\n  const getRow = (lst, x) => {\n    return lst.map(row => {\n      const rowColumn = getCoordinates(row, x)\n      return rowColumn\n    })\n  }\n  return getRow(lst, x)\n}\n\nconst getRow = (lst, x) => {\n  const getCoordinates = row => [row, 0]\n  const getCoordinatesRows = row => [row, row.length - 1]\n  const getCoordinatesColumns = row => [0, row.length - 1]\n  const coordSort = (a, b) => a[1] - b[1]\n  const rowSort = (a, b) => a[0] - b[0]\n  const getCoordinatesRows = row => row.sort(coordSort)\n  const getCoordinatesColumns = row => row.sort(rowSort)\n  const getCoordinates = (row, column) => [row, column]\n  const getRow = (lst, x) => {\n    return lst.map(row => {\n      const rowColumn = getCoordinates(row, x)\n      return rowColumn\n    })\n  }\n  return getRow(lst, x)\n}\n\nconst getRow = (lst, x) => {\n  const getCoordinates = row => [row, 0]\n  const getCoordinatesRows = row => [row, row.length - 1]\n  const getCoordinatesColumns = row => [0, row.length - 1]\n  const coordSort = (a, b) => a[1] - b[1]\n  const rowSort = (a, b) => a[0] - b[0]\n  const getCoordinatesRows = row => row.sort(coordSort)\n  const getCoordinatesColumns = row => row.sort(rowSort)\n  const getCoordinates = (row, column) => [row, column]\n  const getRow = (lst, x) => {\n    return lst.map(row => {\n      const rowColumn = getCoordinates(row, x)\n      return rowColumn\n    })\n  }\n  return getRow(lst, x)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice();\n  sortedArray.sort(() => {\n    const a = sortedArray[0];\n    const b = sortedArray[1];\n    const sum = a + b;\n    if (sum % 2 === 1) {\n      return -1;\n    }\n    return 1;\n  });\n  return sortedArray;\n};\n\nconst test = [2, 4, 3, 0, 1, 5, 6];\n\nconsole.log(sortArray(test));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let a = s.split('')\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b.push(alphabet[(a[i].charCodeAt(0) - 97) % alphabet.length])\n  }\n  return b.join('')\n}\n\nconst decrypt = (s) => {\n  let a = s.split('')\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b.push(alphabet[(a[i].charCodeAt(0) - 97) % alphabet.length])\n  }\n  return b.join('')\n}\n\n/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift up by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'gf'\n  encrypt('asdfghjkl') returns 'fjhgwlnop'\n  encrypt('gf') returns 'et'\n  encrypt('kj') returns 'ix'\n  */\nconst decrypt = (s) => {\n  let a = s.split('')\n  let b = []\n  for (let i = 0; i < a.length; i++) {\n    b.push(alphabet[(a[i].charCodeAt(0) - 97) % alphabet.length])\n  }\n  return b.join('')\n}\n\nconst encryptFile = (filePath) => {\n  const input = fs.readFileSync(filePath, 'utf-8')\n  const output = encrypt(input)\n  fs.writeFileSync(filePath, output)\n}\n\nconst decryptFile = (filePath) => {\n  const input = fs.readFileSync(filePath, 'utf-8')\n  const output = decrypt(input)\n  fs.writeFileSync(filePath, output)\n}\n\nconst testEncrypt = (input) => {\n  console.log(encrypt(input))\n}\n\nconst testDecrypt = (input) => {\n  console.log(decrypt(input))\n}\n\nconst testEncryptFile = (filePath) => {\n  const input = fs.readFileSync(filePath, 'utf-8')\n  const output = encrypt(input)\n  fs.writeFileSync(filePath, output)\n}\n\nconst testDecryptFile = (filePath) => {\n  const input = fs.readFileSync(filePath, 'utf-8')\n  const output = decrypt(input)\n  fs.writeFileSync(filePath, output)\n}\n\nencryptFile(filePath)\ndecryptFile(filePath)\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let smallest = lst[0];\n  let smallestIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      smallestIndex = i;\n    }\n  }\n  return lst[smallestIndex + 1];\n};\n\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n  let smallest = lst[0];\n  let smallestIndex = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < smallest) {\n      smallest = lst[i];\n      smallestIndex = i;\n    }\n  }\n  return lst[smallestIndex + 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    const bores = S.split('.')\n    let i = 0\n    while (i < bores.length) {\n        if (bores[i] === '?') {\n            if (i < bores.length - 1 && bores[i + 1] === '?') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '!') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '.') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] ==='') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '.') {\n                i += 2\n                continue\n            }\n        } else if (bores[i] === '!') {\n            if (i < bores.length - 1 && bores[i + 1] === '!') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] ==='') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '.') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '.') {\n                i += 2\n                continue\n            }\n        } else if (bores[i] === '.') {\n            if (i < bores.length - 1 && bores[i + 1] ==='') {\n                i += 2\n                continue\n            } else if (i < bores.length - 1 && bores[i + 1] === '.') {\n                i += 2\n                continue\n            }\n        } else if (bores[i] ==='') {\n            if (i < bores.length - 1 && bores[i + 1] ==='') {\n                i += 2\n                continue\n            }\n        }\n        i += 1\n    }\n    return i === bores.length\n}\n\n/*\n  Given a string, it will print out the number of boredom that\n  the string contains. A boredom is a sentence thta starts with the word \"I\".\n*/\nconst countBored = (S) => {\n    let bores = S.split('.')\n    let count = 0\n    while (bores.length > 0) {\n        if (isBored(bores[0])) {\n            count += 1\n            bores = bores.slice(1)\n        } else {\n            bores = bores.slice(1)\n            bores.push(bores.shift())\n        }\n    }\n    return count\n}\n\nconst S = \"Hello world. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love this weather. I love this weather. The sky is blue. The sun is shining. I love"}
{"task_id": "JavaScript/92", "prompt": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x === y + z && x === y - z && x === z - y && x === y + z;\n  } else {\n    return false;\n  }\n};\n\n// anyInt(5, 2, 7)\n// true\n\n// anyInt(3, 2, 2)\n// false\n\n// anyInt(3, -2, 1)\n// true\n\n// anyInt(3.6, -2.2, 2)\n// false\n\n// anyInt(3, 5, 3)\n// false\n\n// anyInt(3, 1, 4)\n// false\n\n// anyInt(3, 2, 5)\n// false\n\n// anyInt(3, 2, 6)\n// false\n\n// anyInt(3, 1, 3)\n// true\n\n// anyInt(3, 3, 4)\n// true\n\n// anyInt(3, 3, 3)\n// true\n\n// anyInt(3, 3, 2)\n// true\n\n// anyInt(3, 4, 2)\n// true\n\n// anyInt(3, 2, 4)\n// true\n\n// anyInt(3, 2, 3)\n// true\n\n// anyInt(4, 2, 3)\n// true\n\n// anyInt(2, 2, 2)\n// true\n\n// anyInt(2, 2, 1)\n// true\n\n// anyInt(1, 1, 1)\n// true\n\n// anyInt(1, 1, 0)\n// false\n\n// anyInt(1, 0, 1)\n// false\n\n// anyInt(1, 0, 0)\n// false\n\n// anyInt(1, 1, 2)\n// false\n\n// anyInt(2, 1, 2)\n// false\n\n// anyInt(2, 1, 3)\n// false\n\n// anyInt(3, 1, 3)\n// true\n\n// anyInt(4, 1, 3)\n// true\n\n// anyInt(3, 2, 4)\n// true\n\n// anyInt(3, 3, 3)\n// true\n\n// anyInt(3, 4, 3)\n// true\n\n// anyInt(3, 4, 4)\n// true\n\n// anyInt(3, 3, 4)\n// true\n\n// anyInt(3, 4, 5)\n// false\n\n// anyInt(4, 3, 5)\n// false\n\n// anyInt(3, 4, 6)\n// false\n\n// anyInt(3, 4, 7)\n// false\n\n// anyInt(3, 4, 8)\n// false\n\n// anyInt(3, 5, 6)\n// false\n\n// anyInt(3, 5, 7)\n// false\n\n// anyInt(3, 5, 8)\n// false\n\n// anyInt(4, 4, 5)\n// true\n\n// anyInt(4, 5, 5)\n// true\n\n// anyInt(5, 5, 5)\n// true\n\n// anyInt(6, 5, 5)\n// false\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  // var encode = (message) => {\n  const messageArray = message.split(\"\").map(x => x.toLowerCase());\n  let newMessage = \"\";\n  for (let i = 0; i < messageArray.length; i++) {\n    let char = messageArray[i];\n    if (char.includes(\"a\") || char.includes(\"e\") || char.includes(\"i\") || char.includes(\"o\") || char.includes(\"u\")) {\n      let next = messageArray[i + 1];\n      next = next.toLowerCase();\n      next = next.substring(0, 2) + next.substring(2).toUpperCase();\n      newMessage = newMessage + next;\n    } else {\n      newMessage = newMessage + char;\n    }\n  }\n  return newMessage;\n};\n\n/*\n  Write a function that takes a message, and decodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  the message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> decode('TEST')\n  'TEST'\n  >>> decode('THKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const messageArray = message.split(\"\").map(x => x.toUpperCase());\n  let newMessage = \"\";\n  for (let i = 0; i < messageArray.length; i++) {\n    let char = messageArray[i];\n    if (char.includes(\"A\") || char.includes(\"E\") || char.includes(\"I\") || char.includes(\"O\") || char.includes(\"U\")) {\n      let next = messageArray[i + 1];\n      next = next.substring(0, 2) + next.substring(2).toLowerCase();\n      newMessage = newMessage + next;\n    } else {\n      newMessage = newMessage + char;\n    }\n  }\n  return newMessage;\n};\n\nconst message = encode('This is a message');\nconsole.log(message);\nconsole.log(decode(message));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  if (!lst) {\n    return false;\n  }\n  const largest = Math.max(...lst.map(x => x));\n  const digits = largest.toString(10).split('').map(x => x - 0);\n  const sum = digits.reduce((a, b) => a + b);\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).every(key => {\n    const value = dict[key];\n    return key.toLowerCase() === key || key.toUpperCase() === key;\n  });\n}\n\n// given a string, return the number of lowercase letters in the string\nconst countLowerCaseLetters = (str) => {\n  return str.split('').reduce((a, b) => a + b.toLowerCase().length, 0);\n}\n\n// given a string, return the number of uppercase letters in the string\nconst countUpperCaseLetters = (str) => {\n  return str.split('').reduce((a, b) => a + b.toUpperCase().length, 0);\n}\n\n// given a string, return the number of whitespaces in the string\nconst countWhitespaces = (str) => {\n  return str.split('').reduce((a, b) => a + b.length, 0);\n}\n\n// given a string, return the number of uppercase letters and whitespaces in the string\nconst countUppercaseLetters = (str) => {\n  return countUpperCaseLetters(str) + countWhitespaces(str);\n}\n\n// given a string, return the number of lowercase letters and whitespaces in the string\nconst countLowercaseLetters = (str) => {\n  return countLowerCaseLetters(str) + countWhitespaces(str);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetter = (dict) => {\n  return Object.keys(dict).reduce((a, b) => a + b.toUpperCase().length + b.toLowerCase().length, 0);\n}\n\n// Given a dictionary, return the number of keys that have a lower case letter and a capital letter.\nconst checkLowercaseLetter = (dict) => {\n  return Object.keys(dict).reduce((a, b) => a + b.toLowerCase().length + b.toUpperCase().length, 0);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict) => {\n  return checkCapitalLetter(dict) + checkLowercaseLetter(dict);\n}\n\n// Given a dictionary, return the number of keys that have a capital letter and a lower case letter.\nconst checkCapitalLetters = (dict"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    let arr = [];\n    let count = 0;\n    while(count < n) {\n        if(isPrime(count)) {\n            arr.push(count);\n        }\n        count++;\n    }\n    return arr;\n}\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n\nfunction isPrime(num) {\n    let i = 2;\n    while(i < num) {\n        if(num % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}\n\nfunction isPrime2(num) {\n    let i = 2;\n    while(i < num) {\n        if(num % i === 0) {\n            return false;\n        }\n        i += 2;\n    }\n    return true;\n}\n\n/*\n  Implement a function that takes a string and returns the string reversed.\n  For example:\n  reverse(\"hello\") => \"olleh\"\n  reverse(\"hello\") => \"hello\"\n  reverse(\"hello\") => \"elloh\"\n  */\nconst reverse = (s) => {\n    let arr = [];\n    for(let i = 0; i < s.length; i++) {\n        arr.push(s[s.length - i - 1]);\n    }\n    return arr.join(\"\");\n}\n\nconsole.log(reverse(\"hello\"));\nconsole.log(reverse(\"world\"));\nconsole.log(reverse(\"world\"));\nconsole.log(reverse(\"hello\"));\nconsole.log(reverse(\"\"));\n\nfunction reverse2(s) {\n    let arr = [];\n    for(let i = s.length - 1; i >= 0; i--) {\n        arr.push(s[i]);\n    }\n    return arr.join(\"\");\n}\n\nconsole.log(reverse2(\"hello\"));\nconsole.log(reverse2(\"world\"));\nconsole.log(reverse2(\"world\"));\nconsole.log(reverse2(\"hello\"));\nconsole.log(reverse2(\"\"));\n\n/*\n  Implement a function that takes a string and returns the string reversed.\n  For example:\n  reverse(\"hello\") => \"olleh\"\n  reverse(\"hello\") => \"hello\"\n  reverse(\"hello\") => \"elloh\"\n  */\nconst reverse3 = (s) => {\n    let arr = [];\n    for(let i = s.length - 1; i >= 0; i--) {\n        arr.push(s[i]);\n    }\n    return arr.join(\"\");\n}\n\nconsole.log(reverse3(\"hello\"));\nconsole.log(reverse3(\"world\"));\nconsole.log(reverse3(\"world\"));\nconsole.log(reverse3(\"hello\"));\nconsole.log(reverse3(\"\"));\n\n/*\n  Implement a function that takes a string and returns the string reversed.\n  For example:\n  reverse(\"hello\") => \"olleh\"\n  reverse(\"hello\") => \"hello\"\n  reverse(\"hello\") => \"elloh\"\n  */\nconst reverse4 = (s) => {\n    let arr = [];\n    for(let i = s.length - 1; i >= 0; i--) {\n        arr.push(s[i]);\n    }\n    return arr.join(\"\");\n}\n\nconsole.log(reverse4(\"hello\"));\nconsole.log(reverse4(\"world\"));\nconsole.log(reverse4(\"world\"));\nconsole.log(reverse4(\"hello\"));\nconsole.log(reverse4(\"\"));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if(isNaN(a) || isNaN(b)){\n    return NaN;\n  }\n  if(a===0 || b===0){\n    return 0;\n  }\n  if(a === 1){\n    return b;\n  }\n  if(b === 1){\n    return a;\n  }\n  let i = 0;\n  while(i<a.length){\n    if(a[i]===0){\n      a.splice(i, 1);\n    }\n    else{\n      i++;\n    }\n  }\n  if(a.length===1){\n    return a[0]*b;\n  }\n  let result = a[0]*b;\n  for(let i = 1; i<a.length; i++){\n    result = result + a[i]*b;\n  }\n  return result;\n}\n\nconsole.log(multiply(20, 14));\nconsole.log(multiply(14, -15));\nconsole.log(multiply(-20, 14));\nconsole.log(multiply(14, -20));\nconsole.log(multiply(20, -14));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let numUpper = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      numUpper += 1;\n    }\n  }\n  return numUpper;\n};\n\n/*\n  Given a string s, return the number of lowercase letters in the string.\n  \n  For example:\n  countLower('abcdefg') returns 4\n  countLower('A') returns 1\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let numLower = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toLowerCase() === s[i]) {\n      numLower += 1;\n    }\n  }\n  return numLower;\n};\n\n/*\n  Given a string s, return the number of vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 2\n  countVowels('A') returns 1\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  let numVowels = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      numVowels += 1;\n    }\n  }\n  return numVowels;\n};\n\nmodule.exports = {\n  countUpper,\n  countLower,\n  countVowels\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if(typeof value === \"number\"){\n    return Math.round(value);\n  }\n\n  //get the number as an array and then find the closest integer\n  let numArray = value.split(\".\");\n  let num1 = numArray[0];\n  let num2 = numArray[1];\n\n  let num1Int = parseInt(num1,10);\n  let num2Int = parseInt(num2,10);\n\n  if(num1Int >= num2Int){\n    return num1Int;\n  } else {\n    return num2Int;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a nmuber\n  and returns the largest integer that is less than or equal to it.\n  Examples\n  >>> largestLessThanOrEqualTo(\"10\")\n  10\n  >>> largestLessThanOrEqualTo(\"15.3\")\n  15\n  >>> largestLessThanOrEqualTo(\"15\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example largestLessThanOrEqualTo(\"14.5\") should\n  return 15 and largestLessThanOrEqualTo(\"-14.5\") should return -15.\n  */\nconst largestLessThanOrEqualTo = (value) => {\n  if(typeof value === \"number\"){\n    return Math.floor(value);\n  }\n\n  //get the number as an array and then find the largest integer\n  let numArray = value.split(\".\");\n  let num1 = numArray[0];\n  let num2 = numArray[1];\n\n  let num1Int = parseInt(num1,10);\n  let num2Int = parseInt(num2,10);\n\n  if(num1Int <= num2Int){\n    return num1Int;\n  } else {\n    return num2Int;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a nmuber\n  and returns the largest integer that is greater than or equal to it.\n  Examples\n  >>> largestGreaterThanOrEqualTo(\"10\")\n  10\n  >>> largestGreaterThanOrEqualTo(\"15.3\")\n  15\n  >>> largestGreaterThanOrEqualTo(\"15\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example largestGreaterThanOrEqualTo(\"14.5\") should\n  return 15 and largestGreaterThanOrEqualTo(\"-14.5\") should return -15.\n  */\nconst largestGreaterThanOrEqualTo = (value) => {\n  if(typeof value === \"number\"){\n    return Math.ceil(value);\n  }\n\n  //get the number as an array and then find the largest integer\n  let numArray = value.split(\".\");\n  let num1 = numArray[0];\n  let num2 = numArray[1];\n\n  let num1Int = parseInt(num1,10);\n  let num2Int = parseInt(num2,10);\n\n  if(num1Int >= num2Int){\n    return num1Int;\n  } else {\n    return num2Int;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a nmuber\n  and returns the largest integer that is less than it.\n  Examples\n  >>> largestLessThan(\"10\")\n  10\n  >>> largestLessThan(\"15.3\")\n  15\n  >>> largestLessThan(\"15\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example largestLessThan(\"14.5\") should\n  return 15 and largestLessThan(\"-14.5\") should return -15.\n  */\nconst largestLessThan = (value) => {\n  if(typeof value === \"number\"){\n    return largestLessThanOrEqualTo(value)-1;\n  }\n\n  //get the number as an array and then find the largest integer\n  let numArray = value.split(\".\");\n  let num1 = numArray[0];\n  let num2 = numArray[1];\n\n  let num1Int = parseInt(num1,10);\n  let num2Int = parseInt(num2,10);\n\n  if(num1Int < num2Int){\n    return largestLessThanOrEqualTo(value);\n  } else {\n    return largestLessThanOrEqualTo(value);\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a nmuber\n  and returns the largest integer that is greater than it.\n  Examples\n  >>> largestGreaterThan(\"10\")\n  10\n  >>> largestGreaterThan(\"15.3\")\n  15\n  >>> largestGreaterThan(\"15\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example largestGreaterThan(\"14.5\") should\n  return 15 and largestGreaterThan(\"-14.5\") should return -15.\n  */\nconst largestGreaterThan = (value) => {\n  if(typeof value === \"number\"){\n    return largestGreaterThanOrEqualTo(value)+1;\n  }\n\n  //get the number as an array and then find the largest integer\n  let numArray = value.split"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = makePile(n);\n  let pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(p.pop());\n  }\n  return pile;\n};\n\nconst makePile = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n\n  let pile = [];\n  let num = 0;\n\n  for (let i = 0; i < n; i++) {\n    num = n - i - 1;\n    if (num % 2) {\n      pile.push(num);\n    } else {\n      pile.unshift(num);\n    }\n  }\n\n  return pile;\n};\n\nconst makePile2 = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n\n  let pile = [];\n  let num = 0;\n\n  for (let i = 0; i < n; i++) {\n    num = n - i - 1;\n    if (num % 2) {\n      pile.push(num);\n    } else {\n      pile.unshift(num);\n    }\n  }\n\n  return pile;\n};\n\nexport { makeAPile, makePile, makePile2 };\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n}\n\nconst wordsString = (s) => {\n  const words = s.split(/,\\s+/);\n  return words;\n}\n\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/g);\n  return words;\n}\n\n/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/g);\n  return words;\n}\n\n/*\n  Given an integer, return its corresponding number of permutations\n  \n  For example:\n  permute(3) == 3\n  permute(7) == 63\n  permute(6) == 42\n  */\nconst permute = (n) => {\n  let total = 1;\n  for (let i = 1; i <= n; i++) {\n    total *= i;\n  }\n  return total;\n}\n\n/*\n  Given a non-empty list of integers, return the first one that does not appear in the list.\n  \n  For example:\n  findFirstMissing(1, 2, 3) == 1\n  findFirstMissing(1, 2, 3, 4) == 2\n  findFirstMissing(1, 2, 3, 4, 5) == 4\n  */\nconst findFirstMissing = (n) => {\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j < n) {\n      if (i === j) {\n        j++;\n      }\n      else {\n        break;\n      }\n    }\n    if (i === j) {\n      break;\n    }\n  }\n  return i;\n}\n\n/*\n  Given a non-empty list of integers, return the first one that does not appear in the list.\n  \n  For example:\n  findFirstMissing(1, 2, 3) == 1\n  findFirstMissing(1, 2, 3, 4) == 2\n  findFirstMissing(1, 2, 3, 4, 5) == 4\n  */\nconst findFirstMissing = (n) => {\n  for (let i = 1; i <= n; i++) {\n    let j = i;\n    while (j < n) {\n      if (i === j) {\n        j++;\n      }\n      else {\n        break;\n      }\n    }\n    if (i === j) {\n      break;\n    }\n  }\n  return i;\n}\n\n/*\n  Given a sorted array of integers, return the index of the first element that is not in the sorted array.\n  \n  For example:\n  findFirstMissing(1, 2, 3, 4) == 2\n  findFirstMissing(1, 2, 3, 4, 5) == 4\n  */\nconst findFirstMissing = (n) => {\n  let i = 0;\n  while (i < n) {\n    let j = 0;\n    while (j < n) {\n      if (i === j) {\n        j++;\n      }\n      else {\n        break;\n      }\n    }\n    if (i === j) {\n      break;\n    }\n    i++;\n  }\n  return i;\n}\n\n/*\n  Given a sorted array of integers, return the index of the first element that is not in the sorted array.\n  \n  For example:\n  findFirstMissing(1, 2, 3, 4) == 2\n  findFirstMissing(1, 2, 3, 4, 5) == 4\n  */\nconst findFirstMissing = (n) => {\n  let i = 0;\n  while (i < n) {\n    let j = 0;\n    while (j < n) {\n      if (i === j) {\n        j++;\n      }\n      else {\n        break;\n      }\n    }\n    if (i === j) {\n      break;\n    }\n    i++;\n  }\n  return i;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    const MAX_INT = Math.pow(2, 31);\n    const n = x + y;\n    const max = MAX_INT;\n    const num = MAX_INT;\n    let sum = 0;\n    let index = MAX_INT;\n    for (let i = x; i < n; i++) {\n        sum += i;\n        if (sum > max) {\n            num = i;\n            max = sum;\n            index = i;\n        }\n    }\n    return index;\n}\n\nconsole.log(chooseNum(5, 7));\nconsole.log(chooseNum(2, 5));\nconsole.log(chooseNum(1, 1));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  let avg = 0;\n  for (let i = n; i <= m; i++) {\n    avg += i;\n  }\n  avg = avg / (m - n + 1);\n  return Number(avg.toString(2));\n};\n\nconsole.log(roundedAvg(1, 5));\nconsole.log(roundedAvg(7, 5));\nconsole.log(roundedAvg(10, 20));\nconsole.log(roundedAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [];\n  for (let i = 0; i < x; i++) {\n    digits.push(parseInt(i.toString()));\n  }\n  return digits.filter(digit => digit % 2 === 0).sort();\n}\n\n// Note:\n// If there are more than 10,000 digits, we need to run the \n// algorithm in parallel to avoid a stack overflow.\n\n// Solution:\n// Divide the input into chunks of size N. \n// Each chunk is a group of numbers, each number in the chunk \n// can only be 1, 4, 7, 9, 10, 12, 13, 14, 15, 16, 19, 20, 25, 30, \n// 35, 40, 45, 50, 55, 60, 70, 80, 90, 100, 110, 120, 130, 140, \n// 150, 160, 170, 180, 200, 210, 220, 230, 240, 250, 260, 270, \n// 300, 310, 320, 330, 340, 350, 360, 370, 380, 390, 400, 410, \n// 420, 430, 440, 450, 460, 470, 480, 490, 500, 510, 520, 530, \n// 540, 550, 560, 570, 580, 590, 600, 610, 620, 630, 640, 650, \n// 660, 670, 680, 690, 700, 710, 720, 730, 740, 750, 760, 770, \n// 780, 790, 800, 810, 820, 830, 840, 850, 860, 870, 880, 890, \n// 900, 910, 920, 930, 940, 950, 960, 970, 980, 990, 1000]\n\nconst uniqueDigits_parallel = (x) => {\n  const N = Math.floor(Math.sqrt(x));\n  const chunks = [x].map(i => {\n    const start = i * N;\n    const end = start + N;\n    return [start, end];\n  });\n  \n  const nums = chunks.map(chunk => {\n    const uniqueDigits = uniqueDigits(chunk);\n    return uniqueDigits;\n  });\n  \n  return nums;\n}\n\nconst uniqueDigits_serial = (x) => {\n  const nums = [];\n  const N = Math.floor(Math.sqrt(x));\n  for (let i = 0; i < N; i++) {\n    const start = i * N;\n    const end = start + N;\n    const chunk = x.slice(start, end);\n    const uniqueDigits = uniqueDigits(chunk);\n    nums = nums.concat(uniqueDigits);\n  }\n  return nums;\n}\n\nconsole.log(uniqueDigits_parallel(12345));\nconsole.log(uniqueDigits_serial(12345));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arr2 = arr.slice().sort((a, b) => {\n    return a - b;\n  })\n  const arr3 = arr2.reverse()\n  const nameArr = []\n  for (let i = 0; i < arr3.length; i++) {\n    nameArr.push(arr3[i] + \"\")\n  }\n  return nameArr\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]))\nconsole.log(byLength([1, -1, 55]))\nconsole.log(byLength([]));\nconsole.log(byLength([55]))\nconsole.log(byLength([0, 1, -1]))\nconsole.log(byLength([0, 1, -1, 0]))\nconsole.log(byLength([0, 1, -1, 0, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns the factorial of n.\n  Example:\n  f(5) == 120\n  */\nconst f = (n) => {\n  const result = 1;\n  for (let i = 2; i <= n; i += 1) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = Array(n);\n  for (let i = 1; i <= n; i += 1) {\n    result[i - 1] = i % 2? i : (i * (i - 1));\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns the factorial of n.\n  Example:\n  f(5) == 120\n  */\nconst f = (n) => {\n  const result = 1;\n  for (let i = 2; i <= n; i += 1) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns the factorial of n.\n  Example:\n  f(5) == 120\n  */\nconst f = (n) => {\n  const result = 1;\n  for (let i = 2; i <= n; i += 1) {\n    result *= i;\n  }\n  return result;\n};\n\n/*\n  Implement the function f that takes n as a parameter,\n  and returns the factorial of n.\n  Example:\n  f(5) == 120\n  */\nconst f = (n) => {\n  const result = 1;\n  for (let i = 2; i <= n; i += 1) {\n    result *= i;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let temp = i;\n    while (temp) {\n      if (temp % 2 === 0) {\n        count++;\n      }\n      temp = temp / 2;\n    }\n  }\n  return [count, count - (count / 2)];\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, ele) => acc + ele, 0)\n  return arr.reduce((acc, ele, i) => acc + ((sum / ele > 0)? 1 : 0), 0)\n}\n\nconsole.log(countNums([-1, 11, -11]))\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an arrya 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an arrya 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    for (let i = 1; i < arr.length; i++) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let temp = []\n    for (let i = 0; i < arr.length - 1; i++) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                temp.push(arr[j])\n                arr[j] = arr[i]\n                arr[i] = temp[j - i]\n                break\n            } else {\n                j += 1\n            }\n        }\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst moveOneBall = (arr) => {\n    arr.sort((a, b) => a - b)\n    let i = 0\n    while (i < arr.length - 1) {\n        let j = i + 1\n        while (j < arr.length) {\n            if (arr[j] - arr[i] > 0) {\n                let temp = arr[j]\n                arr[j] = arr[i]\n                arr[i] = temp\n                break\n            } else {\n                j += 1\n            }\n        }\n        i++\n    }\n    return arr.every(e => e >= 0)\n}\n\nconst move"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1 = lst1.filter((elm) => elm % 2 === 0);\n  const lst2 = lst2.filter((elm) => elm % 2 === 0);\n  return lst1.length === lst2.length? \"YES\" : \"NO\";\n}\n\n/*\n  In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only odd nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOdd = (lst1, lst2) => {\n  const lst1 = lst1.filter((elm) => elm % 2!== 0);\n  const lst2 = lst2.filter((elm) => elm % 2!== 0);\n  return lst1.length === lst2.length? \"YES\" : \"NO\";\n}\n\n/*\n  In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only odd nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be odd, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangeOdd2 = (lst1, lst2) => {\n  const lst1 = lst1.filter((elm) => elm % 2!== 0);\n  const lst2 = lst2.filter((elm) => elm % 2!== 0);\n  return lst1.length === lst2.length? \"YES\" : \"NO\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let counts = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test[i];\n    if (counts[letter] === undefined) {\n      counts[letter] = 1;\n    } else {\n      counts[letter]++;\n    }\n  }\n  return counts;\n};\n\n// This function takes the test data and returns the sum of the lengths of the words.\nconst sum = (test) => {\n  let sum = 0;\n  for (let i = 0; i < test.length; i++) {\n    let word = test[i].split(' ');\n    sum += word.length;\n  }\n  return sum;\n};\n\n// This function takes the test data and returns the average of the lengths of the words.\nconst avg = (test) => {\n  let sum = sum(test);\n  return sum / test.length;\n};\n\n// This function takes the test data and returns the total number of words in the text.\nconst wordCount = (test) => {\n  return test.length;\n};\n\n// This function takes the test data and returns the number of unique words in the text.\nconst uniqueWordCount = (test) => {\n  let counts = histogram(test);\n  return Object.keys(counts).length;\n};\n\n// This function takes the test data and returns the total number of characters in the text.\nconst charCount = (test) => {\n  return test.length;\n};\n\n// This function takes the test data and returns the number of unique characters in the text.\nconst uniqueCharCount = (test) => {\n  let counts = histogram(test);\n  return Object.keys(counts).length;\n};\n\n// This function takes the test data and returns the total number of lines in the text.\nconst lineCount = (test) => {\n  return test.length;\n};\n\n// This function takes the test data and returns the number of unique lines in the text.\nconst uniqueLineCount = (test) => {\n  let counts = histogram(test);\n  return Object.keys(counts).length;\n};\n\n// This function takes the test data and returns the number of words in the text.\nconst wordCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of words in the text.\nconst uniqueWordCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of characters in the text.\nconst charCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of characters in the text.\nconst uniqueCharCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of lines in the text.\nconst lineCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of lines in the text.\nconst uniqueLineCountByLength = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  return sums.reduce((previous, current, index) => previous + current, 0);\n};\n\n// This function takes the test data and returns the number of words in the text.\nconst wordCountByLengthSum = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  let total = sums.reduce((previous, current, index) => previous + current, 0);\n  return total;\n};\n\n// This function takes the test data and returns the number of words in the text.\nconst uniqueWordCountByLengthSum = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  let total = sums.reduce((previous, current, index) => previous + current, 0);\n  return total;\n};\n\n// This function takes the test data and returns the number of characters in the text.\nconst charCountByLengthSum = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  let total = sums.reduce((previous, current, index) => previous + current, 0);\n  return total;\n};\n\n// This function takes the test data and returns the number of characters in the text.\nconst uniqueCharCountByLengthSum = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  let total = sums.reduce((previous, current, index) => previous + current, 0);\n  return total;\n};\n\n// This function takes the test data and returns the number of lines in the text.\nconst lineCountByLengthSum = (test) => {\n  let counts = histogram(test);\n  let sums = Object.values(counts);\n  let"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let cArray = c.split('');\n    let sArray = s.split('');\n    let i = 0;\n    let j = s.length - 1;\n    while (i <= j) {\n        while (sArray[i] === cArray[j]) {\n            i++;\n        }\n        sArray[i] = sArray[j];\n        j--;\n    }\n    let reverse = sArray.join('');\n    return [reverse, reverse === s];\n};\n\nconst isPalindrome = (s) => {\n    let [r, b] = reverseDelete(s, '');\n    return b === s;\n}\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = [];\n  lst.forEach((el, i) => {\n    let count = 0;\n    for (let j = 0; j < el.length; j++) {\n      if (el.charAt(j) === '1') {\n        count++;\n      }\n    }\n    oddCount.push(`the number of odd elements ${count} of the ${i}th str4ng`);\n  });\n  return oddCount;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let i = 0;\n  let j = 0;\n  let sum = 0;\n  let m = nums[0];\n  let minSum = nums[0];\n\n  while (j < nums.length) {\n    if (nums[j] > 0) {\n      sum += nums[j];\n    } else {\n      minSum = Math.min(minSum, sum);\n      sum = 0;\n    }\n\n    if (sum < m) {\n      m = sum;\n    }\n\n    j++;\n  }\n\n  minSum = Math.min(minSum, sum);\n\n  return minSum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    // init\n    let sum = 0;\n    let count = 0;\n    for (let i = 0; i < grid.length; i++) {\n        sum += grid[i][0];\n    }\n    \n    // find the number of bucket\n    for (let i = 0; i < grid.length; i++) {\n        if (grid[i][0] > 0) {\n            count++;\n        }\n    }\n\n    let cnt = 0;\n    let min = Math.ceil(sum / capacity);\n    let max = sum;\n    while (max - min > 1) {\n        let mid = (min + max) / 2;\n        let curr = 0;\n        let cnt = 0;\n        for (let i = 0; i < grid.length; i++) {\n            if (grid[i][0] > 0) {\n                curr += grid[i][0];\n                if (curr > mid) {\n                    cnt++;\n                }\n            }\n        }\n        if (cnt < count) {\n            min = mid;\n        } else {\n            max = mid;\n        }\n        cnt = 0;\n    }\n\n    return count;\n};\n\nconst main = () => {\n    let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n    let bucket_capacity = 1;\n    console.log(minFill(grid, bucket_capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sorted = [...arr];\n  sorted.sort((a, b) => {\n    let diff = (a-b)\n    if (diff === 0) {\n      return a-b;\n    }\n    if (diff > 0) {\n      return 1;\n    }\n    return -1;\n  });\n  return sorted;\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4, 5, 6, 7, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    let res = []\n    for (let i = 0; i < n; i++) {\n        let c = s[i]\n        if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n            res.push(c)\n        }\n    }\n    return res\n}\n\n/*\n  Given a string s and a string t, you haev been tasked to imlpement \n  a fucntion that returns true if the string s contains all the chars in t\n  in the same order.\n  Examples:\n  containsAll(\"foobar\", \"fobar\") ==> true\n  containsAll(\"foobar\", \"bar\") ==> true\n  containsAll(\"foobar\", \"foo\") ==> false\n  containsAll(\"foobar\", \"barbar\") ==> true\n  containsAll(\"foobar\", \"foobar\") ==> true\n  */\nconst containsAll = (s, t) => {\n    for (let i = 0; i < t.length; i++) {\n        if (s.indexOf(t[i]) === -1) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Given a string s and a number n, you haev been tasked to imlpement \n  a fucntion that returns the nth substring of s.\n  Examples:\n  substring(\"foobar\", 3) ==> \"bar\"\n  substring(\"foobar\", 5) ==> \"barbar\"\n  substring(\"foobar\", 1) ==> \"foo\"\n  substring(\"foobar\", -3) ==> \"bar\"\n  */\nconst substring = (s, n) => {\n    let index = n\n    if (index < 0) {\n        index = s.length + index\n    }\n    if (index < 0) {\n        return \"\"\n    }\n    if (index >= s.length) {\n        return \"\"\n    }\n    return s.substr(index, n)\n}\n\nconst test = () => {\n    let s = \"Mary had a little lamb\"\n    let n = 4\n    console.log(selectWords(s, n))\n    console.log(containsAll(s, \"fobar\"))\n    console.log(substring(s, n))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  if(word.length < 2) {\n    return \"\";\n  }\n  \n  let first = word[0];\n  let last = word[word.length - 1];\n  let left = word.substr(1);\n  let right = word.substr(0, word.length - 1);\n  \n  let closest = \"\";\n  let min = Math.abs(first - last);\n  let temp;\n  let i;\n  for(i = 0; i < left.length; i++) {\n    if(left[i]!= first && left[i]!= last) {\n      temp = Math.abs(first - left[i]);\n      if(temp < min) {\n        min = temp;\n        closest = left[i];\n      }\n    }\n  }\n  \n  for(i = 0; i < right.length; i++) {\n    if(right[i]!= first && right[i]!= last) {\n      temp = Math.abs(first - right[i]);\n      if(temp < min) {\n        min = temp;\n        closest = right[i];\n      }\n    }\n  }\n  \n  return closest;\n};\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const isGood = (lst) => {\n    const len = lst.length\n    let stack = []\n    let j = 0\n    for (let i = 0; i < len; i++) {\n      if (lst[i] === '(') {\n        stack.push(lst[i])\n      } else if (lst[i] === ')') {\n        if (stack.length === 0) {\n          return false\n        }\n        const top = stack.pop()\n        if (top === '(') {\n          continue\n        }\n        if (top!== lst[j]) {\n          return false\n        }\n        j++\n      }\n    }\n    return stack.length === 0\n  }\n  if (isGood(lst)) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\nconsole.log(matchParens(['()(', ')'])); // 'Yes'\nconsole.log(matchParens([')', ')'])); // 'No'\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let index = -1\n  let max = arr[0]\n  let maxIndex = 0\n\n  // for each element in array, if current element is greater than current maximum,\n  // replace current maximum with current element and update index\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      index = i\n      maxIndex = i\n    }\n  }\n\n  // update the result array with k elements, in order\n  let result = []\n  for (let i = 0; i < k; i++) {\n    result.push(arr[index + i])\n  }\n\n  return result\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i = 0; i < lst.length; i++) {\n    if(i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1])); //12\nconsole.log(solution([3, 3, 3, 3, 3])); //9\nconsole.log(solution([30, 13, 24, 321])); //0<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const len = arr.length;\n  const result = 0;\n  let counter = 0;\n  let n = 0;\n  let i = 0;\n\n  while (counter < k) {\n    result += arr[i];\n    i++;\n    counter++;\n  }\n  \n  while (i < len) {\n    n = Math.floor(Math.random() * 10);\n    result += n;\n    i++;\n  }\n\n  return result;\n}\n\nconst testAddElements = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = 4;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements2 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = 3;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements3 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = 2;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements4 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = 1;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements5 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = 0;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements6 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements7 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements8 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements9 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements10 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements11 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements12 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements13 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements14 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements15 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements16 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000000000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements17 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -10000000000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements18 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -100000000000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst testAddElements19 = () => {\n  const arr = [111,21,3,4000,5,6,7,8,9];\n  const k = -1000000000000000000000000;\n  const result = addElements(arr, k);\n  console.log(result);\n}\n\nconst test"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = getCollatz(n)\n  collatz = collatz.filter(x => x % 2 === 1)\n  collatz.sort((a, b) => b - a)\n  return collatz\n}\n\nconst getCollatz = (n) => {\n  if (n === 1) return [1]\n  else return [].concat(getCollatz(n / 2), [n, n * 3 + 1])\n}\n\nconst isPrime = (n) => n % 1 === 0? false : n === 1 || getCollatz(n).length === 2\n\nconst getCollatzPrime = (n) => {\n  if (n === 1) return [1]\n  else return [].concat(getCollatzPrime(n / 2), [n, n * 3 + 1])\n}\n\nconst isPrime = (n) => n % 1 === 0? false : n === 1 || getCollatzPrime(n).length === 2\n\nconst main = () => {\n  const primeCollatz = [1].concat(getOddCollatz(5))\n  const primeCollatzPrime = [1].concat(getOddCollatz(5))\n  const prime = [...primeCollatzPrime].filter(x => isPrime(x))\n\n  const isPrimePrime = [...primeCollatzPrime].filter(x => isPrime(x))\n\n  const collatzPrime = [...primeCollatz].filter(x => isPrime(x))\n\n  const isPrimePrimePrime = [...primeCollatz].filter(x => isPrime(x))\n\n  console.log(prime.join(','))\n  console.log(primePrime.join(','))\n  console.log(collatzPrime.join(','))\n  console.log(isPrimePrimePrime.join(','))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let arr = date.split('-');\n  let year = parseInt(arr[0], 10);\n  let month = parseInt(arr[1], 10);\n  let day = parseInt(arr[2], 10);\n\n  if (arr.length!= 3 || isNaN(day) || day < 1 || day > 31 || day > 31) {\n    return false;\n  }\n\n  if (arr[0].length!= 2 || arr[1].length!= 2 || arr[2].length!= 4) {\n    return false;\n  }\n\n  let months = ['01', '03', '05', '07', '09', '11'];\n  let days = ['01', '03', '05', '07', '09', '11'];\n  let isValid = true;\n  if (month < 1 || month > 12) {\n    isValid = false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      isValid = false;\n    }\n  } else if (month === 2) {\n    if (day < 1 || day > 29) {\n      isValid = false;\n    }\n  }\n\n  if (!isValid) {\n    return false;\n  }\n\n  if (month === 1) {\n    if (day > 28) {\n      isValid = false;\n    }\n  }\n\n  if (month === 2) {\n    if (day > 28) {\n      isValid = false;\n    }\n  }\n\n  if (!isValid) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 31) {\n      isValid = false;\n    }\n  }\n\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      isValid = false;\n    }\n  }\n\n  if (month === 1) {\n    if (day > 28) {\n      isValid = false;\n    }\n  }\n\n  if (!isValid) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.replace(/^\\s+|\\s+$/g, '');\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst getWords = (txt) => {\n  txt = txt.replace(/^\\s+|\\s+$/g, '');\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\nconst getLetters = (txt) => {\n  txt = txt.replace(/^\\s+|\\s+$/g, '');\n  const words = txt.split(/\\s+/);\n  const letters = new Array();\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (words[i].charAt(j)!='') {\n        letters.push(words[i].charAt(j));\n      }\n    }\n  }\n  return letters;\n};\n\nconst isOdd = (x) => (x % 2 === 1);\n\nconst countLetters = (txt) => {\n  const letters = getLetters(txt);\n  return letters.length;\n};\n\nconst countWords = (txt) => {\n  const words = getWords(txt);\n  return words.length;\n};\n\nconst isWord = (txt, word) => {\n  const words = getWords(txt);\n  return words.indexOf(word) >= 0;\n};\n\nconst containsWord = (txt, word) => {\n  const words = splitWords(txt);\n  return words.indexOf(word) >= 0;\n};\n\nconst containsLetters = (txt, letters) => {\n  const words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (letters.indexOf(words[i].charAt(j)) < 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst containsLetter = (txt, letter) => {\n  const words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (letter!= words[i].charAt(j)) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst isValid = (txt) => {\n  return containsLetter(txt,'') && containsWord(txt,'');\n};\n\nconst containsAllLetters = (txt, letters) => {\n  const words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      if (letters.indexOf(words[i].charAt(j)) < 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconst isValidLetter = (txt) => {\n  return containsWord(txt,'') && containsAllLetters(txt, getLetters(txt));\n};\n\nconst isValidWord = (txt) => {\n  return containsWord(txt,'') && containsLetter(txt,'');\n};\n\nmodule.exports = {\n  countLetters,\n  countWords,\n  isValid,\n  isWord,\n  isValidWord,\n  isValidLetter,\n  containsWord,\n  containsAllLetters,\n  splitWords,\n  getWords,\n  getLetters,\n  containsLetters,\n  containsWord,\n  containsAllLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  const sortedLen = sorted.length;\n  const len = lst.length;\n\n  for (let i = 1; i < sortedLen; i++) {\n    if (sorted[i - 1]!== sorted[i]) {\n      return false;\n    }\n  }\n\n  if (sorted[sortedLen - 1]!== sorted[sortedLen - 1]) {\n    return false;\n  }\n\n  return true;\n};\n\n/*\n  Given a list of numbers, return a list of numbers\n  that are in ascending order, but do not contain duplicates.\n  Example\n  isAscending([1, 2, 3, 4, 5, 6]) ➞ [1, 2, 3, 4, 5, 6]\n  isAscending([1, 2, 3, 4, 5, 5]) ➞ [1, 2, 3, 4, 5]\n  isAscending([1, 2, 3, 4, 5, 6, 7]) ➞ [1, 2, 3, 4, 5, 6]\n  isAscending([1, 2, 2, 3, 3, 4]) ➞ [1, 2, 2, 3]\n  isAscending([1, 2, 2, 2, 3, 4]) ➞ [1, 2, 2]\n  */\nconst isAscending = (lst) => {\n  const sorted = lst.slice().sort();\n  const sortedLen = sorted.length;\n  const len = lst.length;\n\n  for (let i = 1; i < sortedLen; i++) {\n    if (sorted[i - 1]!== sorted[i]) {\n      return sorted.slice(0, i);\n    }\n  }\n\n  return sorted;\n};\n\nconst isSortedDescending = (lst) => {\n  const sorted = lst.slice().sort((a, b) => b - a);\n  const sortedLen = sorted.length;\n  const len = lst.length;\n\n  for (let i = 1; i < sortedLen; i++) {\n    if (sorted[i - 1]!== sorted[i]) {\n      return false;\n    }\n  }\n\n  if (sorted[sortedLen - 1]!== sorted[sortedLen - 1]) {\n    return false;\n  }\n\n  return true;\n};\n\nconst isAscendingDescending = (lst) => {\n  const sorted = lst.slice().sort((a, b) => b - a);\n  const sortedLen = sorted.length;\n  const len = lst.length;\n\n  for (let i = 1; i < sortedLen; i++) {\n    if (sorted[i - 1]!== sorted[i]) {\n      return sorted.slice(0, i);\n    }\n  }\n\n  return sorted;\n};\n\nmodule.exports = {\n  isSorted,\n  isSortedDescending,\n  isAscending,\n  isAscendingDescending\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval1.end) {\n    throw new Error(\"start can't be greater than end\")\n  }\n  if (interval2.start > interval2.end) {\n    throw new Error(\"start can't be greater than end\")\n  }\n  if (interval1.end < interval2.start) {\n    throw new Error(\"interval1 end can't be smaller than interval2 start\")\n  }\n  if (interval2.end < interval1.start) {\n    throw new Error(\"interval2 end can't be smaller than interval1 start\")\n  }\n\n  const interval1End = interval1.end\n  const interval2Start = interval2.start\n\n  const intersectionLength = Math.max(interval1End, interval2Start) - Math.min(interval1.start, interval2.start)\n\n  if (intersectionLength < 1) {\n    return \"NO\"\n  }\n\n  const isPrime = (num) => {\n    return num > 1 && num % 1 === 0\n  }\n\n  if (isPrime(intersectionLength)) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = arr.map((n) => {\n    if (n === 0) {\n      return null\n    }\n    if (n < 0) {\n      return -1\n    }\n    return 1\n  })\n\n  const len = signs.length\n  let res = 1\n  for (let i = 0; i < len; i++) {\n    if (signs[i] === null) {\n      continue\n    }\n    res *= signs[i]\n  }\n  return res\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    let rows = grid.length;\n    let cols = grid[0].length;\n\n    // find all the possible values on the grid\n    let possible_values = [];\n    for (let i = 1; i <= rows; i++) {\n        for (let j = 1; j <= cols; j++) {\n            possible_values.push(i * cols + j);\n        }\n    }\n\n    // sort the possible values, so we can compare them quickly\n    possible_values = possible_values.sort();\n\n    // find the k-th smallest value in the possible_values\n    let i = 0;\n    let cur_val = possible_values[i];\n    let path = [cur_val];\n\n    // go through the grid and find the k-th smallest value\n    while (k--) {\n        let row = Math.floor(cur_val / cols);\n        let col = cur_val % cols;\n        let next_val = row * cols + col + 1;\n\n        // if the next value is in the possible_values list, then we found\n        // the k-th smallest value, so save the current value\n        if (possible_values.indexOf(next_val)!= -1) {\n            path.push(next_val);\n            cur_val = next_val;\n        }\n\n        // if not, then we can't find the k-th smallest value\n        else {\n            // if we have reached the last value in the possible_values\n            // list, then we can't find the k-th smallest value\n            if (cur_val == possible_values[i]) {\n                return path;\n            }\n            break;\n        }\n    }\n\n    return path;\n};\n\nconst test = [\n    [\n        [1, 2, 3],\n        [4, 5, 6],\n        [7, 8, 9]\n    ],\n    [\n        [5, 9, 3],\n        [4, 1, 6],\n        [7, 8, 2]\n    ],\n    [\n        [1, 3, 4, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1]\n    ]\n];\n\nfor (let i = 0; i < test.length; i++) {\n    console.log(\n        'k:',\n        k,\n        '\\n' +\n        minPath(test[i], k)\n    );\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let output = [1]\n  let curr = 2\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      output.push(curr)\n      curr = curr + 1\n    } else {\n      output.push(curr)\n      curr = curr + 1\n      output.push(curr + curr)\n    }\n  }\n  return output\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let r = 0;\n  for (let i = n; i > 0; i--) {\n    if (n % i === 0) {\n      r *= i;\n    }\n  }\n  return r;\n}\n\n// const testDigits = () => {\n//   console.log(digits(1));\n//   console.log(digits(4));\n//   console.log(digits(235));\n//   console.log(digits(12345));\n//   console.log(digits(0));\n// }\n\nconst testDigits = () => {\n  for (let i = 1; i < 1000; i++) {\n    const n = digits(i);\n    if (n === 0) {\n      console.log(`${i} is a palindrome.`);\n    }\n    else {\n      console.log(`${i} is not a palindrome.`);\n    }\n  }\n}\n\nconst testDigits2 = () => {\n  for (let i = 1; i < 1000; i++) {\n    const n = digits(i);\n    if (n === 0) {\n      console.log(`${i} is a palindrome.`);\n    }\n    else {\n      const j = digits(n);\n      if (n % j === 0) {\n        console.log(`${i} is a palindrome.`);\n      }\n      else {\n        console.log(`${i} is not a palindrome.`);\n      }\n    }\n  }\n}\n\ntestDigits();\n// testDigits2();\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n  if (!string || string.length === 0) return false;\n  const stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']') {\n      stack.push(string[i]);\n    } else if (stack.length === 0) {\n      return false;\n    } else if (stack[stack.length - 1] === '[' && string[i] === ']') {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\n// const isNested = (string) => {\n//   let stack = [];\n//   for (let i = 0; i < string.length; i++) {\n//     if (string[i] === '[' || string[i] === ']') {\n//       stack.push(string[i]);\n//     } else if (stack.length === 0) {\n//       return false;\n//     } else if (stack[stack.length - 1] === '[' && string[i] === ']') {\n//       stack.pop();\n//     }\n//   }\n//   return stack.length === 0;\n// };\n\nconst isNested = (string) => {\n  let stack = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[' || string[i] === ']') {\n      stack.push(string[i]);\n    } else if (stack.length === 0) {\n      return false;\n    } else if (stack[stack.length - 1] === '[' && string[i] === ']') {\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\n// Test\nconst testSumSquares = () => {\n    let result = sumSquares([1,2,3]);\n    assert.equal(result, 14);\n\n    result = sumSquares([1,4,9]);\n    assert.equal(result, 98);\n\n    result = sumSquares([1,3,5,7]);\n    assert.equal(result, 84);\n\n    result = sumSquares([1.4,4.2,0]);\n    assert.equal(result, 29);\n\n    result = sumSquares([-2.4,1,1]);\n    assert.equal(result, 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSquares([1,3,5,7]), 84);\n    assert.equal(sumSquares([1.4,4.2,0]), 29);\n    assert.equal(sumSquares([-2.4,1,1]), 6);\n};\n\n// Test\ntestSumSquares();\n\n// Code\nvar sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(e => {\n        let r = Math.round(e);\n        result += r*r;\n    });\n    return result;\n};\n\nvar testSumSquares = () => {\n    assert.equal(sumSquares([1,2,3]), 14);\n    assert.equal(sumSquares([1,4,9]), 98);\n    assert.equal(sumSqu"}
{"task_id": "JavaScript/134", "prompt": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if(txt.length === 0)\n    return false;\n  let txtChar = txt[txt.length -1];\n  let txtCharIsALetter = txtChar.match(/[a-zA-Z]/);\n  return (txtCharIsALetter!== null) && (txtCharIsALetter!== undefined) && (txtCharIsALetter.length > 0);\n};\n\n/*\n  Create a function that takes a string and\n  returns a string with the last character removed.\n  Example:\n  removeLastChar(\"Hello world\") ➞ \"Hellodr\"\n  removeLastChar(\"Hello world \") ➞ \"Hello world\"\n  removeLastChar(\"Hello world \") ➞ \"Hello world\"\n  removeLastChar(\"\") ➞ \"\"\n  */\nconst removeLastChar = (txt) => {\n  if(txt.length === 0)\n    return txt;\n  let txtLastChar = txt[txt.length -1];\n  let txtLastCharIsALetter = txtLastChar.match(/[a-zA-Z]/);\n  if(txtLastCharIsALetter!== null)\n    return txt.slice(0, -1);\n  else\n    return txt;\n};\n\nconst toString = (obj) => {\n  let str = \"\";\n  if (obj.constructor.name === 'Date')\n    str = obj.toDateString();\n  else if (obj.constructor.name === 'RegExp')\n    str = obj.toString();\n  else\n    str = obj.toString();\n  return str;\n};\n\nconst toUpperCase = (str) => str.toUpperCase();\n\nconst toLowerCase = (str) => str.toLowerCase();\n\nconst toTitleCase = (str) => str.toTitleCase();\n\nconst format = (str, args) => {\n  let func = str;\n  if(typeof str === 'function')\n    func = str;\n  else\n    func = args[0];\n  return func(str, args[1], args[2]);\n};\n\nconst split = (str, splitter) => {\n  return str.split(splitter);\n};\n\nconst join = (arr, splitter) => {\n  return arr.join(splitter);\n};\n\nconst contains = (arr, val) => {\n  return arr.indexOf(val) > -1;\n};\n\nconst isNumeric = (str) => {\n  return str.match(/^-?\\d+$/);\n};\n\nconst hasAlpha = (str) => {\n  return str.match(/[a-zA-Z]/);\n};\n\nconst hasNumber = (str) => {\n  return str.match(/^-?\\d+$/);\n};\n\nconst hasSpecialChars = (str) => {\n  return str.match(/[^a-zA-Z0-9 ]/);\n};\n\nconst hasSpecialCharsAndAlpha = (str) => {\n  return str.match(/[^a-zA-Z0-9\\s]/);\n};\n\nconst hasSpecialCharsAndNumber = (str) => {\n  return str.match(/[^a-zA-Z0-9\\s]/);\n};\n\nconst hasSpecialCharsAndSpace = (str) => {\n  return str.match(/[^a-zA-Z0-9\\s]/);\n};\n\nconst hasSpace = (str) => {\n  return str.match(/\\s/);\n};\n\nconst isWhitespace = (str) => {\n  return str.match(/^\\s*$/);\n};\n\nconst isNotWhitespace = (str) => {\n  return str.match(/^[^\\s]*$/);\n};\n\nconst hasAlphaNum = (str) => {\n  return str.match(/[a-zA-Z0-9]/);\n};\n\nconst hasAlphaNumSpace = (str) => {\n  return str.match(/[a-zA-Z0-9\\s]/);\n};\n\nconst hasAlphaNumSpaceNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNum = (str) => {\n  return str.match(/[a-zA-Z0-9]/);\n};\n\nconst isAlphaNumNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumSpaceNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumSpaceNumNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumSpaceNum = (str) => {\n  return str.match(/[a-zA-Z0-9\\s\\d]/);\n};\n\nconst isAlphaNumSpaceNumNum = (str) => {\n  return str.match(/[a-"}
{"task_id": "JavaScript/135", "prompt": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLen = arr.length\n  let last = arr[arrLen - 1]\n  let i = arrLen - 2\n  let largest = -1\n  while (i >= 0) {\n    if (arr[i] <= last) {\n      largest = i\n      last = arr[i]\n    }\n    i--\n  }\n  return largest\n}\n\n/*\n  Create a function which returns the sum of all the elements in the given\n  array. If the array is empty return 0.\n\n  Examples:\n  canSum([1,2,3,4]) = 10\n  canSum([]) = 0\n  */\nconst canSum = (arr) => {\n  if (!arr || arr.length === 0) {\n    return 0\n  }\n  let sum = 0\n  arr.forEach(n => sum += n)\n  return sum\n}\n\n/*\n  Create a function which returns the average of all the elements in the given\n  array. If the array is empty return 0.\n\n  Examples:\n  canAverage([1,2,3,4]) = 2.0\n  canAverage([]) = 0.0\n  */\nconst canAverage = (arr) => {\n  if (!arr || arr.length === 0) {\n    return 0\n  }\n  let sum = 0\n  arr.forEach(n => sum += n)\n  return sum / arr.length\n}\n\nconst arr = [1,2,3,4,5,6]\n\nconst a = canArrange(arr)\nconsole.log(a)\nconsole.log(canArrange(arr))\nconsole.log(canSum(arr))\nconsole.log(canAverage(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null\n  let b = null\n  let len = lst.length\n  if (len > 0) {\n    let smallest = lst[0]\n    for (let i = 1; i < len; i++) {\n      if (lst[i] < smallest) {\n        smallest = lst[i]\n      }\n    }\n    if (smallest > 0) {\n      a = smallest\n    }\n    for (let i = 0; i < len; i++) {\n      if (lst[i] > a) {\n        a = lst[i]\n      }\n    }\n    b = lst[0]\n    for (let i = 1; i < len; i++) {\n      if (lst[i] < b) {\n        b = lst[i]\n      }\n    }\n  }\n  return (a, b)\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n  if (a === b) {\n    return null;\n  }\n  if (a < b) {\n    return a;\n  } else if (a > b) {\n    return b;\n  } else {\n    return a;\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareTwo = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length;\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareThree = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return b.length;\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareFour = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length;\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareFive = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareSix = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareSeven = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0) + a.charAt(0) + b.charAt(0);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareEight = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0) + a.charAt(0) + b.charAt(0) + a.charCodeAt(1) + b.charCodeAt(1);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareNine = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0) + a.charAt(0) + b.charAt(0) + a.charCodeAt(1) + b.charCodeAt(1) + a.charAt(1) + b.charAt(1);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareTen = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0) + a.charAt(0) + b.charAt(0) + a.charCodeAt(1) + b.charCodeAt(1) + a.charAt(1) + b.charAt(1) + a.charCodeAt(2) + b.charCodeAt(2);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the first string, or -1 if the string is null.\n  */\nconts compareEleven = (a, b) => {\n  if (a === null || b === null) {\n    return -1;\n  } else {\n    return a.length + b.length + a.charCodeAt(0) + b.charCodeAt(0) + a.charAt(0) + b.charAt(0) + a.charCodeAt(1) + b.charCodeAt(1) + a.charAt(1) + b.charAt(1) + a.charCodeAt(2) + b.charCodeAt(2) + a.charAt(2) + b.charAt(2) + a.charCodeAt(3) + b.charCodeAt(3);\n  }\n};\n\n/*\n  create a function that takes a string and a string and returns the length\n  of the"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  return (sum % 4 === 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n// Example\n// isEqualToSumEven(4) == false\n// isEqualToSumEven(6) == false\n// isEqualToSumEven(8) == true\n\nconst isEqualToSumEven = (n) => {\n  const sum = n + (n + 1) / 2\n  return (sum % 4 === 0)\n}\n\nexport default {\n  isEqualToSumEven,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    const factors = []\n    const factor = (i) => {\n        if (i === 1) return 1\n        return i * factor(i - 1)\n    }\n    let i = 1\n    while (i < n) {\n        factors.push(factor(i))\n        i++\n    }\n    return factors.reduce((x, y) => x * y)\n}\n\n/*The special binomial coefficient is defined as:\n  special_binomial_coefficient(n, k) = n! / (k!(n - k)!)\n  for n > 0 and k >= 0.\n  \n  For example:\n  >>> special_binomial_coefficient(10, 3)\n  10\n\n  The function will receive an integer as input and should return the special\n  binomial coefficient of this integer.\n  */\nconst special_binomial_coefficient = (n, k) => {\n    return specialFactorial(n) / specialFactorial(k) / specialFactorial(n - k)\n}\n\n/*The special double factorial is defined as:\n  special_double_factorial(n) = n! * (n + 1)! * (n + 2)! *... * 2!\n  for n > 0.\n  \n  For example:\n  >>> special_double_factorial(10)\n  720\n  \n  The function will receive an integer as input and should return the special\n  double factorial of this integer.\n  */\nconst special_double_factorial = (n) => {\n    return specialFactorial(n) * specialFactorial(n + 1) * specialFactorial(n + 2)\n}\n\n/*The generalized binomial coefficient is defined as:\n  generalized_binomial_coefficient(n, k) = n! / k! / (n - k)!\n  for n > 0 and k >= 0.\n  \n  For example:\n  >>> generalized_binomial_coefficient(10, 3)\n  2\n  \n  The function will receive an integer as input and should return the generalized\n  binomial coefficient of this integer.\n  */\nconst generalized_binomial_coefficient = (n, k) => {\n    return specialFactorial(n) / specialFactorial(k) / specialFactorial(n - k)\n}\n\n/*The generalized double factorial is defined as:\n  generalized_double_factorial(n) = n! * (n + 1)! * (n + 2)! *... * 2!\n  for n > 0.\n  \n  For example:\n  >>> generalized_double_factorial(10)\n  720\n  \n  The function will receive an integer as input and should return the generalized\n  double factorial of this integer.\n  */\nconst generalized_double_factorial = (n) => {\n    return specialDoubleFactorial(n) * specialDoubleFactorial(n + 1) * specialDoubleFactorial(n + 2)\n}\n\n/* The generalized double hyperfactorial is defined as:\n  generalized_double_hyperfactorial(n) = n! * (n + 1)! * (n + 2)! *... * 2! * 3! * 4! *... * (n + k)!\n  for n > 0 and k >= 0.\n  \n  For example:\n  >>> generalized_double_hyperfactorial(10)\n  720\n  \n  The function will receive an integer as input and should return the generalized\n  double hyperfactorial of this integer.\n  */\nconst generalized_double_hyperfactorial = (n) => {\n    return specialDoubleFactorial(n) * specialDoubleFactorial(n + 1) * specialDoubleFactorial(n + 2)\n        * specialDoubleFactorial(n + 3) * specialDoubleFactorial(n + 4) *... * specialDoubleFactorial(n + k)\n}\n\nmodule.exports = {\n    factorial,\n    binomial_coefficient,\n    double_factorial,\n    double_hyperfactorial,\n    generalized_binomial_coefficient,\n    generalized_double_factorial,\n    generalized_double_hyperfactorial\n}<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaceReg = /\\s/g\n  const spaceRep = \"_\"\n  const doubleSpaceReg = /\\s\\s/g\n  const doubleSpaceRep = \"-\"\n\n  return text.replace(spaceReg, spaceRep).replace(doubleSpaceReg, doubleSpaceRep)\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacesAndSpaces = (text) => {\n  const spaceReg = /\\s/g\n  const spaceRep = \"_\"\n  const doubleSpaceReg = /\\s\\s/g\n  const doubleSpaceRep = \"-\"\n\n  return text.replace(spaceReg, spaceRep).replace(doubleSpaceReg, doubleSpaceRep)\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacesAndSpacesAndSpaces = (text) => {\n  const spaceReg = /\\s/g\n  const spaceRep = \"_\"\n  const doubleSpaceReg = /\\s\\s/g\n  const doubleSpaceRep = \"-\"\n\n  return text.replace(spaceReg, spaceRep).replace(doubleSpaceReg, doubleSpaceRep)\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacesAndSpacesAndSpacesAndSpaces = (text) => {\n  const spaceReg = /\\s/g\n  const spaceRep = \"_\"\n  const doubleSpaceReg = /\\s\\s/g\n  const doubleSpaceRep = \"-\"\n\n  return text.replace(spaceReg, spaceRep).replace(doubleSpaceReg, doubleSpaceRep)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    if(file_name.length > 3) return 'No';\n    let file_name_splitted = file_name.split(\".\");\n    if(file_name_splitted.length < 2) return 'No';\n    let first_letter = file_name_splitted[0];\n    if(first_letter.length < 1 || first_letter.length > 2) return 'No';\n    let second_letter = file_name_splitted[1];\n    if(second_letter.length < 1 || second_letter.length > 2) return 'No';\n    let third_letter = file_name_splitted[2];\n    if(third_letter.length < 1 || third_letter.length > 3) return 'No';\n    let fourth_letter = file_name_splitted[3];\n    if(fourth_letter.length < 1 || fourth_letter.length > 3) return 'No';\n    if(file_name_splitted.length > 4) return 'No';\n    return 'Yes';\n}\n\n/*\n  Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n    if(file_name.length < 1 || file_name.length > 3) return 'No';\n    let file_name_splitted = file_name.split(\".\");\n    if(file_name_splitted.length < 2) return 'No';\n    let first_letter = file_name_splitted[0];\n    if(first_letter.length < 1 || first_letter.length > 2) return 'No';\n    let second_letter = file_name_splitted[1];\n    if(second_letter.length < 1 || second_letter.length > 2) return 'No';\n    let third_letter = file_name_splitted[2];\n    if(third_letter.length < 1 || third_letter.length > 3) return 'No';\n    let fourth_letter = file_name_splitted[3];\n    if(fourth_letter.length < 1 || fourth_letter.length > 3) return 'No';\n    if(file_name_splitted.length > 4) return 'No';\n    return 'Yes';\n}\n\n/*\n  Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n    if(file_name.length < 1 || file_name.length > 3) return 'No';\n    let file_name_splitted = file_name.split(\".\");\n    if(file_name_splitted.length < 2) return 'No';\n    let first_letter = file_name_splitted[0];\n    if(first_letter.length < 1 || first_letter.length > 2) return 'No';\n    let second_letter = file_name_splitted[1];\n    if(second_letter.length < 1 || second_letter.length > 2) return 'No';\n    let third_letter = file_name_splitted[2];\n    if(third_letter.length < 1 || third_letter.length > 3) return 'No';\n    let fourth_letter = file_name_splitted[3];\n    if(fourth_letter.length < 1 || fourth_letter.length > 3) return 'No';\n    if(file_name_splitted.length > 4) return 'No';\n    return 'Yes';\n}\n\nconst fileNameCheck4 = (file_name) => {\n    if(file_name.length < 1 || file_name.length > 3) return 'No';\n    let file_name_splitted = file_name.split(\".\");\n    if(file_name_splitted.length < 2) return 'No';\n    let first_letter = file_name_splitted[0];\n    if(first_letter.length < 1 || first_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquaresAndCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumCubesAndSquaresAndCubes = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i] * lst[i] * lst[i]\n    }\n  }\n  return sum\n}\n\n/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const char = sentence.charAt(0)\n    let ret = ''\n    const isLetter = (str) => {\n        return (str >= 'A' && str <= 'Z') || (str >= 'a' && str <= 'z')\n    }\n    if (isLetter(char)) {\n        ret = ret + char\n    }\n    for (let i = 1; i < sentence.length; i++) {\n        const char = sentence.charAt(i)\n        if (isLetter(char)) {\n            ret = ret + char\n        }\n        else {\n            ret = ret +''\n        }\n    }\n    return ret\n}\n\nmodule.exports = wordsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n    let num = parseInt(x);\n    let den = parseInt(n);\n    if (num === 0 || den === 0) {\n        return false;\n    }\n    if (num === 1 && den === 1) {\n        return true;\n    }\n    let sign = num < 0? -1 : 1;\n    let numAbs = Math.abs(num);\n    let denAbs = Math.abs(den);\n    if (numAbs === 1 && denAbs === 1) {\n        return true;\n    }\n    let res = Math.abs(num / den);\n    return res === Math.floor(res);\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sorted = [];\n  const sortedIndices = [];\n\n  nums.forEach(x => {\n    const sortedIndex = sorted.indexOf(x);\n    if (sortedIndex === -1) {\n      sorted.push(x);\n      sortedIndices.push(sorted.length - 1);\n    } else {\n      sortedIndices.push(sortedIndex);\n    }\n  });\n\n  const result = sorted.slice(0);\n  sortedIndices.forEach(index => result[index] = sorted[index]);\n\n  return result;\n};\n\nconst test = (nums) => {\n  console.log(`Test for orderByPoints() with ${nums}`);\n  const sorted = orderByPoints(nums);\n  console.log(`Result: ${sorted}`);\n};\n\ntest([]);\ntest([1]);\ntest([1, 2]);\ntest([1, 2, 3]);\ntest([1, 2, 3, 4]);\ntest([1, 2, 3, 4, 5]);\ntest([1, 2, 3, 4, 5, 6]);\ntest([1, 2, 3, 4, 5, 6, 7]);\ntest([1, 2, 3, 4, 5, 6, 7, 8]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]);\ntest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  const even = nums.filter(x => x % 2 === 0);\n  const odd = nums.filter(x => x % 2 === 1);\n  return (odd.length === 0 && even.length > 0)? 1 : (odd.length > 0 && even.length > 0)? 2 : 0;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = [...Array(n)].fill(0);\n  return (a.reduce((acc, x, i) => {\n    return [...acc, a[i-1] + a[i] + a[i+1]].reduce((acc, x) => {\n      return acc + (x * x - x) + 1;\n    });\n  }, 0));\n}\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet_dict = {\n    \"Mercury\": \"Venus\",\n    \"Venus\": \"Earth\",\n    \"Earth\": \"Mars\",\n    \"Mars\": \"Jupiter\",\n    \"Jupiter\": \"Saturn\",\n    \"Saturn\": \"Uranus\",\n    \"Uranus\": \"Neptune\"\n  }\n  return planet_dict[planet1] === planet2? () => ({}) : () => ({})\n}\n\n// bf(\"Mercury\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Saturn\", \"Jupiter\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Earth\") ==> (\"Venus\")\n// bf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Saturn\", \"Uranus\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Mercury\", \"Uranus\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Mercury\", \"Jupiter\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\"Mercury\", \"Saturn\") ==> (\"Saturn\")\n// bf(\""}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let lstLength = lst.length;\n  let sortedList = [];\n  let length;\n  let temp;\n  let index;\n\n  for (index = 0; index < lstLength; index += 1) {\n    temp = 0;\n    length = lst[index].length;\n\n    for (let i = 0; i < length; i += 1) {\n      temp += lst[index][i];\n    }\n\n    if (temp % 2 === 1) {\n      sortedList.push(temp);\n    }\n  }\n\n  return sortedList;\n};\n\nconsole.log(sortedListSum([\"a\", \"aa\", \"a\", \"aaa\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconst isPrime = (n) => {\n  let divisor = 2;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      return false;\n    }\n    divisor++;\n  }\n  return true;\n}\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n    if (lst.length === 0) return 0;\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(doubleTheDifference([1, 3, 2, 0]));\nconsole.log(doubleTheDifference([-1, -2, 0]));\nconsole.log(doubleTheDifference([9, -2]));\nconsole.log(doubleTheDifference([0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  // console.log(guess)\n  // console.log(game)\n  // console.log(game.length)\n  // console.log(guess.length)\n  // console.log(guess.map(guess => guess.toString()))\n  // console.log(game.map(game => game.toString()))\n  // console.log(compare(game, guess))\n  let reslut = []\n  let max = -1\n  for(let i = 0; i < game.length; i++){\n    let min = Number.MAX_SAFE_INTEGER\n    let match = false\n    for(let j = 0; j < guess.length; j++){\n      if(game[i] === guess[j]){\n        match = true\n        break\n      }\n    }\n    if(match){\n      let diff = Math.abs(game[i] - guess[i])\n      if(diff < min){\n        min = diff\n      }\n    }\n    reslut.push(min)\n    if(min > max){\n      max = min\n    }\n  }\n  return reslut\n}\n\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\nconsole.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  extensions = extensions.filter(ext => ext.indexOf(class_name.toUpperCase()) === 0);\n  extensions = extensions.sort((a, b) => a.length - b.length);\n  const extension = extensions[0];\n  return class_name.toLowerCase() + '.' + extension.substring(extension.indexOf(class_name.toUpperCase()));\n}\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n    let i = 0, j = 0;\n    let length = a.length;\n    let len = b.length;\n    let arr = [];\n    let sub = [];\n    while (i < length && j < len) {\n        if (a[i] == b[j]) {\n            arr.push(a[i]);\n            sub.push(b[j]);\n            i++;\n            j++;\n        } else if (i < length) {\n            j = 0;\n            i++;\n        } else {\n            j++;\n        }\n    }\n    return sub.every(x => arr.includes(x));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const count = num.toString().split('').reduce((prev, curr, index) => {\n    if (index % 2 === 0) {\n      prev.push(curr);\n    }\n    return prev;\n  }, []);\n  return [count.length - count.filter((x) => x.length % 2 === 0).length, count.length - count.filter((x) => x.length % 2!== 0).length];\n};\n\nmodule.exports = {\n  evenOddCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    let roman = '';\n    if (number === 0) {\n        return 'zero';\n    }\n    if (number === 1) {\n        return 'one';\n    }\n    if (number === 2) {\n        return 'two';\n    }\n    if (number === 3) {\n        return 'three';\n    }\n    if (number === 4) {\n        return 'four';\n    }\n    if (number === 5) {\n        return 'five';\n    }\n    if (number === 6) {\n        return'six';\n    }\n    if (number === 7) {\n        return'seven';\n    }\n    if (number === 8) {\n        return 'eight';\n    }\n    if (number === 9) {\n        return 'nine';\n    }\n    if (number === 10) {\n        return 'ten';\n    }\n    if (number === 11) {\n        return 'eleven';\n    }\n    if (number === 12) {\n        return 'twelve';\n    }\n    if (number === 13) {\n        return 'thirteen';\n    }\n    if (number === 14) {\n        return 'fourteen';\n    }\n    if (number === 15) {\n        return 'fifteen';\n    }\n    if (number === 16) {\n        return'sixteen';\n    }\n    if (number === 17) {\n        return'seventeen';\n    }\n    if (number === 18) {\n        return 'eighteen';\n    }\n    if (number === 19) {\n        return 'nineteen';\n    }\n    if (number === 20) {\n        return 'twenty';\n    }\n    if (number === 30) {\n        return 'thirty';\n    }\n    if (number === 40) {\n        return 'forty';\n    }\n    if (number === 50) {\n        return 'fifty';\n    }\n    if (number === 60) {\n        return'sixty';\n    }\n    if (number === 70) {\n        return'seventy';\n    }\n    if (number === 80) {\n        return 'eighty';\n    }\n    if (number === 90) {\n        return 'ninety';\n    }\n    for (let i = 1; i < number; i++) {\n        if (i % 100 == 0) {\n            roman += 'c';\n        }\n        if (i % 10 == 0) {\n            roman += 'd';\n        }\n        if (i % 10 == 1) {\n            roman +='m';\n        }\n        if (i % 10 == 2) {\n            roman +='m';\n        }\n        if (i % 10 == 3) {\n            roman +='m';\n        }\n        if (i % 10 == 4) {\n            roman +='m';\n        }\n        if (i % 10 == 5) {\n            roman += 'v';\n        }\n        if (i % 10 == 6) {\n            roman += 'v';\n        }\n        if (i % 10 == 7) {\n            roman += 'v';\n        }\n        if (i % 10 == 8) {\n            roman += 'v';\n        }\n        if (i % 10 == 9) {\n            roman += 'ix';\n        }\n    }\n    return roman.toLowerCase();\n};\n\nexport {\n    intToMiniRoman\n};<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a + b > c && b + c > a && c + a > b);\n};\n\nconst isPossible = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && rightAngleTriangle(a, c, b) && rightAngleTriangle(b, a, c)\n};\n\n/*\n Given a triange, return true if it is a right-angled triangle or false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst isRightAngledTriangle = (a, b, c) => {\n  return rightAngleTriangle(a, b, c) && rightAngleTriangle(a, c, b) && rightAngleTriangle(b, a, c)\n};\n\nconst solve = (a, b, c) => {\n  if (a > b && b > c && a > c) {\n    return a + b + c\n  } else if (isPossible(a, b, c)) {\n    return solve(a, c, b)\n  } else if (isRightAngledTriangle(a, b, c)) {\n    return a + b + c\n  } else {\n    return -1\n  }\n};\n\nconst tests = [\n  [3, 4, 5, 6],\n  [1, 2, 3, 4],\n  [1, 3, 4, 5],\n  [2, 3, 4, 5],\n  [1, 2, 4, 5],\n  [1, 3, 5, 6],\n  [1, 2, 3, 6]\n];\n\nconst testsLength = tests.length;\n\nconst allTest = () => {\n  const total = 0;\n  tests.forEach((test, i) => {\n    total += solve(test[0], test[1], test[2]);\n  });\n  console.log(total);\n};\n\nallTest();<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = words[0];\n  let index = 0;\n  let count = 0;\n  for (let i = 1; i < words.length; i++) {\n    if (words[i].length > max.length) {\n      max = words[i];\n      index = i;\n    } else if (words[i].length === max.length) {\n      if (words[i] > max) {\n        max = words[i];\n        index = i;\n      }\n    }\n  }\n  return max;\n}\n\n/*\n  Write a function that computes the number of occurrences of a given string\n  in a given list of strings.\n  */\nconst findCount = (words) => {\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'name') {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nconst findIndex = (words) => {\n  let index = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === 'name') {\n      index = i;\n    }\n  }\n  return index;\n}\n\nmodule.exports = {\n  findMax,\n  findCount,\n  findIndex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    let result = [];\n    let eaten = 0;\n    let remain = remaining;\n    while (eaten < need) {\n        if (eaten + number > need) {\n            eaten = need;\n        } else {\n            eaten = eaten + number;\n        }\n        remain = remain - number;\n        result.push([eaten, remain]);\n    }\n    return result;\n};\n\n// Test\nconst test = (number, need, remaining) => {\n    let result = [];\n    let eaten = 0;\n    let remain = remaining;\n    while (eaten < need) {\n        if (eaten + number > need) {\n            eaten = need;\n        } else {\n            eaten = eaten + number;\n        }\n        remain = remain - number;\n        result.push([eaten, remain]);\n    }\n    return result;\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = operand[0];\n  let i = 1;\n  while (i < operand.length) {\n    result = operator[operand[i]][result];\n    i += 1;\n  }\n  return result;\n};\n\nconst parseOperand = (operand) => {\n  const operator = [];\n  let i = 0;\n  while (i < operand.length) {\n    let currentOperand = operand[i];\n    if (currentOperand.length === 1 && (\n      currentOperand === '+' ||\n      currentOperand === '-' ||\n      currentOperand === '*' ||\n      currentOperand === '/' ||\n      currentOperand === '**'\n    )) {\n      operator.push(currentOperand);\n      i += 1;\n    } else if (i > 0) {\n      let operandBefore = operand[i - 1];\n      if (operandBefore === '**') {\n        operator.push(operandBefore);\n        i += 1;\n      } else {\n        operator.push(operandBefore + currentOperand);\n        i += 1;\n      }\n    }\n  }\n  return operator;\n};\n\nconst doEvaluation = (operand, operator) => {\n  return doAlgebra(operator, operand);\n};\n\nconst parse = (expression) => {\n  let operator = parseOperand(expression);\n  let operand = parseOperand(expression);\n  return doEvaluation(operand, operator);\n};\n\nconst test = (expression) => {\n  return parse(expression);\n};\n\nmodule.exports = {\n  parse: parse,\n  test: test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (!s || s.length === 0) return '';\n  const arr = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      arr.push(s[i]);\n    } else {\n      let start = i;\n      let end = i + 1;\n      while (end < s.length && s[end].toLowerCase() === s[end].toUpperCase()) {\n        end++;\n      }\n      arr.push(s.substring(start, end));\n      i = end;\n    }\n  }\n  return arr.join('');\n}\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == null) return null;\n  text = text.toString();\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha1 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == 'ac1c4fa6cad5b4d0c4e6a0e9b2c0f4a6'\n  */\nconst stringToSha1 = (text) => {\n  if (text == null) return null;\n  text = text.toString();\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/**\n  Given a string 'text', return its sha256 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == '5b8b7d2ccb1a4c5a5b4d0a9d8c3b4c6a0b2a4b1a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4b1a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b2a4d0a9d8c3b4c6a0b"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\nexport default generateIntegers;\n<|endoftext|>"}
