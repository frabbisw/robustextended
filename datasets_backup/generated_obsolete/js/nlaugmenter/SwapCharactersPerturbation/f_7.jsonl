{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, are any two numbers closer to each otehr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    const result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                result.push([numbers[i], numbers[j]]);\n            }\n        }\n    }\n\n    return result.length > 0;\n};\n\n/**\n  * @param {Array} numbers\n  * @param {Number} threshold\n  * @returns {Array}\n  *   The numbers in given list which are close to each other.\n  *   The number in the returned array is always the closest one.\n  *   For example:\n  *   >>> getCloseNumbers([1.0, 2.0, 3.0, 4.0, 5.0], 0.2)\n  *   [1.0, 3.0, 4.0]\n  *   >>> getCloseNumbers([1.0, 2.0, 3.0, 4.0, 5.0], 0.3)\n  *   [2.0, 4.0]\n  */\nconst getCloseNumbers = (numbers, threshold) => {\n    const result = [];\n\n    for (let i = 0; i < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n                result.push([numbers[i], numbers[j]]);\n            }\n        }\n    }\n\n    return result;\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The square root of given number.\n  *   For example:\n  *   >>> Math.sqrt(4)\n  *   2\n  *   >>> Math.sqrt(8)\n  *   2\n  *   >>> Math.sqrt(16)\n  *   4\n  */\nconst sqrt = (number) => {\n    return Math.sqrt(number);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The square root of given number.\n  *   For example:\n  *   >>> Math.sqrt(4)\n  *   2\n  *   >>> Math.sqrt(8)\n  *   2\n  *   >>> Math.sqrt(16)\n  *   4\n  */\nconst squareRoot = (number) => {\n    return Math.sqrt(number);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst root = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst squareRoot = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst squareRoot = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst root = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst squareRoot = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n\n/**\n  * @param {Number} number\n  * @returns {Number}\n  *   The root of given number.\n  *   For example:\n  *   >>> Math.pow(2, 1.5)\n  *   4\n  *   >>> Math.pow(2, 2.5)\n  *   8\n  *   >>> Math.pow(2, 3.5)\n  *   16\n  */\nconst root = (number) => {\n    return Math.pow(number, 1 / 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functoin is a string cotnainnig multiple groups of entsed parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each opne brace is properly clsoed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = []\n  let open_braces = 0\n  let closed_braces = 0\n  let str_array = []\n  let curr_index = 0\n  paren_string.split('').forEach(char => {\n    if (char === '(') {\n      stack.push(char)\n      open_braces++\n    } else if (char === ')') {\n      stack.pop()\n      open_braces--\n    } else if (char === '(') {\n      stack.push(char)\n      closed_braces++\n    } else if (char === ')') {\n      stack.pop()\n      closed_braces--\n    }\n    if (open_braces === closed_braces) {\n      str_array.push(paren_string.substring(curr_index, stack.indexOf(stack[stack.length - 1])))\n      curr_index = stack.indexOf(stack[stack.length - 1]) + 1\n      stack.pop()\n    }\n  })\n  return str_array\n}\n\n// Complete the parentheses function below.\nconst parentheses = function(s) {\n  s = s.replace(/\\s/g, '')\n  return s.split('').filter(char => char!== '(' && char!== ')').join('')\n}\n\n// Test\nparemeter = \"((()))\"\nconsole.log(parentheses(paremeter))\n// → ['(()', '(())', '(()())']\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const intPart = Math.floor(number);\n  const decPart = number - intPart;\n  return decPart;\n};\n\n/* Given a positive floating point number, it can be decomopsed into\n  and integer part (largest integer smaller than given number) and decimals\n  (letfoevr part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInt = (number) => {\n  const intPart = Math.floor(number);\n  return intPart;\n};\n\nmodule.exports = {\n  truncateInt,\n  truncateNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and withdrawla operations on a abnk accoutn that starts with\n  zero balance. oYru task is to detcet if at any piont the balance of account fallsl below zero, and\n  at that point fucntion should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let acc = 0;\n    for (let i = 0; i < operations.length; i++) {\n        acc += operations[i];\n        if (acc < 0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nmodule.exports = belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, caclulate Mean Absoluet Deviatoin\n  aroudn the mean of this dataset.\n  Mean Absoluet Deviation is the average absolute diffreence bteween aech\n  leement nad a ecnterpiont (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = sum(numbers) / numbers.length\n  return numbers.map(x => Math.abs(x - mean))\n   .reduce((a, b) => a + b) / numbers.length\n}\n\nconst sample = (numbers, k) => {\n  const sample = []\n  for (let i = 0; i < k; i++) {\n    sample.push(numbers[Math.floor(Math.random() * numbers.length)])\n  }\n  return sample\n}\n\nconst median = (numbers) => {\n  const sorted = numbers.sort()\n  if (numbers.length % 2 === 0) {\n    return (sorted[numbers.length / 2] + sorted[numbers.length / 2 - 1]) / 2\n  }\n  return sorted[numbers.length / 2]\n}\n\nconst quantile = (numbers, p) => {\n  const len = numbers.length\n  const pIndex = Math.round((len - 1) * p)\n  if (pIndex >= len || pIndex < 0) {\n    return undefined\n  }\n  return numbers[pIndex]\n}\n\nconst generateData = (numbers) => {\n  const sample = sample(numbers, 10)\n  const median = median(sample)\n  const q0 = quantile(sample, 0)\n  const q1 = quantile(sample, 1)\n  const q2 = quantile(sample, 2)\n  const q3 = quantile(sample, 3)\n  return {\n    numbers,\n    sample,\n    median,\n    q0,\n    q1,\n    q2,\n    q3\n  }\n}\n\nconst output = (data, filename) => {\n  const results = {\n    \"numbers\": data.numbers,\n    \"sample\": data.sample,\n    \"median\": data.median,\n    \"q0\": data.q0,\n    \"q1\": data.q1,\n    \"q2\": data.q2,\n    \"q3\": data.q3\n  }\n  const filename = filename || \"data.json\"\n  fs.writeFileSync(filename, JSON.stringify(results))\n}\n\nconst main = (filename) => {\n  const data = generateData(loadData())\n  output(data, filename)\n}\n\nmain(filename)\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insetr a number 'delimeter' bteween every two conescutive eelments of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const isArray = Array.isArray(numbers);\n  const list = isArray? numbers : [numbers];\n  const arr = isArray? [] : new Array(numbers);\n  const arrLength = list.length;\n  const arrLengthMinusOne = arrLength - 1;\n  const i = arrLengthMinusOne;\n\n  for (; i >= 0; i--) {\n    arr[i] = list[i];\n  }\n\n  for (i = 0; i < arrLengthMinusOne; i++) {\n    arr[i] = list[i];\n    arr[i + 1] = list[i];\n    arr[i + 2] = list[i];\n  }\n\n  return arr.join(delimeter);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* nIput ot this function is a string rerpesetnde multiple gorups for nested parentheess sepaarted by spaces.\n  For each of the group, output hte deepest level of nesting fo parentheses.\n  E.g. (()()) has maximum two levels of netsing whiel ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const level = 1;\n  const result = [];\n  const stack = [];\n  let current_level = 1;\n  const paren_string = paren_string.trim();\n  paren_string.split(\" \").forEach((token) => {\n    if (token === \"(\" || token === \")\") {\n      const paren_string = token;\n      const last_level = current_level;\n      const new_level = current_level + 1;\n      stack.push(new_level);\n      if (token === \"(\" && paren_string === \")\") {\n        stack.pop();\n        current_level--;\n        result.push(last_level);\n      } else if (token === \")\" && paren_string === \"(\") {\n        stack.pop();\n        current_level--;\n        result.push(last_level);\n      } else if (token === \")\" && paren_string === \")\") {\n        stack.pop();\n        current_level--;\n        result.push(last_level);\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an inupt list of strings only for ones that ocntain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n    return strings.filter(s => s.indexOf(substring)!== -1)\n}\n\n/*\n  Given a list of strings and an array of strings, return the union of\n  the list of strings and the array of strings.\n  >>> union([], ['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'cde', 'array']\n  >>> union(['abc', 'bacd', 'cde', 'array'], [])\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst union = (strings, strings2) => {\n    return [...strings,...strings2]\n}\n\n/*\n  Given a list of strings and an array of strings, return the intersection\n  of the list of strings and the array of strings.\n  >>> intersection([], ['abc', 'bacd', 'cde', 'array'])\n  []\n  >>> intersection(['abc', 'bacd', 'cde', 'array'], [])\n  []\n  >>> intersection(['abc', 'bacd', 'cde', 'array'], ['abc', 'bacd'])\n  ['abc']\n  */\nconst intersection = (strings, strings2) => {\n    return [...new Set(strings.filter(s => strings2.indexOf(s)!== -1))]\n}\n\n/*\n  Given a list of strings and an array of strings, return the difference\n  of the list of strings and the array of strings.\n  >>> difference([], ['abc', 'bacd', 'cde', 'array'])\n  []\n  >>> difference(['abc', 'bacd', 'cde', 'array'], [])\n  []\n  >>> difference(['abc', 'bacd', 'cde', 'array'], ['abc', 'bacd'])\n  ['cde']\n  */\nconst difference = (strings, strings2) => {\n    return [...new Set(strings.filter(s => strings2.indexOf(s) === -1))]\n}\n\n/*\n  Given a list of strings and an array of strings, return the symmetric\n  difference of the list of strings and the array of strings.\n  >>> symmetricDifference([], ['abc', 'bacd', 'cde', 'array'])\n  ['abc', 'bacd', 'cde', 'array']\n  >>> symmetricDifference(['abc', 'bacd', 'cde', 'array'], [])\n  ['abc', 'bacd', 'cde', 'array']\n  >>> symmetricDifference(['abc', 'bacd', 'cde', 'array'], ['abc', 'bacd'])\n  ['cde']\n  */\nconst symmetricDifference = (strings, strings2) => {\n    return [...new Set(strings.filter(s => strings2.indexOf(s) === -1))].concat(\n        [...new Set(strings2.filter(s => strings.indexOf(s) === -1))]\n    )\n}\n\n/*\n  Given a list of strings, return the longest common substring.\n  >>> longestCommonSubstring(['a', 'b', 'c', 'd'])\n  'ab'\n  >>> longestCommonSubstring(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'e'])\n  'bc'\n  */\nconst longestCommonSubstring = (strings) => {\n    if (strings.length === 0) return \"\"\n    if (strings.length === 1) return strings[0]\n    let longest = strings[0]\n    let longestSize = 1\n    let longestSubstring = strings[0]\n    let longestSubstringSize = 1\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length < longestSize) break\n        if (strings[i] === longest) {\n            longestSize += 1\n        } else {\n            longest = longest.substr(0, longestSize)\n            longestSize = 1\n            longestSubstring = strings[i]\n            longestSubstringSize = 1\n        }\n    }\n    return longest\n}\n\n/*\n  Given a list of strings, return the shortest common substring.\n  >>> shortestCommonSubstring(['a', 'b', 'c', 'd'])\n  'a'\n  >>> shortestCommonSubstring(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'e'])\n  'bc'\n  */\nconst shortestCommonSubstring = (strings) => {\n    if (strings.length === 0) return \"\"\n    if (strings.length === 1) return strings[0]\n    let shortest = strings[0]\n    let shortestSize = 1\n    let shortestSubstring = strings[0]\n    let shortestSubstringSize = 1\n    for (let i = 1; i < strings.length; i++) {\n        if (strings[i].length < shortestSize) break\n        if (strings[i] === shortest) {\n            shortestSize += 1\n        } else {\n            shortest = shortest.substr(0, shortestSize)\n            shortestSize = 1\n            shortestSubstring = strings[i]\n            shortestSubstringSize = 1\n        }\n    }\n    return shortest\n}\n\nmodule.exports = {\n    filterBySubstring,\n    union,\n    intersection,\n    difference,\n    symmetricDifference,\n    longestCommonSubstring,\n    shortestCommonSubstring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n  Empty sum should be eqaul to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const product = 1\n  const sum = 0\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i]\n    product *= numbers[i]\n    i++\n  }\n  return sum, product\n}\n\n// let sumProduct = (numbers, int) => {\n//   let sum = 0\n//   let prod = 1\n//   let i = 0\n//   while (i < numbers.length) {\n//     sum += numbers[i]\n//     prod *= numbers[i]\n//     i++\n//   }\n//   return sum, prod\n// }\n\n// For a given list of integers, return a tuple consisting of a sum and a produtc of all teh integers in a list.\n// The sum and product should be calculated in O(n) time and O(1) space.\nconst sumProduct2 = (numbers, int) => {\n  const sum = 0\n  const prod = 1\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i]\n    prod *= numbers[i]\n    i++\n  }\n  return sum, prod\n}\n\n// let sumProduct = (numbers, int) => {\n//   let sum = 0\n//   let prod = 1\n//   let i = 0\n//   while (i < numbers.length) {\n//     sum += numbers[i]\n//     prod *= numbers[i]\n//     i++\n//   }\n//   return sum, prod\n// }\n\n// for (var i = 0; i < numbers.length; i++) {\n//   sum += numbers[i]\n// }\n\n// for (var i = 0; i < numbers.length; i++) {\n//   prod *= numbers[i]\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gievn list of nitegers, genearte a list of rolling maximum elenmet found unitl given moemtn\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers.reduce((max, current, index) => {\n    if (index === 0) {\n      return current;\n    } else if (numbers[index - 1] < current) {\n      return current;\n    } else {\n      return max;\n    }\n  });\n  return numbers.slice(0, max.length).reverse();\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Fnid the sohertst aplindrome that begins with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const isPalindrome = (string) => {\n    return string == string.split('').reverse().join('');\n  }\n  const isLongestPalindrome = (string) => {\n    return string.split('').reverse().join('') === string;\n  }\n  let longestPalindrome = 0;\n  for(let i = 0; i < string.length; i++) {\n    if(isLongestPalindrome(string.slice(0, i + 1))) {\n      longestPalindrome = i + 1;\n    }\n  }\n  return string.slice(0, longestPalindrome);\n}\n\n/* Fnid the sohertst aplindrome that ends with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindrome('cat')\n  'cata'\n  >>> makePalindrome('cat')\n  'catac'\n  */\nconst makePalindromeEnding = (string) => {\n  const isPalindrome = (string) => {\n    return string == string.split('').reverse().join('');\n  }\n  const isLongestPalindrome = (string) => {\n    return string.split('').reverse().join('') === string;\n  }\n  let longestPalindrome = 0;\n  for(let i = string.length - 1; i >= 0; i--) {\n    if(isLongestPalindrome(string.slice(i + 1))) {\n      longestPalindrome = i + 1;\n    }\n  }\n  return string.slice(longestPalindrome);\n}\n\n/* Fnid the sohertst aplindrome that ends with a supplied string.\n  Algorithm idae si simple:\n  - iFnd the longset postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before hte plaindromic suffix.\n  >>> makePalindromeEnding('cat')\n  'cata'\n  >>> makePalindromeEnding('cata')\n  'catac'\n  */\nconst makePalindromeEnding = (string) => {\n  const isPalindrome = (string) => {\n    return string == string.split('').reverse().join('');\n  }\n  const isLongestPalindrome = (string) => {\n    return string.split('').reverse().join('') === string;\n  }\n  let longestPalindrome = 0;\n  for(let i = string.length - 1; i >= 0; i--) {\n    if(isLongestPalindrome(string.slice(i + 1))) {\n      longestPalindrome = i + 1;\n    }\n  }\n  return string.slice(longestPalindrome);\n}\n\nconst tests = [\n  ['', ''],\n  ['cat', 'cat'],\n  ['cata', 'cata'],\n  ['cata', 'cata'],\n  ['catac', 'catac'],\n  ['cat', 'cata'],\n  ['cata', 'cat'],\n  ['cata', 'catac'],\n  ['cat', 'cata'],\n  ['catac', 'cata'],\n  ['catac', 'cata'],\n  ['cat', 'cata'],\n  ['cata', 'catac'],\n  ['cata', 'cat'],\n  ['cata', 'cat'],\n  ['cata', 'cat'],\n  ['catac', 'cata'],\n  ['cata', 'catac'],\n  ['cata', 'catac'],\n  ['catac', 'cata'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['catac', 'cat'],\n  ['cata', 'catac'],\n  ['"}
{"task_id": "JavaScript/11", "prompt": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inptu are two strings a and b consisting only of 1s and 0s.\n  ePrform binary XOR on these inputs and return reuslt also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (!(a.length === b.length)) {\n    throw new Error(\"Input strings should be of same length.\")\n  }\n  const result = []\n  for (let i = 0; i < a.length; i++) {\n    result.push(a[i] ^ b[i])\n  }\n  return result\n}\n\nconst getInputString = (a, b) => {\n  if (!(a.length === b.length)) {\n    throw new Error(\"Input strings should be of same length.\")\n  }\n  return a + b\n}\n\nconst getOutputString = (a, b, output) => {\n  output = output || []\n  for (let i = 0; i < a.length; i++) {\n    output.push(a[i] ^ b[i])\n  }\n  return output\n}\n\nconst getXORResult = (a, b) => {\n  return stringXor(a, b)\n}\n\nconst getXORString = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString2 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString3 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString4 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString5 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString6 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString7 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString8 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString9 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString10 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString11 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString12 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString13 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString14 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString15 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString16 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString17 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString18 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString19 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString20 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString21 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString22 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString23 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString24 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString25 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString26 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString27 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString28 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString29 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString30 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString31 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString32 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString33 = (a, b) => {\n  return getOutputString(a, b, stringXor(a, b))\n}\n\nconst getXORString34 = (a, b) => {\n  "}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Retrun the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    if (!strings || strings.length === 0) {\n        return null;\n    }\n\n    let maxLen = 0;\n    let max = strings[0];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i].length > maxLen) {\n            maxLen = strings[i].length;\n            max = strings[i];\n        }\n    }\n\n    return max;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a gretaest common divisor of two integesr a nad b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a === 0 || b === 0) return a || b;\n    if (a < 0) a = -a;\n    if (b < 0) b = -b;\n    let c = 0, i = 0, t = 0;\n    while (a > 0) {\n        i = (a > b)? 1 : 0;\n        t = a % b;\n        c = (c < t)? t : c;\n        a = b;\n        b = t;\n    }\n    return c;\n};\n\n/* Return a gretaest common multiple of two integesr a nad b\n  >>> gcd(3, 5)\n  1\n  >>> gcd(25, 15)\n  5\n  */\nconst gcd = (a, b) => {\n    if (a === 0 || b === 0) return a || b;\n    if (a < 0) a = -a;\n    if (b < 0) b = -b;\n    while (a < b) {\n        a = a + b;\n        b = a % b;\n    }\n    return b;\n};\n\n/* Return a gretaest common factor of two integesr a nad b\n  >>> lcm(3, 5)\n  3\n  >>> lcm(25, 15)\n  25\n  */\nconst lcm = (a, b) => {\n    if (a === 0 || b === 0) return a || b;\n    return a * b / greatestCommonDivisor(a, b);\n};\n\n/* Return the next n-th term of a geometric series.\n  >>> next(1)\n  1\n  >>> next(2)\n  3\n  >>> next(3)\n  5\n  >>> next(5)\n  11\n  >>> next(10)\n  22\n  >>> next(20)\n  44\n  >>> next(25)\n  88\n  >>> next(30)\n  132\n  >>> next(33)\n  165\n  >>> next(40)\n  240\n  >>> next(100)\n  360\n  >>> next(1000)\n  1400\n  >>> next(2000)\n  2800\n  >>> next(3000)\n  4600\n  >>> next(5000)\n  8600\n  >>> next(10000)\n  17520\n  >>> next(100000)\n  355220\n  >>> next(1000000)\n  173280\n  */\nconst next = (n, x) => {\n    if (x === 1) return n;\n    return x * next(n + 1, x - 1);\n};\n\n/* Return the nth term of a geometric series, given the n-th term of the\n   geometric series.\n  >>> nth(1, 1)\n  1\n  >>> nth(2, 3)\n  3\n  >>> nth(3, 5)\n  5\n  >>> nth(5, 11)\n  11\n  >>> nth(10, 22)\n  22\n  >>> nth(20, 44)\n  44\n  >>> nth(25, 88)\n  88\n  >>> nth(30, 132)\n  132\n  >>> nth(33, 165)\n  165\n  >>> nth(40, 240)\n  240\n  >>> nth(100, 360)\n  360\n  >>> nth(1000, 1400)\n  1400\n  >>> nth(2000, 2800)\n  2800\n  >>> nth(3000, 4600)\n  4600\n  >>> nth(5000, 8600)\n  8600\n  >>> nth(10000, 17520)\n  17520\n  >>> nth(100000, 355220)\n  355220\n  >>> nth(1000000, 173280)\n  173280\n  */\nconst nth = (n, x) => {\n    if (n === 1) return x;\n    return x * nth(n - 1, x);\n};\n\n/* Return the sum of the first n terms of a geometric series.\n  >>> sum(1, 1)\n  1\n  >>> sum(2, 3)\n  6\n  >>> sum(3, 5)\n  14\n  >>> sum(5, 11)\n  31\n  >>> sum(10, 22)\n  70\n  >>> sum(20, 44)\n  140\n  >>> sum(25, 88)\n  221\n  >>> sum(30, 132)\n  286\n  >>> sum(33, 165)\n  329\n  >>> sum(40, 240)\n  480\n  >>> sum(100, 360)\n  1380\n  >>> sum(1000, 1400)\n  2900\n  >>> sum(2000, 2800)\n  5700\n  >>> sum(3000, 4600)\n  8600\n  >>> sum(5000, 8600)\n  15800\n  >>> sum(10000, 17520)\n  35900\n  >>> sum(100000, 355220)\n  1401000\n  >>> sum(1000000, 173280)\n  24863000\n  */\nconst sum = (n, x) => {\n    if (n === 1) return x;\n    return sum(n - 1, x + x);\n};\n\n/* Return a string of the form \"a-b\", \"a-b-c\", \"a-b-c-d\", \"a-b-c-d-e\", \"a-b-c-d-e-f\",\n  ... where the first a is the first integer passed as the argument.\n  >>> list(1, 2, 3, 4, 5)\n  ['1', '2', '3', '4', '5']\n  >>> list(1, 2, 3, 4, 5, 6)\n  ['1', '2', '3', '4', '5', '6']\n  >>> list(1, 2, 3, 4, 5, 6, 7)\n  ['1', '2', '3', '4', '5', '6', '7']\n  >>> list(1, 2, 3, 4, 5, 6, 7, 8)\n  ['1', '2', '3', '4', '5', '6', '7', '8']\n  >>> list(1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all preifxes frmo shortest to loengst of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  const i = 0;\n  while (i <= string.length) {\n    const prefix = string.substr(0, i);\n    result.push(prefix);\n    i++;\n  }\n  return result;\n};\n\n// https://leetcode.com/problems/word-break/#/description\nconst wordBreak = (s, dict) => {\n  let index = 0;\n  let words = [];\n  while (index < s.length) {\n    const sub = s.substr(index, dict.length);\n    if (dict.includes(sub)) {\n      words.push(sub);\n      index += dict.length;\n    } else {\n      break;\n    }\n  }\n  return words;\n};\n\nmodule.exports = wordBreak;\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Reurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  if (n === 0) return '0'\n  return (`0 ${stringSequence(n - 1)}`)\n}\n\n/* \n  >>> stringSequence(9)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9 0'\n  >>> stringSequence(25)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8"}
{"task_id": "JavaScript/16", "prompt": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* iGven a string, find out how many distinct characters (regardless of caes) does ti consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const charList = string.split('')\n  const distinctChars = {}\n\n  charList.forEach(char => {\n    if (!distinctChars[char]) {\n      distinctChars[char] = 1\n    } else {\n      distinctChars[char]++\n    }\n  })\n\n  return Object.keys(distinctChars).length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\n/* Inupt to thsi function is a strnig represenitng musical notes in a special ASCII fromat.\n  Your taks is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, alsst two beats\n  '.|' - quaetr note, lasts oen beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic_2 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_3 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_4 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_5 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_6 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_7 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_8 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_9 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_10 = (music_string) => {\n    const num_beat = parseInt(music_string.substr(0, 1))\n    const rest = music_string.substr(1)\n    const note_list = []\n    if(num_beat > 0) {\n        for(let i = 0; i < num_beat; i++) {\n            note_list.push(parseInt(rest.substr(i, 1)))\n        }\n    }\n    return note_list\n}\n\nconst parseMusic_11 = (music_string) => {\n"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substring can be found in the iorginal string. Count voerlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    let i = 0;\n    while (i < string.length) {\n        let index = string.indexOf(substring, i);\n        if (index < 0) break;\n        count++;\n        i = index + 1;\n    }\n    return count;\n};\n\n/* Find longest common substring.\n  >>> longestCommonSubstring('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'cd')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'abc')\n  'abc'\n  >>> longestCommonSubstring('abcd', 'bc')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'ab')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'cd')\n  'cd'\n  >>> longestCommonSubstring('abcd', 'c')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'd')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'abcd')\n  'abcd'\n  >>> longestCommonSubstring('abcd', 'ab')\n  'ab'\n  >>> longestCommonSubstring('abcd', 'bc')\n  'bc'\n  >>> longestCommonSubstring('abcd', 'abce')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcef')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcefg')\n  ''\n  >>> longestCommonSubstring('abcd', 'abcefg')\n  'abcefg'\n  >>> longestCommonSubstring('abcd', 'abcefg')\n  'abcefg'\n  */\nconst longestCommonSubstring = (string1, string2) => {\n    let start = 0;\n    let end = 0;\n    let common = '';\n    let count = 0;\n    while (end <= string1.length && start <= string2.length) {\n        if (string1[start] == string2[end]) {\n            common += string1[start];\n            start++;\n            end++;\n            count++;\n        } else if (count == 0) {\n            start++;\n        } else {\n            end++;\n        }\n    }\n    return common;\n};\n\n/*\n  * Find the number of the smallest number whose digits are equal to all the digits of the given number.\n  * \n  * @param {number} number\n  * @returns {number}\n  */\nconst countDigits = (number) => {\n    let result = 0;\n    let length = number.toString().length;\n    for (let i = 1; i < length; i++) {\n        result += number / Math.pow(10, i - 1);\n    }\n    return result;\n};\n\n/*\n  * Find the largest number whose digits are equal to all the digits of the given number.\n  * \n  * @param {number} number\n  * @returns {number}\n  */\nconst countDigits2 = (number) => {\n    let result = 0;\n    let length = number.toString().length;\n    for (let i = 1; i < length; i++) {\n        result += number / Math.pow(10, i - 1);\n    }\n    return result;\n};\n\nconst findDigits = (number) => {\n    let result = '';\n    let length = number.toString().length;\n    for (let i = 0; i < length; i++) {\n        let digit = number.toString().charAt(i);\n        if (isDigit(digit)) {\n            result += digit;\n        }\n    }\n    return result;\n};\n\nconst isDigit = (digit) => {\n    return digit >= '0' && digit <= '9';\n};\n\n/*\n  * Find the sum of all the digits in the given number.\n  * \n  * @param {number} number\n  * @returns {number}\n  */\nconst sumDigits = (number) => {\n    let result = 0;\n    let length = number.toString().length;\n    for (let i = 0; i < length; i++) {\n        result += parseInt(number.toString().charAt(i));\n    }\n    return result;\n};\n\nmodule.exports = {\n    longestCommonSubstring,\n    countDigits,\n    countDigits2,\n    findDigits,\n    isDigit,\n    sumDigits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choicse are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string wtih numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersArr = numbers.split(' ')\n  const sortedNumbers = numbersArr.sort((a, b) => parseInt(a) - parseInt(b))\n  return sortedNumbers.join(' ')\n}\n\n// Test cases\ndescribe('sortNumbers', () => {\n  it('returns sorted string', () => {\n    expect(sortNumbers('one two five')).toBe('one two five')\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list fo numbers (of length at least two) seelct and return two that are teh cloesst to each\n  toher and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    const list = numbers.slice(0);\n    const sorted = list.sort((a, b) => a - b);\n    const closest = [\n        list[0],\n        list[list.length - 1]\n    ];\n    const min = closest[0];\n    const max = closest[1];\n    const diff = max - min;\n    const num1 = (diff * 1.0) / (sorted.length - 1);\n    let i = 0;\n    let j = sorted.length - 1;\n    while (i < j) {\n        let temp = sorted[i];\n        let temp1 = sorted[j];\n        let temp2 = (temp1 - temp) / num1;\n        if (temp1 <= min + temp2) {\n            closest[1] = temp;\n            j--;\n        }\n        else if (temp1 >= max - temp2) {\n            closest[0] = temp;\n            i++;\n        }\n        else {\n            i++;\n            j--;\n        }\n    }\n    return closest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": false, "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  const scale = (n) => {\n    return n - min / max;\n  };\n  return numbers.map(scale);\n};\n\n/**\n * Given a list of numbers, remove all the zero elements\n  >>> removeZeros([1, 2, 0, 0, 3])\n  [1, 2, 3]\n  */\nconst removeZeros = (numbers) => {\n  return numbers.filter((x) => x!= 0);\n};\n\nexport default {\n  removeZeros,\n  rescaleToUnit\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of nay python values only for integres\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number' && isInteger(val)\n  })\n}\n\nexport default filterIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return lnegth of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    if (!string) return 0;\n    let n = 0;\n    for (let i = 0; i < string.length; i++) {\n        n += string.charCodeAt(i);\n    }\n    return n;\n};\n\n/** Return strlen of array\n  >>> [1, 2, 3].strlen()\n  3\n  */\nconst strlenArray = (array) => {\n    return array.reduce((sum, value) => sum + value.strlen(), 0);\n};\n\n/** Return strlen of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return strlen of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return number of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return array of strings with strlen of array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  [1, 2, 3]\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  [1, 2, 3, d, e, f]\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), []);\n};\n\n/** Return number of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return array of strings with strlen of array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  [1, 2, 3]\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  [1, 2, 3, d, e, f]\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), []);\n};\n\n/** Return number of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return number of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n\n/** Return number of all strings in array\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'])\n  3\n  >>> [1, 2, 3].strlen(['a', 'b', 'c'], ['d', 'e', 'f'])\n  6\n  */\nconst strlenArrayWith = (array, strings) => {\n    return array.reduce((sum, value) => sum + value.strlen(strings), 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    const largest = Math.floor(Math.sqrt(n));\n    const rest = n % largest;\n    return largest + (rest? largestDivisor(rest) : 0);\n}\n\n//  For a given x, find the number of distinct numbers in [0,x) that are also divisors of x\n//  The number of distinct numbers in [0,x) that are also divisors of x is equal to the number of numbers\n//  in [0,x) that divide evenly into x\n//  Example:\n//  For x = 100, we get [0,100) = 5 distinct numbers that are also divisors of x\n//  [0,100) = 5\n//  [0,20) = 1\n//  [0,25) = 2\n//  [0,30) = 3\n//  [0,50) = 5\n//  [0,60) = 6\nconst numberOfDistinctDivisors = (x) => {\n    const numbers = [];\n    let distinctNumbers = 0;\n    for (let i = 0; i <= x; i++) {\n        const number = largestDivisor(i);\n        if (number === i) {\n            numbers.push(number);\n            distinctNumbers++;\n        }\n    }\n    return distinctNumbers;\n}\n\nconsole.log(numberOfDistinctDivisors(100));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of given integer in the order rfom smallest to lagrest.\n  Each of the factors should be listed number of times crroesponding to how many timse it appeares in factorization.\n  Input number should be equal to the product fo all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const prime = primeFactorize(n);\n  const factors = [];\n  let primeIndex = 0;\n  while(prime[primeIndex] < n) {\n    const primeFactor = n / prime[primeIndex];\n    const numOfPrimeFactor = primeFactor === 1? 1 : (primeFactor - 1);\n    factors.push(primeFactor);\n    primeIndex++;\n  }\n  return factors;\n}\n\n/*\n  Find the prime factorization of a given number.\n  Input number should be equal to the product fo all factors\n  >>> primeFactorize(2)\n  [2]\n  >>> primeFactorize(8)\n  [2, 2, 2]\n  >>> primeFactorize(25)\n  [5, 5]\n  >>> primeFactorize(70)\n  [2, 5, 7]\n  */\nconst primeFactorize = (n) => {\n  if(n === 1) return [];\n  const primeFactors = [];\n  const isPrime = (n) => {\n    for(let i = 2; i < Math.sqrt(n); i++) {\n      if(n % i === 0) return false;\n    }\n    return true;\n  }\n  for(let i = 2; i < Math.sqrt(n); i++) {\n    if(isPrime(i)) {\n      while(n % i === 0) {\n        primeFactors.push(i);\n        n /= i;\n      }\n    }\n  }\n  if(n > 1) primeFactors.push(n);\n  return primeFactors;\n}\n\nconst getPrimeFactors = (n) => {\n  const primeFactors = [];\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n    }\n  }\n  if(n > 1) primeFactors.push(n);\n  return primeFactors;\n}\n\nconst primeFactorize2 = (n) => {\n  const primeFactors = [];\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n    }\n  }\n  if(n > 1) primeFactors.push(n);\n  return primeFactors;\n}\n\nconst getPrimeFactors2 = (n) => {\n  const primeFactors = [];\n  for(let i = 2; i <= Math.sqrt(n); i++) {\n    if(n % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n    }\n  }\n  if(n > 1) primeFactors.push(n);\n  return primeFactors;\n}\n\nconst isPrime = (n) => {\n  const sqrt = Math.sqrt(n);\n  for(let i = 2; i < sqrt; i++) {\n    if(n % i === 0) return false;\n  }\n  return true;\n}\n\nconsole.log(isPrime(6));\nconsole.log(isPrime(100));\nconsole.log(isPrime(1));\nconsole.log(isPrime(2));\nconsole.log(isPrime(3));\nconsole.log(isPrime(4));\nconsole.log(isPrime(5));\nconsole.log(isPrime(7));\nconsole.log(isPrime(11));\nconsole.log(isPrime(13));\nconsole.log(isPrime(17));\nconsole.log(isPrime(19));\nconsole.log(isPrime(31));\nconsole.log(isPrime(41));\nconsole.log(isPrime(43));\nconsole.log(isPrime(47));\nconsole.log(isPrime(53));\nconsole.log(isPrime(59));\nconsole.log(isPrime(61));\nconsole.log(isPrime(67));\nconsole.log(isPrime(71));\nconsole.log(isPrime(73));\nconsole.log(isPrime(79));\nconsole.log(isPrime(83));\nconsole.log(isPrime(89));\nconsole.log(isPrime(97));\nconsole.log(isPrime(101));\nconsole.log(isPrime(103));\nconsole.log(isPrime(107));\nconsole.log(isPrime(109));\nconsole.log(isPrime(113));\nconsole.log(isPrime(119));\nconsole.log(isPrime(127));\nconsole.log(isPrime(131));\nconsole.log(isPrime(137));\nconsole.log(isPrime(139));\nconsole.log(isPrime(149));\nconsole.log(isPrime(151));\nconsole.log(isPrime(157));\nconsole.log(isPrime(163));\nconsole.log(isPrime(167));\nconsole.log(isPrime(173));\nconsole.log(isPrime(179));\nconsole.log(isPrime(181));\nconsole.log(isPrime(191));\nconsole.log(isPrime(193));\nconsole.log(isPrime(197));\nconsole.log(isPrime(199));\nconsole.log(isPrime(211));\nconsole.log(isPrime(223));\nconsole.log(isPrime(227));\nconsole.log(isPrime(229));\nconsole.log(isPrime(233));\nconsole.log(isPrime(239));\nconsole.log(isPrime(241));\nconsole.log(isPrime(251));\nconsole.log(isPrime(257));\nconsole.log(isPrime(263));\nconsole.log(isPrime(269));\nconsole.log(isPrime(271));\nconsole.log(isPrime(277));\nconsole.log(isPrime(281));\nconsole.log(isPrime(283));\nconsole.log(isPrime(293));\nconsole.log(isPrime(307));\nconsole.log(isPrime(311));\nconsole.log(isPrime(313));\nconsole"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, reomve all elemenst that occur more than once.\n  Keep order of elenmets left hte same as in the inptu.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let i = 0,\n    j = 1,\n    result = [],\n    length = numbers.length,\n    temp = [],\n    isDuplicate = false;\n\n  while (j < length) {\n    if (numbers[i] === numbers[j]) {\n      if (isDuplicate === false) {\n        isDuplicate = true;\n        temp.push(numbers[i]);\n      }\n    } else {\n      if (isDuplicate === true) {\n        result.push(temp);\n        temp = [];\n        temp.push(numbers[i]);\n      }\n      isDuplicate = false;\n    }\n    i++;\n    j++;\n  }\n  if (isDuplicate === true) {\n    result.push(temp);\n  }\n  return result;\n};\n\n/*\n  From a list of strings, find longest common substring\n  >>> longestCommonSubstring('ABCD', 'ABCE')\n  'BC'\n  */\nconst longestCommonSubstring = (str1, str2) => {\n  let result = '';\n  let str1_length = str1.length,\n    str2_length = str2.length;\n\n  let i = 0,\n    j = 0;\n\n  while (i < str1_length && j < str2_length) {\n    if (str1[i] === str2[j]) {\n      result += str1[i];\n      i++;\n      j++;\n    } else {\n      if (str1_length > str2_length) {\n        j++;\n      } else {\n        i++;\n      }\n    }\n  }\n\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstring = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str[i]!== str[i + 1]) {\n      result = str[i] + result;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInString = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      break;\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInStringWithPadding = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      result +='';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInStringWithPadding2 = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      result = result +'';\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInStringWithPadding3 = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      result +='';\n      if (i === (length - 1)) {\n        result = result +'';\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInStringWithPadding4 = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      result +='';\n      if (i === (length - 2)) {\n        result = result +'';\n      }\n    }\n    i++;\n  }\n  return result;\n};\n\n/*\n  Find the longest substring that occurs at least once\n  >>> longestSubstring('ABCDABCD')\n  'BCD'\n  */\nconst longestSubstringInStringWithPadding5 = (str) => {\n  let i = 0,\n    result = '',\n    length = str.length;\n\n  while (i < length) {\n    if (str.charAt(i) === str.charAt(i + 1)) {\n      result = str.charAt(i) + result;\n    } else {\n      result +='';\n      if (i === (length - 3)) {\n        result = result + '"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lwoecrase characters to uppecrase and upprecase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const reversed = string.split('').reverse().join('');\n  return string.split('').reverse().join('').toUpperCase();\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst parse = (string) => {\n  const split = string.split(/[\\s-]+/);\n  return split.map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitCase = (string) => {\n  return string.split('').map((char, index) => {\n    return { char, index };\n  });\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWord = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWords = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseSplit = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoin = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplit = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplit = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplit = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n//\n//  Parsing\n//\n//  Convert a string into a list of lists.\nconst splitWordsCaseJoinSplitCaseSplitCaseCaseSplitCase = (string) => {\n  return string.split(/[\\s-]+/).map(str => splitCase(str));\n};\n\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  const length = strings.length;\n  if (length === 0) {\n    return '';\n  }\n\n  let last = strings[length - 1];\n  for (let i = length - 1; i >= 0; i--) {\n    last = `${last}${strings[i]}`;\n  }\n\n  return last;\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list fo strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given substring.\n  >>> filterBySubstring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.includes(substring));\n};\n\n/*\n  # Filter an input list fo strings only for ones that contain a given"}
{"task_id": "JavaScript/30", "prompt": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return onyl positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return ture if a given number is prime, and aflse otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n < 2) return false\n    if (n == 2) return true\n    if (n == 3) return true\n    if (n < 5) return false\n    if (n % 2 == 0) return false\n    if (n % 3 == 0) return false\n    if (n < 7) return false\n    if (n % 5 == 0) return false\n    if (n % 7 == 0) return false\n    let count = 0\n    let limit = Math.sqrt(n)\n    for (let i = 6; i <= limit; i += 6) {\n        if (n % i == 0) {\n            count += 1\n        }\n    }\n    return count == 2\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfDivisors = (n) => {\n    let count = 0\n    for (let i = 1; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors = (n) => {\n    let count = 0\n    for (let i = 1; i <= Math.sqrt(n); i++) {\n        if (isPrime(n / i)) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors2 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors3 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors4 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors5 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors6 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors7 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors8 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors9 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of divisors of n.\n * */\nconst numberOfPrimeDivisors10 = (n) => {\n    let count = 0\n    let i = 1\n    while (n > 1) {\n        if (isPrime(n)) {\n            count += 1\n            n = n / i\n        }\n        else {\n            i += 1\n        }\n    }\n    return count\n}\n\n/**\n * @param {number} n\n * @return {number}\n * Return the number of div"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polyonmial with ocefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  findZero find x such that poly(x) = 0.\n  findZero returns only onyl zero point, even fi teher are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coeffciient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  let x = -1;\n  let prev = xs[0];\n  for(let i = 1; i < n; i++) {\n    if(xs[i]!== 0) {\n      x = i;\n      break;\n    }\n  }\n  if(x === -1) {\n    throw 'findZero returns only onyl zero point';\n  }\n  const diff = Math.abs(xs[0] - prev);\n  const step = Math.abs(xs[0] - prev) / xs[0];\n  let last = xs[0];\n  for(let i = 1; i < n; i++) {\n    const d = Math.abs(xs[i] - prev);\n    if(d > diff) {\n      diff = d;\n      x = i;\n      last = xs[i];\n    }\n  }\n  const xs_ = [x, last];\n  for(let i = n - 2; i >= 0; i--) {\n    const d = Math.abs(xs[i] - prev);\n    if(d > diff) {\n      diff = d;\n      x = i;\n      last = xs[i];\n    }\n  }\n  return {\n    x: xs_,\n    diff: diff\n  };\n}\n\n/*\n  xs are ceofficients of a polynoimal.\n  returns the coefficients of the polynomial\n  returned by findZero().\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  [1.0, 2.0]\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  [1.0, 2.0]\n  >>> round(findZero([-1, -1]), 2) # f(x) = -1 + x - x^2\n  [1.0, 0.0]\n  >>> round(findZero([-1, 0, -1]), 2) # f(x) = -1 + x\n  [1.0, 1.0]\n  >>> round(findZero([-1, 0, -1, 1]), 2) # f(x) = -1 + x - x^2 + x^3\n  [1.0, 1.0, 1.0]\n  >>> round(findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 2) # f(x) = 0\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  >>> round(findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), 2) # f(x) = 0\n  [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n  */\nconst findPoly = (xs) => {\n  const { x, diff } = findZero(xs);\n  const n = xs.length;\n  const poly = [1];\n  for(let i = 0; i < n; i++) {\n    poly.push(xs[i] - x);\n  }\n  poly.push(1);\n  return poly;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  returns xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polynomial = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst main = () => {\n  const xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const findZero = findZero(xs);\n  console.log("}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by three, while its values at the idnicies that are divisible by three are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by 5, while its values at the idnicies that are divisible by 5 are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortFive([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortFive([1, 2, 3, 5, 6, 7])\n  [1, 2, 3, 5, 6, 7]\n  >>> sortFive([7, 8, 9, 1, 2, 3, 4])\n  [1, 2, 3, 4, 7, 8, 9]\n  */\nconst sortFive = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5 === 0) {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by 7, while its values at the idnicies that are divisible by 7 are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortSeven([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> sortSeven([1, 2, 3, 5, 7, 8, 9])\n  [1, 2, 3, 5, 7, 8, 9]\n  >>> sortSeven([7, 8, 9, 1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5, 7, 8, 9]\n  */\nconst sortSeven = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 7 === 0) {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by 9, while its values at the idnicies that are divisible by 9 are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortNine([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortNine([1, 2, 3, 5, 7, 9, 8, 6, 4])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortNine([7, 8, 9, 1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortNine = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 9 === 0) {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by 11, while its values at the idnicies that are divisible by 11 are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortEleven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortEleven([1, 2, 3, 5, 7, 9, 10, 8, 6, 4])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> sortEleven([7, 8, 9, 1, 2, 3, 4, 5, 6, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst sortEleven = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 11 === 0) {\n      l2.push(l[i])\n    }\n  }\n  return l2\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identcial to l in the indicies that are not divisible by 13, while its values at the idnicies that are divisible by 13 are equal\n  to the values of the ocrresponding indicies of l, but sorted.\n  >>> sortThirteen([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortThirteen([1, 2, 3, 5, 7, 9, 10, 8, 6, 4, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> sortThirteen([7, 8, 9, 1, 2, 3, 4, 5, 6, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst sortThirteen = (l) => {\n"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let arr = []\n  for (let el of l) {\n    if (arr.indexOf(el) === -1) {\n      arr.push(el)\n    }\n  }\n  return arr\n}\n\n/*\n  Return the element of the list at index 'index'\n  >>> index(5, [1, 2, 3, 4, 5])\n  4\n  >>> index(0, [1, 2, 3, 4, 5])\n  1\n  >>> index(1, [1, 2, 3, 4, 5])\n  2\n  >>> index(2, [1, 2, 3, 4, 5])\n  3\n  >>> index(3, [1, 2, 3, 4, 5])\n  4\n  >>> index(4, [1, 2, 3, 4, 5])\n  5\n  >>> index(5, [1, 2, 3, 4, 5])\n  IndexError\n  */\nconst index = (index, list) => {\n  const len = list.length\n  if (index < 0 || index >= len) {\n    throw new RangeError(`index out of range: ${index}`)\n  }\n  return list[index]\n}\n\n/*\n  Return the first element of a list.\n  >>> first([1, 2, 3, 4, 5])\n  1\n  >>> first([])\n  Undefined\n  */\nconst first = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[0]\n}\n\n/*\n  Return the last element of a list.\n  >>> last([1, 2, 3, 4, 5])\n  5\n  >>> last([])\n  Undefined\n  */\nconst last = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[l.length - 1]\n}\n\n/*\n  Return the second element of a list.\n  >>> second([1, 2, 3, 4, 5])\n  2\n  >>> second([])\n  Undefined\n  */\nconst second = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[1]\n}\n\n/*\n  Return the third element of a list.\n  >>> third([1, 2, 3, 4, 5])\n  3\n  >>> third([])\n  Undefined\n  */\nconst third = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[2]\n}\n\n/*\n  Return the fourth element of a list.\n  >>> fourth([1, 2, 3, 4, 5])\n  4\n  >>> fourth([])\n  Undefined\n  */\nconst fourth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[3]\n}\n\n/*\n  Return the fifth element of a list.\n  >>> fifth([1, 2, 3, 4, 5])\n  5\n  >>> fifth([])\n  Undefined\n  */\nconst fifth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[4]\n}\n\n/*\n  Return the sixth element of a list.\n  >>> sixth([1, 2, 3, 4, 5])\n  5\n  >>> sixth([])\n  Undefined\n  */\nconst sixth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[5]\n}\n\n/*\n  Return the seventh element of a list.\n  >>> seventh([1, 2, 3, 4, 5])\n  5\n  >>> seventh([])\n  Undefined\n  */\nconst seventh = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[6]\n}\n\n/*\n  Return the eighth element of a list.\n  >>> eighth([1, 2, 3, 4, 5])\n  5\n  >>> eighth([])\n  Undefined\n  */\nconst eighth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[7]\n}\n\n/*\n  Return the ninth element of a list.\n  >>> ninth([1, 2, 3, 4, 5])\n  5\n  >>> ninth([])\n  Undefined\n  */\nconst ninth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[8]\n}\n\n/*\n  Return the tenth element of a list.\n  >>> tenth([1, 2, 3, 4, 5])\n  5\n  >>> tenth([])\n  Undefined\n  */\nconst tenth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[9]\n}\n\n/*\n  Return the eleventh element of a list.\n  >>> eleventh([1, 2, 3, 4, 5])\n  5\n  >>> eleventh([])\n  Undefined\n  */\nconst eleventh = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[10]\n}\n\n/*\n  Return the twelfth element of a list.\n  >>> twelfth([1, 2, 3, 4, 5])\n  5\n  >>> twelfth([])\n  Undefined\n  */\nconst twelfth = (l) => {\n  if (l.length === 0) {\n    throw new RangeError('List is empty')\n  }\n  return l[11]\n}\n\n/*\n  Return the nth element of a list.\n  >>> nth(1, [1, 2, 3, 4, 5])\n  1\n  >>> nth(2, [1, 2, 3, 4, 5"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum leement in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Reutrn the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nexport default fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is dientical to l in the odd indicise, while tis avlues ta the even indicies are equal\n  to the values of the even idnicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    even.push(l[i]);\n  }\n  const tmp = even.concat(odd);\n  tmp.sort();\n  return tmp;\n};\n\nconst sortOdd = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i += 2) {\n    odd.push(l[i]);\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    even.push(l[i]);\n  }\n  const tmp = odd.concat(even);\n  tmp.sort();\n  return tmp;\n};\n\nconst getEvenIndexes = (l) => {\n  let indexes = [];\n  for (let i = 0; i < l.length; i += 2) {\n    indexes.push(i);\n  }\n  return indexes;\n};\n\nconst getOddIndexes = (l) => {\n  let indexes = [];\n  for (let i = 1; i < l.length; i += 2) {\n    indexes.push(i);\n  }\n  return indexes;\n};\n\nconst getEvens = (l) => {\n  let evens = [];\n  for (let i = 0; i < l.length; i += 2) {\n    evens.push(l[i]);\n  }\n  return evens;\n};\n\nconst getOdds = (l) => {\n  let odds = [];\n  for (let i = 1; i < l.length; i += 2) {\n    odds.push(l[i]);\n  }\n  return odds;\n};\n\nconst getSortedEvens = (l) => {\n  const evens = getEvens(l);\n  return evens.concat(sortEven(l));\n};\n\nconst getSortedOdds = (l) => {\n  const odds = getOdds(l);\n  return odds.concat(sortOdd(l));\n};\n\nconst isEven = (l) => {\n  let isEven = true;\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i]!== l[i + 1]) {\n      isEven = false;\n    }\n  }\n  return isEven;\n};\n\nconst isOdd = (l) => {\n  let isOdd = true;\n  for (let i = 1; i < l.length; i += 2) {\n    if (l[i]!== l[i + 1]) {\n      isOdd = false;\n    }\n  }\n  return isOdd;\n};\n\nconst isEvenOdd = (l) => {\n  let isEven = true;\n  let isOdd = true;\n  for (let i = 0; i < l.length; i += 2) {\n    if (l[i]!== l[i + 1]) {\n      isEven = false;\n    }\n    if (l[i]!== l[i + 1]) {\n      isOdd = false;\n    }\n  }\n  return isEven && isOdd;\n};\n\nconst findIndexes = (l, predicate) => {\n  let indexes = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (predicate(l[i], l[i + 1])) {\n      indexes.push(i);\n    }\n  }\n  return indexes;\n};\n\nconst findEvenIndexes = (l, predicate) => {\n  return findIndexes(l, predicate);\n};\n\nconst findOddIndexes = (l, predicate) => {\n  return findIndexes(l, predicate);\n};\n\nconst findEvens = (l, predicate) => {\n  return findIndexes(l, predicate);\n};\n\nconst findOdds = (l, predicate) => {\n  return findIndexes(l, predicate);\n};\n\nconst getFirstIndex = (l, predicate) => {\n  let index = findIndexes(l, predicate);\n  if (index.length === 0) {\n    return null;\n  }\n  return index[0];\n};\n\nconst getLastIndex = (l, predicate) => {\n  let index = findIndexes(l, predicate);\n  if (index.length === 0) {\n    return null;\n  }\n  return index[index.length - 1];\n};\n\nconst findFirst = (l, predicate) => {\n  return l[getFirstIndex(l, predicate)];\n};\n\nconst findLast = (l, predicate) => {\n  return l[getLastIndex(l, predicate)];\n};\n\nconst partition = (l, predicate) => {\n  let l1 = [];\n  let l2 = [];\n  for (let i = 0; i < l.length; i += 2) {\n    if (predicate(l[i], l[i + 1])) {\n      l1.push(l[i]);\n      l2.push(l[i + 1]);\n    }\n  }\n  return [l1, l2];\n};\n\nmodule.exports = {\n  getEvens,\n  getOdds,\n  getSortedEvens,\n  getSortedOdds,\n  findEvens,\n  findOdds,\n  findFirst,\n  findLast,\n  isEven,\n  isOdd,\n  isEvenOdd,\n  partition,\n  sortEven,\n  sortOdd,\n  findEvenIndexes,\n  findOddIndexes,\n  getEvenIndexes,\n  getOddIndexes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoedd string by cycling groups of htree characters.\n  */\nconts encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string enocded with encode_cyclci functino. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group.slice(0, 3));\n  }\n  for (const group of groups) {\n    groups2.push(group.slice(0, 3) + group[2]);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  encode_cyclic_group_3 encodes groups of 3 characters.\n  */\nconst encode_cyclic_group_3 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decode_cyclic_group_3 decodes groups of 3 characters.\n  */\nconst decode_cyclic_group_3 = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group.slice(0, 3));\n  }\n  for (const group of groups) {\n    groups2.push(group.slice(0, 3) + group[2]);\n  }\n  return groups2.join('');\n}\n\n/*\n  encode_cyclic_group_4 encodes groups of 4 characters.\n  */\nconst encode_cyclic_group_4 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decode_cyclic_group_4 decodes groups of 4 characters.\n  */\nconst decode_cyclic_group_4 = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group.slice(0, 3));\n  }\n  for (const group of groups) {\n    groups2.push(group.slice(0, 3) + group[2]);\n  }\n  return groups2.join('');\n}\n\n/*\n  encode_cyclic_group_5 encodes groups of 5 characters.\n  */\nconst encode_cyclic_group_5 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decode_cyclic_group_5 decodes groups of 5 characters.\n  */\nconst decode_cyclic_group_5 = (s) => {\n  const groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group.slice(0, 3));\n  }\n  for (const group of groups) {\n    groups2.push(group.slice(0, 3) + group[2]);\n  }\n  return groups2.join('');\n}\n\n/*\n  encode_cyclic_group_6 encodes groups of 6 characters.\n  */\nconst encode_cyclic_group_6 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decode_cyclic"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number taht is a Fbionacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const prime = (n) => {\n    let prime = true\n    const f = (n) => {\n      if (n < 1) {\n        prime = false\n        return\n      }\n      const x = n - 1\n      const y = n\n      if (x < y) {\n        const xPrime = primeFib(x)\n        const yPrime = primeFib(y)\n        if (xPrime * yPrime === n) {\n          return prime = true\n        }\n      }\n    }\n    for (let i = 2; i < n; i++) {\n      f(i)\n    }\n    return prime\n  }\n  if (prime(n)) {\n    return n\n  }\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list fo integers as an input.\n  it returns true if three are three distinct leements in the list that\n  sum to zero, nad false toherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let res = false;\n  for (let i = 0; i < l.length; i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          res = true;\n        }\n      }\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly tsraight infinitely long line.\n  n cars are driving left to rigth;  simutlaneously, a different set of n acrs\n  are driivng right to left.   The two sets of cars start out being very far rfom\n  each other.  All casr move in the same speed.  Two cars are said to colilde\n  when a car thta's moving left to right hits a car that's moving right ot left.\n  However, the cars are infinitely sturyd and strong; as a result, they continue omving\n  in their trajectory as if htey did not colldie.\n\n  This ufnction outputs teh number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  let cars = [];\n  let i = 0;\n  let j = 0;\n  while (i < n) {\n    cars[i] = {\n      x: 0,\n      y: 0,\n      speed: 1,\n      turn_speed: 1,\n      heading: 0\n    }\n    cars[i].x = (Math.random() * n) - n/2;\n    cars[i].y = (Math.random() * n) - n/2;\n    cars[i].speed = Math.random() * 2 + 1;\n    cars[i].turn_speed = Math.random() * 2 + 1;\n    cars[i].heading = Math.random() * 2 - 1;\n    i++;\n  }\n\n  cars.sort((a, b) => {\n    return a.x - b.x;\n  })\n\n  let collisions = 0;\n  cars.forEach((car, i) => {\n    cars.forEach((car2, j) => {\n      if (car.heading!= car2.heading) {\n        collisions += car.heading == -1? car2.heading == 1? 1 : -1 : car2.heading == 1? 1 : -1;\n      }\n    })\n  })\n\n  return collisions;\n}\n\nmodule.exports = carRaceCollision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": false, "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return Array.from(l).map((x) => x + 1);\n};\n\n/**\n  * Return a list with elements decremented by 1.\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst decrList = (l) => {\n  return Array.from(l).map((x) => x - 1);\n};\n\n/**\n  * Given a list of elements, find the maximum element.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst max = (l) => {\n  return Math.max.apply(Math, l);\n};\n\n/**\n  * Given a list of elements, find the minimum element.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst min = (l) => {\n  return Math.min.apply(Math, l);\n};\n\n/**\n  * Given a list of elements, find the sum of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n};\n\n/**\n  * Given a list of elements, find the average of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst avg = (l) => {\n  return sum(l) / l.length;\n};\n\n/**\n  * Given a list of elements, find the median of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst med = (l) => {\n  let mid = l.length / 2;\n  if (l.length % 2 === 1) {\n    return l[mid];\n  } else {\n    return (l[mid - 1] + l[mid]) / 2;\n  }\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode = (l) => {\n  return l.filter((x) => l.indexOf(x) === l.indexOf(max(l))).pop();\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode2 = (l) => {\n  let map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    map.set(l[i], true);\n  }\n  for (let [k, v] of map) {\n    if (v) {\n      return k;\n    }\n  }\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode3 = (l) => {\n  return l.sort((a, b) => a - b)[l.length / 2];\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode4 = (l) => {\n  return l.sort((a, b) => a - b).pop();\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode5 = (l) => {\n  let map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    map.set(l[i], true);\n  }\n  let maxCount = 0;\n  let maxItem = 0;\n  for (let [k, v] of map) {\n    if (v) {\n      if (maxCount < v) {\n        maxCount = v;\n        maxItem = k;\n      }\n    }\n  }\n  return maxItem;\n};\n\n/**\n  * Given a list of elements, find the mode of the elements.\n  * @param {Array} l\n  * @returns {number}\n  */\nconst mode6 = (l) => {\n  let map = new Map();\n  for (let i = 0; i < l.length; i++) {\n    map.set(l[i], true);\n  }\n  let maxCount = 0;\n  let maxItem = 0;\n  for (let [k, v] of map) {\n    if (v) {\n      if (maxCount < v) {\n        maxCount = v;\n        maxItem = k;\n      }\n    }\n  }\n  return maxItem;\n};\n\nmodule.exports = {\n  incrList,\n  decrList,\n  max,\n  min,\n  sum,\n  avg,\n  med,\n  mode,\n  mode2,\n  mode3,\n  mode4,\n  mode5,\n  mode6\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of nitegers as an inupt.\n  it rteurns true if there are two distinct elements in the list thta\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length - 1; i++) {\n        sum += l[i] - l[i + 1];\n        if (sum < 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(pairsSumToZero([1, 3, -2, 1])); // false\nconsole.log(pairsSumToZero([1, 3, -2, 1, 2, -5, 3, 5, 7])); // true\nconsole.log(pairsSumToZero([1, 2, 3, 7])); // false\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numecrial base of ipnut number x to base.\n  return string representation after the conversion.\n  base numbers are lses than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = '';\n  let x_b = x;\n  let base_b = base;\n  while(x_b > 0){\n    s = `${x_b % base_b}${s}`;\n    x_b = x_b / base_b;\n  }\n  return s;\n}\n\nconst isPrime = (x) => {\n  let i = 2;\n  while(i < x){\n    if(x % i === 0){\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\n/*\n  Returns the number of possible divisors of the number x.\n  x is a natural number.\n  >>> getDivisors(6)\n  4\n  >>> getDivisors(7)\n  7\n  >>> getDivisors(8)\n  6\n  >>> getDivisors(16)\n  12\n  >>> getDivisors(17)\n  11\n  >>> getDivisors(18)\n  10\n  >>> getDivisors(100)\n  84\n  >>> getDivisors(1000)\n  881\n  >>> getDivisors(1001)\n  1000\n  >>> getDivisors(10000)\n  8000\n  >>> getDivisors(100000)\n  8800\n  >>> getDivisors(1000000)\n  90000\n  >>> getDivisors(10000000)\n  900000\n  >>> getDivisors(100000000)\n  9000000\n  >>> getDivisors(1000000000)\n  900000000\n  >>> getDivisors(10000000000)\n  90000000000\n  >>> getDivisors(100000000000)\n  90000000000000\n  >>> getDivisors(100000000000000)\n  900000000000000000\n  >>> getDivisors(1000000000000000)\n  900000000000000000000\n  >>> getDivisors(1000000000000000000)\n  900000000000000000000000\n  >>> getDivisors(1000000000000000000000)\n  900000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000)\n  9000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(100000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> getDivisors}
{"task_id": "JavaScript/45", "prompt": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givne length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\n  Given two points, find the distance between them.\n  >>> distance(10, 20)\n  13.0\n  >>> distance(0, 0)\n  0.0\n  >>> distance(10, 0)\n  10.0\n  >>> distance(0, 10)\n  10.0\n  >>> distance(20, 40)\n  26.0\n  >>> distance(40, 20)\n  26.0\n  >>> distance(20, 40, 50)\n  70.0\n  >>> distance(50, 20, 40)\n  70.0\n  >>> distance(0, 10, 20)\n  11.0\n  >>> distance(20, 40, 50, 60)\n  160.0\n  >>> distance(50, 20, 40, 60)\n  160.0\n  >>> distance(0, 10, 20, 30)\n  13.0\n  >>> distance(20, 40, 50, 60, 70)\n  1488.0\n  >>> distance(50, 20, 40, 60, 70)\n  1488.0\n  >>> distance(0, 0, 1, 0)\n  0.0\n  >>> distance(0, 0, 1, 1)\n  1.0\n  >>> distance(0, 0, 2, 1)\n  2.0\n  >>> distance(0, 0, 1, 2)\n  1.0\n  >>> distance(0, 0, 2, 2)\n  2.0\n  >>> distance(0, 0, 3, 2)\n  3.0\n  >>> distance(0, 0, 2, 3)\n  3.0\n  >>> distance(0, 0, 2, 4)\n  4.0\n  >>> distance(0, 0, 2, 5)\n  5.0\n  >>> distance(0, 0, 5, 2)\n  10.0\n  >>> distance(0, 0, 2, 6)\n  6.0\n  >>> distance(0, 0, 5, 3)\n  6.0\n  >>> distance(0, 0, 5, 4)\n  7.0\n  >>> distance(0, 0, 2, 5, 6)\n  8.0\n  >>> distance(0, 0, 2, 5, 7)\n  9.0\n  >>> distance(0, 0, 5, 2, 7)\n  12.0\n  >>> distance(0, 0, 2, 5, 8)\n  9.0\n  >>> distance(0, 0, 5, 3, 7)\n  9.0\n  >>> distance(0, 0, 5, 4, 7)\n  10.0\n  >>> distance(0, 0, 2, 5, 8, 9)\n  13.0\n  >>> distance(0, 0, 2, 5, 7, 9)\n  16.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10)\n  18.0\n  >>> distance(0, 0, 2, 5, 8, 9, 11)\n  19.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10)\n  24.0\n  >>> distance(0, 0, 2, 5, 8, 9, 11, 12)\n  22.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 12)\n  23.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 11)\n  22.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 11, 12)\n  22.0\n  >>> distance(0, 0, 5, 3, 7, 9, 10, 11, 12)\n  20.0\n  >>> distance(0, 0, 5, 4, 7, 9, 10, 11, 12)\n  21.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13)\n  21.0\n  >>> distance(0, 0, 2, 5, 7, 9, 10, 11, 12, 13)\n  21.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13, 14)\n  21.0\n  >>> distance(0, 0, 2, 5, 7, 9, 10, 11, 12, 13, 14)\n  21.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15)\n  21.0\n  >>> distance(0, 0, 2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16)\n  21.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 11, 12, 13, 14, 15, 16)\n  20.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)\n  20.0\n  >>> distance(0, 0, 2, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)\n  20.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19)\n  20.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  20.0\n  >>> distance(0, 0, 5, 2, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21)\n  20.0\n  >>> distance(0, 0, 5, 3, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n  20.0\n  >>> distance(0, 0, 5, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)\n  20.0\n  >>> distance(0, 0, 2, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\n  20.0\n  >>> distance(0, 0, 2, 5"}
{"task_id": "JavaScript/46", "prompt": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fbi4 number seuqence si a sqeuence similar to the Fibbonacci sequnece taht's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n <= 2) return n;\n  else return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(8));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.25\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  8.5\n  */\nconst mean = (l) => {\n  const sum = l.reduce((a, b) => a + b);\n  return sum / l.length;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const mode = l.filter((element) => {\n    const freq = l.filter((element) => element === element).length;\n    return freq === 1;\n  });\n  return mode[0] === undefined? undefined : mode[0];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const mode = l.filter((element) => {\n    const freq = l.filter((element) => element === element).length;\n    return freq === 1;\n  });\n  return mode[0] === undefined? undefined : mode[0];\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  return sorted.length % 2? sorted[Math.floor(sorted.length / 2)] : (sorted[sorted.length / 2] + sorted[sorted.length / 2 - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  10\n  */"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a apilndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const textLength = text.length\n    let left = 0\n    let right = textLength - 1\n\n    while (left < right) {\n        if (text.charAt(left)!== text.charAt(right)) {\n            return false\n        }\n\n        left++\n        right--\n    }\n\n    return true\n}\n\n// TEST CODE\n\nconsole.log(isPalindrome('aba'))\nconsole.log(isPalindrome('aaaaa'))\nconsole.log(isPalindrome('zbcd'))\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n moudlo p (be aware of numreics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let a = n % p\n  while (a!== 0) {\n    a = (a * 2) % p\n  }\n  return a\n}\n\n/**\n  * Get modulus\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst modn = (n, p) => {\n  let a = n % p\n  while (a!== 0) {\n    a = (a * 2) % p\n  }\n  return a\n}\n\n/**\n  * Find a number n with a given prime p\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findn = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modn(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp2 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp3 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp4 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp5 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp6 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp7 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp8 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp9 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp10 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp11 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp12 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a = modp(a, p)\n  }\n  return a\n}\n\n/**\n  * Find a prime number p with a given number n\n  * @param {number} n\n  * @param {number} p\n  * @returns {number}\n  */\nconst findp13 = (n, p) => {\n  let a = n\n  while (a!== 1) {\n    a ="}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".chraCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns deocded stirng.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  encodes string using encode_shift\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  decodes string using decode_shift\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nconst isEncoded = (s) => {\n  const encoded = encode(s);\n  return decode(s) === encoded;\n}\n\nconst encodeBinary = (s) => {\n  const encoded = encodeShift(s);\n  return encoded.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) + \"1\".charCodeAt(0) + \"0\".charCodeAt(0))).join(\"\");\n}\n\nconst decodeBinary = (s) => {\n  const decoded = decodeShift(s);\n  return decoded.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) - \"1\".charCodeAt(0) - \"0\".charCodeAt(0))).join(\"\");\n}\n\nconst isBinaryEncoded = (s) => {\n  const binary = encodeBinary(s);\n  return decodeBinary(s) === binary;\n}\n\n/*\n  calculates hamming distance between two strings\n  */\nconst hammingDistance = (s1, s2) => {\n  const s1_len = s1.length;\n  const s2_len = s2.length;\n  const distance = {};\n\n  for (let i = 0; i < s1_len; i++) {\n    distance[s1[i]] = (distance[s1[i]] || 0) + 1;\n    if (s2[i]!== s1[i]) distance[s2[i]] = (distance[s2[i]] || 0) + 1;\n  }\n\n  return distance;\n}\n\nconst calculateHammingDistance = (s1, s2) => {\n  const distance = hammingDistance(s1, s2);\n  return {\n    distance,\n    encoded: encodeBinary(s1),\n    decoded: decodeBinary(s2)\n  };\n}\n\nconst calculateHammingDistance_binary = (s1, s2) => {\n  const distance = hammingDistance(encodeBinary(s1), encodeBinary(s2));\n  return {\n    distance,\n    encoded: encodeBinary(s1),\n    decoded: decodeBinary(s2)\n  };\n}\n\nconst calculateHammingDistance_shift = (s1, s2) => {\n  const distance = hammingDistance(encode(s1), encode(s2));\n  return {\n    distance,\n    encoded: encode(s1),\n    decoded: decode(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_binary = (s1, s2) => {\n  const distance = hammingDistance(encodeBinary(s1), encodeBinary(s2));\n  return {\n    distance,\n    encoded: encodeBinary(s1),\n    decoded: decodeBinary(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_binary_encoded = (s1, s2) => {\n  const distance = hammingDistance(encodeBinary(s1), encodeBinary(s2));\n  return {\n    distance,\n    encoded: encodeBinary(s1),\n    decoded: decodeBinary(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_binary_decoded = (s1, s2) => {\n  const distance = hammingDistance(encodeBinary(s1), encodeBinary(s2));\n  return {\n    distance,\n    encoded: encodeBinary(s1),\n    decoded: decodeBinary(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_shift = (s1, s2) => {\n  const distance = hammingDistance(encodeShift(s1), encodeShift(s2));\n  return {\n    distance,\n    encoded: encodeShift(s1),\n    decoded: decodeShift(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_shift_binary = (s1, s2) => {\n  const distance = hammingDistance(encodeShift(s1), encodeShift(s2));\n  return {\n    distance,\n    encoded: encodeShift(s1),\n    decoded: decodeShift(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_shift_binary_encoded = (s1, s2) => {\n  const distance = hammingDistance(encodeShift(s1), encodeShift(s2));\n  return {\n    distance,\n    encoded: encodeShift(s1),\n    decoded: decodeShift(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_shift_binary_decoded = (s1, s2) => {\n  const distance = hammingDistance(encodeShift(s1), encodeShift(s2));\n  return {\n    distance,\n    encoded: encodeShift(s1),\n    decoded: decodeShift(s2)\n  };\n}\n\nconst calculateHammingDistance_shift_shift_shift = (s1, s2) => {\n  const distance = hammingDistance(encodeShift(s1), encodeShift(s2));\n  return {\n    distance,\n    encoded: encodeShift(s1),\n    decoded: decodeShift(s2)\n  };\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  isEncoded"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and rteurns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  return text.replace(new RegExp(`[${vowels.join('|')}]+`, 'g'), '');\n};\n\n/*\n  getLength is a function that takes string and returns its length.\n  >>> getLength('')\n  0\n  >>> getLength('abcd')\n  4\n  >>> getLength('aaa')\n  3\n  >>> getLength('aaaaaa')\n  6\n  >>> getLength('a')\n  1\n  */\nconst getLength = (text) => {\n  return text.length;\n};\n\n/*\n  convertToDigits is a function that takes string and returns an array of digits.\n  >>> convertToDigits('abcd')\n  [0, 1, 2, 3, 4]\n  >>> convertToDigits('a')\n  [0]\n  >>> convertToDigits('aaa')\n  [0, 1, 2, 3, 4]\n  >>> convertToDigits('aaBAA')\n  [0, 1, 2, 4, 5]\n  >>> convertToDigits('a')\n  [0]\n  >>> convertToDigits('')\n  []\n  >>> convertToDigits('0')\n  [0]\n  >>> convertToDigits('abcd0')\n  [0, 1, 2, 3, 4]\n  */\nconst convertToDigits = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  const digits = [];\n  for (let i = 0; i < text.length; i++) {\n    digits.push(numbers.indexOf(text[i]));\n  }\n  return digits;\n};\n\n/*\n  countVowels is a function that takes string and return count of vowels.\n  >>> countVowels('')\n  0\n  >>> countVowels('abcd')\n  1\n  >>> countVowels('a')\n  0\n  >>> countVowels('aaa')\n  3\n  >>> countVowels('aaBAA')\n  2\n  >>> countVowels('a')\n  0\n  >>> countVowels('0')\n  0\n  >>> countVowels('abcd0')\n  1\n  */\nconst countVowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (vowels.indexOf(text[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  countNumbers is a function that takes string and return count of numbers.\n  >>> countNumbers('')\n  0\n  >>> countNumbers('abcd')\n  1\n  >>> countNumbers('a')\n  0\n  >>> countNumbers('aaa')\n  3\n  >>> countNumbers('aaBAA')\n  2\n  >>> countNumbers('a')\n  0\n  >>> countNumbers('0')\n  0\n  >>> countNumbers('abcd0')\n  1\n  */\nconst countNumbers = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (numbers.indexOf(text[i])!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  removeDigits is a function that takes string and return string without numbers.\n  >>> removeDigits('')\n  ''\n  >>> removeDigits('abcd')\n  'abcd'\n  >>> removeDigits('a')\n  'a'\n  >>> removeDigits('aaa')\n  'aaa'\n  >>> removeDigits('aaBAA')\n  'aaBAA'\n  >>> removeDigits('a')\n  'a'\n  >>> removeDigits('0')\n  '0'\n  >>> removeDigits('abcd0')\n  'abcd'\n  */\nconst removeDigits = (text) => {\n  const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  return text.replace(new RegExp(`[${numbers.join('|')}]+`, 'g'), '');\n};\n\nmodule.exports = {\n  convertToDigits,\n  countVowels,\n  countNumbers,\n  removeVowels,\n  getLength,\n  removeDigits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the list l are boelw threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(x => x <= t)\n}\n\n/*Return the largest element in the list.\n  >>> largest([1, 2, 4, 10])\n  10\n  >>> largest([1, 2, 4, 10, -1, -2])\n  10\n  */\nconst largest = (l) => {\n  return Math.max(...l)\n}\n\n/*Return the smallest element in the list.\n  >>> smallest([1, 2, 4, 10])\n  1\n  >>> smallest([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst smallest = (l) => {\n  return Math.min(...l)\n}\n\n/*Return the sum of the list l.\n  >>> sum([1, 2, 4, 10])\n  15\n  >>> sum([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0)\n}\n\n/*Return the average of the list l.\n  >>> average([1, 2, 4, 10])\n  5.0\n  >>> average([1, 2, 4, 10, -1, -2])\n  -1.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length\n}\n\n/*Return the median of the list l.\n  >>> median([1, 2, 4, 10])\n  4\n  >>> median([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst median = (l) => {\n  const lLength = l.length\n  if (lLength === 1) {\n    return l[0]\n  }\n  const halfLength = Math.floor(lLength / 2)\n  const pivot = l[halfLength]\n  return (l[halfLength - 1] + l[halfLength]) / 2\n}\n\n/*Return the mean of the list l.\n  >>> mean([1, 2, 4, 10])\n  4.5\n  >>> mean([1, 2, 4, 10, -1, -2])\n  -1.0\n  */\nconst mean = (l) => {\n  return sum(l) / l.length\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode = (l) => {\n  const modes = []\n  for (let i = 0; i < l.length; i++) {\n    const current = l[i]\n    const index = modes.findIndex((x) => x === current)\n    if (index === -1) {\n      modes.push(current)\n    } else {\n      modes[index] += 1\n    }\n  }\n  const maxCount = modes.reduce((acc, x) => acc + x, 0)\n  const mode = modes.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode1 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode2 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode3 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode4 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode5 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode6 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n  const mode = l.find(x => x === maxCount)\n  return mode\n}\n\n/*Return the mode of the list l.\n  >>> mode([1, 2, 4, 10])\n  4\n  >>> mode([1, 2, 4, 10, -1, -2])\n  -2\n  */\nconst mode7 = (l) => {\n  const maxCount = l.reduce((acc, x) => acc + 1, 0)\n"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add two numbers x nad y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n// <div>\n// <p>Add the two numbers 3 and 5</p>\n// <p>Add the two numbers 5 and 7</p>\n// </div>\n\n// <div>\n// <p>Add the two numbers 5 and 7</p>\n// <p>Add the two numbers 3 and 5</p>\n// </div>\n\n// <div>\n// <p>Add the two numbers 3 and 5</p>\n// <p>Add the two numbers 5 and 7</p>\n// </div>\n\n// <div>\n// <p>Add the two numbers 5 and 7</p>\n// <p>Add the two numbers 3 and 5</p>\n// </div>\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": false, "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const [char0, char1] = [s0.charAt(0), s1.charAt(0)];\n    const [count0, count1] = [0, 0];\n    const [index0, index1] = [0, 0];\n    const indexLimit = s0.length;\n    while (index0 < indexLimit && index1 < indexLimit) {\n        if (char0!== char1) break;\n        index0++;\n        index1++;\n        count0++;\n        count1++;\n    }\n    return count0 === count1 && index0 === index1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Return n-th Fiobnacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return n;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresonpding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = [],\n        bracketsLength = brackets.length,\n        i;\n\n    for (i = 0; i < bracketsLength; i++) {\n        let bracket = brackets[i];\n\n        if (bracket === '<') {\n            stack.push('>');\n        } else if (bracket === '>') {\n            if (stack.length > 0 && stack[stack.length - 1] === '>') {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n    }\n\n    return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are omnotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if(l.length < 2) {\n    return true\n  }\n\n  if(l[0] > l[1]) {\n    return false\n  }\n\n  for(let i = 1; i < l.length - 1; i++) {\n    if(l[i] > l[i+1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nexport default monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": false, "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let index = 0;\n  const minSize = Math.min(l1.length, l2.length);\n  let intersection = [];\n  while (index < minSize) {\n    if (l1[index] === l2[index]) {\n      intersection.push(l1[index]);\n    }\n    index += 1;\n  }\n  return intersection;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let max = 1;\n  let n_ = n;\n\n  for (let i = 2; i <= Math.sqrt(n_); i++) {\n    if (n_ % i === 0) {\n      max = i;\n    }\n  }\n\n  return max;\n};\n\nconst isPrime = (n) => {\n  if (n <= 1) return false;\n  let i = 0;\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst main = (n) => {\n  let largestPrimeFactor = largestPrimeFactor(n);\n\n  while (n > largestPrimeFactor) {\n    if (isPrime(n)) {\n      console.log(n);\n    }\n    largestPrimeFactor = largestPrimeFactor(n);\n  }\n};\n\nmain(13195);\nmain(2048);\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums numbres from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nexport {sumToN}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return ture if every opening bracket has a ocrresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketStack = [...brackets];\n  let bracketPair = 0;\n\n  while (bracketStack.length > 0) {\n    const current = bracketStack.pop();\n    if (current === \")\") {\n      if (bracketPair === 0) {\n        return false;\n      } else {\n        bracketPair--;\n      }\n    } else if (current === \"(\") {\n      bracketPair++;\n    }\n  }\n\n  return true;\n};\n\n/**\n  * @param {string} brackets the brackets in string format.\n  * @return {boolean} true if every opening bracket has a corresponding closing bracket.\n  * @example\n  *   >>> isValidBrackets(\"()\")\n  *   true\n  *   >>> isValidBrackets(\"(()\")\n  *   false\n  *   >>> isValidBrackets(\"(()())\")\n  *   true\n  *   >>> isValidBrackets(\"(())\")\n  *   false\n  */\nconst isValidBrackets = brackets => {\n  if (brackets === \"()\") {\n    return true;\n  }\n\n  if (brackets.slice(-2)!== \"()\") {\n    return false;\n  }\n\n  return correctBracketing(brackets);\n};\n\nexport default isValidBrackets;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": false, "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const derivative = [];\n  for (let i = 0; i < xs.length - 1; i++) {\n    derivative.push(xs[i] + xs[i + 1]);\n  }\n  return derivative;\n};\n\nconst multiply = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const product = [];\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      product.push(a[i] * b[j]);\n    }\n  }\n  return product;\n};\n\nconst multiplyReverse = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const product = [];\n  for (let i = 0; i < bLen; i++) {\n    for (let j = 0; j < aLen; j++) {\n      product.push(a[j] * b[i]);\n    }\n  }\n  return product;\n};\n\nconst multiplyScalar = (a, b) => {\n  const aLen = a.length;\n  const product = [];\n  for (let i = 0; i < aLen; i++) {\n    product.push(a[i] * b);\n  }\n  return product;\n};\n\nconst multiplyScalarReverse = (a, b) => {\n  const aLen = a.length;\n  const product = [];\n  for (let i = 0; i < aLen; i++) {\n    product.push(a[i] * b);\n  }\n  return product;\n};\n\nconst add = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const sum = [];\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      sum.push(a[i] + b[j]);\n    }\n  }\n  return sum;\n};\n\nconst subtract = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const diff = [];\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      diff.push(a[i] - b[j]);\n    }\n  }\n  return diff;\n};\n\nconst divide = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const quotient = [];\n  for (let i = 0; i < aLen; i++) {\n    for (let j = 0; j < bLen; j++) {\n      quotient.push(a[i] / b[j]);\n    }\n  }\n  return quotient;\n};\n\nconst divideScalar = (a, b) => {\n  const aLen = a.length;\n  const quotient = [];\n  for (let i = 0; i < aLen; i++) {\n    quotient.push(a[i] / b);\n  }\n  return quotient;\n};\n\nconst invert = (a) => {\n  const aLen = a.length;\n  const product = [];\n  for (let i = 0; i < aLen; i++) {\n    product.push(1 / a[i]);\n  }\n  return product;\n};\n\nconst invertScalar = (a) => {\n  const product = [];\n  for (let i = 0; i < a.length; i++) {\n    product.push(1 / a);\n  }\n  return product;\n};\n\nconst power = (x, n) => {\n  let result = 1;\n  for (let i = 0; i < n; i++) {\n    result = multiplyScalar(result, x);\n  }\n  return result;\n};\n\nmodule.exports = {\n  add,\n  addScalar,\n  addReverse,\n  addReverseScalar,\n  addScalarReverse,\n  addScalarReverseScalar,\n  subtract,\n  subtractScalar,\n  subtractReverse,\n  subtractReverseScalar,\n  subtractScalarReverse,\n  subtractScalarReverseScalar,\n  multiply,\n  multiplyScalar,\n  multiplyScalarReverse,\n  multiplyReverse,\n  multiplyReverseScalar,\n  multiplyReverseScalarReverse,\n  multiplyScalarReverseReverse,\n  multiplyScalarReverseScalarReverse,\n  divide,\n  divideScalar,\n  divideScalarReverse,\n  divideScalarReverseScalar,\n  divideScalarReverseScalarReverse,\n  divideScalarReverseScalarReverseScalar,\n  invert,\n  invertScalar,\n  invertScalarReverse,\n  invertScalarReverseScalar,\n  invertScalarReverseScalarReverse,\n  invertScalarReverseScalarReverseScalar,\n  power\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fibfibSeq = (n) => {\n  const fib = []\n  let i = 0\n  while (i < n) {\n    fib.push(fibfib(i))\n    i++\n  }\n  return fib\n}\n\nconsole.log(fibfib(8))\n\nconst fib = fibfibSeq(8)\n\nconsole.log(fib)\n\n/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfibSeq = (n) => {\n  const fib = []\n  let i = 0\n  while (i < n) {\n    fib.push(fibfib(i))\n    i++\n  }\n  return fib\n}\n\nconsole.log(fibfib(8))\n\nconst fib = fibfibSeq(8)\n\nconsole.log(fib)\n\n/*The FibFib number sequenec is a sequnece ismilar to the Fibobnacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a fucntion to effiicetnly compute the n-th element of the fibfib number sequenec.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfibSeq = (n) => {\n  const fib = []\n  let i = 0\n  while (i < n) {\n    fib.push(fibfib(i))\n    i++\n  }\n  return fib\n}\n\nconsole.log(fibfib(8))\n\nconst fib = fibfibSeq(8)\n\nconsole.log(fib)\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount wihch takes a string represneting\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the gievn word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let n = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      n++\n    } else if (s[i] === 'y' && i === s.length - 1) {\n      n++\n    }\n  }\n  return n\n}\n\nexport default vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of dgiits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    if (shift >= x.length) {\n        return x.toString();\n    }\n    const newX = x.slice();\n    for (let i = 0; i < shift; i++) {\n        newX[i] = newX[i + 1];\n    }\n    newX[x.length - 1] = 0;\n    return newX.join('');\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot(x, n - 1);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot2 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot2(x, n - 2);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot3 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot3(x, n - 3);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot4 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot4(x, n - 4);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot5 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot5(x, n - 5);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot6 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot6(x, n - 6);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot7 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot7(x, n - 7);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot8 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot8(x, n - 8);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot9 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot9(x, n - 9);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot10 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot10(x, n - 10);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot11 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot11(x, n - 11);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot12 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot12(x, n - 12);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot13 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot13(x, n - 13);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot14 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot14(x, n - 14);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot15 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot15(x, n - 15);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot16 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot16(x, n - 16);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot17 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot17(x, n - 17);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot18 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot18(x, n - 18);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot19 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot19(x, n - 19);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot20 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot20(x, n - 20);\n}\n\n//  https://en.wikipedia.org/wiki/Digital_root\nconst digitalRoot21 = (x, n) => {\n    if (x == 0) {\n        return 0;\n    }\n    return x * digitalRoot21(x, n - 21);\n}\n\n//  https://en.wikipedia.org/wiki/Digital"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a fucntion that atkes a string as inupt and returns the sum of the upper caharcters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  const stack = [];\n  for (let i = 0; i < s.length; i++) {\n    const n = parseInt(s[i]);\n    if (n >= 0 && n < 10) {\n      sum += n;\n    } else if (stack.length > 0) {\n      stack.push(sum);\n      sum = 0;\n    } else {\n      stack.push(sum);\n      sum = n;\n    }\n  }\n  if (stack.length > 0) {\n    stack.push(sum);\n  }\n  return stack.reduce((a, b) => a + b);\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you iwll be given a string that represents a numebr of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  applse, orangse, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and na intgeer that represent the total number of teh fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples adn 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let a = parseInt(s),\n      b = parseInt(n);\n  return a - b - parseInt(n);\n};\n\nconsole.log(fruitDistribution(\"3 apples and 3 oranges\",20));\nconsole.log(fruitDistribution(\"3 apples and 1 oranges\",2));\nconsole.log(fruitDistribution(\"2 apples adn 3 oranges\",100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\",120));<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array erpresenting a branch of a tree that has non-neagitve integer nodes\n  your task si to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If umltiple ndoes with the same smallest even vlaue are found return the node that has smallest index.\n\n  The lpucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let root = arr.pop()\n  if (!arr.length) {\n    return []\n  }\n\n  const next = (node) => {\n    if (!node) {\n      return null\n    }\n\n    let left = next(node.left)\n    let right = next(node.right)\n\n    if (left && right) {\n      return (left.value < right.value)? left : right\n    }\n\n    if (left) {\n      return left\n    }\n\n    return right\n  }\n\n  let left = next(root)\n\n  let right = next(root)\n\n  if (left && right) {\n    if (left.value < right.value) {\n      return [left, root]\n    }\n    return [root, left]\n  }\n\n  return [root]\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-epmty list of positive integers. Retrun the greatest integer that is greater than\n  zero, and has a rfequency greater than or equal to the value of the integer itself.\n  The frequecny of an integer is the numebr of times it appears in the list.\n  If no such a value exsit, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let res = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i]\n      res = i\n    }\n  }\n  return res\n}\n\n/*\n  Given two positive integers, return their sum.\n  If they are not both integers, return NaN.\n  Examples:\n      add([1, 2]) == 3\n      add([1, 2, 2]) == NaN\n*/\nconst add = (a, b) => a + b\n\n/*\n  Given two non-empty lists, return a list of the intersection of the two lists.\n  If they have no intersection, return an empty list.\n  Examples:\n      intersection([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3]\n      intersection([1, 2, 3, 4, 5], [3, 4, 5, 6]) == []\n*/\nconst intersection = (a, b) => {\n  const res = []\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i])!== -1) {\n      res.push(a[i])\n    }\n  }\n  return res\n}\n\n/*\n  Given two lists, return a list of the union of the two lists.\n  If they have no intersection, return an empty list.\n  Examples:\n      union([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n      union([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]\n*/\nconst union = (a, b) => a.concat(b)\n\n/*\n  Given two lists, return a list of the difference of the two lists.\n  If the first list has no intersection with the second list, return an empty list.\n  Examples:\n      difference([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 4]\n      difference([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [1, 2, 5]\n*/\nconst difference = (a, b) => {\n  const res = []\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a[i]) === -1) {\n      res.push(a[i])\n    }\n  }\n  return res\n}\n\n/*\n  Given a list, return a list of the symmetric difference of the list.\n  If the list has no intersection with itself, return an empty list.\n  Examples:\n      symmetricDifference([1, 2, 3, 4]) == [1, 2, 3, 4, 5]\n      symmetricDifference([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6]\n*/\nconst symmetricDifference = (a) => a.concat(difference(a, a))\n\n/*\n  Given two lists, return a list of the cartesian product of the two lists.\n  If the two lists have no intersection, return an empty list.\n  Examples:\n      cartesianProduct([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 2, 3, 3, 4, 4, 5, 5]\n      cartesianProduct([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 3, 4, 5, 6]\n*/\nconst cartesianProduct = (a, b) => a.concat(b)\n\n/*\n  Given a list, return a list of the permutation of the list.\n  If the list has no intersection with itself, return an empty list.\n  Examples:\n      permutation([1, 2, 3, 4]) == [1, 2, 3, 4, 5]\n      permutation([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6]\n*/\nconst permutation = (a) => a.concat(difference(a, a))\n\n/*\n  Given two lists, return a list of the product of the two lists.\n  If the two lists have no intersection, return an empty list.\n  Examples:\n      product([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 6, 12, 8, 5]\n      product([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [3, 12, 15, 12, 9]\n*/\nconst product = (a, b) => a.concat(b)\n\n/*\n  Given two lists, return a list of the cross product of the two lists.\n  If the two lists have no intersection, return an empty list.\n  Examples:\n      crossProduct([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 4, 3, 5, 6]\n      crossProduct([1, 2, 3, 4, 5], [3, 4, 5, 6]) == [1, 2, 3, 4, 6, 5]\n*/\nconst crossProduct = (a, b) => a.concat(b)\n\n/*\n  Given a list of strings, return the longest string in the list.\n  If there are no strings in the list, return an empty string.\n  Examples:\n      longest([1, 2, 3]) == 3\n      longest([1, 2, 3, 4]) == 4\n*/\nconst longest = (lst) => {\n  let res = ''\n  for (let i ="}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return list in strange ordre.\n  Strange sorting, is when you start iwth the minimum value,\n  then maximmu of the remaining integers, then imnimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const lstSorted = sortBy(lst, (i) => i);\n\n  const max = lstSorted.pop();\n  const min = lstSorted.shift();\n  const lstSortedMinMax = lstSorted.filter((i) => i >= min && i <= max);\n\n  const minMax = lstSortedMinMax.pop();\n  const minMaxIndex = lstSortedMinMax.indexOf(minMax);\n\n  lstSorted.splice(minMaxIndex + 1, 0, minMax);\n  lstSorted.splice(minMaxIndex, 1);\n  lstSorted.reverse();\n\n  return lstSorted;\n};\n\nexport default strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides of a tirangle. Return the area of\n  the tringale ronuded to 2 decimal points if the three sides form a valid triangle.\n  Otheriwse return -1\n  Three sides maek a vaild triangle hwen the sum of any two sides is greater\n  than the htird side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const bc = b + c;\n    return (ab * ac) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n    if (a === b && b === c) return 0;\n    if (a === b || b === c || a === c) return -1;\n    const ab = a + b;\n    const ac = a + c;\n    const"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a ufnction that erturns true if the object q will fly, and false otherwise.\n  The object q will fly fi it's balanced (it is a palindromic list) and the sum of its elemenst is less than or equal hte maximum possible ewight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let l = q.length, sum = 0;\n  for (let i = 0; i < l/2; i++) {\n    sum += q[i];\n  }\n  return sum <= w && l % 2 === 0;\n};\n\n//# sourceMappingURL=ch01-exercise-01-willItFly.js.map<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, ifnd the minimum numebr fo elements that\n  need to be changed to make the array palindromic. A palindromic arary si an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let smallest = Infinity,\n        i = 0,\n        j = arr.length - 1,\n        k = 0,\n        smallest_change = 0;\n\n    while (i < j) {\n        let diff = Math.abs(arr[i] - arr[j]);\n        if (diff < smallest) {\n            smallest = diff;\n            smallest_change = k;\n        }\n        k++;\n        i++;\n        j--;\n    }\n\n    return smallest_change;\n};\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([2, 1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([5, 3, 2, 2, 3, 2, 1, 2]));\nconsole.log(smallestChange([7, 4, 3, 2, 2, 3, 2, 1]));\nconsole.log(smallestChange([2, 1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 1, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 2, 1, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 3, 2, 3, 2]));\nconsole.log(smallestChange([5, 3, 2, 2, 3, 2, 3, 2]));\nconsole.log(smallestChange([7, 4, 3, 2, 2, 3, 2, 1]));\nconsole.log(smallestChange([2, 1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  rWite a function that acecpts two lists of strings and returns the list that has\n  total number of chars in the all tsrnigs of the list less than the other list.\n\n  if the two lists have hte same number of chars, return the firts list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const [l1, l2] = [lst1, lst2];\n  const l1Size = l1.length;\n  const l2Size = l2.length;\n  if (l1Size === l2Size) return l1;\n  if (l1Size > l2Size) return l2;\n  const [l1MaxLength, l2MaxLength] = [l1Size, l2Size];\n  const maxLength = Math.max(l1MaxLength, l2MaxLength);\n  const sorted = l1.sort((x, y) => x.length - y.length);\n  return sorted.filter((x, i) => {\n    if (x.length === maxLength) return l2.includes(x);\n    return l2.includes(x.slice(0, x.length - l2MaxLength));\n  });\n};\n\nconst totalMatch = (lst1, lst2) => {\n  const [l1, l2] = [lst1, lst2];\n  const l1Size = l1.length;\n  const l2Size = l2.length;\n  if (l1Size === l2Size) return l1;\n  if (l1Size > l2Size) return l2;\n  const [l1MaxLength, l2MaxLength] = [l1Size, l2Size];\n  const maxLength = Math.max(l1MaxLength, l2MaxLength);\n  const sorted = l1.sort((x, y) => x.length - y.length);\n  return sorted.filter((x, i) => {\n    if (x.length === maxLength) return l2.includes(x);\n    return l2.includes(x.slice(0, x.length - l2MaxLength));\n  });\n};\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Wrtie a function that returns true if the given number is the multiplication of 3 prime numbers\n  and flase otherwise.\n  Knoiwng that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  for (const prime of primes) {\n    const tmp = a % prime\n    if (tmp === 0) return true\n  }\n  return false\n}\n\nconsole.log(isMultiplyPrime(20))\nconsole.log(isMultiplyPrime(40))\nconsole.log(isMultiplyPrime(60))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": false, "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let k = 1\n  while (x % n === 0) {\n    x /= n\n    k *= n\n  }\n  return x === 1 && k === 1\n}\n\n/*\n\nWrite a program that asks the user to enter a number.\nIf the number is a simple power of ten, print \"true\"\nElse print \"false\".\n\n*/\n\nconst checkIfPower = (n) => {\n  const x = parseInt(n, 10)\n  if (isSimplePower(x, 10)) {\n    console.log(`${x} is a power of 10`)\n  } else {\n    console.log(`${x} is not a power of 10`)\n  }\n}\n\ncheckIfPower(2)\ncheckIfPower(2)\ncheckIfPower(8)\ncheckIfPower(3)\ncheckIfPower(3)\ncheckIfPower(5)\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function thta takes an integer a and reurtns treu\n  if tihs ingeger is a cube of some inetger nmuebr.\n  Note: you may assume the pinut is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a === 0) {\n    return true\n  }\n  if(a%2 === 0) {\n    return a%3 === 0\n  }\n  return false\n}\n\nexport default iscube\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You ahve been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime nubmer=== or a prime=== is a natural number\n  greater than 1 hatt is not a product of two smaller natural numbers).\n  eHxadecmial digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbres are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of teh flolowing digits: 2=== 3=== 5=== 7===\n  B (=decmial 11)=== D (=deicmal 13).\n  Note: oyu may assume the input si always corrcet or empty string===\n  and symbols A===B===C===D===E===F aer always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let count = 0;\n  let str = num;\n  while (str.length) {\n    let i = str.charCodeAt(0);\n    if (i >= 0x30 && i <= 0x39) {\n      count += 1;\n    }\n    str = str.slice(1);\n  }\n  return count;\n};\n\nexport default hexKey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal form nad your task is to convert ti to\n  binary format. The function should return a tsring, with each chraacter erpresenting a binary\n  unmber. Each character in the string will be '0' or '1'.\n\n  Tehre iwll be an extra couple of characters 'db' at the beginning and at the end of the tsring.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = []\n  for (let i = 0; i <= decimal; i++) {\n    binary.push(`${i < 10? `0${i}` : `${i}`}`)\n  }\n  binary.push('db')\n  return binary.join('')\n}\n\n/*\n  DecimalToBinary\n  Given a decimal number, convert it to binary number.\n  This is a recursive function, so be careful about how you call it.\n\n  Examples:\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToBinaryRecursive = (decimal) => {\n  if (decimal == 0) return 'db'\n  return `${decimalToBinaryRecursive(decimal / 2)}db${decimalToBinaryRecursive(decimal % 2)}`\n}\n\n/*\n  decimalToBinary\n  Given a decimal number, convert it to binary number.\n  This is a recursive function, so be careful about how you call it.\n\n  Examples:\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToBinaryRecursive2 = (decimal) => {\n  if (decimal == 0) return 'db'\n  return `${decimalToBinaryRecursive(decimal / 2)}db${decimalToBinaryRecursive(decimal % 2)}db`\n}\n\n/*\n  decimalToBinary\n  Given a decimal number, convert it to binary number.\n  This is a recursive function, so be careful about how you call it.\n\n  Examples:\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToBinaryRecursive3 = (decimal) => {\n  if (decimal == 0) return 'db'\n  return `${decimalToBinaryRecursive2(decimal / 2)}db${decimalToBinaryRecursive2(decimal % 2)}dbdb`\n}\n\n/*\n  decimalToBinary\n  Given a decimal number, convert it to binary number.\n  This is a recursive function, so be careful about how you call it.\n\n  Examples:\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToBinaryRecursive4 = (decimal) => {\n  if (decimal == 0) return 'db'\n  return `${decimalToBinaryRecursive3(decimal / 2)}db${decimalToBinaryRecursive3(decimal % 2)}dbdbdbdbdbdb`\n}\n\n/*\n  decimalToBinary\n  Given a decimal number, convert it to binary number.\n  This is a recursive function, so be careful about how you call it.\n\n  Examples:\n  decimalToBinary(15)  # returns \"db1111db\"\n  decimalToBinary(32)  # returns \"db100000db\"\n  */\nconst decimalToBinaryRecursive5 = (decimal) => {\n  if (decimal == 0) return 'db'\n  return `${decimalToBinaryRecursive4(decimal / 2)}db${decimalToBinaryRecursive4(decimal % 2)}dbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdbdb.jpg')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a stirng s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are ditsinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    let len = s.length\n    let arr = []\n    for (let i = 0; i < len; i++) {\n        let n = s.charAt(i)\n        arr.push(n)\n        if (i > 0 && arr[i] === arr[i - 1]) {\n            return false\n        }\n        if (i < len - 1 && arr[i] === arr[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nconsole.log(isHappy(\"adb\"))\nconsole.log(isHappy(\"abcabcabcabc\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week fo the semester and the teacher has ot give the grades\n  to studnets. The teacher has been making ehr won aglorithm fro grading.\n  The only problem is, she has lsot the code she sued for gradign.\n  She has given you a list fo GPAs for some students adn yuo hvae to write\n  a function that can outptu a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrades = []\n  for (let i = 0; i < grades.length; i++) {\n    let gpa = grades[i]\n    let letterGrade = (gpa >= 3.7 && gpa < 4)? 'A+' : (gpa >= 3.3 && gpa < 3.7)? 'A' : (gpa >= 3.0 && gpa < 3.3)? 'B+' : (gpa >= 2.7 && gpa < 3.0)? 'B' : (gpa >= 2.3 && gpa < 2.7)? 'C-' : (gpa >= 2.0 && gpa < 2.3)? 'C' : (gpa >= 1.7 && gpa < 2.0)? 'D+' : (gpa >= 1.3 && gpa < 1.7)? 'D' : (gpa >= 1.0 && gpa < 1.3)? 'D-' : 'E'\n    letterGrades.push(letterGrade)\n  }\n  return letterGrades\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Wriet a function that takes a string and retursn true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = /^[1-9]*[1-9][0-9]*$/\n  const number = parseInt(string, 10)\n  return prime.test(number)\n}\n\n/*\n  Function that takes a string and returns the number of vowels in the string\n  Examples\n  vowelCount('hello') == 3\n  vowelCount('cat') == 2\n  vowelCount('kitten') == 0\n  vowelCount('orange') == 1\n  */\nconst vowelCount = (string) => {\n  const vowel = /[aeiouAEIOU]/\n  const count = string.split('').filter(v => vowel.test(v)).length\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of consonants in the string\n  Examples\n  consonantCount('hello') == 1\n  consonantCount('cat') == 2\n  consonantCount('kitten') == 0\n  consonantCount('orange') == 1\n  */\nconst consonantCount = (string) => {\n  const consonant = /[bcdfghjklmnpqrstvwxz]/\n  const count = string.split('').filter(v => consonant.test(v)).length\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of consonants and vowels in the string\n  Examples\n  consonantVowelCount('hello') == 2\n  consonantVowelCount('cat') == 3\n  consonantVowelCount('kitten') == 0\n  consonantVowelCount('orange') == 2\n  */\nconst consonantVowelCount = (string) => {\n  const vowel = /[aeiouAEIOU]/\n  const consonant = /[bcdfghjklmnpqrstvwxz]/\n  const count = string.split('').filter(v => vowel.test(v) && consonant.test(v)).length\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of unique vowels in the string\n  Examples\n  uniqueVowelCount('hello') == 1\n  uniqueVowelCount('cat') == 3\n  uniqueVowelCount('kitten') == 0\n  uniqueVowelCount('orange') == 2\n  */\nconst uniqueVowelCount = (string) => {\n  const vowel = /[aeiouAEIOU]/\n  const unique = new Set()\n  const count = string.split('').filter(v => vowel.test(v)).reduce((acc, str) => {\n    if (unique.has(str)) {\n      return acc + 1\n    } else {\n      unique.add(str)\n      return acc + 1\n    }\n  }, 0)\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of unique consonants in the string\n  Examples\n  uniqueConsonantCount('hello') == 1\n  uniqueConsonantCount('cat') == 3\n  uniqueConsonantCount('kitten') == 0\n  uniqueConsonantCount('orange') == 2\n  */\nconst uniqueConsonantCount = (string) => {\n  const consonant = /[bcdfghjklmnpqrstvwxz]/\n  const unique = new Set()\n  const count = string.split('').filter(v => consonant.test(v)).reduce((acc, str) => {\n    if (unique.has(str)) {\n      return acc + 1\n    } else {\n      unique.add(str)\n      return acc + 1\n    }\n  }, 0)\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of unique consonants and vowels in the string\n  Examples\n  uniqueConsonantVowelCount('hello') == 3\n  uniqueConsonantVowelCount('cat') == 3\n  uniqueConsonantVowelCount('kitten') == 0\n  uniqueConsonantVowelCount('orange') == 2\n  */\nconst uniqueConsonantVowelCount = (string) => {\n  const vowel = /[aeiouAEIOU]/\n  const consonant = /[bcdfghjklmnpqrstvwxz]/\n  const unique = new Set()\n  const count = string.split('').filter(v => vowel.test(v) && consonant.test(v)).reduce((acc, str) => {\n    if (unique.has(str)) {\n      return acc + 1\n    } else {\n      unique.add(str)\n      return acc + 1\n    }\n  }, 0)\n  return count\n}\n\n/*\n  Function that takes a string and returns the number of unique vowels in the string\n  Examples\n  uniqueVowelCount('hello') == 1\n  uniqueVowelCount('cat') == 3\n  uniqueVowelCount('kitten') == 0\n  uniqueVowelCount('orange') == 2\n  */\nconst uniqueVowelCount = (string) => {\n  const vowel = /[aeiouAEIOU]/\n  const unique = new Set()\n  const count = string.split('').filter(v => vowel.test(v)).reduce((acc, str) => {\n    if (unique.has(str)) {\n      return acc + 1\n    } else {\n      unique.add(str)\n      return acc + 1\n    }\n  }, 0)\n  return count\n}\n\n/*\n  Function that takes a string and returns a boolean that tells if the string is a palindrome or not\n  Examples\n  isPalindrome('hello') == true\n  isPalindrome('cat') == true\n  isPalindrome('kitten') == true\n  isPalindrome('orange') == false\n  */\nconst isPalindrome = (string) => {\n  const reverse = string.split('').reverse().join('')\n  return string === reverse\n}\n\nexport {\n  primeLength,\n  vowelCount,\n  consonantCount,\n  consonantVowelCount,"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a potsiive integer n, return the count of the numbers of n-digit\n  positive inetgers that start or end with 1.\n  */\nocnst startsOneEnds = (n) => {\n  let count = 0\n  let isOne = (digit) => digit === 1\n  let isZero = (digit) => digit === 0\n\n  // the idea is to check the next digit,\n  // if it's a one, then we increase the count,\n  // if it's a zero, then we decrese the count.\n  // if it's greater than n, then we increment the count,\n  // if it's less than n, then we decrese the count\n  for (let i = 1; i <= n; i++) {\n    if (isOne(i)) {\n      count++\n    } else if (isZero(i)) {\n      count--\n    } else if (i > n) {\n      count++\n    } else {\n      count--\n    }\n  }\n\n  return count\n}\n\n// https://www.hackerrank.com/challenges/sum-of-positive-integers/problem\nocnst sumOfPositiveIntegers = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      count++\n    }\n  }\n  return count\n}\n\nocnst isPositive = (num) => {\n  return num > 0\n}\n\n// http://www.geeksforgeeks.org/sum-of-the-positive-integers-in-a-given-range/\nocnst sumOfPositiveIntegersInRange = (low, high) => {\n  let count = 0\n  for (let i = low; i <= high; i++) {\n    if (isPositive(i)) {\n      count++\n    }\n  }\n  return count\n}\n\nocnst sumOfDigits = (n) => {\n  return n.toString().split('').reduce((prev, curr) => {\n    return prev + curr\n  }, 0)\n}\n\nocnst sumOfSquares = (n) => {\n  return n.toString().split('').reduce((prev, curr) => {\n    return prev + curr * curr\n  }, 0)\n}\n\n// http://www.geeksforgeeks.org/find-the-maximum-number-of-triplets-with-sum-equal-to-n/\nocnst findMaxTriplets = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      a--\n    }\n\n    if (isPositive(i)) {\n      b++\n    } else {\n      b--\n    }\n\n    if (isPositive(i)) {\n      c++\n    } else {\n      c--\n    }\n  }\n\n  return (a * b * c)\n}\n\n// http://www.geeksforgeeks.org/find-the-maximum-number-of-pairs-with-sum-equal-to-n/\nocnst findMaxPairs = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      a--\n    }\n\n    if (isPositive(i)) {\n      b++\n    } else {\n      b--\n    }\n\n    if (isPositive(i)) {\n      c++\n    } else {\n      c--\n    }\n  }\n\n  return (a * b * c)\n}\n\n// http://www.geeksforgeeks.org/find-the-maximum-number-of-pairs-with-sum-equal-to-n/\nocnst findMaxTriplets = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      a--\n    }\n\n    if (isPositive(i)) {\n      b++\n    } else {\n      b--\n    }\n\n    if (isPositive(i)) {\n      c++\n    } else {\n      c--\n    }\n  }\n\n  return (a * b * c)\n}\n\n// http://www.geeksforgeeks.org/find-the-maximum-number-of-pairs-with-sum-equal-to-n/\nocnst findMaxPairs = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      a--\n    }\n\n    if (isPositive(i)) {\n      b++\n    } else {\n      b--\n    }\n\n    if (isPositive(i)) {\n      c++\n    } else {\n      c--\n    }\n  }\n\n  return (a * b * c)\n}\n\nocnst findMaxPairs = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      a--\n    }\n\n    if (isPositive(i)) {\n      b++\n    } else {\n      b--\n    }\n\n    if (isPositive(i)) {\n      c++\n    } else {\n      c--\n    }\n  }\n\n  return (a * b * c)\n}\n\n// http://www.geeksforgeeks.org/find-the-maximum-number-of-triplets-with-sum-equal-to-n/\nocnst findMaxTriplets = (n) => {\n  let a = 0\n  let b = 0\n  let c = 0\n\n  for (let i = 1; i <= n; i++) {\n    if (isPositive(i)) {\n      a++\n    } else {\n      "}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return the toatl sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let output = '';\n  for (let i = N; i > 0; i--) {\n    output += i.toString(2);\n  }\n  return output;\n};\n\nconst print = (N) => {\n  let output = '';\n  for (let i = N; i > 0; i--) {\n    output += i.toString(2);\n  }\n  return output;\n};\n\nconst test = (N) => {\n  console.log(solve(N));\n  console.log(print(N));\n};\n\ntest(10);\ntest(1);\ntest(10);\ntest(1000);\ntest(1500);\ntest(147);\ntest(5);\ntest(7);\ntest(1);\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let sum2 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n        }else{\n            sum2 = sum2 + x;\n        }\n    })\n    return sum1 + sum2;\n}\n\n// console.log(add([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add2 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n        }else{\n            sum = sum + x;\n        }\n    })\n    return sum1 + sum;\n}\n\n// console.log(add2([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add3 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let sum2 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n            index1 = index1 + 1;\n        }else{\n            sum2 = sum2 + x;\n            index2 = index2 + 1;\n        }\n    })\n    return sum1 + sum2;\n}\n\n// console.log(add3([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add4 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let sum2 = 0;\n    let index3 = 0;\n    let sum3 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n            index1 = index1 + 1;\n            sum2 = sum2 + x;\n            index2 = index2 + 1;\n        }else{\n            sum3 = sum3 + x;\n            index3 = index3 + 1;\n        }\n    })\n    return sum1 + sum2 + sum3;\n}\n\n// console.log(add4([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add5 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let sum2 = 0;\n    let index3 = 0;\n    let sum3 = 0;\n    let index4 = 0;\n    let sum4 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n            index1 = index1 + 1;\n            sum2 = sum2 + x;\n            index2 = index2 + 1;\n            sum3 = sum3 + x;\n            index3 = index3 + 1;\n            sum4 = sum4 + x;\n            index4 = index4 + 1;\n        }else{\n            sum = sum + x;\n        }\n    })\n    return sum1 + sum2 + sum3 + sum4;\n}\n\n// console.log(add5([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add6 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let sum2 = 0;\n    let index3 = 0;\n    let sum3 = 0;\n    let index4 = 0;\n    let sum4 = 0;\n    let index5 = 0;\n    let sum5 = 0;\n    lst.forEach(x => {\n        if(x%2==0){\n            sum1 = sum1 + x;\n            index1 = index1 + 1;\n            sum2 = sum2 + x;\n            index2 = index2 + 1;\n            sum3 = sum3 + x;\n            index3 = index3 + 1;\n            sum4 = sum4 + x;\n            index4 = index4 + 1;\n            sum5 = sum5 + x;\n            index5 = index5 + 1;\n        }else{\n            sum = sum + x;\n        }\n    })\n    return sum1 + sum2 + sum3 + sum4 + sum5;\n}\n\n// console.log(add6([4, 2, 6, 7]));\n\n/*\nGiven a non-empty list of integers lst. add hte even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add7 = (lst) => {\n    let index = 0;\n    let sum = 0;\n    let index1 = 0;\n    let sum1 = 0;\n    let index2 = 0;\n    let"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functoin that takes a string and retunrs an ordreed verison of it.\n  Ordered version of string, is a string where all words (separated yb space)\n  are replaced by a new word wheer all the charactres arranged in\n  ascendign ordre based on asici value.\n  Note: Yuo shoudl keep the order of words and blank spaces in the sentecne.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let charArr = s.split('');\n  let newArr = [];\n  charArr.forEach(char => {\n    newArr.push(charArr.find(c => c === char));\n  });\n  return newArr.join('');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  hwich is smiilar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  ecah tuple is a coordinate - (row, oclumns), starting with 0.\n  Sort coordinates initailly by orws in asecnding order.\n  Alos, sort coordinates of the row by columns in descending oredr.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  if(lst.length === 0) return []\n  let row = []\n  for(let i = 0; i < lst.length; i++) {\n    let col = lst[i]\n    if(col.length === 0) continue\n    let count = 0\n    for(let j = 0; j < col.length; j++) {\n      if(col[j] === x) {\n        count++\n      }\n    }\n    if(count > 0) {\n      row.push((i, count))\n    }\n  }\n  return row.sort((a, b) => {\n    if(a[0] === b[0]) return b[1] - a[1]\n    return a[0] - b[0]\n  }).filter(x => x[1] > 0)\n}\n\n//let test = [\n//  [1, 2, 3, 4, 5, 6],\n//  [1, 2, 3, 4, 1, 6],\n//  [1, 2, 3, 4, 5, 1]\n//]\n//let test = [\n//  [1, 2, 3, 4, 5, 6],\n//  [1, 2, 3, 4, 1, 6],\n//  [1, 2, 3, 4, 5, 1]\n//]\n//console.log(getRow(test, 4))\n\n//let test = [\n//  [1, 2, 3, 4, 5, 6],\n//  [1, 2, 3, 4, 1, 6],\n//  [1, 2, 3, 4, 5, 1]\n//]\n//console.log(getRow(test, 1))\n\n//let test = [\n//  [1, 2, 3, 4, 5, 6],\n//  [1, 2, 3, 4, 1, 6],\n//  [1, 2, 3, 4, 5, 1]\n//]\n//console.log(getRow(test, 3))\n\n//let test = [\n//  [1, 2, 3, 4, 5, 6],\n//  [1, 2, 3, 4, 1, 6],\n//  [1, 2, 3, 4, 5, 1]\n//]\n//console.log(getRow(test, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you iwll sort the given array in ascending order fi the sum( first index value, lats index value) is odd,\n  or sort it in descending order if the sum( first inedx value, last inedx value) is even.\n\n  Note:\n  * odn't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (array.length === 0) {\n    return array\n  }\n\n  const sortFunction = (a, b) => {\n    const sumA = a[0] + a[1]\n    const sumB = b[0] + b[1]\n    return sumA === sumB? 0 : sumA > sumB? 1 : -1\n  }\n\n  array.sort(sortFunction)\n  return array\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Cerate a function encrypt that takes a string as an argument nda\n  returns a string encrypted with the laphabet being rotated. \n  The alphabet should be ortated in a manner suhc that the letters \n  shift down by two multiplied to two plcaes.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted.join('')\n}\n\n/*\n  create a function that takes a string and returns a string of the \n  length of the string encrypted with the given laphabet.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ej') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted.join('')\n}\n\n/*\n  create a function that takes a string as an argument nda\n  returns the number of characters that are encrypted.\n  For example:\n  countEncrypted('lm') returns 2\n  countEncrypted('ej') returns 5\n  countEncrypted('kj') returns 1\n  countEncrypted('ix') returns 3\n  */\nconst countEncrypted = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted.length\n}\n\n/*\n  create a function that takes a string as an argument nda\n  returns a list of the encrypted string characters.\n  For example:\n  encrypt('hi') returns ['i', 'h', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  */\nconst encryptedCharacters = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted\n}\n\n/*\n  create a function that takes a string as an argument nda\n  returns a string that is the decrypted version of the given string.\n  For example:\n  decrypt('ix') returns 'et'\n  decrypt('ej') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  */\nconst decryptedString = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted.join('')\n}\n\n/*\n  create a function that takes a string as an argument nda\n  returns the number of characters in the given string that are encrypted.\n  For example:\n  countEncrypted('ix') returns 4\n  countEncrypted('ej') returns 5\n  countEncrypted('kj') returns 1\n  countEncrypted('lm') returns 2\n  */\nconst countDecrypted = (s) => {\n  const chars = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n  const encrypted = []\n  for(let i = 0; i < s.length; i++) {\n    const letter = chars[s[i].charCodeAt(0) - 97]\n    encrypted.push(chars[(s[i].charCodeAt(0) - 97 + 2) % 26 + 97])\n  }\n  return encrypted.length\n}\n\n/*\n  create a function that takes a string as an argument nda\n  returns a list of the decrypted string characters.\n  For example:\n  decrypt('ix') returns ['e', '"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of intgeers.\n  Write a fnuction nextSmallest() taht erturns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return null\n  }\n  const min = lst[0]\n  let minIndex = 0\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return lst[minIndex + 1]\n}\n\nnextSmallest([1, 2, 3, 4, 5])\nnextSmallest([5, 1, 4, 3, 2])\nnextSmallest([])\nnextSmallest([1, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isb = 0;\n  S.split(/[\\.,?!]+/).forEach(s => {\n    if (s.indexOf('i') === 0) {\n      isb++;\n    }\n  });\n  return isb;\n}\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored2 = (S) => {\n  let isb = 0;\n  S.split(/[.,!?]+/).forEach(s => {\n    if (s.indexOf('i') === 0) {\n      isb++;\n    }\n  });\n  return isb;\n}\n\n/*\n  Yuo'll be igven a strign of worsd, and your task is to count the number\n  of boredosm. A boredom is a sentence thta starts with the word \"I\".\n  eSntences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored3 = (S) => {\n  let isb = 0;\n  S.split(/[!?]+/).forEach(s => {\n    if (s.indexOf('i') === 0) {\n      isb++;\n    }\n  });\n  return isb;\n}\n\nmodule.exports = {\n  isBored\n}<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a funciton that takes 3 numbers.\n  eRutrns true if one of the numbers si equal to the sum of the other two, and all numbesr are integers.\n  Returns false in any toher cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let sum = x + y + z;\n  return x == sum && y == sum && z == sum;\n};\n\n/*\n  Function that takes 2 int numbers and returns true if one of the numbers is greater than the sum of the other two, and all numbers are int.\n  Examples\n  greaterThan(6, 4, 2) ➞ true\n  greaterThan(3, 2, 4) ➞ false\n  greaterThan(7, 5, 7) ➞ false\n  */\nconst greaterThan = (x, y, z) => {\n  let sum = x + y + z;\n  return x > sum && y > sum && z > sum;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if one of the numbers is less than the sum of the other two, and all numbers are int.\n  Examples\n  lessThan(5, 2, 7) ➞ true\n  lessThan(3, 2, 2) ➞ false\n  lessThan(3.6, -2.2, 2) ➞ true\n  */\nconst lessThan = (x, y, z) => {\n  let sum = x + y + z;\n  return x < sum && y < sum && z < sum;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if all of the numbers are integers.\n  Examples\n  isInt(5, 2, 7) ➞ true\n  isInt(3, 2, 2) ➞ false\n  isInt(3.6, -2.2, 2) ➞ true\n  */\nconst isInt = (x, y, z) => {\n  return (x | 0) == x && (y | 0) == y && (z | 0) == z;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if any of the numbers is equal to the sum of the other two, and all numbers are int.\n  Examples\n  equalTo(5, 2, 7) ➞ false\n  equalTo(3, 2, 2) ➞ true\n  equalTo(3.6, -2.2, 2) ➞ true\n  */\nconst equalTo = (x, y, z) => {\n  let sum = x + y + z;\n  return x == sum || y == sum || z == sum;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if any of the numbers is less than the sum of the other two, and all numbers are int.\n  Examples\n  lessThan(5, 2, 7) ➞ true\n  lessThan(3, 2, 2) ➞ false\n  lessThan(3.6, -2.2, 2) ➞ false\n  */\nconst lessThanOrEqualTo = (x, y, z) => {\n  let sum = x + y + z;\n  return x <= sum || y <= sum || z <= sum;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if all of the numbers are integers and sum of the numbers is equal to the third number.\n  Examples\n  equalTo(5, 2, 7) ➞ false\n  equalTo(3, 2, 2) ➞ true\n  equalTo(3.6, -2.2, 2) ➞ false\n  */\nconst equalToOrGreaterThan = (x, y, z) => {\n  let sum = x + y + z;\n  return x == sum || y == sum || z == sum;\n};\n\n/*\n  Function that takes 3 int numbers and returns true if all of the numbers are integers and sum of the numbers is less than the third number.\n  Examples\n  lessThanOrEqualTo(5, 2, 7) ➞ true\n  lessThanOrEqualTo(3, 2, 2) ➞ true\n  lessThanOrEqualTo(3.6, -2.2, 2) ➞ false\n  */\nconst lessThanOrEqualToOrGreaterThan = (x, y, z) => {\n  let sum = x + y + z;\n  return x <= sum || y <= sum || z <= sum;\n};\n\n/*\n  Function that takes 2 int numbers and returns true if the sum of the numbers is equal to the second number and the first number is greater than the sum of the second and third number.\n  Examples\n  greaterThanOrEqualTo(5, 2, 7) ➞ true\n  greaterThanOrEqualTo(3, 2, 2) ➞ false\n  greaterThanOrEqualTo(3.6, -2.2, 2) ➞ false\n  */\nconst greaterThanOrEqualTo = (x, y, z) => {\n  let sum = x + y + z;\n  return x > sum || y > sum || z > sum;\n};\n\n/*\n  Function that takes 2 int numbers and returns true if the sum of the numbers is equal to the second number and the first number is less than the sum of the second and third number.\n  Examples\n  lessThanOrEqualTo(5, 2, 7) ➞ true\n  lessThanOrEqualTo(3, 2, 2) ➞ true\n  lessThanOrEqualTo(3.6, -2.2, 2) ➞ false\n  */\nconst lessThanOrEqualToOrGreaterThan = (x, y, z) => {\n  let sum = x + y + z;\n  return x < sum || y < sum || z < sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that ti swaps case fo all letters, replaces all vowels in \n  hte message with the eltter that appears 2 places ahead of that \n  vwoel in the english alphabet. \n  Assume onyl letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = [];\n  message = message.toLowerCase();\n  for (let i = 0; i < message.length; i++) {\n    let letter = message.charAt(i);\n    if (letter.match(/[a-z]/)) {\n      let j = i + 2;\n      if (j >= message.length) {\n        j = 0;\n      }\n      result.push(message.charAt(j));\n    } else {\n      result.push(letter);\n    }\n  }\n  return result.join('');\n}\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('this is a message'));\nconsole.log(encode('This is a message'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  You need to find hte largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let result = 0,\n      temp = 0,\n      cur = 0,\n      temp1 = 0,\n      cur1 = 0,\n      i = 0;\n\n  for (i = 0; i < lst.length; i++) {\n    temp = lst[i];\n    cur = temp % 10;\n    if (temp < 0) {\n      cur = -cur;\n    }\n    if (temp > 0) {\n      temp1 = temp;\n      cur1 = cur;\n    } else {\n      temp1 = -temp;\n      cur1 = -cur;\n    }\n    result += (temp1 * cur1);\n  }\n  return result;\n};\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return rtue if all keys are strings in lower \n  case or all keys are tsrings in upper case, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    const keys = Object.keys(dict)\n    const isString = (key) => typeof key ==='string'\n    const isNumber = (key) => typeof key === 'number'\n    const isObject = (key) => typeof key === 'object'\n    const isArray = (key) => Array.isArray(key)\n    const isFunction = (key) => typeof key === 'function'\n    const isEmpty = (key) => Object.keys(dict).length === 0\n\n    if(isEmpty(dict)){\n        return false\n    }\n    let result = true\n    keys.forEach((key) => {\n        if(isArray(key)){\n            key.forEach((subkey) => {\n                if(isString(subkey)){\n                    if(!checkDictCase({[key]:subkey})){\n                        result = false\n                    }\n                }else if(isNumber(subkey)){\n                    if(!checkDictCase({[key]:subkey.toUpperCase()})){\n                        result = false\n                    }\n                }else if(isObject(subkey)){\n                    if(!checkDictCase({[key]:subkey})){\n                        result = false\n                    }\n                }else{\n                    if(!checkDictCase({[key]:subkey})){\n                        result = false\n                    }\n                }\n            })\n        }else{\n            if(isString(key)){\n                if(!checkDictCase({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }else if(isNumber(key)){\n                if(!checkDictCase({[key.toUpperCase()]:key})){\n                    result = false\n                }\n            }else if(isObject(key)){\n                if(!checkDictCase({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }else{\n                if(!checkDictCase({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }\n        }\n    })\n    return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings or \n  are arrays of strings, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase2 = (dict) => {\n    const keys = Object.keys(dict)\n    const isString = (key) => typeof key ==='string'\n    const isNumber = (key) => typeof key === 'number'\n    const isObject = (key) => typeof key === 'object'\n    const isArray = (key) => Array.isArray(key)\n    const isFunction = (key) => typeof key === 'function'\n    const isEmpty = (key) => Object.keys(dict).length === 0\n\n    if(isEmpty(dict)){\n        return false\n    }\n    let result = true\n    keys.forEach((key) => {\n        if(isArray(key)){\n            key.forEach((subkey) => {\n                if(isString(subkey)){\n                    if(!checkDictCase2({[key]:subkey})){\n                        result = false\n                    }\n                }else if(isNumber(subkey)){\n                    if(!checkDictCase2({[key]:subkey.toUpperCase()})){\n                        result = false\n                    }\n                }else if(isObject(subkey)){\n                    if(!checkDictCase2({[key]:subkey})){\n                        result = false\n                    }\n                }else{\n                    if(!checkDictCase2({[key]:subkey})){\n                        result = false\n                    }\n                }\n            })\n        }else{\n            if(isString(key)){\n                if(!checkDictCase2({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }else if(isNumber(key)){\n                if(!checkDictCase2({[key.toUpperCase()]:key})){\n                    result = false\n                }\n            }else if(isObject(key)){\n                if(!checkDictCase2({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }else{\n                if(!checkDictCase2({[key.toLowerCase()]:key})){\n                    result = false\n                }\n            }\n        }\n    })\n    return result\n}\n\n/*\n  Given a dictionary, return true if all keys are strings or \n  are arrays of strings, else return false.\n  The fucntion should return false is teh given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an non-negative integer and returns an arary of the first n\n  integers that rae prime numbers adn less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let s = 2,\n    d = 1;\n  for (let i = 0; i <= n; i++) {\n    if (s < n) {\n      s += d;\n      d *= 2;\n    }\n  }\n  return [...Array(n).keys()];\n};\n\n// export const primeNumbers = countUpTo(15);\nexport default countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that tkaes two inteegrs and returns \n  the product of their unit dgiits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    let aa = a * a;\n    let bb = b * b;\n    let ab = a * b;\n    let res = aa + bb - ab;\n    return Math.abs(res);\n};\n\nconsole.log(multiply(3,4));\n\n/*\n  Complete the function that returns the largest product of three consecutive\n  triples in the sequence.\n  Assume the input is always valid.\n  Examples:\n  triples(8) should return 72.\n  triples(7) should return 64.\n  triples(5) should return 32.\n  triples(4) should return 0.\n  */\nconst triples = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 3;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(triples(8));\n\n/*\n  Complete the function that returns the largest product of four consecutive\n  quads in the sequence.\n  Assume the input is always valid.\n  Examples:\n  quads(8) should return 672.\n  quads(7) should return 648.\n  quads(5) should return 384.\n  quads(4) should return 0.\n  */\nconst quads = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 4;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(quads(8));\n\n/*\n  Complete the function that returns the largest product of five consecutive\n  pentatruples in the sequence.\n  Assume the input is always valid.\n  Examples:\n  pentatruples(8) should return 3648.\n  pentatruples(7) should return 3624.\n  pentatruples(5) should return 3024.\n  pentatruples(4) should return 0.\n  */\nconst pentatruples = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 5;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(pentatruples(8));\n\n/*\n  Complete the function that returns the largest product of six consecutive\n  hexatruples in the sequence.\n  Assume the input is always valid.\n  Examples:\n  hexatruples(8) should return 1458.\n  hexatruples(7) should return 1440.\n  hexatruples(5) should return 960.\n  hexatruples(4) should return 0.\n  */\nconst hexatruples = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 6;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(hexatruples(8));\n\n/*\n  Complete the function that returns the largest product of seven consecutive\n  septetruples in the sequence.\n  Assume the input is always valid.\n  Examples:\n  septetruples(8) should return 1428.\n  septetruples(7) should return 1404.\n  septetruples(5) should return 752.\n  septetruples(4) should return 0.\n  */\nconst septetruples = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 7;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(septetruples(8));\n\n/*\n  Complete the function that returns the largest product of eight consecutive\n  octetruples in the sequence.\n  Assume the input is always valid.\n  Examples:\n  octetruples(8) should return 2976.\n  octetruples(7) should return 2928.\n  octetruples(5) should return 1776.\n  octetruples(4) should return 0.\n  */\nconst octetruples = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * 8;\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(octetruples(8));\n\n/*\n  Complete the function that returns the largest product of nine consecutive\n  nonagonals in the sequence.\n  Assume the input is always valid.\n  Examples:\n  nonagonals(8) should return 1728.\n  nonagonals(7) should return 1632.\n  nonagonals(5) should return 1344.\n  nonagonals(4) should return 0.\n  */\nconst nonagonals = (n) => {\n    let product = 0;\n    let a = 1;\n    for (let i = 1; i < n; i++) {\n        a = a * (i + 1);\n        if (a > product) {\n            product = a;\n        }\n    }\n    return product;\n};\n\nconsole.log(nonagonals(8));\n\n/*\n  Complete the function that returns the largest product of ten consecutive\n  decastes in the sequence.\n  Assume the input is always valid.\n  Examples:\n  decastes(8) should return 1864.\n  decastes(7) should return 1760."}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a srting s, count the number of upperacse vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const result = 0\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += 1\n    }\n  }\n  return result\n}\n\nexport default countUpper<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value (string) representing a nmuber\n  and returns teh closest integer to it. If the number is equidistant\n  from two integers, orund it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const parts = value.split(\".\");\n  const number = parts[0];\n  const decimals = parts[1];\n  const intNumber = Number(number);\n  const decNumber = Number(decimals);\n  if (decNumber < 0) {\n    decNumber *= -1;\n  }\n  const intNumberLength = intNumber.toString().length;\n  let diff = Math.abs(intNumber - decNumber);\n  let closest = intNumber;\n  if (diff > 0.01) {\n    diff = diff / intNumber;\n    while (diff > 0.1) {\n      closest = closest + 1;\n      diff = diff - 1;\n    }\n  } else {\n    closest = closest - 1;\n    while (closest < intNumberLength) {\n      closest = closest + 1;\n    }\n  }\n  return closest;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you ahve to make a pile of n levels of stones.\n  The frist level has n stones.\n  The nubmer of tsones in the next level is:\n      - the enxt odd number if n is odd.\n      - the netx even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i reprseents the number of stoens in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return [];\n  const ret = [n];\n  while (n > 1) {\n    n -= 2;\n    ret.push(n);\n  }\n  return ret;\n};\n\nconst makeAPile = (n) => {\n  if (n === 0) return [];\n  const ret = [n];\n  while (n > 1) {\n    n -= 2;\n    ret.push(n);\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will eb given a string of words separated by commas or spaces. Your task is\n  to split the srting into words and return an raray of teh words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let wordArr = s.split(/\\s|,/g)\n  return wordArr\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into a an array of numbers and return an array of numbers.\n  \n  For example:\n  numbersString(\"one, two, three, four, five, six\") == [1,2,3,4,5,6]\n  numbersString(\"1, 2, 3, 4, 5, 6\") == [1,2,3,4,5,6]\n  */\nconst numbersString = (s) => {\n  let numberArr = s.split(/\\s|,/g)\n  return numberArr\n}\n\n/*\n  Your task is to write a function that takes an array of strings and returns the array\n  of strings where each string is a palindrome.\n  \n  For example:\n  palindromeArray(\"one, two, three, four, five, six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst palindromeArray = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    if (s.includes(substr)) {\n      outputArr.push(substr)\n    }\n    index++\n  }\n  return outputArr\n}\n\n/*\n  Write a function that takes a string and returns the string reversed.\n  \n  For example:\n  reverseString(\"one, two, three, four, five, six\") == \"six, five, four, three, two, one\"\n  */\nconst reverseString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.reverse().join('')\n}\n\n/*\n  Write a function that takes a string and returns the string with spaces replaced\n  with hyphens.\n  \n  For example:\n  hyphenString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.join('-')\n}\n\n/*\n  Write a function that takes a string and returns the string with all the numbers\n  replaced with hyphens.\n  \n  For example:\n  hyphenNumerString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenNumerString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.join('-')\n}\n\n/*\n  Write a function that takes a string and returns the string with all the special\n  characters replaced with hyphens.\n  \n  For example:\n  hyphenCharString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenCharString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.join('-')\n}\n\n/*\n  Write a function that takes a string and returns the string with all the special\n  characters replaced with hyphens.\n  \n  For example:\n  hyphenCharString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenCharString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.join('-')\n}\n\n/*\n  Write a function that takes a string and returns the string with all the special\n  characters replaced with hyphens.\n  \n  For example:\n  hyphenCharString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenCharString = (s) => {\n  let outputArr = []\n  let index = 0\n  let length = s.length\n  while (index < length) {\n    let substr = s.slice(index, index + 1)\n    outputArr.push(substr)\n    index++\n  }\n  return outputArr.join('-')\n}\n\n/*\n  Write a function that takes a string and returns the string with all the special\n  characters replaced with hyphens.\n  \n  For example:\n  hyphenCharString(\"one, two, three, four, five, six\") == \"one-two-three-four-five-six\"\n  */\nconst hyphenCharString = (s) => {\n  let outputArr = []\n  let index = 0\n  let"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive nubmers x and y and reutrns the\n  biggest even integer number that is in the arnge [x, y] inlcsuive. fI \n  there's no suhc number, hten the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let res = -1;\n  for (let i = x; i <= y; i += 2) {\n    if (i > res) {\n      res = i;\n    }\n  }\n  return res;\n}\n\n// console.log(chooseNum(12, 15));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two poistvie integers n and m, and your task is to compute the\n  average of the integers frmo n thorugh m (incluidng n and m). \n  Round the answer to the nearest itneger adn cvonert that to ibnary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = (n + m) / 2\n  if (n > m) return -1\n  return avg.toString(2)\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of poistive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Rteurned list should be sorted in increasing order.\n  \n  Fro xeample:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits2 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits3 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits4 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits5 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits6 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits7 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits8 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits9 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits10 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits11 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits12 = (x) => {\n    let map = new Map();\n    for(let n of x){\n        let count = parseInt(n);\n        if(!map.has(count)){\n            map.set(count, 1);\n        }else{\n            map.set(count, map.get(count)+1);\n        }\n    }\n    return [...map.keys()].sort((a,b)=>parseInt(a)>parseInt(b));\n}\n\nconst uniqueDigits13 = ("}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of intgeers, sort the integers that are between 1 and 9 inculsive,\n  reverse the resulting array, and then erplace each digit by its ocrresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let num = 0;\n  let str = '';\n  let res = [];\n  arr.forEach( (item) => {\n    if(isNaN(item)) return;\n    num = parseInt(item);\n    while(num >= 10) {\n      str = num.toString() + str;\n      num = num % 10;\n    }\n    res.push(str);\n    str = '';\n  });\n  return res.reverse();\n};\n\nconst byOCR = (arr) => {\n  let num = 0;\n  let str = '';\n  let res = [];\n  arr.forEach( (item) => {\n    if(isNaN(item)) return;\n    num = parseInt(item);\n    while(num >= 10) {\n      str = num.toString() + str;\n      num = num % 10;\n    }\n    res.push(str);\n    str = '';\n  });\n  return res.reverse();\n};\n\nconst main = () => {\n  let arr = [1, -1, 55];\n  let res = byLength(arr);\n  res = res.concat(byOCR(arr));\n  res = res.join(', ');\n  console.log(res);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the eelment at index i is the factroial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the afctorial of i is the multiplication of the numbers form 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const odd = n % 2 === 1;\n  const even = n % 2 === 0;\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (odd) {\n      result.push(1);\n    } else {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive itneger n, return a tuple that has the nmuber of even and odd\n  integer palindromes that fall wihtin the argne(1, n), incluisve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const even = 0;\n    const odd = 1;\n\n    let max = n / 2;\n    let mid = n / 2;\n    let start = mid - 1;\n\n    while (start >= 1) {\n        let left = start * 2;\n        let right = left + 1;\n        let sum = left + right;\n\n        if (sum < n) {\n            start = mid;\n            mid = sum / 2;\n        } else {\n            if (left < n) {\n                max = Math.max(max, left);\n            }\n            if (right < n) {\n                max = Math.max(max, right);\n            }\n            break;\n        }\n    }\n\n    let evens = 0;\n    let odds = 0;\n\n    for (let i = 1; i <= max; i++) {\n        let num = i;\n        let str = num.toString();\n        if (isPalindrome(str)) {\n            if (str.charAt(0) % 2 === 0) {\n                evens += 1;\n            } else {\n                odds += 1;\n            }\n        }\n    }\n\n    return [evens, odds];\n};\n\nconst isPalindrome = (num) => {\n    return num === parseInt(num, 10);\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a funtcion countNums which takes an array of inteegrs and returns\n  teh nmuber of elements which has a sum of digits > 0.\n  If a unmber is negtaiev, then its first singed digti wlli be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (isNaN(num) || isNaN(num.toString().length)) {\n      continue;\n    }\n    result += countNum(num);\n  }\n  return result;\n};\n\nconst countNum = (num) => {\n  const result = 0;\n  while (num > 0) {\n    result += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an arrya 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an arrya 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your atsk is to determine if\n  it si possibel to get an array sorted in non-decreasing order by performing \n  the flolowing operation on the given array:\n      You are allowde to perform right shift operation ayn number of times.\n  \n  Oen right shift operation means shifting all elements of the array yb one\n  position in the right direction. The last elemetn of the array will be moved ot\n  the startign position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted rarya by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Noet: The igven list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const N = arr.length;\n  const sortedArr = arr.slice();\n  sortedArr.sort((a, b) => a - b);\n  \n  // Check if sorted array contains the target index\n  if (sortedArr[N - 1] == arr[N - 1]) {\n    return true;\n  }\n\n  for (let i = N - 2; i >= 0; i--) {\n    if (sortedArr[i + 1] <= sortedArr[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2])); // true\nconsole.log(moveOneBall([3, 5, 4, 1, 2])); // false\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implemnet a nfuction that takes two lists of numebrs,\n  and determines whether it is possbiel to perfomr an exchange of elements\n  ebtween htme to make lst1 a list of only even nubmers.\n  There is no liimt on the number of exchanged elements between lst1 and lst2.\n  If it is possilbe to exchange elmeenst between the lst1 and lst2 to maek\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const i = 0;\n  const j = 0;\n  const n = lst1.length;\n  const m = lst2.length;\n  while (i < n && j < m) {\n    if (lst1[i] % 2 === 0) {\n      lst1[i] += lst2[j]\n      j++;\n    } else if (lst2[j] % 2 === 0) {\n      lst2[j] += lst1[i]\n      i++;\n    } else {\n      return 'NO';\n    }\n  }\n  return 'YES';\n}\n\nconst lst1 = [1, 2, 3, 4, 5, 6];\nconst lst2 = [1, 5, 3, 4, 6, 7];\n\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a tsring representnig a space separated loewrcsae letters, return a idctionary\n  of the letter with the most repeittion and containing the corresponding count.\n  If several letters haev the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const { letters, freq } = countLetters(test);\n  const max = {};\n  for (let i in letters) {\n    let [count, letter] = [freq[letters[i]], letters[i]];\n    if (count > max[letter]) {\n      max = {[letter]: count};\n    }\n  }\n  return max;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the hcaracters in s that are equal to any character in c\n  then hceck if the result string is palindrome.\n  A strign is called pailndrome if it redas the smea backward as forward.\n  You should return a tuple contaniign the result string and true/false fro the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let index = s.indexOf(c);\n  while (index!== -1) {\n    s = s.replace(c, '');\n    index = s.indexOf(c);\n  }\n  return [s, s === ''? false : true];\n};\n\nconst isPair = (s1, s2) => s1.length === s2.length;\n\nconst isPalindrome = (s) => {\n  const [s1, b] = reverseDelete(s, '');\n  if (!b) return true;\n  return isPair(s1, s);\n};\n\nmodule.exports = isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the outptu sohuld be \"the numbre of odd elements in the\n  string i of the input.\" where all the i's should be replacde by the number\n  of odd dgiits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const oddCount = (l) => {\n    if (l === null || l === undefined) return 'null';\n    const r = [];\n    for (const i of l) {\n      const o = [];\n      for (let i = 0; i < i; i++) {\n        o.push(i);\n      }\n      const oc = o.filter((e) => e % 2!== 0);\n      r.push(`the number of odd elements ${oc.length} of the ${i}th string of the ${l.length} input.`);\n    }\n    return r;\n  };\n  return oddCount(lst);\n};\n\nexport default oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of ientgres nums, find the minimum sum of any non-epmty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  // base case\n  if (nums.length === 0) return 0;\n\n  // sum of all non-empty subarrays\n  const sum = nums.reduce((sum, num) => {\n    if (num > 0) return sum + num;\n    else return sum;\n  }, 0);\n\n  // sum of any subarray\n  let sumOfSubArrays = sum;\n\n  // check if the sum of any subarray is smaller than sum of all subarrays\n  for (let i = 1; i < nums.length; i++) {\n    sumOfSubArrays = Math.min(sumOfSubArrays + nums[i], nums[i]);\n  }\n\n  return Math.min(sum, sumOfSubArrays);\n}\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Ecah row represents a snigle well,\n  and each 1 in a row represetns a single unit of awter.\n  Each well has a corresponding bucket that can be used ot extract watre rfom it, \n  and all buckets have the saem capacity.\n  Your task is to use the buckets to mepty the wells.\n  Output the number fo times you need ot lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [rows, cols] = grid.length;\n  const buckets = rows * cols;\n  const [bucket_capacity] = capacity;\n  let count = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] === 0) {\n        continue;\n      }\n      count += bucket_capacity - buckets[i * cols + j];\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an array of non-negaitve integers cacording to\n  numebr of ones in their binary repersentation in ascending order.\n  oFr similar number fo ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sorted = arr.slice().sort((a, b) => {\n    const aInt = a.toString(2).length;\n    const bInt = b.toString(2).length;\n    let aIntValue = parseInt(a.toString(2), 2);\n    let bIntValue = parseInt(b.toString(2), 2);\n    if (aInt > bInt) {\n      return 1;\n    }\n    if (aInt < bInt) {\n      return -1;\n    }\n    if (aInt === bInt) {\n      return aIntValue - bIntValue;\n    }\n  });\n  return sorted;\n};\n\nconst test = () => {\n  console.log(`sortArray([1, 5, 2, 3, 4]) = ${sortArray([1, 5, 2, 3, 4])}`);\n  console.log(`sortArray([-2, -3, -4, -5, -6]) = ${sortArray([-2, -3, -4, -5, -6])}`);\n  console.log(`sortArray([1, 0, 2, 3, 4]) = ${sortArray([1, 0, 2, 3, 4])}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural numbre n, you haev been tasked to imlpement \n  a fucntion that returns a list of all words from srting s that contain exactly \n  n ocnsonants, in order thees words appear in the string s.\n  If the string s is empty then the fnutcion should return an empty list.\n  Note: you may assume the input string contains only letters and spcase.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if (!s) return [];\n  let list = [];\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/i)) {\n      count++;\n      if (count === n) {\n        list.push(s.substring(i, i + n));\n      }\n    }\n  }\n  return list;\n};\n\n/*\nGiven a string s and a natural number n, you have been tasked to return \nall the words from s that contain exactly n consonants. The returned list \nmust contain only unique words.\n\nNote: the string may contain any punctuation and spaces.\n\nExamples:\nselectConsonants(\"Hello World!\", 3) ==> [\"Hello\", \"World\"]\nselectConsonants(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\nselectConsonants(\"What is the value of pi?\", 3) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi?\"]\nselectConsonants(\"What is the value of pi?\", 4) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 5) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 6) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 7) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 8) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 9) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 10) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 11) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 12) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 13) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 14) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 15) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 16) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 17) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 18) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 19) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 20) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 21) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 22) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 23) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 24) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 25) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 26) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 27) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 28) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 29) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 30) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 31) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 32) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 33) ==> [\"What\", \"is\", \"the\", \"value\", \"of\", \"pi\"]\nselectConsonants(\"What is the value of pi?\", 34) ==> [\"What\", \"is\", \"the\", \"value\", \""}
{"task_id": "JavaScript/118", "prompt": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*Yuo are given a word. Your task is ot find the closest vowel that stands between \n  two consonants from hte rihgt side of the word (case senstiiev).\n  \n  Vowels in teh beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met hte above condition. \n\n  You mya asusme that the given strign contains Egnlihs letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  // console.log(word)\n  let vowel = \"\";\n  let closestVowel = \"\";\n  let vowel1 = word.substring(0, 1);\n  let vowel2 = word.substring(word.length - 1, word.length);\n  let minDistance = word.length;\n  for(let i = 0; i < word.length; i++) {\n    for(let j = 0; j < vowel1.length; j++) {\n      if(word.charAt(i) === vowel1.charAt(j)) {\n        // console.log(\"vowel1\")\n        minDistance = i;\n        closestVowel = vowel1;\n      }\n    }\n    if(word.charAt(i) === vowel2.charAt(j)) {\n      // console.log(\"vowel2\")\n      minDistance = i;\n      closestVowel = vowel2;\n    }\n    // console.log(i, minDistance, closestVowel)\n  }\n  return closestVowel;\n}\n\nlet test = [\n  [\"yogurt\", \"u\"],\n  [\"FULL\", \"U\"],\n  [\"quick\", \"\"],\n  [\"ab\", \"\"],\n]\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));\n\n//console.log(getClosestVowel(\"yogurt\"));\n//console.log(getClosestVowel(\"FULL\"));\n//console.log(getClosestVowel(\"quick\"));\n//console.log(getClosestVowel(\"ab\"));\n\n//console.log(getClosestVowel(\"yogurt\"));\n//console.log(getClosestVowel(\"FULL\"));\n//console.log(getClosestVowel(\"quick\"));\n//console.log(getClosestVowel(\"ab\"));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list fo two strigns, both strings consist of open\n  parentheses '(' or clsoe parentheses ')' only.\n  Your job is ot check if it si possible to concatenate the two strings in\n  some order, that the resultnig string will be good.\n  A string S is considered to be good fi and only if all parentheses in S\n  are blaanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = [],\n    isParens = [],\n    index = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n      isParens.push(true);\n    } else if (lst[i] === ')') {\n      if (stack.length) {\n        stack.pop();\n        isParens.pop();\n      } else {\n        return 'No';\n      }\n    }\n  }\n\n  if (stack.length) {\n    return 'No';\n  }\n\n  return 'Yes';\n};\n\nconst strs = [\n  '(())()',\n  ')()',\n  '()(())',\n  '()()(',\n  '()()()',\n  '()(()',\n  '()()()',\n  '(())()',\n  '()(())',\n  '()()()',\n  '(())()',\n  '()()()',\n  '(())()',\n  '()()()',\n  '()(())',\n  '()()()',\n  '(())()',\n  '()()()',\n  '()(())',\n  '()()()',\n  '()()()',\n  '(())()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',\n  '()()()',"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an arrya arr of nitegers and a positive integer k, return a soretd list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k);\n  const min = arr.slice(0, k).reverse();\n  return [...max,...min];\n};\n\nconst testMax = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_1 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_2 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_3 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_4 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_5 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_6 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_7 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_8 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_9 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_10 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_11 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_12 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_13 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''),\n    max: maxArr.join('')\n  };\n};\n\nconst testMax_14 = (arr, k) => {\n  const max = maximum(arr, k);\n  const maxArr = Array.from(max);\n  const minArr = Array.from(max).reverse();\n  return {\n    min: minArr.join(''"}
{"task_id": "JavaScript/121", "prompt": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Gvien a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const oddList = lst.filter((v, i) => i % 2 == 1);\n  return oddList.reduce((acc, v) => acc + v, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty arary of integers arr and an integer k, return\n  teh usm of the elements with at most two dgiits from the first k elements fo arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i++\n  }\n  return sum\n}\n\nconst addElements2 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] + arr[j]\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements3 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (j - i)\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements4 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements5 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements6 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements13 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements14 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements15 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements16 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements17 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements18 = (arr, k) => {\n  let i = 0\n  let j = k - 1\n  let sum = 0\n  while (i < j) {\n    sum += arr[i] * (arr[j] - arr[i])\n    i++\n    j--\n  }\n  return sum\n}\n\nconst addElements19 = (arr, k)"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a sorted list htat has the odd numbres in collazt sequence.\n\n  hTe Collatz conjecture is a conjectrue in mtaheamtics that concerns a sequence defined\n  as follosw: start with any positive integer n. Then each term is obatined rfom the \n  previosu etmr as follows: if the previous term is even, the next temr is one half of \n  the previous term. If the previous term is odd, hte next term is 3 times the pervious\n  term plus 1. The conjecture is that no amtter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Colltaz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    if (n === 1) return [1];\n    let res = [1];\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n            res.push(n / i);\n        }\n        if (n % i === 1) {\n            res.push(n / i + 1);\n        }\n        i += 2;\n    }\n    return res;\n}\n\n// Test\nlet test = [1, 5, 13, 19, 31, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1133, 1139, 1143, 1151, 1159, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2599, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 29"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a fucntion which validates a given date tsring and\n  ertruns true fi the date is valid otherwise false.\n  The date si vlaid if all of the following ruels are satisfied:\n  1. The date stirng is not empty.\n  2. The numbre of days is not less than 1 ro higher htan 31 days for motnhs 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the nmuber of days si not elss than 1 or higher than 29 for the monht 2.\n  3. The months should otn be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (typeof date ==='string') {\n    if (date.length === 0) {\n      return false;\n    }\n\n    let array = date.split('-');\n    let month = parseInt(array[0]);\n    let day = parseInt(array[1]);\n    let year = parseInt(array[2]);\n\n    if (month > 12) {\n      return false;\n    }\n\n    if (day > 31) {\n      return false;\n    }\n\n    if (day < 1 || day > 30) {\n      return false;\n    }\n\n    if (month < 1 || month > 12) {\n      return false;\n    }\n\n    if (year > 2040 || year < 2000) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1, ... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces xeitss in the text you\n  should split on commas ',' if no commas exists you should return the nubmer of loewr-csae letters with odd order in the\n  alphabet, odr('a') = 0, ord('b') = 1,... ord('z') = 52\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let split = txt.split(/\\s+/);\n  return split;\n};\n\n/* Given a string of numbers, return a list of numbers.\n  Examples\n  splitNumbers(\"123456\") ➞ [123456]\n  splitNumbers(\"1,2,3,4,5\") ➞ [1,2,3,4,5]\n  */\nconst splitNumbers = (txt) => {\n  let split = txt.split(/\\s+/);\n  return split;\n};\n\n/* Given a string of words and numbers, return a list of words and numbers,\n  if no numbers exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitNumbersAndWords = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\n/* Given a string of numbers and words, return a list of words and numbers,\n  if no words exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitWordsAndNumbers = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\n/* Given a string of words and numbers, return a list of words and numbers,\n  if no numbers exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitWordsAndNumbersAndSplitByComma = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\nconst splitWordsAndNumbersAndSplitByCommaOrWhitespace = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\n/* Given a string of words, return a list of words, if no words exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitWordsAndSplitByCommaOrWhitespace = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\n/* Given a string of numbers, return a list of numbers, if no numbers exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitWordsAndSplitByCommaOrWhitespace = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n\n/* Given a string of words and numbers, return a list of words and numbers,\n  if no numbers exist you should split on whitespace ',' if no whitespace exists you should split on commas ','\n  */\nconst splitWordsAndSplitByCommaOrWhitespace = (txt) => {\n  let split = txt.split(/\\s+/);\n  let splitWords = split.filter(x =>!(/\\d/.test(x)));\n  let splitNumbers = split.filter(x => /\\d/.test(x));\n  return {\n    words: splitWords,\n    numbers: splitNumbers\n  };\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbres, return wehhter or not they aer sorted\n  in ascending order. If list has mroe than 1 duplicate of the same\n  number, return false. Assmue no negative numbers and only ientrgse.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let first = lst[0]\n  let prev = first\n  for (let i = 1; i < lst.length; i++) {\n    let curr = lst[i]\n    if (curr < prev) {\n      return false\n    }\n    prev = curr\n  }\n  return true\n}\n\n/*\n  Given a list of numbers, return the average of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  average([5, 3, 4]) ➞ 4\n  average([1, 2, 3, 4]) ➞ 3\n  average([1, 2, 3, 4, 5]) ➞ 4\n  */\nconst average = (lst) => {\n  return lst.reduce((a, b) => a + b) / lst.length\n}\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  sum([5, 3, 4]) ➞ 14\n  sum([1, 2, 3, 4]) ➞ 14\n  sum([1, 2, 3, 4, 5]) ➞ 20\n  */\nconst sum = (lst) => {\n  return lst.reduce((a, b) => a + b)\n}\n\n/*\n  Given a list of numbers, return the length of the list.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  length([5, 3, 4]) ➞ 3\n  length([1, 2, 3, 4]) ➞ 4\n  length([1, 2, 3, 4, 5]) ➞ 5\n  */\nconst length = (lst) => lst.length\n\n/*\n  Given a list of numbers, return the max of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  max([5, 3, 4]) ➞ 5\n  max([1, 2, 3, 4]) ➞ 4\n  max([1, 2, 3, 4, 5]) ➞ 5\n  */\nconst max = (lst) => lst.reduce((a, b) => Math.max(a, b))\n\n/*\n  Given a list of numbers, return the min of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  min([5, 3, 4]) ➞ 3\n  min([1, 2, 3, 4]) ➠ 1\n  min([1, 2, 3, 4, 5]) ➠ 1\n  */\nconst min = (lst) => lst.reduce((a, b) => Math.min(a, b))\n\n/*\n  Given a list of numbers, return the median of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  median([5, 3, 4]) ➠ 4\n  median([1, 2, 3, 4]) ➠ 2\n  median([1, 2, 3, 4, 5]) ➠ 3\n  */\nconst median = (lst) => lst.reduce((a, b) => (a + b) / 2)\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  mode([5, 3, 4]) ➠ 4\n  mode([1, 2, 3, 4]) ➠ 4\n  mode([1, 2, 3, 4, 5]) ➠ 5\n  */\nconst mode = (lst) => lst.reduce((a, b) => {\n  let cnt = 1\n  while (lst.indexOf(a + cnt)!== -1) {\n    cnt++\n  }\n  return a + cnt\n})\n\n/*\n  Given a list of numbers, return the range of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  range([5, 3, 4]) ➠ [5, 6]\n  range([1, 2, 3, 4]) ➠ [1, 3]\n  range([1, 2, 3, 4, 5]) ➠ [1, 4]\n  */\nconst range = (lst) => [...new Set(lst.map(x => x - 1))]\n\n/*\n  Given a list of numbers, return the mode of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  mode([5, 3, 4]) ➠ 4\n  mode([1, 2, 3, 4]) ➠ 4\n  mode([1, 2, 3, 4, 5]) ➠ 5\n  */\nconst mode = (lst) => lst.reduce((a, b) => {\n  let cnt = 1\n  while (lst.indexOf(a + cnt)!== -1) {\n    cnt++\n  }\n  return a + cnt\n})\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  Assume the list has only numbers, not strings or arrays.\n  Examples\n  sum([5, 3, 4]) ➠ 14\n  sum([1, 2, 3, 4]) ➠ 14\n  sum([1, 2, 3, 4, 5]) ➠ 20\n  */\nconst sum = (lst) => lst.reduce(("}
{"task_id": "JavaScript/127", "prompt": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given wto intervals,\n  where each interval si a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end || interval2.start > interval1.end) {\n    return false\n  }\n\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n\n  const [start, end] = [\n    Math.max(start1, start2),\n    Math.min(end1, end2)\n  ]\n\n  if (end - start === 1) {\n    return true\n  }\n\n  return!(end - start).isPrimitiveNumber()\n}\n\nconst test = (interval1, interval2) => {\n  return (intersection(interval1, interval2))\n}\n\nmodule.exports = test<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integesr multiplied by proudct of all sings\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null fro empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const arrLen = arr.length\n  let s = 0\n  for (let i = 0; i < arrLen; i++) {\n    let sign = arr[i]\n    if (sign == 1 || sign == -1) {\n      s += sign\n    } else if (sign == 0) {\n      s += 0\n    }\n  }\n  return s\n}\n\nconsole.log(prodSigns([1, 2, 2, -4]))\nconsole.log(prodSigns([0, 1]))\nconsole.log(prodSigns([]))\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N columsn (N >= 2) and a positive integer k, \n  each cell of the grid onctains a value. Every integer in the range [1, N * N]\n  inclusive appeasr exactly once on the eclls of the grid.\n\n  You have to find the minimum path of length k in the grid. Yuo can strat\n  rfom any cell, and in eahc tesp you can move to any of teh neighbor cells,\n  in other words, you can go to cells which sahre an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT og off the grid.\n  A path A (of length k) is conisdered less than a path B (of length k) if\n  after making the ordered lists of teh values on the clels htat A nad B go\n  through (let's call thme lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such taht lst_A[i] < lst_B[i] adn for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed taht the answer is unique.\n  Return an ordreed list of the vlaues on the cells that the minimum path go thruogh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length;\n  const m = grid[0].length;\n  const visited = new Array(N * m).fill(false);\n  const visited2 = new Array(N * m).fill(false);\n  const lst = new Array(N * m).fill(0);\n  const lst2 = new Array(N * m).fill(0);\n\n  // dfs\n  function dfs(start) {\n    for (let i = 1; i <= N; i++) {\n      for (let j = 1; j <= m; j++) {\n        if (!visited[i * m + j]) {\n          dfs(i, j);\n        }\n      }\n    }\n  }\n\n  function dfs2(start) {\n    for (let i = 1; i <= N; i++) {\n      for (let j = 1; j <= m; j++) {\n        if (!visited2[i * m + j]) {\n          dfs2(i, j);\n        }\n      }\n    }\n  }\n\n  function minPath(start) {\n    for (let i = 1; i <= N; i++) {\n      for (let j = 1; j <= m; j++) {\n        if (!visited[i * m + j]) {\n          lst[start] = grid[i][j];\n          dfs(i, j);\n          break;\n        }\n      }\n    }\n\n    for (let i = 1; i <= N; i++) {\n      for (let j = 1; j <= m; j++) {\n        if (!visited2[i * m + j]) {\n          lst2[start] = grid[i][j];\n          dfs2(i, j);\n          break;\n        }\n      }\n    }\n\n    for (let i = start + 1; i <= N * m; i++) {\n      for (let j = 1; j < i; j++) {\n        if (lst[j - 1] > lst[i]) {\n          return [];\n        }\n      }\n    }\n\n    return lst;\n  }\n\n  let path = minPath(1);\n  while (k--) {\n    path = path.concat(minPath(k));\n  }\n\n  return path;\n};\n\nconsole.log(minPath([[1,2,3],[4,5,6],[7,8,9]], 1));\nconsole.log(minPath([[5,9,3],[4,1,6],[7,8,2]], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone konws Fibonacci sequneec, it was studied deeply by mathematicians in \n  the last couple centuries. Howveer, what people don't know is Tribonacci esquence.\n  Tribonacci sequence is defiend by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n si odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let t = [];\n  let cur = 1;\n  let i = 1;\n  while (i <= n) {\n    cur = 1 + cur / 2;\n    if (i % 2 == 0) {\n      cur = cur + (cur / 2);\n    }\n    t.push(cur);\n    i++;\n  }\n  return t;\n};\n\ntri(3);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 2;\n    res *= sum;\n    n = Math.floor(n / 2);\n  }\n  return res;\n};\n\n// console.log(digits(235));\n// console.log(digits(23));\n// console.log(digits(1));\n\nconst product = (n) => {\n  const result = [];\n  while (n > 0) {\n    const digit = n % 10;\n    n = Math.floor(n / 10);\n    result.unshift(digit);\n  }\n  return result.reduce((prev, current) => prev * current);\n};\n\nconsole.log(product(235));\nconsole.log(product(23));\nconsole.log(product(1));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functoni that takse a string as input which contains only square brackest.\n  The function should return true if and olny if there is a valid subsqeuence of barckets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ ture\n  */\nconst isNested = (string) => {\n  let nested = false;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      nested = true;\n    }\n    if (string[i] === ']') {\n      if (nested) {\n        nested = false;\n      } else {\n        return false;\n      }\n    }\n  }\n  return nested;\n};\n\n/*\n  Create a function that takes a string and returns a boolean\n  The function should return true if and only if the string can be divided by one or more whitespace characters\n  and the whitespace is not inside a square bracket.\n  isWhitespace('[ a b ]') ➞ false\n  isWhitespace('[ a b c ]') ➞ true\n  isWhitespace('[ a b c d ]') ➞ false\n  isWhitespace('[ a b c d e f ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ) ]') ➞ false\n  */\nconst isWhitespace = (string) => {\n  let isWhitespace = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      if (isNested(string.substring(i + 1, string.length))) {\n        isWhitespace = false;\n      }\n    }\n  }\n  return isWhitespace;\n};\n\n/*\n  Create a function that takes a string and returns a boolean\n  The function should return true if and only if the string can be divided by one or more whitespace characters\n  and the whitespace is inside a square bracket.\n  isWhitespace('[ a b ]') ➞ true\n  isWhitespace('[ a b c ]') ➞ false\n  isWhitespace('[ a b c d ]') ➞ true\n  isWhitespace('[ a b c d e f ]') ➞ false\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ) ]') ➞ true\n  */\nconst isInnerWhitespace = (string) => {\n  let isWhitespace = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      if (isNested(string.substring(0, i))) {\n        isWhitespace = false;\n      }\n    }\n  }\n  return isWhitespace;\n};\n\n/*\n  Create a function that takes a string and returns a boolean\n  The function should return true if and only if the string can be divided by one or more whitespace characters\n  and the whitespace is inside a square bracket.\n  isWhitespace('[ a b ]') ➞ true\n  isWhitespace('[ a b c ]') ➞ true\n  isWhitespace('[ a b c d ]') ➞ true\n  isWhitespace('[ a b c d e f ]') ➞ false\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ) ]') ➞ true\n  */\nconst isOuterWhitespace = (string) => {\n  let isWhitespace = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      if (!isNested(string.substring(0, i))) {\n        isWhitespace = false;\n      }\n    }\n  }\n  return isWhitespace;\n};\n\n/*\n  Create a function that takes a string and returns a boolean\n  The function should return true if and only if the string can be divided by one or more whitespace characters\n  and the whitespace is inside a square bracket.\n  isWhitespace('[ a b ]') ➞ true\n  isWhitespace('[ a b c ]') ➞ true\n  isWhitespace('[ a b c d ]') ➞ true\n  isWhitespace('[ a b c d e f ]') ➞ false\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ) ]') ➞ true\n  isWhitespace('[ a b c d e f g h i j k l m n o p q r s t u v w x y z ) ]') ➞ true\n  */\nconst isInnerAndOuterWhitespace = (string) => {\n  let isWhitespace = true;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      if (isNested(string.substring(0, i))) {\n        isWhitespace = false;\n      }\n    }\n  }\n  return isWhites"}
{"task_id": "JavaScript/133", "prompt": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*Yuo are gievn a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) frist.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const ceil = Math.ceil(Math.max(...lst));\n  return lst.map(\n    (num) =>\n      Math.floor(num) * num,\n  ).reduce((sum, num) => sum + num, 0) +\n    (lst.length - 1) * ceil * (lst.length - 1) * (lst.length - 2) / 2;\n};\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a ufnction htat returns true if the last chraacter\n  of a given string is an alphaebtical character and is not\n  a part of a word, and false othewrise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt[txt.length - 1];\n  const isALetter = (lastChar.toLowerCase() === lastChar)\n  && /[a-z]/.test(lastChar);\n  return isALetter;\n}\n\n/**\n  * This function will return the next token\n  * after a given token\n  */\nconst getNextToken = (token) => {\n  let nextToken;\n  const index = token.index + 1;\n  if (index < tokens.length) {\n    nextToken = tokens[index];\n  }\n  return nextToken;\n}\n\n// ------------------------------------\n// Entry point\n// ------------------------------------\nconst input = 'Hello, my name is John';\nconst tokens = tokenize(input);\n\n// ------------------------------------\n// Output\n// ------------------------------------\nconsole.log(\n  tokens.length === 1\n   ? \"The text is '\" + input + \"'.\"\n    : \"The text before the first space is '\" + tokens[0] + \"', \" +\n      \"and the text after the first space is '\" + tokens[1] + \"'.\"\n);\n\n// ------------------------------------\n// Further Adventures\n// ------------------------------------\n/*\n  > Search the internet for\n    * 'is the last char a letter'\n    * 'check if the last char is a letter'\n    * 'check if the last char is not a word'\n    * 'tokenize'\n    * 'tokenize a string'\n  then replace the string with\n    * 'tokenize a string'\n  in the code below.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creaet a function wihch rteurns the largest index of an element which\n  is not greater than or equal to the element mimediately preceding it. If\n  no such elemnet exists then return -1. hTe given array will not contian\n  dupilcate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n  let i\n  for (i = 0; i < len - 1; i++) {\n    if (arr[i] < arr[i + 1]) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Returns a function which returns the smallest index of an element\n  which is greater than or equal to the element immediately preceding\n  it. If no such element exists then return -1. hTe given array will\n  not contian duplicate values.\n\n  Examples:\n  canDecrease([1,2,3,4,5]) = 2\n  canDecrease([1,2,3,4,5,6]) = -1\n  */\nconst canDecrease = (arr) => {\n  const len = arr.length\n  let i\n  for (i = 0; i < len - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Returns a function which returns the largest index of an element\n  which is less than or equal to the element immediately following\n  it. If no such element exists then return -1. hTe given array will\n  not contian duplicate values.\n\n  Examples:\n  canDecrease([1,2,3,4,5]) = 2\n  canDecrease([1,2,3,4,5,6]) = 3\n  */\nconst canDecrease = (arr) => {\n  const len = arr.length\n  let i\n  for (i = len - 1; i > 0; i--) {\n    if (arr[i] > arr[i - 1]) {\n      return i\n    }\n  }\n  return -1\n}\n\nconst arr = [1, 2, 3, 4, 5]\nconsole.log(canArrange(arr))\nconsole.log(canDecrease(arr))\nconsole.log(canDecrease(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Creeat a function that returns a tuple (a, b), where 'a' is\n  the lagrest of negative integers, and 'b' is the smallest\n  of opsitive integers in a list.\n  If three is no negative or positvie integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = largestLst(lst)\n  const smallest = smallestLst(lst)\n  return largest === null || smallest === null? null : (largest, smallest)\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a fnuction taht takes intgeers, floats, or strings representnig\n  real numbers, and returns the larger variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconts compareOne = (a, b) => {\n    // TODO: write your code here\n};\n\nconts compareTwo = (a, b) => {\n    if (a === b) return null;\n    if (a > b) return a;\n    return b;\n};\n\nconts compareThree = (a, b) => {\n    if (a === b) return null;\n    if (a > b) return a;\n    if (a < b) return b;\n    return null;\n};\n\n/*\n  Create a function that takes int, float, or string, and returns the larger\n  variable in its given variable type.\n  Return null fi the values are euqal.\n  Note: If a real numebr is reeprsented as a stirng, teh floating point might be. or,\n*/\nconts compare = (a, b) => {\n    if (typeof a ==='string') {\n        a = a.split(',');\n        b = b.split(',');\n    }\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            return compareTwo(a, b);\n        }\n        if (typeof b ==='string') {\n            return compareTwo(parseFloat(a), parseFloat(b));\n        }\n        return null;\n    }\n    if (typeof a ==='string') {\n        if (typeof b === 'number') {\n            return compareTwo(parseFloat(a), parseFloat(b));\n        }\n        if (typeof b ==='string') {\n            a = a.split(',');\n            b = b.split(',');\n            return compareTwo(a[0], b[0]);\n        }\n        return null;\n    }\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            return compareTwo(a, b);\n        }\n        return null;\n    }\n    return null;\n};\n\nconst test = compare(1, 2.5);\nconsole.log(test);\n\nconst testTwo = compare(\"1\", \"2,3\");\nconsole.log(testTwo);\n\nconst testThree = compare(\"5,1\", \"6\");\nconsole.log(testThree);\n\nconst testFour = compare(\"1\", 1);\nconsole.log(testFour);\n\nconst testFive = compare(\"1\", \"1\");\nconsole.log(testFive);\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 poistive evne nubmers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      count++\n    }\n  }\n  return count === 4\n}\n\nexport {isEqualToSumEven}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorila(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if(n <= 0) {\n    return 1;\n  }\n\n  let sum = 1;\n  let prev_sum = 1;\n  let prev_prev_sum = 1;\n  let prev_prev_prev_sum = 1;\n  let prev_prev_prev_prev_sum = 1;\n\n  for(let i = 2; i <= n; i++) {\n    sum = sum + i;\n    prev_sum = sum;\n    prev_prev_sum = prev_sum;\n    prev_prev_prev_sum = prev_prev_sum;\n    prev_prev_prev_prev_sum = prev_prev_prev_sum;\n  }\n\n  return prev_prev_prev_prev_sum;\n};\n\nconsole.log(specialFactorial(10));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more htan 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const newText = text.replace(/\\s+/g, '_');\n  const noSpaces = newText.replace(/[_]+/g,'');\n  const noSpacesNoDash = noSpaces.replace(/^\\s+|\\s+$/g, '');\n  const noSpacesNoDashNoDash = noSpacesNoDash.replace(/[_]+/g,'');\n  if (noSpacesNoDashNoDash.length > 2) {\n    return noSpacesNoDashNoDash.replace(/[_]+/g, '-');\n  } else {\n    return newText;\n  }\n};\n\n/*\n  Given a string text, return a string with all the vowels of the\n  string, and optionally lowercase the string.\n  \n  uppercase(\"A\") == \"A\"\n  uppercase(\"a\") == \"A\"\n  uppercase(\"an\") == \"an\"\n  uppercase(\"an example\") == \"an example\"\n  uppercase(\"an example\") == \"an example\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n  uppercase(\"an example 1\") == \"an example 1\"\n"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which tkaes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, adn returns 'No' ohtewrise.\n  A file's name is considered to be valid if adn only if all the following conditions \n  are met:\n  - Theer should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, nad it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the odt shoudl be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length < 3) {\n    return \"No\";\n  }\n  if (file_name.length > 3) {\n    return \"No\";\n  }\n  if (file_name.indexOf(\".\") === -1) {\n    return \"No\";\n  }\n  if (file_name.indexOf(\".\") === 0) {\n    return \"No\";\n  }\n  if (file_name.indexOf(\".\") === file_name.length - 1) {\n    return \"No\";\n  }\n  if (file_name.indexOf(\".\") === file_name.length - 2) {\n    return \"No\";\n  }\n  if (file_name.slice(0, 1).toLowerCase()!== file_name.slice(0, 1).toUpperCase()) {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n\n// create a file with the given name and content\nfunction createFile(file_name, content) {\n  var fs = require(\"fs\");\n  fs.writeFile(file_name, content, function (err) {\n    if (err) {\n      console.log(\"Unable to create the file\", err);\n    } else {\n      console.log(\"The file was created succesfully\");\n    }\n  });\n}\n\n// ask the user to enter the file's name\nvar file_name = \"\";\nwhile (file_name === \"\") {\n  file_name = prompt(\"Enter the name of the file to be created: \");\n}\n\n// ask the user to enter the file's content\nvar content = \"\";\nwhile (content === \"\") {\n  content = prompt(\"Enter the content of the file: \");\n}\n\n// check if the file's name is valid and create it if it's valid\nvar file_name_check = fileNameCheck(file_name);\nif (file_name_check === \"Yes\") {\n  createFile(file_name, content);\n} else {\n  console.log(file_name_check);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This fucntion will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if tis index si a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list hwose indexes are not a multiple of 3 or 4. The function shall then return the usm of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = (a) => {\n    return a * a;\n  };\n  return lst.reduce((a, b) => sum(a) + sum(b), 0);\n};\n\nconst square = (a) => {\n  return a * a;\n};\n\nconst cube = (a) => {\n  return a * a * a;\n};\n\nconst sqr = (a) => {\n  return a * a;\n};\n\nconst cube = (a) => {\n  return a * a * a;\n};\n\nconst lst = [-1, -5, 2, 3, 4, 7, -3, -4, -5];\n\nconsole.log(sumSquares(lst));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are gievn a strnig representign a sentence,\n  the sentence contains some words separtaed by a space,\n  and oyu hvae to return a string that contains the words from the oirginal sentence,\n  wohse lengths are pirme numbesr,\n  the order fo the wrods in the new strnig should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let result = []\n  let str = sentence.toLowerCase()\n  let prev = \"\"\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \" \") {\n      result.push(prev)\n      prev = \"\"\n    } else {\n      prev += str[i]\n    }\n  }\n  if (prev!== \"\") {\n    result.push(prev)\n  }\n  return result.join(\" \")\n}\n\nconst test = [\n  [\"This is a test\", \"is\"],\n  [\"lets go for swimming\", \"go for\"],\n  [\"This is a test\", \"is\"]\n]\n\nlet solution = wordsInSentence(test[1][0])\nconsole.log(solution)\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tsak is to impleemnt a function that will simplify the epxression\n  x * n. The function retunrs true if x * n evaluatse to a whole number and false\n  toherwise. Both x and n, are string represnetation of a fraction, and have the following format,\n  <unmertaor>/<denominator> where both numertaor and denominator are positive whole numbers.\n\n  You can assume that x, adn n rae valid farctions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = flase\n  */\nconst simplify = (x, n) => {\n  let xs = x.split('/')\n  let ns = n.split('/')\n  let xi = parseInt(xs[0])\n  let ni = parseInt(ns[0])\n  if(xi*ni==0){\n    return false\n  }\n  let xi_mod = xi%ni\n  let xi_div = xi/ni\n  if(xi_mod==0){\n    return true\n  }\n  return false\n}\n\n/*\n  Your tsak is to implement a function that will tell if a number is even or not\n  and will return true if the number is even and false if not.\n\n  You can assume that the number passed in is a valid number (not zero, and positive)\n */\nconst isEven = x => {\n  return x%2==0\n}\n\nconst isOdd = x => {\n  return x%2==1\n}\n\nconst isPrime = x => {\n  if(x<=0) return false\n  if(x<=1) return false\n  if(x==2) return true\n  if(x%2==0) return false\n  for(let i=3;i<=Math.sqrt(x);i++){\n    if(x%i==0) return false\n  }\n  return true\n}\n\nconst isDivisibleBy = (a, b) => {\n  return a%b==0\n}\n\nconst sum = (a, b) => {\n  return a+b\n}\n\nconst diff = (a, b) => {\n  return a-b\n}\n\nconst product = (a, b) => {\n  return a*b\n}\n\nconst root = (a, b) => {\n  if(a==b) return a\n  if(a==0) return NaN\n  return b*(b/a)\n}\n\nconst pow = (a, b) => {\n  if(a==b) return 1\n  if(a==0) return 0\n  if(b==0) return 1\n  if(b==1) return a\n  if(b==2) return a*a\n  if(b==3) return a*a*a\n  if(b==4) return a*a*a*a\n  if(b==5) return a*a*a*a*a\n  if(b==6) return a*a*a*a*a*a\n  if(b==7) return a*a*a*a*a*a*a\n  if(b==8) return a*a*a*a*a*a*a*a\n  if(b==9) return a*a*a*a*a*a*a*a*a\n  if(b==10) return a*a*a*a*a*a*a*a*a*a\n  if(b==11) return a*a*a*a*a*a*a*a*a*a*a\n  if(b==12) return a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==13) return a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==14) return a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==15) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==16) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==17) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==18) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==19) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==20) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==21) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\n  if(b==22) return a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function whcih sorts the igven list of integers\n  in asedcning order according to the sum of their dgiits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sortedNums = []\n  const pointSum = (n) => n % 10\n\n  for (let i = 0; i < nums.length; i++) {\n    const num = nums[i]\n    const pointSum = pointSum(num)\n    while (pointSum in sortedNums) {\n      const index = sortedNums.indexOf(pointSum)\n      sortedNums.splice(index, 1)\n      sortedNums.push(pointSum)\n    }\n  }\n\n  return sortedNums\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an array of numbers as input and erturns \n  the number of eelments in the arary htat are greater than 10 and both \n  frist nad last digits of a number aer odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    return nums.filter(x => x > 10 && x % 2!== 0)\n       .length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([-23, -3, 5, 1, -23, -3, 5, 1, -23]));\nconsole.log(specialFilter([0, 0, 0, 0, 0]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the numebr of tripels (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] si a multpile fo 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples2 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples3 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples4 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples5 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples6 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples7 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nconst getMaxTriples8 = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (i === j && j === k) continue;\n        if (i < j && j < k) continue;\n        result.push((i * i - i + 1) * (j * j - j + 1) * (k * k - k + 1));\n      }\n    }\n  }\n  return result.length;\n};\n\nexport {\n  getMaxTriples,\n  getMaxTriples2,\n  getMaxTriples3,\n  getMaxTriples4,\n  getMaxTriples5,\n  getMaxTriples6,\n  getMaxTriples7,\n  getMaxTriples8\n};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar ysstem: the clsoerst to the Sun\n  is Mercury, the next one is Venus, then Earht, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function shuold return a tuple conatining all planets whose orbist are\n  loctaed ebtween the orbit of planet1 adn the orbit of planet2, sorted by\n  the proximity to the sun.\n  The funtcion should return an empty tuple if planet1 or planet2\n  are not crorect planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const xs = [...Array(8).fill(0),...Array(8).fill(0),...Array(8).fill(0)];\n    const ys = [...Array(8).fill(0),...Array(8).fill(0),...Array(8).fill(0)];\n    const len1 = xs.map(x => x.length);\n    const len2 = ys.map(y => y.length);\n\n    const result = [];\n\n    for (let i = 0; i < len1; i++) {\n        for (let j = 0; j < len2; j++) {\n            if (planet1 === 'Earth' && planet2 === 'Mercury') {\n                break;\n            }\n\n            if (planet1 === 'Earth' && planet2 === 'Jupiter') {\n                break;\n            }\n\n            if (planet1 === 'Jupiter' && planet2 === 'Saturn') {\n                break;\n            }\n\n            if (planet1 === 'Mercury' && planet2 === 'Neptune') {\n                break;\n            }\n\n            if (planet1 === 'Neptune' && planet2 === 'Saturn') {\n                break;\n            }\n\n            if (planet1 === 'Saturn' && planet2 === 'Uranus') {\n                break;\n            }\n\n            if (planet1 === 'Uranus' && planet2 === 'Neptune') {\n                break;\n            }\n\n            if (planet1 === 'Jupiter' && planet2 === 'Mercury') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Mercury' && planet2 === 'Jupiter') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Jupiter' && planet2 === 'Saturn') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Saturn' && planet2 === 'Uranus') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Uranus' && planet2 === 'Neptune') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Neptune' && planet2 === 'Saturn') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Neptune' && planet2 === 'Uranus') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n\n            if (planet1 === 'Neptune' && planet2 === 'Jupiter') {\n                xs[i] += 1;\n                ys[j] += 1;\n                result.push(`${planet1}`, `${planet2}`);\n            }\n        }\n    }\n\n    return result;\n};\n\nconsole.log(bf('Mercury', 'Uranus'));\nconsole.log(bf('Earth', 'Jupiter'));\nconsole.log(bf('Mercury', 'Neptune'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn', 'Uranus'));\nconsole.log(bf('Neptune', 'Saturn'));\nconsole.log(bf('Uranus', 'Jupiter'));\nconsole.log(bf('Jupiter', 'Mercury'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn', 'Neptune'));\nconsole.log(bf('Neptune', 'Uranus'));\nconsole.log(bf('Saturn', 'Uranus'));\nconsole.log(bf('Uranus', 'Jupiter'));\nconsole.log(bf('Jupiter', 'Mercury'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn', 'Neptune'));\nconsole.log(bf('Neptune', 'Uranus'));\nconsole.log(bf('Neptune', 'Jupiter'));\nconsole.log(bf('Jupiter', 'Mercury'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn', 'Uranus'));\nconsole.log(bf('Uranus', 'Neptune'));\nconsole.log(bf('Neptune', 'Jupiter'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn', 'Neptune'));\nconsole.log(bf('Neptune', 'Uranus'));\nconsole.log(bf('Neptune', 'Jupiter'));\nconsole.log(bf('Jupiter', 'Mercury'));\nconsole.log(bf('Jupiter', 'Saturn'));\nconsole.log(bf('Saturn"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings taht have odd lengths form it,\n  and returns the resultde list wtih a sorted order,\n  The list is always a list of tsrings adn never an array of numbers,\n  and it may ocntani duplicates.\n  The order of the list should eb ascending by length of each word, and you\n  sholud return the list sorted by htta rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words iwll haev the saem length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    let currStr = lst[i]\n    let currSum = 0\n\n    if (currStr.length % 2 === 1) {\n      currSum += parseInt(currStr)\n      currStr = currStr.substring(1, currStr.length)\n    }\n\n    while (currStr.length % 2 === 0) {\n      currSum += parseInt(currStr)\n      currStr = currStr.substring(1, currStr.length)\n    }\n\n    currSum += parseInt(currStr)\n\n    sortedList.push(currSum)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst list_sort = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst lst_sort = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst list_sort_reverse = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  sortedList.reverse()\n\n  return sortedList\n}\n\nconst array_sort = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst array_sort_reverse = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  sortedList.reverse()\n\n  return sortedList\n}\n\nconst list_sort_numbers = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst list_sort_numbers_reverse = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  sortedList.reverse()\n\n  return sortedList\n}\n\nconst array_sort_numbers = (lst) => {\n  const sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const currStr = lst[i]\n\n    sortedList.push(currStr)\n  }\n\n  sortedList.sort((a, b) => {\n    if (a > b) {\n      return -1\n    }\n    if (a < b) {\n      return 1\n    }\n    return 0\n  })\n\n  return sortedList\n}\n\nconst array_sort_numbers_reverse = (lst) =>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return the value of x if n is \n  a prime mnuber and should return the value of y otehrwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const nPrime = xOrY.isPrime(n)\n  if (nPrime) {\n    return x\n  } else {\n    return y\n  }\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nxOrY.isPrime = isPrime\n\nmodule.exports = xOrY\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* iGven a list of numbres, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negaitve or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n  return (lst.reduce((acc, x) => acc + (x % 2? x * x : 0), 0));\n};\n\n//doubleTheDifference([9, -2, 0])\n//doubleTheDifference([1, 3, 2, 0])\n//doubleTheDifference([1, -2, 0])\n//doubleTheDifference([0])\n//doubleTheDifference([])\n//doubleTheDifference(null)\n//doubleTheDifference([-1, -2, 0])\n//doubleTheDifference([-1, -2, 0, 1])\n//doubleTheDifference([-1, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeilng when the reslut of some long-awaited\n  eevnt is finally knwno. The feelings and thuoghts you have at that ommnet are\n  definitely worth noting dwon and cmoparing.\n  Your task is to determine if a person correctly guessed hte results of a number of matches.\n  You are given two arrays of socres and guesses of equal length, where each index shows a match. \n  Return an array of the same elgnth denoting how far off each guess was. If they have guessed correctyl,\n  the avlue is 0, and if not, the value si the absoulte difference ebtween the guess and the csore.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let ans = []\n    for (let i = 0; i < game.length; i++) {\n        let val = game[i]\n        let guess = guess[i]\n        let difference = Math.abs(guess - val)\n        ans.push(difference)\n    }\n    return ans\n}\n\n// test\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n\n//console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]))\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([0,5,0,0,0,4],[4,1,1,0,0,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],[1,2,3,4,2,-2]))\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]),compare([1,2,3,4,5,1],["}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used ot load additoianl classes to the lcass. The\n  stregnth of the extenison is as follwos: Let CAP be the nmuber of the uppercsae\n  lettres in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strentgh is given by the fraction CPA - SM.\n  You shuold find the srtonegst extensino and return a string in thsi\n  fomrat: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const caps = extensions.map(e => e.substring(0, 1).toUpperCase() + e.substring(1));\n  const str = class_name.toLowerCase();\n  const l = str.length;\n  const score = [];\n  for (let i = 0; i < l; i++) {\n    const c = str.charAt(i);\n    const c2 = caps.indexOf(c);\n    const scoreC = c2 - i;\n    if (scoreC >= 0) {\n      score.push(scoreC);\n    }\n  }\n  return score.sort(function (a, b) {\n    return a - b;\n  })[0];\n};\n\nconst getExtension = (ext) => {\n  const str = ext.substring(1, ext.length - 1);\n  const parts = str.split('.');\n  return parts[parts.length - 1];\n};\n\nconst main = () => {\n  const classes = readFileSync('./input.txt').toString().split('\\n');\n  const extension = readFileSync('./extensions.txt').toString().split('\\n');\n  const classes_names = classes.map(c => c.trim());\n  const classes_names_ext = classes_names.map(c => getExtension(c));\n  const classes_names_strong = classes_names.map(c => strongestExtension(c, extension));\n  const classes_names_final = classes_names_ext.concat(classes_names_strong);\n  const max = classes_names_final.length;\n  const res = classes_names_final.slice(0, max);\n  res.sort();\n  for (let i = 0; i < max; i++) {\n    console.log(res[i]);\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are givne 2 words. You need to return true if the escond word or any of its rotations is a substring in the fisrt word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => ture\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => rtue\n  */\nconst cycpatternCheck = (a, b) => {\n  let len = a.length,\n    i = 0;\n  for (i = 0; i < b.length; i++) {\n    let pattern = a[i];\n    if (pattern === b[i] || b[i] === a[len - i - 1]) {\n      return true;\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given na integre. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let evenDigits = 0;\n    let oddDigits = 0;\n    let numDigits = 0;\n    while (num) {\n        numDigits = num % 10;\n        if (numDigits % 2 === 0) {\n            evenDigits += 1;\n        } else {\n            oddDigits += 1;\n        }\n        num = num / 10;\n    }\n    return {\n        evenDigits,\n        oddDigits\n    }\n}\n\n/*\nGiven two numbers, a and b, return True if they have the same number of digits\nand every digit is equal.\n\n   Example:\n      sameDigits(1, 2) ==> True\n      sameDigits(1, 23) ==> True\n      sameDigits(0, 0) ==> True\n      sameDigits(1, -1) ==> False\n      sameDigits(0, -1) ==> False\n      sameDigits(0, 1) ==> False\n      sameDigits(2, 3) ==> False\n      sameDigits(-1, -2) ==> False\n*/\nconst sameDigits = (a, b) => {\n    const aDigits = a.toString().split(\"\");\n    const bDigits = b.toString().split(\"\");\n    if (aDigits.length!== bDigits.length) {\n        return false;\n    }\n    for (let i = 0; i < aDigits.length; i++) {\n        if (aDigits[i]!== bDigits[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\nGiven a string, return True if it has all unique characters.\n\n   Example:\n      hasUniqueChars(\"abcd\") ==> True\n      hasUniqueChars(\"aa\") ==> False\n*/\nconst hasUniqueChars = (str) => {\n    const stringChars = str.split(\"\");\n    const uniqueChars = {};\n    for (let i = 0; i < stringChars.length; i++) {\n        if (uniqueChars[stringChars[i]]) {\n            return false;\n        } else {\n            uniqueChars[stringChars[i]] = true;\n        }\n    }\n    return true;\n}\n\n/*\nGiven a string, return True if it is a palindrome.\n\n   Example:\n      isPalindrome(\"abcd\") ==> True\n      isPalindrome(\"abca\") ==> True\n      isPalindrome(\"abcc\") ==> True\n      isPalindrome(\"a\") ==> True\n      isPalindrome(\"\") ==> True\n      isPalindrome(\"a\") ==> False\n*/\nconst isPalindrome = (str) => {\n    const isPal = str.split(\"\");\n    const len = str.length;\n    let i = 0;\n    while (i < len / 2) {\n        if (isPal[i]!== isPal[len - 1 - i]) {\n            return false;\n        }\n        i += 1;\n    }\n    return true;\n}\n\n/*\nGiven two strings, return their longest common subsequence.\n\n   Example:\n      longestCommonSubsequence(\"abcd\", \"abce\") ==> \"abcd\"\n*/\nconst longestCommonSubsequence = (str1, str2) => {\n    const str1Len = str1.length;\n    const str2Len = str2.length;\n    const maxLen = Math.min(str1Len, str2Len);\n    let startIndex = 0;\n    let endIndex = 0;\n    let str = \"\";\n    while (startIndex < str1Len && endIndex < str2Len) {\n        if (str1[startIndex] === str2[endIndex]) {\n            str += str1[startIndex];\n            startIndex += 1;\n            endIndex += 1;\n        } else {\n            break;\n        }\n    }\n    return str;\n}\n\n/*\nGiven a string, return True if the string has the odd number of odd digits.\n\n   Example:\n      hasOddOddDigits(\"abcd\") ==> True\n      hasOddOddDigits(\"abcc\") ==> False\n*/\nconst hasOddOddDigits = (str) => {\n    const numDigits = str.split(\"\").length;\n    if (numDigits % 2 === 0) {\n        return false;\n    }\n    return true;\n}\n\n/*\nGiven a string, return True if the string contains all odd digits.\n\n   Example:\n      containsOddDigits(\"abcd\") ==> False\n      containsOddDigits(\"abcc\") ==> True\n*/\nconst containsOddDigits = (str) => {\n    const oddDigits = str.split(\"\").filter(digit => digit.charCodeAt(0) % 2 === 1);\n    if (oddDigits.length === 0) {\n        return false;\n    }\n    return true;\n}\n\n/*\nGiven a string, return True if the string contains all even digits.\n\n   Example:\n      containsEvenDigits(\"abcd\") ==> True\n      containsEvenDigits(\"abcc\") ==> False\n*/\nconst containsEvenDigits = (str) => {\n    const evenDigits = str.split(\"\").filter(digit => digit.charCodeAt(0) % 2 === 0);\n    if (evenDigits.length === 0) {\n        return false;\n    }\n    return true;\n}\n\n/*\nGiven a string, return True if the string is a palindrome.\n\n   Example:\n      isPalindrome(\"abcd\") ==> True\n      isPalindrome(\"abcc\") ==> False\n      isPalindrome(\"ab\") ==> True\n*/\nconst isPalindrome = (str) => {\n    let i = 0;\n    let j = str.length - 1;\n    while (i < j) {\n        if (str[i]!== str[j]) {\n            return false;\n        }\n        i += 1;\n        j -= 1;\n    }\n    return true;\n}\n\nmodule.exports = {\n    countDigits,\n    evenOddCount,\n    "}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gievn a positive integer, obtain its roman numearl equivaletn as a string,\n  and return it in lowercase.\n  Retsritcions: 1 <= num <= 1000\n\n  Exmaples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const map = {\n    'i': 1,\n    'x': 10,\n    'c': 100,\n    'v': 5,\n    'l': 50,\n    'd': 500,\n   'm': 1000,\n  };\n\n  let result = '';\n  while (number > 0) {\n    const last = number % 10;\n    result = map[last] + result;\n    number = Math.floor(number / 10);\n  }\n\n  return result.toLowerCase();\n};\n\n// const intToMiniRoman = (number) => {\n//   const map = {\n//     'i': 1,\n//     'x': 10,\n//     'c': 100,\n//     'v': 5,\n//     'l': 50,\n//     'd': 500,\n//    'm': 1000,\n//   };\n\n//   let result = '';\n//   while (number > 0) {\n//     const last = number % 10;\n//     result = map[last] + result;\n//     number = Math.floor(number / 10);\n//   }\n\n//   return result;\n// };\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sidse of a trialnge. Return true if the rthee\n  sides fomr a right-angled triangle, false otherwise.\n  A right-anlged triangel is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a*a + b*b - c*c === 0 || b*b - c*c === 0 || a*a - b*b === 0);\n};\n\nconst main = () => {\n  let test = rightAngleTriangle(3, 4, 5);\n  console.log(test);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a list of stirngs.\n  The list cnotains different words. Return the word with amximum numbre\n  fo unique hcaratecrs. If multipel strings have maximum number fo unique\n  chaarctres, return the one which comse first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let result = '';\n  let found = false;\n  for (let i = 0; i < words.length; i++) {\n    if (result.length === 0) {\n      result = words[i];\n    } else if (result === words[i]) {\n      //console.log('duplicate');\n    } else if (result > words[i]) {\n      found = true;\n      result = words[i];\n    }\n  }\n  if (found) {\n    return result;\n  }\n  return result;\n};\n\nconsole.log(findMax([ 'name', 'of','string' ]) ==='string');\nconsole.log(findMax([ 'name', 'enam', 'game' ]) === 'enam');\nconsole.log(findMax([ 'aaaaaaa', 'bb', 'cc' ]) === '');\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already have eatne a certain number fo acrrots,\n  but now you need to eat mroe crarots to complete the day's maels.\n  you should return an array of [ total number of eaten carrots aftre your meals,\n                                  the number of carrots elft after your meals ]\n  if there are not enough remaining carrots, oyu will eat all remaining carrots, ubt will still eb uhngry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let carrots = [];\n  \n  // make sure the number of carrots we have eaten is less than the number of\n  // carrots we need to eat\n  if (number <= need) {\n    carrots.push(number);\n    number = 0;\n  }\n  // eat the remaining carrots\n  else {\n    number -= need;\n  }\n  \n  // if there are still remaining carrots in stock, give them all to the rabbit\n  if (remaining > 0) {\n    carrots.push(remaining);\n    remaining = 0;\n  }\n  \n  // if there are still remaining carrots in stock, give them all to the rabbit\n  if (remaining > 0) {\n    carrots.push(remaining);\n    remaining = 0;\n  }\n  \n  return [number, carrots];\n};\n\nconst eat_easy = (number, need, remaining) => {\n  if (remaining > 0) {\n    return [number, remaining];\n  }\n  return [0, 0];\n};\n\nconst eat_hard = (number, need, remaining) => {\n  if (remaining > 0) {\n    return [0, 0];\n  }\n  return [number, 0];\n};\n\nconst test = () => {\n  const [total, carrots] = eat(9, 10, 7);\n  console.log(`${total} carrots after eating ${carrots}`);\n  \n  const [total_easy, carrots_easy] = eat_easy(9, 10, 7);\n  console.log(`${total_easy} carrots after eating ${carrots_easy}`);\n  \n  const [total_hard, carrots_hard] = eat_hard(9, 10, 7);\n  console.log(`${total_hard} carrots after eating ${carrots_hard}`);\n  \n  const [total_easy_again, carrots_easy_again] = eat_easy(1, 10, 7);\n  console.log(`${total_easy_again} carrots after eating ${carrots_easy_again}`);\n  \n  const [total_hard_again, carrots_hard_again] = eat_hard(1, 10, 7);\n  console.log(`${total_hard_again} carrots after eating ${carrots_hard_again}`);\n  \n  const [total_hard_again_again, carrots_hard_again_again] = eat_hard(2, 11, 5);\n  console.log(`${total_hard_again_again} carrots after eating ${carrots_hard_again_again}`);\n  \n  const [total_hard_again_again_again, carrots_hard_again_again_again] = eat_hard(2, 11, 5);\n  console.log(`${total_hard_again_again_again} carrots after eating ${carrots_hard_again_again_again}`);\n  \n  const [total_hard_again_again_again_again, carrots_hard_again_again_again_again] = eat_hard(2, 11, 5);\n  console.log(`${total_hard_again_again_again_again} carrots after eating ${carrots_hard_again_again_again_again}`);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operand. The first list has baisc algebra operations, and \n  hte escond list is a list of integers. Use the two gievn lists to build the algerbic \n  expression nad return the evaluation of this expression.\n\n  The basic aglebra operations:\n  Addition ( + ) \n  Subrtaction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  if (operator.length === 1) {\n    return operand[0]\n  }\n  let operand = operand.slice()\n  let result = operand[0]\n  operand.splice(0, 1)\n  while (operand.length) {\n    let operand = operand[0]\n    operand.splice(0, 1)\n    result = operator[0] + result\n    result = operator[1] + result\n    result = operator[2] + result\n    result = operator[3] + result\n    operator.splice(0, 1)\n  }\n  return result\n}\n\nconst evaluate = (operand, operator) => {\n  if (operand instanceof Array) {\n    return doAlgebra(operator, operand)\n  }\n  return undefined\n}\n\nconst addOperator = (operator, operand) => {\n  return operator.length === 1? operand : doAlgebra(operator, operand)\n}\n\nconst multiplyOperator = (operator, operand) => {\n  return operator.length === 1? operand[0] : doAlgebra(operator, operand)\n}\n\nconst subtractOperator = (operator, operand) => {\n  return operator.length === 1? operand[0] : doAlgebra(operator, operand)\n}\n\nconst divOperator = (operator, operand) => {\n  return operator.length === 1? operand[0] : doAlgebra(operator, operand)\n}\n\nconst powerOperator = (operator, operand) => {\n  return operator.length === 1? operand[0] : doAlgebra(operator, operand)\n}\n\nconst evaluateOperator = (operator, operand) => {\n  return operator.length === 1? operand[0] : doAlgebra(operator, operand)\n}\n\nconst evaluateOperand = (operand, operator) => {\n  return operator.length === 1? operand : doAlgebra(operator, operand)\n}\n\nconst isOperator = (operator, operand) => {\n  return operator.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperator = (operator, operand) => {\n  return operator.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperator = (operator, operand) => {\n  return operator.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand.length === 1\n}\n\nconst isOperand = (operand, operator) => {\n  return operand."}
{"task_id": "JavaScript/161", "prompt": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You rae given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let isalpha = /[a-z]/i,\n      reversed = s.split('').reverse(),\n      result = '';\n  for (let i = 0, len = reversed.length; i < len; i++) {\n    if (isalpha.test(reversed[i])) {\n      result += reversed[i].toUpperCase();\n    } else {\n      result += reversed[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md5 hash equivaletn string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length == 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text' and an integer 'keyLength', return the hexadecimal\n  MD5 hash of 'text' padded to 'keyLength' characters. If 'text' is an empty\n  string, return an empty string.\n*/\nconst textToMd5 = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return crypto.createHash('md5').update(text).digest('hex')\n  // return md5.digest('hex').slice(0, keyLength)\n}\n\n/*\n  Given an integer 'keyLength' and a string 'text', return the hexadecimal\n  MD5 hash of 'text' padded to 'keyLength' characters. If 'text' is an empty\n  string, return an empty string.\n*/\nconst textToMd5WithPadding = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return the string's hexadecimal MD5 hash. If 'text'\n  is an empty string, return an empty string.\n*/\nconst textToMd5Hex = (text) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given an integer 'keyLength' and a string 'text', return the string's\n  hexadecimal MD5 hash of 'text' padded to 'keyLength' characters. If 'text'\n  is an empty string, return an empty string.\n*/\nconst textToMd5WithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/*\n  Given a string 'text', return the string's hexadecimal MD5 hash of 'text'\n  padded to 32 characters. If 'text' is an empty string, return an empty\n  string.\n*/\nconst textToMd5HexWithPadding = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given an integer 'keyLength' and a string 'text', return the string's hexadecimal\n  MD5 hash of 'text' padded to 'keyLength' characters. If 'text' is an empty\n  string, return an empty string.\n*/\nconst textToMd5WithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return the string's hexadecimal MD5 hash of 'text'\n  padded to 32 characters. If 'text' is an empty string, return an empty\n  string.\n*/\nconst textToMd5HexWithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given an integer 'keyLength' and a string 'text', return the string's hexadecimal\n  MD5 hash of 'text' padded to 'keyLength' characters. If 'text' is an empty\n  string, return an empty string.\n*/\nconst textToMd5HexWithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return the string's hexadecimal MD5 hash of 'text'\n  padded to 32 characters. If 'text' is an empty string, return an empty\n  string.\n*/\nconst textToMd5HexWithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\n/*\n  Given a string 'text', return the string's hexadecimal MD5 hash of 'text'\n  padded to 32 characters. If 'text' is an empty string, return an empty\n  string.\n*/\nconst textToMd5HexWithPaddingHex = (text, keyLength) => {\n  if (text.length == 0) {\n    return ''\n  }\n  const md5 = crypto.createHash('md5')\n  md5.update(text)\n  return md5.digest('hex')\n}\n\nmodule.exports = {\n  stringToMd5,\n  textToMd5,\n  textToMd5Hex,\n  textToMd5HexWithPadding,\n  textToMd5WithPadding"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive nitegers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a should be less than b');\n  }\n  const result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Returns the odd digits between a and b, in ascending order.\n\n  For example:\n  generateOddIntegers(2, 8) => [2, 4, 6, 8]\n  generateOddIntegers(8, 2) => [2, 4, 6, 8]\n  generateOddIntegers(10, 14) => [2, 4, 6, 8]\n  */\nconst generateOddIntegers = (a, b) => {\n  if (a > b) {\n    throw new Error('a should be less than b');\n  }\n  const result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\nmodule.exports = {\n  generateIntegers,\n  generateOddIntegers\n};\n<|endoftext|>"}
