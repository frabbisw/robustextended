{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i != j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\nmodule.exports = {\n\thasCloseElements,\n\tnumberThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t}\n\n\t\tif (current_depth == 0) {\n\t\t\tresult.push(current_string.join(''));\n\t\t\tcurrent_string = [];\n\t\t}\n\t}\n\treturn result;\n};\n\n/*\n\tInput to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst paren_count = (paren_string) => {\n\tvar result = 0;\n\tvar current_string = '';\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string += c;\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string += c;\n\t\t}\n\n\t\tif (current_depth == 0) {\n\t\t\tresult += current_string.length;\n\t\t\tcurrent_string = '';\n\t\t}\n\t}\n\treturn result;\n};\n\nconst count = (string) => {\n\tvar result = 0;\n\tfor (const c of string) {\n\t\tif (c === '(') {\n\t\t\tresult += 1;\n\t\t} else if (c === ')') {\n\t\t\tresult -= 1;\n\t\t}\n\t}\n\treturn result;\n};\n\nconsole.log(separateParenGroups('((()()))'));\nconsole.log(separateParenGroups('((())()())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(()))'));\nconsole.log(separateParenGroups('((())()()'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenGroups('(()(())'));\nconsole.log(separateParenGroups('((())())'));\nconsole.log(separateParenG"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n};\n\n// ------------------------------------------------------------------------\n// Given an integer, return a string representation of the number.\n// Note that the string representation of the integer is\n// different than the string representation of the number.\n// ------------------------------------------------------------------------\nconst integerToString = (number) => {\n\treturn String(number);\n};\n\n// ------------------------------------------------------------------------\n// Given an integer, return a string representation of the number.\n// Note that the string representation of the integer is\n// different than the string representation of the number.\n// ------------------------------------------------------------------------\nconst stringToInteger = (string) => {\n\treturn parseInt(string, 10);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToString = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tlet integer = number - decimal;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\tlet string = integerToString(integer);\n\n\treturn string + '.' + decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimal = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutInteger = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\treturn decimal + '.';\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrInteger = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZero = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOrZero = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegative = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOrZeroOrNegative = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOrZeroOrNegativeOrPositive = (number) => {\n\tlet integer = number;\n\tif (integer < 10) {\n\t\treturn integerToString(integer);\n\t}\n\n\treturn integerToString(integer);\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegativeOrPositiveOrNegative = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutDecimalOrIntegerOrZeroOrNegativeOrPositiveOrNegative = (number) => {\n\tlet decimal = truncateNumber(number);\n\n\tif (decimal == 0) {\n\t\treturn '0';\n\t}\n\n\treturn decimal;\n};\n\n// ------------------------------------------------------------------------\n// Given a number, return a string representation of the number.\n// ------------------------------------------------------------------------\nconst numberToStringWithoutIntegerOr"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.abs(item - mean);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate Root Mean Square Deviation\n// around the mean of this dataset.\n// Root Mean Square Deviation is the square root of the average of squared\n// deviations about the mean:\n// RMSD = sqrt( average ( | x - x_mean |^2 ) )\nconst rootMeanSquareDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn Math.sqrt(numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length);\n};\n\n// For a given list of input numbers, calculate the mean squared deviation\n// around the mean of this dataset.\nconst meanSquaredDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the skewness of this dataset.\nconst skewness = (numbers) => {\n\tvar n = numbers.length;\n\tif(n <= 1)\n\t\treturn 0;\n\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / n;\n\tvar variance = meanSquaredDeviation(numbers);\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 3);\n\t}, 0) / (n - 1);\n};\n\n// For a given list of input numbers, calculate the kurtosis of this dataset.\nconst kurtosis = (numbers) => {\n\tvar n = numbers.length;\n\tif(n <= 1)\n\t\treturn 0;\n\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / n;\n\tvar variance = meanSquaredDeviation(numbers);\n\tvar varianceOfMean = varianceOfMean(numbers);\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 4);\n\t}, 0) / (n - 1) - 3;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst coefficientOfVariation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst varianceOfMean = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst coefficientOfVariation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst varianceOfMean = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst coefficientOfVariation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst varianceOfMean = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item - mean, 2);\n\t}, 0) / numbers.length) / mean;\n};\n\n// For a given list of input numbers, calculate the coefficient of variation\n// of this dataset.\nconst coefficientOfVariation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn (numbers.reduce((prev, item)"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n\t\tresult.push(n);\n\t\tif (numbers.length - 1 < delimeter) {\n\t\t\tresult.push(delimeter);\n\t\t}\n\t}\n\treturn result;\n}\n\n// ###############################################################################################################\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t};\n\treturn [...paren_string.split(/\\s+/).map(parseParenGroup)].sort((a, b) => b - a);\n};\n\n// This is an interesting one, because the input contains all the information about the nesting of parentheses\n// However, the output is just a list of the groups in the original string. The list contains the number of\n// levels of nesting for each group.\nconst parseNestedParens2 = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\t\treturn depth;\n\t};\n\treturn paren_string.split(/\\s+/).map(parseParenGroup);\n};\n\n// This is a more elegant approach to getting the nesting of parentheses from the input. The input has the\n// grouping of parentheses separated by spaces, so we split on spaces and parse each group in the string.\n// The output is a list of the groups in the original string. The list contains the number of levels of nesting\n// for each group.\nconst parseNestedParens3 = (paren_string) => {\n\treturn paren_string.split(/\\s+/).map(group => {\n\t\tlet depth = 0;\n\t\tfor (const c of group) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\t\treturn depth;\n\t});\n};\n\n// Finally, we convert our list of the groups in the original string into a nested list.\n// The nested list contains the nesting of parentheses for each group.\nconst parseNestedParens4 = (paren_string) => {\n\treturn paren_string.split(/\\s+/).map(depth => [...new Array(depth + 1)].map(() => 0));\n};\n\n// This is the solution that we are using. It takes O(n) time, but since n is always small, it is the fastest\n// solution.\n// We use the solution that uses the nesting of parentheses to get the depth of each group.\n// Then, we use that depth to find the maximum depth of nesting of parentheses within the string.\n// This way, we are able to output the number of levels of nesting for each group.\nconst parseNestedParens5 = (paren_string) => {\n\treturn paren_string.split(/\\s+/).map(depth => {\n\t\tconst max_depth = 0;\n\t\tfor (const group of paren_string.split(/\\s+/)) {\n\t\t\tconst depth = depthOfNestedParentheses(group);\n\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t}\n\t\treturn max_depth;\n\t});\n};\n\n// The depth of a group is the number of levels of parentheses it contains.\nconst depthOfNestedParentheses = (group) => {\n\tlet depth = 0;\n\tfor (const c of group) {\n\t\tif (c == '(') {\n\t\t\tdepth += 1;\n\t\t} else {\n\t\t\tdepth -= 1;\n\t\t}\n\t}\n\treturn depth;\n};\n\n// This is a solution that uses the nesting of parentheses to get the depth of each group.\n// However, this solution is very inefficient, since we are using O(n) time for each group.\n// We can improve the performance of this solution by using a data structure that keeps track of the depth\n// of each group.\n// The depth of a group is the number of levels of parentheses it contains.\n// The depth of a group is the number of levels of parentheses it contains.\n// To start with, the depth of each group is 0. Then, we count the number of levels of parentheses in the string.\n// If there is a parenthesis, the depth of the group is incremented by 1.\n// The depth of the group is then returned.\nconst depthOfNestedParentheses2 = (group) => {\n\tconst depth = 0;\n\tfor (const c of group) {\n\t\tif (c == '(') {\n\t\t\tdepth += 1;\n\t\t} else {\n\t\t\tdepth -= 1;\n\t\t}\n\t}\n\treturn depth;\n};\n\n// This is the solution that uses the nesting of parentheses to get the depth of each group.\n// This is a slightly more elegant approach to getting the depth of each group from the input.\n// The input contains all the information about the nesting of parentheses, so we can parse it directly.\n// The output is a list of the groups in the original string. The list contains the number of levels of nesting\n// for each group.\nconst depthOfNestedParentheses3 = (group) => {\n\tconst depth = 0;\n\tfor (const c of group) {\n\t\tif (c == '(') {\n\t\t\tdepth += 1;\n\t\t} else {\n\t\t\tdepth -= 1;\n\t\t}\n\t}\n\treturn depth;\n};\n\n// Finally, we convert our list of the groups in the original string into a nested list.\n// The nested list contains the nesting of parentheses for each group.\n// The depth of each group is the number of levels of parentheses it contains.\n// The depth of each group is then returned.\nconst depthOfNestedParentheses4 = (group) => {\n\tconst depth = 0;\n\tfor (const c of group) {\n\t\tif (c == '(') {\n\t\t\tdepth += 1;\n\t\t} else {\n\t\t\tdepth -= 1;\n\t\t}\n\t}\n\treturn depth;\n};\n\n// This is the solution that uses the nesting of parentheses to get the depth of each group.\n// This is a slightly more elegant approach to getting the"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/**\n\t* @summary Filter an input list of objects based on a given field\n\t* @param {Object} obj - The input list of objects to be filtered\n\t* @param {string} field - The field to be filtered on\n\t* @param {string} value - The value of the field to be filtered on\n\t* @returns {Array} - The filtered list of objects\n\t*\n\t* @example\n\t* filterByField('cities', 'London', 'UK')\n\t* // => [{city: 'London', country: 'UK'}]\n\t* @example\n\t* filterByField('cities', 'London', 'UK', 'UK')\n\t* // => [{city: 'London', country: 'UK'}]\n\t*/\nconst filterByField = (obj, field, value) => {\n\treturn obj.filter(o => o[field] == value);\n};\n\n/**\n\t* @summary Check if an input list of objects contain given field\n\t* @param {Object} obj - The input list of objects to be checked\n\t* @param {string} field - The field to be checked\n\t* @returns {boolean} - Whether the list of objects contains the given field\n\t*\n\t* @example\n\t* containsField('cities', 'London')\n\t* // => true\n\t* @example\n\t* containsField('cities', 'London', 'UK')\n\t* // => true\n\t* @example\n\t* containsField('cities', 'London', 'UK', 'UK')\n\t* // => true\n\t*/\nconst containsField = (obj, field) => {\n\treturn obj.some(o => o[field]);\n};\n\n/**\n\t* @summary Get the count of objects in an input list\n\t* @param {Object} obj - The input list of objects\n\t* @returns {number} - The count of objects in the list\n\t*\n\t* @example\n\t* getCount('cities')\n\t* // => 6\n\t*/\nconst getCount = (obj) => {\n\treturn obj.length;\n};\n\n/**\n\t* @summary Get the values of all fields in an input list\n\t* @param {Object} obj - The input list of objects\n\t* @returns {Array} - The values of all fields in the list\n\t*\n\t* @example\n\t* getFields('cities')\n\t* // => ['London', 'London', 'London', 'London', 'London', 'London']\n\t*/\nconst getFields = (obj) => {\n\treturn obj.map(o => o[field]);\n};\n\n/**\n\t* @summary Get the first value of a given field\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the first value of\n\t* @returns {string} - The first value of the given field\n\t*\n\t* @example\n\t* getFirst('cities', 'country')\n\t* // => 'UK'\n\t*/\nconst getFirst = (obj, field) => {\n\treturn obj.find(o => o[field]).[field];\n};\n\n/**\n\t* @summary Get the last value of a given field\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the last value of\n\t* @returns {string} - The last value of the given field\n\t*\n\t* @example\n\t* getLast('cities', 'country')\n\t* // => 'UK'\n\t*/\nconst getLast = (obj, field) => {\n\treturn obj.findLast(o => o[field]).[field];\n};\n\n/**\n\t* @summary Get the last value of a given field but return the last value in a list of objects\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the last value of\n\t* @returns {string} - The last value of the given field\n\t*\n\t* @example\n\t* getLast('cities', 'country')\n\t* // => 'UK'\n\t*/\nconst getLastInList = (obj, field) => {\n\treturn obj.map(o => o[field]).reduce((a, b) => b, '');\n};\n\n/**\n\t* @summary Get the values of a given field in an input list\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the values of\n\t* @returns {Array} - The values of the given field in the list\n\t*\n\t* @example\n\t* getValues('cities', 'country')\n\t* // => ['UK', 'UK', 'UK', 'UK', 'UK', 'UK']\n\t*/\nconst getValues = (obj, field) => {\n\treturn obj.map(o => o[field]);\n};\n\n/**\n\t* @summary Get the first values of a given field in an input list\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the first values of\n\t* @returns {Array} - The first values of the given field in the list\n\t*\n\t* @example\n\t* getFirstValues('cities', 'country')\n\t* // => ['UK', 'UK', 'UK', 'UK', 'UK', 'UK']\n\t*/\nconst getFirstValues = (obj, field) => {\n\treturn obj.map(o => o[field]).filter(o => o);\n};\n\n/**\n\t* @summary Get the values of a given field in an input list but return the first values in a list of objects\n\t* @param {Object} obj - The input list of objects\n\t* @param {string} field - The field to get the values of\n\t* @returns {Array} - The values of the given field in the list\n\t*\n\t* @example\n\t* getValues('cities', 'country')\n\t* // => ['UK', 'UK', 'UK', 'UK', 'UK"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n\t\tprod_value *= n;\n\t}\n\treturn sum_value, prod_value;\n}\n\n/*\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t>>> sumProduct([1, 2, 3, 4, 5])\n\t(15, 120)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6])\n\t(21, 720)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7])\n\t(28, 1890)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8])\n\t(36, 5040)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t(45, 4536)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t(54, 56700)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t(66, 696320)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t(84, 9914400)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t(96, 108844800)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t(112, 1605664000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t(132, 3628808000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t(144, 64479360800)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t(168, 1218306720000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t(192, 2418806720300)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t(224, 46739606745600)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t(256, 709737239629600)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\t(288, 1755253750409600)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\t(336, 70499582212888000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\t(384, 1828982295396416000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\t(432, 12331870792528672000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t(480, 22592455803664640000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t(528, 443612124788352000000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n\t(576, 7042437892398409600000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n\t(672, 1499356414098721600000000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n\t(800, 2055115560458825984000000)\n\t>>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n\t\t\trunning_max = (running_max > n)? running_max : n;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\twhile (isPalindrome(string.slice(beginning_of_suffix)) && beginning_of_suffix < string.length)\n\t\tbeginning_of_suffix++;\n\tvar beginning_of_prefix = beginning_of_suffix;\n\twhile (isPalindrome(string.slice(beginning_of_prefix)) && beginning_of_prefix >= 0)\n\t\tbeginning_of_prefix--;\n\treturn string.slice(beginning_of_prefix, beginning_of_suffix + 1) + string.slice(0, beginning_of_prefix + 1).split('').reverse().join('');\n}\n\n/* Test if the supplied string is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\twhile (isPalindrome(string.slice(beginning_of_suffix)) && beginning_of_suffix < string.length)\n\t\tbeginning_of_suffix++;\n\tvar beginning_of_prefix = beginning_of_suffix;\n\twhile (isPalindrome(string.slice(beginning_of_prefix)) && beginning_of_prefix >= 0)\n\t\tbeginning_of_prefix--;\n\treturn string.slice(0, beginning_of_prefix + 1) + string.slice(beginning_of_suffix, string.length).split('').reverse().join('');\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n\tAlgorithm idea is simple:\n\t- Find the longest prefix of supplied string that is a palindrome.\n\t- Append to the beginning of the string reverse of a string suffix that comes after the palindromic prefix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'cat'\n\t>>> makePalindrome('cata')\n\t'cata'\n\t>>> makePalindrome('cataa')\n\t'cataa'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_prefix = 0;\n\twhile (isPalindrome(string.slice(beginning_of_prefix)) && beginning_of_prefix < string.length)\n\t\tbeginning_of_prefix++;\n\tvar beginning_of_suffix = beginning_of_prefix;\n\twhile (isPalindrome(string.slice(beginning_of_prefix)) && beginning_of_prefix >= 0)\n\t\tbeginning_of_prefix--;\n\treturn string.slice(beginning_of_prefix, beginning_of_suffix + 1) + string.slice(0, beginning_of_prefix + 1).split('').reverse().join('');\n}\n\nmodule.exports = {\n\tisPalindrome: isPalindrome,\n\tmakePalindrome: makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n\t\t\treturn '1';\n\t};\n\tvar result = '';\n\tvar i = 0;\n\twhile (i < a.length) {\n\t\tvar j = 0;\n\t\twhile (j < b.length) {\n\t\t\tvar temp = xor(a[i], b[j]);\n\t\t\tresult += temp;\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn result;\n};\n\nvar testcases = [\n\t['010', '110'],\n\t['1110', '1010'],\n\t['1010', '1110']\n];\n\ntestcases.forEach(function (t) {\n\tconsole.log('Given:'+ t[0] +'and'+ t[1]);\n\tconsole.log('Expected:'+ stringXor(t[0], t[1]));\n});<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n\t\tif (s.length == maxlen)\n\t\t\treturn s;\n\t\telse if (s.length > maxlen)\n\t\t\tmaxlen = s.length;\n\t}\n\treturn strings[0];\n}\n\n/*\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t>>> longest(['a', 'bb', 'ccc', 'dd'])\n\t'ccc'\n\t>>> longest(['a', 'bb', 'ccc', 'dd', 'ee'])\n\t'ee'\n\t>>> longest(['a', 'bb', 'ccc', 'dd', 'ee', 'ff'])\n\t'ee'\n\t>>> longest(['a', 'bb', 'ccc', 'dd', 'ee', 'ff', 'ggg'])\n\t'ggg'\n\t>>> longest([])\n\t>>> longest(['a', 'bb', 'ccc', 'dd', 'ee', 'ff', 'ggg'])\n\t'ggg'\n\t>>> longest([1, 2, 3, 4])\n\t1\n\t>>> longest([1, 2, 3, 4, 5])\n\t5\n\t>>> longest([1, 2, 3, 4, 5, 6])\n\t6\n\t>>> longest([1, 2, 3, 4, 5, 6, 7])\n\t7\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8])\n\t8\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t9\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t10\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t11\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t12\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t13\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t14\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t15\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t16\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t17\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t18\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t19\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t20\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\t21\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\t22\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\t23\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\t24\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t25\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t26\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n\t27\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n\t28\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n\t29\n\t>>> longest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n\t30\n\t>>> longest([1, 2, 3, 4, 5, 6, 7"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b != 0) {\n\t\tlet temp = a;\n\t\ta = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b!= 0) {\n\t\tlet temp = a;\n\t\ta = b;\n\t\tb = temp % b;\n\t}\n\treturn a;\n}\n\n/* Return the result of applying a binary function to a binary tree\n\t>>> apply(sum, [3, 5, 4, 1, 2])\n\t10\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3])\n\t15\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3])\n\t6\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n\t1\n\t>>> apply(sum, [3, 5, 4, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n\t}\n\treturn result;\n}\n\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['b', 'c', 'abc']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = string.length-1; i >= 0; i--) {\n\t\tresult.push(string.slice(i));\n\t}\n\treturn result;\n}\n\n\n/* Return the longest common prefix of two strings\n\t>>> longestCommonPrefix('abc', 'abc')\n\t'a'\n\t>>> longestCommonPrefix('abc', 'abd')\n\t'ab'\n\t>>> longestCommonPrefix('abcd', 'abc')\n\t''\n\t>>> longestCommonPrefix('abc', 'abc', 'xyz')\n\t''\n\t>>> longestCommonPrefix('abc', 'abcd', 'xyz')\n\t'abc'\n\t*/\nconst longestCommonPrefix = (string1, string2) => {\n\tvar prefix = '';\n\tfor (var i = 0; i < string1.length; i++) {\n\t\tif (string2.indexOf(string1[i]) == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tprefix = string1[i] + prefix;\n\t}\n\treturn prefix;\n}\n\n\n/* Return the longest common suffix of two strings\n\t>>> longestCommonSuffix('abc', 'abc')\n\t'c'\n\t>>> longestCommonSuffix('abc', 'abd')\n\t'b'\n\t>>> longestCommonSuffix('abcd', 'abc')\n\t''\n\t>>> longestCommonSuffix('abc', 'abc', 'xyz')\n\t''\n\t>>> longestCommonSuffix('abc', 'abcd', 'xyz')\n\t'xyz'\n\t*/\nconst longestCommonSuffix = (string1, string2) => {\n\tvar suffix = '';\n\tfor (var i = string1.length-1; i >= 0; i--) {\n\t\tif (string2.indexOf(string1[i]) == -1) {\n\t\t\tbreak;\n\t\t}\n\t\tsuffix = string1[i] + suffix;\n\t}\n\treturn suffix;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n}\n\n/*\n\t>>> stringSequence(10)\n\t'0 1 2 3 4 5 6 7 8 9 10'\n\t>>> stringSequence(11)\n\t'0 1 2 3 4 5 6 7 8 9 10 11'\n\t>>> stringSequence(12)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12'\n\t>>> stringSequence(13)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n\t>>> stringSequence(14)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n\t>>> stringSequence(15)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\t>>> stringSequence(16)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n\t>>> stringSequence(17)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n\t>>> stringSequence(18)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n\t>>> stringSequence(19)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n\t>>> stringSequence(20)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n\t>>> stringSequence(21)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n\t>>> stringSequence(22)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n\t>>> stringSequence(23)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n\t>>> stringSequence(24)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n\t>>> stringSequence(25)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n\t>>> stringSequence(26)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n\t>>> stringSequence(27)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n\t>>> stringSequence(28)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n\t>>> stringSequence(29)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29'\n\t>>> stringSequence(30)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30'\n\t*/\nconst stringSequence = (n) => {\n\tconst base = stringSequence(n - 1)\n\tconst sequence = [...Array(n).keys(), n].map((_, i) => `${i + 1}${base[i]}`).join(' ')\n\treturn sequence\n}\n\n/*\n\t>>> stringSequence(10)\n\t'0 1 2 3 4 5 6 7 8 9 10'\n\t>>> stringSequence(11)\n\t'0 1 2 3 4 5 6 7 8 9 10 11'\n\t>>> stringSequence(12)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12'\n\t>>> stringSequence(13)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13'\n\t>>> stringSequence(14)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14'\n\t>>> stringSequence(15)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'\n\t>>> stringSequence(16)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'\n\t>>> stringSequence(17)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17'\n\t>>> stringSequence(18)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18'\n\t>>> stringSequence(19)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19'\n\t>>> stringSequence(20)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'\n\t>>> stringSequence(21)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21'\n\t>>> stringSequence(22)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22'\n\t>>> stringSequence(23)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23'\n\t>>> stringSequence(24)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24'\n\t>>> stringSequence(25)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25'\n\t>>> stringSequence(26)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26'\n\t>>> stringSequence(27)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27'\n\t>>> stringSequence(28)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28'\n\t>>> stringSequence(29)\n\t'0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n};\n\nconst countUniqueLetters = (string) => {\n\tconst letters = string.split('');\n\treturn letters.length;\n};\n\n/* Given a string, find out how many distinct letters it consists of\n\t>>> countDistinctLetters('xyzXYZ')\n\t3\n\t>>> countDistinctLetters('Jerry')\n\t4\n\t*/\nconst countDistinctLetters = (string) => {\n\treturn (new Set(string.split(''))).size;\n};\n\nconst isPalindrome = (string) => {\n\treturn string.split('').join('') === string.split('').reverse().join('');\n};\n\nconst countRepeatingLetters = (string) => {\n\tconst repeatedLetters = new Set(string.split(''));\n\treturn repeatedLetters.size;\n};\n\nconst countRepeatingLetters = (string) => {\n\tconst repeatedLetters = new Set(string.split(''));\n\treturn repeatedLetters.size;\n};\n\n/* Given a string, find out how many times it's repeated in the string\n\t>>> countRepeatingLetters('xyzXYZ')\n\t2\n\t>>> countRepeatingLetters('ABC')\n\t0\n\t>>> countRepeatingLetters('ABCABC')\n\t3\n\t*/\nconst countRepeatingLetters = (string) => {\n\tlet count = 1;\n\tfor (let i = 1; i < string.length; i++) {\n\t\tif (string[i] === string[i - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\nconst countRepeatingCharacters = (string) => {\n\tconst repeatedCharacters = new Set(string.split(''));\n\treturn repeatedCharacters.size;\n};\n\n/* Given a string, find out how many times it's repeated in the string\n\t>>> countRepeatingLetters('xyzXYZ')\n\t2\n\t>>> countRepeatingLetters('ABC')\n\t0\n\t>>> countRepeatingLetters('ABCABC')\n\t3\n\t*/\nconst countRepeatingCharacters = (string) => {\n\tlet count = 1;\n\tfor (let i = 1; i < string.length; i++) {\n\t\tif (string[i] === string[i - 1]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\nconst countRepeatingLetters = (string) => {\n\tconst repeatedLetters = new Set(string.split(''));\n\treturn repeatedLetters.size;\n};\n\nconst countRepeatingCharacters = (string) => {\n\tconst repeatedCharacters = new Set(string.split(''));\n\treturn repeatedCharacters.size;\n};\n\nconst isUgly = (num) => {\n\tif (num < 1) {\n\t\treturn false;\n\t}\n\tif (num === 1) {\n\t\treturn true;\n\t}\n\tif (num % 2!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 3!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 5!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 7!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 11!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 13!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 17!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 19!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 23!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 29!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 31!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 37!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 41!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 43!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 47!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 53!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 59!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 61!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 67!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 71!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 73!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 79!== 0) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\nconst isUgly = (num) => {\n\tif (num < 1) {\n\t\treturn false;\n\t}\n\tif (num === 1) {\n\t\treturn true;\n\t}\n\tif (num % 2!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 3!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 5!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 7!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 11!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 13!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 17!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 19!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 23!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 29!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 31!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 37!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 41!== 0) {\n\t\treturn false;\n\t}\n\tif (num % 43!== 0) {\n\t\treturn false;\n\t}\n\tif (num"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tlet note_list = [];\n\tfor(let i = 0; i < music_string.length; i++) {\n\t\tlet note_ch = music_string[i];\n\t\tif(note_ch === 'o') {\n\t\t\tnote_list.push(note_map[note_ch]);\n\t\t} else {\n\t\t\tnote_list.push(note_map[note_ch]);\n\t\t\tnote_list.push(note_list[note_list.length - 1]);\n\t\t}\n\t}\n\treturn note_list;\n}\n\n// Test your code\n\n// Note:\n// Test input in a loop in your browser and copy/paste the string into the text box\n// Then hit your enter key.\n\n// Your code is much better than that!\n\n// Do not edit any code below this line.\n\n/*\n\nSample test inputs:\n\no o|.| o| o|.|.|.|.| o o\n\n*/\n\n/*\n\nYour code should return the same output as this:\n\n[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n\t\t}\n\t}\n\treturn times;\n}\n\n/*\n\tGiven a string, find the longest substring that contains all the letters of another string.\n\t>>> findLongestSubstring('a', 'a')\n\t'a'\n\t>>> findLongestSubstring('ab', 'a')\n\t'ab'\n\t>>> findLongestSubstring('abc', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', '')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'a')\n\t'a'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('abc', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('ab', 'bc')\n\t'ab'\n\t>>> findLongestSubstring('aa', 'aa')\n\t'aa'\n\t>>> findLongestSubstring('ab', 'ab')\n\t'ab'\n\t>>> findLongestSubstring('a', 'b')\n\t''\n\t>>> findLongestSubstring('', 'a')\n\t''\n\t>>> findLongestSubstring('a', 'b')\n\t"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t}\n\n\treturn numbers.split(' ').reduce((a, b) => {\n\t\tif (a[1] == null) {\n\t\t\ta[1] = value_map[b]\n\t\t} else if (a[1] > value_map[b]) {\n\t\t\ta[1] = value_map[b]\n\t\t}\n\n\t\treturn a\n\t}, [null, null])\n}\n\nmodule.exports = sortNumbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i != j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tif (distance > Math.abs(a - b)) {\n\t\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/*\n\t* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number) but in the opposite direction (larger number,\n\tsmaller number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.2, 2.0)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findOppositeClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.max(a, b), Math.min(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tif (distance > Math.abs(a - b)) {\n\t\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\t\tclosest_pair = [Math.max(a, b), Math.min(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\nmodule.exports = {\n\tfindClosestElements,\n\tfindOppositeClosestElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n\tvar delta = max_number - min_number;\n\treturn [\n\t\t(numbers[0] - min_number) / delta,\n\t\t(numbers[1] - min_number) / delta,\n\t\t(numbers[2] - min_number) / delta,\n\t\t(numbers[3] - min_number) / delta,\n\t\t(numbers[4] - min_number) / delta\n\t];\n}\n\n/**\n* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n\t*/\nconst rescaleToUnitVectors = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n\tvar delta = max_number - min_number;\n\treturn [\n\t\t(numbers[0] - min_number) / delta,\n\t\t(numbers[1] - min_number) / delta,\n\t\t(numbers[2] - min_number) / delta,\n\t\t(numbers[3] - min_number) / delta,\n\t\t(numbers[4] - min_number) / delta,\n\t\t(numbers[5] - min_number) / delta\n\t];\n}\n\nmodule.exports = {\n\trescaleToUnit,\n\trescaleToUnitVectors\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n};\n\n/**\n\t* Filter given list of any python values only for booleans\n\t>>> filterBooleans(['a', 3.14, 5])\n\t[]\n\t>>> filterBooleans([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterBooleans = (values) => {\n\treturn values.filter(x => Boolean(x));\n};\n\n/**\n\t* Filter given list of any python values only for strings\n\t>>> filterStrings(['a', 3.14, 5])\n\t['a', '5']\n\t>>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t['1', '2', '3']\n\t*/\nconst filterStrings = (values) => {\n\treturn values.filter(x => typeof x ==='string');\n};\n\n/**\n\t* Filter given list of any python values only for tuples\n\t>>> filterTuples(['a', 3.14, 5])\n\t[(3.14, 5)]\n\t>>> filterTuples([1, 2, 3, 'abc', {}, []])\n\t[(1,), (2,), (3,)]\n\t*/\nconst filterTuples = (values) => {\n\treturn values.filter(x => Array.isArray(x));\n};\n\n/**\n\t* Filter given list of any python values only for dicts\n\t>>> filterDicts(['a', 3.14, 5])\n\t[]\n\t>>> filterDicts([1, 2, 3, 'abc', {}, []])\n\t[{}, {}, {}, {}]\n\t*/\nconst filterDicts = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n\n/**\n\t* Filter given list of any python values only for objects\n\t>>> filterObjects(['a', 3.14, 5])\n\t[{}, []]\n\t>>> filterObjects([1, 2, 3, 'abc', {}, []])\n\t[{}, {}, {}, {}]\n\t*/\nconst filterObjects = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n\n/**\n\t* Filter given list of any python values only for lists\n\t>>> filterLists(['a', 3.14, 5])\n\t[]\n\t>>> filterLists([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterLists = (values) => {\n\treturn values.filter(x => Array.isArray(x));\n};\n\n/**\n\t* Filter given list of any python values only for sets\n\t>>> filterSets(['a', 3.14, 5])\n\t[]\n\t>>> filterSets([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterSets = (values) => {\n\treturn values.filter(x => typeof x === 'object' && typeof x.contains === 'function');\n};\n\n/**\n\t* Filter given list of any python values only for sequences\n\t>>> filterSequences(['a', 3.14, 5])\n\t[]\n\t>>> filterSequences([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterSequences = (values) => {\n\treturn values.filter(x => typeof x === 'object' && typeof x.get === 'function');\n};\n\n/**\n\t* Filter given list of any python values only for numbers\n\t>>> filterNumbers(['a', 3.14, 5])\n\t[]\n\t>>> filterNumbers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterNumbers = (values) => {\n\treturn values.filter(x => Number.isInteger(x) || Number.isNumeric(x));\n};\n\n/**\n\t* Filter given list of any python values only for booleans\n\t>>> filterBooleans(['a', 3.14, 5])\n\t[]\n\t>>> filterBooleans([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterBooleans = (values) => {\n\treturn values.filter(x => Boolean(x));\n};\n\n/**\n\t* Filter given list of any python values only for strings\n\t>>> filterStrings(['a', 3.14, 5])\n\t['a', '5']\n\t>>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t['1', '2', '3']\n\t*/\nconst filterStrings = (values) => {\n\treturn values.filter(x => typeof x ==='string');\n};\n\n/**\n\t* Filter given list of any python values only for tuples\n\t>>> filterTuples(['a', 3.14, 5])\n\t[(3.14, 5)]\n\t>>> filterTuples([1, 2, 3, 'abc', {}, []])\n\t[(1,), (2,), (3,)]\n\t*/\nconst filterTuples = (values) => {\n\treturn values.filter(x => Array.isArray(x));\n};\n\n/**\n\t* Filter given list of any python values only for dicts\n\t>>> filterDicts(['a', 3.14, 5])\n\t[]\n\t>>> filterDicts([1, 2, 3, 'abc', {}, []])\n\t[{}, {}, {}]\n\t*/\nconst filterDicts = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n\n/**\n\t* Filter given list of any python values only for objects\n\t>>> filterObjects(['a', 3.14, 5])\n\t[{}, []]\n\t>>> filterObjects([1, 2, 3, 'abc', {}, []])\n\t[{}, {}, {}, {}]\n\t*/\nconst filterObjects = (values) => {\n\treturn values.filter(x => typeof x === 'object');\n};\n"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n};\n\n/* Return string concatenation of given strings\n\t>>> strconcat('abc', 'def')\n\t'abcdef'\n\t>>> strconcat('abc', 'def', 'ghi')\n\t'abcdefghi'\n\t>>> strconcat('abc', 'def', 'ghi', 'jkl')\n\t'abcdefghijkl'\n\t>>> strconcat(1, 2, 3)\n\tTraceback (most recent call last):\n\t...\n\tTypeError: strconcat() expects str, not int\n\t>>> strconcat('a', 'b')\n\tTraceback (most recent call last):\n\t...\n\tTypeError: strconcat() expects str, not str\n\t>>> strconcat('')\n\t''\n\t>>> strconcat(1)\n\tTraceback (most recent call last):\n\t...\n\tTypeError: strconcat() expects str, not int\n\t>>> strconcat(1, 2, 3, 4)\n\tTraceback (most recent call last):\n\t...\n\tTypeError: strconcat() expects str, not int\n\t>>> strconcat('abc')\n\tTraceback (most recent call last):\n\t...\n\tTypeError: strconcat() expects str, not str\n\t*/\nconst strconcat = (...strings) => {\n\tlet result = '';\n\tfor (let i = 0; i < strings.length; i++) {\n\t\tresult += strings[i];\n\t}\n\treturn result;\n};\n\n/* Return string representation of given integer\n\t>>> inttochars(1)\n\t'1'\n\t>>> inttochars(3)\n\t'3'\n\t>>> inttochars(100000000)\n\t'100000000'\n\t>>> inttochars(123456789)\n\t'123456789'\n\t>>> inttochars(9000000000)\n\t'9000000000'\n\t>>> inttochars(0)\n\t'0'\n\t>>> inttochars(-1)\n\t'-1'\n\t>>> inttochars(-2147483648)\n\t'-2147483648'\n\t>>> inttochars(-2147483649)\n\t'-2147483649'\n\t>>> inttochars(-9223372036854775808)\n\t'-9223372036854775808'\n\t>>> inttochars(-9223372036854775809)\n\t'-9223372036854775809'\n\t>>> inttochars(9223372036854775806)\n\t'9223372036854775806'\n\t>>> inttochars(9223372036854775807)\n\t'9223372036854775807'\n\t>>> inttochars(2147483647)\n\t'2147483647'\n\t>>> inttochars(2147483648)\n\t'2147483648'\n\t>>> inttochars(2147483649)\n\t'2147483649'\n\t>>> inttochars(9223372036854775806)\n\t'9223372036854775806'\n\t>>> inttochars(9223372036854775807)\n\t'9223372036854775807'\n\t>>> inttochars(2147483647)\n\t'2147483647'\n\t>>> inttochars(2147483648)\n\t'2147483648'\n\t>>> inttochars(2147483649)\n\t'2147483649'\n\t>>> inttochars(9223372036854775806)\n\t'9223372036854775806'\n\t>>> inttochars(9223372036854775807)\n\t'9223372036854775807'\n\t>>> inttochars(9223372036854775808)\n\t'9223372036854775808'\n\t>>> inttochars(9223372036854775809)\n\t'9223372036854775809'\n\t>>> inttochars(-2147483648)\n\t'-2147483648'\n\t>>> inttochars(-2147483649)\n\t'-2147483649'\n\t>>> inttochars(-9223372036854775808)\n\t'-9223372036854775808'\n\t>>> inttochars(-9223372036854775809)\n\t'-9223372036854775809'\n\t>>> inttochars(-2147483648)\n\t'-2147483648'\n\t>>> inttochars(-2147483649)\n\t'-2147483649'\n\t>>> inttochars(-9223372036854775808)\n\t'-9223372036854775808'\n\t>>> inttochars(-9223372036854775809)\n\t'-9223372036854775809'\n\t>>> inttochars(-2147483648)\n\t'-2147483648'\n\t>>> inttochars(-2147483649)\n\t'-2147483649'\n\t>>> inttochars(-9223372036854775808)\n\t'-9223372036854775808'\n\t>>> inttochars(-9223372036854775809)\n\t'-9223372036854775809'\n\t>>> inttochars(2147483647)\n\t'2147483647'\n\t>>> inttochars(2147483648)\n\t'2147483648'\n\t>>> inttochars(2147483649)\n\t'2147483649'\n\t>>> inttochars(9223372036854775806)\n\t'9223372036854775806'\n\t>>> inttochars(9223372036854775807)\n\t'9223372036854775807'\n\t>>> inttochars(9223372036854775808)\n\t'9223372036854775808'\n\t>>> inttochars(9223372036854775809)\n\t'9223372036854775809"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn n;\n};\n\n/* For a given number n, find the largest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t*/\nconst largestDivisorPlus = (n) => {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n};\n\n/* Return the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t*/\nconst largestDivisorPlus(n) {\n\treturn largestDivisor(n) - largestDivisor(n - largestDivisor(n));\n}\n\n/* Return the largest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t*/\nconst largestDivisorPlusPlus = (n) => {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* Return the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t>>> largestDivisorPlusPlus(15)\n\t9\n\t*/\nconst largestDivisorPlusPlus(n) {\n\treturn largestDivisor(n) + largestDivisor(n - largestDivisor(n));\n}\n\n/* For a given number n, find the smallest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t*/\nconst smallestDivisorPlus = (n) => {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t>>> smallestDivisorPlus(15)\n\t5\n\t*/\nconst smallestDivisorPlus(n) {\n\treturn largestDivisor(n) - largestDivisor(n - largestDivisor(n));\n}\n\n/* Return the smallest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t>>> smallestDivisorPlus(15)\n\t7\n\t*/\nconst smallestDivisorPlusPlus = (n) => {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* Return the smallest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t>>> smallestDivisorPlus(15)\n\t5\n\t*/\nconst smallestDivisorPlusPlus = (n) => {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* For a given number n, find the smallest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t>>> smallestDivisorPlus(15)\n\t5\n\t*/\nconst smallestDivisor(n) {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn n;\n}\n\n/* Return the smallest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t>>> smallestDivisor(15)\n\t9\n\t*/\nconst smallestDivisorPlus(n) {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* Return the smallest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t>>> smallestDivisorPlus(15)\n\t7\n\t*/\nconst smallestDivisorPlusPlus(n) {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* Return the smallest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t>>> largestDivisorPlus(15)\n\t7\n\t>>> smallestDivisor(15)\n\t5\n\t*/\nconst smallestDivisorPlus(n) {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n\n/* Return the smallest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t7\n\t>>> largestDivisorPlus(15)\n\t9\n\t>>> smallestDivisor(15)\n\t9\n\t*/\nconst smallestDivisorPlusPlus(n) {\n\tlet m = largestDivisor(n);\n\treturn n + largestDivisor(n - m);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact;\n}\n\nvar number = Math.pow(10, 6),\n\tnum = number,\n\tfactors = [],\n\tfactorsList = [],\n\tfactorsSum = 0,\n\ti = 0,\n\tprime = 0;\n\nwhile (num >= 1) {\n\tif (factors.indexOf(num) === -1) {\n\t\tprime = factorize(num);\n\t\tfactors.push(prime);\n\t\tfor (i = 0; i < prime.length; i++) {\n\t\t\tfactorsSum += prime[i];\n\t\t}\n\t}\n\tnum--;\n}\n\nfor (i = 0; i < factors.length; i++) {\n\tif (factorsSum == number) {\n\t\tfactorsList.push(factors[i]);\n\t\tbreak;\n\t}\n}\n\nconsole.log(factorsList);<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n\t\t\tdict[num] = 1;\n\t\t}\n\t}\n\treturn Object.keys(dict).sort();\n};\n\n/*\n\tFrom a list of strings, remove all the elements that are empty strings.\n\t>>> removeEmptyStrings([\"hello\", \"\", \"world\", \"\", \"\"])\n\t[\"hello\", \"world\"]\n\t>>> removeEmptyStrings([\"hello\", \"\", \"world\", \"\", \"\"])\n\t[\"hello\", \"world\"]\n\t>>> removeEmptyStrings([])\n\t[]\n\t>>> removeEmptyStrings([])\n\t[]\n\t>>> removeEmptyStrings([])\n\t[]\n\t*/\nconst removeEmptyStrings = (strings) => {\n\treturn strings.filter((string) => string.length > 0);\n};\n\n/*\n\tFrom a list of numbers, remove all the elements that are 0.\n\t>>> removeZero([\"1\", \"2\", \"3\", \"4\"])\n\t[\"1\", \"2\", \"3\", \"4\"]\n\t>>> removeZero([])\n\t[]\n\t>>> removeZero([])\n\t[]\n\t>>> removeZero([])\n\t[]\n\t*/\nconst removeZero = (numbers) => {\n\treturn numbers.filter((num) => num!== 0);\n};\n\n/*\n\tFrom a list of numbers, remove all the elements that are negative.\n\t>>> removeNegative([\"1\", \"2\", \"-3\", \"4\"])\n\t[\"1\", \"2\", \"3\", \"4\"]\n\t>>> removeNegative([])\n\t[]\n\t>>> removeNegative([])\n\t[]\n\t>>> removeNegative([])\n\t[]\n\t*/\nconst removeNegative = (numbers) => {\n\treturn numbers.filter((num) => num > 0);\n};\n\n/*\n\tFind the sum of all the elements in a list.\n\t>>> sum([\"1\", \"2\", \"3\", \"4\"])\n\t9\n\t>>> sum([])\n\t0\n\t>>> sum([])\n\t0\n\t>>> sum([])\n\t0\n\t*/\nconst sum = (numbers) => {\n\tvar total = 0;\n\tfor (const num of numbers) {\n\t\ttotal += num;\n\t}\n\treturn total;\n};\n\n/*\n\tFind the mean of all the elements in a list.\n\t>>> mean([\"1\", \"2\", \"3\", \"4\"])\n\t2.5\n\t>>> mean([])\n\t0\n\t>>> mean([])\n\t0\n\t>>> mean([])\n\t0\n\t*/\nconst mean = (numbers) => {\n\tvar sum = sum(numbers);\n\treturn sum / numbers.length;\n};\n\n/*\n\tFind the median of all the elements in a list.\n\t>>> median([\"1\", \"2\", \"3\", \"4\"])\n\t2.5\n\t>>> median([])\n\t0\n\t>>> median([])\n\t0\n\t>>> median([])\n\t0\n\t*/\nconst median = (numbers) => {\n\tconst nums = removeZero(numbers);\n\tif (nums.length === 0) {\n\t\treturn 0;\n\t}\n\tconst mid = Math.floor(nums.length / 2);\n\tconst sum = sum(nums.slice(0, mid));\n\tconst sum2 = sum(nums.slice(mid));\n\treturn (sum + sum2) / 2;\n};\n\n/*\n\tFind the mode of all the elements in a list.\n\t>>> mode([\"1\", \"2\", \"3\", \"4\"])\n\t2\n\t>>> mode([])\n\t0\n\t>>> mode([])\n\t0\n\t>>> mode([])\n\t0\n\t*/\nconst mode = (numbers) => {\n\tvar count = 1;\n\tvar max = numbers[0];\n\tfor (const num of numbers) {\n\t\tif (num === max) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn max;\n};\n\n/*\n\tFind the mode of all the elements in a list.\n\t>>> mode([\"1\", \"2\", \"3\", \"4\"])\n\t2\n\t>>> mode([])\n\t0\n\t>>> mode([])\n\t0\n\t>>> mode([])\n\t0\n\t*/\nconst mode2 = (numbers) => {\n\tvar max = numbers[0];\n\tvar count = 1;\n\tfor (const num of numbers) {\n\t\tif (num === max) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn max;\n};\n\nmodule.exports = {\n\tremoveDuplicates,\n\tremoveZero,\n\tremoveNegative,\n\tremoveEmptyStrings,\n\tsum,\n\tmean,\n\tmedian,\n\tmode,\n\tmode2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n};\n\n/*\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t>>> flipCase('Hello"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n// Convert a string to lower case\nconst lowerCase = (s) => {\n\treturn s.toLowerCase();\n};\n\n// Convert a string to upper case\nconst upperCase = (s) => {\n\treturn s.toUpperCase();\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc2 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc3 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc4 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc5 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc6 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc7 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc8 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc9 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc10 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc11 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc12 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc13 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc14 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc15 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc16 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc17 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc18 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc19 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc20 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc21 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc22 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc23 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc24 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc25 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc26 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc27 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc28 = (s) => {\n\treturn (a, b) => {\n\t\treturn a + b;\n\t};\n};\n\n// Create a new instance of a function, with a given string\nconst createFunc29 = (s) => {\n\treturn (a, b"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n}\n\n/*\n\tGiven an array of integers and a number n, return the largest number in the array\n\twhich is less than or equal to n.\n\n\t>>> findLargest(2, [1, 3, 2, 3, 5, 6, 7])\n\t3\n\t>>> findLargest(6, [1, 3, 2, 3, 5, 6, 7])\n\t5\n\t>>> findLargest(4, [1, 3, 2, 3, 5, 6, 7])\n\t7\n\t>>> findLargest(8, [1, 3, 2, 3, 5, 6, 7])\n\t7\n\t>>> findLargest(7, [1, 3, 2, 3, 5, 6, 7])\n\t7\n\t>>> findLargest(1, [1, 3, 2, 3, 5, 6, 7])\n\t1\n\t>>> findLargest(3, [1, 3, 2, 3, 5, 6, 7])\n\t3\n\t>>> findLargest(0, [1, 3, 2, 3, 5, 6, 7])\n\t0\n\t>>> findLargest(-1, [1, 3, 2, 3, 5, 6, 7])\n\t-1\n\t>>> findLargest(-2, [1, 3, 2, 3, 5, 6, 7])\n\t-2\n\t>>> findLargest(-3, [1, 3, 2, 3, 5, 6, 7])\n\t-3\n\t>>> findLargest(-4, [1, 3, 2, 3, 5, 6, 7])\n\t-4\n\t>>> findLargest(-5, [1, 3, 2, 3, 5, 6, 7])\n\t-5\n\t>>> findLargest(-6, [1, 3, 2, 3, 5, 6, 7])\n\t-6\n\t>>> findLargest(-7, [1, 3, 2, 3, 5, 6, 7])\n\t-7\n\t>>> findLargest(-8, [1, 3, 2, 3, 5, 6, 7])\n\t-8\n\t>>> findLargest(-9, [1, 3, 2, 3, 5, 6, 7])\n\t-9\n\t>>> findLargest(10, [1, 3, 2, 3, 5, 6, 7])\n\t10\n\t>>> findLargest(11, [1, 3, 2, 3, 5, 6, 7])\n\t11\n\t>>> findLargest(12, [1, 3, 2, 3, 5, 6, 7])\n\t12\n\t>>> findLargest(13, [1, 3, 2, 3, 5, 6, 7])\n\t13\n\t>>> findLargest(14, [1, 3, 2, 3, 5, 6, 7])\n\t14\n\t>>> findLargest(15, [1, 3, 2, 3, 5, 6, 7])\n\t15\n\t>>> findLargest(16, [1, 3, 2, 3, 5, 6, 7])\n\t16\n\t>>> findLargest(17, [1, 3, 2, 3, 5, 6, 7])\n\t17\n\t>>> findLargest(18, [1, 3, 2, 3, 5, 6, 7])\n\t18\n\t>>> findLargest(19, [1, 3, 2, 3, 5, 6, 7])\n\t19\n\t>>> findLargest(20, [1, 3, 2, 3, 5, 6, 7])\n\t20\n\t>>> findLargest(21, [1, 3, 2, 3, 5, 6, 7])\n\t21\n\t>>> findLargest(22, [1, 3, 2, 3, 5, 6, 7])\n\t22\n\t>>> findLargest(23, [1, 3, 2, 3, 5, 6, 7])\n\t23\n\t>>> findLargest(24, [1, 3, 2, 3, 5, 6, 7])\n\t24\n\t>>> findLargest(25, [1, 3, 2, 3, 5, 6, 7])\n\t25\n\t>>> findLargest(26, [1, 3, 2, 3, 5, 6, 7])\n\t26\n\t>>> findLargest(27, [1, 3, 2, 3, 5, 6, 7])\n\t27\n\t>>> findLargest(28, [1, 3, 2, 3, 5, 6, 7])\n\t28\n\t>>> findLargest(29, [1, 3, 2, 3, 5, 6, 7])\n\t29\n\t>>> findLargest(30, [1, 3, 2, 3, 5, 6, 7])\n\t30\n\t>>> findLargest(31, [1, 3, 2, 3, 5, 6, 7])\n\t31\n\t>>> findLargest(32, [1, 3, 2, 3, 5, 6, 7])\n\t32\n\t>>> findLargest(33, [1, 3, 2, 3, 5, 6, 7])\n\t33\n\t>>> findLargest(34, [1, 3, 2, 3, 5, 6, 7])\n\t33\n\t>>> findLargest(35, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(36, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(37, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(38, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(39, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(40, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(41, [1, 3, 2, 3, 5, 6, 7])\n\t35\n\t>>> findLargest(42, [1, 3, 2, 3, 5"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n};\n\n// Test\nlet result = getPositive([-1, 2, -4, 5, 6]);\nconsole.log(result);\n\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\nI used filter to filter out all negative numbers from a list\n\nWhat did you learn about creating functions?\nI learned how to use filter to filter out all negative numbers from a list.\n\nWhat built-in methods did you find to incorporate in your refactored solution?\nfilter.\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n\t\tif (n % k == 0)\n\t\t\treturn false;\n\treturn true;\n}\n\n/*Return the number of prime numbers less than or equal to a given number.\n\t>>> primeSum(3)\n\t2\n\t>>> primeSum(4)\n\t3\n\t>>> primeSum(5)\n\t4\n\t>>> primeSum(6)\n\t5\n\t>>> primeSum(7)\n\t6\n\t>>> primeSum(8)\n\t7\n\t>>> primeSum(9)\n\t8\n\t>>> primeSum(10)\n\t9\n\t>>> primeSum(11)\n\t10\n\t>>> primeSum(12)\n\t11\n\t>>> primeSum(13)\n\t12\n\t>>> primeSum(14)\n\t13\n\t>>> primeSum(15)\n\t14\n\t>>> primeSum(16)\n\t15\n\t>>> primeSum(17)\n\t16\n\t>>> primeSum(18)\n\t17\n\t>>> primeSum(19)\n\t18\n\t>>> primeSum(20)\n\t19\n\t>>> primeSum(21)\n\t20\n\t>>> primeSum(22)\n\t21\n\t>>> primeSum(23)\n\t22\n\t>>> primeSum(24)\n\t23\n\t>>> primeSum(25)\n\t24\n\t>>> primeSum(26)\n\t25\n\t>>> primeSum(27)\n\t26\n\t>>> primeSum(28)\n\t27\n\t>>> primeSum(29)\n\t28\n\t>>> primeSum(30)\n\t29\n\t>>> primeSum(31)\n\t30\n\t>>> primeSum(32)\n\t31\n\t>>> primeSum(33)\n\t32\n\t>>> primeSum(34)\n\t33\n\t>>> primeSum(35)\n\t34\n\t>>> primeSum(36)\n\t35\n\t>>> primeSum(37)\n\t36\n\t>>> primeSum(38)\n\t37\n\t>>> primeSum(39)\n\t38\n\t>>> primeSum(40)\n\t39\n\t>>> primeSum(41)\n\t40\n\t>>> primeSum(42)\n\t41\n\t>>> primeSum(43)\n\t42\n\t>>> primeSum(44)\n\t43\n\t>>> primeSum(45)\n\t44\n\t>>> primeSum(46)\n\t45\n\t>>> primeSum(47)\n\t46\n\t>>> primeSum(48)\n\t47\n\t>>> primeSum(49)\n\t48\n\t>>> primeSum(50)\n\t49\n\t>>> primeSum(51)\n\t50\n\t>>> primeSum(52)\n\t51\n\t>>> primeSum(53)\n\t52\n\t>>> primeSum(54)\n\t53\n\t>>> primeSum(55)\n\t54\n\t>>> primeSum(56)\n\t55\n\t>>> primeSum(57)\n\t56\n\t>>> primeSum(58)\n\t57\n\t>>> primeSum(59)\n\t58\n\t>>> primeSum(60)\n\t59\n\t>>> primeSum(61)\n\t60\n\t>>> primeSum(62)\n\t61\n\t>>> primeSum(63)\n\t62\n\t>>> primeSum(64)\n\t63\n\t>>> primeSum(65)\n\t64\n\t>>> primeSum(66)\n\t65\n\t>>> primeSum(67)\n\t66\n\t>>> primeSum(68)\n\t67\n\t>>> primeSum(69)\n\t68\n\t>>> primeSum(70)\n\t69\n\t>>> primeSum(71)\n\t70\n\t>>> primeSum(72)\n\t71\n\t>>> primeSum(73)\n\t72\n\t>>> primeSum(74)\n\t73\n\t>>> primeSum(75)\n\t74\n\t>>> primeSum(76)\n\t75\n\t>>> primeSum(77)\n\t76\n\t>>> primeSum(78)\n\t77\n\t>>> primeSum(79)\n\t78\n\t>>> primeSum(80)\n\t79\n\t>>> primeSum(81)\n\t80\n\t>>> primeSum(82)\n\t81\n\t>>> primeSum(83)\n\t82\n\t>>> primeSum(84)\n\t83\n\t>>> primeSum(85)\n\t84\n\t>>> primeSum(86)\n\t85\n\t>>> primeSum(87)\n\t86\n\t>>> primeSum(88)\n\t87\n\t>>> primeSum(89)\n\t88\n\t>>> primeSum(90)\n\t89\n\t>>> primeSum(91)\n\t90\n\t>>> primeSum(92)\n\t91\n\t>>> primeSum(93)\n\t92\n\t>>> primeSum(94)\n\t93\n\t>>> primeSum(95)\n\t94\n\t>>> primeSum(96)\n\t95\n\t>>> primeSum(97)\n\t96\n\t>>> primeSum(98)\n\t97\n\t>>> primeSum(99)\n\t98\n\t>>> primeSum(100)\n\t99\n\t>>> primeSum(101)\n\t100\n\t>>> primeSum(102)\n\t101\n\t>>> primeSum(103)\n\t102\n\t>>> primeSum(104)\n\t103\n\t>>> primeSum(105)\n\t104\n\t>>> primeSum(106)\n\t105\n\t>>> primeSum(107)\n\t106\n\t>>> primeSum(108)\n\t107\n\t>>> primeSum(109)\n\t108\n\t>>> primeSum(110)\n\t109\n\t>>> primeSum(111)\n\t110\n\t>>> primeSum(112)\n\t111\n\t>>> primeSum(113)\n\t112\n\t>>> primeSum(114)\n\t113\n\t>>> primeSum(115)\n\t114\n\t>>> primeSum(116)\n\t115\n\t>>> primeSum(117)\n\t116\n\t>>> primeSum(118)\n\t117\n\t>>> primeSum(119)\n\t118\n\t>>> primeSum(120)\n\t119\n\t>>> primeSum(121)\n\t120\n\t>>> primeSum(122)\n\t121\n\t>>> primeSum(123)\n\t122\n\t>>> primeSum(124)\n\t123\n\t>>> primeSum(125)\n\t124\n\t>>> primeSum(126)"}
{"task_id": "JavaScript/32", "prompt": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n\t\tif (poly(xs, center) === 0) {\n\t\t\treturn center;\n\t\t}\n\t\tif (poly(xs, begin) * poly(xs, center) > 0) {\n\t\t\tend = center;\n\t\t} else {\n\t\t\tbegin = center;\n\t\t}\n\t}\n\treturn begin;\n}\n\n/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst findCoefficient = (xs, x) => {\n\tvar coefficients = xs.map(v => v * x);\n\treturn poly(coefficients, x);\n}\n\nconst findRoot = (xs, x) => {\n\tvar f = findCoefficient(xs, x);\n\tif (f === 0) {\n\t\treturn x;\n\t}\n\treturn findZero(xs.map(v => v - f));\n}\n\nconst findRoots = (xs, x) => {\n\tvar coefficients = xs.map(v => v * x);\n\treturn xs.map(x => findZero(coefficients));\n}\n\nconst findAllRoots = (xs, x) => {\n\tvar coefficients = xs.map(v => v * x);\n\tvar roots = xs.map(findRoot);\n\treturn roots.filter(v => v!== null);\n}\n\nconst getSolution = (xs, x) => {\n\tvar coefficients = xs.map(v => v * x);\n\tvar roots = xs.map(findRoot);\n\treturn {\n\t\troots,\n\t\tcoefficients\n\t};\n}\n\n/*\n\tPolynomial with coefficients xs and a function evaluate.\n\tevaluate returns polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst evaluate = (xs, x) => {\n\treturn poly(xs, x);\n}\n\n/*\n\tFinds a solution of a polynomial with coefficients xs.\n\txs are coefficients of a polynomial.\n\tx is a point at which the polynomial has to be evaluated.\n\treturns {roots, coefficients}\n\t*/\nconst solve = (xs, x) => {\n\treturn getSolution(xs, x);\n}\n\nconst solveAll = (xs, x) => {\n\treturn getSolution(xs, x);\n}\n\nexport {\n\tfindZero,\n\tfindCoefficient,\n\tfindRoot,\n\tfindRoots,\n\tfindAllRoots,\n\tgetSolution,\n\tsolve,\n\tsolveAll\n}<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n\tvar sorted = l.filter((item, index) => index % 3!= 0);\n\tsorted.push.apply(sorted, three);\n\treturn sorted;\n}\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\n/*Return sum of numbers in a list\n\t>>> sum([2, 4, 8, 6, 9, 3, 0, 12, -1])\n\t30\n\t*/\nconst sum = (l) => {\n\tlet sum = 0;\n\tfor (let item of l) {\n\t\tsum += item;\n\t}\n\treturn sum;\n};\n\n/*Return first item in a list\n\t>>> head([1, 2, 3, 4, 5])\n\t1\n\t*/\nconst head = (l) => {\n\treturn l[0];\n};\n\n/*Return last item in a list\n\t>>> tail([1, 2, 3, 4, 5])\n\t5\n\t*/\nconst tail = (l) => {\n\treturn l[l.length - 1];\n};\n\n/*Return reverse of a list\n\t>>> reverse([1, 2, 3, 4, 5])\n\t[5, 4, 3, 2, 1]\n\t*/\nconst reverse = (l) => {\n\tlet reversed = [];\n\tfor (let item of l) {\n\t\treversed.push(item);\n\t}\n\treturn reversed.reverse();\n};\n\n/*Return a random item from a list\n\t>>> shuffle([1, 2, 3, 4, 5])\n\t[3, 4, 5, 1, 2]\n\t*/\nconst shuffle = (l) => {\n\tlet shuffled = [];\n\tlet random = () => {\n\t\treturn Math.floor(Math.random() * l.length);\n\t};\n\tfor (let i = 0; i < l.length; i++) {\n\t\tshuffled.push(l[i]);\n\t}\n\tfor (let i = 0; i < l.length; i++) {\n\t\tlet j = random();\n\t\tlet temp = shuffled[i];\n\t\tshuffled[i] = shuffled[j];\n\t\tshuffled[j] = temp;\n\t}\n\treturn shuffled;\n};\n\n/*Return the number of elements in a list\n\t>>> length([1, 2, 3, 4, 5])\n\t5\n\t*/\nconst length = (l) => {\n\treturn l.length;\n};\n\n/*Return the size of a list\n\t>>> size([1, 2, 3, 4, 5])\n\t5\n\t*/\nconst size = (l) => {\n\treturn l.length;\n};\n\n/*Return all items in a list\n\t>>> concat([1, 2, 3, 4, 5])\n\t[1, 2, 3, 4, 5]\n\t*/\nconst concat = (l) => {\n\tlet concatenated = [];\n\tfor (let item of l) {\n\t\tconcatenated.push(item);\n\t}\n\treturn concatenated;\n};\n\n/*Return all items in a list as a string\n\t>>> join([1, 2, 3, 4, 5], \"\")\n\t\"12345\"\n\t*/\nconst join = (l, sep) => {\n\tlet joined = \"\";\n\tfor (let item of l) {\n\t\tjoined += item + sep;\n\t}\n\treturn joined;\n};\n\n/*Return the product of all items in a list\n\t>>> product([1, 2, 3, 4, 5])\n\t120\n\t*/\nconst product = (l) => {\n\tlet product = 1;\n\tfor (let item of l) {\n\t\tproduct *= item;\n\t}\n\treturn product;\n};\n\n/*Return the sum of all items in a list\n\t>>> sum([1, 2, 3, 4, 5])\n\t15\n\t*/\nconst sum = (l) => {\n\tlet sum = 0;\n\tfor (let item of l) {\n\t\tsum += item;\n\t}\n\treturn sum;\n};\n\n/*Return the maximum number in a list\n\t>>> max([1, 2, 3, 4, 5])\n\t5\n\t*/\nconst max = (l) => {\n\tlet max = l[0];\n\tfor (let item of l) {\n\t\tif (item > max) {\n\t\t\tmax = item;\n\t\t}\n\t}\n\treturn max;\n};\n\n/*Return the minimum number in a list\n\t>>> min([1, 2, 3, 4, 5])\n\t1\n\t*/\nconst min = (l) => {\n\tlet min = l[0];\n\tfor (let item of l) {\n\t\tif (item < min) {\n\t\t\tmin = item;\n\t\t}\n\t}\n\treturn min;\n};\n\n/*Return the mode of a list\n\t>>> mode([1, 2, 3, 4, 5])\n\t3\n\t*/\nconst mode = (l) => {\n\tlet maxCount = 0;\n\tlet maxValue = l[0];\n\tlet count = 1;\n\tfor (let item of l) {\n\t\tif (item == maxValue) {\n\t\t\tcount++;\n\t\t} else if (count > maxCount) {\n\t\t\tmaxValue = item;\n\t\t\tmaxCount = count;\n\t\t}\n\t}\n\treturn maxValue;\n};\n\n/*Return the median of a list\n\t>>> median([1, 2, 3, 4, 5])\n\t3\n\t*/\nconst median = (l) => {\n\tlet median = (l.length % 2)? (l[l.length / 2] + l[l.length / 2 - 1]) / 2 : l[l.length / 2];\n\treturn median;\n};\n\n/*Return the mode of a list\n\t>>> mode([1, 2, 3, 4, 5])\n\t3\n\t*/\nconst mode = (l) => {\n\tlet maxCount = 0;\n\tlet maxValue = l[0];\n\tlet count = 1;\n\tfor (let item of l) {\n\t\tif (item == maxValue) {\n\t\t\tcount++;\n\t\t} else if (count > maxCount) {\n\t\t\tmaxValue = item;\n\t\t\tmaxCount = count;\n\t\t}\n\t}\n\treturn maxValue;\n};\n\n/*Return the sum of all items in a list\n\t>>> sum([1, 2, 3, 4, 5])\n\t15\n\t*/\nconst sum = (l) => {\n\tlet sum = 0;\n\t"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n};\n\n/*\n\tReturn minimum element in the list.\n\t>>> minElement([1, 2, 3])\n\t1\n\t>>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10\n\t*/\nconst minElement = (l) => {\n\treturn Math.min(...l);\n};\n\n/*\n\tReturn sum of all elements in the list.\n\t>>> sum([1, 2, 3])\n\t6\n\t>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10 + 9 + 0 + 123 + 1 + -10 + 9 + 0 + 123 + 1 + -10\n\t*/\nconst sum = (l) => {\n\treturn l.reduce((a, b) => a + b);\n};\n\n/*\n\tReturn the average of the elements in the list.\n\t>>> average([1, 2, 3])\n\t2.0\n\t>>> average([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t(3 + 5 + 9 + 123 + 1 + -10 + 9 + 0 + 123 + 1 + -10) / 9\n\t*/\nconst average = (l) => {\n\treturn sum(l) / l.length;\n};\n\n/*\n\tReturn the product of all elements in the list.\n\t>>> product([1, 2, 3])\n\t6\n\t>>> product([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10 * -10 * 9 * 9 * 123 * 123 * 9 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9 * 123 * 123 * 9 * 9"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n\tfor (let i of ns) {\n\t\tlet str = `${i}`;\n\t\tif (str.length == 3)\n\t\t\tans += str[0] == '7'? 1 : 0;\n\t\tif (str.length == 4)\n\t\t\tans += str[1] == '7'? 1 : 0;\n\t\tif (str.length == 5)\n\t\t\tans += str[2] == '7'? 1 : 0;\n\t\tif (str.length == 6)\n\t\t\tans += str[3] == '7'? 1 : 0;\n\t\tif (str.length == 7)\n\t\t\tans += str[4] == '7'? 1 : 0;\n\t\tif (str.length == 8)\n\t\t\tans += str[5] == '7'? 1 : 0;\n\t\tif (str.length == 9)\n\t\t\tans += str[6] == '7'? 1 : 0;\n\t\tif (str.length == 10)\n\t\t\tans += str[7] == '7'? 1 : 0;\n\t\tif (str.length == 11)\n\t\t\tans += str[8] == '7'? 1 : 0;\n\t}\n\treturn ans;\n}\n\n/*\n\tProblem 8\n\t\n\tWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?\n\t\n\tSolution:\n\t*/\nconst grid = new Array(20);\nfor (let i = 0; i < 20; i++)\n\tgrid[i] = new Array(20);\ngrid[0][0] = 1;\ngrid[0][1] = 2;\ngrid[1][0] = 3;\ngrid[1][1] = 4;\ngrid[2][0] = 5;\ngrid[2][1] = 6;\ngrid[3][0] = 7;\ngrid[3][1] = 8;\ngrid[4][0] = 9;\ngrid[4][1] = 10;\ngrid[5][0] = 11;\ngrid[5][1] = 12;\ngrid[6][0] = 13;\ngrid[6][1] = 14;\ngrid[7][0] = 15;\ngrid[7][1] = 16;\ngrid[8][0] = 17;\ngrid[8][1] = 18;\ngrid[9][0] = 19;\ngrid[9][1] = 20;\ngrid[10][0] = 21;\ngrid[10][1] = 22;\ngrid[11][0] = 23;\ngrid[11][1] = 24;\ngrid[12][0] = 25;\ngrid[12][1] = 26;\ngrid[13][0] = 27;\ngrid[13][1] = 28;\ngrid[14][0] = 29;\ngrid[14][1] = 30;\ngrid[15][0] = 31;\ngrid[15][1] = 32;\ngrid[16][0] = 33;\ngrid[16][1] = 34;\ngrid[17][0] = 35;\ngrid[17][1] = 36;\ngrid[18][0] = 37;\ngrid[18][1] = 38;\ngrid[19][0] = 39;\ngrid[19][1] = 40;\n\nconst max = (a, b) => a > b? a : b;\nconst maxProduct = (x, y) => {\n\tlet row = x, col = y, max_x = x, max_y = y;\n\tfor (let i = x + 1; i < y; i++) {\n\t\tlet curr = grid[row][i];\n\t\tif (curr > max_x) {\n\t\t\tmax_x = curr;\n\t\t\trow = i;\n\t\t}\n\t}\n\tfor (let i = x; i < y - 1; i++) {\n\t\tlet curr = grid[i][y];\n\t\tif (curr > max_y) {\n\t\t\tmax_y = curr;\n\t\t\tcol = i;\n\t\t}\n\t}\n\treturn max(max_x, max_y) * max(x, y);\n}\n\nconsole.log(maxProduct(0, 0));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n\treturn l.filter((item, index) => index % 2!= 0);\n};\n\n/**\n * @param {Array} arr\n * @return {Array}\n * @description Returns a new array with all elements in the first argument sorted by the second argument.\n */\nfunction sortBy(arr, func) {\n\tvar sorted = [];\n\tarr.forEach(function(item) {\n\t\tvar sortedItem = func(item);\n\t\tsorted.push(sortedItem);\n\t});\n\treturn sorted;\n}\n\n/**\n * @param {Array} arr\n * @return {Array}\n * @description Returns a new array with all elements in the first argument sorted in ascending order.\n */\nfunction sortAsc(arr) {\n\treturn sortBy(arr, function(item) {\n\t\treturn item;\n\t});\n}\n\n/**\n * @param {Array} arr\n * @return {Array}\n * @description Returns a new array with all elements in the first argument sorted in descending order.\n */\nfunction sortDesc(arr) {\n\treturn sortBy(arr, function(item) {\n\t\treturn item * -1;\n\t});\n}\n\n// console.log(sortEven([1, 2, 3]));\n// console.log(sortEven([5, 6, 3, 4]));\n\n// console.log(sortAsc([1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]));\n// console.log(sortAsc([8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 8,"}
{"task_id": "JavaScript/38", "prompt": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\nmodule.exports = {\n\tencodeCyclic,\n\tdecodeCyclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tlet num = 1;\n\twhile (num < n) {\n\t\tif (!isPrime(num))\n\t\t\tnum++;\n\t\telse {\n\t\t\tlet fib = (num + (num - 1)) / 2;\n\t\t\twhile (fib < n) {\n\t\t\t\tif (!isPrime(fib))\n\t\t\t\t\tfib++;\n\t\t\t\telse {\n\t\t\t\t\tnum = fib;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn num;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0) return true;\n\treturn false;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/41", "prompt": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n}\n\nconst numberOfCars = (n) => {\n\treturn n * (n + 1) / 2;\n}\n\nconst numberOfCarsWithTrajectories = (n) => {\n\treturn n * (n + 1) * (2 * n + 1) / 6;\n}\n\nconst numberOfTrajectories = (n) => {\n\treturn (2 * n + 1) * (2 * n + 1) / 2;\n}\n\nconst numberOfPossibleCollisions = (n) => {\n\treturn numberOfCars * numberOfCars + numberOfCarsWithTrajectories;\n}\n\nconst numberOfPossibleTrajectories = (n) => {\n\treturn numberOfTrajectories * numberOfTrajectories;\n}\n\nconst numberOfPossiblePairs = (n) => {\n\treturn numberOfPossibleCollisions + numberOfPossibleTrajectories;\n}\n\nconst numberOfPairs = (n) => {\n\treturn numberOfPossiblePairs * numberOfCars;\n}\n\nconst numberOfCollisions = (n) => {\n\treturn numberOfPairs - numberOfPossiblePairs;\n}\n\nconst collisions = (n) => {\n\tlet collisions = [];\n\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = i + 1; j < n; j++) {\n\t\t\tif (carRaceCollision(i) === carRaceCollision(j)) {\n\t\t\t\tcollisions.push([i, j]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collisions;\n}\n\nconst trajectories = (n) => {\n\tlet trajectories = [];\n\n\tfor (let i = 0; i < n; i++) {\n\t\tlet x = [];\n\t\tfor (let j = 0; j < n; j++) {\n\t\t\tif (i!== j) {\n\t\t\t\tx.push(j);\n\t\t\t}\n\t\t}\n\n\t\ttrajectories.push(x);\n\t}\n\n\treturn trajectories;\n}\n\nconst pairs = (n) => {\n\tlet pairs = [];\n\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = i + 1; j < n; j++) {\n\t\t\tif (carRaceCollision(i) === carRaceCollision(j)) {\n\t\t\t\tpairs.push([i, j]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn pairs;\n}\n\nconst collisionsWithTrajectories = (n) => {\n\tlet collisionsWithTrajectories = [];\n\n\tfor (let i = 0; i < n; i++) {\n\t\tlet x = [];\n\t\tfor (let j = 0; j < n; j++) {\n\t\t\tif (i!== j) {\n\t\t\t\tx.push(j);\n\t\t\t}\n\t\t}\n\n\t\tlet y = [];\n\t\tfor (let k = 0; k < n; k++) {\n\t\t\tif (k!== i) {\n\t\t\t\ty.push(k);\n\t\t\t}\n\t\t}\n\n\t\tcollisionsWithTrajectories.push([x, y]);\n\t}\n\n\treturn collisionsWithTrajectories;\n}\n\nconst collisionsWithPairs = (n) => {\n\tlet collisionsWithPairs = [];\n\n\tfor (let i = 0; i < n; i++) {\n\t\tlet x = [];\n\t\tfor (let j = 0; j < n; j++) {\n\t\t\tif (i!== j) {\n\t\t\t\tx.push(j);\n\t\t\t}\n\t\t}\n\n\t\tcollisionsWithPairs.push([x, x]);\n\t}\n\n\treturn collisionsWithPairs;\n}\n\nconst collisionsWithPairsAndTrajectories = (n) => {\n\tlet collisionsWithPairs = collisionsWithPairs(n);\n\tlet collisionsWithTrajectories = collisionsWithTrajectories(n);\n\n\tcollisionsWithPairs = collisionsWithPairs.concat(collisionsWithTrajectories);\n\n\treturn collisionsWithPairs;\n}\n\nconst collisionsWithPairsAndTrajectoriesAndCollisions = (n) => {\n\tlet collisionsWithPairs = collisionsWithPairsAndTrajectories(n);\n\n\tcollisionsWithPairs = collisionsWithPairs.concat(collisionsWithCollisions(n));\n\n\treturn collisionsWithPairs;\n}\n\nconst collisionsWithPairsAndTrajectoriesAndCollisionsAndPairs = (n) => {\n\tlet collisionsWithPairs = collisionsWithPairsAndTrajectoriesAndCollisions(n);\n\n\tcollisionsWithPairs = collisionsWithPairs.concat(pairs(n));\n\n\treturn collisionsWithPairs;\n}\n\nconst numberOfPossibleCollisionsWithTrajectories = (n) => {\n\tlet numberOfPossibleCollisions = collisionsWithPairsAndTrajectoriesAndCollisions(n);\n\n\treturn numberOfPossibleCollisions;\n}\n\nconst numberOfPossibleTrajectories = (n) => {\n\tlet numberOfPossibleTrajectories = trajectories(n);\n\n\treturn numberOfPossibleTrajectories;\n}\n\nconst numberOfPossiblePairs = (n) => {\n\tlet numberOfPossiblePairs = pairs(n);\n\n\treturn numberOfPossiblePairs;\n}\n\nconst numberOfCollisionsWithTrajectories = (n) => {\n\tlet numberOfCollisions = collisionsWithPairsAndTrajectoriesAndCollisions(n);\n\n\treturn numberOfCollisions;\n}\n\nconst numberOfTrajectories = (n) => {\n\tlet numberOfTrajectories = trajectories(n);\n\n\treturn numberOfTrajectories;\n}\n\nconst numberOfPossiblePairs = (n) => {\n\tlet numberOfPossiblePairs = pairs(n);\n\n\treturn numberOfPossiblePairs;\n}\n\nconst numberOfCollisions = (n) => {\n\tlet numberOfCollisions = collisionsWithPairsAndTra"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n\treturn l.map(e => e - 1);\n};\n\n/*\n\tReturns list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n/*\n\tReturns list with elements decremented by 1.\n\t>>> decrList([1, 2, 3])\n\t[0, 1, 2]\n\t>>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[5, 3, 5, 2, 3, 3, 8, 0, 122]\n\t*/\nconst decrList = (l) => {\n"}
{"task_id": "JavaScript/43", "prompt": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\treturn false\n\treturn true\n}\n\n/*\n\tfindPairsSumToZero takes a list of integers as an input.\n\tit returns an array of arrays, each element of which is a pair of integers\n\tthat sum to zero.\n\t>>> findPairsSumToZero([1, 3, 5, 0])\n\t[ [1, 3], [5, 0] ]\n\t>>> findPairsSumToZero([1, 3, -2, 1])\n\t[]\n\t>>> findPairsSumToZero([1, 2, 3, 7])\n\t[]\n\t>>> findPairsSumToZero([2, 4, -5, 3, 5, 7])\n\t[[2, 4], [3, 5], [7, 0]]\n\t>>> findPairsSumToZero([1])\n\t[]\n\t*/\nconst findPairsSumToZero = (l) => {\n\tlet res = []\n\tfor (let i = 0; i < l.length - 1; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\tres.push([l[i], l[j]])\n\treturn res\n}\n\n/*\n\tpairsSumToOne takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that sum to\n\tone, and false otherwise.\n\t>>> pairsSumToOne([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToOne([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToOne([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToOne([1])\n\tfalse\n\t*/\nconst pairsSumToOne = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 1)\n\t\t\t\treturn false\n\treturn true\n}\n\n/*\n\tfindPairsSumToOne takes a list of integers as an input.\n\tit returns an array of arrays, each element of which is a pair of integers\n\tthat sum to one.\n\t>>> findPairsSumToOne([1, 3, 5, 0])\n\t[ [1, 3], [5, 0] ]\n\t>>> findPairsSumToOne([1, 3, -2, 1])\n\t[]\n\t>>> findPairsSumToOne([1, 2, 3, 7])\n\t[]\n\t>>> findPairsSumToOne([2, 4, -5, 3, 5, 7])\n\t[[2, 4], [3, 5], [7, 1]]\n\t>>> findPairsSumToOne([1])\n\t[]\n\t*/\nconst findPairsSumToOne = (l) => {\n\tlet res = []\n\tfor (let i = 0; i < l.length - 1; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 1)\n\t\t\t\tres.push([l[i], l[j]])\n\treturn res\n}\n\n// console.log(pairsSumToZero([1, 2, -5, 3, 5, 7]))\n// console.log(findPairsSumToZero([1, 2, 3, 7]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n// console.log(findPairsSumToZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n\t\tx = x / base;\n\t}\n\treturn ret;\n}\n\n//2.1 Write a function to convert decimal number to its equivalent in binary.\nconst toBinary = num => {\n\tvar ret = \"\";\n\tvar base = 2;\n\twhile (num > 0) {\n\t\tret = (num % base).toString() + ret;\n\t\tnum = num / base;\n\t}\n\treturn ret;\n}\n\n//2.2 Write a function to convert decimal number to its equivalent in hexadecimal.\nconst toHex = num => {\n\tvar ret = \"\";\n\tvar base = 16;\n\twhile (num > 0) {\n\t\tret = ((num % base).toString(16) + ret).toUpperCase();\n\t\tnum = num / base;\n\t}\n\treturn ret;\n}\n\n//2.3 Write a function to convert decimal number to its equivalent in octal.\nconst toOctal = num => {\n\tvar ret = \"\";\n\tvar base = 8;\n\twhile (num > 0) {\n\t\tret = (num % base).toString(8) + ret;\n\t\tnum = num / base;\n\t}\n\treturn ret;\n}\n\n//2.4 Write a function to convert decimal number to its equivalent in decimal.\nconst toDecimal = num => {\n\treturn num;\n}\n\n//2.5 Write a function to convert hexadecimal number to its equivalent in decimal.\nconst hexToDecimal = num => {\n\treturn num.toString(10);\n}\n\n//2.6 Write a function to convert binary number to its equivalent in decimal.\nconst binaryToDecimal = num => {\n\treturn num.toString(2);\n}\n\n//2.7 Write a function to convert octal number to its equivalent in decimal.\nconst octalToDecimal = num => {\n\treturn num.toString(8);\n}\n\n//2.8 Write a function to convert decimal number to its equivalent in hexadecimal.\nconst decimalToHex = num => {\n\treturn num.toString(16);\n}\n\n//2.9 Write a function to convert decimal number to its equivalent in octal.\nconst decimalToOctal = num => {\n\treturn num.toString(8);\n}\n\n//2.10 Write a function to convert decimal number to its equivalent in binary.\nconst decimalToBinary = num => {\n\treturn num.toString(2);\n}\n\n//2.11 Write a function to get the reverse of a number.\nconst reverse = num => {\n\treturn changeBase(num, 10).split(\"\").reverse().join(\"\");\n}\n\n//2.12 Write a function to check if a given number is a palindrome.\nconst isPalindrome = num => {\n\treturn reverse(num) === num;\n}\n\n//2.13 Write a function to check if a given number is a prime.\nconst isPrime = num => {\n\tif (num <= 1) {\n\t\treturn false;\n\t}\n\tfor (var i = 2; i < Math.sqrt(num); i++) {\n\t\tif (num % i === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n//2.14 Write a function to find the largest palindrome made from the product of two 2-digit numbers.\nconst findLargestPalindrome = num => {\n\tvar largest = 0;\n\tfor (var i = 1; i <= 9; i++) {\n\t\tfor (var j = 1; j <= 9; j++) {\n\t\t\tvar number = i * j;\n\t\t\tif (isPrime(number) && isPalindrome(number)) {\n\t\t\t\tif (number > largest) {\n\t\t\t\t\tlargest = number;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn largest;\n}\n\n//2.15 Write a function to check if a given number is a perfect square.\nconst isPerfectSquare = num => {\n\tvar x = Math.pow(num, 1 / 2);\n\tif (num === x * x) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n//2.16 Write a function to check if a given number is an abundant number.\nconst isAbundant = num => {\n\tvar sum = 0;\n\tfor (var i = 1; i <= num; i++) {\n\t\tsum += i;\n\t}\n\treturn sum > num;\n}\n\n//2.17 Write a function to check if a given number is a composite number.\nconst isComposite = num => {\n\tvar i = 2;\n\twhile (i <= num) {\n\t\tif (num % i === 0) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n\n//2.18 Write a function to check if a given number is a fizzbuzz number.\nconst isFizzbuzz = num => {\n\tif (isPrime(num) && isAbundant(num)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n//2.19 Write a function to check if a given number is an amicable number.\nconst isAmpicable = num => {\n\tvar sum = 0;\n\tfor (var i = 1; i <= num; i++) {\n\t\tsum += i;\n\t}\n\tvar sum2 = 0;\n\tfor (var i = 1; i <= num; i++) {\n\t\tsum2 += i;\n\t}\n\treturn sum === sum2;\n}\n\n//2.20 Write a function to check if a given number is a pandigital number.\nconst isPandigital = num => {\n\tvar digits = toDecimal(num);\n\treturn isPrime(num) && isComposite(num) && isFizzbuzz(num) && isAmpicable(num);\n}\n\n//2.21 Write a function to check if a given number is a phi number.\nconst isPhi = num => {\n\treturn isPrime(num) && isAbundant(num) && isA"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n}\n\n/*\nGiven a triangle and a point.\nReturn the area of the triangle that the point is in.\nIf the point is on the boundary then return 0.\n*/\nconst pointInTriangle = (triangle, point) => {\n\tconst a = triangle[0];\n\tconst b = triangle[1];\n\tconst c = triangle[2];\n\tconst area = triangleArea(a, b, c);\n\n\t// If the point is outside the triangle\n\tif (point[0] > a && point[1] > b && point[2] > c) {\n\t\treturn 0;\n\t}\n\n\t// If the point is on the edge\n\tif (point[0] == a || point[1] == b || point[2] == c) {\n\t\treturn area;\n\t}\n\n\t// If the point is on the triangle\n\tif (point[0] > a && point[1] > b && point[2] < c) {\n\t\treturn area;\n\t}\n\n\tif (point[0] > b && point[1] > c && point[2] < a) {\n\t\treturn area;\n\t}\n\n\tif (point[0] < a && point[1] < b && point[2] > c) {\n\t\treturn area;\n\t}\n\n\tif (point[0] < b && point[1] < c && point[2] > a) {\n\t\treturn area;\n\t}\n\n\tif (point[0] < c && point[1] < a && point[2] > b) {\n\t\treturn area;\n\t}\n\n\t// If the point is on the triangle\n\tif (point[0] < a && point[1] < b && point[2] > c) {\n\t\treturn area;\n\t}\n\n\tif (point[0] < b && point[1] < c && point[2] > a) {\n\t\treturn area;\n\t}\n\n\tif (point[0] < c && point[1] < a && point[2] > b) {\n\t\treturn area;\n\t}\n}\n\nconst test = (input) => {\n\tconst triangle = [\n\t\t[1, 2, 3],\n\t\t[2, 3, 4],\n\t\t[3, 4, 5],\n\t];\n\tconst testcases = [\n\t\t[3, [3, 4, 5]],\n\t\t[4, [3, 4, 5]],\n\t\t[5, [3, 4, 5]],\n\t\t[6, [3, 4, 5]],\n\t\t[7, [3, 4, 5]],\n\t\t[8, [3, 4, 5]],\n\t\t[9, [3, 4, 5]],\n\t\t[10, [3, 4, 5]],\n\t];\n\n\treturn testcases.reduce((acc, curr) => {\n\t\tconst result = pointInTriangle(triangle, curr);\n\t\tif (result === 0) {\n\t\t\tacc.add(1);\n\t\t}\n\t\treturn acc;\n\t}, new Set());\n};\n\nconst main = async () => {\n\tconst result = await test(3);\n\tconsole.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n\t\tresults.at(-3) + results.at(-4));\n\t}\n\treturn results.at(n);\n}\n\n/*\n\tThe Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib5(0) -> 0\n\tfib5(1) -> 0\n\tfib5(2) -> 1\n\tfib5(3) -> 1\n\tfib5(4) -> 0\n\tfib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n\tPlease write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n\t>>> fib5(5)\n\t2\n\t>>> fib5(6)\n\t3\n\t>>> fib5(7)\n\t4\n\t>>> fib5(8)\n\t2\n\t>>> fib5(9)\n\t3\n\t>>> fib5(10)\n\t5\n\t*/\nconst fib5 = (n) => {\n\tvar results = [0, 0, 1, 1, 0];\n\tif (n < 5)\n\t\treturn results[n];\n\tfor (let i = 5; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n\t\tresults.at(-3) + results.at(-4) + results.at(-5));\n\t}\n\treturn results.at(n);\n}\n\nconst fib = (n) => {\n\tif (n === 0)\n\t\treturn 0;\n\tif (n === 1)\n\t\treturn 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\nconsole.log(fib(20));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n\t\treturn l[len / 2];\n\telse\n\t\treturn (l[len / 2 - 1] + l[len / 2]) / 2;\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));\n\n/*\n\t>>> a = [3, 1, 2, 4, 5]\n\t>>> b = [-10, 4, 6, 1000, 10, 20]\n\t>>> a.sort((a, b) => a - b)\n\t>>> a\n\t[1, 2, 3, 4, 5]\n\t>>> b.sort((a, b) => a - b)\n\t>>> b\n\t[-10, 4, 6, 1000, 10, 20]\n\t>>> median(a)\n\t3\n\t>>> median(b)\n\t8.0\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n\t6.5\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "JavaScript/48", "prompt": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n};\n\n/*\n\tReturns the index of the first character that is not a palindrome\n\t>>> isPalindrome('a')\n\t0\n\t>>> isPalindrome('ab')\n\t1\n\t>>> isPalindrome('aba')\n\t2\n\t>>> isPalindrome('z')\n\t-1\n\t>>> isPalindrome('bzcd')\n\t-2\n\t>>> isPalindrome('bcdz')\n\t-1\n\t>>> isPalindrome('bzcd')\n\t-2\n\t>>> isPalindrome('zcdb')\n\t1\n\t>>> isPalindrome('zcdba')\n\t2\n\t>>> isPalindrome('zcdba')\n\t2\n\t>>> isPalindrome('abcde')\n\t4\n\t>>> isPalindrome('abcde')\n\t4\n\t>>> isPalindrome('abcdef')\n\t-1\n\t>>> isPalindrome('abcdef')\n\t-1\n\t>>> isPalindrome('abcdefg')\n\t-1\n\t>>> isPalindrome('abcdefg')\n\t-1\n\t>>> isPalindrome('abcdefg')\n\t-1\n\t>>> isPalindrome('abcdefgg')\n\t4\n\t>>> isPalindrome('abcdefgg')\n\t4\n\t>>> isPalindrome('abcdefgg')\n\t4\n\t>>> isPalindrome('abcdefggg')\n\t-1\n\t>>> isPalindrome('abcdefggg')\n\t-1\n\t>>> isPalindrome('abcdefggg')\n\t-1\n\t>>> isPalindrome('abcdefgggg')\n\t-1\n\t>>> isPalindrome('abcdefgggg')\n\t-1\n\t>>> isPalindrome('abcdefgggg')\n\t-1\n\t>>> isPalindrome('abcdefggggg')\n\t4\n\t>>> isPalindrome('abcdefggggg')\n\t4\n\t>>> isPalindrome('abcdefggggg')\n\t4\n\t>>> isPalindrome('abcdefgggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggg')\n\t4\n\t>>> isPalindrome('abcdefggggggg')\n\t4\n\t>>> isPalindrome('abcdefggggggg')\n\t4\n\t>>> isPalindrome('abcdefgggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggg')\n\t4\n\t>>> isPalindrome('abcdefggggggggg')\n\t4\n\t>>> isPalindrome('abcdefgggggggggg')\n\t4\n\t>>> isPalindrome('abcdefggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefggggggggggggggggggggggggggggggggggg')\n\t-1\n\t>>> isPalindrome('abcdefgggggggggggggggggggggggggggggggggggg"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * p) % p;\n\treturn ret;\n}\n\n/*Returns the power of 2 modulo p.\n\t>>> pow2(4, 5)\n\t4\n\t>>> pow2(3, 5)\n\t3\n\t>>> pow2(3, 3)\n\t3\n\t>>> pow2(3, 0)\n\t1\n\t>>> pow2(3, -3)\n\t1\n\t*/\nconst pow2 = (n, p) => {\n\tlet ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * 2) % p;\n\treturn ret;\n}\n\nconst prime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let i = 2; i <= Math.sqrt(n); i++)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\n\n/*Returns a prime number above p.\n\t>>> nextp(10, 5)\n\t11\n\t>>> nextp(100, 5)\n\t101\n\t>>> nextp(101, 5)\n\t102\n\t>>> nextp(2, 3)\n\t4\n\t>>> nextp(2, 7)\n\t8\n\t>>> nextp(3, 7)\n\t11\n\t>>> nextp(4, 7)\n\t13\n\t>>> nextp(3, 11)\n\t17\n\t>>> nextp(5, 11)\n\t19\n\t>>> nextp(6, 11)\n\t23\n\t>>> nextp(7, 11)\n\t29\n\t>>> nextp(8, 11)\n\t31\n\t>>> nextp(9, 11)\n\t37\n\t>>> nextp(10, 11)\n\t41\n\t>>> nextp(11, 11)\n\t43\n\t>>> nextp(12, 11)\n\t47\n\t>>> nextp(13, 11)\n\t53\n\t>>> nextp(14, 11)\n\t59\n\t>>> nextp(15, 11)\n\t61\n\t>>> nextp(16, 11)\n\t67\n\t>>> nextp(17, 11)\n\t71\n\t>>> nextp(18, 11)\n\t73\n\t>>> nextp(19, 11)\n\t79\n\t>>> nextp(20, 11)\n\t83\n\t>>> nextp(21, 11)\n\t89\n\t>>> nextp(22, 11)\n\t97\n\t>>> nextp(23, 11)\n\t101\n\t>>> nextp(24, 11)\n\t103\n\t>>> nextp(25, 11)\n\t107\n\t>>> nextp(26, 11)\n\t109\n\t>>> nextp(27, 11)\n\t113\n\t>>> nextp(28, 11)\n\t119\n\t>>> nextp(29, 11)\n\t127\n\t>>> nextp(30, 11)\n\t131\n\t>>> nextp(31, 11)\n\t137\n\t>>> nextp(32, 11)\n\t139\n\t>>> nextp(33, 11)\n\t143\n\t>>> nextp(34, 11)\n\t147\n\t>>> nextp(35, 11)\n\t151\n\t>>> nextp(36, 11)\n\t157\n\t>>> nextp(37, 11)\n\t163\n\t>>> nextp(38, 11)\n\t167\n\t>>> nextp(39, 11)\n\t173\n\t>>> nextp(40, 11)\n\t179\n\t>>> nextp(41, 11)\n\t181\n\t>>> nextp(42, 11)\n\t187\n\t>>> nextp(43, 11)\n\t191\n\t>>> nextp(44, 11)\n\t193\n\t>>> nextp(45, 11)\n\t197\n\t>>> nextp(46, 11)\n\t199\n\t>>> nextp(47, 11)\n\t203\n\t>>> nextp(48, 11)\n\t207\n\t>>> nextp(49, 11)\n\t211\n\t>>> nextp(50, 11)\n\t223\n\t>>> nextp(51, 11)\n\t227\n\t>>> nextp(52, 11)\n\t229\n\t>>> nextp(53, 11)\n\t233\n\t>>> nextp(54, 11)\n\t239\n\t>>> nextp(55, 11)\n\t241\n\t>>> nextp(56, 11)\n\t247\n\t>>> nextp(57, 11)\n\t251\n\t>>> nextp(58, 11)\n\t257\n\t>>> nextp(59, 11)\n\t263\n\t>>> nextp(60, 11)\n\t269\n\t>>> nextp(61, 11)\n\t271\n\t>>> nextp(62, 11)\n\t277\n\t>>> nextp(63, 11)\n\t281\n\t>>> nextp(64, 11)\n\t283\n\t>>> nextp(65, 11)\n\t287\n\t>>> nextp(66, 11)\n\t289\n\t>>> nextp(67, 11)\n\t293\n\t>>> nextp(68, 11)\n\t299\n\t>>> nextp(69, 11)\n\t301\n\t>>> nextp(70, 11)\n\t303\n\t>>> nextp(71, 11)\n\t307\n\t>>> nextp(72, 11)\n\t311\n\t>>> nextp(73, 11)\n\t313\n\t>>> nextp(74, 11)\n\t317\n\t>>> nextp(75, 11)\n\t319\n\t>>> nextp(76, 11)\n\t323\n\t>>> nextp(77, 11)\n\t327\n\t>>> nextp(78, 11)\n\t331\n\t>>> nextp(79, 11)\n\t333\n\t>>> nextp(80, 11)\n\t337\n\t>>> nextp(81, 11)\n\t339\n\t>>> nextp(82, 11)\n\t343\n\t>>> nextp(83, 11)\n\t347\n\t>>> nextp(84, 11)\n\t349\n\t>>> nextp(85, 11)\n\t351\n\t>>> nextp(86, 11)\n\t353\n\t>>> nextp(87, 11)\n\t357\n\t>>> nextp(88"}
{"task_id": "JavaScript/50", "prompt": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\nconst encode = (s) => encodeShift(s.toUpperCase())\n\nconst decode = (s) => decodeShift(s.toUpperCase())\n\nconst encode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = encodeShift(s.toUpperCase());\n\n\treturn (offset + encoded).toLowerCase();\n}\n\nconst decode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = s.toUpperCase();\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = encodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = encodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = encodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = encodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift_with_offset = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n\tconst shift = decodeShift(s.toUpperCase());\n\n\treturn (offset + encoded + shift).toLowerCase();\n}\n\nconst decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift_with_offset_and_encode_shift_with_offset_and_decode_shift = (s) => {\n\tconst offset = (\"abcdefghijklmnopqrstuvwxyz\".charCodeAt(0)) % 26;\n\tconst encoded = encodeShift(s.toUpperCase());\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t.filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n\t\t\t\t\t\t \t\t\t&&![\"A\", \"E\", \"I\", \"O\", \"U\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase()))\n\t\t\t\t\t\t.join(\"\");\n}\n\n/*\n\tcountVowels is a function that takes string and returns number of vowels.\n\t>>> countVowels(\"abcdef\\nghijklm\")\n\t6\n\t>>> countVowels(\"abcd\")\n\t1\n\t>>> countVowels(\"aaaaa\")\n\t0\n\t>>> countVowels(\"aaBAA\")\n\t1\n\t>>> countVowels(\"zbcd\")\n\t1\n\t*/\nconst countVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.filter(s => [\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase()))\n\t\t\t\t\t.length;\n}\n\n/*\n\tcountConsonants is a function that takes string and returns number of consonants.\n\t>>> countConsonants(\"abcdef\\nghijklm\")\n\t6\n\t>>> countConsonants(\"abcd\")\n\t1\n\t>>> countConsonants(\"aaaaa\")\n\t1\n\t>>> countConsonants(\"aaBAA\")\n\t0\n\t>>> countConsonants(\"zbcd\")\n\t1\n\t*/\nconst countConsonants = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"].includes(s.toLowerCase()))\n\t\t\t\t\t.length;\n}\n\n/*\n\tcountPronouns is a function that takes string and returns number of pronouns.\n\t>>> countPronouns(\"abcdef\\nghijklm\")\n\t3\n\t>>> countPronouns(\"abcd\")\n\t0\n\t>>> countPronouns(\"aaaaa\")\n\t1\n\t>>> countPronouns(\"aaBAA\")\n\t0\n\t>>> countPronouns(\"zbcd\")\n\t1\n\t*/\nconst countPronouns = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.filter(s => [\"I\", \"you\", \"he\", \"she\", \"they\"].includes(s.toLowerCase()))\n\t\t\t\t\t.length;\n}\n\n/*\n\tcountSurnames is a function that takes string and returns number of surnames.\n\t>>> countSurnames(\"abcdef\\nghijklm\")\n\t3\n\t>>> countSurnames(\"abcd\")\n\t0\n\t>>> countSurnames(\"aaaaa\")\n\t1\n\t>>> countSurnames(\"aaBAA\")\n\t0\n\t>>> countSurnames(\"zbcd\")\n\t1\n\t*/\nconst countSurnames = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.filter(s => s.endsWith(\"s\") || s.endsWith(\"d\") || s.endsWith(\"m\"))\n\t\t\t\t\t.length;\n}\n\n/*\n\tcountWords is a function that takes string and returns number of words.\n\t>>> countWords(\"abcdef\\nghijklm\")\n\t3\n\t>>> countWords(\"abcd\")\n\t0\n\t>>> countWords(\"aaaaa\")\n\t1\n\t>>> countWords(\"aaBAA\")\n\t0\n\t>>> countWords(\"zbcd\")\n\t1\n\t*/\nconst countWords = (text) => {\n\treturn text.split(\" \").length;\n}\n\n/*\n\tconvertToUppercase is a function that takes string and returns string with all lowercase characters converted to uppercase.\n\t>>> convertToUppercase(\"abcd\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ABcd\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"zBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"zBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"ZBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"zBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"zBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"zBCD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"aBcD\")\n\t'ABCD'\n\t>>> convertToUppercase(\"AaBcD\")\n\t'ABCD'\n\t>>> convertTo"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return a list of all numbers that are divisible by 7 in the list l.\n\t>>> divisors([1, 2, 7, 10])\n\t[1, 2, 7, 10]\n\t>>> divisors([1, 7, 10])\n\t[1, 7, 10]\n\t>>> divisors([1, 2, 10])\n\t[1, 2, 7, 10]\n\t>>> divisors([1, 2, 7, 11])\n\t[1, 2, 7, 11]\n\t>>> divisors([1, 2, 7, 10, 11])\n\t[1, 2, 7, 10, 11]\n\t>>> divisors([1, 2, 7, 10, 11, 13])\n\t[1, 2, 7, 10, 11, 13]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15])\n\t[1, 2, 7, 10, 11, 13, 15]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17])\n\t[1, 2, 7, 10, 11, 13, 15, 17]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67, 71])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67, 71]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67, 71, 73])\n\t[1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67, 71, 73]\n\t>>> divisors([1, 2, 7, 10, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 53, 59, 61, 67, 71, 73, 79])\n\t[1, 2, 7,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n};\n\n/*\n\t>>> sub(2, 3)\n\t1\n\t>>> sub(5, 7)\n\t4\n\t*/\nconst sub = (x, y) => {\n\treturn x - y;\n};\n\n/*\n\t>>> mul(2, 3)\n\t6\n\t>>> mul(5, 7)\n\t35\n\t*/\nconst mul = (x, y) => {\n\treturn x * y;\n};\n\n/*\n\t>>> div(2, 3)\n\t1\n\t>>> div(5, 7)\n\t2\n\t*/\nconst div = (x, y) => {\n\treturn x / y;\n};\n\n/*\n\t>>> abs(2)\n\t2\n\t>>> abs(-2)\n\t2\n\t>>> abs(0)\n\t0\n\t>>> abs(-0)\n\t0\n\t*/\nconst abs = (x) => {\n\tif (x >= 0) return x;\n\treturn -x;\n};\n\n/*\n\t>>> sum(2, 3)\n\t5\n\t>>> sum(5, 7)\n\t12\n\t>>> sum(5, -7)\n\t12\n\t>>> sum(5, 0)\n\t5\n\t>>> sum(0, -5)\n\t0\n\t>>> sum(0, 0)\n\t0\n\t>>> sum(2, -3)\n\t-1\n\t>>> sum(2, 3, -5)\n\t-6\n\t*/\nconst sum = (...args) => {\n\tlet sum = 0;\n\tfor (let i = 0; i < args.length; i++) {\n\t\tsum += args[i];\n\t}\n\treturn sum;\n};\n\n/*\n\t>>> len([1, 2, 3])\n\t3\n\t>>> len('')\n\t0\n\t>>> len(null)\n\t0\n\t>>> len([])\n\t0\n\t>>> len([1])\n\t1\n\t>>> len([1, 2, 3, 4, 5])\n\t5\n\t*/\nconst len = (x) => {\n\treturn x.length;\n};\n\n/*\n\t>>> max([1, 2, 3])\n\t3\n\t>>> max(1, 2, 3)\n\t3\n\t>>> max(1, 2, 3, 4)\n\t4\n\t>>> max([1, 2, 3, 4])\n\t4\n\t>>> max(1, 2, 3, 4, 5)\n\t5\n\t>>> max([1, 2, 3, 4, 5])\n\t5\n\t>>> max(1, 2, 3, 4, 5, 6)\n\t6\n\t*/\nconst max = (...args) => {\n\tlet max = args[0];\n\tfor (let i = 1; i < args.length; i++) {\n\t\tif (args[i] > max) {\n\t\t\tmax = args[i];\n\t\t}\n\t}\n\treturn max;\n};\n\n/*\n\t>>> min([1, 2, 3])\n\t1\n\t>>> min(1, 2, 3)\n\t1\n\t>>> min(1, 2, 3, 4)\n\t1\n\t>>> min([1, 2, 3, 4])\n\t1\n\t>>> min(1, 2, 3, 4, 5)\n\t1\n\t>>> min([1, 2, 3, 4, 5])\n\t1\n\t>>> min(1, 2, 3, 4, 5, 6)\n\t1\n\t*/\nconst min = (...args) => {\n\tlet min = args[0];\n\tfor (let i = 1; i < args.length; i++) {\n\t\tif (args[i] < min) {\n\t\t\tmin = args[i];\n\t\t}\n\t}\n\treturn min;\n};\n\n/*\n\t>>> mean([1, 2, 3])\n\t2\n\t>>> mean([1, 2, 3, 4])\n\t2.5\n\t>>> mean([1, 2, 3, 4, 5])\n\t3.25\n\t>>> mean([1, 2, 3, 4, 5, 6])\n\t4\n\t*/\nconst mean = (...args) => {\n\treturn sum(args) / len(args);\n};\n\n/*\n\t>>> product([1, 2, 3])\n\t6\n\t>>> product([1, 2, 3, 4])\n\t24\n\t>>> product([1, 2, 3, 4, 5])\n\t120\n\t>>> product([1, 2, 3, 4, 5, 6])\n\t720\n\t*/\nconst product = (...args) => {\n\tlet product = 1;\n\tfor (let i = 0; i < args.length; i++) {\n\t\tproduct *= args[i];\n\t}\n\treturn product;\n};\n\n/*\n\t>>> median([1, 2, 3])\n\t2\n\t>>> median([1, 2, 3, 4])\n\t2.5\n\t>>> median([1, 2, 3, 4, 5])\n\t3.25\n\t>>> median([1, 2, 3, 4, 5, 6])\n\t4\n\t>>> median([1, 2, 3, 4, 5, 6, 7])\n\t5.5\n\t*/\nconst median = (...args) => {\n\targs = sorted(args);\n\tif (args.length % 2 == 0) {\n\t\treturn (args[args.length / 2 - 1] + args[args.length / 2]) / 2;\n\t} else {\n\t\treturn args[args.length / 2];\n\t}\n};\n\n/*\n\t>>> mode([1, 2, 3])\n\t2\n\t>>> mode([1, 2, 3, 4])\n\t2\n\t>>> mode([1, 2, 3, 4, 5])\n\t3\n\t>>> mode([1, 2, 3, 4, 5, 6])\n\t4\n\t>>> mode([1, 2, 3, 4, 5, 6, 7])\n\t6\n\t*/\nconst mode = (...args) => {\n\tlet max = args[0];\n\tlet maxCount = 1;\n\tfor (let i = 0; i < args.length; i++) {\n\t\tif (args[i] == max) {\n\t\t\tmaxCount++;\n\t\t} else if (args[i] > max) {\n\t\t\tmax = args[i];\n\t\t\tmaxCount = 1;\n\t\t}\n\t}\n\treturn max;\n};\n\nexport default {\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n/*\n\tCheck if two words have the same characters in a non-overlapping way.\n\t>>> sameChars2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars2('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars2('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars2('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars2('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars2('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars2 = (s0, s1) => {\n\tlet n0 = new Set(s0);\n\tlet n1 = new Set(s1);\n\tlet s1s2 = n0.intersection(n1);\n\tlet s2s1 = n1.intersection(n0);\n\tif (s1s2.size!== s2s1.size) return false;\n\tif (s1s2.size === 0) return true;\n\treturn JSON.stringify([...s1s2].sort()) === JSON.stringify([...s2s1].sort());\n};\n\n/*\n\tCheck if two words are anagrams.\n\t>>> isAnagram('abcd', 'abcd')\n\ttrue\n\t>>> isAnagram('abcd', 'cbad')\n\tfalse\n\t>>> isAnagram('abcd', 'abce')\n\tfalse\n\t>>> isAnagram('abcd', 'abc')\n\ttrue\n\t>>> isAnagram('abc', 'abcd')\n\tfalse\n\t>>> isAnagram('abcd', 'aabcd')\n\tfalse\n\t>>> isAnagram('abcd', 'abcde')\n\tfalse\n\t>>> isAnagram('abcd', 'abcde')\n\tfalse\n\t>>> isAnagram('abcd', 'abcdef')\n\tfalse\n\t>>> isAnagram('abcdef', 'abcd')\n\tfalse\n\t>>> isAnagram('abcd', 'cbad')\n\tfalse\n\t>>> isAnagram('abcdef', 'abcd')\n\tfalse\n\t>>> isAnagram('abcd', 'abcdef')\n\tfalse\n\t>>> isAnagram('abcdef', 'abcde')\n\tfalse\n\t>>> isAnagram('abcdef', 'abcde')\n\tfalse\n\t>>> isAnagram('abcdef', 'abcdef')\n\ttrue\n\t*/\nconst isAnagram = (s0, s1) => {\n\tlet l0 = s0.length;\n\tlet l1 = s1.length;\n\tif (l0!== l1) return false;\n\tlet s1s2 = new Set(s0);\n\tlet s2s1 = new Set(s1);\n\treturn JSON.stringify([...s2s1].sort()) === JSON.stringify([...s1s2].sort());\n};\n\nconst isAnagram2 = (s0, s1) => {\n\tlet l0 = s0.length;\n\tlet l1 = s1.length;\n\tif (l0!== l1) return false;\n\tlet s1s2 = new Set(s0);\n\tlet s2s1 = new Set(s1);\n\treturn s2s1.has(s1s2.values()[0]);\n};\n\nmodule.exports = {\n\tsameChars,\n\tisAnagram,\n\tisAnagram2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n - 1) + fib(n - 2);\n};\n\n\n\n/*Return n-th Fib"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/* Return a list of the longest common subsequence (LCA) between the two lists.\n\t>>> lca([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n\t[1, 2, 3, 4, 5]\n\t>>> lca([1, 2, 3, 4, 5], [1, 2, 3, 4])\n\t[1, 2, 3, 4, 5]\n\t>>> lca([1, 2, 3, 4, 5], [1, 2, 3])\n\t[1, 2, 3, 4, 5]\n\t>>> lca([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5]\n\t>>> lca([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n\t>>> lca([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 === e2)\n\t\t\t\tret.add(e1);\n\treturn [...ret].sort();\n};\n\n// Test\n// console.log(common([5, 3, 2, 8], [3, 2]));<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar find = (k) => {\n\t\tvar i = k;\n\t\twhile (i <= n) {\n\t\t\tif (isPrime(i))\n\t\t\t\treturn i;\n\t\t\ti += k;\n\t\t}\n\t};\n\treturn find(2);\n};\n\n/* Return the sum of all primes below n.\n\t>>> sumPrimes(6)\n\t16\n\t>>> sumPrimes(11)\n\t23\n\t>>> sumPrimes(12)\n\t26\n\t>>> sumPrimes(1000)\n\t2683\n\t*/\nconst sumPrimes = (n) => {\n\tvar primes = [];\n\tvar i = 2;\n\twhile (i < n) {\n\t\tif (isPrime(i))\n\t\t\tprimes.push(i);\n\t\ti++;\n\t}\n\treturn sum(primes);\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n};\n\n/* Return the sum of all the multiples of the given number,\n\tsuch that the result is smaller than n.\n\t>>> sumMultiples(5, 6)\n\t7\n\t>>> sumMultiples(10, 10)\n\t36\n\t>>> sumMultiples(9, 10)\n\t30\n\t>>> sumMultiples(10, 20)\n\t28\n\t>>> sumMultiples(10, 25)\n\t22\n\t>>> sumMultiples(11, 23)\n\t9\n\t>>> sumMultiples(20, 23)\n\t12\n\t*/\nconst sumMultiples = (n, m) => {\n\treturn sum(range(1, n + 1).filter(x => x * m < n).map(x => x * m));\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n};\n\nconsole.log(sumToN(5));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n};\n\n/*\n\tThis function has a bug:\n\n\t>>> removeInvalidBrackets(\"((()))\")\n\t'((()))'\n\t>>> removeInvalidBrackets(\"(()()())\")\n\t'()()()()'\n\t>>> removeInvalidBrackets(\"(()()())\")\n\t'()()()()'\n\t>>> removeInvalidBrackets(\"(((())())(()))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()())())())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((()())())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()()))())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()()())))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((((()())))())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((()(()())))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()())()))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((((()())))())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()()())()))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"(((()()()()))())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"(((()()()()))())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()())())\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()))\")\n\t'()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> removeInvalidBrackets(\"((()()()()())())\")\n\t'()()()()()()'\n\t>>> remove"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 +....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n}\n\n// Find the largest root of a polynomial.\n//\n// Polynomial is represented as an array of coefficients.\n//\n// Example:\n//    p(x) = x^3 - 3x^2 + 4x - 5\n//\n//   [3, 1, 2, 4, 5]\n//\n// Returns:\n//   -3\n//\nconst findLargestRoot = (xs) => {\n\tconst coefficients = derivative(xs);\n\treturn Math.max(...coefficients.map(c => c * c));\n}\n\n// Find all roots of a polynomial.\n//\n// Polynomial is represented as an array of coefficients.\n//\n// Example:\n//    p(x) = x^3 - 3x^2 + 4x - 5\n//\n//   [3, 1, 2, 4, 5]\n//\n//   [-3, -2, -1, 0, 1]\n//\n// Returns:\n//   [-3, -2, -1, 0, 1]\n//\nconst findAllRoots = (xs) => {\n\tconst coefficients = derivative(xs);\n\treturn [...coefficients.map(c => c * c)].sort();\n}\n\nexport { findLargestRoot, findAllRoots };\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\tif (n == 3)\n\t\treturn 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(3));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n\treturn n_vowels % 2;\n};\n\n/*\n\tWrite a function consonantsCount which takes a string representing\n\ta word as input and returns the number of consonants in the string.\n\tConsonants in this case are 'b', 'c', 'd', 'f', 'g', 'h', 'k', 'l','m',\n\t'n', 'p', 'q', 'r','s', 't', 'v', 'x' and 'y'\n\t(Consonants that are not vowels are not considered here)\n\n\tExample:\n\t>>> consonantsCount(\"abcdefg\")\n\t7\n\t>>> consonantsCount(\"ACEDY\")\n\t3\n\t*/\nconst consonantsCount = (s) => {\n\tvar consonants = \"bcdfghkmlnpqrstvxy\";\n\tvar n_consonants = s.split('').reduce((prev, item) => {\n\t\treturn prev + (consonants.includes(item));\n\t}, 0);\n\treturn n_consonants;\n};\n\n/*\n\tWrite a function allVowelsCount which takes a string representing\n\ta word as input and returns the number of vowels and consonants in the\n\tstring.\n\n\tExample:\n\t>>> allVowelsCount(\"abcdefg\")\n\t5\n\t>>> allVowelsCount(\"ACEDY\")\n\t4\n\t*/\nconst allVowelsCount = (s) => {\n\treturn vowelsCount(s) + consonantsCount(s);\n};\n\nmodule.exports = {\n\tvowelsCount,\n\tconsonantsCount,\n\tallVowelsCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n\telse\n\t\treturn s.split('').concat(s.split('').reverse().splice(shift)).join('');\n};\n\n/*\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t>>> circularShift(12, 4)\n\t\"21\"\n\t>>> circularShift(12, 8)\n\t\"12\"\n\t>>> circularShift(12, 16)\n\t\"21\"\n\t>>> circularShift(12, 32)\n\t\"12\"\n\t>>> circularShift(12, 64)\n\t\"21\"\n\t>>> circularShift(12, 128)\n\t\"12\"\n\t>>> circularShift(12, 256)\n\t\"21\"\n\t>>> circularShift(12, 512)\n\t\"12\"\n\t>>> circularShift(12, 1024)\n\t\"21\"\n\t>>> circularShift(12, 2048)\n\t\"12\"\n\t>>> circularShift(12, 4096)\n\t\"21\"\n\t>>> circularShift(12, 8192)\n\t\"12\"\n\t>>> circularShift(12, 16384)\n\t\"21\"\n\t>>> circularShift(12, 32768)\n\t\"12\"\n\t>>> circularShift(12, 65536)\n\t\"21\"\n\t>>> circularShift(12, 131072)\n\t\"12\"\n\t>>> circularShift(12, 262144)\n\t\"21\"\n\t>>> circularShift(12, 524288)\n\t\"12\"\n\t>>> circularShift(12, 1048576)\n\t\"21\"\n\t>>> circularShift(12, 2097152)\n\t\"12\"\n\t>>> circularShift(12, 4194304)\n\t\"21\"\n\t>>> circularShift(12, 8388608)\n\t\"12\"\n\t>>> circularShift(12, 16777216)\n\t\"21\"\n\t>>> circularShift(12, 33554432)\n\t\"12\"\n\t>>> circularShift(12, 67108864)\n\t\"21\"\n\t>>> circularShift(12, 134217728)\n\t\"12\"\n\t>>> circularShift(12, 268435456)\n\t\"21\"\n\t>>> circularShift(12, 536870912)\n\t\"12\"\n\t>>> circularShift(12, 1073741824)\n\t\"21\"\n\t>>> circularShift(12, 2147483648)\n\t\"12\"\n\t>>> circularShift(12, -2147483648)\n\t\"21\"\n\t>>> circularShift(12, -1073741824)\n\t\"12\"\n\t>>> circularShift(12, -2147483648)\n\t\"21\"\n\t>>> circularShift(12, -536870912)\n\t\"12\"\n\t>>> circularShift(12, -268435456)\n\t\"21\"\n\t>>> circularShift(12, -134217728)\n\t\"12\"\n\t>>> circularShift(12, -67108864)\n\t\"21\"\n\t>>> circularShift(12, -134217728)\n\t\"12\"\n\t>>> circularShift(12, -268435456)\n\t\"21\"\n\t>>> circularShift(12, -536870912)\n\t\"12\"\n\t>>> circularShift(12, -1073741824)\n\t\"21\"\n\t>>> circularShift(12, -2147483648)\n\t\"12\"\n\t>>> circularShift(12, -1073741824)\n\t\"21\"\n\t>>> circularShift(12, -2147483648)\n\t\"12\"\n\t>>> circularShift(12, -536870912)\n\t\"21\"\n\t>>> circularShift(12, -268435456)\n\t\"12\"\n\t>>> circularShift(12, -134217728)\n\t\"21\"\n\t>>> circularShift(12, -67108864)\n\t\"12\"\n\t>>> circularShift(12, -134217728)\n\t\"21\"\n\t>>> circularShift(12, -268435456)\n\t\"12\"\n\t>>> circularShift(12, -536870912)\n\t\"21\"\n\t>>> circularShift(12, -1073741824)\n\t\"12\"\n\t>>> circularShift(12, -2147483648)\n\t\"21\"\n\t>>> circularShift(12, -1073741824)\n\t\"12\"\n\t>>> circularShift(12, -2147483648)\n\t\"21\"\n\t>>> circularShift(12, -536870912)\n\t\"12\"\n\t>>> circularShift(12, -268435456)\n\t\"21\"\n\t>>> circularShift(12, -134217728)\n\t\"12\"\n\t>>> circularShift(12, -67108864)\n\t\"21\"\n\t>>> circularShift(12, -134217728)\n\t\"12\"\n\t>>> circularShift(12, -268435456)\n\t\"21\"\n\t>>> circularShift(12, -536870912)\n\t\"12\"\n\t>>> circularShift(12, -1073741824)\n\t\"21\"\n\t>>> circularShift(12, -2147483648)\n\t\"12\"\n\t>>> circularShift(12, -1073741824)\n\t\"21\"\n\t>>> circularShift(12, -2147483648)\n\t\"12\"\n\t>>> circularShift(12, -536870912)\n\t\"21\"\n\t>>> circularShift(12, -268435456)\n\t\"12\"\n\t>>> circularShift(12, -134217728)\n\t\"21\"\n\t>>> circularShift(12, -67108864)\n\t\"12\"\n\t>>> circularShift(12, -134217728)\n\t\"21\"\n\t>>> circularShift(12, -268435456)\n\t\"12\"\n\t>>> circularShift(12, -536870912)\n\t\"21\"\n\t>>> circularShift(12, -1073741824)\n\t\"12\"\n\t>>> circularShift(12, -2147483648"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    if (ord_char >= 97 && ord_char <= 122) {\n      return prev + char.charCodeAt(0) - 97;\n    }\n    return prev;\n  }, 0);\n}\n\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(parseInt(i));\n\n\tconst totalApples = lis.reduce((a, b) => a + b);\n\tconst totalOranges = lis.reduce((a, b) => a + b);\n\n\tconst total = totalApples + totalOranges;\n\treturn total - lis.reduce((a, b) => a + b);\n}\n\n/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst mangoFruitDistribution = (s, n) => {\n\tconst lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(parseInt(i));\n\n\tconst totalApples = lis.reduce((a, b) => a + b);\n\tconst totalOranges = lis.reduce((a, b) => a + b);\n\n\tconst total = totalApples + totalOranges;\n\treturn n - total - lis.reduce((a, b) => a + b);\n}\n\nconst test = [\n\tfruitDistribution(\"5 apples and 6 oranges\", 19),\n\tfruitDistribution(\"0 apples and 1 oranges\", 3),\n\tfruitDistribution(\"2 apples and 3 oranges\", 100),\n\tfruitDistribution(\"100 apples and 1 oranges\", 120)\n];\n\nfor (const [s, r] of test) {\n\tconsole.log(s, r);\n\tconsole.log(mangoFruitDistribution(s, r));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n\tvar min = evens[0];\n\tvar minIdx = evens[0].indexOf(min);\n\tfor (var i = 1; i < evens.length; i++) {\n\t\tif (evens[i].indexOf(min) < minIdx) {\n\t\t\tminIdx = evens[i].indexOf(min);\n\t\t\tmin = evens[i][minIdx];\n\t\t}\n\t}\n\treturn [min, minIdx];\n}\n\nmodule.exports = pluck;<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of frq) {\n    if (i > 0 && frq[i] >= i)\n      ans = i;\n  }\n  return ans;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw ? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n\t\tsw =!sw;\n\t}\n\treturn res;\n}\n\nexports.strangeSortList = strangeSortList;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i]!= arr.at(-i - 1))\n\t\t\tans += 1;\n\treturn ans;\n};\n\n/*\n\tGiven a list of integers, find the sum of all even elements.\n\t\n\tExample:\n\t[1,2,3,4,5,6,7,8,9,10] -> 15\n\t[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] -> 45\n\t[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17] -> 49\n\t[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49] -> 963\n\t*/\nconst sumEvenElements = (arr) => {\n\tvar sum = 0;\n\tfor (let i = 0; i < arr.length; i++)\n\t\tif (arr[i] % 2 === 0)\n\t\t\tsum += arr[i];\n\treturn sum;\n};\n\n/*\n\tGiven an array arr, print the string representation of the array.\n\t\n\tExample:\n\t[1,2,3,4,5,6,7,8,9,10] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]\n\t[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250]\n\t*/\n"}
{"task_id": "JavaScript/74", "prompt": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n\t\treturn lst1;\n\treturn lst2;\n}\n\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\n// console.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\n// console.log(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\n// console.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n\nconst totalMatch2 = (lst1, lst2) => {\n\tconst l1 = lst1.reduce((prev, item, index) => prev + item.length, 0);\n\tconst l2 = lst2.reduce((prev, item, index) => prev + item.length, 0);\n\treturn l1 <= l2? lst1 : lst2;\n}\n\nconst lst = ['hi', 'admin'];\nconsole.log(totalMatch(lst, ['hI', 'Hi']));\nconsole.log(totalMatch2(lst, ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch2(lst, ['hI', 'hi', 'hi']));\nconsole.log(totalMatch2(lst, ['4']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (x > 1) {\n\t\tif (x % n == 0) {\n\t\t\tpower = power * n;\n\t\t\tif (power == x)\n\t\t\t\treturn true;\n\t\t}\n\t\tx = x / n;\n\t}\n\treturn false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n\tconst num = Math.pow(10, a);\n\tif (num === Math.floor(num)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n\t\ttotal += (primes.indexOf(num.charAt(i)) === -1)? 0 : 1;\n\treturn total;\n};\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n}\n\n/*\n\tBinary to Decimal\n\n\tGiven a string in binary form, your task is to convert it to decimal form.\n\tEach character in the string represents a binary number. Each character is '0' or '1'.\n\tThe 'db' characters at the beginning and at the end of the string are there to help with the\n\tconversion.\n\n\tExamples:\n\tbinaryToDecimal(\"db101000db\")  # returns 32\n\tbinaryToDecimal(\"db111011db\")  # returns -1\n\tbinaryToDecimal(\"\")            # returns 0\n\tbinaryToDecimal(\"db\")          # returns NaN\n\t*/\nconst binaryToDecimal = (binary) => {\n\tconst decimal = parseInt(binary, 2);\n\tif (isNaN(decimal)) return NaN;\n\treturn decimal;\n}\n\n/*\n\tConvert Binary to Decimal\n\n\tGiven a string in binary form, your task is to convert it to decimal form.\n\tEach character in the string represents a binary number. Each character is '0' or '1'.\n\tThe 'db' characters at the beginning and at the end of the string are there to help with the\n\tconversion.\n\n\tExamples:\n\tbinaryToDecimal(\"db101000db\")  # returns 32\n\tbinaryToDecimal(\"db111011db\")  # returns -1\n\tbinaryToDecimal(\"\")            # returns 0\n\tbinaryToDecimal(\"db\")          # returns NaN\n\t*/\nconst convertBinaryToDecimal = (binary) => {\n\tconst decimal = binaryToDecimal(binary);\n\tif (isNaN(decimal)) return NaN;\n\treturn decimal;\n}\n\n/*\n\tBinary to Hexadecimal\n\n\tGiven a string in binary form, your task is to convert it to hexadecimal form.\n\tEach character in the string represents a binary number. Each character is '0' or '1'.\n\tThe 'db' characters at the beginning and at the end of the string are there to help with the\n\tconversion.\n\n\tExamples:\n\tbinaryToHex(\"db101000db\")  # returns \"dbf\"\n\tbinaryToHex(\"db111011db\")  # returns \"dbf\"\n\tbinaryToHex(\"\")            # returns \"\"\n\tbinaryToHex(\"db\")          # returns \"db\"\n\t*/\nconst binaryToHex = (binary) => {\n\treturn \"db\" + binary.toString(16) + \"db\";\n}\n\n/*\n\tHexadecimal to Binary\n\n\tGiven a string in hexadecimal form, your task is to convert it to binary form.\n\tEach character in the string represents a binary number. Each character is '0' or '1'.\n\tThe 'db' characters at the beginning and at the end of the string are there to help with the\n\tconversion.\n\n\tExamples:\n\thexToBinary(\"dbf\")  # returns \"db101000db\"\n\thexToBinary(\"\")      # returns \"\"\n\thexToBinary(\"db\")    # returns \"db\"\n\t*/\nconst hexToBinary = (hex) => {\n\tconst binary = parseInt(hex, 16);\n\tif (isNaN(binary)) return NaN;\n\treturn binary;\n}\n\n/*\n\tConvert Hexadecimal to Binary\n\n\tGiven a string in hexadecimal form, your task is to convert it to binary form.\n\tEach character in the string represents a binary number. Each character is '0' or '1'.\n\tThe 'db' characters at the beginning and at the end of the string are there to help with the\n\tconversion.\n\n\tExamples:\n\thexToBinary(\"dbf\")  # returns \"db101000db\"\n\thexToBinary(\"\")      # returns \"\"\n\thexToBinary(\"db\")    # returns \"db\"\n\t*/\nconst convertHexToBinary = (hex) => {\n\tconst binary = hexToBinary(hex);\n\tif (isNaN(binary)) return NaN;\n\treturn binary;\n}\n\nmodule.exports = {\n\tdecimalToBinary,\n\tbinaryToDecimal,\n\tconvertBinaryToDecimal,\n\tbinaryToHex,\n\thexToBinary,\n\tconvertHexToBinary\n};<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n\t\tif (s.charAt(i) === s.charAt(i + 1))\n\t\t\treturn false;\n\treturn true;\n}\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n\n/*\n\tSolve this problem in your browser:\n\tWrite a JavaScript function that takes a string as an argument and\n\treturns a boolean value. The string contains only the uppercase letters\n\ta, b, c, d, e, and f. The function should return true if the string is happy,\n\tand false otherwise.\n\tExample:\n\thappy('abcd') => false\n\thappy('abcde') => true\n\thappy('abcf') => false\n\thappy('abce') => false\n\thappy('abdd') => true\n\thappy('aace') => false\n\thappy('acd') => true\n\thappy('xsyx') => false\n\thappy('acdz') => false\n\thappy('xsyxz') => true\n\thappy('abcdef') => true\n\thappy('abcdefg') => false\n\thappy('abcdefgj') => true\n\thappy('xsyxz') => false\n\thappy('abcdefg') => true\n\thappy('abcdefgj') => true\n\thappy('abcd') => false\n\thappy('aabb') => false\n\thappy('abc') => true\n\thappy('xxy') => false\n\thappy('xyz') => true\n\thappy('xyx') => false\n\thappy('z') => true\n\thappy('zzz') => false\n\thappy('x') => false\n\thappy('xz') => false\n\thappy('xxy') => false\n\thappy('xyxz') => true\n\thappy('xyxzz') => true\n\thappy('xyxzzz') => false\n\thappy('xyxzzx') => false\n\thappy('xyyzzz') => true\n\thappy('xyyzzzzz') => true\n\thappy('xyyzzzzzz') => true\n\thappy('xyyzzzzzx') => false\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') => true\n\thappy('xyyzzz') =>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n\t\t\tletter_grade.push('C+')\n\t\t} else if (gpa > 1.7) {\n\t\t\tletter_grade.push('C')\n\t\t} else if (gpa > 1.3) {\n\t\t\tletter_grade.push('C-')\n\t\t} else if (gpa > 1.0) {\n\t\t\tletter_grade.push('D+')\n\t\t} else if (gpa > 0.7) {\n\t\t\tletter_grade.push('D')\n\t\t} else if (gpa > 0.0) {\n\t\t\tletter_grade.push('D-')\n\t\t} else {\n\t\t\tletter_grade.push('E')\n\t\t}\n\t}\n\treturn letter_grade\n}\n\nconst test_numerical_grade = (grades) => {\n\tlet letter_grade = numericalLetterGrade(grades)\n\treturn letter_grade\n}\n\nconsole.log(test_numerical_grade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (string.indexOf(i.toString()) == -1) { return false }\n\t}\n\treturn true\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacter at the beginning of the string replaced by a number\n\tExamples\n\tstringToNumber('123abc') == '321abc'\n\tstringToNumber('a') == '1a'\n\tstringToNumber('!@#$') == '!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += (string.charCodeAt(i) - 97)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacter at the end of the string replaced by a number\n\tExamples\n\tstringToNumber('abc123') == 'abc321'\n\tstringToNumber('a') == 'a1'\n\tstringToNumber('!@#$') == '!@#$!'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacter at the beginning and end of the string replaced by a number\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacter at the beginning and end of the string replaced by a number\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacter at the first position and the character at the last position\n\treplaced by a number\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacters at the beginning and at the end of the string replaced by a\n\tnumber\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacters at the beginning and at the end of the string replaced by a\n\tnumber\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite a function that takes a string and returns a new string that has the\n\tcharacters at the first and last position replaced by a number\n\tExamples\n\tstringToNumber('abc123') == '321abc'\n\tstringToNumber('a') == 'a1a'\n\tstringToNumber('!@#$') == '!@#$!@#$'\n\tstringToNumber('!@#$!@#$') == '!@#$!@#$!@#$'\n\t*/\nconst stringToNumber = (string) => {\n\tlet newString = ''\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += string.charCodeAt(i)\n\t}\n\treturn newString\n}\n\n/*\n\tWrite"}
{"task_id": "JavaScript/83", "prompt": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds(i)\n\t}\n\treturn t\n}\n\nconsole.log(startsOneEnds(1))\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n\t\tN = Math.floor(N / 10)\n\t}\n\treturn t.toString(2)\n}\n\nexport default solve\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\nGiven a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 6\n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.join(' ')\n}\n\nconsole.log(antiShuffle('Hi') === 'Hi')\nconsole.log(antiShuffle('hello') === 'ehllo')\nconsole.log(antiShuffle('Hello World!!!') === 'Hello!!!Wdlor')<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[0] - b[0] || a[1] - b[1])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the column by rows in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 3) == [(0, 3), (0, 2), (0, 1), (1, 5), (1, 4), (2, 6)]\n  getRow([], 3) == []\n  getRow([[], [1], [1, 2, 3]], 2) == [(0, 1)]\n  */\nconst getColumn = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[1] - b[1] || a[0] - b[0])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[0] - b[0] || a[1] - b[1])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[0] - b[0] || a[1] - b[1])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[0] - b[0] || a[1] - b[1])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  let sorted = t.sort((a, b) => a[0] - b[0] || a[1] - b[1])\n  return sorted.map((x) => [x[0], x[1]])\n}\n\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }"}
{"task_id": "JavaScript/88", "prompt": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\t[arr[ind], arr[j]] = [arr[j], arr[ind]]\n\t\t}\n\t}\n\treturn arr\n}\n\nexport {sortArray}<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n\t}\n\tlet result = arr[0]\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (arr[i] < result) {\n\t\t\tresult = arr[i]\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] == ' ') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] =='') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring words. A boring word is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBoring(\"Hello world\")\n\t0\n\t>>> isBoring(\"The sky is blue. The sun is shining. I love this weather\")\n\t0\n\t>>> isBoring(\"I love this weather\")\n\t1\n\t*/\nconst isBoring = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] =='') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored2 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boring words. A boring word is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored2(\"Hello world\")\n\t0\n\t>>> isBored2(\"The sky is blue. The sun is shining. I love this weather\")\n\t0\n\t>>> isBored2(\"I love this weather\")\n\t1\n\t*/\nconst isBored3 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored4 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored5 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored6 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored7 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored8 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored9 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == 'I') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\nconst isBored10 = (S) => {\n\tlet t = 0\n\tfor (let i ="}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns a string that is the concatenation of the numbers.\n\tThe returned string should have only one space in the end, and the first number should be to the left of the second number.\n\tExamples\n\tconcat(2, 3) ➞ '2 3'\n\tconcat(2, -3) ➞ '2 -3'\n\tconcat(0, 3) ➞ '0 3'\n\tconcat(-2, 3) ➞ '-2 3'\n\tconcat(2, 3, 0) ➞ '2 3 0'\n*/\nconst concat = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && x + y % 1 === 0) {\n\t\treturn `${x} ${y}`\n\t} else {\n\t\treturn `${x}${y}`\n\t}\n}\n\n/*\n\tCreate a function that takes 3 numbers and returns a string that is the concatenation of the numbers.\n\tThe returned string should have only one space in the end, and the first number should be to the left of the second number.\n\tExamples\n\tconcat(2, 3, 0) ➞ '2 3 0'\n*/\nconst concat2 = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && x + y + z % 1 === 0) {\n\t\treturn `${x}${y}${z}`\n\t} else {\n\t\treturn `${x}${y}${z}`\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns the number that is the sum of the two.\n\tThe returned number should be an integer.\n\tExamples\n\tsum(1, 2) ➞ 3\n\tsum(1, 3) ➞ 6\n\tsum(1, 3, 2) ➞ 7\n\tsum(1, 3, 2, 1) ➞ 8\n\tsum(1, 3, 2, -1) ➞ 6\n\tsum(1, 3, 2, 1, 0) ➞ 7\n*/\nconst sum = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && (x + y % 1) % 1 === 0) {\n\t\treturn x + y\n\t} else {\n\t\treturn `${x}${y}`\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns the difference of the two.\n\tThe returned number should be an integer.\n\tExamples\n\tdiff(1, 2) ➞ 1\n\tdiff(1, 3) ➞ 2\n\tdiff(1, 3, 2) ➞ 4\n\tdiff(1, 3, 2, 1) ➞ 5\n\tdiff(1, 3, 2, -1) ➞ 2\n\tdiff(1, 3, 2, 1, 0) ➞ 3\n*/\nconst diff = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && (x + y % 1) % 1 === 0) {\n\t\treturn x + y - (x + y)\n\t} else {\n\t\treturn `${x}${y}`\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns the product of the two.\n\tThe returned number should be an integer.\n\tExamples\n\tprod(1, 2) ➞ 2\n\tprod(1, 3) ➞ 6\n\tprod(1, 3, 2) ➞ 12\n\tprod(1, 3, 2, 1) ➞ 24\n\tprod(1, 3, 2, -1) ➞ 6\n\tprod(1, 3, 2, 1, 0) ➞ 12\n*/\nconst prod = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && (x + y % 1) % 1 === 0) {\n\t\treturn x * y\n\t} else {\n\t\treturn `${x}${y}`\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns the quotient of the two.\n\tThe returned number should be an integer.\n\tExamples\n\tquot(1, 2) ➞ 0\n\tquot(1, 3) ➞ 1\n\tquot(1, 3, 2) ➞ 0\n\tquot(1, 3, 2, 1) ➞ 0\n\tquot(1, 3, 2, -1) ➞ -1\n\tquot(1, 3, 2, 1, 0) ➞ 0\n*/\nconst quot = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && (x + y % 1) % 1 === 0) {\n\t\treturn x / y\n\t} else {\n\t\treturn `${x}${y}`\n\t}\n}\n\n/*\n\tCreate a function that takes 2 numbers and returns the modulus of the two.\n\tThe returned number should be an integer.\n\tExamples\n\tmod(1, 2) ➞ 1\n\tmod(1, 3) ➞ 1\n\tmod(1, 3, 2) ➞ 1\n\tmod(1, 3, 2, 1) ➞ 1\n\tmod(1, 3, 2, -1) ➞ 1\n\tmod(1, 3, 2, 1, 0) ➞ 1\n*/\nconst mod = (x, y) => {\n\tif (x % 1 === 0 && y % 1 === 0 && (x + y % 1) % 1 === 0) {\n\t\treturn x % y\n\t} else {\n\t\treturn `${"}
{"task_id": "JavaScript/93", "prompt": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n\t}\n\treturn t\n}\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n\t\t\tif (key[i].toLowerCase()!== key[i].toUpperCase()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\tlo = lo * 2\n\t\thi = hi * 2\n\t\tif (lo > hi) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tlo = lo * 2\n\t\thi = hi * 2\n\t\tif (lo > hi) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict2 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key === \"number\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict3 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"number\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict4 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key === \"string\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict5 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"string\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict6 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict7 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\" || typeof dict[key] === \"number\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict8 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\" || typeof dict[key]!== \"object\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict9 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\" || typeof dict[key]!== \"object\" || typeof dict[key].type!== \"string\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict10 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\" || typeof dict[key]!== \"object\" || typeof dict[key].type!== \"object\" || typeof dict[key].type.type!== \"string\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\n\nconst checkDict11 = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tif (typeof key!== \"object\" || typeof dict[key]!== \"object\" || typeof dict[key].type!== \"object\" || typeof dict[key].type.type!== \"object\" || typeof dict[key].type.type.type!== \"string\") {\n\t\t\tlo = lo * 2\n\t\t\thi = hi * 2\n\t\t\tif (lo > hi) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p) t.push(i)\n\t}\n\treturn t\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\t\n\tlet sum = 0;\n\tfor (let i = 0; i < a.length; i++) {\n\t\tsum += a[i] * b[i]\n\t}\n\t\n\treturn sum\n}\n\nconsole.log(multiply(1, 2));\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of vowels in odd indices.\n  \n\tFor example:\n\tcountLower('aBCdEf') returns 1\n\tcountLower('abcdefg') returns 2\n\tcountLower('dBBE') returns 1\n\t*/\nconst countLower = (s) => {\n\tlet p = 0\n\tfor (let i = 1; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a string s, count the number of vowels.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 3\n\tcountVowels('abcdefg') returns 7\n\tcountVowels('dBBE') returns 3\n\t*/\nconst countVowels = (s) => {\n\treturn countUpper(s) + countLower(s)\n}\n\n/*\n\tGiven a string s, return the number of vowel characters in the string.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 2\n\tcountVowels('abcdefg') returns 3\n\tcountVowels('dBBE') returns 1\n\t*/\nconst countVowelsInString = (s) => {\n\treturn countUpper(s) + countLower(s)\n}\n\n/*\n\tGiven a string s, return the number of vowel characters in the string.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 2\n\tcountVowels('abcdefg') returns 3\n\tcountVowels('dBBE') returns 1\n\t*/\nconst countVowelsInArray = (s) => {\n\treturn countUpper(s) + countLower(s)\n}\n\nconst isVowel = (letter) => {\n\tif (letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U') { return true }\n\treturn false\n}\n\nconst main = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\n/*\n\tGiven a string s, return the number of vowel characters in the string.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 2\n\tcountVowels('abcdefg') returns 3\n\tcountVowels('dBBE') returns 1\n\t*/\nconst countVowelsInString2 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main2 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main3 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main4 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main5 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main6 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main7 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main8 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main9 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main10 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nconst main11 = (s) => {\n\tlet count = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (isVowel(s[i])) {\n\t\t\tcount++\n\t\t"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.floor(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.floor(value)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\n/*\n\tGiven a list of stones, return the total number of stones in each level.\n\tEach level is represented as a list of integers, where element at index i\n\trepresents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> levelList(makeAPile(3))\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7])\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7, 11])\n\t[3, 5, 7, 11]\n\t>>> levelList([3, 5, 7, 11, 13])\n\t[3, 5, 7, 11, 13]\n\t>>> levelList([3, 5, 7, 11, 13, 17])\n\t[3, 5, 7, 11, 13, 17]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19])\n\t[3, 5, 7, 11, 13, 17, 19]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21])\n\t[3, 5, 7, 11, 13, 17, 19, 21]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23, 25])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23, 25]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27]\n\t*/\nconst levelList = (s) => {\n\tconst n = s.length\n\tconst l = []\n\tfor (let i = 0; i < n; i++) {\n\t\tl.push(1)\n\t\tfor (let j = i + 1; j < n; j++) {\n\t\t\tl.push(s[j] - s[i])\n\t\t}\n\t}\n\treturn l\n}\n\n/*\n\tGiven a list of stones, return the total number of stones in each level.\n\tEach level is represented as a list of integers, where element at index i\n\trepresents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> levelList(makeAPile(3))\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7])\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7, 11])\n\t[3, 5, 7, 11]\n\t>>> levelList([3, 5, 7, 11, 13])\n\t[3, 5, 7, 11, 13]\n\t>>> levelList([3, 5, 7, 11, 13, 17])\n\t[3, 5, 7, 11, 13, 17]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19])\n\t[3, 5, 7, 11, 13, 17, 19]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21])\n\t[3, 5, 7, 11, 13, 17, 19, 21]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23, 25])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23, 25]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23, 25, 27]\n\t*/\nconst levelList = (s) => {\n\tconst n = s.length\n\tconst l = []\n\tfor (let i = 0; i < n; i++) {\n\t\tl.push(1)\n\t\tfor (let j = i + 1; j < n; j++) {\n\t\t\tl.push(s[j] - s[i])\n\t\t}\n\t}\n\treturn l\n}\n\n/*\n\tGiven a list of stones, return the total number of stones in each level.\n\tEach level is represented as a list of integers, where element at index i\n\trepresents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> levelList(makeAPile(3))\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7])\n\t[3, 5, 7]\n\t>>> levelList([3, 5, 7, 11])\n\t[3, 5, 7, 11]\n\t>>> levelList([3, 5, 7, 11, 13])\n\t[3, 5, 7, 11, 13]\n\t>>> levelList([3, 5, 7, 11, 13, 17])\n\t[3, 5, 7, 11, 13, 17]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19])\n\t[3, 5, 7, 11, 13, 17, 19]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21])\n\t[3, 5, 7, 11, 13, 17, 19, 21]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23])\n\t[3, 5, 7, 11, 13, 17, 19, 21, 23]\n\t>>> levelList([3, 5, 7, 11, 13, 17, 19, 21, 23, 25])\n\t[3,"}
{"task_id": "JavaScript/101", "prompt": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tt += s[i];\n\t\t}\n\t}\n\tif (t.length > 0) {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\n/*\n\tLet's write a method that takes a string and returns a list of strings,\n\tone per line. The lines must be wrapped after 80 characters.\n  \n\tFor example:\n\tlinesString(\"This is a long string. It will be split into lines. \")\n\t== [\"This is a long string. It will be split into lines.\", \".\"]\n\t*/\nconst linesString = (s) => {\n\tlet p = wordsString(s)\n\tlet t = []\n\tlet k = 0\n\tfor (let i = 0; i < p.length; i++) {\n\t\tif (p[i].length > 80) {\n\t\t\tt.push(p[i].substring(0, 80) + '\\n')\n\t\t\tk = i + 1\n\t\t}\n\t\telse {\n\t\t\tif (k > 0) {\n\t\t\t\tt.push(p[i] + '\\n')\n\t\t\t}\n\t\t}\n\t}\n\treturn t;\n}\n\n/*\n\tWrite a method that returns a list of strings, one per line, that\n\tcontains the concatenation of the words in the input string,\n\twith the words separated by a comma. The list must be wrapped after\n\t80 characters.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\")\n\t== [\"Hi, my name is John\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (i > 0 && i < s.length) {\n\t\t\tt +=''\n\t\t}\n\t\tt += s[i]\n\t}\n\treturn linesString(t);\n}\n\n/*\n\tGiven a list of words, write a method that returns the longest string\n\tin the list.\n  \n\tFor example:\n\tlongestString([ \"Hello\", \"World\", \"Foo\", \"Bar\" ])\n\t== \"Foo\"\n\t*/\nconst longestString = (l) => {\n\tlet t = ''\n\tfor (let i = 0; i < l.length; i++) {\n\t\tif (l[i].length > t.length) {\n\t\t\tt = l[i];\n\t\t}\n\t}\n\treturn t;\n}\n\n/*\n\tGiven a list of words, write a method that returns the shortest string\n\tin the list.\n  \n\tFor example:\n\tshortestString([ \"Hello\", \"World\", \"Foo\", \"Bar\" ])\n\t== \"Hello\"\n\t*/\nconst shortestString = (l) => {\n\tlet t = ''\n\tfor (let i = 0; i < l.length; i++) {\n\t\tif (l[i].length < t.length) {\n\t\t\tt = l[i];\n\t\t}\n\t}\n\treturn t;\n}\n\n/*\n\tGiven a list of words, write a method that returns the average string\n\tlength in the list.\n  \n\tFor example:\n\taverageStringLength([ \"Hello\", \"World\", \"Foo\", \"Bar\" ])\n\t== 5.5\n\t*/\nconst averageStringLength = (l) => {\n\tlet t = 0\n\tfor (let i = 0; i < l.length; i++) {\n\t\tt += l[i].length\n\t}\n\treturn t / l.length\n}\n\n/*\n\tWrite a method that takes two lists of strings and returns a list of strings,\n\tone for each input list, where each string has been joined with the words\n\tseparated by a comma.\n  \n\tFor example:\n\tjoinLists([\"Hello\", \"World\", \"Foo\", \"Bar\"], [\"Hello\", \"World\", \"Foo\", \"Bar\"])\n\t== [\"Hello, World, Foo, Bar\"]\n\t*/\nconst joinLists = (l1, l2) => {\n\tlet t = []\n\tfor (let i = 0; i < l1.length; i++) {\n\t\tt.push(l1[i] + ','+ l2[i])\n\t}\n\treturn t\n}\n\n/*\n\tWrite a method that takes a string and a list of strings, and returns a list\n\tof strings, where each string has been joined with the words in the input\n\tstring, separated by a comma.\n  \n\tFor example:\n\tjoinWords(\"Hello, World\", [\"Hello\", \"World\"])\n\t== [\"Hello, World\"]\n\t*/\nconst joinWords = (s, l) => {\n\tlet t = []\n\tfor (let i = 0; i < l.length; i++) {\n\t\tt.push(s + ','+ l[i])\n\t}\n\treturn t\n}\n\n/*\n\tWrite a method that takes a string and a list of strings, and returns a list\n\tof strings, where each string has been joined with the words in the input\n\tstring, separated by the given delimiter.\n  \n\tFor example:\n\tjoinWords(\"Hello, World\", [\"Hello\", \"World\"], ',')\n\t== [\"Hello, World\"]\n\t*/\nconst joinWords = (s, l, d) => {\n\tlet t = []\n\tfor (let i = 0; i < l.length; i++) {\n\t\tt.push(s + d + l[i])\n\t}\n\treturn t\n}\n\n/*\n\tWrite a method that takes two lists of strings, and returns a list of"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n\t}\n\treturn -1;\n}\n\nconst main = () => {\n\tlet l = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 143, 149, 151, 157, 163, 167, 173, 179, 181, 187, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1141, 1147, 1153, 1159, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n\tlet l = m\n\tlet avg = 0\n\twhile (l < k) {\n\t\tlet sum = l + (l + 1) / 2\n\t\tavg += sum\n\t\tl += 1\n\t}\n\treturn avg / k\n}\n\n// TESTS\ntests = [\n\t[1, 5, roundedAvg(1, 5)],\n\t[7, 5, roundedAvg(7, 5)],\n\t[10, 20, roundedAvg(10, 20)],\n\t[20, 33, roundedAvg(20, 33)]\n]\n\n// EXPECTED RESULTS\nresults = [\n\t[1, 5, 0b11],\n\t[7, 5, -1],\n\t[10, 20, 0b1111],\n\t[20, 33, 0b11010]\n]\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\nconsole.log(uniqueDigits([152, 323, 1422, 10]))<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1 , 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1, 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p\n}\n\nconst byReverse = (arr) => {\n\tarr = arr.slice()\n\tfor (let i = 0; i < arr.length / 2; i++) {\n\t\tlet t = arr[i]\n\t\tarr[i] = arr[arr.length - i - 1]\n\t\tarr[arr.length - i - 1] = t\n\t}\n\treturn arr\n}\n\nconst replace = (arr) => {\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tarr[i] = byReverse(byLength(arr))\n\t}\n\treturn arr\n}\n\nmodule.exports = replace<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n\t\tk[p] = f;\n\t\tf *= i;\n\t}\n\treturn k\n}\n\n// f(4) == [1, 2, 6, 24]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j] != k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (p) {\n\t\t\tif (i % 2 === 0) {\n\t\t\t\te++\n\t\t\t} else {\n\t\t\t\to++\n\t\t\t}\n\t\t}\n\t}\n\treturn (e, o)\n}\n\nconsole.log(evenOddPalindrome(3))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n\t\twhile (h > 0) {\n\t\t\tk++;\n\t\t\th -= arr[i]\n\t\t}\n\t\tif (k > 0) p++;\n\t}\n\treturn p;\n}\n\nconsole.log(countNums([-1, 11, -11]) == 1);\nconsole.log(countNums([1, 1, 2]) == 3);<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tlet tArr = arr.slice(0);\n\t\t\ttArr.splice(i, 1, arr[i]);\n\t\t\treturn moveOneBall(tArr)\n\t\t}\n\t\tk = i\n\t}\n\treturn false\n}\n\n//moveOneBall([3, 4, 5, 1, 2])\n//moveOneBall([3, 5, 4, 1, 2])\n//moveOneBall([3, 2, 1, 4, 5])\n//moveOneBall([3, 2, 1, 4, 5, 7, 8, 6])\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n\tif (t < lst2.length) return \"NO\"\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst2[i] % 2 == 0) { t++ }\n\t}\n\tif (t < lst1.length) return \"NO\"\n\treturn \"YES\"\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n\nexchange([1, 2, 3, 4], [1, 5, 3, 4])\n// \"NO\"\n\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6])\n// \"YES\"\n\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7])\n// \"NO\"\n\nexchange([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 7, 8])\n// \"YES\"\n\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9])\n// \"YES\"\n\nexchange([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 10])\n// \"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\nlet d = histogram(test)\nconsole.log(d)\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\tlet l = t.length\n\tif (t.length == 0) {\n\t\treturn ('', false)\n\t}\n\treturn (t, true)\n}\n\n// Test\nconsole.log(reverseDelete('abcde', 'ae'))\nconsole.log(reverseDelete('abcdef', 'b'))\nconsole.log(reverseDelete('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(p)\n\t}\n\treturn d\n}\n\n/*\nGiven a number, return its first non-palindrome number, and the first\nnon-palindrome number again.\n\nExample:\n    Input: 7\n    Output: 9, 9\n    Explanation: 9 is the first non-palindrome, 9 is also the first non-palindrome.\n*/\nconst findNext = (num) => {\n\tlet palindrome = true\n\tlet i = num\n\twhile (palindrome) {\n\t\tlet temp = num\n\t\tfor (let j = 1; j < num; j++) {\n\t\t\ttemp = temp - num\n\t\t\tif (temp!= num) { palindrome = false }\n\t\t}\n\t\tif (palindrome) { i = num }\n\t}\n\treturn i, num\n}\n\n/*\nGiven a number, return its first non-palindrome number, and the first\nnon-palindrome number again.\n\nExample:\n    Input: 7\n    Output: 9, 9\n    Explanation: 9 is the first non-palindrome, 9 is also the first non-palindrome.\n*/\nconst findNext2 = (num) => {\n\tlet palindrome = true\n\tlet i = num\n\twhile (palindrome) {\n\t\tlet temp = num\n\t\tfor (let j = 1; j < num; j++) {\n\t\t\ttemp = temp * 10 + num\n\t\t\tif (temp!= num) { palindrome = false }\n\t\t}\n\t\tif (palindrome) { i = num }\n\t}\n\treturn i, num\n}\n\n/*\nGiven a number, return its first non-palindrome number, and the first\nnon-palindrome number again.\n\nExample:\n    Input: 7\n    Output: 9, 9\n    Explanation: 9 is the first non-palindrome, 9 is also the first non-palindrome.\n*/\nconst findNext3 = (num) => {\n\tlet palindrome = true\n\tlet i = num\n\twhile (palindrome) {\n\t\tlet temp = num\n\t\tfor (let j = 1; j < num; j++) {\n\t\t\ttemp = temp * 10 + num\n\t\t\tif (temp % 10!= num) { palindrome = false }\n\t\t}\n\t\tif (palindrome) { i = num }\n\t}\n\treturn i, num\n}\n\n/*\nGiven a number, return its first non-palindrome number, and the first\nnon-palindrome number again.\n\nExample:\n    Input: 7\n    Output: 9, 9\n    Explanation: 9 is the first non-palindrome, 9 is also the first non-palindrome.\n*/\nconst findNext4 = (num) => {\n\tlet palindrome = true\n\tlet i = num\n\twhile (palindrome) {\n\t\tlet temp = num\n\t\tfor (let j = 1; j < num; j++) {\n\t\t\ttemp = temp * 10 + num\n\t\t\tif (temp % 10!= num || temp % 100!= num) { palindrome = false }\n\t\t}\n\t\tif (palindrome) { i = num }\n\t}\n\treturn i, num\n}\n\n/*\nGiven a number, return its first non-palindrome number, and the first\nnon-palindrome number again.\n\nExample:\n    Input: 7\n    Output: 9, 9\n    Explanation: 9 is the first non-palindrome, 9 is also the first non-palindrome.\n*/\nconst findNext5 = (num) => {\n\tlet palindrome = true\n\tlet i = num\n\twhile (palindrome) {\n\t\tlet temp = num\n\t\tfor (let j = 1; j < num; j++) {\n\t\t\ttemp = temp * 10 + num\n\t\t\tif (temp % 10!= num || temp % 100!= num || temp % 1000!= num) { palindrome = false }\n\t\t}\n\t\tif (palindrome) { i = num }\n\t}\n\treturn i, num\n}\n\nconst test = (t) => {\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet x = t[i]\n\t\tlet y = findNext(x)\n\t\tlet a = [x, y]\n\t\tlet b = findNext2(x)\n\t\tlet c = findNext3(x)\n\t\tlet d = findNext4(x)\n\t\tlet e = findNext5(x)\n\t\tif (a.length!= b.length || a.length!= c.length || a.length!= d.length || a.length!= e.length) {\n\t\t\tconsole.log(x)\n\t\t\tconsole.log(y)\n\t\t\tconsole.log(a)\n\t\t\tconsole.log(b)\n\t\t\tconsole.log(c)\n\t\t\tconsole.log(d)\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n}\n\ntest(oddCount(['1234567']))\ntest(oddCount(['3',\"11111111\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n\t\t\t}\n\t\t\tif (s < min) {\n\t\t\t\tmin = s\n\t\t\t}\n\t\t}\n\t}\n\treturn min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tp += Math.min(m, capacity)\n\t}\n\treturn p\n}\n\nconst minFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tp += Math.max(m, capacity - m)\n\t}\n\treturn p\n}\n\nconst minFill2 = (grid, capacity) => {\n\tlet m = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tm += Math.max(m, capacity - m)\n\t}\n\treturn m\n}\n\nconst main = () => {\n\tlet grid = [\n\t\t[0,0,1,0], \n\t\t[0,1,0,0], \n\t\t[1,1,1,1]\n\t]\n\tlet capacity = 1\n\tconsole.log(minFill(grid, capacity))\n\tconsole.log(minFill2(grid, capacity))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n\t\t\t}\n\t\t\tif (f1 > f2) {\n\t\t\t\tlet t = p[ind]\n\t\t\t\tp[ind] = p[k]\n\t\t\t\tp[k] = t\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl++\n\t\t\t}\n\t\t}\n\t\tif (l == n) {\n\t\t\tk.push(t[i])\n\t\t}\n\t}\n\treturn k\n}\n\nconst isPalindrome = s => {\n\tif (s.length == 0) { return true }\n\tlet i = 0\n\tlet j = s.length - 1\n\twhile (i < j) {\n\t\tif (s[i]!= s[j]) {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t\tj--\n\t}\n\treturn true\n}\n\nconst selectPalindrome = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl++\n\t\t\t}\n\t\t}\n\t\tif (l == n && isPalindrome(t[i])) {\n\t\t\tk.push(t[i])\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectPalindrome2 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl++\n\t\t\t}\n\t\t}\n\t\tif (l == n && isPalindrome(t[i])) {\n\t\t\tk.push(t[i])\n\t\t}\n\t}\n\treturn k\n}\n\n/*\nGiven a string s and a non-negative number n, you need to return the longest palindromic substring in s. If there is no such substring, return an empty string.\n\nNote: The palindromic string could be constructed from non-letter characters.\n\nExamples:\n\nlongestPalindrome(\"A man, a plan, a canal: Panama\", 2) ==> \"panama\"\nlongestPalindrome(\"race a car\", 3) ==> \"\"\nlongestPalindrome(\"race a car\", 5) ==> \"race\"\nlongestPalindrome(\"race a car\", 1) ==> \"\"\nlongestPalindrome(\"race a car\", 4) ==> \"race\"\nlongestPalindrome(\"race a car\", 6) ==> \"race\"\nlongestPalindrome(\"race a car\", 7) ==> \"race\"\nlongestPalindrome(\"race a car\", 8) ==> \"race\"\nlongestPalindrome(\"race a car\", 9) ==> \"race\"\nlongestPalindrome(\"race a car\", 10) ==> \"race\"\nlongestPalindrome(\"race a car\", 11) ==> \"race\"\nlongestPalindrome(\"race a car\", 12) ==> \"race\"\nlongestPalindrome(\"race a car\", 13) ==> \"race\"\nlongestPalindrome(\"race a car\", 14) ==> \"race\"\nlongestPalindrome(\"race a car\", 15) ==> \"race\"\nlongestPalindrome(\"race a car\", 16) ==> \"race\"\nlongestPalindrome(\"race a car\", 17) ==> \"race\"\nlongestPalindrome(\"race a car\", 18) ==> \"race\"\nlongestPalindrome(\"race a car\", 19) ==> \"race\"\nlongestPalindrome(\"race a car\", 20) ==> \"race\"\nlongestPalindrome(\"race a car\", 21) ==> \"race\"\nlongestPalindrome(\"race a car\", 22) ==> \"race\"\nlongestPalindrome(\"race a car\", 23) ==> \"race\"\nlongestPalindrome(\"race a car\", 24) ==> \"race\"\nlongestPalindrome(\"race a car\","}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n\t\t\t\tword[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n\t\t\t&&\n\t\t\t(word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n\t\t\t\tword[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n\t\t\t&&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n\t\t\t\tword[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n\t\t\t\tword[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n\t\t\t&&\n\t\t\t(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n\t\t\t\tword[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n\t\t) {\n\t\t\treturn word[i];\n\t\t}\n\t}\n\treturn '';\n}<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n\ty = 0\n\tu = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\treturn 'No'\n}\n\n/*\n\tYour task is to check if the given string contains only digits.\n\tReturn 'True' if it contains only digits, and return 'False' otherwise.\n\tExamples:\n\tcontainsDigits('123') == 'True'\n\tcontainsDigits('1a3') == 'False'\n\tcontainsDigits('asd') == 'False'\n*/\nconst containsDigits = (str) => {\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i]!= '0' && str[i]!= '1' && str[i]!= '2' && str[i]!= '3' && str[i]!= '4' && str[i]!= '5' && str[i]!= '6' && str[i]!= '7' && str[i]!= '8' && str[i]!= '9') { return 'False' }\n\t}\n\treturn 'True'\n}\n\n/*\n\tYour task is to check if the given string is a valid number.\n\tReturn 'True' if it is, and 'False' otherwise.\n\tExamples:\n\tisNumber('a') == 'False'\n\tisNumber('123') == 'True'\n\tisNumber('a1') == 'False'\n*/\nconst isNumber = (str) => {\n\tlet i = 0\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == '.') { return 'False' }\n\t\tif (str[i] == '-' && i!= 0) { return 'False' }\n\t\tif (str[i] < '0' || str[i] > '9') { return 'False' }\n\t}\n\treturn 'True'\n}\n\n/*\n\tYour task is to check if the given string contains at least one word.\n\tReturn 'True' if it contains at least one word, and 'False' otherwise.\n\tExamples:\n\tcontainsWord('123') == 'False'\n\tcontainsWord('1234') == 'True'\n\tcontainsWord('a') == 'False'\n*/\nconst containsWord = (str) => {\n\tlet cnt = 0\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] =='') { continue }\n\t\tif (str[i] == '(' || str[i] == ')') { continue }\n\t\tcnt++\n\t}\n\tif (cnt == 0) { return 'False' }\n\treturn 'True'\n}\n\n/*\n\tGiven a list of pairs (a, b), return the result of applying function f(a, b).\n\tf must return a value.\n\tExamples:\n\tapply(1, 2) == 3\n\tapply(1, '2') == '3'\n\tapply(1, 3.14) == 4.14\n\tapply(1, 0) == 1\n\tapply(1, 'a') == 'a'\n\tapply(1, 1.2) == 2.0\n\tapply(1, 3) == 3\n\tapply(1, '3') == '3'\n\tapply(1, 'a') == 'a'\n*/\nconst apply = (f, list) => {\n\tlet res = list[0]\n\tfor (let i = 1; i < list.length; i++) {\n\t\tres = f(res, list[i])\n\t}\n\treturn res\n}\n\n/*\n\tGiven a list of numbers, return the list of numbers from the end of the list.\n\tIf the given list contains no numbers, return an empty list.\n\tExamples:\n\tfromEnd([1, 2, 3, 4]) == [4, 3, 2, 1]\n\tfromEnd([1, 2, 3]) == []\n\tfromEnd([1, 2]) == [2, 1]\n*/\nconst fromEnd = (list) => {\n\tlet res = []\n\tfor (let i = list.length - 1; i >= 0; i--) {\n\t\tres.push(list[i])\n\t}\n\treturn res\n}\n\n/*\n\tGiven a list of numbers, return the list of numbers from the end of the list,\n\tbut remove the first n numbers.\n\tIf the given list contains less than n numbers, return the whole list.\n\tExamples:\n\tfromEndAndRemove(['1', '2', '3', '4'], 2) == ['3', '4']\n\tfromEndAndRemove(['1', '2', '3', '4'], 1) == ['2', '3', '4']\n\tfromEndAndRemove(['1', '2', '3', '4'], 3) == ['1', '2', '4']\n\tfromEndAndRemove(['1', '2"}
{"task_id": "JavaScript/120", "prompt": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t}\n\t}\n\treturn p.slice(0, k)\n}\n\nconst maximum2 = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t}\n\t}\n\treturn p.slice(0, k)\n}\n\nconst maximum3 = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t}\n\t}\n\treturn p.slice(0, k)\n}\n\nconst maximum4 = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t}\n\t}\n\treturn p.slice(0, k)\n}\n\nconst maximum5 = (arr, k) => {\n\tlet p = arr\n\tlet r = []\n\tlet cnt = 0\n\tfor (let j = 0; j < p.length; j++) {\n\t\tif (cnt == k) {\n\t\t\tbreak\n\t\t}\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t\tr.push(p[ind])\n\t\t} else {\n\t\t\tr.push(p[j])\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn r\n}\n\nconst maximum6 = (arr, k) => {\n\tlet p = arr\n\tlet r = []\n\tlet cnt = 0\n\tfor (let j = 0; j < p.length; j++) {\n\t\tif (cnt == k) {\n\t\t\tbreak\n\t\t}\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t\tr.push(p[ind])\n\t\t} else {\n\t\t\tr.push(p[j])\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn r\n}\n\nconst maximum7 = (arr, k) => {\n\tlet p = arr\n\tlet r = []\n\tlet cnt = 0\n\tfor (let j = 0; j < p.length; j++) {\n\t\tif (cnt == k) {\n\t\t\tbreak\n\t\t}\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t\tr.push(p[ind])\n\t\t} else {\n\t\t\tr.push(p[j])\n\t\t\tcnt++\n\t\t}\n\t}\n\treturn r\n}\n\nconst maximum8 = (arr, k) => {\n\tlet p = arr\n\tlet r = []\n\tlet cnt = 0\n\tfor (let j = 0; j < p.length; j++) {\n\t\tif (cnt == k) {\n\t\t\tbreak\n\t\t}\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\tlet tmp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = tmp\n\t\t\tr.push(p[ind])\n\t\t} else {\n\t\t\tr.push(p[j])"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements2 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\tfor (let i = k; i < arr.length; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nconst addElements3 = (arr, k) => {\n\tlet p = 0\n\tlet i = 0\n\twhile (i < k) {\n\t\tp += arr[i]\n\t\ti++\n\t}\n\treturn p\n}\n\nconst addElements4 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements5 = (arr, k) => {\n\tlet p = 0\n\tlet i = 0\n\twhile (i < k) {\n\t\tp += arr[i]\n\t\ti++\n\t}\n\treturn p\n}\n\nconst addElements6 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements7 = (arr, k) => {\n\tlet p = 0\n\tlet i = 0\n\twhile (i < k) {\n\t\tp += arr[i]\n\t\ti++\n\t}\n\treturn p\n}\n\nconst addElements8 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements9 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements10 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements11 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements12 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements13 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements14 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements15 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements16 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements17 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements18 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements19 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements20 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements21 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements22 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements23 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0\n\twhile (j < k) {\n\t\tp += arr[j]\n\t\tj++\n\t}\n\treturn p\n}\n\nconst addElements24 = (arr, k) => {\n\tlet p = 0\n\tlet j = 0"}
{"task_id": "JavaScript/123", "prompt": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\nexport default getOddCollatz\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length != 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[1] == 2 && t[2] > 29) { return false }\n\tif (t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) {\n\t\tif (t[1] < 1 || t[1] > 31) { return false }\n\t}\n\tif (t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10) {\n\t\tif (t[1] < 1 || t[1] > 30) { return false }\n\t}\n\tif (t[1] < 1 || t[1] > 12) { return false }\n\treturn true\n}\n\nconsole.log(validDate('03-11-2000'))\nconsole.log(validDate('15-01-2012'))\nconsole.log(validDate('04-0-2040'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\nconsole.log(validDate('06-4-2020'))\nconsole.log(validDate('06/4/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet a = txt.split(/\\W/)\n\t\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i].length > 0) {\n\t\t\t\t\tp++\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on commas ',' if no commas exists in the text you should\n\tsplit on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists you\n\tshould split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords2 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\tlet a = txt.split(/\\W/)\n\t\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\t\tif (a[i].length > 0) {\n\t\t\t\t\tp++\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn a\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you should\n\tsplit on commas ',' if no commas exists in the text you should split on whitespace'' if no whitespace exists in the text you\n\tshould split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on commas ',' if no commas exists\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords3 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tlet a = txt.split(/\\W/)\n\t\tif (a.length > 1) {\n\t\t\treturn a\n\t\t} else {\n\t\t\treturn txt.split(/\\s/)\n\t\t}\n\t}\n}\n\n/* Given a string of words, return a list of words split on commas ',' if no commas exists in the text you should split on\n\twhitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text you\n\tshould split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tyou should split on whitespace'' if no whitespace exists in the text you should split on whitespace'' if no whitespace exists in the text\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords4 = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tlet a"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n\t\t\tif (dup == 2) { return false }\n\t\t} else {\n\t\t\tpre = lst[i];\n\t\t\tdup = 1;\n\t\t}\n\t}\n\treturn true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n\tlet result = true\n\tlet i = lo + 1\n\twhile (i <= hi) {\n\t\tif (i % 2!== 0) {\n\t\t\tresult = false\n\t\t\tbreak\n\t\t}\n\t\ti++\n\t}\n\tif (result) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n\t\tif (arr[i] > 0) { n++ }\n\t\telse if (arr[i] < 0) { n-- }\n\t}\n\treturn n * s\n}\n\n/*\n\tYou are given a matrix mat of integers, m * n, where each matrix element\n\tis a number.\n\tReturn the number of ways to fill the matrix with numbers.\n\tNote: return null for empty mat.\n\t\n\tExample:\n\t>>> fillMatrix(matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]))\n\t>>> fillMatrix(matrix([[1, 2, 3, 4]]))\n\t>>> fillMatrix(matrix([[]]))\n\t*/\nconst fillMatrix = (mat) => {\n\tlet m = mat.length\n\tlet n = mat[0].length\n\tlet total = 1\n\tlet count = 1\n\tfor (let i = 0; i < m; i++) {\n\t\tfor (let j = 0; j < n; j++) {\n\t\t\ttotal *= mat[i][j]\n\t\t\tif (mat[i][j]!= 0) { count++ }\n\t\t}\n\t}\n\tif (count == 0) { return null }\n\treturn total // count * total\n}\n\n/*\n\tYou are given a matrix mat of strings, m * n, where each matrix element\n\tis a string.\n\tReturn the number of ways to fill the matrix with strings.\n\tNote: return null for empty mat.\n\n\tExample:\n\t>>> fillMatrix(matrix(['A', 'B', 'C', 'D']))\n\t>>> fillMatrix(matrix(['A', 'B', 'C', 'D', 'E']))\n\t>>> fillMatrix(matrix(['A', 'B', 'C', 'D', 'E', 'F']))\n\t>>> fillMatrix(matrix([]))\n\t*/\nconst fillMatrix2 = (mat) => {\n\tlet m = mat.length\n\tlet n = mat[0].length\n\tlet total = 1\n\tlet count = 1\n\tfor (let i = 0; i < m; i++) {\n\t\tfor (let j = 0; j < n; j++) {\n\t\t\ttotal *= mat[i][j].length\n\t\t\tif (mat[i][j].length!= 0) { count++ }\n\t\t}\n\t}\n\tif (count == 0) { return null }\n\treturn total // count * total\n}\n\n/*\n\tYou are given an array arr of integers. Return the number of times that\n\tthe value 2 appears in the array.\n\t\n\tExample:\n\t>>> countTwo(arr)\n\t>>> countTwo([1, 1, 2, 2, 2])\n\t>>> countTwo([1, 1, 1])\n\t*/\nconst countTwo = (arr) => {\n\tlet count = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 2) { count++ }\n\t}\n\treturn count\n}\n\n/*\n\tYou are given an array arr of integers. Return the number of times that\n\tthe value 1 appears in the array.\n\t\n\tExample:\n\t>>> countOne(arr)\n\t>>> countOne([1, 1, 1, 1])\n\t>>> countOne([2, 2, 2, 2, 2])\n\t>>> countOne([])\n\t*/\nconst countOne = (arr) => {\n\tlet count = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 1) { count++ }\n\t}\n\treturn count\n}\n\n/*\n\tYou are given an array arr of integers. Return the number of times that\n\tthe value 0 appears in the array.\n\t\n\tExample:\n\t>>> countZero(arr)\n\t>>> countZero([1, 1, 1, 1])\n\t>>> countZero([2, 2, 2, 2, 2])\n\t>>> countZero([])\n\t*/\nconst countZero = (arr) => {\n\tlet count = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == 0) { count++ }\n\t}\n\treturn count\n}\n\n/*\n\tYou are given an array arr of integers. Return the number of times that\n\tthe value -1 appears in the array.\n\t\n\tExample:\n\t>>> countMinusOne(arr)\n\t>>> countMinusOne([1, 1, 1, 1])\n\t>>> countMinusOne([2, 2, 2, 2, 2])\n\t>>> countMinusOne([])\n\t*/\nconst countMinusOne = (arr) => {\n\tlet count = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] == -1) { count++ }\n\t}\n\treturn count\n}\n\nmodule.exports = {\n\tprodSigns,\n\tfillMatrix,\n\tfillMatrix2,\n\tcountTwo,\n\tcountOne,\n\tcountZero,\n\tcountMinusOne\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet paths = []\n\tlet visited = [0]\n\tlet queue = [m, n]\n\twhile (queue.length > 0) {\n\t\tlet i = queue.shift()\n\t\tlet j = queue.shift()\n\t\tlet value = grid[i][j]\n\t\tvisited.push(value)\n\t\tpaths.push(value)\n\t\tif (value == 1) {\n\t\t\tif (i == 0) {\n\t\t\t\tqueue.push(0)\n\t\t\t} else if (i == grid.length - 1) {\n\t\t\t\tqueue.push(grid.length - 1)\n\t\t\t} else if (j == 0) {\n\t\t\t\tqueue.push(i - 1)\n\t\t\t} else if (j == grid.length - 1) {\n\t\t\t\tqueue.push(i + 1)\n\t\t\t} else {\n\t\t\t\tqueue.push(i - 1)\n\t\t\t\tqueue.push(i + 1)\n\t\t\t\tqueue.push(j - 1)\n\t\t\t\tqueue.push(j + 1)\n\t\t\t}\n\t\t}\n\t}\n\tlet path = visited\n\treturn paths.slice(0, k)\n}\n\nconst grid = [\n\t[1,2,3],\n\t[4,5,6],\n\t[7,8,9]\n]\n\nconsole.log(minPath(grid, 1))\nconsole.log(minPath(grid, 2))\nconsole.log(minPath(grid, 3))\nconsole.log(minPath(grid, 4))\nconsole.log(minPath(grid, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n\t\t} else {\n\t\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t\t}\n\t}\n\treturn p\n}\n\n//# sourceMappingURL=tri.js.map<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n\t\t}\n\t\tn = Math.floor(n / 10)\n\t}\n\tif (k == 1) {\n\t\treturn p\n\t} else {\n\t\treturn 0\n\t}\n}\n\n/*\nGiven two numbers represented as strings, return multiplication of the numbers.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n*/\nconst multiply = (a, b) => {\n\tlet a = parseInt(a)\n\tlet b = parseInt(b)\n\tlet sum = 0\n\tfor (let i = 0; i < a.length; i++) {\n\t\tsum += a[i] * b\n\t}\n\treturn sum\n}\n\n/*\nGiven two numbers represented as strings, return the largest of the numbers.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n*/\nconst max = (a, b) => {\n\tlet x = parseInt(a)\n\tlet y = parseInt(b)\n\tif (x > y) {\n\t\treturn x\n\t} else {\n\t\treturn y\n\t}\n}\n\n/*\nGiven two numbers represented as strings, return the smallest of the numbers.\n\nNote: The numbers can be arbitrarily large and are non-negative.\n*/\nconst min = (a, b) => {\n\tlet x = parseInt(a)\n\tlet y = parseInt(b)\n\tif (x < y) {\n\t\treturn x\n\t} else {\n\t\treturn y\n\t}\n}\n\n/*\nGiven a string, find the longest substring without repeating characters.\n\nExample 1:\nInput: \"abcabcbb\"\nOutput: \"abc\"\nExplanation: The answer is \"abc\", which the length is 3.\nExample 2:\nInput: \"bbbbb\"\nOutput: \"b\"\nExplanation: The answer is \"b\", which the length is 1.\n*/\nconst longestSubstringWithoutRepeatingCharacters = (s) => {\n\tlet result = \"\"\n\tlet i = 0\n\tlet j = 0\n\twhile (j < s.length) {\n\t\twhile (j < s.length) {\n\t\t\tif (s[j] === s[i]) {\n\t\t\t\tj++\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tj++\n\t\t}\n\t\ti++\n\t\tif (i > j) {\n\t\t\tresult = s.slice(i, j)\n\t\t\tbreak\n\t\t}\n\t}\n\treturn result\n}\n\n/*\nGiven two strings s and t, write a function to determine if t is a anagram of s.\n\nTwo strings are anagrams if the character pair in one string is permutated in the other.\n\nExample:\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\nExplanation: The character 'n' in string 'nagaram' is permutated in 'anagram'.\nExample:\nInput: s = \"rat\", t = \"car\"\nOutput: false\nExplanation: The first string contains the character 'r' followed by the character 'a'.\nExample:\nInput: s = \"abcd\", t = \"dcbab\"\nOutput: true\nExplanation: The character 'd' in string 'dcbab' is permutated in 'abcd'.\n*/\nconst isAnagram = (s, t) => {\n\tlet a = s.split(\"\")\n\tlet b = t.split(\"\")\n\tlet r = []\n\tfor (let i = 0; i < a.length; i++) {\n\t\tlet c = a[i]\n\t\tlet d = b[i]\n\t\tif (c === d) {\n\t\t\tr.push(c)\n\t\t}\n\t}\n\treturn r.length === a.length\n}\n\n/*\nGiven a string s and a dictionary of words dict, return all words in dict that are anagrams of s.\n\nThe word given in the dictionary may contain the same character multiple times.\n\nFor example:\nInput: s = \"anagram\", dict = [\"anagram\", \"nagaram\", \"rat\", \"car\"]\nOutput: [\"anagram\", \"nagaram\"]\n\nNote:\n\nIf there is no possible anagram that contains all the characters in the given string, return an empty list.\n*/\nconst anagrams = (s, dict) => {\n\tlet result = []\n\tlet a = s.split(\"\")\n\tfor (let i = 0; i < a.length; i++) {\n\t\tlet r = []\n\t\tfor (let j = 0; j < a.length; j++) {\n\t\t\tif (dict.includes(a[j])) {\n\t\t\t\tr.push(a[j])\n\t\t\t}\n\t\t}\n\t\tif (r.length > 0) {\n\t\t\tresult.push(r)\n\t\t}\n\t}\n\treturn result\n}\n\n/*\nGiven a string s, return the string that is formed by omitting all the characters that appear in the string s, one at a time.\n\nFor example:\nInput: s = \"badbadbad\", output = \"baddbadb\"\n*/\nconst stringWithoutChar = (s) => {\n\tlet result = \"\"\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] === s[i + 1]) {\n\t\t\ti++\n\t\t} else {\n\t\t\tresult += s[i]\n\t\t}\n\t}\n\treturn result\n}\n\nconst test = () => {\n\tlet r = stringWithoutChar(\"badbadbad\")\n\tif (r === \"baddbadb\") {\n\t\tr = longestSubstringWithoutRepeatingCharacters(\"bbbbb\")\n\t\tif (r === \"bb\") {\n\t\t\tr = max(\"ab\", \"ba\")\n\t\t\tif (r === \"ab\") {\n\t\t\t\tr = min(\"ab\", \"ba\")\n\t\t\t}\n\t\t}\n\t}\n\treturn r\n}\n\nmodule.exports = {\n\tdigits,\n\tmultiply,\n\tmax,\n\tmin,\n\tlongestSubstringWithoutRepeatingCharacters,\n\tisAnagram,\n\tanagrams,\n\tstringWithoutChar\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n\t\tif (closing_bracket_index1[i] > opening_bracket_index[i]) {\n\t\t\tclosing_bracket_index.push(closing_bracket_index1[i])\n\t\t}\n\t}\n\tif (closing_bracket_index.length == 0) {\n\t\treturn false\n\t}\n\treturn true\n}\n\nconsole.log(isNested('[]['))\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1 != 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1!= 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n\t\t\telse { y = y - y % 1 - 1 }\n\t\t}\n\t\tp += y * y\n\t}\n\treturn p\n}\n\nconsole.log(sumSquares([1,2,3]))\nconsole.log(sumSquares([1,4,9]))\nconsole.log(sumSquares([1,3,5,7]))\nconsole.log(sumSquares([1.4,4.2,0]))\nconsole.log(sumSquares([-2.4,1,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t}\n\tlet last = txt.charAt(len - 2)\n\tlet isletter = (last >= 65 && last <= 90) || (last >= 97 && last <= 122)\n\tif (isletter) { return false }\n\treturn true\n}\n\n// Create a function that returns true if a given string contains\n// every letter in the alphabet (i.e. lowercase letters and uppercase letters).\nconst containsAllLetters = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\treturn isletter\n}\n\n// Create a function that returns true if a given string contains\n// every lowercase letter.\nconst containsAllLowercaseLetters = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyz'\n\tlet isletter = txt.indexOf(letters) > -1\n\treturn isletter\n}\n\n// Create a function that returns true if a given string contains\n// every uppercase letter.\nconst containsAllUppercaseLetters = (txt) => {\n\tlet letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\treturn isletter\n}\n\n// Create a function that returns true if a given string contains\n// every letter in the alphabet (i.e. lowercase letters and uppercase letters)\n// and is not a part of a word.\nconst containsAllLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every lowercase letter and is not a part of a word.\nconst containsAllLowercaseLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyz'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every uppercase letter and is not a part of a word.\nconst containsAllUppercaseLettersAndNotAWord = (txt) => {\n\tlet letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every letter in the alphabet (i.e. lowercase letters and uppercase letters)\n// and is not a part of a word.\nconst containsAllLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every lowercase letter and is not a part of a word.\nconst containsAllLowercaseLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyz'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every uppercase letter and is not a part of a word.\nconst containsAllUppercaseLettersAndNotAWord = (txt) => {\n\tlet letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every letter in the alphabet (i.e. lowercase letters and uppercase letters)\n// and is not a part of a word.\nconst containsAllLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter = txt.indexOf(letters) > -1\n\tlet isnotword = checkIfLastCharIsALetter(txt)\n\treturn isletter && isnotword\n}\n\n// Create a function that returns true if a given string contains\n// every letter in the alphabet (i.e. lowercase letters and uppercase letters)\n// and is not a part of a word.\nconst containsAllLettersAndNotAWord = (txt) => {\n\tlet letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\tlet isletter"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\nmodule.exports = canArrange<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn (a === Infinity)? (null, null) : (a, b)\n}\n\n/* Return a string of the numbers from the list.\n\tExamples:\n\tnumbersToString([0, 1, 2, 3, 4]) == \"0, 1, 2, 3, 4\"\n\tnumbersToString([]) == \"\"\n\tnumbersToString([1, 2, 3, 4, 5]) == \"1, 2, 3, 4, 5\"\n\tnumbersToString([-1, -2, -3, -4, -5]) == \"-1, -2, -3, -4, -5\"\n*/\nconst numbersToString = (lst) => {\n\tlet res = \"\"\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] === null) { res += \"null\" }\n\t\telse { res += lst[i].toString() }\n\t\tif (i < lst.length - 1) { res += \", \" }\n\t}\n\treturn res\n}\n\n/* Return a list of the numbers from the string.\n\tExamples:\n\tnumbersFromString(\"0, 1, 2, 3, 4\") == [0, 1, 2, 3, 4]\n\tnumbersFromString(\"0, 1, 2, 3, 4, 5\") == [0, 1, 2, 3, 4, 5]\n\tnumbersFromString(\"-1, -2, -3, -4, -5\") == [-1, -2, -3, -4, -5]\n\tnumbersFromString(\"\") == []\n*/\nconst numbersFromString = (str) => {\n\tlet res = []\n\tfor (let i = 0; i < str.length; i++) {\n\t\tlet value = parseInt(str[i])\n\t\tif (isNaN(value)) { value = null }\n\t\tres.push(value)\n\t}\n\treturn res\n}\n\n/* Return the largest element in a list.\n\tExamples:\n\tmax([1, 2, 3]) == 3\n\tmax([1, 2]) == 2\n\tmax([1]) == 1\n\tmax([]) == undefined\n*/\nconst max = (lst) => {\n\tlet max = lst[0]\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > max) { max = lst[i] }\n\t}\n\treturn max\n}\n\n/* Return the smallest element in a list.\n\tExamples:\n\tmin([1, 2, 3]) == 1\n\tmin([1, 2]) == 1\n\tmin([1]) == 1\n\tmin([]) == undefined\n*/\nconst min = (lst) => {\n\tlet min = lst[0]\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] < min) { min = lst[i] }\n\t}\n\treturn min\n}\n\n/* Return the sum of the elements in a list.\n\tExamples:\n\tsum([1, 2, 3]) == 6\n\tsum([1, 2]) == 3\n\tsum([1]) == 1\n\tsum([]) == 0\n*/\nconst sum = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i]\n\t}\n\treturn sum\n}\n\n/* Return the mean of the elements in a list.\n\tExamples:\n\tmean([1, 2, 3]) == 2\n\tmean([1, 2]) == 2\n\tmean([1]) == 1\n\tmean([]) == undefined\n*/\nconst mean = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i]\n\t}\n\treturn sum / lst.length\n}\n\n/* Return the mode in a list.\n\tExamples:\n\tmode([1, 2, 3]) == 3\n\tmode([1, 2]) == 2\n\tmode([1]) == 1\n\tmode([]) == undefined\n*/\nconst mode = (lst) => {\n\tlet modes = {}\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] in modes) { modes[lst[i]]++ }\n\t\telse { modes[lst[i]] = 1 }\n\t}\n\tlet maxCount = 0\n\tlet max = null\n\tfor (let i in modes) {\n\t\tif (modes[i] > maxCount) { maxCount = modes[i] }\n\t\tif (maxCount === modes[i]) { max = i }\n\t}\n\treturn max\n}\n\n/* Return the median in a list.\n\tExamples:\n\tmedian([1, 2, 3]) == 2\n\tmedian([1, 2]) == 2\n\tmedian([1]) == 1\n\tmedian([]) == undefined\n*/\nconst median = (lst) => {\n\tif (lst.length === 0) { return undefined }\n\tlet middle = Math.floor(lst.length / 2)\n\tlet left = lst.slice(0, middle)\n\tlet right = lst.slice(middle)\n\treturn (mean(left) + mean(right)) / 2\n}\n\n/* Return the median in a list.\n\tExamples:\n\tmedian([1, 2, 3]) == 2\n\tmedian([1, 2]) == 2\n\tmedian([1])"}
{"task_id": "JavaScript/137", "prompt": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa > bb) return a\n\tif (aa < bb) return b\n\treturn null\n}\n\n/*\n\tCreate a function that takes two variables, and returns the larger one.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareTwo(2, 2.5) ➞ 2\n\tcompareTwo(2, \"2,3\") ➞ 2\n\tcompareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n\tcompareTwo(\"1\", 1) ➞ null\n\t*/\nconst compareTwo = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa > bb) return a\n\tif (aa < bb) return b\n\treturn null\n}\n\n/*\n\tCreate a function that takes two variables, and returns the larger one.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareTwo(2, 2.5) ➞ 2.5\n\tcompareTwo(2, \"2,3\") ➞ \"2,3\"\n\tcompareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n\tcompareTwo(\"1\", 1) ➞ null\n\t*/\nconst compareThree = (a, b, c) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tlet cc = Number(c)\n\tif (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n\tif (aa > bb) return a\n\tif (aa < bb) return b\n\tif (aa > cc) return a\n\tif (aa < cc) return c\n\treturn null\n}\n\n/*\n\tCreate a function that takes two variables, and returns the larger one.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareTwo(2, 2.5) ➞ 2.5\n\tcompareTwo(2, \"2,3\") ➞ \"2,3\"\n\tcompareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n\tcompareTwo(\"1\", 1) ➞ null\n\t*/\nconst compareFour = (a, b, c, d) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tlet cc = Number(c)\n\tif (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n\tlet dd = Number(d)\n\tif (typeof d =='string') { dd = Number(d.replace(',', '.')) }\n\tif (aa > bb) return a\n\tif (aa < bb) return b\n\tif (aa > cc) return a\n\tif (aa < cc) return c\n\tif (aa > dd) return a\n\tif (aa < dd) return d\n\treturn null\n}\n\n/*\n\tCreate a function that takes two variables, and returns the larger one.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareTwo(2, 2.5) ➞ 2.5\n\tcompareTwo(2, \"2,3\") ➞ \"2,3\"\n\tcompareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n\tcompareTwo(\"1\", 1) ➞ null\n\t*/\nconst compareFive = (a, b, c, d, e) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tlet cc = Number(c)\n\tif (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n\tlet dd = Number(d)\n\tif (typeof d =='string') { dd = Number(d.replace(',', '.')) }\n\tlet ee = Number(e)\n\tif (typeof e =='string') { ee = Number(e.replace(',', '.')) }\n\tif (aa > bb) return a\n\tif (aa < bb) return b\n\tif (aa > cc) return a\n\tif (aa < cc) return c\n\tif (aa > dd) return a\n\tif (aa < dd) return d\n\tif ("}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n\tExample\n\tisEqualToSumOdd(4) == false\n\tisEqualToSumOdd(6) == false\n\tisEqualToSumOdd(8) == false\n\tisEqualToSumOdd(9) == true\n\t*/\nconst isEqualToSumOdd = (n) => {\n\treturn (n >= 9 && n % 2 == 1)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n\tExample\n\tisEqualToSumEven(3) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == false\n\tisEqualToSumEven(9) == true\n\t*/\nconst isEqualToSumEven3 = (n) => {\n\treturn (n >= 9 && n % 3 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive odd numbers\n\tExample\n\tisEqualToSumOdd(3) == false\n\tisEqualToSumOdd(6) == false\n\tisEqualToSumOdd(8) == false\n\tisEqualToSumOdd(9) == true\n\t*/\nconst isEqualToSumOdd3 = (n) => {\n\treturn (n >= 9 && n % 3 == 1)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n\tExample\n\tisEqualToSumEven(5) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == false\n\tisEqualToSumEven(9) == false\n\tisEqualToSumEven(10) == true\n\t*/\nconst isEqualToSumEven5 = (n) => {\n\treturn (n >= 10 && n % 5 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n\tExample\n\tisEqualToSumOdd(5) == false\n\tisEqualToSumOdd(6) == false\n\tisEqualToSumOdd(8) == false\n\tisEqualToSumOdd(9) == false\n\tisEqualToSumOdd(10) == true\n\t*/\nconst isEqualToSumOdd5 = (n) => {\n\treturn (n >= 10 && n % 5 == 1)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n\tExample\n\tisEqualToSumEven(6) == true\n\tisEqualToSumEven(7) == true\n\tisEqualToSumEven(8) == true\n\tisEqualToSumEven(9) == true\n\tisEqualToSumEven(10) == false\n\t*/\nconst isEqualToSumEven6 = (n) => {\n\treturn (n >= 10 && n % 6 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n\tExample\n\tisEqualToSumOdd(6) == true\n\tisEqualToSumOdd(7) == true\n\tisEqualToSumOdd(8) == true\n\tisEqualToSumOdd(9) == true\n\tisEqualToSumOdd(10) == false\n\t*/\nconst isEqualToSumOdd6 = (n) => {\n\treturn (n >= 10 && n % 6 == 1)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n\tExample\n\tisEqualToSumEven(8) == true\n\tisEqualToSumEven(9) == true\n\tisEqualToSumEven(10) == true\n\tisEqualToSumEven(11) == true\n\tisEqualToSumEven(12) == true\n\tisEqualToSumEven(13) == true\n\tisEqualToSumEven(14) == false\n\t*/\nconst isEqualToSumEven8 = (n) => {\n\treturn (n >= 10 && n % 8 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n\tExample\n\tisEqualToSumOdd(8) == true\n\tisEqualToSumOdd(9) == true\n\tisEqualToSumOdd(10) == true\n\tisEqualToSumOdd(11) == true\n\tisEqualToSumOdd(12) == true\n\tisEqualToSumOdd(13) == true\n\tisEqualToSumOdd(14) == false\n\t*/\nconst isEqualToSumOdd8 = (n) => {\n\treturn (n >= 10 && n % 8 == 1)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n\tExample\n\tisEqualToSumEven(9) == true\n\tisEqualToSumEven(10) == true\n\tisEqualToSumEven(11) == true\n\tisEqualToSumEven(12) == true\n\tisEqualToSumEven(13) == true\n\tisEqualToSumEven(14) == true\n\tisEqualToSumEven(15) == false\n\t*/\nconst isEqualToSumEven9 = (n) => {\n\treturn (n >= 10 && n % 9 == 0)\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive odd numbers\n\tExample\n\tisEqualToSumOdd(9) == true\n\tisEqualToSumOdd(10) == true\n\tisEqualToSumOdd(11) == true\n\tisEqualToSumOdd(12) == true\n\tisEqualToSumOdd(13) == true\n\tisEqualToSumOdd(14) == true\n\tisEqualToSumOdd(15)"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 1);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_2 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 2);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_3 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 3);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_4 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 4);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_5 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 5);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_6 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 6);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_7 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 7);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_8 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 8);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_9 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 9);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_10 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 10);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_11 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 11);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_12 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 12);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_13 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 13);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_14 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 14);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_15 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tt = t * (n - 15);\n\t\t}\n\t\tp = t;\n\t\tn--;\n\t}\n\treturn t;\n}\n\nconst specialFactorial_16 = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\t"}
{"task_id": "JavaScript/140", "prompt": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] == ' ') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n\t\t\tc = 0\n\t\t}\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string text, return an array with all of the words in the string\n  \n\tsplitWords(\"Example\") == [\"Example\"]\n\tsplitWords(\"Example 1\") == [\"Example\", \"1\"]\n\tsplitWords(\" Example 2\") == [\"Example\", \"2\"]\n\tsplitWords(\" Example   3\") == [\"Example\", \"3\"]\n\tsplitWords(\"Example, 1\") == [\"Example\", \"1\"]\n\tsplitWords(\"Example, 1, 2\") == [\"Example\", \"1\", \"2\"]\n\tsplitWords(\"Example, 1, 2, 3\") == [\"Example\", \"1\", \"2\", \"3\"]\n\tsplitWords(\"Example1\") == [\"Example\", \"1\"]\n\tsplitWords(\"Example1, 2\") == [\"Example\", \"1\", \"2\"]\n\tsplitWords(\"Example1, 2, 3\") == [\"Example\", \"1\", \"2\", \"3\"]\n\t*/\nconst splitWords = (text) => {\n\tlet t = text.split(' ')\n\tlet res = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tif (t[i].length > 0) { res.push(t[i]) }\n\t}\n\treturn res\n}\n\n/*\n\tGiven a string text, return the number of words in the string\n  \n\tnumWords(\"Example\") == 1\n\tnumWords(\"Example 1\") == 2\n\tnumWords(\"Example 1, 2\") == 3\n\tnumWords(\"Example 1, 2, 3\") == 4\n\tnumWords(\"Example, 1\") == 2\n\tnumWords(\"Example, 1, 2\") == 3\n\tnumWords(\"Example, 1, 2, 3\") == 4\n\t*/\nconst numWords = (text) => {\n\tlet t = text.split(' ')\n\treturn t.length\n}\n\n/*\n\tGiven a string text, return the length of the string\n  \n\ttextLength(\"Example\") == 5\n\ttextLength(\"Example1\") == 6\n\ttextLength(\"Example1, 2\") == 8\n\ttextLength(\"Example1, 2, 3\") == 10\n\t*/\nconst textLength = (text) => {\n\treturn text.length\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\tjoinWords(\"Example\") == \"Example\"\n\tjoinWords(\"Example 1\") == \"Example 1\"\n\tjoinWords(\"Example 1, 2\") == \"Example 1, 2\"\n\tjoinWords(\"Example1, 2, 3\") == \"Example1, 2, 3\"\n\t*/\nconst joinWords = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text.split(' ')\n\treturn t.join(' ')\n}\n\n/*\n\tGiven a string text, return a string with all of the words in the string\n  \n\treplaceSpaces(\"Example 1\") == \"Example 1\"\n\treplaceSpaces(\"Example 1, 2\") == \"Example 1, 2\"\n\treplaceSpaces(\"Example 1, 2, 3\") == \"Example 1, 2, 3\"\n\t*/\nconst replaceSpaces = (text) => {\n\tlet t = text."}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length != 2) { return 'No' }\n\tif (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n\nconst checkFile = (file_name, type) => {\n\tif (file_name == '') { return 'No' }\n\tif (type == 'txt') { return fileNameCheck(file_name) }\n\tif (type == 'exe') { return 'No' }\n\tif (type == 'dll') { return 'No' }\n}\n\nconst checkFileName = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length == 2) {\n\t\tlet a = t[0][0].charCodeAt()\n\t\tif (a < 65 || a > 90) { return 'No' }\n\t\tlet b = t[1].charCodeAt()\n\t\tif (b < 97 || b > 122) { return 'No' }\n\t\treturn 'Yes'\n\t}\n\tif (t.length == 1) { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\tlet b = t[1].charCodeAt()\n\tif (b < 97 || b > 122) { return 'No' }\n\treturn 'Yes'\n}\n\nconst checkFileType = (file_name, type) => {\n\tif (file_name == '') { return 'No' }\n\tif (type == 'txt') { return checkFile(file_name, 'txt') }\n\tif (type == 'exe') { return checkFile(file_name, 'exe') }\n\tif (type == 'dll') { return checkFile(file_name, 'dll') }\n}\n\nconst checkFileNameType = (file_name, type) => {\n\tif (file_name == '') { return 'No' }\n\tif (type == 'txt') { return checkFileName(file_name) }\n\tif (type == 'exe') { return checkFileName(file_name) }\n\tif (type == 'dll') { return checkFileName(file_name) }\n}\n\nconst checkFileExtension = (file_name) => {\n\tlet t = file_name.split('.')\n\tif (t.length == 2) {\n\t\tlet a = t[1].charCodeAt()\n\t\tif (a < 97 || a > 122) { return 'No' }\n\t\treturn 'Yes'\n\t}\n\treturn 'No'\n}\n\nconst checkFileExtensionType = (file_name, type) => {\n\tif (file_name == '') { return 'No' }\n\tif (type == 'txt') { return checkFileExtension(file_name) }\n\tif (type == 'exe') { return checkFileExtension(file_name) }\n\tif (type == 'dll') { return checkFileExtension(file_name) }\n}\n\nconst checkFileNameExtension = (file_name) => {\n\tlet t = file_name.split('.')\n\tif (t.length == 2) {\n\t\tlet a = t[0].charCodeAt()\n\t\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\t\tlet b = t[1].charCodeAt()\n\t\tif (!((b >= 97 && b <= 122))) { return 'No' }\n\t\treturn 'Yes'\n\t}\n\treturn 'No'\n}\n\nconst checkFileNameExtensionType = (file_name, type) => {\n\tif (file_name == '') { return 'No' }\n\tif (type == 'txt') { return checkFileNameExtension(file_name) }\n\tif (type == 'exe') { return checkFileNameExtension(file_name) }\n\tif (type == 'dll') { return checkFileNameExtension(file_name) }\n}\n\nmodule.exports = {\n\tfileNameCheck,\n\tcheckFile,\n\tcheckFileName,\n\tcheckFileType,\n\tcheckFileNameType,\n\tcheckFileExtension,\n\tcheckFileExtensionType,\n\tcheckFileNameExtension,\n\tcheckFileNameExtensionType\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\nconst main = () => {\n\tlet lst = [1,2,3,4,5,6]\n\tlet x = sumSquares(lst)\n\tconsole.log(x)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (len % i == 0) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j][0] + u\n\t}\n\treturn p\n}\n\n/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentencePrime = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (len % i == 0) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j][0] + u\n\t}\n\treturn p\n}<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet n = Number(a[1]) * Number(b[1])\n\tif (m > n) return false\n\tif (m < n) return true\n\tfor (let i = 1; i < a.length; i++) {\n\t\tif (Number(a[i]) === 0) {\n\t\t\tif (Number(b[i]) === 1) return true\n\t\t\tcontinue\n\t\t}\n\t\tif (Number(a[i]) * Number(b[i])!== m) return false\n\t}\n\treturn true\n}\n\nconst test = [\n\t[\"1/5\", \"5/1\"],\n\t[\"1/6\", \"2/1\"],\n\t[\"7/10\", \"10/2\"]\n]\n\nfor (let [x, n] of test) {\n\tconsole.log(simplify(x, n))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m < n) {\n\t\t\t\tp[k + 1] = p[k]\n\t\t\t\tp[k] = h + y\n\t\t\t} else if (m > n) {\n\t\t\t\tp[k + 1] = p[k]\n\t\t\t\tp[k] = d + u\n\t\t\t} else {\n\t\t\t\tp[k + 1] = p[k]\n\t\t\t\tp[k] = h + y\n\t\t\t\tp[k + 1] = p[k + 1] + u\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function to print all permutations of a string.\n\n\tFor example:\n\t>>> printPermutations(\"aa\")\n\taa\n\t>>> printPermutations(\"cab\")\n\tcab\n\tcba\n\t>>> printPermutations(\"cbad\")\n\tcbad\n\tcbad\n\t>>> printPermutations(\"\")\n\t\"\"\"\nconst printPermutations = (str) => {\n\tconst permutations = (str) => {\n\t\tif (str.length === 0) return []\n\t\tlet arr = []\n\t\tlet permutations = \"\"\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tarr.push(str[i])\n\t\t\tpermutations += str[i]\n\t\t}\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tfor (let j = i + 1; j < arr.length; j++) {\n\t\t\t\tpermutations += arr[i] + arr[j]\n\t\t\t\tarr.push(arr.shift())\n\t\t\t\tarr.push(arr.shift())\n\t\t\t}\n\t\t}\n\t\treturn permutations\n\t}\n\treturn permutations(str)\n}\n\n/*\n\tWrite a function which computes all permutations of a string\n\tin lexicographical order.\n\tFor example:\n\t>>> isPermutation(\"cbad\")\n\tTrue\n\t>>> isPermutation(\"ab\")\n\tFalse\n\t>>> isPermutation(\"abc\")\n\tTrue\n\t>>> isPermutation(\"\")\n\tFalse\n\t>>> isPermutation(\"a\")\n\tFalse\n\t>>> isPermutation(\"aa\")\n\tFalse\n\t>>> isPermutation(\"cba\")\n\tFalse\n\t\"\"\"\nconst isPermutation = (str) => {\n\tif (str.length === 0) return false\n\tif (str.length === 1) return true\n\tif (str.length === 2) return true\n\tlet permutations = (str) => {\n\t\tlet arr = []\n\t\tlet permutations = \"\"\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tarr.push(str[i])\n\t\t\tpermutations += str[i]\n\t\t}\n\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\tfor (let j = i + 1; j < arr.length; j++) {\n\t\t\t\tpermutations += arr[i] + arr[j]\n\t\t\t\tarr.push(arr.shift())\n\t\t\t\tarr.push(arr.shift())\n\t\t\t}\n\t\t}\n\t\treturn permutations === str\n\t}\n\treturn permutations(str)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n\t\t\tp++\n\t\t}\n\t}\n\treturn p\n}\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (y[i] + y[j] + y[k] % 3 === 0) {\n\t\t\t\t\tu++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn u\n}\n\nmodule.exports = getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) {\n\t\treturn u\n\t}\n\tlet m = (y[lo] + y[hi]) / 2\n\tlet p = (y[hi] - y[lo]) / 2\n\tlet n = (hi - lo)\n\tlet d = 0\n\tfor (let i = 0; i < n; i++) {\n\t\tlet p1 = (y[lo + i] - m) / p\n\t\tlet p2 = (y[hi + i] - m) / p\n\t\tlet p3 = (y[hi + i] - y[lo + i]) / p\n\t\tif (p1 > 0 && p2 > 0 && p3 > 0) {\n\t\t\tu.push(y[lo + i])\n\t\t\td = p1 + p2 + p3\n\t\t}\n\t}\n\treturn u\n}\n\n//let bf = (planet1, planet2) => {\n//\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n//\tlet u = []\n//\tlet lo = -1\n//\tlet hi = -1\n//\tfor (let i = 0; i < 8; i++) {\n//\t\tif (y[i] == planet1) { lo = i }\n//\t}\n//\tfor (let i = 0; i < 8; i++) {\n//\t\tif (y[i] == planet2) { hi = i }\n//\t}\n//\tif (lo == -1 || hi == -1) {\n//\t\treturn u\n//\t}\n//\tlet m = (y[lo] + y[hi]) / 2\n//\tlet p = (y[hi] - y[lo]) / 2\n//\tlet n = (hi - lo)\n//\tlet d = 0\n//\tfor (let i = 0; i < n; i++) {\n//\t\tlet p1 = (y[lo + i] - m) / p\n//\t\tlet p2 = (y[hi + i] - m) / p\n//\t\tlet p3 = (y[hi + i] - y[lo + i]) / p\n//\t\tif (p1 > 0 && p2 > 0 && p3 > 0) {\n//\t\t\tu.push(y[lo + i])\n//\t\t\td = p1 + p2 + p3\n//\t\t}\n//\t}\n//\treturn u\n//}\n\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) {\n\t\treturn u\n\t}\n\tlet m = (y[lo] + y[hi]) / 2\n\tlet p = (y[hi] - y[lo]) / 2\n\tlet n = (hi - lo)\n\tlet d = 0\n\tfor (let i = 0; i < n; i++) {\n\t\tlet p1 = (y[lo + i] - m) / p\n\t\tlet p2 = (y[hi + i] - m) / p\n\t\tlet p3 = (y[hi + i] - y[lo + i]) / p\n\t\tif (p1 > 0 && p2 > 0 && p3 > 0) {\n\t\t\tu.push(y[lo + i])\n\t\t\td = p1 + p2 + p3\n\t\t}\n\t}\n\treturn u\n}\n\nlet bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) {\n\t\treturn u\n\t}\n\tlet m = (y[lo] + y[hi]) / 2\n\tlet p = (y[hi] - y[lo]) / 2\n\tlet n = (hi - lo)\n\tlet d = 0\n\tfor (let i = 0; i < n; i++) {\n\t\tlet p1 = (y[lo + i] - m) / p\n\t\tlet p2 = (y[hi + i] - m) /"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tlet t = p[k]\n\t\t\t\tp[k] = p[k + 1]\n\t\t\t\tp[k + 1] = t\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (n % i == 0) {\n\t\t\tif (i!= len) {\n\t\t\t\treturn x\n\t\t\t}\n\t\t}\n\t}\n\treturn y\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n\n/*\nGiven two lists, return the sum of the elements in the two lists, except for the element in the first list that is not also in the second list.\n\nGiven two lists A and B, return the sum of the elements in A that are not also in B.\n\nGiven two lists A and B, return the sum of the elements in B that are not also in A.\n\nIf there is no element in the first list that is not also in the second list, return the sum of the elements in the first list.\n\nIf there is no element in the second list that is not also in the first list, return the sum of the elements in the second list.\n\nIf the lists are empty, return 0.\n\nIf the lists have the same length, the length of the output list will be the same as the length of the input lists.\n\nExample:\n\ninput: [1, 3, 2, 0], [1, 3, 0]\noutput: 4\n\ninput: [-1, -2, 0], [1, 3]\noutput: -1\n\ninput: [1, 3, 2, 0], [1, 3]\noutput: 1\n\ninput: [1, 3, 2, 0], [1]\noutput: 1\n\ninput: [1, 3, 2, 0], []\noutput: 0\n\ninput: [], []\noutput: 0\n\ninput: [[1, 3, 2, 0]], [[1, 3, 0]]\noutput: 4\n\ninput: [[1, 3, 2, 0]], [[1, 3]]\noutput: 1\n\ninput: [[1, 3, 2, 0]], [[1]]\noutput: 1\n\ninput: [[1, 3, 2, 0]], []\noutput: 0\n*/\nconst doubleTheDifference = (a, b) => {\n\tlet s = 0\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (b.indexOf(a[i]) === -1) {\n\t\t\ts += a[i]\n\t\t}\n\t}\n\treturn s\n}\n\n/*\nGiven a list of numbers, return the sum of the multiples of those numbers that are\nless than or equal to the length of the list.\n\nGiven a list of numbers, return the sum of the multiples of those numbers that are\nless than or equal to the length of the list.\n\nIf the list is empty, return 0.\n\nIf the list has length one, return the sum of that number times the number itself.\n\nExample:\n\ninput: [3, 6, 9, 12, 15], 10\noutput: 36\n\ninput: [3, 6, 9, 12, 15], 20\noutput: 60\n\ninput: [3, 6, 9, 12, 15], 30\noutput: 90\n\ninput: [3, 6, 9, 12, 15], 40\noutput: 120\n\ninput: [3, 6, 9, 12, 15], 50\noutput: 150\n*/\nconst sumOfMultiples = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i] * (i + 1)\n\t}\n\treturn sum\n}\n\n/*\nGiven an array of numbers, return the sum of the numbers in the array that are\nodd.\n\nGiven an array of numbers, return the sum of the numbers in the array that are\neven.\n\nIf the array is empty, return 0.\n\nExample:\n\ninput: [1, 3, 2, 0], 0\noutput: 1\n\ninput: [1, 3, 2, 0], 2\noutput: 3\n\ninput: [1, 3, 2, 0], 4\noutput: 6\n\ninput: [1, 3, 2, 0], 6\noutput: 9\n*/\nconst sumOfOdd = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 === 1) {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfEven = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 === 0) {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\n/*\nGiven a list of numbers, return the sum of the numbers in the list that are\ndivisible by 5 and 7.\n\nGiven a list of numbers, return the sum of the numbers in the list that are\nnot divisible by 5 and 7.\n\nIf the list is empty, return 0.\n\nIf the list has length one, return the sum of that number times the number itself.\n\nExample:\n\ninput: [3, 6, 9, 12, 15], 15\noutput: 45\n\ninput: [3, 6, 9, 12, 15], 20\noutput: 40\n\ninput: [3, 6, 9, 12, 15], 30\noutput: 30\n\ninput: [3, 6, 9, 12, 15], 45\noutput: 0\n*/\nconst sumOfPairs = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 5 === 0 && lst[i] % 7 === 0) {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfOddAndPairs = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 5 === 0"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n\t\t\tgame[i] = 0\n\t}\n\treturn game\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n\t\t}\n\t\tif (y > u) {\n\t\t\ts = extensions[i]\n\t\t\tu = y\n\t\t}\n\t}\n\treturn class_name + \".\" + s\n}\n\n// This example is from a Java source file.\n// See: https://github.com/junit-team/junit/blob/master/junit/src/main/java/org/junit/Assert.java\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\n// This example is from a JavaScript source file.\n// See: https://github.com/junit-team/junit/blob/master/junit/src/main/java/org/junit/Assert.java\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\n// This example is from a Java source file.\n// See: https://github.com/junit-team/junit/blob/master/junit/src/main/java/org/junit/Assert.java\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail(test_name, null, expected)\n\t}\n}\n\nconst assert_ = (test_name, expression, expected) => {\n\tif (!expression) {\n\t\tassert.fail("}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k]!= pat[j + k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y == l) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\nconst isCyclic = a => {\n\tlet l = a.length\n\tfor (let i = 0; i < l - 1; i++) {\n\t\tif (cycpatternCheck(a, a.concat(a.slice(i, l - i)))) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n\nisCyclic(\"abab\")\nisCyclic(\"efef\")\nisCyclic(\"whassup\")\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = num / 2\n  }\n  return (e, o)\n}\n\nconst toDecimal = (num) => {\n  if (num < 0) { num = -num }\n  return num.toString().replace(/\\d(?!\\d*\\.)/g, '0').split('.').join('.')\n}\n\nconst add = (x, y) => x + y\nconst sub = (x, y) => x - y\nconst mult = (x, y) => x * y\nconst div = (x, y) => x / y\n\nconst main = async () => {\n  let start = process.hrtime()\n  let result = 0\n  let a = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let b = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let c = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let d = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let e = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let f = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let g = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let h = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let i = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let j = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let k = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let l = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let m = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let n = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let o = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let p = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let q = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let r = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let s = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let t = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result += sub(x, o) }\n  }\n  let u = (x) => {\n    let (e, o) = evenOddCount(x)\n    if (e === 0) { result += add(x, o) }\n    else { result +="}
{"task_id": "JavaScript/156", "prompt": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tif (div === 1) {\n\t\t\tres = sym[i] + res\n\t\t} else if (div === 2) {\n\t\t\tres = sym[i] + res + sym[i]\n\t\t} else if (div === 3) {\n\t\t\tres = sym[i] + res + sym[i] + sym[i]\n\t\t} else if (div === 4) {\n\t\t\tres = sym[i] + res + sym[i] + sym[i] + sym[i]\n\t\t}\n\t\ti--\n\t}\n\treturn res\n}\n\nmodule.exports = {\n\tintToMiniRoman\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n/*\n Given the lengths of two sides of a triangle, return true if the\n\ttriangle is obtuse, false otherwise.\n\tObtuse is defined as a triangle where the ratio of the two sides is\n\tgreater than or equal to 3.\n\tExample:\n\tobtuseTriangle(3, 4) == true\n\tobtuseTriangle(3, 5) == false\n\t*/\nconst obtuseTriangle = (a, b) => {\n\treturn (a * b < a + b || a * b < a + b)\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof right angles in the triangle.\n\tRight angle is defined as a triangle where the ratio of the two sides\n\tis greater than or equal to 3.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == 3\n\trightAngleTriangle(1, 2, 3) == 0\n\t*/\nconst rightAngles = (a, b, c) => {\n\treturn (rightAngleTriangle(a, b, c) || rightAngleTriangle(c, b, a) || rightAngleTriangle(b, a, c) || rightAngleTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof obtuse angles in the triangle.\n\tObtuse angle is defined as a triangle where the ratio of the two sides\n\tis greater than or equal to 3.\n\tExample:\n\tobtuseTriangle(3, 4, 5) == 2\n\tobtuseTriangle(1, 2, 3) == 0\n\t*/\nconst obtuses = (a, b, c) => {\n\treturn (obtuseTriangle(a, b, c) || obtuseTriangle(c, b, a) || obtuseTriangle(b, a, c) || obtuseTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof acute angles in the triangle.\n\tAcute angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tacuteTriangle(3, 4, 5) == 1\n\tacuteTriangle(1, 2, 3) == 0\n\t*/\nconst acutes = (a, b, c) => {\n\treturn (acuteTriangle(a, b, c) || acuteTriangle(c, b, a) || acuteTriangle(b, a, c) || acuteTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof obtuse angles in the triangle.\n\tObtuse angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tobtuseTriangle(3, 4, 5) == 0\n\tobtuseTriangle(1, 2, 3) == 2\n\t*/\nconst obtus = (a, b, c) => {\n\treturn (obtuseTriangle(a, b, c) || obtuseTriangle(c, b, a) || obtuseTriangle(b, a, c) || obtuseTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof acute angles in the triangle.\n\tAcute angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tacuteTriangle(3, 4, 5) == 1\n\tacuteTriangle(1, 2, 3) == 0\n\t*/\nconst acutuses = (a, b, c) => {\n\treturn (acuteTriangle(a, b, c) || acuteTriangle(c, b, a) || acuteTriangle(b, a, c) || acuteTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof obtuse angles in the triangle.\n\tObtuse angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tobtuseTriangle(3, 4, 5) == 0\n\tobtuseTriangle(1, 2, 3) == 2\n\t*/\nconst acutous = (a, b, c) => {\n\treturn (acuteTriangle(a, b, c) || acuteTriangle(c, b, a) || acuteTriangle(b, a, c) || acuteTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof acute angles in the triangle.\n\tAcute angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tacuteTriangle(3, 4, 5) == 1\n\tacuteTriangle(1, 2, 3) == 0\n\t*/\nconst acutus = (a, b, c) => {\n\treturn (acuteTriangle(a, b, c) || acuteTriangle(c, b, a) || acuteTriangle(b, a, c) || acuteTriangle(c, a, b))\n}\n\n/*\n Given the lengths of the three sides of a triangle, return the number\n\tof obtuse angles in the triangle.\n\tObtuse angle is defined as a triangle where the ratio of the two sides\n\tis less than or equal to 3.\n\tExample:\n\tobtuseTriangle(3, 4, 5) == 2\n\tobtuseTriangle(1, 2, 3) == 0\n\t*/\nconst acutouss = (a, b, c) => {\n\treturn (acuteTriangle(a, b,"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y) {\n\t\t\t\tif (p < j) { p = j }\n\t\t\t}\n\t\t}\n\t\tif (s < p) {\n\t\t\ts = p\n\t\t\tu = i\n\t\t}\n\t}\n\treturn words[u]\n}\n\nconsole.log(findMax([\n\t\"name\",\n\t\"of\",\n\t\"string\"\n]))\nconsole.log(findMax([\n\t\"name\",\n\t\"enam\",\n\t\"game\"\n]))\nconsole.log(findMax([\n\t\"aaaaaaa\",\n\t\"bb\",\n\t\"cc\"\n]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n\t}\n\treturn [remaining, 0]\n}\n\nconst eatTest = [\n\t[1, 10, 1],\n\t[1, 1, 9],\n\t[1, 0, 0],\n\t[2, 2, 0]\n]\n\n/*\n\tYou're a rabbit, and you have a number of carrots.\n\tYou need to eat the carrots in order to reach the number of needed carrots\n\t\n\tYou can only eat a certain number of carrots per day.\n\t\n\tYou will return the number of days of eating that will allow you to reach the number of needed carrots.\n\t\n\tIf there are not enough carrots left, you will return 0.\n  \n\tExample:\n\t* eat(2, 5, 3) -> 2\n\t* eat(4, 10, 5) -> 3\n\t* eat(5, 10, 5) -> 0\n\t* eat(5, 10, 4) -> 0\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eatDays = (number, need, remaining) => {\n\treturn Math.floor(((number - remaining) / need) + 1)\n}\n\nconst eatDaysTest = [\n\t[1, 10, 1],\n\t[1, 1, 9],\n\t[1, 0, 0],\n\t[2, 2, 0]\n]\n\n/*\n\tYou're a rabbit, and you have a number of carrots.\n\tYou need to eat the carrots in order to reach the number of needed carrots\n\t\n\tYou can only eat a certain number of carrots per day.\n\t\n\tYou will return the number of days of eating that will allow you to reach the number of needed carrots.\n\t\n\tIf there are not enough carrots left, you will return 0.\n  \n\tExample:\n\t* eat(2, 5, 3) -> 2\n\t* eat(4, 10, 5) -> 3\n\t* eat(5, 10, 5) -> 0\n\t* eat(5, 10, 4) -> 0\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eatDays2 = (number, need, remaining) => {\n\treturn Math.min(number, Math.floor(((number - remaining) / need) + 1))\n}\n\nconst eatDays2Test = [\n\t[1, 10, 1],\n\t[1, 1, 9],\n\t[1, 0, 0],\n\t[2, 2, 0]\n]\n\nconst main = () => {\n\tconst result = eat(1, 1, 10)\n\tconsole.log(`eat(${result[0]}, ${result[1]}, ${result[2]}) -> ${result[0]}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '+') {\n\t\t\t\toperand[i] += operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '-') {\n\t\t\t\toperand[i] -= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet final = 0\n\tfor (let i = 0; i < operand.length; i++) {\n\t\tfinal += operand[i]\n\t}\n\treturn final\n}\n\n/*\n\tGiven a list of numbers, determine if there are two numbers which sum to the sum of the input list.\n\n\tExample:\n\tinput = [1, 2, 3]\n\t=> false\n\tinput = [2, 4, 5, 7]\n\t=> true\n\n\tNote:\n\tThe number can be arbitrarily large.\n\t*/\nconst hasTwoSums = (input) => {\n\tlet sum = 0\n\tfor (let i = 0; i < input.length; i++) {\n\t\tsum += input[i]\n\t}\n\tfor (let i = 0; i < input.length; i++) {\n\t\tfor (let j = i + 1; j < input.length; j++) {\n\t\t\tif (sum + input[i] == sum + input[j]) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n\tGiven a list of numbers, determine if there are three numbers which sum to the sum of the input list.\n\n\tExample:\n\tinput = [1, 2, 3]\n\t=> false\n\tinput = [2, 4, 5, 7]\n\t=> true\n\n\tNote:\n\tThe number can be arbitrarily large.\n\t*/\nconst hasThreeSums = (input) => {\n\tlet sum = 0\n\tfor (let i = 0; i < input.length; i++) {\n\t\tsum += input[i]\n\t}\n\tfor (let i = 0; i < input.length; i++) {\n\t\tfor (let j = i + 1; j < input.length; j++) {\n\t\t\tfor (let k = j + 1; k < input.length; k++) {\n\t\t\t\tif (sum + input[i] == sum + input[j] + input[k]) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n\tGiven a list of numbers, determine if there are two numbers which sum to the sum of the input list.\n\n\tExample:\n\tinput = [1, 2, 3]\n\t=> false\n\tinput = [2, 4, 5, 7]\n\t=> true\n\n\tNote:\n\tThe number can be arbitrarily large.\n\t*/\nconst hasFourSums = (input) => {\n\tlet sum = 0\n\tfor (let i = 0; i < input.length; i++) {\n\t\tsum += input[i]\n\t}\n\tfor (let i = 0; i < input.length; i++) {\n\t\tfor (let j = i + 1; j < input.length; j++) {\n\t\t\tfor (let k = j + 1; k < input.length; k++) {\n\t\t\t\tfor (let l = k + 1; l < input.length; l++) {\n\t\t\t\t\tif (sum + input[i] == sum + input[j] + input[k] + input[l]) {\n\t\t\t\t\t\treturn true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n\n/*\n\tGiven a list of numbers, determine if there are three numbers which sum to the sum of the input list.\n\n\tExample:\n\tinput = [1, 2, 3]\n\t=> false\n\tinput = [2, 4, 5, 7]\n\t=> true\n\n\tNote:\n\tThe number can be arbitrarily large.\n\t*/\nconst hasFiveSums = (input) => {\n\tlet sum = 0\n\tfor (let i = 0; i < input."}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 48 && y <= 57) {\n\t\t\ty -= 48;\n\t\t\tt = 0;\n\t\t} else {\n\t\t\tt = 1;\n\t\t}\n\t\tp = p + s[i].toUpperCase()\n\t\tif (t === 1) {\n\t\t\tp = p + s[i].toLowerCase()\n\t\t}\n\t}\n\treturn p;\n}\n\nconsole.log(solve('ab'))\nconsole.log(solve('1234'))\nconsole.log(solve('#a@C'))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n\treturn md5(text)\n}\n\n/*\n\tGiven a string 'text', return its sha1 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha1('Hello world') == 'a902b2a59f9f4e89d5d5b5a5e7d4f9b4f47c4c8'\n\t*/\nconst stringToSha1 = (text) => {\n\tif (text == '') { return null }\n\tvar sha1 = require('js-sha1')\n\treturn sha1(text)\n}\n\n/*\n\tGiven a string 'text', return its sha256 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha256('Hello world') == '9f8c071b6c8c9f5d9d9d65d00f8e7c1f6e9a0ee8a2f8eccd9e7c8b2d0a9'\n\t*/\nconst stringToSha256 = (text) => {\n\tif (text == '') { return null }\n\tvar sha256 = require('js-sha256')\n\treturn sha256(text)\n}\n\n/*\n\tGiven a string 'text', return its sha512 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToSha512('Hello world') == 'e8c1b5b38b0f6c1b2c7a4c45d1d2b9c7f5c8b4a2b1b8c6f4e6f9f1f2f3f4f5f6f7f8f9fafbfbfcfdfeff'\n\t*/\nconst stringToSha512 = (text) => {\n\tif (text == '') { return null }\n\tvar sha512 = require('js-sha512')\n\treturn sha512(text)\n}\n\n/*\n\tGiven a string 'text', return its hex string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToHex('Hello world') == '68656c6c6f20776f726c64'\n\t*/\nconst stringToHex = (text) => {\n\tif (text == '') { return null }\n\tvar hex = require('hex-md5')\n\treturn hex(text)\n}\n\n/*\n\tGiven a string 'text', return its base64 string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToBase64('Hello world') == 'Zm9v'\n\t*/\nconst stringToBase64 = (text) => {\n\tif (text == '') { return null }\n\tvar base64 = require('base-64')\n\treturn base64.encode(text)\n}\n\n/*\n\tGiven a string 'text', return its base64url string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToBase64Url('Hello world') == 'SGVsbG8gV29ybGQh'\n\t*/\nconst stringToBase64Url = (text) => {\n\tif (text == '') { return null }\n\tvar base64url = require('base-64url')\n\treturn base64url.encode(text)\n}\n\n/*\n\tGiven a string 'text', return its base64url-safe string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToBase64UrlSafe('Hello world') == 'SGVsbG8gV29ybGQh'\n\t*/\nconst stringToBase64UrlSafe = (text) => {\n\tif (text == '') { return null }\n\tvar base64url = require('base-64url')\n\treturn base64url.encode(text, { safe: true })\n}\n\n/*\n\tGiven a string 'text', return its hex-base64-url string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToHexBase64Url('Hello world') == '68656c6c6f20776f726c64'\n\t*/\nconst stringToHexBase64Url = (text) => {\n\tif (text == '') { return null }\n\tvar base64url = require('base-64url')\n\treturn base64url.encode(text, { type: 'hex' })\n}\n\n/*\n\tGiven a string 'text', return its hex-base64-safe string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToHexBase64UrlSafe('Hello world') == '68656c6c6f20776f726c64'\n\t*/\nconst stringToHexBase64UrlSafe = (text) => {\n\tif (text == '') { return null }\n\tvar base64url = require('base-64url')\n\treturn base64url.encode(text, { safe: true, type: 'hex' })\n}\n\n/*\n\tGiven a string 'text', return its hex-base64 string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToHexBase64('Hello world') == '68656c6c6f20776f726c64'\n\t*/\nconst stringToHexBase64 = (text) => {\n\tif (text == '') { return null }\n\tvar base64 = require('base-64')\n\treturn base64.encode(text, { type: 'hex' })\n}\n\n/*\n\tGiven a string 'text', return its hex-base64-safe string hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToHexBase64Safe('Hello world') == '68656c6c6f20776f726c64'\n\t*/\nconst stringToHexBase64Safe = (text) => {\n"}
{"task_id": "JavaScript/163", "prompt": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tconst result = [];\n\tfor (let i = a; i <= b; i += 2) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange = (start, end) => {\n\treturn generateIntegers(start, end);\n};\n\nconst generateIntegersInRange2 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i += 2) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\n/*\n\tgenerateIntegersInRange(1, 10) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(10, 2) => []\n\t*/\nconst generateIntegersInRange3 = (start, end) => {\n\tif (start > end) {\n\t\tlet tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t}\n\tconst result = [];\n\tfor (let i = start; i <= end; i += 2) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\n/*\n\tgenerateIntegersInRange(1, 10) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(10, 2) => [2, 4, 6, 8]\n\t*/\nconst generateIntegersInRange4 = (start, end) => {\n\tconst result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\n/*\n\tgenerateIntegersInRange(1, 10) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegersInRange(10, 2) => []\n\t*/\nconst generateIntegersInRange5 = (start, end) => {\n\tif (start > end) {\n\t\tlet tmp = start;\n\t\tstart = end;\n\t\tend = tmp;\n\t}\n\tconst result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tresult.push(i);\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange6 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange7 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 3 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange8 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 5 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange9 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 7 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange10 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 11 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange11 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 13 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange12 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 17 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange13 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 19 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange14 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 23 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange15 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 29 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange16 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 31 === 0) {\n\t\t\tresult.push(i);\n\t\t}\n\t}\n\treturn result;\n};\n\nconst generateIntegersInRange17 = (start, end) => {\n\tlet result = [];\n\tfor (let i = start; i <= end; i++) {\n\t\tif (i % 37 === 0) {\n"}
