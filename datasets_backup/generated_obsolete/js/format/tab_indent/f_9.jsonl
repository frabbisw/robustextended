{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i != j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n\tgiven threshold.\n\t>>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n\tfalse\n\t>>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\ttrue\n\t*/\nconst hasCloseElements = (numbers, threshold) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tfor (let j = 0; j < numbers.length; j++) {\n\t\t\tif (i!= j) {\n\t\t\t\tlet distance = Math.abs(numbers[i] - numbers[j]);\n\t\t\t\tif (distance < threshold) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * Checks if there are any numbers that are within the given interval.\n *\n * @param {Array} numbers\n * @param {Number} lower\n * @param {Number} upper\n * @returns {boolean}\n */\nconst hasNumbersInInterval = (numbers, lower, upper) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] >= lower && numbers[i] <= upper) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * Checks if there are any numbers that are outside the given interval.\n *\n * @param {Array} numbers\n * @param {Number} lower\n * @param {Number} upper\n * @returns {boolean}\n */\nconst hasNumbersOutOfInterval = (numbers, lower, upper) => {\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] < lower || numbers[i] > upper) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\nmodule.exports = {\n\thasCloseElements,\n\thasNumbersInInterval,\n\thasNumbersOutOfInterval\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('( ) (( )) (( )( ))')\n\t['()', '(())', '(()())']\n\t*/\nconst separateParenGroups = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else {\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t} else {\n\t\t\t\tcurrent_string.push(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n\tseparate those group into separate strings and return the list of those.\n\tSeparate groups are balanced (each open brace is properly closed) and not nested within each other\n\tIgnore any spaces in the input string.\n\t>>> separateParenGroups('(()())')\n\t['()()', '(())']\n\t*/\nconst separateParenGroups2 = (paren_string) => {\n\tvar result = [];\n\tvar current_string = [];\n\tvar current_depth = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\tcurrent_depth += 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else if (c == ')') {\n\t\t\tcurrent_depth -= 1;\n\t\t\tcurrent_string.push(c);\n\t\t} else {\n\t\t\tif (current_depth == 0) {\n\t\t\t\tresult.push(current_string.join(''));\n\t\t\t\tcurrent_string = [];\n\t\t\t} else {\n\t\t\t\tcurrent_string.push(c);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n\nconst isParenBalanced = (paren_string) => {\n\tvar open_parens = 0;\n\tvar closed_parens = 0;\n\n\tfor (const c of paren_string) {\n\t\tif (c == '(') {\n\t\t\topen_parens += 1;\n\t\t} else if (c == ')') {\n\t\t\tclosed_parens += 1;\n\t\t}\n\t}\n\n\tif (open_parens!= closed_parens) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nconst isBalanced = (string) => {\n\tvar open_braces = 0;\n\tvar closed_braces = 0;\n\n\tfor (const c of string) {\n\t\tif (c == '{') {\n\t\t\topen_braces += 1;\n\t\t} else if (c == '}') {\n\t\t\tclosed_braces += 1;\n\t\t}\n\t}\n\n\tif (open_braces!= closed_braces) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nconst test = () => {\n\tconst test1 = isBalanced(\"{}\");\n\tconst test2 = isBalanced(\"{}\");\n\tconst test3 = isBalanced(\"()\");\n\tconst test4 = isBalanced(\"()\");\n\tconst test5 = isBalanced(\"()\");\n\tconst test6 = isBalanced(\"{(())}\");\n\tconst test7 = isBalanced(\"{(()})\");\n\tconst test8 = isBalanced(\"{(())}\");\n\n\tconsole.log(\"test1: \" + test1);\n\tconsole.log(\"test2: \" + test2);\n\tconsole.log(\"test3: \" + test3);\n\tconsole.log(\"test4: \" + test4);\n\tconsole.log(\"test5: \" + test5);\n\tconsole.log(\"test6: \" + test6);\n\tconsole.log(\"test7: \" + test7);\n\tconsole.log(\"test8: \" + test8);\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Given a positive floating point number, it can be decomposed into\n\tand integer part (largest integer smaller than given number) and decimals\n\t(leftover part always smaller than 1).\n\n\tReturn the decimal part of the number.\n\t>>> truncateNumber(3.5)\n\t0.5\n\t*/\nconst truncateNumber = (number) => {\n\treturn number % 1.0;\n}\n\n// ----------------------------------------------------------------------------\n// Copyright (C) 2017 Bloomberg Finance L.P.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// http://www.apache.org/licenses/LICENSE-2.0\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ----------------------------- END-OF-FILE ----------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n\tzero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n\tat that point function should return true. Otherwise it should return false.\n\t>>> belowZero([1, 2, 3])\n\tfalse\n\t>>> belowZero([1, 2, -4, 5])\n\ttrue\n\t*/\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconst belowZero = (operations) => {\n\tvar balance = 0;\n\tfor (const op of operations) {\n\t\tbalance += op;\n\t\tif (balance < 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nconsole.log(belowZero([1, 2, 3]));\nconsole.log(belowZero([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n\taround the mean of this dataset.\n\tMean Absolute Deviation is the average absolute difference between each\n\telement and a centerpoint (mean in this case):\n\tMAD = average | x - x_mean |\n\t>>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n\t1.0\n\t*/\nconst meanAbsoluteDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn numbers.reduce((prev, item) => {\n\t\treturn Math.abs(item - mean);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate Standard Deviation\n// around the mean of this dataset.\n// Standard Deviation is the square root of the average of the squared\n// differences between each element and a centerpoint (mean in this case).\n// StdDev = sqrt(average | x - x_mean |^2)\nconst standardDeviation = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn Math.sqrt(numbers.reduce((prev, item) => {\n\t\treturn prev + (item - mean) * (item - mean);\n\t}, 0) / numbers.length);\n};\n\n// For a given list of input numbers, calculate Standard Deviation\n// around the mean of this dataset.\n// Standard Deviation is the square root of the average of the squared\n// differences between each element and a centerpoint (mean in this case).\n// StdDev = sqrt(average | x - x_mean |^2)\nconst variance = (numbers) => {\n\tvar mean = numbers.reduce((prev, item) => {\n\t\treturn prev + item;\n\t}, 0) / numbers.length;\n\treturn Math.sqrt(numbers.reduce((prev, item) => {\n\t\treturn prev + (item - mean) * (item - mean);\n\t}, 0) / numbers.length);\n};\n\n// For a given list of input numbers, calculate the sum of squares of each\n// element minus the squares of the mean.\nconst sumOfSquares = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + (item - Math.pow(item, 2));\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of squares of each\n// element minus the squares of the mean.\n// NOTE:\n// this is NOT the same as the above method (above) because the\n// former uses a different function that returns a sum of squares.\nconst sumOfSquares = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + (item - Math.pow(item, 2));\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of squares of each\n// element minus the squares of the mean.\n// NOTE:\n// this is NOT the same as the above method (above) because the\n// former uses a different function that returns a sum of squares.\nconst sumOfSquares = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + (item - Math.pow(item, 2));\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the mean of each\n// element and subtract it from the original list\nconst subtractMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev - item;\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) / numbers.length;\n};\n\n// For a given list of input numbers, calculate the sum of the square\n// of each element and add it to the sum of the squares of each element\nconst sumOfSquaresAndAddMeans = (numbers) => {\n\treturn numbers.reduce((prev, item) => {\n\t\treturn prev + Math.pow(item, 2);\n\t}, 0) /"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n\t>>> intersperse([], 4)\n\t[]\n\t>>> intersperse([1, 2, 3], 4)\n\t[1, 4, 2, 4, 3]\n\t*/\nconst intersperse = (numbers, delimeter) => {\n\tif (!Array.isArray(numbers) || numbers.length == 0)\n\t\treturn [];\n\tvar result = [];\n\tfor (const n of numbers) {\n\t\tif (result.length > 0) {\n\t\t\tresult.push(delimeter);\n\t\t}\n\t\tresult.push(n);\n\t}\n\treturn result;\n};\n\n/*\n\tTake a list of elements and returns a list of lists, with each inner list having one element\n\t>>> separate([1, 2, 3], 2)\n\t[[1, 2], [2, 3]]\n\t>>> separate([1, 2, 3], 2, '')\n\t[[1, 2, 3], []]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3], 2, '*')\n\t[[1, 2], [2, 3]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '*')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '.')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, ',')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, ',')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '|')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '_')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '\\\\')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '>')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '<')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, ';')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, ':')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '/')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '_')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '~')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '+')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '*')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '^')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '&')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '%')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '!')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '?')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3,'')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, ',')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '-')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '+')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '.')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3,'')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '*')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '^')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '_')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '~')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '&')\n\t[[1, 2, 3], [4, 5, 6]]\n\t>>> separate([1, 2, 3, 4, 5, 6], 3, '#"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tlet depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t}\n\tlet parsed = [];\n\tfor (const group of paren_string.split(' ')) {\n\t\tparsed.push(parseParenGroup(group));\n\t}\n\treturn parsed;\n}\n\n/**\n\t# parseNestedParens\n\tInput to this function is a string represented multiple groups for nested parentheses separated by spaces.\n\tFor each of the group, output the deepest level of nesting of parentheses.\n\tE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n\t>>> parseNestedParens('(()()) ((())) () ((())()())')\n\t[2, 3, 1, 3]\n\t*/\nconst parseNestedParens = (paren_string) => {\n\tvar parseParenGroup = function (s) {\n\t\tvar depth = 0, max_depth = 0;\n\t\tfor (const c of s) {\n\t\t\tif (c == '(') {\n\t\t\t\tdepth += 1;\n\t\t\t\tmax_depth = Math.max(max_depth, depth);\n\t\t\t} else {\n\t\t\t\tdepth -= 1;\n\t\t\t}\n\t\t}\n\t\treturn max_depth;\n\t}\n\tlet parsed = [];\n\tfor (const group of paren_string.split(' ')) {\n\t\tparsed.push(parseParenGroup(group));\n\t}\n\treturn parsed;\n}\n\n// This is the first solution\nconst parseNestedParens = (paren_string) => {\n\tlet depth = 0;\n\tconst groups = paren_string.split('');\n\tconst start_idx = groups.findIndex(c => c == '(');\n\tconst end_idx = groups.findIndex(c => c == ')');\n\tconst start_group = groups.slice(0, start_idx + 1);\n\tconst end_group = groups.slice(end_idx, groups.length - 1);\n\tfor (const group of start_group) {\n\t\tdepth += 1;\n\t}\n\tfor (const group of end_group) {\n\t\tdepth -= 1;\n\t}\n\treturn depth;\n}\n\nconst parseNestedParens = (paren_string) => {\n\tlet depth = 0;\n\tconst groups = paren_string.split('');\n\tconst start_idx = groups.findIndex(c => c == '(');\n\tconst end_idx = groups.findIndex(c => c == ')');\n\tconst start_group = groups.slice(0, start_idx + 1);\n\tconst end_group = groups.slice(end_idx, groups.length - 1);\n\tfor (const group of start_group) {\n\t\tdepth += 1;\n\t}\n\tfor (const group of end_group) {\n\t\tdepth -= 1;\n\t}\n\treturn depth;\n}\n\n/*\n\tThe solution below is the best one to try.\n\tThe code below is using the previous solution but is\n\tnot the best way to do it.\n*/\n\nconst parseNestedParens = (paren_string) => {\n\tlet depth = 0;\n\tconst groups = paren_string.split('');\n\tconst start_idx = groups.findIndex(c => c == '(');\n\tconst end_idx = groups.findIndex(c => c == ')');\n\tconst start_group = groups.slice(0, start_idx + 1);\n\tconst end_group = groups.slice(end_idx, groups.length - 1);\n\tconst start_depth = start_group.reduce((acc, c) => (acc + c == '(')? acc + 1 : acc, 0);\n\tconst end_depth = end_group.reduce((acc, c) => (acc + c == ')')? acc + 1 : acc, 0);\n\tdepth = start_depth + end_depth;\n\treturn depth;\n}\n\nconst parseNestedParens = (paren_string) => {\n\tlet depth = 0;\n\tconst groups = paren_string.split('');\n\tconst start_idx = groups.findIndex(c => c == '(');\n\tconst end_idx = groups.findIndex(c => c == ')');\n\tconst start_group = groups.slice(0, start_idx + 1);\n\tconst end_group = groups.slice(end_idx, groups.length - 1);\n\tconst start_depth = start_group.reduce((acc, c) => (acc + c == '(')? acc + 1 : acc, 0);\n\tconst end_depth = end_group.reduce((acc, c) => (acc + c == ')')? acc + 1 : acc, 0);\n\tdepth = start_depth + end_depth;\n\treturn depth;\n}\n\n/*\n\tThis solution is the best one to try.\n\tThe code below is using the previous solution but is\n\tnot the best way to do it.\n*/\n\nconst parseNestedParens = (paren_string) => {\n\tlet depth = 0;\n\tconst groups = paren_string.split('');\n\tconst start_idx = groups.findIndex(c => c == '(');\n\tconst end_idx = groups.findIndex(c => c == ')');\n\tconst start_group = groups.slice(0, start_idx + 1);\n\tconst end_group = groups.slice(end_idx, groups.length - 1);\n\tconst start_depth = start_group.reduce((acc, c) => (acc + c == '(')? acc + 1 : acc, 0);\n\tconst end_depth = end_group.reduce((acc, c) =>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that contain given substring\n\t>>> filterBySubstring([], 'a')\n\t[]\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd', 'array']\n\t*/\nconst filterBySubstring = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays2 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays3 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays4 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays5 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays6 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays7 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays8 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays9 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays10 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays11 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays12 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays13 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays14 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays15 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd', 'cde', 'array'], 'a')\n\t['abc', 'bacd']\n\t*/\nconst filterBySubstringByArrays16 = (strings, substring) => {\n\treturn strings.filter(x => x.indexOf(substring)!= -1);\n};\n\n/*\n\t>>> filterBySubstringByArrays(['abc', 'bacd"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n\tEmpty sum should be equal to 0 and empty product should be equal to 1.\n\t>>> sumProduct([])\n\t(0, 1)\n\t>>> sumProduct([1, 2, 3, 4])\n\t(10, 24)\n\t*/\nconst sumProduct = (numbers, int) => {\n\tvar sum_value = 0, prod_value = 1;\n\tfor (const n of numbers) {\n\t\tsum_value += n;\n\t\tprod_value *= n;\n\t}\n\treturn (sum_value, prod_value);\n};\n\n/*\n\tGiven an integer, return a string consisting of its decimal representation with leading zeros.\n\t>>> decimalString(1)\n\t'01'\n\t>>> decimalString(123)\n\t'123'\n\t>>> decimalString(5)\n\t'05'\n\t>>> decimalString(0)\n\t'00'\n\t>>> decimalString(-1)\n\t'-01'\n\t>>> decimalString(5.4)\n\t'05.4'\n\t>>> decimalString(0.5)\n\t'00.5'\n\t>>> decimalString(0.51)\n\t'00.51'\n\t>>> decimalString(1.23)\n\t'01.23'\n\t>>> decimalString(1.23456789)\n\t'01.23456789'\n\t>>> decimalString(-1.23456789)\n\t'-01.23456789'\n\t>>> decimalString(123456789.123456789)\n\t'123456789.123456789'\n\t>>> decimalString(1e20)\n\t'1000000000000000000000'\n\t>>> decimalString(1e-20)\n\t'0.000000000000000000000'\n\t>>> decimalString(1e-21)\n\t'0.000000000000000000001'\n\t>>> decimalString(1e-22)\n\t'0.00000000000000000001'\n\t>>> decimalString(1e-23)\n\t'0.0000000000000000001'\n\t>>> decimalString(1e-24)\n\t'0.0000000000000001'\n\t>>> decimalString(1e-25)\n\t'0.000000000000001'\n\t>>> decimalString(1e-26)\n\t'0.00000000000001'\n\t>>> decimalString(1e-27)\n\t'0.0000000000001'\n\t>>> decimalString(1e-28)\n\t'0.000000000001'\n\t>>> decimalString(1e-29)\n\t'0.00000000001'\n\t>>> decimalString(1e-30)\n\t'0.0000000001'\n\t>>> decimalString(1e-31)\n\t'0.00000001'\n\t>>> decimalString(1e-32)\n\t'0.0000001'\n\t>>> decimalString(1e-33)\n\t'0.000001'\n\t>>> decimalString(1e-34)\n\t'0.00001'\n\t>>> decimalString(1e-35)\n\t'0.0001'\n\t>>> decimalString(1e-36)\n\t'0.001'\n\t>>> decimalString(1e-37)\n\t'0.01'\n\t>>> decimalString(1e-38)\n\t'0.1'\n\t>>> decimalString(1e-39)\n\t'1'\n\t>>> decimalString(1e-40)\n\t'10'\n\t>>> decimalString(1e-41)\n\t'100'\n\t>>> decimalString(1e-42)\n\t'1000'\n\t>>> decimalString(1e-43)\n\t'10000'\n\t>>> decimalString(1e-44)\n\t'100000'\n\t>>> decimalString(1e-45)\n\t'1000000'\n\t>>> decimalString(1e-46)\n\t'10000000'\n\t>>> decimalString(1e-47)\n\t'100000000'\n\t>>> decimalString(1e-48)\n\t'1000000000'\n\t>>> decimalString(1e-49)\n\t'10000000000'\n\t>>> decimalString(1e-50)\n\t'100000000000'\n\t>>> decimalString(1e-51)\n\t'1000000000000'\n\t>>> decimalString(1e-52)\n\t'10000000000000'\n\t>>> decimalString(1e-53)\n\t'100000000000000'\n\t>>> decimalString(1e-54)\n\t'1000000000000000'\n\t>>> decimalString(1e-55)\n\t'10000000000000000'\n\t>>> decimalString(1e-56)\n\t'1000000000000000000'\n\t>>> decimalString(1e-57)\n\t'10000000000000000000'\n\t>>> decimalString(1e-58)\n\t'100000000000000000000'\n\t>>> decimalString(1e-59)\n\t'1000000000000000000000'\n\t>>> decimalString(1e-60)\n\t'10000000000000000000000'\n\t>>> decimalString(1e-61)\n\t'100000000000000000000000'\n\t>>> decimalString(1e-62)\n\t'1000000000000000000000000'\n\t>>> decimalString(1e-63)\n\t'10000000000000000000000000'\n\t>>> decimalString(1e-64)\n\t'100000000000000000000000000'\n\t>>> decimalString(1e-65)\n\t'1000000000000000000000000000'\n\t>>> decimalString(1e-66)\n\t'10000000000000000000000000000'\n\t>>> decimalString(1e-67)\n\t'100000000000000000000000000000'\n\t>>> decimalString(1e-68)\n\t'1000000000000000000000000000000'\n\t>>> decimalString(1e-69)\n\t'10000000000000000000000000000000'\n\t>>> decimalString(1e-70)\n\t'100000000000000000000000000000000'\n\t>>> decimalString(1e-71)\n\t'10000000000000000000000000000000000'\n\t>>> decimalString(1e-72)\n\t'100000000000000000000000000000000000'\n\t>>> decimalString(1e-73)\n\t'1000000000000000000000000000000000000'\n\t>>> decimalString(1e-74)\n\t'10000000000000000000000000000000000000'\n\t>>> decimalString(1e-75)\n\t'100000000000000000000000000000000000000'\n\t>>> decimalString(1e-76)\n\t'1000000000000000000000000000000000000000'\n\t>>> decimalString(1e-77)\n\t'10000000000000000000000000000000000000000'\n\t>>> decimalString(1e-78)\n\t'100000000000000000000000000000000000000000'\n\t>>> decimalString(1e-79)\n\t'1000000000000000000000000000000000000000000'\n\t>>> decimalString(1e-80)\n\t'10000000000000000000000000000000000000000000'\n\t>>> decimalString(1e-81)"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n\t[1, 2, 3, 3, 3, 4, 4]\n\t*/\nconst rollingMax = (numbers) => {\n\tvar running_max, result = [];\n\tfor (const n of numbers) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = n;\n\t\telse\n\t\t\trunning_max = Math.max(n, running_max);\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax2 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = s;\n\t\telse\n\t\t\trunning_max = Math.max(s, running_max);\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax3(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax3 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 1;\n\t\telse\n\t\t\trunning_max++;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax4(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax4 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 1;\n\t\telse\n\t\t\trunning_max += 1;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax5(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax5 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 0;\n\t\telse\n\t\t\trunning_max++;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax6(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax6 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 1;\n\t\telse\n\t\t\trunning_max += 1;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax7(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax7 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 0;\n\t\telse\n\t\t\trunning_max++;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax8(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax8 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 1;\n\t\telse\n\t\t\trunning_max += 1;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\n/* From a given list of strings, generate a list of rolling maximum element found until given moment\n\tin the sequence.\n\t>>> rollingMax9(['A', 'B', 'C', 'B', 'C', 'D', 'B'])\n\t['A', 'B', 'C', 'C', 'C', 'D', 'D']\n\t*/\nconst rollingMax9 = (strings) => {\n\tvar running_max, result = [];\n\tfor (const s of strings) {\n\t\tif (running_max == undefined)\n\t\t\trunning_max = 0;\n\t\telse\n\t\t\trunning_max++;\n\t\tresult.push(running_max);\n\t}\n\treturn result;\n};\n\nmodule.exports = {\n\trollingMax: rollingMax,\n\trollingMax2: rollingMax2,\n\trollingMax3: rollingMax3,\n\trollingMax4: rollingMax4,\n\trollingMax5: rollingMax5,\n\trollingMax6: rollingMax6,\n\trollingMax7: rollingMax7,\n\trollingMax8: rollingMax8,\n\t"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n\treturn string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n\tAlgorithm idea is simple:\n\t- Find the longest postfix of supplied string that is a palindrome.\n\t- Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n\t>>> makePalindrome('')\n\t''\n\t>>> makePalindrome('cat')\n\t'catac'\n\t>>> makePalindrome('cata')\n\t'catac'\n\t*/\nconst makePalindrome = (string) => {\n\tif (string == '')\n\t\treturn '';\n\tvar beginning_of_suffix = 0;\n\tvar end_of_suffix = string.length - 1;\n\tvar prefix = string.slice(0, string.length - 1);\n\tvar suffix = string.slice(string.length - 1);\n\tvar isPalindrome = false;\n\t\n\twhile (!isPalindrome) {\n\t\tvar reversed = string.slice(beginning_of_suffix, end_of_suffix);\n\t\tisPalindrome = isPalindrome || reversed == reversed.split('').reverse().join('');\n\t\tif (!isPalindrome) {\n\t\t\tend_of_suffix--;\n\t\t\tif (end_of_suffix < beginning_of_suffix)\n\t\t\t\treturn string;\n\t\t\tprefix = prefix + reversed.slice(1, end_of_suffix);\n\t\t\tsuffix = reversed.slice(0, beginning_of_suffix);\n\t\t}\n\t}\n\treturn prefix + suffix;\n}\n\nmodule.exports = {\n\tisPalindrome: isPalindrome,\n\tmakePalindrome: makePalindrome\n}<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n\tPerform binary XOR on these inputs and return result also as a string.\n\t>>> stringXor('010', '110')\n\t'100'\n\t*/\nconst stringXor = (a, b) => {\n\tvar xor = function (i, j) {\n\t\tif (i == j)\n\t\t\treturn '0';\n\t\telse\n\t\t\treturn '1';\n\t}\n\tvar str = '';\n\tvar i = 0;\n\tvar j = 0;\n\twhile (i < a.length && j < b.length) {\n\t\tstr += xor(a.charCodeAt(i), b.charCodeAt(j));\n\t\ti++;\n\t\tj++;\n\t}\n\twhile (i < a.length) {\n\t\tstr += a.charAt(i);\n\t\ti++;\n\t}\n\twhile (j < b.length) {\n\t\tstr += b.charAt(j);\n\t\tj++;\n\t}\n\treturn str;\n}\n\n/*\n\tReturn length of the longest common prefix of two strings.\n\t>>> longestCommonPrefix('abcd', 'abcde')\n\t3\n\t>>> longestCommonPrefix('abcd', 'acd')\n\t1\n\t>>> longestCommonPrefix('abcd', 'abc')\n\t4\n\t>>> longestCommonPrefix('abcd', 'ab')\n\t4\n\t>>> longestCommonPrefix('abcd', 'abcd')\n\t4\n\t*/\nconst longestCommonPrefix = (a, b) => {\n\tvar str = '';\n\tvar i = 0;\n\twhile (i < a.length && i < b.length) {\n\t\tif (a.charAt(i)!= b.charAt(i))\n\t\t\tbreak;\n\t\tstr += a.charAt(i);\n\t\ti++;\n\t}\n\treturn str.length;\n}\n\n/*\n\tReturn length of the longest common suffix of two strings.\n\t>>> longestCommonSuffix('abcd', 'abcde')\n\t4\n\t>>> longestCommonSuffix('abcd', 'acd')\n\t1\n\t>>> longestCommonSuffix('abcd', 'abc')\n\t3\n\t>>> longestCommonSuffix('abcd', 'ab')\n\t3\n\t>>> longestCommonSuffix('abcd', 'abcd')\n\t4\n\t*/\nconst longestCommonSuffix = (a, b) => {\n\tvar str = '';\n\tvar i = 0;\n\twhile (i < a.length && i < b.length) {\n\t\tif (a.charAt(a.length - i - 1)!= b.charAt(b.length - i - 1))\n\t\t\tbreak;\n\t\tstr += a.charAt(a.length - i - 1);\n\t\ti++;\n\t}\n\treturn str.length;\n}\n\n/*\n\tReturns the sum of the two numbers a and b.\n\t>>> sum(1, 2)\n\t3\n\t>>> sum(2, 3)\n\t5\n\t>>> sum(4, 5)\n\t9\n\t>>> sum(6, 7)\n\t14\n\t*/\nconst sum = (a, b) => {\n\treturn a + b;\n}\n\n/*\n\tReturns the product of the two numbers a and b.\n\t>>> product(1, 2)\n\t2\n\t>>> product(2, 3)\n\t6\n\t>>> product(4, 5)\n\t40\n\t>>> product(6, 7)\n\t42\n\t*/\nconst product = (a, b) => {\n\treturn a * b;\n}\n\n/*\n\tReturns the difference between two numbers a and b.\n\t>>> difference(1, 2)\n\t1\n\t>>> difference(2, 3)\n\t1\n\t>>> difference(4, 5)\n\t3\n\t>>> difference(6, 7)\n\t4\n\t*/\nconst difference = (a, b) => {\n\treturn a - b;\n}\n\n/*\n\tReturns the product of the nth power of a number.\n\t>>> power(2, 3)\n\t8\n\t>>> power(4, 2)\n\t16\n\t>>> power(8, 1)\n\t8\n\t>>> power(8, 2)\n\t32\n\t>>> power(8, 3)\n\t64\n\t>>> power(8, 4)\n\t128\n\t>>> power(8, 5)\n\t256\n\t>>> power(8, 6)\n\t512\n\t>>> power(8, 7)\n\t1024\n\t>>> power(8, 8)\n\t2048\n\t>>> power(8, 9)\n\t4096\n\t>>> power(8, 10)\n\t8192\n\t>>> power(8, 11)\n\t16384\n\t>>> power(8, 12)\n\t32768\n\t>>> power(8, 13)\n\t65536\n\t>>> power(8, 14)\n\t131072\n\t>>> power(8, 15)\n\t262144\n\t>>> power(8, 16)\n\t524288\n\t>>> power(8, 17)\n\t1048576\n\t>>> power(8, 18)\n\t2097152\n\t>>> power(8, 19)\n\t4194304\n\t>>> power(8, 20)\n\t8388608\n\t>>> power(8, 21)\n\t16777216\n\t>>> power(8, 22)\n\t33554432\n\t>>> power(8, 23)\n\t67108864\n\t>>> power(8, 24)\n\t134217728\n\t>>> power(8, 25)\n\t268435456\n\t>>> power(8, 26)\n\t536870912\n\t>>> power(8, 27)\n\t1073741824\n\t>>> power(8, 28)\n\t2147483648\n\t>>> power(8, 29)\n\t4294967296\n\t>>> power(8, 30)\n\t8589934592\n\t>>> power(8, 31)\n\t17179869184\n\t>>> power(8, 32)\n\t34359738368\n\t>>> power(8, 33)\n\t68719476736\n\t>>> power(8, 34)\n\t137438953472\n\t>>> power(8, 35)\n\t274877906944\n\t>>> power(8, 36)\n\t549755813888\n\t>>> power(8, 37)\n\t1196227890624\n\t>>> power(8, 38)\n\t2348835309184\n\t>>> power(8, 39)\n\t471744832192\n\t>>> power(8"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n\tstrings of the same length. Return null in case the input list is empty.\n\t>>> longest([])\n\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\tfor (const s of strings) {\n\t\tif (s.length > maxlen)\n\t\t\tmaxlen = s.length;\n\t}\n\treturn strings[0].slice(0, maxlen);\n}\n\n/*\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\treturn strings.map(s => s.slice(0, maxlen)).join('');\n}\n\n/*\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\treturn strings.map(s => s.slice(0, maxlen)).join('');\n}\n\n/*\n\t>>> longest(['a', 'b', 'c'])\n\t'a'\n\t>>> longest(['a', 'bb', 'ccc'])\n\t'ccc'\n\t*/\nconst longest = (strings) => {\n\tif (!Array.isArray(strings) || strings.length == 0)\n\t\treturn null;\n\tvar maxlen = Math.max(...strings.map(x => x.length));\n\treturn strings.map(s => s.slice(0, maxlen)).join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b != 0) {\n\t\tlet temp = a;\n\t\ta = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "/* Return a greatest common divisor of two integers a and b\n\t>>> greatestCommonDivisor(3, 5)\n\t1\n\t>>> greatestCommonDivisor(25, 15)\n\t5\n\t*/\nconst greatestCommonDivisor = (a, b) => {\n\twhile (b!= 0) {\n\t\tlet temp = a;\n\t\ta = b;\n\t\tb = temp % b;\n\t}\n\treturn a;\n}\n\n/**\n\t* Return a least common multiple of two integers a and b\n\t* @param a\n\t* @param b\n\t* @returns {number}\n\t*/\nconst leastCommonMultiple = (a, b) => {\n\treturn a * b / greatestCommonDivisor(a, b);\n}\n\n/**\n\t* Return the smallest number that is evenly divisible by all numbers from 1 to n\n\t* @param n\n\t* @returns {number}\n\t*/\nconst euler_problem_3 = (n) => {\n\tlet num = 1;\n\twhile (num < n) {\n\t\tlet product = 1;\n\t\tlet i = 1;\n\t\twhile (i <= n) {\n\t\t\tif (i % num === 0) {\n\t\t\t\tproduct *= i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (product === n) {\n\t\t\treturn num;\n\t\t}\n\t\tnum++;\n\t}\n\treturn num;\n}\n\nmodule.exports = {\n\tgreatestCommonDivisor,\n\tleastCommonMultiple,\n\teuler_problem_3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n\t>>> allPrefixes('abc')\n\t['a', 'ab', 'abc']\n\t*/\nconst allPrefixes = (string) => {\n\tvar result = [];\n\tfor (let i = 0; i < string.length; i++) {\n\t\tresult.push(string.slice(0, i+1));\n\t}\n\treturn result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n\t>>> allSuffixes('abc')\n\t['', 'b', 'c', 'ac', 'bc', 'abc']\n\t*/\nconst allSuffixes = (string) => {\n\tvar result = [];\n\tfor (let i = string.length; i >= 1; i--) {\n\t\tresult.push(string.slice(i, string.length));\n\t}\n\treturn result;\n};\n\n/* Return the longest prefix of the input string\n\t>>> longestPrefix('abc')\n\t'ab'\n\t*/\nconst longestPrefix = (string) => {\n\tvar result = '';\n\tvar current = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == string[current]) {\n\t\t\tresult = result + string[current];\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tcurrent = 0;\n\t\t\tresult = '';\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return the longest suffix of the input string\n\t>>> longestSuffix('abc')\n\t'c'\n\t*/\nconst longestSuffix = (string) => {\n\tvar result = '';\n\tvar current = string.length - 1;\n\tfor (let i = current; i >= 0; i--) {\n\t\tif (string[i] == string[current]) {\n\t\t\tresult = result + string[current];\n\t\t\tcurrent--;\n\t\t} else {\n\t\t\tcurrent = string.length - 1;\n\t\t\tresult = '';\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return all the longest prefixes of the input string\n\t>>> longestPrefixes('abc')\n\t['ab', 'ac', 'bc']\n\t*/\nconst longestPrefixes = (string) => {\n\tvar result = [];\n\tvar current = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == string[current]) {\n\t\t\tresult.push(string.slice(current, current+1));\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tcurrent = 0;\n\t\t\tresult = [];\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return all the longest suffixes of the input string\n\t>>> longestSuffixes('abc')\n\t['c', 'bc', 'abc']\n\t*/\nconst longestSuffixes = (string) => {\n\tvar result = [];\n\tvar current = string.length - 1;\n\tfor (let i = current; i >= 0; i--) {\n\t\tif (string[i] == string[current]) {\n\t\t\tresult.push(string.slice(current, current+1));\n\t\t\tcurrent--;\n\t\t} else {\n\t\t\tcurrent = string.length - 1;\n\t\t\tresult = [];\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return the longest of the longest prefixes of the input string\n\t>>> longestOfLongestPrefixes('abc')\n\t'ab'\n\t*/\nconst longestOfLongestPrefixes = (string) => {\n\tvar result = '';\n\tvar current = 0;\n\tvar currentMax = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == string[current]) {\n\t\t\tif (i > currentMax) {\n\t\t\t\tcurrentMax = i;\n\t\t\t\tresult = string.slice(current, currentMax+1);\n\t\t\t}\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tcurrent = 0;\n\t\t\tresult = '';\n\t\t\tcurrentMax = 0;\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return the longest of the longest suffixes of the input string\n\t>>> longestOfLongestSuffixes('abc')\n\t'c'\n\t*/\nconst longestOfLongestSuffixes = (string) => {\n\tvar result = '';\n\tvar current = string.length - 1;\n\tvar currentMax = 0;\n\tfor (let i = current; i >= 0; i--) {\n\t\tif (string[i] == string[current]) {\n\t\t\tif (i > currentMax) {\n\t\t\t\tcurrentMax = i;\n\t\t\t\tresult = string.slice(current, currentMax+1);\n\t\t\t}\n\t\t\tcurrent--;\n\t\t} else {\n\t\t\tcurrent = string.length - 1;\n\t\t\tresult = '';\n\t\t\tcurrentMax = 0;\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return a list of strings from the longest of the longest prefixes of the input string\n\t>>> longestOfLongestPrefixes('abc')\n\t['ab', 'ac']\n\t*/\nconst longestOfLongestPrefixes = (string) => {\n\tvar result = [];\n\tvar current = 0;\n\tvar currentMax = 0;\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == string[current]) {\n\t\t\tif (i > currentMax) {\n\t\t\t\tcurrentMax = i;\n\t\t\t\tresult.push(string.slice(current, currentMax+1));\n\t\t\t}\n\t\t\tcurrent++;\n\t\t} else {\n\t\t\tcurrent = 0;\n\t\t\tresult = [];\n\t\t\tcurrentMax = 0;\n\t\t}\n\t}\n\treturn result;\n};\n\n/* Return a list of strings from the longest of the longest suffixes of the input string\n\t>>> longestOfLongestSuffixes('abc')\n\t['c', 'bc']\n\t*/\nconst longestOfLongestSuffixes = (string) => {\n\tvar result = [];\n\tvar current = string.length - 1;\n\tvar currentMax = 0;\n\tfor (let i = current; i >= 0; i--) {\n\t\tif (string[i] == string[current]) {\n\t\t\tif (i > currentMax) {\n\t\t\t\tcurrentMax = i;\n\t\t\t\tresult.push(string.slice(current, currentMax+1));\n\t\t\t}\n\t\t\tcurrent--;\n\t\t} else {\n\t\t\tcurrent = string.length - 1;\n\t\t\tresult = [];\n\t\t\tcurrentMax = 0;\n\t\t}\n\t}\n\treturn result"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\t>>> stringSequence(0)\n\t'0'\n\t>>> stringSequence(5)\n\t'0 1 2 3 4 5'\n\t*/\nconst stringSequence = (n) => {\n\treturn [...Array(n).keys(), n].join(' ')\n}\n\nmodule.exports = stringSequence\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n\t>>> countDistinctCharacters('xyzXYZ')\n\t3\n\t>>> countDistinctCharacters('Jerry')\n\t4\n\t*/\nconst countDistinctCharacters = (string) => {\n\treturn (new Set(string.toLowerCase())).size;\n}\n\n/*\n\tGiven a string, return the number of non-unique characters\n\t>>> countNonUniqueCharacters('xyzXYZ')\n\t3\n\t>>> countNonUniqueCharacters('Jerry')\n\t4\n\t>>> countNonUniqueCharacters('JERRY')\n\t2\n\t*/\nconst countNonUniqueCharacters = (string) => {\n\treturn string.split('').length - countDistinctCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of unique characters\n\t>>> countUniqueCharacters('xyzXYZ')\n\t3\n\t>>> countUniqueCharacters('Jerry')\n\t4\n\t>>> countUniqueCharacters('JERRY')\n\t2\n\t*/\nconst countUniqueCharacters = (string) => {\n\treturn countDistinctCharacters(string) + countNonUniqueCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of alphabetic characters\n\t>>> countAlphabeticCharacters('xyzXYZ')\n\t0\n\t>>> countAlphabeticCharacters('Jerry')\n\t3\n\t>>> countAlphabeticCharacters('JERRY')\n\t2\n\t>>> countAlphabeticCharacters('John')\n\t2\n\t*/\nconst countAlphabeticCharacters = (string) => {\n\treturn string.split('').filter(char => char.match(/[a-zA-Z]/))\n\t\t.length;\n}\n\n/*\n\tGiven a string, return the number of alphanumeric characters\n\t>>> countAlphanumericCharacters('xyzXYZ')\n\t0\n\t>>> countAlphanumericCharacters('Jerry')\n\t3\n\t>>> countAlphanumericCharacters('JERRY')\n\t2\n\t>>> countAlphanumericCharacters('John')\n\t2\n\t*/\nconst countAlphanumericCharacters = (string) => {\n\treturn string.split('').filter(char => char.match(/[a-zA-Z0-9]/))\n\t\t.length;\n}\n\n/*\n\tGiven a string, return the number of numeric characters\n\t>>> countNumericCharacters('xyzXYZ')\n\t0\n\t>>> countNumericCharacters('Jerry')\n\t3\n\t>>> countNumericCharacters('JERRY')\n\t2\n\t>>> countNumericCharacters('John')\n\t2\n\t*/\nconst countNumericCharacters = (string) => {\n\treturn string.split('').filter(char => char.match(/[0-9]/))\n\t\t.length;\n}\n\n/*\n\tGiven a string, return the number of special characters\n\t>>> countSpecialCharacters('xyzXYZ')\n\t0\n\t>>> countSpecialCharacters('Jerry')\n\t3\n\t>>> countSpecialCharacters('JERRY')\n\t2\n\t>>> countSpecialCharacters('John')\n\t2\n\t*/\nconst countSpecialCharacters = (string) => {\n\treturn string.split('').filter(char => char.match(/[^a-zA-Z0-9]/))\n\t\t.length;\n}\n\n/*\n\tGiven a string, return the number of all characters\n\t>>> countCharacters('xyzXYZ')\n\t6\n\t>>> countCharacters('Jerry')\n\t7\n\t>>> countCharacters('JERRY')\n\t6\n\t>>> countCharacters('John')\n\t5\n\t*/\nconst countCharacters = (string) => {\n\treturn string.length;\n}\n\n/*\n\tGiven a string, return the number of all alphabetic characters\n\t>>> countAlphabeticCharacters('xyzXYZ')\n\t0\n\t>>> countAlphabeticCharacters('Jerry')\n\t3\n\t>>> countAlphabeticCharacters('JERRY')\n\t2\n\t>>> countAlphabeticCharacters('John')\n\t2\n\t*/\nconst countAlphabeticCharacters = (string) => {\n\treturn countCharacters(string) - countSpecialCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of all alphanumeric characters\n\t>>> countAlphanumericCharacters('xyzXYZ')\n\t0\n\t>>> countAlphanumericCharacters('Jerry')\n\t3\n\t>>> countAlphanumericCharacters('JERRY')\n\t2\n\t>>> countAlphanumericCharacters('John')\n\t2\n\t*/\nconst countAlphanumericCharacters = (string) => {\n\treturn countCharacters(string) - countAlphabetCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of all numeric characters\n\t>>> countNumericCharacters('xyzXYZ')\n\t0\n\t>>> countNumericCharacters('Jerry')\n\t3\n\t>>> countNumericCharacters('JERRY')\n\t2\n\t>>> countNumericCharacters('John')\n\t2\n\t*/\nconst countNumericCharacters = (string) => {\n\treturn countCharacters(string) - countNumericCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of all special characters\n\t>>> countSpecialCharacters('xyzXYZ')\n\t0\n\t>>> countSpecialCharacters('Jerry')\n\t3\n\t>>> countSpecialCharacters('JERRY')\n\t2\n\t>>> countSpecialCharacters('John')\n\t2\n\t*/\nconst countSpecialCharacters = (string) => {\n\treturn countCharacters(string) - countAlphabetCharacters(string) - countNumericCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of all characters\n\t>>> countCharacters('xyzXYZ')\n\t6\n\t>>> countCharacters('Jerry')\n\t7\n\t>>> countCharacters('JERRY')\n\t6\n\t>>> countCharacters('John')\n\t5\n\t*/\nconst countCharacters = (string) => {\n\treturn string.length;\n}\n\n/*\n\tGiven a string, return the number of all alphabetic characters\n\t>>> countAlphabetCharacters('xyzXYZ')\n\t0\n\t>>> countAlphabetCharacters('Jerry')\n\t3\n\t>>> countAlphabetCharacters('JERRY')\n\t2\n\t>>> countAlphabetCharacters('John')\n\t2\n\t*/\nconst countAlphabetCharacters = (string) => {\n\treturn countCharacters(string) - countSpecialCharacters(string);\n}\n\n/*\n\tGiven a string, return the number of all alphanumeric characters\n\t>>> countAlphanumericCharacters('xyzXYZ')\n\t0\n\t>>> countAlphanumericCharacters('Jerry')\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n\tYour task is to parse this string and return list of integers corresponding to how many beats does each\n\tnot last.\n\n\tHere is a legend:\n\t'o' - whole note, lasts four beats\n\t'o|' - half note, lasts two beats\n\t'.|' - quater note, lasts one beat\n\n\t>>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n\t[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\t*/\nconst parseMusic = (music_string) => {\n\tconst note_map = {'o': 4, 'o|': 2, '.|': 1};\n\tlet current_note = 0;\n\tlet note_list = [];\n\tfor(let i = 0; i < music_string.length; i++) {\n\t\tif(music_string[i] == 'o') {\n\t\t\tnote_list.push(current_note);\n\t\t\tcurrent_note = 0;\n\t\t\tcontinue;\n\t\t}\n\t\tif(music_string[i] == '|') {\n\t\t\tcurrent_note++;\n\t\t\tcontinue;\n\t\t}\n\t\tif(music_string[i] == '.') {\n\t\t\tif(current_note > 0) {\n\t\t\t\tcurrent_note--;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tcurrent_note++;\n\t}\n\tnote_list.push(current_note);\n\treturn note_list;\n};\n\n/* Input to this function is a string representing a time signature.\n\tYour task is to parse this string and return a tuple containing the value of the numerator and the\n\tvalue of the denominator.\n\tNote that the input time signature should be of the format: <numerator>/<denominator>\n\te.g. \"4/4\", \"3/4\", \"2/2\", \"3/2\", \"4/3\", \"3/4\", \"2/4\", \"1/4\", \"4/5\", \"3/4\", \"2/3\", \"3/4\"\n\n\t>>> parseTimeSignature('4/4')\n\t(4, 4)\n\t>>> parseTimeSignature('3/4')\n\t(3, 4)\n\t>>> parseTimeSignature('2/2')\n\t(2, 2)\n\t>>> parseTimeSignature('3/2')\n\t(3, 2)\n\t>>> parseTimeSignature('4/3')\n\t(4, 3)\n\t>>> parseTimeSignature('3/4')\n\t(3, 4)\n\t>>> parseTimeSignature('2/4')\n\t(2, 4)\n\t>>> parseTimeSignature('1/4')\n\t(1, 4)\n\t>>> parseTimeSignature('4/5')\n\t(4, 5)\n\t>>> parseTimeSignature('3/4')\n\t(3, 4)\n\t>>> parseTimeSignature('2/3')\n\t(2, 3)\n\t>>> parseTimeSignature('3/4')\n\t(3, 4)\n\t*/\nconst parseTimeSignature = (time_string) => {\n\tlet num = 1;\n\tlet den = 1;\n\tlet split_string = time_string.split('/');\n\tlet split_num = split_string[0].split(' ');\n\tlet split_den = split_string[1].split(' ');\n\tif(split_num.length!= 1 || split_den.length!= 1) {\n\t\tthrow new Error('Input time signature should be of the format <numerator>/<denominator>');\n\t}\n\tnum = parseInt(split_num[0]);\n\tden = parseInt(split_den[0]);\n\treturn (num, den);\n};\n\n/* Input to this function is a string representing a list of times and their corresponding beats.\n\tYour task is to parse this string and return a dictionary where the keys are the beat of the times,\n\tand the values are the times in a list.\n\tNote that the input time signature should be of the format: <numerator>/<denominator>\n\te.g. \"4/4\", \"3/4\", \"2/2\", \"3/2\", \"4/3\", \"3/4\", \"2/4\", \"1/4\", \"4/5\", \"3/4\", \"2/3\", \"3/4\"\n\n\t>>> parseTimeBeatList('4/4 o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n\t>>> howManyTimes('', 'a')\n\t0\n\t>>> howManyTimes('aaa', 'a')\n\t3\n\t>>> howManyTimes('aaaa', 'aa')\n\t3\n\t*/\nconst howManyTimes = (string, substring) => {\n\tvar times = 0;\n\tfor (let i = 0; i < string.length - substring.length + 1; i++) {\n\t\tif (string.slice(i, i+substring.length) == substring) {\n\t\t\ttimes += 1;\n\t\t}\n\t}\n\treturn times;\n};\n\n/**\n\t* @description Find a substring in the original string.\n\t* @param {string} string The original string\n\t* @param {string} substring The substring to find in the original string\n\t* @returns {number} The index of the first occurence of the substring in the original string, or -1 if the substring is not found.\n\t*/\nconst findSubstring = (string, substring) => {\n\tlet i = 0;\n\twhile (i < string.length - substring.length + 1) {\n\t\tif (string.slice(i, i + substring.length) == substring) {\n\t\t\treturn i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn -1;\n};\n\n/**\n\t* @description Given an array of strings, return an array of strings that represents the longest common substring in the original strings.\n\t* @param {Array} strings An array of strings\n\t* @returns {Array} An array of strings representing the longest common substring in the original strings.\n\t*/\nconst longestCommonSubstring = (strings) => {\n\tif (strings.length < 2) {\n\t\treturn strings;\n\t}\n\tconst len = strings.length;\n\tlet common = [];\n\tfor (let i = 0; i < len; i++) {\n\t\tcommon[i] = findSubstring(strings[i], strings[i + 1]);\n\t}\n\treturn common.reduce((a, b) => {\n\t\treturn a.length > b.length? a : b;\n\t});\n};\n\nmodule.exports = {\n\thowManyTimes,\n\tfindSubstring,\n\tlongestCommonSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\tValid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n\tReturn the string with numbers sorted from smallest to largest\n\t>>> sortNumbers('three one five')\n\t'one three five'\n\t*/\nconst sortNumbers = (numbers) => {\n\tconst value_map = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tlet sortedNumbers = [],\n\t\ti = 0;\n\n\tfor (let number in value_map) {\n\t\tsortedNumbers.push(value_map[number]);\n\t}\n\n\tlet lastNumber = sortedNumbers[sortedNumbers.length - 1];\n\tlet lastNumberIdx = sortedNumbers.length - 1;\n\n\twhile (i < sortedNumbers.length) {\n\t\tlet currentNumber = sortedNumbers[i];\n\t\tif (lastNumber < currentNumber) {\n\t\t\tsortedNumbers.splice(lastNumberIdx + 1, 0, currentNumber);\n\t\t\tlastNumberIdx++;\n\t\t\tlastNumber = sortedNumbers[lastNumberIdx];\n\t\t} else if (lastNumber > currentNumber) {\n\t\t\tlastNumberIdx--;\n\t\t\tlastNumber = sortedNumbers[lastNumberIdx];\n\t\t} else {\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn sortedNumbers.join(' ');\n}\n\nmodule.exports = sortNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i != j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n\tother and return them in order (smaller number, larger number).\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\t(2.0, 2.2)\n\t>>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n\t(2.0, 2.0)\n\t*/\nconst findClosestElements = (numbers) => {\n\tvar closest_pair, distance;\n\tfor (let i = 0; i < numbers.length; i++)\n\t\tfor (let j = 0; j < numbers.length; j++)\n\t\t\tif (i!= j) {\n\t\t\t\tlet a = numbers[i], b = numbers[j];\n\t\t\t\tif (distance == null) {\n\t\t\t\t\tdistance = Math.abs(a - b);\n\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t} else {\n\t\t\t\t\tlet d = Math.abs(a - b);\n\t\t\t\t\tif (d < distance) {\n\t\t\t\t\t\tdistance = d;\n\t\t\t\t\t\tclosest_pair = [Math.min(a, b), Math.max(a, b)];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\treturn closest_pair;\n};\n\n/* Return a list of all the numbers (from 1 to N) which have exactly k digits after the decimal point.\n\t>>> findAllNumbersWithKDigits(5)\n\t[1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000]\n\t>>> findAllNumbersWithKDigits(3)\n\t[1, 10, 100]\n\t>>> findAllNumbersWithKDigits(1)\n\t[]\n\t>>> findAllNumbersWithKDigits(0)\n\t[]\n\t*/\nconst findAllNumbersWithKDigits = (k) => {\n\tlet a = [];\n\tfor (let i = 1; i <= k; i++)\n\t\tfor (let j = 1; j <= 9999; j++)\n\t\t\tif (i === 0 || j === 9999)\n\t\t\t\ta.push(j);\n\treturn a;\n};\n\n/* Return a list of all the numbers (from 1 to N) which have exactly k digits after the decimal point, and which are divisible by m.\n\t>>> findAllNumbersWithKDigitsAndDivisor(5, 7)\n\t[7, 35, 37, 47, 49]\n\t>>> findAllNumbersWithKDigitsAndDivisor(3, 7)\n\t[7]\n\t>>> findAllNumbersWithKDigitsAndDivisor(0, 1)\n\t[]\n\t>>> findAllNumbersWithKDigitsAndDivisor(3, 1)\n\t[]\n\t>>> findAllNumbersWithKDigitsAndDivisor(5, 5)\n\t[]\n\t*/\nconst findAllNumbersWithKDigitsAndDivisor = (k, m) => {\n\tlet a = findAllNumbersWithKDigits(k);\n\tlet result = [];\n\tfor (let i = 0; i < a.length; i++) {\n\t\tlet b = a[i];\n\t\tif (b % m === 0)\n\t\t\tresult.push(b);\n\t}\n\treturn result;\n};\n\n/* Find the product of the first n natural numbers.\n\t>>> findProduct(2)\n\t2\n\t>>> findProduct(3)\n\t6\n\t>>> findProduct(10)\n\t3628800\n\t>>> findProduct(0)\n\t1\n\t>>> findProduct(100)\n\t3628800\n\t>>> findProduct(1000000)\n\t3628800\n\t>>> findProduct(100000000)\n\t3628800\n\t>>> findProduct(1000000000)\n\t3628800\n\t*/\nconst findProduct = (n) => {\n\tlet a = 1;\n\tfor (let i = 1; i <= n; i++)\n\t\ta *= i;\n\treturn a;\n};\n\n/* Find the largest prime number which is less than or equal to n.\n\t>>> findLargestPrimeLessThan(5)\n\t2\n\t>>> findLargestPrimeLessThan(3)\n\t3\n\t>>> findLargestPrimeLessThan(2)\n\t2\n\t>>> findLargestPrimeLessThan(1)\n\t1\n\t>>> findLargestPrimeLessThan(0)\n\t1\n\t>>> findLargestPrimeLessThan(4)\n\t2\n\t>>> findLargestPrimeLessThan(6)\n\t3\n\t*/\nconst findLargestPrimeLessThan = (n) => {\n\tlet a = 0, b = 1;\n\tfor (let i = 1; i < n; i++) {\n\t\twhile (b + a > n)\n\t\t\tb = a;\n\t\ta += 1;\n\t}\n\treturn b;\n};\n\n/* Find the sum of the first n natural numbers.\n\t>>> findSum(2)\n\t2\n\t>>> findSum(3)\n\t6\n\t>>> findSum(10)\n\t66\n\t>>> findSum(0)\n\t1\n\t>>> findSum(100)\n\t499500\n\t>>> findSum(1000000)\n\t499500\n\t>>> findSum(100000000)\n\t499500\n\t>>> findSum(1000000000)\n\t499500\n\t*/\nconst findSum = (n) => {\n\tlet a = 0;\n\tfor (let i = 1; i <= n; i++)\n\t\ta += i;\n\treturn a;\n};\n\nmodule.exports = {\n\tfindClosestElements,\n\tfindAllNumbersWithKDigits,\n\tfindAllNumbersWithKDigitsAndDivisor,\n\tfindProduct,\n\tfindLargestPrimeLessThan\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n\tsuch that the smallest number will become 0 and the largest will become 1\n\t>>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n\t[0.0, 0.25, 0.5, 0.75, 1.0]\n\t*/\nconst rescaleToUnit = (numbers) => {\n\tvar min_number = Math.min(...numbers);\n\tvar max_number = Math.max(...numbers);\n\tvar new_numbers = [];\n\tfor(var number of numbers){\n\t\tnew_numbers.push(number - min_number) / (max_number - min_number);\n\t}\n\treturn new_numbers;\n}\n\n/**\n\tGiven a list of numbers, and a number of steps, return a list of new numbers\n\tthat is the next step in the list of the original.\n\t>>> step_numbers(range(0, 5), 2)\n\t[0.0, 1.0, 2.0, 3.0, 4.0]\n\t*/\nconst step_numbers = (numbers, steps) => {\n\tvar new_numbers = [];\n\tvar step_amount = (1.0 / steps);\n\tfor(var i = 0; i < steps; i++){\n\t\tnew_numbers.push(numbers[i] + step_amount);\n\t}\n\treturn new_numbers;\n}\n\n/**\n\tGiven a list of numbers, and a number of steps, return a list of new numbers\n\tthat is the previous step in the list of the original.\n\t>>> step_numbers(range(0, 5), 2)\n\t[-1.0, -0.5, 0.0, 0.5, 1.0]\n\t*/\nconst step_numbers_reverse = (numbers, steps) => {\n\tvar new_numbers = [];\n\tvar step_amount = (1.0 / steps);\n\tfor(var i = steps; i < numbers.length; i++){\n\t\tnew_numbers.push(numbers[i] - step_amount);\n\t}\n\treturn new_numbers;\n}\n\n/**\n\tGiven a list of numbers, and a number of steps, return a list of new numbers\n\tthat is the reverse of the original.\n\t>>> step_numbers_reverse(range(0, 5), 2)\n\t[4.0, 3.0, 2.0, 1.0, 0.0]\n\t*/\nconst step_numbers_reverse_reverse = (numbers, steps) => {\n\tvar new_numbers = [];\n\tvar step_amount = (1.0 / steps);\n\tfor(var i = numbers.length - steps; i < numbers.length; i++){\n\t\tnew_numbers.push(numbers[i] + step_amount);\n\t}\n\treturn new_numbers;\n}\n\n/**\n\tGiven a list of numbers, and a number of steps, return a list of new numbers\n\tthat is a list of the original numbers, with the last element removed.\n\t>>> step_numbers(range(0, 5), 3)\n\t[0.0, 1.0, 2.0, 3.0]\n\t*/\nconst step_numbers_tail = (numbers, steps) => {\n\treturn numbers.slice(0, -1 * steps);\n}\n\n/**\n\tGiven a list of numbers, and a number of steps, return a list of new numbers\n\tthat is a list of the original numbers, with the first element removed.\n\t>>> step_numbers(range(0, 5), 3)\n\t[1.0, 2.0, 3.0, 4.0]\n\t*/\nconst step_numbers_head = (numbers, steps) => {\n\treturn numbers.slice(1 * steps);\n}\n\nmodule.exports = {\n\trescaleToUnit,\n\tstep_numbers,\n\tstep_numbers_reverse,\n\tstep_numbers_reverse_reverse,\n\tstep_numbers_tail,\n\tstep_numbers_head,\n};<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter given list of any python values only for integers\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterIntegers = (values) => {\n\treturn values.filter(x => Number.isInteger(x));\n};\n\n/* Return an array of all the numbers in the given list\n\t>>> filterIntegers(['a', 3.14, 5])\n\t[5]\n\t>>> filterIntegers([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterNumbers = (values) => {\n\treturn values.filter(x => Number.isFinite(x));\n};\n\n/* Filter out any string values in the given list\n\t>>> filterStrings(['a', '3.14', 5])\n\t[5]\n\t>>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterStrings = (values) => {\n\treturn values.filter(x => typeof x!=='string');\n};\n\n/* Return an array of all the values in the given list\n\t>>> filterStrings(['a', '3.14', 5])\n\t['a', '3.14', 5]\n\t>>> filterStrings([1, 2, 3, 'abc', {}, []])\n\t[1, 2, 3]\n\t*/\nconst filterAll = (values) => {\n\treturn values.filter(x => typeof x!== 'undefined');\n};\n\nexport default {\n\tfilterNumbers,\n\tfilterIntegers,\n\tfilterStrings,\n\tfilterAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Return length of given string\n\t>>> strlen('')\n\t0\n\t>>> strlen('abc')\n\t3\n\t*/\nconst strlen = (string) => {\n\treturn string.length;\n};\n\n/* Return a new string with n leading '0' characters\n\t>>> pad(3, '', '0')\n\t'000'\n\t>>> pad(2, '', '0')\n\t'00'\n\t>>> pad(1, '', '0')\n\t'0'\n\t>>> pad(0, '', '0')\n\t''\n\t>>> pad(4, '0', '0')\n\t'000'\n\t*/\nconst pad = (length, padding, value) => {\n\tlet string = '';\n\tif (length === 0) {\n\t\treturn '';\n\t}\n\n\tif (length > 1) {\n\t\tfor (let i = 1; i < length; i++) {\n\t\t\tstring += padding;\n\t\t}\n\t}\n\n\tstring += value;\n\treturn string;\n};\n\n/* Return a string with spaces inserted between each letter in the original string\n\t>>> pad2('abc')\n\t' abc'\n\t>>> pad2('abc', '_')\n\t'_a_b_c_'\n\t>>> pad2('abc', '_', '0')\n\t'0a0b0c0'\n\t>>> pad2('abc', '_', '0', 2)\n\t'0_0a0_0b0_0c0'\n\t*/\nconst pad2 = (string, padding, value = '0') => {\n\tlet newString = '';\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += padding + string[i];\n\t\tif (i < string.length - 1) {\n\t\t\tnewString +='';\n\t\t}\n\t}\n\n\treturn newString;\n};\n\n/* Return a string with spaces inserted between each letter in the original string,\n\tusing a given padding character\n\t>>> pad2('abc', '_', '0')\n\t'0_a0_b0_c0'\n\t>>> pad2('abc', '_', '0', 2)\n\t'0_0a0_0b0_0c0'\n\t*/\nconst pad2 = (string, padding, value = '0', length = 1) => {\n\tlet newString = '';\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += padding + string[i];\n\t\tif (i < string.length - 1) {\n\t\t\tnewString +='';\n\t\t}\n\n\t\tif (length > 0 && newString.length > length) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn newString;\n};\n\n/* Return a string with spaces inserted between each letter in the original string,\n\tusing a given padding character\n\t>>> pad3('abc', '_', '0')\n\t'0_0a0_0b0_0c0'\n\t>>> pad3('abc', '_', '0', 2)\n\t'0_0a0_0b0_0c0'\n\t*/\nconst pad3 = (string, padding, value = '0', length = 1) => {\n\tlet newString = '';\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += padding + string[i];\n\t\tif (i < string.length - 1) {\n\t\t\tnewString +='';\n\t\t}\n\n\t\tif (length > 0 && newString.length > length) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn newString;\n};\n\n/* Return a string with spaces inserted between each letter in the original string,\n\tusing a given padding character\n\t>>> pad4('abc', '_', '0')\n\t'0_0a0_0b0_0c0'\n\t>>> pad4('abc', '_', '0', 2)\n\t'0_0a0_0b0_0c0'\n\t*/\nconst pad4 = (string, padding, value = '0', length = 1) => {\n\tlet newString = '';\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tnewString += padding + string[i];\n\t\tif (i < string.length - 1) {\n\t\t\tnewString +='';\n\t\t}\n\n\t\tif (length > 0 && newString.length > length) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn newString;\n};\n\nmodule.exports = {\n\tstrlen,\n\tpad,\n\tpad2,\n\tpad3,\n\tpad4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n\t>>> largestDivisor(15)\n\t5\n\t*/\nconst largestDivisor = (n) => {\n\tfor (let i = n - 1; i >= 0; i--)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn n;\n};\n\n/*\n\tFor a given number n, find the largest number that divides n evenly, larger than n\n\t>>> largestDivisor(15)\n\t9\n\t>>> largestDivisor(20)\n\t12\n\t*/\nconst largestDivisorIncrement = (n) => {\n\tfor (let i = n + 1; i < n * n; i++)\n\t\tif (n % i == 0)\n\t\t\treturn i;\n\treturn n;\n};\n\n/*\n\tGiven a number, find the next number that divides n evenly\n\t>>> nextDivisor(15)\n\t10\n\t>>> nextDivisor(10)\n\t15\n\t>>> nextDivisor(10)\n\t25\n\t>>> nextDivisor(25)\n\t10\n\t*/\nconst nextDivisor = (n) => {\n\tlet next = largestDivisorIncrement(n);\n\twhile (next < n) {\n\t\tif (n % next == 0)\n\t\t\treturn next;\n\t\tnext++;\n\t}\n\treturn n;\n};\n\nmodule.exports = {\n\tnextDivisor,\n\tlargestDivisor,\n\tlargestDivisorIncrement\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n\tEach of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n\tInput number should be equal to the product of all factors\n\t>>> factorize(8)\n\t[2, 2, 2]\n\t>>> factorize(25)\n\t[5, 5]\n\t>>> factorize(70)\n\t[2, 5, 7]\n\t*/\nconst factorize = (n) => {\n\tvar fact = [], i = 2;\n\twhile (i <= Math.sqrt(n) + 1) {\n\t\tif (n % i == 0) {\n\t\t\tfact.push(i);\n\t\t\tn = n / i;\n\t\t} else {\n\t\t\ti += 1;\n\t\t}\n\t}\n\tif (n!= 1) {\n\t\tfact.push(n);\n\t}\n\treturn fact;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "/* From a list of integers, remove all elements that occur more than once.\n\tKeep order of elements left the same as in the input.\n\t>>> removeDuplicates([1, 2, 3, 2, 4])\n\t[1, 3, 4]\n\t*/\nconst removeDuplicates = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n\t\t\tdict[num] = 1;\n\t\t}\n\t}\n\treturn [...Object.keys(dict)];\n};\n\nconst removeDuplicates2 = (numbers) => {\n\tvar dict = new Object();\n\tfor (const num of numbers) {\n\t\tif (num in dict) {\n\t\t\tdict[num] += 1;\n\t\t} else {\n\t\t\tdict[num] = 1;\n\t\t}\n\t}\n\tvar result = [];\n\tfor (const [key, value] of Object.entries(dict)) {\n\t\tif (value === 1) {\n\t\t\tresult.push(key);\n\t\t}\n\t}\n\treturn result;\n};\n\nmodule.exports = removeDuplicates;<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\t>>> flipCase('Hello')\n\t'hELLO'\n\t*/\nconst flipCase = (string) => {\n\treturn string.split('')\n\t\t\t\t\t.map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n\t\t\t\t\t.join('');\n};\n\n\n/*\n\tFor a given string, find the number of lowercase letters in it.\n\t>>> countLowerCase('Hello')\n\t5\n\t>>> countLowerCase('WORLD')\n\t3\n\t>>> countLowerCase('HelloWORLD')\n\t5\n\t>>> countLowerCase('HelloWORLDhelloWORLD')\n\t9\n\t*/\nconst countLowerCase = (string) => {\n\treturn string.split('').filter(x => x.toLowerCase().length > 0).length;\n};\n\n\n/*\n\tFor a given string, find the number of uppercase letters in it.\n\t>>> countUpperCase('Hello')\n\t1\n\t>>> countUpperCase('WORLD')\n\t1\n\t>>> countUpperCase('HelloWORLD')\n\t2\n\t>>> countUpperCase('HelloWORLDhelloWORLD')\n\t2\n\t*/\nconst countUpperCase = (string) => {\n\treturn string.split('').filter(x => x.toUpperCase().length > 0).length;\n};\n\n\n/*\n\tGiven a string, remove the first occurrence of the given substring.\n\t>>> removeSubstring('Hello World!', 'Hello')\n\t'World!'\n\t>>> removeSubstring('Hello World!', 'Hello!')\n\t'World!'\n\t>>> removeSubstring('Hello World!', 'World!')\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World')\n\t''\n\t>>> removeSubstring('Hello World!', 'Hello World!')\n\t''\n\t>>> removeSubstring('Hello World!', 'Hello World!', 0)\n\t''\n\t>>> removeSubstring('Hello World!', 'Hello World!', 1)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 2)\n\t'Hello World'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 3)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 4)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 5)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 6)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 7)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 8)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 9)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 10)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 11)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 12)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 13)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 14)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 15)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 16)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 17)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 18)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 19)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 20)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 21)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 22)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 23)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 24)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 25)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 26)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 27)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 28)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 29)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 30)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 31)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 32)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 33)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 34)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 35)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 36)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 37)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 38)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 39)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 40)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 41)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 42)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 43)\n\t'Hello World!'\n\t>>> removeSubstring('Hello World!', 'Hello World!', 44)\n\t'Hello World!'\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Concatenate list of strings into a single string\n\t>>> concatenate([])\n\t''\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate2 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t>>> concatenate(['a', 'b', 'c'])\n\t'abc'\n\t*/\nconst concatenate3 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate4 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate5 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate6 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate7 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate8 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate9 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate10 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate11 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate12 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate13 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate14 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate15 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t*/\nconst concatenate16 = (strings) => {\n\treturn strings.join('');\n};\n\n/*\n\t>>> concatenate([['a', 'b', 'c']])\n\t'abc'\n\t>>> concatenate([['a', 'b', 'c']])\n\t"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n\t>>> filterByPrefix([], 'a')\n\t[]\n\t>>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n\t['abc', 'array']\n\t*/\nconst filterByPrefix = (strings, prefix) => {\n\treturn strings.filter(x => x.startsWith(prefix));\n}\n\nn## ####\n## ###### ### ## #### ####\n## ## ### #### ## ######\n## ## ## ## ### ## ## ##\n## ## ## #### ## ## ## ##\n## #### #### ## #### ## ##\n## ## ## ## ## ### ## ## ##\n## #### ## ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ## ##\n## ###### ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ###### ####\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ## ## ##\n## ## ## ## ## ## ## ## ##\n## #### ## ## ## ###### ####\n## ## ### ## ## ## ## ## ##\n## ## ## ## ## ##"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return only positive numbers in the list.\n\t>>> getPositive([-1, 2, -4, 5, 6])\n\t[2, 5, 6]\n\t>>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[5, 3, 2, 3, 9, 123, 1]\n\t*/\nconst getPositive = (l) => {\n\treturn l.filter(e => e > 0);\n};\n\n/*\n\tGiven an array of non-negative numbers, return the largest positive number in the array.\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n\t10\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2, 3, 4, 5])\n\t5\n\t>>> getMax([-1, 2, -4, 5, 6])\n\t6\n\t>>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t9\n\t>>> getMax([1, 2,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if a given number is prime, and false otherwise.\n\t>>> isPrime(6)\n\tfalse\n\t>>> isPrime(101)\n\ttrue\n\t>>> isPrime(11)\n\ttrue\n\t>>> isPrime(13441)\n\ttrue\n\t>>> isPrime(61)\n\ttrue\n\t>>> isPrime(4)\n\tfalse\n\t>>> isPrime(1)\n\tfalse\n\t*/\nconst isPrime = (n) => {\n\tif (n < 2)\n\t\treturn false;\n\tfor (let k = 2; k < n - 1; k++)\n\t\tif (n % k === 0)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return a list of primes less than the given number.\n\t>>> primes(0)\n\t[]\n\t>>> primes(10)\n\t[2, 3, 5, 7]\n\t>>> primes(100)\n\t[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\t>>> primes(1000)\n\t[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\t*/\nconst primes = (n) => {\n\tlet ret = [];\n\tfor (let i = 2; i < n; i++)\n\t\tif (isPrime(i))\n\t\t\tret.push(i);\n\treturn ret;\n};\n\nmodule.exports = {\n\tprimes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "/*\n\tEvaluates polynomial with coefficients xs at point x.\n\treturn xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n\t*/\nconst poly = (xs, x) => {\n\treturn xs.reduce((prev, item, index) => {\n\t\treturn prev + item * Math.pow(x, index);\n\t}, 0);\n}\n\n/*\n\txs are coefficients of a polynomial.\n\tfindZero find x such that poly(x) = 0.\n\tfindZero returns only only zero point, even if there are many.\n\tMoreover, findZero only takes list xs having even number of coefficients\n\tand largest non zero coefficient as it guarantees\n\ta solution.\n\t>>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n\t-0.5\n\t>>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n\t1.0\n\t*/\nconst findZero = (xs) => {\n\tvar begin = -1.0, end = 1.0;\n\twhile (poly(xs, begin) * poly(xs, end) > 0) {\n\t\tbegin *= 2.0;\n\t\tend *= 2.0;\n\t}\n\twhile (end - begin > 1e-10) {\n\t\tlet center = (begin + end) / 2.0;\n\t\tif (poly(xs, center) === 0) {\n\t\t\treturn center;\n\t\t}\n\t\tif (poly(xs, center - 1) * poly(xs, center) < 0) {\n\t\t\tend = center;\n\t\t} else {\n\t\t\tbegin = center;\n\t\t}\n\t}\n\treturn -1;\n}\n\n/*\n\tA program to find zero point of a polynomial.\n\t>>> round(findZero([1, 2, 3]), 2)\n\t1.0\n\t>>> round(findZero([1, -2, 3]), 2)\n\t-0.5\n\t>>> round(findZero([-1, -2, 3]), 2)\n\t1.5\n\t>>> round(findZero([-1, -2, -3]), 2)\n\t-1.0\n\t>>> round(findZero([-1, -2, -3, -4]), 2)\n\t-2.0\n\t>>> round(findZero([1, 2, 3, 4]), 2)\n\t2.0\n\t>>> round(findZero([1, 2, 3, 4, 5]), 2)\n\t2.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6]), 2)\n\t3.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7]), 2)\n\t3.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8]), 2)\n\t4.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9]), 2)\n\t4.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]), 2)\n\t5.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), 2)\n\t5.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]), 2)\n\t6.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]), 2)\n\t6.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]), 2)\n\t7.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]), 2)\n\t7.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]), 2)\n\t8.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]), 2)\n\t8.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]), 2)\n\t9.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]), 2)\n\t9.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]), 2)\n\t10.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]), 2)\n\t10.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]), 2)\n\t11.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]), 2)\n\t11.5\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]), 2)\n\t12.0\n\t>>> round(findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortThird([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortThird([5, 6, 3, 4, 8, 9, 2])\n\t[2, 6, 3, 4, 8, 9, 5]\n\t*/\nconst sortThird = (l) => {\n\tvar three = l.filter((item, index) => index % 3 == 0);\n\tthree.sort((a, b) => (a - b));\n\treturn l.filter((item, index) => index % 3!= 0).concat(three);\n};\n\n/*\n\tThis function takes a list l and returns a list l' such that\n\tl' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n\tto the values of the corresponding indicies of l, but sorted.\n\t>>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\t>>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n\t>>> sortFifth([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n\t>>> sortFifth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n\t>>> sortFifth([9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255])\n\t[9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return sorted unique elements in a list\n\t>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[0, 2, 3, 5, 9, 123]\n\t*/\nconst unique = (l) => {\n\treturn Array.from(new Set(l)).sort((a, b) => (a - b));\n};\n\nmodule.exports = {\n\tunique,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return maximum element in the list.\n\t>>> maxElement([1, 2, 3])\n\t3\n\t>>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t123\n\t*/\nconst maxElement = (l) => {\n\treturn Math.max(...l);\n};\n\n/*Return the sum of all elements in the list.\n\t>>> sum([1, 2, 3])\n\t6\n\t>>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t133\n\t>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t126\n\t*/\nconst sum = (l) => {\n\treturn l.reduce((a, b) => a + b, 0);\n};\n\n/*Return the mean of all elements in the list.\n\t>>> mean([1, 2, 3])\n\t2\n\t>>> mean([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t10.25\n\t>>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t10.625\n\t*/\nconst mean = (l) => {\n\treturn sum(l) / l.length;\n};\n\n/*Return the standard deviation of all elements in the list.\n\t>>> standardDeviation([1, 2, 3])\n\t0.0\n\t>>> standardDeviation([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t4.083333333333334\n\t>>> standardDeviation([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t4.476923076923077\n\t*/\nconst standardDeviation = (l) => {\n\treturn Math.sqrt(sum([x * x for x in (l)]) / (l.length - 1));\n};\n\n/*Return the median of all elements in the list.\n\t>>> median([1, 2, 3])\n\t2\n\t>>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t3\n\t>>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t9\n\t*/\nconst median = (l) => {\n\tif (l.length % 2 === 0) {\n\t\treturn (sum(l) / 2) + (l[l.length / 2] + l[l.length / 2 - 1]) / 2;\n\t} else {\n\t\treturn l[l.length / 2];\n\t}\n};\n\n/*Return the mode of all elements in the list.\n\t>>> mode([1, 2, 3])\n\t1\n\t>>> mode([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t-10\n\t>>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t9\n\t*/\nconst mode = (l) => {\n\tconst count = {};\n\tfor (const x of l) {\n\t\tif (!(x in count)) {\n\t\t\tcount[x] = 1;\n\t\t} else {\n\t\t\tcount[x]++;\n\t\t}\n\t}\n\tlet maxCount = 0;\n\tlet maxIndex = 0;\n\tfor (const [x, c] of Object.entries(count)) {\n\t\tif (c > maxCount) {\n\t\t\tmaxCount = c;\n\t\t\tmaxIndex = x;\n\t\t}\n\t}\n\treturn maxIndex;\n};\n\n/*Return the number of elements in the list.\n\t>>> length([1, 2, 3])\n\t3\n\t>>> length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t10\n\t>>> length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t25\n\t*/\nconst length = (l) => {\n\treturn l.length;\n};\n\n/*Return the permutations of the elements in the list.\n\t>>> permutations([1, 2, 3])\n\t[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n\t>>> permutations([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n\t[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5, 2, -3, 9, 0, 123, 1, -10], [5, 3, -5,"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\t>>> fizzBuzz(50)\n\t0\n\t>>> fizzBuzz(78)\n\t2\n\t>>> fizzBuzz(79)\n\t3\n\t*/\nconst fizzBuzz = (n) => {\n\tvar ns = [], ans = 0;\n\tfor (let i = 0; i < n; i++)\n\t\tif (i % 11 == 0 || i % 13 == 0)\n\t\t\tns.push(i);\n\twhile (ns.length) {\n\t\tvar num = ns.shift();\n\t\tans++;\n\t\tconsole.log(num);\n\t}\n\treturn ans;\n}\n\nmodule.exports = fizzBuzz;<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[1, 2, 3]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEven = (l) => {\n\tvar even = l.filter((item, index) => index % 2 == 0);\n\teven.sort((a, b) => (a - b));\n\treturn even;\n};\n\n/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortOdd([1, 2, 3])\n\t[2, 3, 1]\n\t>>> sortOdd([5, 6, 3, 4])\n\t[4, 5, 6, 3]\n\t*/\nconst sortOdd = (l) => {\n\tvar odd = l.filter((item, index) => index % 2 == 1);\n\todd.sort((a, b) => (a - b));\n\treturn odd;\n};\n\n/*This function takes a list l and returns a list l' such that\n\tl' is identical to l in the odd indicies, while its values at the even indicies are equal\n\tto the values of the even indicies of l, but sorted.\n\t>>> sortEven([1, 2, 3])\n\t[2, 3, 1]\n\t>>> sortEven([5, 6, 3, 4])\n\t[3, 6, 5, 4]\n\t*/\nconst sortEvenOrOdd = (l) => {\n\tvar evenOrOdd = l.filter((item, index) => index % 2 == 0);\n\tevenOrOdd.sort((a, b) => (a - b));\n\treturn evenOrOdd;\n};\n\n//test\nconst evenOdd = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\nconsole.log(sortEvenOrOdd(evenOdd));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\treturns encoded string by cycling groups of three characters.\n\t*/\nconst encodeCyclic = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n\t\tgroups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 3)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decodeCyclic = (s) => {\n\treturn encodeCyclic(encodeCyclic(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic function. Returns decoded string.\n\t*/\nconst decode_cyclic = (s) => {\n\treturn decodeCyclic(s);\n}\n\n/*\n\treturns encoded string by cycling groups of five characters.\n\t*/\nconst encodeCyclic5 = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 4) / 5); i++) {\n\t\tgroups.push(s.slice(5 * i, Math.min((5 * i + 5), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 5)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic5 function. Returns decoded string.\n\t*/\nconst decodeCyclic5 = (s) => {\n\treturn encodeCyclic5(encodeCyclic5(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic5 function. Returns decoded string.\n\t*/\nconst decode_cyclic5 = (s) => {\n\treturn decodeCyclic5(s);\n}\n\n/*\n\treturns encoded string by cycling groups of eight characters.\n\t*/\nconst encodeCyclic8 = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 7) / 8); i++) {\n\t\tgroups.push(s.slice(8 * i, Math.min((8 * i + 8), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 8)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic8 function. Returns decoded string.\n\t*/\nconst decodeCyclic8 = (s) => {\n\treturn encodeCyclic8(encodeCyclic8(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic8 function. Returns decoded string.\n\t*/\nconst decode_cyclic8 = (s) => {\n\treturn decodeCyclic8(s);\n}\n\n/*\n\treturns encoded string by cycling groups of sixteen characters.\n\t*/\nconst encodeCyclic16 = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 15) / 16); i++) {\n\t\tgroups.push(s.slice(16 * i, Math.min((16 * i + 16), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 16)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic16 function. Returns decoded string.\n\t*/\nconst decodeCyclic16 = (s) => {\n\treturn encodeCyclic16(encodeCyclic16(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic16 function. Returns decoded string.\n\t*/\nconst decode_cyclic16 = (s) => {\n\treturn decodeCyclic16(s);\n}\n\n/*\n\treturns encoded string by cycling groups of twenty characters.\n\t*/\nconst encodeCyclic20 = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 19) / 20); i++) {\n\t\tgroups.push(s.slice(20 * i, Math.min((20 * i + 20), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 20)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\tgroups2.push(group);\n\t}\n\treturn groups2.join('');\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic20 function. Returns decoded string.\n\t*/\nconst decodeCyclic20 = (s) => {\n\treturn encodeCyclic20(encodeCyclic20(s));\n}\n\n/*\n\ttakes as input string encoded with encode_cyclic20 function. Returns decoded string.\n\t*/\nconst decode_cyclic20 = (s) => {\n\treturn decodeCyclic20(s);\n}\n\n/*\n\treturns encoded string by cycling groups of thirty four characters.\n\t*/\nconst encodeCyclic32 = (s) => {\n\tvar groups = [], groups2 = [];\n\tfor (let i = 0; i < Math.floor((s.length + 31) / 32); i++) {\n\t\tgroups.push(s.slice(32 * i, Math.min((32 * i + 32), s.length)));\n\t}\n\tfor (const group of groups) {\n\t\tif (group.length == 32)\n\t\t\tgroups2.push(group.slice(1) + group[0]);\n\t\telse\n\t\t\t"}
{"task_id": "JavaScript/39", "prompt": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "/*\n\tprimeFib returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib(1)\n\t2\n\t>>> primeFib(2)\n\t3\n\t>>> primeFib(3)\n\t5\n\t>>> primeFib(4)\n\t13\n\t>>> primeFib(5)\n\t89\n\t*/\nconst primeFib = (n) => {\n\tvar isPrime = function (p) {\n\t\tif (p < 2)\n\t\t\treturn false;\n\t\tfor (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n\t\t\tif (p % k == 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tvar fib = [1, 2]\n\twhile (fib[fib.length - 1] < n) {\n\t\tvar temp = fib[fib.length - 2] + fib[fib.length - 1]\n\t\tfib.push(temp)\n\t\tif (isPrime(temp))\n\t\t\treturn temp\n\t}\n\treturn 0\n}\n\n/*\n\tprimeFib2 returns n-th number that is a Fibonacci number and it's also prime.\n\t>>> primeFib2(1)\n\t2\n\t>>> primeFib2(2)\n\t3\n\t>>> primeFib2(3)\n\t5\n\t>>> primeFib2(4)\n\t13\n\t>>> primeFib2(5)\n\t89\n\t>>> primeFib2(6)\n\t1729\n\t>>> primeFib2(7)\n\t3383\n\t>>> primeFib2(8)\n\t6281\n\t>>> primeFib2(9)\n\t14981\n\t>>> primeFib2(10)\n\t34641\n\t>>> primeFib2(11)\n\t68563\n\t>>> primeFib2(12)\n\t155921\n\t>>> primeFib2(13)\n\t347951\n\t>>> primeFib2(14)\n\t699567\n\t>>> primeFib2(15)\n\t1687393\n\t>>> primeFib2(16)\n\t3788319\n\t>>> primeFib2(17)\n\t7668819\n\t>>> primeFib2(18)\n\t18673631\n\t>>> primeFib2(19)\n\t35447791\n\t>>> primeFib2(20)\n\t85955229\n\t>>> primeFib2(21)\n\t181480649\n\t>>> primeFib2(22)\n\t359744323\n\t>>> primeFib2(23)\n\t939671543\n\t>>> primeFib2(24)\n\t2097694401\n\t>>> primeFib2(25)\n\t4098549799\n\t>>> primeFib2(26)\n\t8614183023\n\t>>> primeFib2(27)\n\t22602895257\n\t>>> primeFib2(28)\n\t46617090599\n\t>>> primeFib2(29)\n\t100867437279\n\t>>> primeFib2(30)\n\t2233268747999\n\t>>> primeFib2(31)\n\t4569348898759\n\t>>> primeFib2(32)\n\t1258291544799999\n\t>>> primeFib2(33)\n\t28536472823999\n\t>>> primeFib2(34)\n\t595789743809999\n\t>>> primeFib2(35)\n\t1316872387999\n\t>>> primeFib2(36)\n\t30234325889999\n\t>>> primeFib2(37)\n\t5627985579999\n\t>>> primeFib2(38)\n\t1477255829999\n\t>>> primeFib2(39)\n\t361349449999999\n\t>>> primeFib2(40)\n\t664589449999999\n\t>>> primeFib2(41)\n\t183401559999999\n\t>>> primeFib2(42)\n\t366049449999999\n\t>>> primeFib2(43)\n\t677418449999999\n\t>>> primeFib2(44)\n\t187800959999999\n\t>>> primeFib2(45)\n\t378770239999999\n\t>>> primeFib2(46)\n\t785345239999999\n\t>>> primeFib2(47)\n\t2003589559999999\n\t>>> primeFib2(48)\n\t4104355919999999\n\t>>> primeFib2(49)\n\t8625588319999999\n\t>>> primeFib2(50)\n\t21009708719999999\n\t>>> primeFib2(51)\n\t4326597519999999\n\t>>> primeFib2(52)\n\t867669819999999\n\t>>> primeFib2(53)\n\t2161159751999999\n\t>>> primeFib2(54)\n\t4725554751999999\n\t>>> primeFib2(55)\n\t9285523751999999\n\t>>> primeFib2(56)\n\t23778523751999999\n\t>>> primeFib2(57)\n\t4945754751999999\n\t>>> primeFib2(58)\n\t9945754751999999\n\t>>> primeFib2(59)\n\t24789554751999999\n\t>>> primeFib2(60)\n\t5079554751999999\n\t>>> primeFib2(61)\n\t10179554751999999\n\t>>> primeFib2(62)\n\t25179554751999999\n\t>>> primeFib2(63)\n\t50539547751999999\n\t>>> primeFib2(64)\n\t10139554751999999\n\t>>> primeFib2(65)\n\t25279554751999999\n\t>>> primeFib2(66)\n\t5079554751999999\n\t>>> primeFib2(67)\n\t10179554751999999\n\t>>> primeFib2(68)\n\t25179554751999999\n\t>>> primeFib2(69)\n\t50539547751999999\n\t>>> primeFib2(70)\n\t10179554751999999\n\t>>> primeFib2(71)\n\t25279554751999999\n\t>>> primeFib2(72)\n\t5079554751999999\n\t>>> primeFib2(73)\n\t10139554751999999\n\t>>> primeFib2"}
{"task_id": "JavaScript/40", "prompt": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "/*\n\ttriplesSumToZero takes a list of integers as an input.\n\tit returns true if there are three distinct elements in the list that\n\tsum to zero, and false otherwise.\n\n\t>>> triplesSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> triplesSumToZero([1, 3, -2, 1])\n\ttrue\n\t>>> triplesSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n\ttrue\n\t>>> triplesSumToZero([1])\n\tfalse\n\t*/\nconst triplesSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] === 0)\n\t\t\t\t\treturn true\n\treturn false\n}\n\n/*\n\tfindUnique takes a list of elements, and returns a list of unique elements\n\tin the input.\n\n\t>>> findUnique([1, 2, 2, 1, 3])\n\t[1, 2, 3]\n\t>>> findUnique([1, 2, 2, 1, 3, 3])\n\t[1, 2, 3]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3])\n\t[1, 2, 3]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4])\n\t[1, 2, 3, 4]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5])\n\t[1, 2, 3, 4, 5]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7])\n\t[1, 2, 3, 4, 5, 6, 7]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> findUnique([1, 2, 2, 1, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9,"}
{"task_id": "JavaScript/41", "prompt": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tImagine a road that's a perfectly straight infinitely long line.\n\tn cars are driving left to right;  simultaneously, a different set of n cars\n\tare driving right to left.   The two sets of cars start out being very far from\n\teach other.  All cars move in the same speed.  Two cars are said to collide\n\twhen a car that's moving left to right hits a car that's moving right to left.\n\tHowever, the cars are infinitely sturdy and strong; as a result, they continue moving\n\tin their trajectory as if they did not collide.\n\n\tThis function outputs the number of such collisions.\n\t*/\nconst carRaceCollision = (n) => {\n\treturn Math.pow(n, 2);\n};\n\nconst carRace = (cars) => {\n\tlet carsMovingLeft = 0;\n\tlet carsMovingRight = 0;\n\tlet collisions = 0;\n\t\n\tfor (let i = 0; i < cars.length; i++) {\n\t\tcars[i].move();\n\t\t\n\t\tcarsMovingLeft += cars[i].movingLeft();\n\t\tcarsMovingRight += cars[i].movingRight();\n\t\t\n\t\tcollisions += carRaceCollision(cars[i].movingLeft() + cars[i].movingRight());\n\t}\n\t\n\treturn {\n\t\tcars: cars,\n\t\tcarsMovingLeft: carsMovingLeft,\n\t\tcarsMovingRight: carsMovingRight,\n\t\tcollisions: collisions\n\t};\n};\n\nlet cars = [\n\tnew car(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n\tnew car(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n\tnew car(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n\tnew car(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),\n\tnew car(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n];\n\nlet carsMovingLeft = 0;\nlet carsMovingRight = 0;\nlet collisions = 0;\n\nfor (let i = 0; i < cars.length; i++) {\n\tcars[i].move();\n\t\n\tcarsMovingLeft += cars[i].movingLeft();\n\tcarsMovingRight += cars[i].movingRight();\n\t\n\tcollisions += carRaceCollision(cars[i].movingLeft() + cars[i].movingRight());\n}\n\nconsole.log(cars);\nconsole.log(\"cars moving left:\", carsMovingLeft);\nconsole.log(\"cars moving right:\", carsMovingRight);\nconsole.log(\"collisions:\", collisions);<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Return list with elements incremented by 1.\n\t>>> incrList([1, 2, 3])\n\t[2, 3, 4]\n\t>>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\t[6, 4, 6, 3, 4, 4, 10, 1, 124]\n\t*/\nconst incrList = (l) => {\n\treturn l.map(e => e + 1);\n};\n\n// The list of all possible permutations of a given number of elements.\nconst permutations = (n) => {\n\tlet result = [];\n\tif (n === 1) {\n\t\tresult.push([1]);\n\t} else {\n\t\tresult = permutations(n - 1);\n\t\tfor (let i = result.length - 1; i >= 0; i--) {\n\t\t\tfor (let j = result.length - 1; j >= 0; j--) {\n\t\t\t\tlet copy = result.slice();\n\t\t\t\tcopy.splice(j, 1);\n\t\t\t\tcopy.push(n - 1);\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet copy = charList.slice();\n\t\tcopy.splice(i, 1);\n\t\tresult.push(copy.join(''));\n\t\tcharSet[charList[i]] = false;\n\t}\n\treturn result;\n};\n\n// The list of all possible permutations of a given string.\nconst permutationList = (s) => {\n\tlet result = [];\n\tlet charSet = {};\n\tlet charList = s.split('');\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tcharSet[charList[i]] = true;\n\t}\n\tfor (let i = charList.length - 1; i >= 0; i--) {\n\t\tif (!charSet[charList[i]]) {\n\t\t\tcontinue;\n\t\t}"}
{"task_id": "JavaScript/43", "prompt": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "/*\n\tpairsSumToZero takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to zero, and false otherwise.\n\t>>> pairsSumToZero([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToZero([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToZero([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n\ttrue\n\t>>> pairsSumToZero([1])\n\tfalse\n\t*/\nconst pairsSumToZero = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 0)\n\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\tpairsSumToOne takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to one, and false otherwise.\n\t>>> pairsSumToOne([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToOne([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToOne([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToOne([2, 4, -5, 3, 5, 7])\n\tfalse\n\t>>> pairsSumToOne([1])\n\tfalse\n\t>>> pairsSumToOne([1, 2, 3, 7, 8])\n\tfalse\n\t>>> pairsSumToOne([1, 2, 3, 4, 5, 7])\n\ttrue\n\t>>> pairsSumToOne([1, 2, 3, 4, 5, 6, 7])\n\ttrue\n\t>>> pairsSumToOne([1, 2, 3, 4, 5, 6, 7, 8])\n\ttrue\n\t>>> pairsSumToOne([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\ttrue\n\t*/\nconst pairsSumToOne = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 1)\n\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\tpairsSumToTwo takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to two, and false otherwise.\n\t>>> pairsSumToTwo([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToTwo([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToTwo([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToTwo([2, 4, -5, 3, 5, 7])\n\tfalse\n\t>>> pairsSumToTwo([1])\n\tfalse\n\t>>> pairsSumToTwo([1, 2, 3, 7, 8])\n\tfalse\n\t>>> pairsSumToTwo([1, 2, 3, 4, 5, 7])\n\tfalse\n\t>>> pairsSumToTwo([1, 2, 3, 4, 5, 6, 7])\n\ttrue\n\t>>> pairsSumToTwo([1, 2, 3, 4, 5, 6, 7, 8])\n\ttrue\n\t>>> pairsSumToTwo([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\ttrue\n\t*/\nconst pairsSumToTwo = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tif (l[i] + l[j] == 2)\n\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\tpairsSumToThree takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to three, and false otherwise.\n\t>>> pairsSumToThree([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToThree([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToThree([2, 4, -5, 3, 5, 7])\n\tfalse\n\t>>> pairsSumToThree([1])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 7, 8])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 7])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 6, 7])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 6, 7, 8])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\tfalse\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\ttrue\n\t>>> pairsSumToThree([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\ttrue\n\t*/\nconst pairsSumToThree = (l) => {\n\tfor (let i = 0; i < l.length; i++)\n\t\tfor (let j = i + 1; j < l.length; j++)\n\t\t\tfor (let k = j + 1; k < l.length; k++)\n\t\t\t\tif (l[i] + l[j] + l[k] == 3)\n\t\t\t\t\treturn true;\n\treturn false;\n};\n\n/*\n\tpairsSumToFour takes a list of integers as an input.\n\tit returns true if there are two distinct elements in the list that\n\tsum to four, and false otherwise.\n\t>>> pairsSumToFour([1, 3, 5, 0])\n\tfalse\n\t>>> pairsSumToFour([1, 3, -2, 1])\n\tfalse\n\t>>> pairsSumToFour([1, 2, 3, 7])\n\tfalse\n\t>>> pairsSumToFour([2, 4, -5, 3, 5, 7])\n\tfalse\n\t>>> pairsSumToFour([1])\n\tfalse\n\t>>> pairsSumToFour([1, 2, 3, 7, 8])\n\tfalse\n\t>>> pairsSumToFour([1, 2, 3, 4, 5, 7])\n\tfalse\n\t>>> pairsSumToFour([1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "/*Change numerical base of input number x to base.\n\treturn string representation after the conversion.\n\tbase numbers are less than 10.\n\t>>> changeBase(8, 3)\n\t'22'\n\t>>> changeBase(8, 2)\n\t'1000'\n\t>>> changeBase(7, 2)\n\t'111'\n\t*/\nconst changeBase = (x, base) => {\n\tvar ret = \"\";\n\twhile (x > 0) {\n\t\tret = (x % base).toString() + ret;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn ret;\n}\n\n//Find the number of digits in the string x\nconst countDigits = (x) => {\n\tvar digit = 0;\n\twhile (x > 0) {\n\t\tdigit++;\n\t\tx = x / 10;\n\t}\n\treturn digit;\n}\n\n//Convert the string to the base b\nconst convert = (x, b) => {\n\tvar ret = \"\";\n\tfor (var i = 0; i < x.length; i++) {\n\t\tret = (parseInt(x[i], 10) + parseInt(ret, 10) * b).toString();\n\t}\n\treturn ret;\n}\n\n//Convert the string to the base 10\nconst convertToBase10 = (x) => {\n\treturn parseInt(convert(x, 10), 10);\n}\n\n//Find the number of trailing zeroes in x\nconst trailingZeroes = (x) => {\n\tvar count = 0;\n\twhile (x > 0) {\n\t\tx = x / 10;\n\t\tcount++;\n\t}\n\treturn count;\n}\n\n//Find the number of leading zeroes in x\nconst leadingZeroes = (x) => {\n\tvar count = 0;\n\twhile (x > 0) {\n\t\tx = x / 10;\n\t\tcount++;\n\t}\n\treturn count;\n}\n\n//Find the first digit\nconst firstDigit = (x) => {\n\tvar count = 0;\n\twhile (x > 0) {\n\t\tx = x / 10;\n\t\tcount++;\n\t}\n\treturn parseInt(x, 10);\n}\n\n//Find the last digit\nconst lastDigit = (x) => {\n\tvar count = 0;\n\twhile (x > 0) {\n\t\tx = x / 10;\n\t\tcount++;\n\t}\n\treturn parseInt(x, 10);\n}\n\n//Test the above functions\nconst test = () => {\n\tvar a = 8, b = 3;\n\tconsole.log(changeBase(a, b));\n\tconsole.log(convert(a, b));\n\tconsole.log(convertToBase10(a));\n\tconsole.log(trailingZeroes(a));\n\tconsole.log(leadingZeroes(a));\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Get input from console\nconst getInput = () => {\n\tvar input = 0;\n\tconsole.log(\"Please enter an integer: \");\n\tinput = parseInt(prompt(), 10);\n\treturn input;\n}\n\n//Main function\nconst main = () => {\n\tvar input = getInput();\n\tvar x = changeBase(input, 10);\n\tvar count = countDigits(x);\n\tconsole.log(\"The number of digits in \" + x + \" is \" + count);\n\tconsole.log(\"The number of trailing zeroes in \" + x + \" is \" + trailingZeroes(x));\n\tconsole.log(\"The number of leading zeroes in \" + x + \" is \" + leadingZeroes(x));\n\tconsole.log(\"The first digit in \" + x + \" is \" + firstDigit(x));\n\tconsole.log(\"The last digit in \" + x + \" is \" + lastDigit(x));\n}\n\n//Test function\nconst test1 = () => {\n\tvar a = 8, b = 3;\n\tconsole.log(changeBase(a, b));\n\tconsole.log(convert(a, b));\n\tconsole.log(convertToBase10(a));\n\tconsole.log(trailingZeroes(a));\n\tconsole.log(leadingZeroes(a));\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test2 = () => {\n\tvar a = 8;\n\tconsole.log(convert(a, 10));\n}\n\n//Test function\nconst test3 = () => {\n\tvar a = 8;\n\tconsole.log(convertToBase10(a));\n}\n\n//Test function\nconst test4 = () => {\n\tvar a = 8;\n\tconsole.log(trailingZeroes(a));\n\tconsole.log(leadingZeroes(a));\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test5 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test6 = () => {\n\tvar a = 8;\n\tconsole.log(lastDigit(a));\n\tconsole.log(firstDigit(a));\n}\n\n//Test function\nconst test7 = () => {\n\tvar a = 8;\n\tconsole.log(lastDigit(a));\n\tconsole.log(firstDigit(a));\n}\n\n//Test function\nconst test8 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test9 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test10 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test11 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n\tconsole.log(lastDigit(a));\n}\n\n//Test function\nconst test12 = () => {\n\tvar a = 8;\n\tconsole.log(firstDigit(a));\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Given length of a side and high return area for a triangle.\n\t>>> triangleArea(5, 3)\n\t7.5\n\t*/\nconst triangleArea = (a, h) => {\n\treturn a * h / 2.0;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea = (a, b) => {\n\treturn a * b;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea2 = (a, b) => {\n\treturn a * b;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea3 = (a, b, c) => {\n\treturn a * b + c * a;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea4 = (a, b, c, d) => {\n\treturn a * b + c * d + b * d;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea5 = (a, b, c, d, e) => {\n\treturn a * b + c * d + b * d + e * a + e * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea6 = (a, b, c, d, e, f) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea7 = (a, b, c, d, e, f, g) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea8 = (a, b, c, d, e, f, g, h) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea9 = (a, b, c, d, e, f, g, h, i) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea10 = (a, b, c, d, e, f, g, h, i, j) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c + j * a + j * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea11 = (a, b, c, d, e, f, g, h, i, j, k) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c + j * a + j * c + k * a + k * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea12 = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c + j * a + j * c + k * a + k * c + l * a + l * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea13 = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c + j * a + j * c + k * a + k * c + l * a + l * c + m * a + m * c;\n}\n\n/*Given length of a side and high return area for a rectangle.\n\t>>> rectangleArea(5, 3)\n\t10.0\n\t*/\nconst rectangleArea14 = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n\treturn a * b + c * d + b * d + e * a + e * c + f * a + f * c + g * a + g * c + h * a + h * c + i * a + i * c + j * a + j * c + k * a + k * c + l * a + l * c + m * a + m * c + n * a + n * c;\n}\n\n/*Given length of a side"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfib4(0) -> 0\n\tfib4(1) -> 0\n\tfib4(2) -> 2\n\tfib4(3) -> 0\n\tfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\tPlease write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n\t>>> fib4(5)\n\t4\n\t>>> fib4(6)\n\t8\n\t>>> fib4(7)\n\t14\n\t*/\nconst fib4 = (n) => {\n\tvar results = [0, 0, 2, 0];\n\tif (n < 4)\n\t\treturn results[n];\n\tfor (let i = 4; i < n + 1; i++) {\n\t\tresults.push(results.at(-1) + results.at(-2) +\n\t\tresults.at(-3) + results.at(-4));\n\t}\n\treturn results[n];\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "/*Return median of elements in the list l.\n\t>>> median([3, 1, 2, 4, 5])\n\t3\n\t>>> median([-10, 4, 6, 1000, 10, 20])\n\t8.0\n\t*/\nconst median = (l) => {\n\tl.sort((a, b) => a - b);\n\tvar len = l.length;\n\tif (l.length % 2 == 1)\n\t\treturn l[(len - 1) / 2];\n\telse\n\t\treturn (l[len / 2 - 1] + l[len / 2]) / 2.0;\n};\n\nconsole.log(median([3, 1, 2, 4, 5]));\nconsole.log(median([-10, 4, 6, 1000, 10, 20]));<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*\n\tChecks if given string is a palindrome\n\t>>> isPalindrome('')\n\ttrue\n\t>>> isPalindrome('aba')\n\ttrue\n\t>>> isPalindrome('aaaaa')\n\ttrue\n\t>>> isPalindrome('zbcd')\n\tfalse\n\t*/\nconst isPalindrome = (text) => {\n\tfor (let i = 0; i < text.length; i++)\n\t\tif (text[i]!= text.at(-i-1))\n\t\t\treturn false;\n\treturn true;\n}\n\n/*\n\tTakes in a number and returns the next greatest number\n\t>>> nextGreatest(1)\n\t2\n\t>>> nextGreatest(2)\n\t3\n\t>>> nextGreatest(3)\n\t4\n\t>>> nextGreatest(4)\n\t5\n\t>>> nextGreatest(5)\n\t6\n\t>>> nextGreatest(6)\n\t7\n\t>>> nextGreatest(7)\n\t8\n\t>>> nextGreatest(8)\n\t9\n\t>>> nextGreatest(9)\n\t10\n\t>>> nextGreatest(10)\n\t11\n\t>>> nextGreatest(11)\n\t12\n\t>>> nextGreatest(12)\n\t13\n\t>>> nextGreatest(13)\n\t14\n\t>>> nextGreatest(14)\n\t15\n\t>>> nextGreatest(15)\n\t16\n\t>>> nextGreatest(16)\n\t17\n\t>>> nextGreatest(17)\n\t18\n\t>>> nextGreatest(18)\n\t19\n\t>>> nextGreatest(19)\n\t20\n\t>>> nextGreatest(20)\n\t21\n\t>>> nextGreatest(21)\n\t22\n\t>>> nextGreatest(22)\n\t23\n\t>>> nextGreatest(23)\n\t24\n\t>>> nextGreatest(24)\n\t25\n\t>>> nextGreatest(25)\n\t26\n\t>>> nextGreatest(26)\n\t27\n\t>>> nextGreatest(27)\n\t28\n\t>>> nextGreatest(28)\n\t29\n\t>>> nextGreatest(29)\n\t30\n\t>>> nextGreatest(30)\n\t31\n\t>>> nextGreatest(31)\n\t32\n\t>>> nextGreatest(32)\n\t33\n\t>>> nextGreatest(33)\n\t34\n\t>>> nextGreatest(34)\n\t35\n\t>>> nextGreatest(35)\n\t36\n\t>>> nextGreatest(36)\n\t37\n\t>>> nextGreatest(37)\n\t38\n\t>>> nextGreatest(38)\n\t39\n\t>>> nextGreatest(39)\n\t40\n\t>>> nextGreatest(40)\n\t41\n\t>>> nextGreatest(41)\n\t42\n\t>>> nextGreatest(42)\n\t43\n\t>>> nextGreatest(43)\n\t44\n\t>>> nextGreatest(44)\n\t45\n\t>>> nextGreatest(45)\n\t46\n\t>>> nextGreatest(46)\n\t47\n\t>>> nextGreatest(47)\n\t48\n\t>>> nextGreatest(48)\n\t49\n\t>>> nextGreatest(49)\n\t50\n\t>>> nextGreatest(50)\n\t51\n\t>>> nextGreatest(51)\n\t52\n\t>>> nextGreatest(52)\n\t53\n\t>>> nextGreatest(53)\n\t54\n\t>>> nextGreatest(54)\n\t55\n\t>>> nextGreatest(55)\n\t56\n\t>>> nextGreatest(56)\n\t57\n\t>>> nextGreatest(57)\n\t58\n\t>>> nextGreatest(58)\n\t59\n\t>>> nextGreatest(59)\n\t60\n\t>>> nextGreatest(60)\n\t61\n\t>>> nextGreatest(61)\n\t62\n\t>>> nextGreatest(62)\n\t63\n\t>>> nextGreatest(63)\n\t64\n\t>>> nextGreatest(64)\n\t65\n\t>>> nextGreatest(65)\n\t66\n\t>>> nextGreatest(66)\n\t67\n\t>>> nextGreatest(67)\n\t68\n\t>>> nextGreatest(68)\n\t69\n\t>>> nextGreatest(69)\n\t70\n\t>>> nextGreatest(70)\n\t71\n\t>>> nextGreatest(71)\n\t72\n\t>>> nextGreatest(72)\n\t73\n\t>>> nextGreatest(73)\n\t74\n\t>>> nextGreatest(74)\n\t75\n\t>>> nextGreatest(75)\n\t76\n\t>>> nextGreatest(76)\n\t77\n\t>>> nextGreatest(77)\n\t78\n\t>>> nextGreatest(78)\n\t79\n\t>>> nextGreatest(79)\n\t80\n\t>>> nextGreatest(80)\n\t81\n\t>>> nextGreatest(81)\n\t82\n\t>>> nextGreatest(82)\n\t83\n\t>>> nextGreatest(83)\n\t84\n\t>>> nextGreatest(84)\n\t85\n\t>>> nextGreatest(85)\n\t86\n\t>>> nextGreatest(86)\n\t87\n\t>>> nextGreatest(87)\n\t88\n\t>>> nextGreatest(88)\n\t89\n\t>>> nextGreatest(89)\n\t90\n\t>>> nextGreatest(90)\n\t91\n\t>>> nextGreatest(91)\n\t92\n\t>>> nextGreatest(92)\n\t93\n\t>>> nextGreatest(93)\n\t94\n\t>>> nextGreatest(94)\n\t95\n\t>>> nextGreatest(95)\n\t96\n\t>>> nextGreatest(96)\n\t97\n\t>>> nextGreatest(97)\n\t98\n\t>>> nextGreatest(98)\n\t99\n\t>>> nextGreatest(99)\n\t100\n\t>>> nextGreatest(100)\n\t101\n\t>>> nextGreatest(101)\n\t102\n\t>>> nextGreatest(102)\n\t103\n\t>>> nextGreatest(103)\n\t104\n\t>>> nextGreatest(104)\n\t105\n\t>>> nextGreatest(105)\n\t106\n\t>>> nextGreatest(106)\n\t107\n\t>>> nextGreatest(107)\n\t108\n\t>>> nextGreatest(108)\n\t109\n\t>>> nextGreatest(109)\n\t110\n\t>>> nextGreatest(110)\n\t111\n\t>>> nextGreatest(111)\n\t112\n\t>>> nextGreatest(112)\n\t113\n\t>>> nextGreatest(113)\n\t114\n\t>>> nextGreatest(114)\n\t115\n\t>>> nextGreatest(115)\n\t116\n\t>>> nextGreatest(116)\n\t117"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "/*Return 2^n modulo p (be aware of numerics).\n\t>>> modp(3, 5)\n\t3\n\t>>> modp(1101, 101)\n\t2\n\t>>> modp(0, 101)\n\t1\n\t>>> modp(3, 11)\n\t8\n\t>>> modp(100, 101)\n\t1\n\t*/\nconst modp = (n, p) => {\n\tvar ret = 1;\n\tfor (let i = 0; i < n; i++)\n\t\tret = (ret * p) % p;\n\treturn ret;\n};\n\nconst modulo = (n, m) => {\n\tlet ret = n % m;\n\tif (ret < 0)\n\t\tret += m;\n\treturn ret;\n};\n\nconst isEven = (n) => {\n\tif (n === 0)\n\t\treturn true;\n\telse if (n % 2 === 1)\n\t\treturn false;\n\telse\n\t\treturn isEven(n - 1);\n};\n\nconst gcd = (a, b) => {\n\twhile (b > 0) {\n\t\tconst temp = b;\n\t\tb = a % b;\n\t\ta = temp;\n\t}\n\treturn a;\n};\n\nconst lcm = (a, b) => {\n\treturn (a * b) / gcd(a, b);\n};\n\nconst pow = (n, p) => {\n\tconst base = modp(n, p);\n\treturn pow(base, p);\n};\n\nconst multiply = (a, b) => {\n\treturn a * b;\n};\n\nconst inverse = (n, m) => {\n\treturn pow(n, m) % m;\n};\n\nconst power = (n, p) => {\n\tif (p === 1)\n\t\treturn n;\n\telse if (p === 2)\n\t\treturn multiply(n, n);\n\telse\n\t\treturn multiply(power(n, p / 2), multiply(n, n));\n};\n\nconst factorial = (n) => {\n\treturn (n === 0 || n === 1)? 1 : multiply(power(n, (n - 1)), n);\n};\n\nconst factorialMod = (n, m) => {\n\treturn (n === 0 || n === 1)? 1 : multiply(power(n, (n - 1)), n);\n};\n\nconst fpow = (a, b) => {\n\tif (a === 1)\n\t\treturn b;\n\telse\n\t\treturn multiply(fpow(a, b), a);\n};\n\nconst lpow = (a, b) => {\n\tif (a === 1)\n\t\treturn b;\n\telse\n\t\treturn multiply(lpow(a, b), a);\n};\n\nconst pascal = (n) => {\n\tif (n === 1)\n\t\treturn 1;\n\telse\n\t\treturn multiply(pascal(n - 1), n);\n};\n\nconst euler = (n) => {\n\tif (n === 1)\n\t\treturn 1;\n\telse\n\t\treturn multiply(euler(n - 1), n);\n};\n\nconst fibonacci = (n) => {\n\tif (n === 0)\n\t\treturn 0;\n\telse if (n === 1)\n\t\treturn 1;\n\telse\n\t\treturn multiply(fibonacci(n - 1), fibonacci(n - 2));\n};\n\nconst fibonacciMod = (n) => {\n\tif (n === 0)\n\t\treturn 0;\n\telse if (n === 1)\n\t\treturn 1;\n\telse\n\t\treturn multiply(fibonacciMod(n - 1), fibonacciMod(n - 2));\n};\n\nconst gcdMod = (a, b) => {\n\treturn gcd(a, b) % a;\n};\n\nconst lcmMod = (a, b) => {\n\treturn lcm(a, b) % a;\n};\n\nconst mod = (n, m) => {\n\treturn (n % m + m) % m;\n};\n\nconst gcd = (a, b) => {\n\tif (a === 0)\n\t\treturn b;\n\telse if (b === 0)\n\t\treturn a;\n\telse if (a > b)\n\t\treturn gcd(b, a % b);\n\telse\n\t\treturn gcd(a, b % a);\n};\n\nconst lcm = (a, b) => {\n\treturn (a * b) / gcd(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst gcdMod = (a, b) => {\n\tif (a === 0)\n\t\treturn b;\n\telse if (b === 0)\n\t\treturn a;\n\telse\n\t\treturn gcd(a, b) % a;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) / gcdMod(a, b);\n};\n\nconst modp = (n, p) => {\n\treturn (n % p + p) % p;\n};\n\nconst lcmMod = (a, b) => {\n\treturn (a * b) /"}
{"task_id": "JavaScript/50", "prompt": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "/*\n\treturns encoded string by shifting every character by 5 in the alphabet.\n\t*/\nconst encodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\ttakes as input string encoded with encode_shift function. Returns decoded string.\n\t*/\nconst decodeShift2 = (s) => {\n\treturn s.split(\"\").map(ch => String.fromCharCode(\n\t\t((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n\t)).join(\"\");\n}\n\n/*\n\tencodes given string by shifting every character by 5 in the alphabet.\n\t*/\nconst encode = (s) => {\n\tlet res = encodeShift(s);\n\tres = encodeShift(res);\n\tres = encodeShift(res);\n\tres = encodeShift(res);\n\tres = encodeShift(res);\n\treturn res;\n}\n\n/*\n\tdecodes given string by shifting every character by 5 in the alphabet.\n\t*/\nconst decode = (s) => {\n\tlet res = decodeShift(s);\n\tres = decodeShift(res);\n\tres = decodeShift(res);\n\tres = decodeShift(res);\n\tres = decodeShift(res);\n\treturn res;\n}\n\n/*\n\tdecodes given string by shifting every character by 5 in the alphabet.\n\t*/\nconst decode2 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift3 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift4 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift5 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift6 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift7 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift8 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift9 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift10 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet.\n\t*/\nconst decodeShift11 = (s) => {\n\tlet res = decodeShift2(s);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\tres = decodeShift2(res);\n\treturn res;\n}\n\n/*\n\ttakes as input string and decodes it by shifting every character by 5 in the alphabet"}
{"task_id": "JavaScript/51", "prompt": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "/*\n\tremoveVowels is a function that takes string and returns string without vowels.\n\t>>> removeVowels('')\n\t''\n\t>>> removeVowels(\"abcdef\\nghijklm\")\n\t'bcdf\\nghjklm'\n\t>>> removeVowels('abcdef')\n\t'bcdf'\n\t>>> removeVowels('aaaaa')\n\t''\n\t>>> removeVowels('aaBAA')\n\t'B'\n\t>>> removeVowels('zbcd')\n\t'zbcd'\n\t*/\nconst removeVowels = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t\t.filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n\t\t\t\t\t\t\t\t\t\t\t.includes(s.toLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t\t\t|| s.toLowerCase() === s)\n\t\t\t\t\t\t.join(\"\");\n}\n\n/*\n\tisPalindrome is a function that takes string and returns boolean.\n\t>>> isPalindrome('')\n\tfalse\n\t>>> isPalindrome('abc')\n\ttrue\n\t>>> isPalindrome('bbb')\n\ttrue\n\t>>> isPalindrome('aaB')\n\tfalse\n\t>>> isPalindrome('Zbcd')\n\ttrue\n\t*/\nconst isPalindrome = (text) => {\n\treturn text.split(\"\")\n\t\t\t\t\t.reverse()\n\t\t\t\t\t.join(\"\")\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.trim() === text.toLowerCase()\n}\n\n/*\n\tgetSorted is a function that takes array and returns sorted array.\n\t>>> getSorted([1, 2, 3])\n\t[1, 2, 3]\n\t>>> getSorted([1, 2, 3, 4, 5, 6])\n\t[1, 2, 3, 4, 5, 6]\n\t>>> getSorted([1, 2, 3, 4, 5, 6, 7, 8])\n\t[1, 2, 3, 4, 5, 6, 7, 8]\n\t>>> getSorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t>>> getSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\t*/\nconst getSorted = (arr) => {\n\treturn arr.sort((a, b) => a - b)\n}\n\n/*\n\tgetMaxCount is a function that takes array and returns array with max count.\n\t>>> getMaxCount([1, 2, 3])\n\t[3]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6])\n\t[6]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8])\n\t[8]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\t[9]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\t[10]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n\t[11]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n\t[12]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n\t[13]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n\t[14]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n\t[15]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n\t[16]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n\t[17]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n\t[18]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n\t[19]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n\t[20]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n\t[21]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n\t[22]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n\t[23]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\t[24]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\t[25]\n\t>>> getMaxCount([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n\t[26]\n\t>>>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "/*Return true if all numbers in the list l are below threshold t.\n\t>>> belowThreshold([1, 2, 4, 10], 100)\n\ttrue\n\t>>> belowThreshold([1, 20, 4, 10], 5)\n\tfalse\n\t*/\nconst belowThreshold = (l, t) => {\n\tfor (const e of l)\n\t\tif (e >= t)\n\t\t\treturn false;\n\treturn true;\n};\n\n/*Return a list of all the numbers in the given range [a, b].\n\t>>> range(1, 3)\n\t[1, 2]\n\t>>> range(1, 3, -1)\n\t[2]\n\t>>> range(0, 3, 2)\n\t[0, 2]\n\t>>> range(0, 3, 2, -1)\n\t[2, 0]\n\t>>> range(1, 3, 0)\n\t[]\n\t>>> range(1, 3, -1, 0)\n\t[]\n\t>>> range(0, 0, 2, -1)\n\t[]\n\t>>> range(0, 3, 2, 1)\n\t[0, 2]\n\t>>> range(0, 3, -2, 1)\n\t[0, 2]\n\t>>> range(0, 0, 2, -1)\n\t[]\n\t>>> range(0, 3, -2, -1)\n\t[]\n\t>>> range(0, -2, -1, 1)\n\t[]\n\t>>> range(0, 3, 1, -1)\n\t[]\n\t>>> range(0, 3, -2, 1, -1)\n\t[]\n\t>>> range(1, 3, 1, 1)\n\t[]\n\t>>> range(0, 3, 1, 1)\n\t[]\n\t>>> range(0, 0, 2, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1)\n\t[]\n\t>>> range(1, 3, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 0, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, -1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 0, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, -1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 0)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, -1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n\t[]\n\t>>> range(0, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Add two numbers x and y\n\t>>> add(2, 3)\n\t5\n\t>>> add(5, 7)\n\t12\n\t*/\nconst add = (x, y) => {\n\treturn x + y;\n};\n\nmodule.exports = add;<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n\tCheck if two words have the same characters.\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\ttrue\n\t>>> sameChars('abcd', 'dddddddabc')\n\ttrue\n\t>>> sameChars('dddddddabc', 'abcd')\n\ttrue\n\t>>> sameChars('eabcd', 'dddddddabc')\n\tfalse\n\t>>> sameChars('abcd', 'dddddddabce')\n\tfalse\n\t>>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\tfalse\n\t*/\nconst sameChars = (s0, s1) => {\n\treturn JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\nmodule.exports = {\n\tsameChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "/*Return n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n-1) + fib(n-2);\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib2 = (n) => {\n\tlet a = 1;\n\tlet b = 1;\n\tlet n = 1;\n\twhile (n < n) {\n\t\ta = b;\n\t\tb = n;\n\t\tn++;\n\t}\n\treturn a;\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib3 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 0) {\n\t\tfib.push(fib[n-1] + fib[n-2]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib4 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 1) {\n\t\tfib.push(fib[n-1] + fib[n-2]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib5 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 1) {\n\t\tfib.push(fib[n-2] + fib[n-1]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib6 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 2) {\n\t\tfib.push(fib[n-3] + fib[n-2]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib7 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 3) {\n\t\tfib.push(fib[n-4] + fib[n-3]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib8 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 5) {\n\t\tfib.push(fib[n-6] + fib[n-5]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\n/*\n\tReturn the n-th Fibonacci number.\n\t>>> fib(10)\n\t55\n\t>>> fib(1)\n\t1\n\t>>> fib(8)\n\t21\n\t*/\nconst fib9 = (n) => {\n\tlet fib = [1, 1];\n\twhile (n > 7) {\n\t\tfib.push(fib[n-8] + fib[n-7]);\n\t\tn--;\n\t}\n\treturn fib[n];\n}\n\nmodule.exports = {\n\tfib: fib,\n\tfib2: fib2,\n\tfib3: fib3,\n\tfib4: fib4,\n\tfib5: fib5,\n\tfib6: fib6,\n\tfib7: fib7,\n\tfib8: fib8,\n\tfib9: fib9\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"<\" and \">\".\n\treturn false if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"<\")\n\tfalse\n\t>>> correctBracketing(\"<>\")\n\tfalse\n\t>>> correctBracketing(\"<<><>>\")\n\tfalse\n\t>>> correctBracketing(\"><<>\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"<\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\n\treturn true;\n};\n\n/*\n\tTest cases:\n\t\t>>> correctBracketing(\"<>\")\n\t\ttrue\n\t\t>>> correctBracketing(\"<\")\n\t\tfalse\n\t\t>>> correctBracketing(\"<>\")\n\t\ttrue\n\t\t>>> correctBracketing(\"<>\")\n\t\ttrue\n\t\t>>> correctBracketing(\"<>\")\n\t\ttrue\n\t*/\nconsole.log(correctBracketing(\"<>\"));\nconsole.log(correctBracketing(\"<\"));\nconsole.log(correctBracketing(\"<>\"));\nconsole.log(correctBracketing(\"<>\"));\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n\t>>> monotonic([1, 2, 4, 20])\n\ttrue\n\t>>> monotonic([1, 20, 4, 10])\n\tfalse\n\t>>> monotonic([4, 1, 0, -10])\n\ttrue\n\t*/\nconst monotonic = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1) ||\n\t\tJSON.stringify(l) === JSON.stringify(sort2)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n\t* Return true if the list is monotonic ascending order.\n\t* @param {Array} l\n\t* @return {boolean}\n\t* @example\n\t*\n\t*   >>> monotonic([1, 2, 4, 20])\n\t*   false\n\t*   >>> monotonic([1, 20, 4, 10])\n\t*   true\n\t*   >>> monotonic([4, 1, 0, -10])\n\t*   true\n\t*/\nconst monotonicAscending = (l) => {\n\tvar sort1 = [...l].sort((a, b) => a - b);\n\tvar sort2 = [...l].sort((a, b) => b - a);\n\tif (JSON.stringify(l) === JSON.stringify(sort1)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n/**\n\t* Return true if the list is monotonic descending order.\n\t* @param {Array} l\n\t* @return {boolean}\n\t* @example\n\t*\n\t*   >>> monotonic([1, 2, 4, 20])\n\t*   true\n\t*   >>> monotonic([1, 20, 4, 10])\n\t*   false\n\t*   >>> monotonic([4, 1, 0, -10])\n\t*   true\n\t*/\nconst monotonicDescending = (l) => {\n\tvar sort1 = [...l].sort((a, b) => b - a);\n\tvar sort2 = [...l].sort((a, b) => a - b);\n\tif (JSON.stringify(l) === JSON.stringify(sort1)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nmodule.exports = {\n\tmonotonic,\n\tmonotonicAscending,\n\tmonotonicDescending\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "/*Return sorted unique common elements for two lists.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common = (l1, l2) => {\n\tvar ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 == e2)\n\t\t\t\tret.add(e1);\n\treturn Array.from(ret);\n}\n\n/* Return true if two lists are equal, false otherwise.\n\t>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n\t[1, 5, 653]\n\t>>> common([5, 3, 2, 8], [3, 2])\n\t[2, 3]\n\n\t*/\nconst common_equals = (l1, l2) => {\n\tif (l1.length!= l2.length)\n\t\treturn false;\n\tconst ret = new Set();\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 == e2)\n\t\t\t\tret.add(e1);\n\treturn ret.size == l1.length;\n}\n\nconst is_subset_of = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tif (!l2.includes(e1))\n\t\t\treturn false;\n\treturn true;\n}\n\nconst is_proper_subset_of = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tif (!l2.includes(e1))\n\t\t\treturn false;\n\treturn true;\n}\n\nconst is_disjoint_of = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 == e2)\n\t\t\t\treturn false;\n\treturn true;\n}\n\nconst is_disjoint_of_proper = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tfor (const e2 of l2)\n\t\t\tif (e1 == e2)\n\t\t\t\treturn false;\n\treturn true;\n}\n\nconst is_equal_to = (l1, l2) => {\n\treturn l1.length == l2.length && is_proper_subset_of(l1, l2);\n}\n\nconst is_proper_equal_to = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_subset = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tif (!l2.includes(e1))\n\t\t\treturn false;\n\treturn true;\n}\n\nconst is_proper_subset = (l1, l2) => {\n\tfor (const e1 of l1)\n\t\tif (!l2.includes(e1))\n\t\t\treturn false;\n\treturn true;\n}\n\nconst is_proper_super_set = (l1, l2) => {\n\treturn is_proper_subset(l1, l2) && is_proper_subset(l2, l1);\n}\n\nconst is_proper_super_set_of = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_disjoint = (l1, l2) => {\n\treturn is_disjoint_of(l1, l2) && is_disjoint_of(l2, l1);\n}\n\nconst is_disjoint_of_proper = (l1, l2) => {\n\treturn is_disjoint_of_proper(l1, l2) && is_disjoint_of_proper(l2, l1);\n}\n\nconst is_disjoint_of_proper_of_proper = (l1, l2) => {\n\treturn is_disjoint_of_proper(l1, l2) && is_disjoint_of_proper(l2, l1);\n}\n\nconst is_proper_subset_of_proper = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_proper_subset_of_proper_of_proper = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_subset_of_proper = (l1, l2) => {\n\treturn is_subset_of(l1, l2) && is_proper_subset(l1, l2);\n}\n\nconst is_subset_of_proper_of_proper = (l1, l2) => {\n\treturn is_subset_of(l1, l2) && is_proper_subset_of(l1, l2);\n}\n\nconst is_proper_super_set = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_proper_super_set_of = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_proper_super_set_of_proper = (l1, l2) => {\n\treturn is_proper_subset_of(l1, l2) && is_proper_subset_of(l2, l1);\n}\n\nconst is_"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\t>>> largestPrimeFactor(13195)\n\t29\n\t>>> largestPrimeFactor(2048)\n\t2\n\t*/\nconst largestPrimeFactor = (n) => {\n\tvar isPrime = function (k) {\n\t\tif (k < 2)\n\t\t\treturn false;\n\t\tfor (let i = 2; i < k - 1; i++)\n\t\t\tif (k % i == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t};\n\tvar divisors = [1, n];\n\twhile (divisors.length > 0) {\n\t\tlet candidate = divisors.pop();\n\t\tif (isPrime(candidate))\n\t\t\treturn candidate;\n\t\telse if (candidate < n)\n\t\t\tdivisors.push(candidate + 1);\n\t\telse\n\t\t\treturn n;\n\t}\n\treturn n;\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << p0;\n\tcout << \"]\" << endl;\n\tint answer;\n\tbool retVal;\n\tretVal = largestPrimeFactor(p0);\n\tif (hasAnswer) {\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << p1 << endl;\n\t}\n\tcout << \"Your answer:\" << endl;\n\tcout << \"\\t\" << retVal << endl;\n\tif (hasAnswer) {\n\t\tif (retVal == true) {\n\t\t\tcout << \"Match :-)\" << endl;\n\t\t} else {\n\t\t\tcout << \"No match :-( \" << endl;\n\t\t}\n\t}\n\tif (!hasAnswer) {\n\t\tcout << \"You're a stud (at least I know how to answer that)!\" << endl;\n\t}\n\treturn retVal;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tint p0;\n\tint p1;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 2;\n\tp1 = 2;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = 3;\n\tp1 = 3;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = 4;\n\tp1 = 7;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 3 -----\n\tdisabled = false;\n\tp0 = 7;\n\tp1 = 7;\n\tall_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 4 -----\n\tdisabled = false;\n\tp0 = 13195;\n\tp1 = 29;\n\tall_right = (disabled || KawigiEdit_RunTest(4, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (at least you know the abc)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"Alphabeta Alpha Beta Gamma...\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n\t>>> sumToN(30)\n\t465\n\t>>> sumToN(100)\n\t5050\n\t>>> sumToN(5)\n\t15\n\t>>> sumToN(10)\n\t55\n\t>>> sumToN(1)\n\t1\n\t*/\nconst sumToN = (n) => {\n\treturn n * (n + 1) / 2;\n};\n\nconsole.log(sumToN(1));\nconsole.log(sumToN(10));\nconsole.log(sumToN(15));\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(1000000));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "/* brackets is a string of \"(\" and \")\".\n\treturn true if every opening bracket has a corresponding closing bracket.\n\n\t>>> correctBracketing(\"(\")\n\tfalse\n\t>>> correctBracketing(\"()\")\n\ttrue\n\t>>> correctBracketing(\"(()())\")\n\ttrue\n\t>>> correctBracketing(\")(()\")\n\tfalse\n\t*/\nconst correctBracketing = (brackets) => {\n\tvar depth = 0;\n\tfor (const b of brackets) {\n\t\tif (b == \"(\")\n\t\t\tdepth += 1;\n\t\telse\n\t\t\tdepth -= 1;\n\t\tif (depth < 0)\n\t\t\treturn false;\n\t}\n\treturn depth == 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 + ....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/* xs represent coefficients of a polynomial.\n\txs[0] + xs[1] * x + xs[2] * x^2 +....\n\t Return derivative of this polynomial in the same form.\n\t>>> derivative([3, 1, 2, 4, 5])\n\t[1, 4, 12, 20]\n\t>>> derivative([1, 2, 3])\n\t[2, 6]\n\t*/\nconst derivative = (xs) => {\n\treturn xs.map((x, i) => x * i).slice(1);\n}\n\n// Given a list of n numbers, find the number of the largest one.\n// https://www.quora.com/What-is-the-difference-between-Max-and-Max-element-in-Java/answer/\n// const largest = (numbers) => {\n//   const max = numbers.reduce((max, number) => number > max? number : max);\n//   return max;\n// }\n\n// Given a list of n numbers, find the number of the smallest one.\n// https://www.quora.com/What-is-the-difference-between-Min-and-Min-element-in-Java/answer/\n// const smallest = (numbers) => {\n//   const min = numbers.reduce((min, number) => number < min? number : min);\n//   return min;\n// }\n\n// Given a list of n numbers, find the average of the list.\n// https://www.quora.com/What-is-the-difference-between-Average-and-Mean-in-Java/answer/\n// const average = (numbers) => {\n//   const sum = numbers.reduce((sum, number) => sum + number);\n//   return sum / numbers.length;\n// }\n\n// Given a list of n numbers, find the mean of the list.\n// https://www.quora.com/What-is-the-difference-between-Average-and-Mean-in-Java/answer/\n// const mean = (numbers) => {\n//   return (sum) => {\n//     const sum = numbers.reduce((sum, number) => sum + number);\n//     return sum / numbers.length;\n//   }\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squares-in-Java/answer/\n// const sum = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number);\n// }\n\n// Given a list of n numbers, find the sum of squares of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-of-squares-and-Sum-of-numbers-in-Java/answer/\n// const sumOfSquares = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number * number);\n// }\n\n// Given a list of n numbers, find the variance of the list.\n// https://www.quora.com/What-is-the-difference-between-Variance-and-Variance-of-numbers-in-Java/answer/\n// const variance = (numbers) => {\n//   const sumOfSquares = sumOfSquares(numbers);\n//   return sumOfSquares / numbers.length - sumOfSquares / numbers.length;\n// }\n\n// Given a list of n numbers, find the standard deviation of the list.\n// https://www.quora.com/What-is-the-difference-between-Standard-Deviation-and-Standard-Deviation-of-numbers-in-Java/answer/\n// const standardDeviation = (numbers) => {\n//   const variance = variance(numbers);\n//   return Math.sqrt(variance);\n// }\n\n// Given a list of n numbers, find the standard deviation of the list.\n// https://www.quora.com/What-is-the-difference-between-Standard-Deviation-and-Standard-Deviation-of-numbers-in-Java/answer/\n// const standardDeviation = (numbers) => {\n//   const variance = variance(numbers);\n//   return Math.sqrt(variance);\n// }\n\n// Given a list of n numbers, find the standard deviation of the list.\n// https://www.quora.com/What-is-the-difference-between-Standard-Deviation-and-Standard-Deviation-of-numbers-in-Java/answer/\n// const standardDeviation = (numbers) => {\n//   const variance = variance(numbers);\n//   return Math.sqrt(variance);\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squares-in-Java/answer/\n// const sum = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number);\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squares-in-Java/answer/\n// const sum = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number);\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squares-in-Java/answer/\n// const sum = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number);\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squares-in-Java/answer/\n// const sum = (numbers) => {\n//   return numbers.reduce((sum, number) => sum + number);\n// }\n\n// Given a list of n numbers, find the sum of the list.\n// https://www.quora.com/What-is-the-difference-between-Sum-and-Sum-of-squ"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\tfibfib(0) == 0\n\tfibfib(1) == 0\n\tfibfib(2) == 1\n\tfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\tPlease write a function to efficiently compute the n-th element of the fibfib number sequence.\n\t>>> fibfib(1)\n\t0\n\t>>> fibfib(5)\n\t4\n\t>>> fibfib(8)\n\t24\n\t*/\nconst fibfib = (n) => {\n\tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n == 2)\n\t\treturn 1;\n\treturn fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n// Fibonacci number\nconst fib = (n) => {\n\tlet a = 0, b = 1, c;\n\twhile (a < n) {\n\t\tc = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn c;\n}\n\n// Fibonacci number using memoization\nconst fibmemo = (n) => {\n\tconst fibo = [0, 1, 0];\n\tlet i = 0, j = 1;\n\twhile (i < n) {\n\t\tfibo[j] = fibo[i] + fibo[i + 1];\n\t\ti++;\n\t\tj++;\n\t}\n\treturn fibo[n - 1];\n}\n\n// Fibonacci number using recursion\nconst fibrec = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fibrec(n - 1) + fibrec(n - 2);\n}\n\n// Fibonacci number using dynamic programming\nconst fibdp = (n) => {\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\treturn fibdp(n - 1) + fibdp(n - 2);\n}\n\nconsole.log(fibfib(10));\nconsole.log(fib(10));\nconsole.log(fibmemo(10));\nconsole.log(fibrec(10));\nconsole.log(fibdp(10));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "/*Write a function vowelsCount which takes a string representing\n\ta word as input and returns the number of vowels in the string.\n\tVowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n\tvowel, but only when it is at the end of the given word.\n\n\tExample:\n\t>>> vowelsCount(\"abcde\")\n\t2\n\t>>> vowelsCount(\"ACEDY\")\n\t3\n\t*/\nconst vowelsCount = (s) => {\n\tvar vowels = \"aeiouAEIOU\";\n\tvar n_vowels = s.split('').reduce((prev, item) => {\n\t\treturn prev + (vowels.includes(item));\n\t}, 0);\n\treturn n_vowels % 2 === 1? n_vowels : n_vowels - 1;\n}\n\nconst test = require(\"tape\");\ntest(\"VowelsCount\", function (t) {\n\tt.equal(vowelsCount(\"\"), 0);\n\tt.equal(vowelsCount(\"a\"), 1);\n\tt.equal(vowelsCount(\"e\"), 1);\n\tt.equal(vowelsCount(\"i\"), 1);\n\tt.equal(vowelsCount(\"o\"), 1);\n\tt.equal(vowelsCount(\"u\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.equal(vowelsCount(\"a\"), 1);\n\tt.equal(vowelsCount(\"e\"), 1);\n\tt.equal(vowelsCount(\"i\"), 1);\n\tt.equal(vowelsCount(\"o\"), 1);\n\tt.equal(vowelsCount(\"u\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.equal(vowelsCount(\"A\"), 1);\n\tt.equal(vowelsCount(\"E\"), 1);\n\tt.equal(vowelsCount(\"I\"), 1);\n\tt.equal(vowelsCount(\"O\"), 1);\n\tt.equal(vowelsCount(\"U\"), 1);\n\tt.equal(vowelsCount(\"Y\"), 1);\n\tt.equal(vowelsCount(\"a\"), 1);\n\tt.equal(vowelsCount(\"e\"), 1);\n\tt.equal(vowelsCount(\"i\"), 1);\n\tt.equal(vowelsCount(\"o\"), 1);\n\tt.equal(vowelsCount(\"u\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.equal(vowelsCount(\"A\"), 1);\n\tt.equal(vowelsCount(\"E\"), 1);\n\tt.equal(vowelsCount(\"I\"), 1);\n\tt.equal(vowelsCount(\"O\"), 1);\n\tt.equal(vowelsCount(\"U\"), 1);\n\tt.equal(vowelsCount(\"Y\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.equal(vowelsCount(\"i\"), 1);\n\tt.equal(vowelsCount(\"e\"), 1);\n\tt.equal(vowelsCount(\"a\"), 1);\n\tt.equal(vowelsCount(\"o\"), 1);\n\tt.equal(vowelsCount(\"u\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.equal(vowelsCount(\"A\"), 1);\n\tt.equal(vowelsCount(\"E\"), 1);\n\tt.equal(vowelsCount(\"I\"), 1);\n\tt.equal(vowelsCount(\"O\"), 1);\n\tt.equal(vowelsCount(\"U\"), 1);\n\tt.equal(vowelsCount(\"Y\"), 1);\n\tt.equal(vowelsCount(\"y\"), 1);\n\tt.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n\tand return the result as a string.\n\tIf shift > number of digits, return digits reversed.\n\t>>> circularShift(12, 1)\n\t\"21\"\n\t>>> circularShift(12, 2)\n\t\"12\"\n\t*/\nconst circularShift = (x, shift) => {\n\ts = x.toString();\n\tif (shift > s.length)\n\t\treturn s.split('').reverse().join('');\n\treturn s.split('').reverse().join('');\n}\n\n/*Return the number of steps required to convert the number to its base.\n\t>>> baseConversion(2, 16)\n\t4\n\t>>> baseConversion(11, 2)\n\t11\n\t>>> baseConversion(12, 5)\n\t2\n\t>>> baseConversion(13, 7)\n\t3\n\t>>> baseConversion(16, 8)\n\t5\n\t>>> baseConversion(99, 8)\n\t9\n\t>>> baseConversion(12, 11)\n\t2\n\t>>> baseConversion(21, 16)\n\t4\n\t>>> baseConversion(1, 31)\n\t30\n\t>>> baseConversion(1, 2)\n\t1\n\t>>> baseConversion(1, 1)\n\t0\n\t>>> baseConversion(10, 1)\n\t0\n\t>>> baseConversion(0, 1)\n\t0\n\t>>> baseConversion(10, 10)\n\t1\n\t>>> baseConversion(2, 2)\n\t1\n\t>>> baseConversion(0, 2)\n\t0\n\t>>> baseConversion(10, 2)\n\t1\n\t>>> baseConversion(2, 3)\n\t2\n\t>>> baseConversion(2, 9)\n\t6\n\t>>> baseConversion(9, 2)\n\t6\n\t>>> baseConversion(9, 3)\n\t3\n\t>>> baseConversion(2, 0)\n\t2\n\t>>> baseConversion(9, 0)\n\t9\n\t>>> baseConversion(9, 1)\n\t9\n\t>>> baseConversion(9, -1)\n\t9\n\t>>> baseConversion(9, -2)\n\t0\n\t>>> baseConversion(0, -2)\n\t0\n\t>>> baseConversion(2, -1)\n\t1\n\t>>> baseConversion(2, -2)\n\t2\n\t>>> baseConversion(2, -3)\n\t2\n\t>>> baseConversion(1, -2)\n\t1\n\t>>> baseConversion(2, -10)\n\t20\n\t>>> baseConversion(10, -2)\n\t10\n\t>>> baseConversion(10, -3)\n\t9\n\t>>> baseConversion(10, -4)\n\t0\n\t>>> baseConversion(0, -4)\n\t0\n\t>>> baseConversion(10, -5)\n\t9\n\t>>> baseConversion(9, -5)\n\t9\n\t>>> baseConversion(1, -6)\n\t0\n\t>>> baseConversion(0, -6)\n\t0\n\t>>> baseConversion(2, -7)\n\t1\n\t>>> baseConversion(3, -8)\n\t0\n\t>>> baseConversion(2, -9)\n\t1\n\t>>> baseConversion(4, -10)\n\t0\n\t>>> baseConversion(3, -10)\n\t9\n\t>>> baseConversion(10, -10)\n\t1\n\t>>> baseConversion(11, -11)\n\t1\n\t>>> baseConversion(1, -11)\n\t0\n\t>>> baseConversion(20, -11)\n\t10\n\t>>> baseConversion(21, -12)\n\t9\n\t>>> baseConversion(2, -12)\n\t1\n\t>>> baseConversion(1, -13)\n\t1\n\t>>> baseConversion(2, -14)\n\t1\n\t>>> baseConversion(3, -15)\n\t2\n\t>>> baseConversion(4, -16)\n\t0\n\t>>> baseConversion(3, -17)\n\t1\n\t>>> baseConversion(0, -17)\n\t0\n\t>>> baseConversion(3, -18)\n\t1\n\t>>> baseConversion(4, -19)\n\t0\n\t>>> baseConversion(5, -20)\n\t1\n\t>>> baseConversion(4, -21)\n\t0\n\t>>> baseConversion(6, -22)\n\t1\n\t>>> baseConversion(5, -23)\n\t1\n\t>>> baseConversion(7, -24)\n\t2\n\t>>> baseConversion(6, -25)\n\t0\n\t>>> baseConversion(8, -26)\n\t1\n\t>>> baseConversion(7, -27)\n\t1\n\t>>> baseConversion(9, -28)\n\t2\n\t>>> baseConversion(8, -29)\n\t0\n\t>>> baseConversion(9, -30)\n\t1\n\t>>> baseConversion(1, -31)\n\t1\n\t>>> baseConversion(0, -31)\n\t0\n\t>>> baseConversion(0, -32)\n\t0\n\t>>> baseConversion(10, -32)\n\t1\n\t>>> baseConversion(1, -33)\n\t0\n\t>>> baseConversion(0, -33)\n\t0\n\t>>> baseConversion(1, -34)\n\t1\n\t>>> baseConversion(2, -35)\n\t1\n\t>>> baseConversion(1, -36)\n\t1\n\t>>> baseConversion(3, -37)\n\t2\n\t>>> baseConversion(2, -38)\n\t1\n\t>>> baseConversion(4, -39)\n\t0\n\t>>> baseConversion(3, -40)\n\t1\n\t>>> baseConversion(5, -41)\n\t1\n\t>>> baseConversion(4, -42)\n\t0\n\t>>> baseConversion(6, -43)\n\t1\n\t>>> baseConversion(5, -44)\n\t1\n\t>>> baseConversion(7, -45)\n\t2\n\t>>> baseConversion(6, -46)\n\t0\n\t>>> baseConversion(8, -47)\n\t1\n\t>>> baseConversion(7, -48)\n\t1\n\t>>> baseConversion(9, -49)\n\t2\n\t>>> baseConversion(8, -50)\n\t0\n\t>>> baseConversion(9, -51)"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n\tdigitSum(\"\") => 0\n\tdigitSum(\"abAB\") => 131\n\tdigitSum(\"abcCd\") => 67\n\tdigitSum(\"helloE\") => 69\n\tdigitSum(\"woArBld\") => 131\n\tdigitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + Math.max(ord_char - 65, 0)\n  }, 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "/*\n\tIn this task, you will be given a string that represents a number of apples and oranges\n\tthat are distributed in a basket of fruit this basket contains\n\tapples, oranges, and mango fruits. Given the string that represents the total number of\n\tthe oranges and apples and an integer that represent the total number of the fruits\n\tin the basket return the number of the mango fruits in the basket.\n\tfor examble:\n\tfruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n\tfruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n\tfruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n\tfruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n\t*/\nconst fruitDistribution = (s, n) => {\n\tvar lis = [];\n\tfor (const i of s.split(\" \"))\n\t\tif (!isNaN(i))\n\t\t\tlis.push(i);\n\tconst total = lis.reduce((a, b) => a + b);\n\tif (n < total)\n\t\treturn total - n;\n\treturn 0;\n}\n\nconst test = [\n\tfruitDistribution(\"5 apples and 6 oranges\", 19),\n\tfruitDistribution(\"0 apples and 1 oranges\", 3),\n\tfruitDistribution(\"2 apples and 3 oranges\", 100),\n\tfruitDistribution(\"100 apples and 1 oranges\", 120)\n];\n\nconsole.log(test);<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "/*\n\t\"Given an array representing a branch of a tree that has non-negative integer nodes\n\tyour task is to pluck one of the nodes and return it.\n\tThe plucked node should be the node with the smallest even value.\n\tIf multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n\tThe plucked node should be returned in a list, [ smalest_value, its index ],\n\tIf there are no even values or the given array is empty, return [].\n\n\tExample 1:\n\t\t\tInput: [4,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 2:\n\t\t\tInput: [1,2,3]\n\t\t\tOutput: [2, 1]\n\t\t\tExplanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\tExample 3:\n\t\t\tInput: []\n\t\t\tOutput: []\n\n\tExample 4:\n\t\t\tInput: [5, 0, 3, 0, 4, 2]\n\t\t\tOutput: [0, 1]\n\t\t\tExplanation: 0 is the smallest value, but  there are two zeros,\n\t\t\t\t\t\t\t\t\t so we will choose the first zero, which has the smallest index.\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= node.value\n\t*/\nconst pluck = (arr) => {\n\tif (arr.length == 0) return [];\n\tvar evens = arr.filter(x => x % 2 == 0);\n\tvar min = evens.length > 1? evens.reduce((x, y) => x < y? x : y) : evens[0];\n\treturn [min, evens.indexOf(min)];\n}\n\n/*\n\t\"Given an array of non-negative integers,\n\tyour task is to count the number of non-decreasing sequence of numbers.\n\tA sequence of numbers is increasing if a number is larger than its successor.\n\n\tExample:\n\t\t\tInput: [4,2,3,1]\n\t\t\tOutput: 3\n\n\tExample 2:\n\t\t\tInput: [10, 9, 2, 5, 3, 7]\n\t\t\tOutput: 4\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= nodes[i] < 10^5\n\t*/\nconst count = (arr) => {\n\tlet length = arr.length;\n\tlet result = 1;\n\tlet last = arr[0];\n\tfor (let i = 1; i < length; i++) {\n\t\tif (arr[i] > last) {\n\t\t\tresult += 1;\n\t\t\tlast = arr[i];\n\t\t}\n\t}\n\treturn result;\n}\n\n/*\n\t\"Given an array of non-negative integers,\n\tyou need to construct a tree which can represent the array.\n\tThe nodes of the tree should be sorted in ascending order.\n\n\tExample:\n\t\t\tInput: [4,2,3,1]\n\t\t\tOutput: [4,2,3,1]\n\n\tConstraints:\n\t\t\t* 1 <= nodes.length <= 10000\n\t\t\t* 0 <= nodes[i] < 10^5\n\t*/\nconst construct = (arr) => {\n\tlet length = arr.length;\n\tlet nodes = new Array(length + 1);\n\tlet i = 1;\n\tfor (let j = 0; j < length; j++) {\n\t\tnodes[j] = arr[j];\n\t}\n\tnodes[length] = null;\n\tlet cur = nodes[0];\n\tfor (let k = 1; k < length; k++) {\n\t\tif (cur < nodes[k]) {\n\t\t\tnodes[k - 1] = cur;\n\t\t\tcur = nodes[k];\n\t\t} else {\n\t\t\tcur = nodes[k - 1];\n\t\t}\n\t}\n\treturn nodes;\n}\n\nmodule.exports = {\n\tpluck,\n\tcount,\n\tconstruct\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n\tsearch([4, 1, 2, 2, 3, 1])) == 2\n\tsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n\tsearch([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (var i = 1; i < frq.length; ++i) {\n    if (frq[i] >= frq[i - 1]) {\n      if (ans === -1 || frq[i] > frq[ans])\n        ans = i;\n    }\n  }\n  return ans;\n}\n\nconst main = () => {\n  var lst = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5];\n  console.log(search(lst));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw ? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "/*\n\tGiven list of integers, return list in strange order.\n\tStrange sorting, is when you start with the minimum value,\n\tthen maximum of the remaining integers, then minimum and so on.\n\n\tExamples:\n\tstrangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n\tstrangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n\tstrangeSortList([]) == []\n\t*/\nconst strangeSortList = (lst) => {\n\tvar res = [], sw = true;\n\twhile (lst.length) {\n\t\tres.push(sw? Math.min(...lst) : Math.max(...lst));\n\t\tlst.splice(lst.indexOf(res.at(-1)), 1);\n\t\tsw =!sw;\n\t}\n\treturn res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "/*\n\tGiven the lengths of the three sides of a triangle. Return the area of\n\tthe triangle rounded to 2 decimal points if the three sides form a valid triangle.\n\tOtherwise return -1\n\tThree sides make a valid triangle when the sum of any two sides is greater\n\tthan the third side.\n\tExample:\n\ttriangleArea(3, 4, 5) == 6.00\n\ttriangleArea(1, 2, 10) == -1\n\t*/\nconst triangleArea = (a, b, c) => {\n\tif (a + b <= c || a + c <= b || b + c <= a)\n\t\treturn -1;\n\tvar s = (a + b + c) / 2;\n\treturn Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 2) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "/*\n\tWrite a function that returns true if the object q will fly, and false otherwise.\n\tThe object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n\tExample:\n\twillItFly([1, 2], 5) ➞ false\n\t# 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n\twillItFly([3, 2, 3], 1) ➞ false\n\t# it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n\twillItFly([3, 2, 3], 9) ➞ true\n\t# 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n\twillItFly([3], 5) ➞ true\n\t# 3 is less than the maximum possible weight, and it's balanced.\n\t*/\nconst willItFly = (q, w) => {\n\tif (q.reduce(((prev, item) => prev + item), 0) > w)\n\t\treturn false;\n\tvar i = 0, j = q.length - 1;\n\twhile (i < j) {\n\t\tif (q[i]!= q[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n};\n\nvar q = [3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3"}
{"task_id": "JavaScript/73", "prompt": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "/*\n\tGiven an array arr of integers, find the minimum number of elements that\n\tneed to be changed to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can change one element to any other element.\n\n\tFor example:\n\tsmallestChange([1,2,3,5,4,7,9,6]) == 4\n\tsmallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestChange([1, 2, 3, 2, 1]) == 0\n\t*/\nconst smallestChange = (arr) => {\n\tvar ans = 0;\n\tfor (let i = 0; i < Math.floor(arr.length / 2); i++)\n\t\tif (arr[i]!= arr.at(-i - 1))\n\t\t\tans++;\n\treturn ans;\n};\n\n/*\n\tGiven an array arr of integers, find the smallest number of times that you need\n\tto insert a new element into the array to make the array palindromic.\n\tIf there are multiple ways to do this, pick the one with the minimum number\n\tof operations. For example:\n\n\tsmallestInsert([1, 2, 3, 5, 4, 7, 9, 6]) == 0\n\tsmallestInsert([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestInsert([1, 2, 3, 2, 1]) == 1\n\tsmallestInsert([1, 2, 3, 2, 1, 2]) == 3\n*/\nconst smallestInsert = (arr) => {\n\tlet ans = 0;\n\tvar arrSize = arr.length;\n\tfor (var i = 1; i < arrSize; i++)\n\t\tif (arr[i]!= arr.at(arrSize - i - 1)) {\n\t\t\tarr.splice(arrSize - i - 1, 0, arr[i]);\n\t\t\tans++;\n\t\t}\n\treturn ans;\n};\n\n/*\n\tGiven an array arr of integers, find the smallest number of times that you need\n\tto delete an element from the array to make the array palindromic.\n\tIf there are multiple ways to do this, pick the one with the minimum number\n\tof operations. For example:\n\n\tsmallestDelete([1, 2, 3, 5, 4, 7, 9, 6]) == 1\n\tsmallestDelete([1, 2, 3, 4, 3, 2, 2]) == 1\n\tsmallestDelete([1, 2, 3, 2, 1]) == 1\n\tsmallestDelete([1, 2, 3, 2, 1, 2]) == 2\n*/\nconst smallestDelete = (arr) => {\n\tlet ans = 0;\n\tfor (let i = 0; i < arr.length; i++)\n\t\tif (arr[i]!= arr[arr.length - i - 1]) {\n\t\t\tarr.splice(arr.length - i - 1, 1);\n\t\t\tans++;\n\t\t}\n\treturn ans;\n};\n\n/*\n\tGiven an array arr of integers, find the smallest number of elements that\n\tneed to be removed from the array to make the array palindromic. A palindromic array is an array that\n\tis read the same backwards and forwards. In one change, you can remove any number of elements.\n\n\tFor example:\n\tsmallestPalindrome([1, 2, 3, 5, 4, 7, 9, 6]) == 1\n\tsmallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1, 2]) == 2\n\tsmallestPalindrome([1, 2, 3, 2, 1, 2, 3]) == 3\n*/\nconst smallestPalindrome = (arr) => {\n\tlet ans = 0;\n\tfor (let i = 0; i < arr.length; i++)\n\t\tif (arr[i]!= arr[arr.length - i - 1])\n\t\t\tans++;\n\treturn ans;\n};\n\n/*\n\tGiven an array arr of integers, find the smallest number of elements that\n\tneed to be removed from the array to make the array palindromic. If there are multiple ways to do this,\n\tpick the one with the minimum number of operations. For example:\n\n\tsmallestPalindrome([1, 2, 3, 5, 4, 7, 9, 6]) == 1\n\tsmallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1, 2]) == 2\n*/\nconst smallestPalindromeRecursive = (arr) => {\n\tif (arr.length == 1)\n\t\treturn 0;\n\tif (arr.at(0) == arr.at(arr.length - 1))\n\t\treturn 1;\n\treturn Math.min(smallestPalindromeRecursive(arr.slice(0, arr.length / 2)),\n\t\tsmallestPalindromeRecursive(arr.slice(arr.length / 2)));\n};\n\nconst smallestPalindromeIterative = (arr) => {\n\tlet ans = 0;\n\tlet l = arr.length;\n\tlet r = arr.length - 1;\n\twhile (l!= r) {\n\t\tif (arr[l]!= arr[r]) {\n\t\t\tans++;\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t\telse {\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t}\n\treturn ans;\n};\n\n/*\n\tGiven an array arr of integers, find the smallest number of elements that\n\tneed to be removed from the array to make the array palindromic. If there are multiple ways to do this,\n\tpick the one with the minimum number of operations. For example:\n\n\tsmallestPalindrome([1, 2, 3, 5, 4, 7, 9, 6]) == 1\n\tsmallestPalindrome([1, 2, 3, 4, 3, 2, 2]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1]) == 0\n\tsmallestPalindrome([1, 2, 3, 2, 1, 2]) == 2\n*/\nconst smallestPalindromeRecursive = (arr) => {\n\tif (arr.length == 1)\n\t\treturn 0;\n\tif (arr[0]!= arr[arr.length - 1])\n\t\treturn 1;\n\treturn Math.min(smallestPalindromeRec"}
{"task_id": "JavaScript/74", "prompt": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "/*\n\tWrite a function that accepts two lists of strings and returns the list that has\n\ttotal number of chars in the all strings of the list less than the other list.\n\n\tif the two lists have the same number of chars, return the first list.\n\n\tExamples\n\ttotalMatch([], []) ➞ []\n\ttotalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n\ttotalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n\ttotalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n\ttotalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n\t*/\nconst totalMatch = (lst1, lst2) => {\n\tvar l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n\tvar l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n\tif (l1 <= l2)\n\t\treturn lst1;\n\telse\n\t\treturn lst2;\n}\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*Write a function that returns true if the given number is the multiplication of two prime numbers\n\tand false otherwise.\n\tKnowing that (a) is less then 100.\n\tExample:\n\tisMultiplyPrime(30) == true\n\t30 = 2 * 3 * 5\n\t*/\nconst isMultiplyPrime2 = (a) => {\n\tvar isPrime = function (n) {\n\t\tfor (let j = 2; j < n; j++)\n\t\t\tif (n % j == 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\n\tfor (let i = 2; i < 101; i++) {\n\t\tif (!isPrime(i)) continue;\n\t\tfor (let j = 2; j < 101; j++) {\n\t\t\tif (!isPrime(j)) continue;\n\t\t\tif (i * j == a) return true;\n\t\t}\n\t}\n\treturn false;\n}\n\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime2(30));\n\n// isMultiplyPrime(20);\n// isMultiplyPrime2(20);\n\n// console.log(isMultiplyPrime(12));\n// console.log(isMultiplyPrime2(12));\n\n// console.log(isMultiplyPrime(15));\n// console.log(isMultiplyPrime2(15));\n\n// console.log(isMultiplyPrime(50));\n// console.log(isMultiplyPrime2(50));\n\n// console.log(isMultiplyPrime(60));\n// console.log(isMultiplyPrime2(60));\n\n// console.log(isMultiplyPrime(70));\n// console.log(isMultiplyPrime2(70));\n\n// console.log(isMultiplyPrime(90));\n// console.log(isMultiplyPrime2(90));\n\n// console.log(isMultiplyPrime(100));\n// console.log(isMultiplyPrime2(100));\n\n// console.log(isMultiplyPrime(120));\n// console.log(isMultiplyPrime2(120));\n\n// console.log(isMultiplyPrime(130));\n// console.log(isMultiplyPrime2(130));\n\n// console.log(isMultiplyPrime(150));\n// console.log(isMultiplyPrime2(150));\n\n// console.log(isMultiplyPrime(160));\n// console.log(isMultiplyPrime2(160));\n\n// console.log(isMultiplyPrime(170));\n// console.log(isMultiplyPrime2(170));\n\n// console.log(isMultiplyPrime(180));\n// console.log(isMultiplyPrime2(180));\n\n// console.log(isMultiplyPrime(190));\n// console.log(isMultiplyPrime2(190));\n\n// console.log(isMultiplyPrime(200));\n// console.log(isMultiplyPrime2(200));\n\n// console.log(isMultiplyPrime(210));\n// console.log(isMultiplyPrime2(210));\n\n// console.log(isMultiplyPrime(220));\n// console.log(isMultiplyPrime2(220));\n\n// console.log(isMultiplyPrime(230));\n// console.log(isMultiplyPrime2(230));\n\n// console.log(isMultiplyPrime(240));\n// console.log(isMultiplyPrime2(240));\n\n// console.log(isMultiplyPrime(250));\n// console.log(isMultiplyPrime2(250));\n\n// console.log(isMultiplyPrime(260));\n// console.log(isMultiplyPrime2(260));\n\n// console.log(isMultiplyPrime(270));\n// console.log(isMultiplyPrime2(270));\n\n// console.log(isMultiplyPrime(280));\n// console.log(isMultiplyPrime2(280));\n\n// console.log(isMultiplyPrime(290));\n// console.log(isMultiplyPrime2(290));\n\n// console.log(isMultiplyPrime(300));\n// console.log(isMultiplyPrime2(300));\n\n// console.log(isMultiplyPrime(310));\n// console.log(isMultiplyPrime2(310));\n\n// console.log(isMultiplyPrime(320));\n// console.log(isMultiplyPrime2(320));\n\n// console.log(isMultiplyPrime(330));\n// console.log(isMultiplyPrime2(330));\n\n// console.log(isMultiplyPrime(340));\n// console.log(isMultiplyPrime2(340));\n\n// console.log(isMultiplyPrime(350));\n// console.log(isMultiplyPrime2(350));\n\n// console.log(isMultiplyPrime(360));\n// console.log(isMultiplyPrime2(360));\n\n// console.log(isMultiplyPrime(370));\n// console.log(isMultiplyPrime2(370));\n\n// console.log(isMultiplyPrime(380));\n// console.log(isMultiplyPrime2(380));\n\n// console.log(isMultiplyPrime(390));\n// console.log(isMultiplyPrime2(390));\n\n// console.log(isMultiplyPrime(400));\n// console.log(isMultiplyPrime2(400));\n\n// console.log(isMultiplyPrime(410));\n// console."}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n\tpower of n and false in other cases.\n\tx is a simple power of n if n**int=x\n\tFor example:\n\tisSimplePower(1, 4) => true\n\tisSimplePower(2, 2) => true\n\tisSimplePower(8, 2) => true\n\tisSimplePower(3, 2) => false\n\tisSimplePower(3, 1) => false\n\tisSimplePower(5, 3) => false\n\t*/\nconst isSimplePower = (x, n) => {\n\tif (n == 1)\n\t\treturn (x == 1);\n\tvar power = 1;\n\twhile (power < n) {\n\t\tif (power * x!= x)\n\t\t\treturn false;\n\t\tpower *= n;\n\t}\n\treturn true;\n}\n\n// const isSimplePower = (x, n) => n**x === x;\n\n/*\n\tYour task is to implement a function that checks if a number is a perfect number.\n\tPerfect number is a number that is divisible by every other number from 1 to its own value.\n\tFor example:\n\tisPerfect(1) => true\n\tisPerfect(2) => true\n\tisPerfect(3) => false\n\tisPerfect(4) => true\n\tisPerfect(5) => false\n\tisPerfect(6) => false\n\tisPerfect(8) => true\n\tisPerfect(16) => true\n\tisPerfect(17) => false\n\t*/\nconst isPerfect = (n) => {\n\tvar sum = 0;\n\tfor (var i = 1; i <= n; i++) {\n\t\tif (n % i == 0)\n\t\t\tsum += i;\n\t}\n\treturn sum == n;\n}\n\n// const isPerfect = (n) => n == 1 || n == 2 || n % 2 == 0;\n\n/*\n\tYour task is to implement a function that checks if a number is an abundant number.\n\tAn abundant number is a number that is not divisible by any number from 1 to its own value.\n\tFor example:\n\tisAbundant(1) => true\n\tisAbundant(2) => false\n\tisAbundant(3) => false\n\tisAbundant(4) => true\n\tisAbundant(5) => true\n\tisAbundant(6) => true\n\tisAbundant(7) => true\n\tisAbundant(8) => false\n\tisAbundant(16) => false\n\tisAbundant(17) => true\n\t*/\nconst isAbundant = (n) => {\n\tvar sum = 1;\n\twhile (sum <= n) {\n\t\tif (n % sum == 0)\n\t\t\treturn false;\n\t\tsum += 1;\n\t}\n\treturn true;\n}\n\n// const isAbundant = (n) => n > 1 && n % 2!= 0;\n\n/*\n\tYour task is to write a function that checks if a number is a perfect square.\n\tA perfect square is a number that is a perfect multiple of another number.\n\tFor example:\n\tisPerfectSquare(1) => false\n\tisPerfectSquare(4) => true\n\tisPerfectSquare(8) => true\n\tisPerfectSquare(15) => false\n\tisPerfectSquare(16) => false\n\tisPerfectSquare(17) => true\n\t*/\nconst isPerfectSquare = (n) => {\n\treturn Math.sqrt(n) == Math.floor(Math.sqrt(n));\n}\n\n// const isPerfectSquare = (n) => n == 1 || n == 4 || n == 8 || n == 15 || n == 16 || n == 17;\n\n/*\n\tYour task is to implement a function that checks if a number is a power of two.\n\tA power of two is a number that is a power of two, i.e. 2**2=4\n\tFor example:\n\tisPowerOfTwo(1) => false\n\tisPowerOfTwo(2) => true\n\tisPowerOfTwo(3) => false\n\tisPowerOfTwo(4) => true\n\tisPowerOfTwo(8) => false\n\tisPowerOfTwo(16) => false\n\tisPowerOfTwo(17) => false\n\t*/\nconst isPowerOfTwo = (n) => {\n\treturn n > 0 && n == Math.floor(n) && n == Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n}\n\n// const isPowerOfTwo = (n) => n > 0 && n == Math.floor(n) && n == Math.pow(2, Math.ceil(Math.log(n) / Math.log(2)));\n\n/*\n\tYour task is to implement a function that checks if a number is a prime number.\n\tA prime number is a number that is prime, i.e. is not divisible by any number except itself and 1.\n\tFor example:\n\tisPrime(1) => false\n\tisPrime(2) => true\n\tisPrime(3) => true\n\tisPrime(4) => false\n\tisPrime(5) => true\n\tisPrime(6) => true\n\tisPrime(7) => false\n\tisPrime(8) => true\n\tisPrime(16) => true\n\t*/\nconst isPrime = (n) => {\n\tfor (var i = 2; i <= n / 2; i++) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\n\n// const isPrime = (n) => n > 1 && n % 2 == 0;\n\n/*\n\tYour task is to write a function that checks if a number is an Armstrong number.\n\tAn Armstrong number is a number that is greater than all its powers except 1.\n\tFor example:\n\tisArmstrong(1) => false\n\tisArmstrong(2) => true\n\tisArmstrong(4) => true\n\tisArmstrong(8) => true\n\tisArmstrong(16) => true\n\tisArmstrong(17) => false\n\tisArmstrong(32) => false\n\t*/\nconst isArmstrong = (n) => {\n\tvar sum = 1;\n\twhile (sum <= n) {\n\t\tsum *= n;\n\t}\n\treturn sum == n;\n}\n\n// const isArmstrong = (n) => n > 1 && n % 2!= 0;\n\n// const isPrime = (n) => n > 1 && n % 2!= 0;\n\n/*\n\tYour task is"}
{"task_id": "JavaScript/77", "prompt": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "/*\n\tWrite a function that takes an integer a and returns true\n\tif this ingeger is a cube of some integer number.\n\tNote: you may assume the input is always valid.\n\tExamples:\n\tiscube(1) ==> true\n\tiscube(2) ==> false\n\tiscube(-1) ==> true\n\tiscube(64) ==> true\n\tiscube(0) ==> true\n\tiscube(180) ==> false\n\t*/\nconst iscube = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\n// \twrite a function that takes an integer a and returns true\n//\tif this ingeger is not a cube of some integer number.\n//\tNote: you may assume the input is always valid.\n//\tExamples:\n//\tiscube(1) ==> false\n//\tiscube(2) ==> false\n//\tiscube(-1) ==> true\n//\tiscube(64) ==> true\n//\tiscube(0) ==> false\n//\tiscube(180) ==> true\nconst isnotcube = (a) => {\n\ta = Math.abs(a);\n\treturn (a!== a * a * a);\n};\n\nconst isnotcube2 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube3 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a * a * a);\n};\n\nconst isnotcube4 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube5 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a * a);\n};\n\nconst isnotcube6 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a);\n};\n\nconst isnotcube7 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a);\n};\n\nconst isnotcube8 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube9 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a * a);\n};\n\nconst isnotcube10 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube11 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube12 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a);\n};\n\nconst isnotcube13 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube14 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube15 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a);\n};\n\nconst isnotcube16 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a);\n};\n\nconst isnotcube17 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a);\n};\n\nconst isnotcube18 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a === a);\n};\n\nconst isnotcube19 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a);\n};\n\nconst isnotcube20 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a);\n};\n\nconst isnotcube21 = (a) => {\n\ta = Math.abs(a);\n\treturn (a * a * a * a === a);\n};\n\nconst isnotcube22 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a);\n};\n\nconst isnotcube23 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a);\n};\n\nconst isnotcube24 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a);\n};\n\nconst isnotcube25 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a);\n};\n\nconst isnotcube26 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube27 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube28 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube29 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube30 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube31 = (a) => {\n\ta = Math.abs(a);\n\treturn (a === a * a * a * a * a * a * a * a * a * a * a * a * a);\n};\n\nconst isnotcube32 = (a)"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "/*You have been tasked to write a function that receives\n\ta hexadecimal number as a string and counts the number of hexadecimal\n\tdigits that are primes (prime number=== or a prime=== is a natural number\n\tgreater than 1 that is not a product of two smaller natural numbers).\n\tHexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n\tPrime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n\tSo you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n\tB (=decimal 11)=== D (=decimal 13).\n\tNote: you may assume the input is always correct or empty string===\n\tand symbols A===B===C===D===E===F are always uppercase.\n\tExamples:\n\tFor num = \"AB\" the output should be 1.\n\tFor num = \"1077E\" the output should be 2.\n\tFor num = \"ABED1A33\" the output should be 4.\n\tFor num = \"123456789ABCDEF0\" the output should be 6.\n\tFor num = \"2020\" the output should be 2.\n\t*/\nconst hexKey = (num) => {\n\tvar primes = \"2357BD\",\n\t\t\ttotal = 0;\n\tfor (let i = 0; i < num.length; i++)\n\t\tfor (let j = 0; j < primes.length; j++)\n\t\t\tif (num[i] === primes[j])\n\t\t\t\ttotal++;\n\treturn total;\n}\n\nconsole.log(hexKey(\"AB\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n\tbinary format. The function should return a string, with each character representing a binary\n\tnumber. Each character in the string will be '0' or '1'.\n\n\tThere will be an extra couple of characters 'db' at the beginning and at the end of the string.\n\tThe extra characters are there to help with the format.\n\n\tExamples:\n\tdecimalToBinary(15)   # returns \"db1111db\"\n\tdecimalToBinary(32)   # returns \"db100000db\"\n\t*/\nconst decimalToBinary = (decimal) => {\n\treturn \"db\" + decimal.toString(2) + \"db\";\n}\n\n/*\n\tGiven a binary string, this function will convert it to decimal format.\n\n\tExamples:\n\tbinaryToDecimal(\"db1010db\")  # returns 15\n\tbinaryToDecimal(\"db10100db\")  # returns 32\n\t*/\nconst binaryToDecimal = (binary) => {\n\treturn parseInt(binary.slice(1, -1), 2);\n}\n\n/*\n\tGiven a binary string, this function will return a string with each character in the string\n\trepresented by a binary number.\n\n\tExamples:\n\tbinaryToBinary(\"db1010db\")  # returns \"110010001\"\n\tbinaryToBinary(\"db10100db\")  # returns \"110010000\"\n\t*/\nconst binaryToBinary = (binary) => {\n\treturn binary.replace(/db/g, \"\").split('').map(x => parseInt(x, 2));\n}\n\nconst main = () => {\n\tlet a = decimalToBinary(15);\n\tlet b = binaryToDecimal(a);\n\tlet c = binaryToBinary(a);\n\tconsole.log(a);\n\tconsole.log(b);\n\tconsole.log(c);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "/*You are given a string s.\n\tYour task is to check if the string is happy or not.\n\tA string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n\tFor example:\n\tisHappy(a) => false\n\tisHappy(aa) => false\n\tisHappy(abcd) => true\n\tisHappy(aabb) => false\n\tisHappy(adb) => true\n\tisHappy(xyy) => false\n\t*/\nconst isHappy = (s) => {\n\tif (s.length < 3)\n\t\treturn false;\n\tfor (let i = 0; i < s.length - 2; i++)\n\t\tif (s[i] === s[i + 1] && s[i] === s[i + 2])\n\t\t\treturn false;\n\treturn true;\n}\n\nconsole.log(isHappy('adb')); //true\nconsole.log(isHappy('aa')); //false\nconsole.log(isHappy('xyy')); //false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n\t\t\tletter_grade.push('C+')\n\t\t} else if (gpa > 1.7) {\n\t\t\tletter_grade.push('C')\n\t\t} else if (gpa > 1.3) {\n\t\t\tletter_grade.push('C-')\n\t\t} else if (gpa > 1.0) {\n\t\t\tletter_grade.push('D+')\n\t\t} else if (gpa > 0.7) {\n\t\t\tletter_grade.push('D')\n\t\t} else if (gpa > 0.0) {\n\t\t\tletter_grade.push('D-')\n\t\t} else {\n\t\t\tletter_grade.push('E')\n\t\t}\n\t}\n\treturn letter_grade\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n\n/*\n\tIt is the last week of the semester and the teacher has to give the grades\n\tto students. The teacher has been making her own algorithm for grading.\n\tThe only problem is, she has lost the code she used for grading.\n\tShe has given you a list of GPAs for some students and you have to write\n\ta function that can output a list of letter grades using the following table:\n\t\t\t\t\t GPA       |    Letter grade\n\t\t\t\t\t\t4.0                A+\n\t\t\t\t\t> 3.7                A\n\t\t\t\t\t> 3.3                A-\n\t\t\t\t\t> 3.0                B+\n\t\t\t\t\t> 2.7                B\n\t\t\t\t\t> 2.3                B-\n\t\t\t\t\t> 2.0                C+\n\t\t\t\t\t> 1.7                C\n\t\t\t\t\t> 1.3                C-\n\t\t\t\t\t> 1.0                D+\n\t\t\t\t\t> 0.7                D\n\t\t\t\t\t> 0.0                D-\n\t\t\t\t\t\t0.0                E\n\n\tExample:\n\tnumericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n\t*/\nconst numericalLetterGrade2 = (grades) => {\n\tlet letter_grade = []\n\tfor (let i = 0, len = grades.length; i < len; i++) {\n\t\tlet gpa = grades[i]\n\t\tif (gpa == 4.0) {\n\t\t\tletter_grade.push('A+')\n\t\t} else if (gpa > 3.7) {\n\t\t\tletter_grade.push('A')\n\t\t} else if (gpa > 3.3) {\n\t\t\tletter_grade.push('A-')\n\t\t} else if (gpa > 3.0) {\n\t\t\tletter_grade.push('B+')\n\t\t} else if (gpa > 2.7) {\n\t\t\tletter_grade.push('B')\n\t\t} else if (gpa > 2.3) {\n\t\t\tletter_grade.push('B-')\n\t\t} else if (gpa > 2.0) {\n\t\t\tletter_grade.push('C+')\n\t\t} else if (gpa > 1.7) {\n\t\t\tletter_grade.push('C')\n\t\t} else if (gpa > 1.3) {\n\t\t\tletter_grade.push('C-')\n\t\t} else if (gpa > 1.0) {\n\t\t\tletter_grade.push('D+')\n\t\t} else if (gpa > 0.7) {\n\t\t\tletter_grade.push('D')\n\t\t} else if (gpa > 0.0) {\n\t\t\tletter_grade.push('D-')\n\t\t} else {\n\t\t\tletter_grade.push('E')\n\t\t}\n\t}\n\treturn letter_grade\n}\n\nconsole.log(numericalLetterGrade2([4.0, 3, 1.7, 2, 3.5]))<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "/*Write a function that takes a string and returns true if the string\n\tlength is a prime number or false otherwise\n\tExamples\n\tprimeLength('Hello') == true\n\tprimeLength('abcdcba') == true\n\tprimeLength('kittens') == true\n\tprimeLength('orange') == false\n\t*/\nconst primeLength = (string) => {\n\tlet len = string.length\n\tif (len == 1 || len == 0) { return false }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (string.charAt(i - 1) == string.charAt(len - i)) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nconst stringConversion = (string) => {\n\tlet array = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tarray.push(string.charAt(i))\n\t}\n\treturn array\n}\n\nconst stringToList = (string) => {\n\tlet list = []\n\tlet i = 0\n\twhile (i < string.length) {\n\t\tlist.push(string[i++])\n\t}\n\treturn list\n}\n\nconst stringToChar = (string) => {\n\tlet list = []\n\tlet i = 0\n\twhile (i < string.length) {\n\t\tlist.push(string[i++])\n\t}\n\treturn list\n}\n\nconst charToString = (list) => {\n\tlet string = ''\n\tfor (let i = 0; i < list.length; i++) {\n\t\tstring += list[i]\n\t}\n\treturn string\n}\n\nconst arrayToString = (array) => {\n\tlet string = ''\n\tfor (let i = 0; i < array.length; i++) {\n\t\tstring += array[i]\n\t}\n\treturn string\n}\n\nconst arrayToChar = (array) => {\n\tlet string = ''\n\tfor (let i = 0; i < array.length; i++) {\n\t\tstring += array[i]\n\t}\n\treturn string\n}\n\nconst charToArray = (string) => {\n\tlet array = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tarray.push(string[i])\n\t}\n\treturn array\n}\n\nconst arrayToArray = (array) => {\n\tlet array2 = []\n\tfor (let i = 0; i < array.length; i++) {\n\t\tarray2.push(array[i])\n\t}\n\treturn array2\n}\n\nconst toArray = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst charToArray2 = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst listToChar = (list) => {\n\tlet string = ''\n\tfor (let i = 0; i < list.length; i++) {\n\t\tstring += list[i]\n\t}\n\treturn string\n}\n\nconst listToArray = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst arrayToList = (array) => {\n\tlet list = []\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlist.push(array[i])\n\t}\n\treturn list\n}\n\nconst listToList = (list) => {\n\tlet list2 = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tlist2.push(list[i])\n\t}\n\treturn list2\n}\n\nconst listToArray = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst arrayToList = (array) => {\n\tlet list = []\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlist.push(array[i])\n\t}\n\treturn list\n}\n\nconst charToList = (string) => {\n\tlet list = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlist.push(string[i])\n\t}\n\treturn list\n}\n\nconst listToChar = (list) => {\n\tlet string = ''\n\tfor (let i = 0; i < list.length; i++) {\n\t\tstring += list[i]\n\t}\n\treturn string\n}\n\nconst listToArray = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst arrayToList = (array) => {\n\tlet list = []\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlist.push(array[i])\n\t}\n\treturn list\n}\n\nconst charToList = (string) => {\n\tlet list = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tlist.push(string[i])\n\t}\n\treturn list\n}\n\nconst listToString = (list) => {\n\tlet string = ''\n\tfor (let i = 0; i < list.length; i++) {\n\t\tstring += list[i]\n\t}\n\treturn string\n}\n\nconst listToChar = (list) => {\n\tlet string = ''\n\tfor (let i = 0; i < list.length; i++) {\n\t\tstring += list[i]\n\t}\n\treturn string\n}\n\nconst listToArray = (list) => {\n\tlet array = []\n\tfor (let i = 0; i < list.length; i++) {\n\t\tarray.push(list[i])\n\t}\n\treturn array\n}\n\nconst arrayToList = (array) => {\n\tlet list = []\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlist.push(array[i])\n\t}\n\treturn list\n}\n\nconst array"}
{"task_id": "JavaScript/83", "prompt": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return the count of the numbers of n-digit\n\tpositive integers that start or end with 1.\n\t*/\nconst startsOneEnds = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += startsOneEnds(i)\n\t}\n\treturn t\n}\n\nconst endsOneStarts = (n) => {\n\tif (n == 1) { return 1 }\n\tlet t = 18\n\tfor (let i = 2; i < n; i++) {\n\t\tt += endsOneStarts(i)\n\t}\n\treturn t\n}\n\nconsole.log(startsOneEnds(9))\nconsole.log(endsOneStarts(9))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n\tExample\n\t\t\tFor N = 1000, the sum of digits will be 1 the output should be \"1\".\n\t\t\tFor N = 150, the sum of digits will be 6 the output should be \"110\".\n\t\t\tFor N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n\tVariables:\n\t\t\t@N integer\n\t\t\t\t\t Constraints: 0 ≤ N ≤ 10000.\n\tOutput:\n\t\t\t a string of binary number\n\t*/\nconst solve = (N) => {\n\tlet t = 0\n\twhile (N > 0) {\n\t\tt += N % 10\n\t\tN = N / 10\n\t}\n\treturn t\n}\n\nexport { solve }\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n\tExamples:\n\t\t\tadd([4, 2, 6, 7]) ==> 2 \n\t*/\nconst add = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a list of integers lst. return the sum of the even elements at odd indices\n\tlst = [4, 2, 6, 7]\n\t*/\nconst sum = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a non-empty list of integers lst. return the sum of the odd elements\n\tlst = [4, 2, 6, 7]\n\t*/\nconst sum1 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a non-empty list of integers lst. return the sum of the even elements\n\tlst = [4, 2, 6, 7]\n\t*/\nconst sum2 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a non-empty list of integers lst. return the sum of the odd elements\n\tlst = [4, 2, 6, 7]\n\t*/\nconst sum3 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum4 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum5 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum6 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum7 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum8 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum9 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum10 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum11 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum12 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum13 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum14 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum15 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 0) {\n\t\t\tt += lst[i]\n\t\t}\n\t}\n\treturn t\n}\n\nconst sum16 = (lst) => {\n\tlet t = 0\n\tfor (let i = 1; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tt += lst[i"}
{"task_id": "JavaScript/86", "prompt": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a string and returns an ordered version of it.\n\tOrdered version of string, is a string where all words (separated by space)\n\tare replaced by a new word where all the characters arranged in\n\tascending order based on ascii value.\n\tNote: You should keep the order of words and blank spaces in the sentence.\n\n\tFor example:\n\tantiShuffle('Hi') returns 'Hi'\n\tantiShuffle('hello') returns 'ehllo'\n\tantiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n\t*/\nconst antiShuffle = (s) => {\n\tlet arr = s.split(/\\s/)\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.join(' ')\n}\n\nconst antiShuffle2 = (s) => {\n\tlet arr = s.split('')\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tfor (let j = 0; j < arr[i].length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < arr[i].length; k++) {\n\t\t\t\tif (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\tarr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.join('')\n}\n\nconst antiShuffle3 = (s) => {\n\tlet arr = s.split('')\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet tmp = arr[i]\n\t\tlet tmp2 = ''\n\t\tfor (let j = 0; j < tmp.length; j++) {\n\t\t\tlet ind = j\n\t\t\tfor (let k = j + 1; k < tmp.length; k++) {\n\t\t\t\tif (tmp[k].charCodeAt() < tmp[ind].charCodeAt()) {\n\t\t\t\t\tind = k\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ind > j) {\n\t\t\t\ttmp2 += tmp[j]\n\t\t\t\ttmp[j] = tmp[ind]\n\t\t\t\ttmp[ind] = tmp2\n\t\t\t\ttmp2 = ''\n\t\t\t}\n\t\t}\n\t\tif (tmp2.length) {\n\t\t\ttmp[tmp.length] = tmp2\n\t\t}\n\t}\n\treturn arr.join('')\n}\n\nconst antiShuffle4 = (s) => {\n\tlet arr = s.split('')\n\tlet temp = ''\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet j = arr.length - 1\n\t\twhile (j > i) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\ttemp += arr[i]\n\t\t\t\tarr[i] = arr[j]\n\t\t\t\tarr[j] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj--\n\t\t\t} else if (arr[i] < arr[j]) {\n\t\t\t\ttemp += arr[j]\n\t\t\t\tarr[j] = arr[i]\n\t\t\t\tarr[i] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj--\n\t\t\t}\n\t\t\tj--\n\t\t}\n\t}\n\treturn arr.join('')\n}\n\nconst antiShuffle5 = (s) => {\n\tlet arr = s.split('')\n\tlet temp = ''\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet j = i\n\t\twhile (j < arr.length - 1) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\ttemp += arr[i]\n\t\t\t\tarr[i] = arr[j]\n\t\t\t\tarr[j] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj++\n\t\t\t} else if (arr[i] < arr[j]) {\n\t\t\t\ttemp += arr[j]\n\t\t\t\tarr[j] = arr[i]\n\t\t\t\tarr[i] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj++\n\t\t\t}\n\t\t\tj++\n\t\t}\n\t}\n\treturn arr.join('')\n}\n\nconst antiShuffle6 = (s) => {\n\tlet arr = s.split('')\n\tlet temp = ''\n\tlet temp2 = ''\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet j = i\n\t\twhile (j < arr.length - 1) {\n\t\t\tif (arr[i] > arr[j]) {\n\t\t\t\ttemp += arr[i]\n\t\t\t\tarr[i] = arr[j]\n\t\t\t\tarr[j] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj++\n\t\t\t} else if (arr[i] < arr[j]) {\n\t\t\t\ttemp += arr[j]\n\t\t\t\tarr[j] = arr[i]\n\t\t\t\tarr[i] = temp\n\t\t\t\ttemp = ''\n\t\t\t\tj++\n\t\t\t}\n\t\t\tj++\n\t\t}\n\t\tif (temp2.length) {\n\t\t\ttemp2 += arr[j]\n\t\t\tarr[j] = temp2\n\t\t}\n\t}\n\tif (temp.length) {\n\t\ttemp2 = temp\n\t\ttemp = ''\n\t}\n\tif (temp2.length) {\n\t\tarr[arr.length - 1] = temp2\n\t}\n\treturn arr.join('')\n}\n\nconst antiShuffle7 = (s) => {\n\tlet arr = s.split('')\n\tlet temp = ''\n\tlet temp2 = ''\n\tlet arr2 = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet j = i\n\t\twhile (j < arr.length - 1"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n\t[1,2,3,4,5,6],\n\t[1,2,3,4,1,6],\n\t[1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  })\n}\n\nconst getRow2 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow3 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow4 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow5 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow6 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow7 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt.push((i, j))\n\t  }\n\t}\n  }\n  return t.sort((a, b) => {\n\tif (a[0] > b[0]) return -1\n\tif (a[0] < b[0]) return 1\n\treturn a[1] - b[1]\n  }).reverse()\n}\n\nconst getRow8 = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n\tfor (let j = lst[i].length - 1; j >= 0; j--) {\n\t  if (lst[i][j] == x) {\n\t\tt"}
{"task_id": "JavaScript/88", "prompt": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "/*\n\tGiven an array of non-negative integers, return a copy of the given array after sorting,\n\tyou will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n\tor sort it in descending order if the sum( first index value, last index value) is even.\n\n\tNote:\n\t* don't change the given array.\n\n\tExamples:\n\t* sortArray([]) => []\n\t* sortArray([5]) => [5]\n\t* sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n\t* sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\t*/\nconst sortArray = (array) => {\n\tlet arr = array\n\tlet tot = arr[0] + arr[arr.length-1]\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind!= j) {\n\t\t\t[arr[ind], arr[j]] = [arr[j], arr[ind]]\n\t\t}\n\t}\n\treturn arr\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*Create a function encrypt that takes a string as an argument and\n\treturns a string encrypted with the alphabet being rotated. \n\tThe alphabet should be rotated in a manner such that the letters \n\tshift down by two multiplied to two places.\n\tFor example:\n\tencrypt('hi') returns 'lm'\n\tencrypt('asdfghjkl') returns 'ewhjklnop'\n\tencrypt('gf') returns 'kj'\n\tencrypt('et') returns 'ix'\n\t*/\nconst encrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n\t\tp -= 2\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\nconst decrypt = (s) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet p = s[i].charCodeAt() + 4\n\t\tif (p > 122) { p -= 26 }\n\t\tp += 2\n\t\tt += String.fromCharCode(p)\n\t}\n\treturn t\n}\n\nmodule.exports = {\n\tencrypt,\n\tdecrypt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "/*\n\tYou are given a list of integers.\n\tWrite a function nextSmallest() that returns the 2nd smallest element of the list.\n\tReturn null if there is no such element.\n  \n\tnextSmallest([1, 2, 3, 4, 5]) == 2\n\tnextSmallest([5, 1, 4, 3, 2]) == 2\n\tnextSmallest([]) == null\n\tnextSmallest([1, 1]) == null\n\t*/\nconst nextSmallest = (lst) => {\n\tlet arr = lst\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < arr.length; k++) {\n\t\t\tif (arr[k] < arr[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tlet tmp = arr[j]\n\t\tarr[j] = arr[ind]\n\t\tarr[ind] = tmp\n\t}\n\t\n\tfor (let j = 0; j < arr.length; j++) {\n\t\tif (arr[j] < 2) {\n\t\t\treturn arr[j]\n\t\t}\n\t}\n\treturn null\n}\n\nconst nextSmallest2 = (lst) => {\n\tlet i = 0\n\tlet j = lst.length - 1\n\t\n\twhile (i < j) {\n\t\tlet t = lst[i]\n\t\tlst[i] = lst[j]\n\t\tlst[j] = t\n\t\ti++\n\t\tj--\n\t}\n\treturn lst[0]\n}\n\nconst nextSmallest3 = (lst) => {\n\tlet i = 0\n\tlet j = lst.length - 1\n\t\n\twhile (i < j) {\n\t\tlet t = lst[i]\n\t\tlst[i] = lst[j]\n\t\tlst[j] = t\n\t\ti++\n\t\tj--\n\t}\n\treturn lst[lst.length - 1]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4, 3, 2]));\nconsole.log(nextSmallest([]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] == ' ') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "/*\n\tYou'll be given a string of words, and your task is to count the number\n\tof boredoms. A boredom is a sentence that starts with the word \"I\".\n\tSentences are delimited by '.', '?' or '!'.\n \n\tFor example:\n\t>>> isBored(\"Hello world\")\n\t0\n\t>>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n\t1\n\t*/\nconst isBored = (S) => {\n\tlet t = 0\n\tif (S[0] == 'I' && S[1] =='') { t = 1 }\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n\t\t\tif (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of unique words. A word is\n\ta string that is either a single word or consists of multiple words.\n\tA word is delimited by spaces.\n\t\n\tFor example:\n\t>>> isUnique(\"Hello world\")\n\t2\n\t>>> isUnique(\"Hello world Hello world\")\n\t3\n\t>>> isUnique(\"Hello world\")\n\t1\n\t>>> isUnique(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isUnique = (S) => {\n\tlet s = S.split(\" \")\n\tlet t = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tfor (let j = 0; j < s.length; j++) {\n\t\t\tif (s[i]!= s[j]) {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of lines in the string.\n\tA line is a string of space separated words.\n\t\n\tFor example:\n\t>>> isLines(\"Hello world\")\n\t2\n\t>>> isLines(\"Hello world Hello world\")\n\t2\n\t>>> isLines(\"Hello world\")\n\t1\n\t>>> isLines(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isLines = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] =='') {\n\t\t\tt = t + 1\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of unique words in the string.\n\tA word is a string that is either a single word or consists of multiple words.\n\tA word is delimited by spaces.\n\t\n\tFor example:\n\t>>> isUnique(\"Hello world\")\n\t2\n\t>>> isUnique(\"Hello world Hello world\")\n\t2\n\t>>> isUnique(\"Hello world\")\n\t1\n\t>>> isUnique(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isUniqueWords = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tfor (let j = i + 1; j < S.length; j++) {\n\t\t\tif (S[i]!= S[j]) {\n\t\t\t\tt = t + 1\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of unique words in the string.\n\tA word is a string that is either a single word or consists of multiple words.\n\tA word is delimited by spaces.\n\t\n\tFor example:\n\t>>> isUnique(\"Hello world\")\n\t2\n\t>>> isUnique(\"Hello world Hello world\")\n\t2\n\t>>> isUnique(\"Hello world\")\n\t1\n\t>>> isUnique(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isUniqueWords2 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i]!= S[i + 1]) {\n\t\t\tt = t + 1\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of unique words in the string.\n\tA word is a string that is either a single word or consists of multiple words.\n\tA word is delimited by spaces.\n\t\n\tFor example:\n\t>>> isUnique(\"Hello world\")\n\t2\n\t>>> isUnique(\"Hello world Hello world\")\n\t2\n\t>>> isUnique(\"Hello world\")\n\t1\n\t>>> isUnique(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isUniqueWords3 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tfor (let j = i + 1; j < S.length; j++) {\n\t\t\tif (S[i]!= S[j]) {\n\t\t\t\tif (i!= j && S[i]!= S[j + 1]) {\n\t\t\t\t\tt = t + 1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of lines in the string.\n\tA line is a string of space separated words.\n\t\n\tFor example:\n\t>>> isLines(\"Hello world\")\n\t2\n\t>>> isLines(\"Hello world Hello world\")\n\t2\n\t>>> isLines(\"Hello world\")\n\t1\n\t>>> isLines(\"Hello world, Hello world, Hello world\")\n\t3\n\t*/\nconst isLines2 = (S) => {\n\tlet t = 0\n\tfor (let i = 0; i < S.length; i++) {\n\t\tif (S[i] =='') {\n\t\t\tt = t + 1\n\t\t}\n\t}\n\treturn t\n}\n\n/*\n\tGiven a string, your task is to count the number of lines in the string.\n\tA line is a string of space separated words.\n\t\n\tFor example:\n\t>>> isLines(\"Hello world\")\n\t2\n\t>>> isLines(\"Hello world Hello world\")\n\t2\n\t>>> isLines(\"Hello world\")\n\t1\n\t>>> isLines(\"Hello world, Hello world, Hello"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "/* Create a function that takes 3 numbers.\n\tReturns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n\tReturns false in any other cases.\n\tExamples\n\tanyInt(5, 2, 7) ➞ true\n\tanyInt(3, 2, 2) ➞ false\n\tanyInt(3, -2, 1) ➞ true\n\tanyInt(3.6, -2.2, 2) ➞ false\n\t*/\nconst anyInt = (x, y, z) => {\n\tif (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nconst isEven = (x) => {\n\treturn x % 2 === 0\n}\n\nconst isOdd = (x) => {\n\treturn x % 2!== 0\n}\n\nconst sumOfEvens = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isEven(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfOdds = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isOdd(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfMultiples = (numbers, number) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] % number === 0) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst evensSum = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isEven(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst multiplesSum = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isOdd(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfMultiples = (numbers, number) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] % number === 0) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst multiplesSum = (numbers, number) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] % number === 0) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst count = (numbers, number) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (numbers[i] === number) {\n\t\t\tsum += 1\n\t\t}\n\t}\n\treturn sum\n}\n\nconst product = (numbers) => {\n\tlet sum = 1\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsum *= numbers[i]\n\t}\n\treturn sum\n}\n\nconst reverse = (numbers) => {\n\tlet reversed = []\n\tfor (let i = numbers.length - 1; i >= 0; i--) {\n\t\treversed.push(numbers[i])\n\t}\n\treturn reversed\n}\n\nconst reverseArray = (array) => {\n\tlet reversed = []\n\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\treversed.push(array[i])\n\t}\n\treturn reversed\n}\n\nconst reverseString = (string) => {\n\treturn string.split('').reverse().join('')\n}\n\nconst rotate = (array, number) => {\n\tlet rotated = array.slice()\n\tfor (let i = 0; i < number; i++) {\n\t\trotated.reverse()\n\t}\n\treturn rotated\n}\n\nconst sumOfEvens2 = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isEven(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfOdds2 = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isOdd(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst product2 = (numbers) => {\n\tlet sum = 1\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tsum *= numbers[i]\n\t}\n\treturn sum\n}\n\nconst reverse2 = (numbers) => {\n\tlet reversed = []\n\tfor (let i = numbers.length - 1; i >= 0; i--) {\n\t\treversed.push(numbers[i])\n\t}\n\treturn reversed\n}\n\nconst reverseString2 = (string) => {\n\treturn string.split('').reverse().join('')\n}\n\nconst sumOfEvens3 = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isEven(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfOdds3 = (numbers) => {\n\tlet sum = 0\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (isOdd(numbers[i])) {\n\t\t\tsum += numbers[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nconst sumOfMultiples2 = (numbers, number) => {\n\tlet sum = 0\n\tfor (let i = 0; i"}
{"task_id": "JavaScript/93", "prompt": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> encode('test')\n\t'TGST'\n\t>>> encode('This is a message')\n\t'tHKS KS C MGSSCGG'\n\t*/\nconst encode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += p\n\t}\n\treturn t\n}\n\n/*\n\tWrite a function that takes a message, and encodes in such a \n\tway that it swaps case of all letters, replaces all vowels in \n\tthe message with the letter that appears 2 places ahead of that \n\tvowel in the english alphabet. \n\tAssume only letters. \n  \n\tExamples:\n\t>>> decode('TGST')\n\t'test'\n\t>>> decode('HKS KS C MGSSCGG')\n\t'This is a message'\n\t*/\nconst decode = (message) => {\n\tlet t = ''\n\tfor (let i = 0; i < message.length; i++) {\n\t\tlet p = message[i].charCodeAt()\n\t\tif (p > 96) { p -= 32 }\n\t\telse if (p!=32 && p < 96) { p += 32 }\n\t\tt += p\n\t}\n\treturn t\n}\n\n// console.log(encode('test'))\n// console.log(decode('TGST'))\n\n// console.log(encode('This is a message'))\n// console.log(decode('HKS KS C MGSSCGG'))<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "/*You are given a list of integers.\n\tYou need to find the largest prime value and return the sum of its digits.\n\n\tExamples:\n\tFor lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n\tFor lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n\tFor lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n\tFor lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n\tFor lst = [0,81,12,3,1,21] the output should be 3\n\tFor lst = [0,8,1,2,1,7] the output should be 7\n\t*/\nconst skjkasdkd = (lst) => {\n\tlet t = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= lst[i]; j++) {\n\t\t\tif (lst[i] % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p == 1 && lst[i] > t) { t = lst[i] }\n\t}\n\treturn t\n}\n\n// testcase\nconst lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\nconsole.log(skjkasdkd(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "/*\n\tGiven a dictionary, return true if all keys are strings in lower \n\tcase or all keys are strings in upper case, else return false.\n\tThe function should return false is the given dictionary is empty.\n\tExamples:\n\tcheckDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n\tcheckDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n\tcheckDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n\tcheckDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n\tcheckDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n\t*/\nconst checkDictCase = (dict) => {\n\tlet c = 0\n\tlet lo = 1\n\tlet hi = 1\n\tfor (let key in dict) {\n\t\tc++\n\t\tfor (let i = 0; i < key.length; i++) {\n\t\t\tlo = lo * 26 + key.charCodeAt(i) - 97\n\t\t\thi = hi * 26 + key.charCodeAt(i) - 97\n\t\t}\n\t\tif (lo < lo && hi < hi) {\n\t\t\treturn false\n\t\t}\n\t}\n\tif (c === 0) {\n\t\treturn false\n\t}\n\treturn true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n\tintegers that are prime numbers and less than n.\n\tfor example:\n\tcountUpTo(5) => [2,3]\n\tcountUpTo(11) => [2,3,5,7]\n\tcountUpTo(0) => []\n\tcountUpTo(20) => [2,3,5,7,11,13,17,19]\n\tcountUpTo(1) => []\n\tcountUpTo(18) => [2,3,5,7,11,13,17]\n\t*/\nconst countUpTo = (n) => {\n\tlet t = []\n\tfor (let i = 2; i < n; i++) {\n\t\tlet p = 1\n\t\tfor (let j = 2; j * j <= i; j++) {\n\t\t\tif (i % j == 0) { p = 0; break }\n\t\t}\n\t\tif (p) {\n\t\t\tt.push(i)\n\t\t}\n\t}\n\treturn t\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "/*Complete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(148, 412) should return 16.\n\tmultiply(19, 28) should return 72.\n\tmultiply(2020, 1851) should return 0.\n\tmultiply(14,-15) should return 20.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 * b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe sum of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tadd(101, -100) should return 11.\n\tadd(15, 3) should return 6.\n\tadd(1, 2) should return 3.\n\tadd(1, -2) should return -1.\n\tadd(3, -4) should return -1.\n\t*/\nconst add = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 + b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe difference of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tsubtract(19, 28) should return 7.\n\tsubtract(20, 1851) should return -2.\n\tsubtract(2020, 1851) should return 0.\n\tsubtract(14, -15) should return -1.\n\t*/\nconst subtract = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 - b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe product of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tmultiply(101, -100) should return 11.\n\tmultiply(15, 3) should return 6.\n\tmultiply(1, 2) should return 3.\n\tmultiply(1, -2) should return -1.\n\tmultiply(3, -4) should return -1.\n\t*/\nconst multiply = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 * b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe sum of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tadd(101, -100) should return 11.\n\tadd(15, 3) should return 6.\n\tadd(1, 2) should return 3.\n\tadd(1, -2) should return -1.\n\tadd(3, -4) should return -1.\n\t*/\nconst add = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 + b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n\n/*\n\tComplete the function that takes two integers and returns \n\tthe difference of their unit digits.\n\tAssume the input is always valid.\n\tExamples:\n\tsubtract(19, 28) should return 7.\n\tsubtract(20, 1851) should return -2.\n\tsubtract(2020, 1851) should return 0.\n\tsubtract(14, -15) should return -1.\n\t*/\nconst subtract = (a, b) => {\n\tif (a < 0) { a = -a }\n\tif (b < 0) { b = -b }\n\tlet ans = 0\n\twhile (a > 0) {\n\t\tans += a % 10 - b % 10\n\t\ta /= 10\n\t\tb /= 10\n\t}\n\treturn ans\n}\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a string s, count the number of uppercase vowels in even indices.\n  \n\tFor example:\n\tcountUpper('aBCdEf') returns 1\n\tcountUpper('abcdefg') returns 0\n\tcountUpper('dBBE') returns 0\n\t*/\nconst countUpper = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 2) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n\t}\n\treturn p\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return true if it is a palindrome, false otherwise.\n  \n\tFor example:\n\tisPalindrome('A man, a plan, a canal-pan') returns true\n\tisPalindrome('race a car') returns false\n\t*/\nconst isPalindrome = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i]!= s[s.length - 1 - i]) { return false }\n\t\tp++\n\t}\n\treturn p == s.length\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return the number of characters in the string that are\n\tnot vowels.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 3\n\tcountVowels('abcdefg') returns 7\n\tcountVowels('dBBE') returns 3\n\t*/\nconst countVowels = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U') { p++ }\n\t}\n\treturn p\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return the number of characters in the string that are\n\tnot consonants.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 5\n\tcountConsonants('abcdefg') returns 8\n\tcountConsonants('dBBE') returns 4\n\t*/\nconst countConsonants = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'B' && s[i]!= 'C' && s[i]!= 'D' && s[i]!= 'F' && s[i]!= 'G' && s[i]!= 'J' && s[i]!= 'K' && s[i]!= 'L' && s[i]!= 'M' && s[i]!= 'N' && s[i]!= 'P' && s[i]!= 'Q' && s[i]!= 'R' && s[i]!= 'S' && s[i]!= 'T' && s[i]!= 'V' && s[i]!= 'W' && s[i]!= 'X' && s[i]!= 'Z') { p++ }\n\t}\n\treturn p\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return the number of characters in the string that are\n\tvowels.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 1\n\tcountVowels('abcdefg') returns 2\n\tcountVowels('dBBE') returns 2\n\t*/\nconst countVowels = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n\t}\n\treturn p\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return the number of consonants in the string.\n  \n\tFor example:\n\tcountConsonants('aBCdEf') returns 5\n\tcountConsonants('abcdefg') returns 8\n\tcountConsonants('dBBE') returns 4\n\t*/\nconst countConsonants = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i]!= 'A' && s[i]!= 'E' && s[i]!= 'I' && s[i]!= 'O' && s[i]!= 'U' && s[i]!= 'B' && s[i]!= 'C' && s[i]!= 'D' && s[i]!= 'F' && s[i]!= 'G' && s[i]!= 'J' && s[i]!= 'K' && s[i]!= 'L' && s[i]!= 'M' && s[i]!= 'N' && s[i]!= 'P' && s[i]!= 'Q' && s[i]!= 'R' && s[i]!= 'S' && s[i]!= 'T' && s[i]!= 'V' && s[i]!= 'W' && s[i]!= 'X' && s[i]!= 'Z') { p++ }\n\t}\n\treturn p\n}\n\n// ------------------------------------------------------------------------\n\n/*\n\tGiven a string s, return the number of vowels in the string.\n  \n\tFor example:\n\tcountVowels('aBCdEf') returns 1\n\tcountVowels('abcdefg') returns 2\n\tcountVowels('dBBE') returns 2\n\t*/\nconst countVowels = (s) => {\n\tlet p = 0\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U' || s[i"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "/* Create a function that takes a value (string) representing a number\n\tand returns the closest integer to it. If the number is equidistant\n\tfrom two integers, round it away from zero.\n\tExamples\n\t>>> closestInteger(\"10\")\n\t10\n\t>>> closestInteger(\"15.3\")\n\t15\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two integers, the one you should return is the one that is the\n\tfarthest from zero. For example closestInteger(\"14.5\") should\n\treturn 15 and closestInteger(\"-14.5\") should return -15.\n\t*/\nconst closestInteger = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn Math.round(value)\n}\n\n/*\n\tCreate a function that takes a value (string) representing a number\n\tand returns the closest number to it. If the number is equidistant\n\tfrom two numbers, round it away from zero.\n\tExamples\n\t>>> closestNumber(\"10\")\n\t10\n\t>>> closestNumber(\"15.3\")\n\t15.3\n\tNote:\n\tRounding away from zero means that if the given number is equidistant\n\tfrom two numbers, the one you should return is the one that is the\n\tfarthest from zero. For example closestNumber(\"14.5\") should\n\treturn 15.5 and closestNumber(\"-14.5\") should return -15.5.\n\t*/\nconst closestNumber = (value) => {\n\tvalue = Number(value)\n\tlet t = value % 1\n\tif (t < 0.5 && t > -0.5) { value -= t }\n\treturn value\n}\n\nmodule.exports = {\n\tclosestInteger,\n\tclosestNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven a positive integer n, you have to make a pile of n levels of stones.\n\tThe first level has n stones.\n\tThe number of stones in the next level is:\n\t\t\t- the next odd number if n is odd.\n\t\t\t- the next even number if n is even.\n\tReturn the number of stones in each level in a list, where element at index\n\ti represents the number of stones in the level (i+1).\n\n\tExamples:\n\t>>> makeAPile(3)\n\t[3, 5, 7]\n\t*/\nconst makeAPile = (n) => {\n\tlet t = []\n\tfor (let i = n; i < n * 3; i += 2) {\n\t\tt.push(i)\n\t}\n\tfor (let i = n * 3; i < n * 4; i += 2) {\n\t\tt.push(i)\n\t}\n\treturn t\n}\n\nconsole.log(makeAPile(3))<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] == ' ' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou will be given a string of words separated by commas or spaces. Your task is\n\tto split the string into words and return an array of the words.\n  \n\tFor example:\n\twordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\twordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\t*/\nconst wordsString = (s) => {\n\tlet t = ''\n\tlet p = []\n\tlet k = 0\n\tfor (let i = 0; i < s.length; i++) {\n\t\tif (s[i] =='' || s[i] == ',') {\n\t\t\tif (k == 0) {\n\t\t\t\tk = 1;\n\t\t\t\tp.push(t);\n\t\t\t\tt = '';\n\t\t\t}\n\t\t\telse {\n\t\t\t\tt += s[i];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tt += s[i];\n\t\t\tk = 0;\n\t\t}\n\t}\n\tif (t!= '') {\n\t\tp.push(t);\n\t}\n\treturn p;\n}\n\nconst main = () => {\n\tlet a = wordsString('one,two,three,four,five,six')\n\tlet b = wordsString('one,two,three,four,five,six')\n\tconsole.log(a[0],a[1],a[2],a[3],a[4],a[5])\n\tconsole.log(b[0],b[1],b[2],b[3],b[4],b[5])\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*This function takes two positive numbers x and y and returns the\n\tbiggest even integer number that is in the range [x, y] inclusive. If \n\tthere's no such number, then the function should return -1.\n\n\tFor example:\n\tchooseNum(12, 15) = 14\n\tchooseNum(13, 12) = -1\n\t*/\nconst chooseNum = (x, y) => {\n\tfor (let i = y; i >= x; i--) {\n\t\tif (i % 2 == 0) {return i }\n\t}\n\treturn -1;\n};\n\nconsole.log(chooseNum(7, 8));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n\taverage of the integers from n through m (including n and m). \n\tRound the answer to the nearest integer and convert that to binary.\n\tIf n is greater than m, return -1.\n\tExample:\n\troundedAvg(1, 5) => \"0b11\"\n\troundedAvg(7, 5) => -1\n\troundedAvg(10, 20) => \"0b1111\"\n\troundedAvg(20, 33) => \"0b11010\"\n\t*/\nconst roundedAvg = (n, m) => {\n\tif (n > m) { return -1 }\n\tlet k = (n + m) / 2\n\treturn roundedAvg(n, k) + roundedAvg(k + 1, m)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a list of positive integers x. return a sorted list of all \n\telements that hasn't any even digit.\n\n\tNote: Returned list should be sorted in increasing order.\n  \n\tFor example:\n\t>>> uniqueDigits([15, 33, 1422, 1])\n\t[1, 15, 33]\n\t>>> uniqueDigits([152, 323, 1422, 10])\n\t[]\n\t*/\nconst uniqueDigits = (x) => {\n\tlet p = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tlet h = x[i]\n\t\tlet boo = 1\n\t\twhile (h > 0) {\n\t\t\tlet r = h % 10\n\t\t\tif (r % 2 == 0) {\n\t\t\t\tboo = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\th = (h - r) / 10\n\t\t}\n\t\tif (boo) {\n\t\t\tp.push(x[i])\n\t\t}\n\t}\n\tp.sort()\n\treturn p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1 , 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "/*\n\tGiven an array of integers, sort the integers that are between 1 and 9 inclusive,\n\treverse the resulting array, and then replace each digit by its corresponding name from\n\t\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n\tFor example:\n\t\tarr = [2, 1, 1, 4, 5, 8, 2, 3]   \n\t\t\t\t\t-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n\t\t\t\t\t-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n\t\treturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n\t\tIf the array is empty, return an empty array:\n\t\tarr = []\n\t\treturn []\n  \n\t\tIf the array has any strange number ignore it:\n\t\tarr = [1, -1, 55] \n\t\t\t\t\t-> sort arr -> [-1, 1, 55]\n\t\t\t\t\t-> reverse arr -> [55, 1, -1]\n\t\treturn = ['One']\n\t*/\nconst byLength = (arr) => {\n\tp = []\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n\t}\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] > p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind > j) {\n\t\t\tlet temp = p[j]\n\t\t\tp[j] = p[ind]\n\t\t\tp[ind] = temp\n\t\t}\n\t}\n\treturn p\n}\n\n// let a = byLength([1,2,3,4,5,6,7,8,9])\n// console.log(a)\n// a = byLength([])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10,11,12,13])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250])\n// console.log(a)\n// a = byLength([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "/* Implement the function f that takes n as a parameter,\n\tand returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n\tor the sum of numbers from 1 to i otherwise.\n\ti starts from 1.\n\tthe factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n\tExample:\n\tf(5) == [1, 2, 6, 24, 15]\n\t*/\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tlet k = []\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i;\n\t\tf *= p;\n\t\tk.push(f);\n\t}\n\treturn k\n}\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tf *= p\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tf += p\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 2 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 2!== 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 3 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 5 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 7 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 11 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\nconst f = (n) => {\n\tlet f = 1\n\tlet p = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tp += i\n\t\tif (i % 13 === 0) {\n\t\t\tf += p\n\t\t}\n\t}\n\treturn f\n}\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 17 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 19 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 23 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 29 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 31 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i <= n; i++) {\n// \t\tp += i\n// \t\tif (i % 37 === 0) {\n// \t\t\tf += p\n// \t\t}\n// \t}\n// \treturn f\n// }\n\n// const f = (n) => {\n// \tlet f = 1\n// \tlet p = 0\n// \tfor (let i = 1; i"}
{"task_id": "JavaScript/107", "prompt": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j] != k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a tuple that has the number of even and odd\n\tinteger palindromes that fall within the range(1, n), inclusive.\n\n\tExample 1:\n\n\t\t\tInput: 3\n\t\t\tOutput: (1, 2)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n\tExample 2:\n\n\t\t\tInput: 12\n\t\t\tOutput: (4, 6)\n\t\t\tExplanation:\n\t\t\tInteger palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n\tNote:\n\t\t\t1. 1 <= n <= 10^3\n\t\t\t2. returned tuple has the number of even and odd integer palindromes respectively.\n\t*/\nconst evenOddPalindrome = (n) => {\n\tlet e = 0\n\tlet o = 0\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet k = i.toString()\n\t\tlet p = 1\n\t\tfor (let j = 0; j < k.length; j++) {\n\t\t\tif (k[j]!= k[k.length - j - 1]) {\n\t\t\t\tp = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (p == 1) {\n\t\t\te++\n\t\t} else {\n\t\t\to++\n\t\t}\n\t}\n\treturn [e, o]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function countNums which takes an array of integers and returns\n\tthe number of elements which has a sum of digits > 0.\n\tIf a number is negative, then its first signed digit will be negative:\n\te.g. -123 has signed digits -1, 2, and 3.\n\t>>> countNums([]) == 0\n\t>>> countNums([-1, 11, -11]) == 1\n\t>>> countNums([1, 1, 2]) == 3\n\t*/\nconst countNums = (arr) => {\n\tlet p = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet h = arr[i]\n\t\tif (h > 0) {\n\t\t\tp++;\n\t\t\tcontinue;\n\t\t}\n\t\tlet k = 0\n\t\th = -h\n\t\twhile (h > 0) {\n\t\t\tp++;\n\t\t\tk++;\n\t\t\th = h % 10\n\t\t}\n\t\tp += k\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function isPalindrome which takes a string and returns\n\twhether the string is a palindrome or not.\n\t>>> isPalindrome('palindrome')\n\tTrue\n\t>>> isPalindrome('not a palindrome')\n\tFalse\n\t>>> isPalindrome('')\n\tFalse\n\t>>> isPalindrome('a')\n\tTrue\n\t>>> isPalindrome('1234')\n\tFalse\n\t>>> isPalindrome('a11')\n\tTrue\n\t>>> isPalindrome('A1')\n\tFalse\n\t>>> isPalindrome('a11')\n\tFalse\n\t>>> isPalindrome('A1')\n\tFalse\n\t>>> isPalindrome('a111')\n\tTrue\n\t>>> isPalindrome('a111')\n\tFalse\n\t>>> isPalindrome('A111')\n\tFalse\n\t>>> isPalindrome('A111')\n\tFalse\n\t>>> isPalindrome('a111')\n\tFalse\n\t>>> isPalindrome('A111')\n\tFalse\n\t>>> isPalindrome('a11')\n\tFalse\n\t>>> isPalindrome('a1')\n\tFalse\n\t>>> isPalindrome('a1')\n\tFalse\n\t>>> isPalindrome('a')\n\tTrue\n\t>>> isPalindrome('a')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tTrue\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('A')\n\tFalse\n\t>>> isPalindrome('A')\n\tTrue\n\t>>> isPalindrome('A')\n\tFalse\n\t>>> isPalindrome('a')\n\tFalse\n\t>>> isPalindrome('a')\n\tTrue\n\t>>> isPalindrome('aa')\n\tTrue\n\t>>> isPalindrome('aab')\n\tFalse\n\t>>> isPalindrome('AA')\n\tFalse\n\t>>> isPalindrome('Aa')\n\tFalse\n\t>>> isPalindrome('Aa')\n\tTrue\n\t>>> isPalindrome('Aa1')\n\tFalse\n\t>>> isPalindrome('Aa1')\n\tTrue\n\t>>> isPalindrome('a1a')\n\tTrue\n\t>>> isPalindrome('a1a')\n\tFalse\n\t>>> isPalindrome('1a1')\n\tFalse\n\t>>> isPalindrome('1a1')\n\tFalse\n\t>>> isPalindrome('11a1')\n\tFalse\n\t>>> isPalindrome('11a1')\n\tFalse\n\t>>> isPalindrome('1a1')\n\tFalse\n\t>>> isPalindrome('1a1')\n\tFalse\n\t>>> isPalindrome('a1')\n\tFalse\n\t>>> isPalindrome('a1')\n\tFalse\n\t>>> isPalindrome('a')\n\tTrue\n\t>>> isPalindrome('a')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tTrue\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('a')\n\tFalse\n\t>>> isPalindrome('a')\n\tTrue\n\t>>> isPalindrome('a')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tTrue\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1')\n\tFalse\n\t>>> isPalindrome('1"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n\tnumbers in the array will be randomly ordered. Your task is to determine if\n\tit is possible to get an array sorted in non-decreasing order by performing \n\tthe following operation on the given array:\n\t\t\tYou are allowed to perform right shift operation any number of times.\n  \n\tOne right shift operation means shifting all elements of the array by one\n\tposition in the right direction. The last element of the array will be moved to\n\tthe starting position in the array i.e. 0th index. \n\n\tIf it is possible to obtain the sorted array by performing the above operation\n\tthen return true else return false.\n\tIf the given array is empty then return true.\n\n\tNote: The given list is guaranteed to have unique elements.\n\n\tFor Example:\n  \n\tmoveOneBall([3, 4, 5, 1, 2])==>true\n\tExplanation: By performin 2 right shift operations, non-decreasing order can\n\t\t\t\t\t\t\t be achieved for the given array.\n\tmoveOneBall([3, 5, 4, 1, 2])==>false\n\tExplanation:It is not possible to get non-decreasing order for the given\n\t\t\t\t\t\t\tarray by performing any number of right shift operations.\n              \n\t*/\nconst moveOneBall = (arr) => {\n\tif (arr.length == 0) { return true }\n\tlet k = 0\n\tlet len = arr.length\n\tfor (let i = 0; i < len; i++) {\n\t\tlet t = 1;\n\t\tfor (let j = 1; j < len; j++) {\n\t\t\tif (arr[j] < arr[j - 1]) {\n\t\t\t\tt = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (t) {\n\t\t\tfor (let j = i; j >= 0; j--) {\n\t\t\t\tarr[k] = arr[j]\n\t\t\t\tk++\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < len; i++) {\n\t\tif (arr[i]!= i + 1) { return false }\n\t}\n\treturn true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n\tand determines whether it is possible to perform an exchange of elements\n\tbetween them to make lst1 a list of only even numbers.\n\tThere is no limit on the number of exchanged elements between lst1 and lst2.\n\tIf it is possible to exchange elements between the lst1 and lst2 to make\n\tall the elements of lst1 to be even, return \"YES\".\n\tOtherwise, return \"NO\".\n\tFor example:\n\texchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n\texchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n\tIt is assumed that the input lists will be non-empty.\n\t*/\nconst exchange = (lst1, lst2) => {\n\tlet k = lst1.length\n\tlet t = 0\n\tfor (let i = 0; i < lst1.length; i++) {\n\t\tif (lst1[i] % 2 == 0) { t++ }\n\t}\n\tif (t == lst1.length) return \"YES\"\n\telse return \"NO\"\n}\n\nconst test = (lst1, lst2, result) => {\n\tconsole.log(`${lst1} -> ${lst2} -> ${exchange(lst1, lst2)} = ${result}`)\n}\n\ntest([1, 2, 3, 4], [1, 2, 3, 4], \"YES\")\ntest([1, 2, 3, 4], [1, 5, 3, 4], \"NO\")\ntest([1, 2, 3, 4], [1, 2, 3, 4, 5], \"NO\")\ntest([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], \"NO\")\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n\tof the letter with the most repetition and containing the corresponding count.\n\tIf several letters have the same occurrence, return all of them.\n  \n\tExample:\n\thistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n\thistogram('a b b a') == {'a': 2, 'b': 2}\n\thistogram('a b c a b') == {'a': 2, 'b': 2}\n\thistogram('b b b b a') == {'b': 4}\n\thistogram('') == {}\n\n\t*/\nconst histogram = (test) => {\n\tlet d = {}\n\tlet t = test.split(/\\s/)\n\tif (test == '') { t = [] }\n\tfor (m in t) {\n\t\tif (t[m] in d) {\n\t\t\td[t[m]]++\n\t\t}\n\t\telse {\n\t\t\td[t[m]] = 1\n\t\t}\n\t}\n\treturn d\n}\n\nmodule.exports = histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "/*Task\n\tWe are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n\tthen check if the result string is palindrome.\n\tA string is called palindrome if it reads the same backward as forward.\n\tYou should return a tuple containing the result string and true/false for the check.\n\tExample\n\tFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n\tFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n\tFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n\t*/\nconst reverseDelete = (s, c) => {\n\tlet t = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = 1\n\t\tfor (let j = 0; j < c.length; j++) {\n\t\t\tif (s[i] == c[j]) {\n\t\t\t\ty = 0\n\t\t\t}\n\t\t}\n\t\tif (y == 1) {\n\t\t\tt += s[i]\n\t\t}\n\t}\n\tif (t == s) {\n\t\treturn (t, true)\n\t}\n\telse {\n\t\treturn (t, false)\n\t}\n}\n\nexport default reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n\tEach element i of the output should be \"the number of odd elements in the\n\tstring i of the input.\" where all the i's should be replaced by the number\n\tof odd digits in the i'th string of the input.\n\n\t>>> oddCount(['1234567'])\n\t[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n\t>>> oddCount(['3',\"11111111\"])\n\t[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n\t \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n\t*/\nconst oddCount = (lst) => {\n\tlet d = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet p = 0;\n\t\tlet h = lst[i].length\n\t\tfor (let j = 0; j < h; j++) {\n\t\t\tif (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n\t\t}\n\t\td.push(`the number of odd elements ${p} in the str${i+1} of the ${h}nput.`)\n\t}\n\treturn d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "/*\n\tGiven an array of integers nums, find the minimum sum of any non-empty sub-array\n\tof nums.\n\tExample\n\tminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n\tminSubArraySum([-1, -2, -3]) == -6\n\t*/\nconst minSubArraySum = (nums) => {\n\tlet min = nums[0]\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tfor (let j = i + 1; j <= nums.length; j++) {\n\t\t\tlet s = 0;\n\t\t\tfor (let k = i; k < j; k++) {\n\t\t\t\ts += nums[k]\n\t\t\t}\n\t\t\tif (s < min) {\n\t\t\t\tmin = s\n\t\t\t}\n\t\t}\n\t}\n\treturn min\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a rectangular grid of wells. Each row represents a single well,\n\tand each 1 in a row represents a single unit of water.\n\tEach well has a corresponding bucket that can be used to extract water from it, \n\tand all buckets have the same capacity.\n\tYour task is to use the buckets to empty the wells.\n\tOutput the number of times you need to lower the buckets.\n\n\tExample 1:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n\t\t\t\t\tbucket_capacity : 1\n\t\t\tOutput: 6\n\n\tExample 2:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\t\t\t\t\tbucket_capacity : 2\n\t\t\tOutput: 5\n  \n\tExample 3:\n\t\t\tInput: \n\t\t\t\t\tgrid : [[0,0,0], [0,0,0]]\n\t\t\t\t\tbucket_capacity : 5\n\t\t\tOutput: 0\n\n\tConstraints:\n\t\t\t* all wells have the same length\n\t\t\t* 1 <= grid.length <= 10^2\n\t\t\t* 1 <= grid[:,1].length <= 10^2\n\t\t\t* grid[i][j] -> 0 | 1\n\t\t\t* 1 <= capacity <= 10\n\t*/\nconst maxFill = (grid, capacity) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tif (p + m > capacity) { return i }\n\t\tp += m\n\t}\n\treturn p\n}\n\nconst n = (grid) => {\n\tlet p = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tlet m = 0\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) { m++ }\n\t\t}\n\t\tif (p + m < grid[i].length) { return i }\n\t\tp += m\n\t}\n\treturn grid.length\n}\n\nconst main = () => {\n\tlet grid = [\n\t\t[0,0,1,0],\n\t\t[0,1,0,0],\n\t\t[1,1,1,1],\n\t\t[0,1,1,1]\n\t]\n\tlet capacity = 1\n\n\tlet ans = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid[i].length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tlet m = 0\n\t\t\t\tlet p = 0\n\t\t\t\twhile (p < grid[i].length) {\n\t\t\t\t\tif (grid[i][p] == 1) { m++ }\n\t\t\t\t\tp++\n\t\t\t\t}\n\t\t\t\tif (p + m > capacity) { ans++ }\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(ans)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tIn this Kata, you have to sort an array of non-negative integers according to\n\tnumber of ones in their binary representation in ascending order.\n\tFor similar number of ones, sort based on decimal value.\n\n\tIt must be implemented like this:\n\t>>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\t>>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\t>>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n\t*/\nconst sortArray = (arr) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tlet w1 = p[ind].toString(2)\n\t\t\tlet f1 = 0\n\t\t\tfor (let u = 0; u < w1.length; u++) {\n\t\t\t\tif (w1[u] == '1') { f1++ }\n\t\t\t}\n\t\t\tlet w2 = p[k].toString(2)\n\t\t\tlet f2 = 0\n\t\t\tfor (let u = 0; u < w2.length; u++) {\n\t\t\t\tif (w2[u] == '1') { f2++ }\n\t\t\t}\n\t\t\tif (f1 > f2) { ind = k }\n\t\t}\n\t\tlet w = p[ind].toString(2)\n\t\tfor (let u = 0; u < w.length; u++) {\n\t\t\tif (w[u] == '1') { p[ind] = p[ind].number }\n\t\t}\n\t\tlet w = p[ind].toString(10)\n\t\tfor (let u = 0; u < w.length; u++) {\n\t\t\tif (w[u] == '1') { p[ind] = p[ind].number }\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tIn this Kata, you have to count number of ones in the binary representation of an integer.\n\t>>> countOnes(1) == 1\n\t>>> countOnes(5) == 2\n\t>>> countOnes(2) == 1\n\t>>> countOnes(3) == 2\n\t>>> countOnes(-2) == 1\n\t>>> countOnes(-3) == 2\n\t>>> countOnes(-4) == 2\n\t>>> countOnes(-5) == 3\n\t>>> countOnes(-6) == 3\n\t>>> countOnes(7) == 2\n\t>>> countOnes(8) == 3\n\t>>> countOnes(9) == 3\n\t>>> countOnes(10) == 4\n\t>>> countOnes(15) == 5\n\t>>> countOnes(16) == 6\n\t>>> countOnes(23) == 7\n\t>>> countOnes(24) == 8\n\t>>> countOnes(25) == 9\n\t>>> countOnes(26) == 10\n\t>>> countOnes(30) == 11\n\t>>> countOnes(35) == 12\n\t>>> countOnes(36) == 13\n\t>>> countOnes(42) == 14\n\t>>> countOnes(45) == 15\n\t>>> countOnes(48) == 16\n\t>>> countOnes(54) == 17\n\t>>> countOnes(55) == 18\n\t>>> countOnes(61) == 19\n\t>>> countOnes(66) == 20\n\t>>> countOnes(72) == 21\n\t>>> countOnes(90) == 22\n\t>>> countOnes(120) == 23\n\t>>> countOnes(360) == 24\n\t>>> countOnes(1000) == 25\n\t>>> countOnes(2000) == 26\n\t>>> countOnes(3500) == 27\n\t>>> countOnes(3600) == 28\n\t>>> countOnes(4300) == 29\n\t>>> countOnes(4500) == 30\n\t>>> countOnes(4800) == 31\n\t>>> countOnes(5400) == 32\n\t>>> countOnes(5500) == 33\n\t>>> countOnes(61000) == 34\n\t>>> countOnes(66000) == 35\n\t>>> countOnes(72000) == 36\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000) == 37\n\t>>> countOnes(90000"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n\ta function that returns a list of all words from string s that contain exactly \n\tn consonants, in order these words appear in the string s.\n\tIf the string s is empty then the function should return an empty list.\n\tNote: you may assume the input string contains only letters and spaces.\n\tExamples:\n\tselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\tselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n\tselectWords(\"simple white space\", 2) ==> []\n\tselectWords(\"Hello world\", 4) ==> [\"world\"]\n\tselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n\t*/\nconst selectWords = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl = l + 1\n\t\t\t}\n\t\t\tif (l == n) { k.push(t[i]) }\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectWords2 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl = l + 1\n\t\t\t}\n\t\t\tif (l == n) { k.push(t[i]) }\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectWords3 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl = l + 1\n\t\t\t}\n\t\t\tif (l == n) { k.push(t[i]) }\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectWords4 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl = l + 1\n\t\t\t}\n\t\t\tif (l == n) { k.push(t[i]) }\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectWords5 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n\t\t\t\tt[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n\t\t\t\tl = l + 1\n\t\t\t}\n\t\t\tif (l == n) { k.push(t[i]) }\n\t\t}\n\t}\n\treturn k\n}\n\nconst selectWords6 = (s, n) => {\n\tlet t = s.split(/\\s/)\n\tif (s == '') { return [] }\n\tlet k = []\n\tfor (let i = 0; i < t.length; i++) {\n\t\tlet l = 0\n\t\tfor (let j = 0; j < t[i].length; j++) {\n\t\t\tif (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t["}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n\t\t\t\tword[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n\t\t\t&&\n\t\t\t(word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n\t\t\t\tword[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n\t\t\t&&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n\ttwo consonants from the right side of the word (case sensitive).\n  \n\tVowels in the beginning and ending doesn't count. Return empty string if you didn't\n\tfind any vowel met the above condition. \n\n\tYou may assume that the given string contains English letter only.\n\n\tExample:\n\tgetClosestVowel(\"yogurt\") ==> \"u\"\n\tgetClosestVowel(\"FULL\") ==> \"U\"\n\tgetClosestVowel(\"quick\") ==> \"\"\n\tgetClosestVowel(\"ab\") ==> \"\"\n\t*/\nconst getClosestVowel = (word) => {\n\tfor (let i = word.length - 2; i > 0; i--) {\n\t\tif (\n\t\t\t!(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n\t\t\t\tword[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n\t\t\t\tword[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n\t\t\t\tword[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n\t\t\t&&\n\t\t\t(word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n\t\t\t\tword[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n\t\t) {\n\t\t\treturn word[i + 1];\n\t\t}\n\t}\n\treturn '';\n}\n\nconsole.log(getClosestVowel('yogurt'));\nconsole.log(getClosestVowel('FULL'));\nconsole.log(getClosestVowel('quick'));\nconsole.log(getClosestVowel('ab'));\nconsole.log(getClosestVowel('abca'));\nconsole.log(getClosestVowel('abca'));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "/* You are given a list of two strings, both strings consist of open\n\tparentheses '(' or close parentheses ')' only.\n\tYour job is to check if it is possible to concatenate the two strings in\n\tsome order, that the resulting string will be good.\n\tA string S is considered to be good if and only if all parentheses in S\n\tare balanced. For example: the string '(())()' is good, while the string\n\t'())' is not.\n\tReturn 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\tExamples:\n\tmatchParens(['()(', ')']) == 'Yes'\n\tmatchParens([')', ')']) == 'No'\n\t*/\nconst matchParens = (lst) => {\n\tlet w1 = lst[0] + lst[1]\n\tlet y = 0\n\tlet u = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\tw1 = lst[1] + lst[0]\n\ty = 0\n\tu = 1\n\tfor (let i = 0; i < w1.length; i++) {\n\t\tif (w1[i] == '(') { y++ }\n\t\telse { y-- }\n\t\tif (y < 0) {\n\t\t\tu = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (u == 1 && y == 0) { return 'Yes' }\n\treturn 'No';\n}\n\n/*\n\tGiven a list of strings, return a list of all the permutations of the strings\n\twithout duplicates.\n\n\tA permutation of a set A is any order in which the elements of A are\n\trearranged. For example, given the list [1, 2, 3], there are three\n\tpermutations: [1, 2, 3], [1, 3, 2], and [3, 1, 2].\n\n\tThe set [1, 2, 3] has three permutations, but the permutation [1, 2, 3]\n\tis an acceptable permutation of [1, 2, 3], so only the first two permutations\n\tare returned.\n\n\tThe idea is to iterate through each string in the list, iterating through\n\teach character of the string, checking if it is a valid character. If it\n\tis, then the character is moved to the end of the current string.\n\tIf the character is not a valid character, then the current string is\n\tadded to the result.\n\tAfter iterating through all the characters of the string, append the\n\tcurrent string to the result.\n\n\tGiven the following strings:\n\t[1, 2, 3]\n\t[1, 2, 3, 4]\n\t[1, 2, 4, 3]\n\n\tThe result is:\n\t[1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 4, 3, 1, 2, 4, 3, 1, 2, 4, 3, 1, 2, 4, 3, 1, 2, 4, 3]\n\t*/\nconst permute = (lst) => {\n\tconst res = []\n\tlet permutation = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet chars = []\n\t\tfor (let j = 0; j < lst[i].length; j++) {\n\t\t\tif (isValidChar(lst[i][j])) {\n\t\t\t\tchars.push(lst[i][j])\n\t\t\t}\n\t\t\telse {\n\t\t\t\tpermutation.push(lst[i])\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tres.push(chars.join(''))\n\t\tpermutation = permutation.concat(chars)\n\t}\n\treturn res.concat(permutation)\n}\n\n/*\n\tGiven a string, return the length of the longest substring without repeating\n\tcharacters.\n\n\tGiven the string \"abcabcbb\", the function should return 6, because the\n\tsubstring \"abcabc\" contains 6 characters, while \"bb\" contains only 2.\n\n\tGiven the string \"bbbbb\", the function should return 1, because \"bbbb\"\n\tcontains only 1 character.\n\n\tGiven the string \"abcdefg\", the function should return 5, because the\n\tsubstring \"defg\" contains 5 characters, while \"abcde\" and \"fg\" contain\n\tonly 2.\n\t*/\nconst lengthOfLongestSubstring = (s) => {\n\tconst res = {}\n\tconst l = s.length\n\tfor (let i = 0; i < l; i++) {\n\t\tconst x = []\n\t\tfor (let j = i; j < l; j++) {\n\t\t\tif (s[j] == s[i]) {\n\t\t\t\tx.push(s[j])\n\t\t\t\twhile (x.length > 1 && s[j] == s[x.shift()]) {\n\t\t\t\t\tx.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (x.length > res[x.join()]) {\n\t\t\tres[x.join()] = x.length\n\t\t}\n\t}\n\treturn res\n}\n\n/*\n\tGiven a string, return the length of the longest substring without\n\trepeating characters that appear more than once in the string.\n\n\tGiven the string \"abcabcbb\", the function should return 6, because the\n\tsubstring \"abcabc\" contains 6 characters, while \"bb\" contains only 2.\n\n\tGiven the string \"bbbbb\", the function should return 1, because \"bbbb\"\n\tcontains only 1 character.\n\n\tGiven the string \"abcdefg\", the function should return 5, because the\n\tsubstring \"defg\" contains 5 characters, while \"abcde\" and \"fg\" contain\n\tonly 2.\n\t*/\nconst lengthOfLongestSubstringWithoutRepeating = (s) => {\n\tconst res = {}\n\tconst l = s.length\n\tfor (let i = 0; i < l; i++) {\n\t\tconst x = []\n\t\tfor (let j = i; j < l; j++) {\n\t\t\tif (s[j] == s[i]) {\n\t\t\t\tx.push(s[j])\n\t\t\t}\n\t\t}\n\t\tif (x.length > res[x.join()]) {\n\t\t\tres[x.join()] = x.length\n\t\t}\n\t}"}
{"task_id": "JavaScript/120", "prompt": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "/*\n\tGiven an array arr of integers and a positive integer k, return a sorted list \n\tof length k with the maximum k numbers in arr.\n\n\tExample 1:\n\n\t\t\tInput: arr = [-3, -4, 5], k = 3\n\t\t\tOutput: [-4, -3, 5]\n\n\tExample 2:\n\n\t\t\tInput: arr = [4, -4, 4], k = 2\n\t\t\tOutput: [4, 4]\n\n\tExample 3:\n\n\t\t\tInput: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n\t\t\tOutput: [2]\n\n\tNote:\n\t\t\t1. The length of the array will be in the range of [1, 1000].\n\t\t\t2. The elements in the array will be in the range of [-1000, 1000].\n\t\t\t3. 0 <= k <= len(arr)\n\t*/\nconst maximum = (arr, k) => {\n\tlet p = arr\n\tfor (let j = 0; j < p.length; j++) {\n\t\tlet ind = j\n\t\tfor (let k = j + 1; k < p.length; k++) {\n\t\t\tif (p[k] < p[ind]) {\n\t\t\t\tind = k\n\t\t\t}\n\t\t}\n\t\tif (ind - j > k - j) {\n\t\t\tp = p.slice(0, ind + 1)\n\t\t}\n\t}\n\treturn p\n}\n\nconst arr = [-3, -4, 5, 4, -4, 4, 1, 2, 1, -1, -2, 1]\nconsole.log(maximum(arr, 3))<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n\tExamples\n\tsolution([5, 8, 7, 1]) ==> 12\n\tsolution([3, 3, 3, 3, 3]) ==> 9\n\tsolution([30, 13, 24, 321]) ==>0\n\t*/\nconst solution = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i += 2) {\n\t\tif (lst[i] % 2 == 1) {\n\t\t\tp += lst[i]\n\t\t}\n\t}\n\treturn p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a non-empty array of integers arr and an integer k, return\n\tthe sum of the elements with at most two digits from the first k elements of arr.\n\n\tExample:\n\n\t\t\tInput: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n\t\t\tOutput: 24 # sum of 21 + 3\n\n\tConstraints:\n\t\t\t1. 1 <= len(arr) <= 100\n\t\t\t2. 1 <= k <= len(arr)\n\t*/\nconst addElements = (arr, k) => {\n\tlet p = 0\n\tfor (let i = 0; i < k; i++) {\n\t\tif (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n\t}\n\treturn p\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n\t*/\nconst getOddCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n\t\telse { t = t / 2 }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a positive integer n, return a list that has the even numbers in collatz sequence.\n\n\tThe Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n\tas follows: start with any positive integer n. Then each term is obtained from the \n\tprevious term as follows: if the previous term is even, the next term is one half of \n\tthe previous term. If the previous term is odd, the next term is 3 times the previous\n\tterm plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n\tNote: \n\t\t\t1. Collatz(1) is [1].\n\t\t\t2. returned list sorted in increasing order.\n\n\tFor example:\n\tgetEvenCollatz(5) returns [2, 4, 6, 8, 10, 12, 14, 16, 18] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1, 2, 4, 6, 8], so the even numbers are 2, 4, 6, 8, 10, 12, 14, 16, 18.\n\t*/\nconst getEvenCollatz = (n) => {\n\tlet p = []\n\tlet t = n\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 1) { break }\n\t\tif (t % 2 == 0) { p.push(t); t = t / 2 }\n\t\telse { t = 3 * t + 1 }\n\t}\n\treturn p\n}\n\n/*\n\tGiven a positive integer n, return the first number in the collatz sequence that is not equal to n.\n\n\tFor example:\n\tgetCollatzNot(5) returns 1 because 5 is not a collatz sequence.\n\tgetCollatzNot(12) returns 8 because 12 is a collatz sequence.\n\tgetCollatzNot(18) returns 9 because 18 is not a collatz sequence.\n\t*/\nconst getCollatzNot = (n) => {\n\tlet t = n\n\tlet p = []\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 0) { break }\n\t\tt = p[i]\n\t\tp.push(t)\n\t}\n\treturn p.length - 1\n}\n\n/*\n\tGiven a positive integer n, return the first number in the collatz sequence that is not equal to n.\n\n\tFor example:\n\tgetCollatzNot(5) returns 1 because 5 is not a collatz sequence.\n\tgetCollatzNot(12) returns 8 because 12 is a collatz sequence.\n\tgetCollatzNot(18) returns 9 because 18 is not a collatz sequence.\n\t*/\nconst getCollatzNot = (n) => {\n\tlet t = n\n\tlet p = []\n\twhile (1) {\n\t\tlet u = 0\n\t\tfor (let i = 0; i < p.length; i++) {\n\t\t\tif (t == p[i]) {\n\t\t\t\tu = 1\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (u == 0) { break }\n\t\tt = p[i]\n\t\tp.push(t)\n\t}\n\treturn p.length - 1\n}<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length != 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "/*You have to write a function which validates a given date string and\n\treturns true if the date is valid otherwise false.\n\tThe date is valid if all of the following rules are satisfied:\n\t1. The date string is not empty.\n\t2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n\t3. The months should not be less than 1 or higher than 12.\n\t4. The date should be in the format: mm-dd-yyyy\n\n\tfor example: \n\tvalidDate('03-11-2000') => true\n\n\tvalidDate('15-01-2012') => false\n\n\tvalidDate('04-0-2040') => false\n\n\tvalidDate('06-04-2020') => true\n\n\tvalidDate('06/04/2020') => false\n\t*/\nconst validDate = (date) => {\n\tlet t = date.split(/-/)\n\tif (t.length!= 3) { return false }\n\tif (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n\tif (t[0] == 2 && t[1] > 29) { return false }\n\tif (t[0] == 2 && t[1] < 29) { return false }\n\tif (t[0] == 2 && t[2] < 0) { return false }\n\tif (t[0] == 2 && t[2] > 31) { return false }\n\tif (t[0] == 3 && t[2] > 30) { return false }\n\tif (t[0] == 4 && t[2] > 29) { return false }\n\tif (t[0] == 4 && t[2] < 29) { return false }\n\tif (t[0] == 5 && t[2] > 30) { return false }\n\tif (t[0] == 5 && t[2] < 30) { return false }\n\tif (t[0] == 6 && t[2] > 29) { return false }\n\tif (t[0] == 6 && t[2] < 30) { return false }\n\tif (t[0] == 7 && t[2] > 30) { return false }\n\tif (t[0] == 7 && t[2] < 30) { return false }\n\tif (t[0] == 8 && t[2] > 30) { return false }\n\tif (t[0] == 8 && t[2] < 30) { return false }\n\tif (t[0] == 9 && t[2] > 29) { return false }\n\tif (t[0] == 9 && t[2] < 30) { return false }\n\tif (t[0] == 10 && t[2] > 29) { return false }\n\tif (t[0] == 10 && t[2] < 30) { return false }\n\tif (t[0] == 11 && t[2] > 30) { return false }\n\tif (t[0] == 11 && t[2] < 30) { return false }\n\tif (t[0] == 12 && t[2] > 30) { return false }\n\tif (t[0] == 12 && t[2] < 30) { return false }\n\treturn true\n}\n\n/*\n\tYou have to write a function which validates a given string and returns true if the string is a valid number else false.\n\tThe number should be in the format: 123 or 123.12 or 123.12.12\n\tThe number should not be less than zero or more than 999999.\n\tExample:\n\tvalidNumber('123') => true\n\tvalidNumber('123.12') => true\n\tvalidNumber('123.12.12') => true\n\tvalidNumber('1234') => false\n\tvalidNumber('0.1') => true\n\tvalidNumber('999.999') => true\n\t*/\nconst validNumber = (number) => {\n\tlet t = number.split('.')\n\tif (t.length == 1) {\n\t\tlet r = t[0]\n\t\tif (r < 0 || r > 999999) { return false }\n\t} else if (t.length == 2) {\n\t\tlet r = t[0]\n\t\tlet r2 = t[1]\n\t\tif (r < 0 || r > 999999 || r2 < 0 || r2 > 999999) { return false }\n\t} else {\n\t\treturn false\n\t}\n\treturn true\n}\n\n/*\n\tYou have to write a function which validates a given string and returns true if the string is a valid phone number else false.\n\tThe phone number should be in the format: 999-999-9999\n\tExample:\n\tvalidPhone('999-999-9999') => true\n\tvalidPhone('999.999.9999') => true\n\tvalidPhone('9999-9999-9999') => true\n\tvalidPhone('999.999.9999') => false\n\t*/\nconst validPhone = (phone) => {\n\tlet t = phone.split('-')\n\tif (t.length == 3) {\n\t\tlet r = t[0]\n\t\tlet r2 = t[1]\n\t\tlet r3 = t[2]\n\t\tif (r < 1 || r > 9999 || r2 < 1 || r2 > 9999 || r3 < 1 || r3 > 9999) { return false }\n\t} else {\n\t\treturn false\n\t}\n\treturn true\n}\n\n/*\n\tYou have to write a function which validates a given string and returns true if the string is a valid ipv4 address else false.\n\tThe ipv4 address should be in the format: 192.168.0.1\n\tExample:\n\tvalidIpv4('192.168.0.1') => true\n\tvalidIpv4('192.168.0.999') => true\n\tvalidIpv4('999.999.999.999') => true\n\tvalidIpv4('999.999.999') => false\n\t*/\nconst validIpv4 = (ip) => {\n\tlet t = ip.split('.')\n\tif (t.length!= 4) { return false }\n\tlet r = t[0]\n\tlet r2 = t[1]\n\tlet r3 = t[2]\n\tlet r4 = t[3]\n\tif (r < 1 || r > 255"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n\tshould split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n\talphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n\tExamples\n\tsplitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n\tsplitWords(\"abcdef\") == 3\n\t*/\nconst splitWords = (txt) => {\n\tlet t = txt.split(/\\s/)\n\tif (t.length > 1) {\n\t\treturn t\n\t} else {\n\t\tt = txt.split(/,/)\n\t\tif (t.length > 1) {\n\t\t\treturn t\n\t\t} else {\n\t\t\tlet p = 0\n\t\t\twhile (txt.charAt(p)!=='' && p < txt.length) {\n\t\t\t\tp++\n\t\t\t}\n\t\t\tlet q = txt.lastIndexOf(' ', p)\n\t\t\treturn [txt.substring(0, q), txt.substring(q + 1)]\n\t\t}\n\t}\n}\n\nconst sumWords = (n) => {\n\tlet s = 0\n\tfor (let i = 0; i < n; i++) {\n\t\ts += splitWords(input.val)[1].length\n\t}\n\treturn s\n}\n\nconst isPalindrome = (n) => {\n\tlet n_chars = splitWords(input.val)[1].length\n\tlet n_words = splitWords(input.val)[1].length\n\tlet n_lines = n_words / 2 + 1\n\tlet t = []\n\tlet i = 0\n\twhile (i < n_words) {\n\t\tlet j = n_words - 1\n\t\twhile (j >= i) {\n\t\t\tif (splitWords(input.val)[1].charAt(i)!== splitWords(input.val)[1].charAt(j)) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tj--\n\t\t}\n\t\tif (j >= i) {\n\t\t\tbreak\n\t\t}\n\t\ti++\n\t}\n\treturn i === n_words\n}\n\nconst isPermutation = (n) => {\n\tlet t = splitWords(input.val)[1]\n\tlet s = splitWords(input.val)[0]\n\tlet p = 0\n\twhile (p < t.length) {\n\t\tlet r = 0\n\t\twhile (r < t.length) {\n\t\t\tif (t.charAt(p)!== t.charAt(r)) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tr++\n\t\t}\n\t\tif (r === t.length) {\n\t\t\tbreak\n\t\t}\n\t\tp++\n\t}\n\treturn p === t.length\n}\n\nconst letterCombinations = (n) => {\n\tlet t = splitWords(input.val)[1]\n\tlet s = splitWords(input.val)[0]\n\tlet p = 0\n\tlet res = \"\"\n\twhile (p < t.length) {\n\t\tlet r = 0\n\t\twhile (r < t.length) {\n\t\t\tres += s.charAt(p) + t.charAt(r)\n\t\t\tr++\n\t\t}\n\t\tp++\n\t}\n\treturn res\n}\n\nconst letterCombinations_rec = (n, t) => {\n\tif (n === 0) {\n\t\treturn t\n\t} else {\n\t\treturn letterCombinations_rec(n - 1, t + splitWords(input.val)[0].charAt(n - 1))\n\t}\n}\n\nconst letterCombinations_rec_reverse = (n, t) => {\n\tif (n === 0) {\n\t\treturn t\n\t} else {\n\t\treturn letterCombinations_rec_reverse(n - 1, t + splitWords(input.val)[0].charAt(n - 1))\n\t}\n}\n\nconst letterCombinations_rec_iter = (n, t) => {\n\tif (n === 0) {\n\t\treturn t\n\t} else {\n\t\tlet c = splitWords(input.val)[0].charAt(n)\n\t\tlet res = \"\"\n\t\tfor (let i = 0; i < t.length; i++) {\n\t\t\tres += t.charAt(i)\n\t\t}\n\t\tres += c\n\t\treturn letterCombinations_rec_iter(n - 1, res)\n\t}\n}\n\nconst letterCombinations_rec_reverse_iter = (n, t) => {\n\tif (n === 0) {\n\t\treturn t\n\t} else {\n\t\tlet c = splitWords(input.val)[0].charAt(n)\n\t\tlet res = \"\"\n\t\tfor (let i = t.length - 1; i >= 0; i--) {\n\t\t\tres += t.charAt(i)\n\t\t}\n\t\tres += c\n\t\treturn letterCombinations_rec_reverse_iter(n - 1, res)\n\t}\n}\n\nconst letterCombinations_iter = (n, t) => {\n\tlet c = splitWords(input.val)[0].charAt(n)\n\tlet res = \"\"\n\tfor (let i = 0; i < t.length; i++) {\n\t\tres += t.charAt(i)\n\t}\n\tres += c\n\treturn letterCombinations_iter(n - 1, res)\n}\n\nconst letterCombinations_reverse_iter = (n, t) => {\n\tlet c = splitWords(input.val)[0].charAt(n)\n\tlet res = \"\"\n\tfor (let i = t.length - 1; i >= 0; i--) {\n\t\tres += t.charAt(i)\n\t}\n\tres += c\n\treturn letterCombinations_reverse_iter(n - 1, res)\n}\n\nconst letterCombinations_reverse = (n, t) => {\n\tlet c = splitWords(input.val)[0].charAt(n)\n\tlet res = \"\"\n\tfor (let i = t.length - 1; i >= 0; i--) {\n\t\tres += t.charAt(i)\n\t}\n\tres += c\n\treturn letterCombinations_reverse_iter(n - 1, res)\n}\n\nconst letterCombinations_reverse_iter = (n, t) => {\n\tlet c = splitWords(input.val)[0].charAt(n)\n\tlet res = \"\"\n\tfor (let i = t."}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "/* Given a list of numbers, return whether or not they are sorted\n\tin ascending order. If list has more than 1 duplicate of the same\n\tnumber, return false. Assume no negative numbers and only integers.\n\tExamples\n\tisSorted([5]) ➞ true\n\tisSorted([1, 2, 3, 4, 5]) ➞ true\n\tisSorted([1, 3, 2, 4, 5]) ➞ false\n\tisSorted([1, 2, 3, 4, 5, 6]) ➞ true\n\tisSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n\tisSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n\tisSorted([1, 2, 2, 3, 3, 4]) ➞ true\n\tisSorted([1, 2, 2, 2, 3, 4]) ➞ false\n\t*/\nconst isSorted = (lst) => {\n\tif (lst.length == 0) { return true }\n\tlet dup = 1\n\tlet pre = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (lst[i] < pre) { return false }\n\t\tif (lst[i] == pre) {\n\t\t\tdup += 1;\n\t\t\tif (dup == 2) { return false }\n\t\t} else {\n\t\t\tpre = lst[i]\n\t\t\tdup = 1;\n\t\t}\n\t}\n\treturn true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "/*You are given two intervals,\n\twhere each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n\tThe given intervals are closed which means that the interval (start, end)\n\tincludes both start and end.\n\tFor each given interval, it is assumed that its start is less or equal its end.\n\tYour task is to determine whether the length of intersection of these two \n\tintervals is a prime number.\n\tExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n\twhich its length is 1, which not a prime number.\n\tIf the length of the intersection is a prime number, return \"YES\",\n\totherwise, return \"NO\".\n\tIf the two intervals don't intersect, return \"NO\".\n\n\n\t[input/output] samples:\n\tintersection((1, 2), (2, 3)) ==> \"NO\"\n\tintersection((-1, 1), (0, 4)) ==> \"NO\"\n\tintersection((-3, -1), (-5, 5)) ==> \"YES\"\n\t*/\nconst intersection = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n\tif (len % 2 == 0) { return \"NO\" }\n\treturn \"YES\"\n}\n\nconst intersection2 = (interval1, interval2) => {\n\tlet lo = interval1[0]\n\tif (interval2[0] > lo) { lo = interval2[0] }\n\tlet hi = interval1[1]\n\tif (interval2[1] < hi) { hi = interval2[1] }\n\tlet len = 0\n\tif (hi > lo) { len = hi - lo }\n\tif (len % 2 == 0) { return \"NO\" }\n\treturn \"YES\"\n}\n\nconst intersection3 = (interval1, interval2) => {\n\tif (interval1[1] < interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] > interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection4 = (interval1, interval2) => {\n\tif (interval1[1] < interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] > interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection5 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection6 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection7 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection8 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection9 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection10 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection11 = (interval1, interval2) => {\n\tif (interval1[0] <= interval2[1]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[1] >= interval2[0]) {\n\t\treturn \"NO\"\n\t}\n\tif (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nconst intersection12 ="}
{"task_id": "JavaScript/128", "prompt": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "/*\n\tYou are given an array arr of integers and you need to return\n\tsum of magnitudes of integers multiplied by product of all signs\n\tof each number in the array, represented by 1, -1 or 0.\n\tNote: return null for empty arr.\n\n\tExample:\n\t>>> prodSigns([1, 2, 2, -4]) == -9\n\t>>> prodSigns([0, 1]) == 0\n\t>>> prodSigns([]) == null\n\t*/\nconst prodSigns = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet n = 1\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += arr[i]\n\t\tif (arr[i] > 0) { n += 1 }\n\t\telse if (arr[i] < 0) { n -= 1 }\n\t}\n\treturn (n * s)\n}\n\n/*\n\tGiven an array arr of integers, return the maximum product of\n\tnumbers in the array multiplied by all the signs represented\n\tby 1, -1 or 0.\n\n\tExample:\n\t>>> maxProd([1, 2, 2, -4]) == 8\n\t>>> maxProd([0, 1]) == 0\n\t>>> maxProd([]) == null\n\t*/\nconst maxProd = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet max = 0\n\tlet n = 1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) { n += 1 }\n\t\telse if (arr[i] < 0) { n -= 1 }\n\t\tmax = Math.max(max, arr[i] * n)\n\t}\n\treturn max\n}\n\n/*\n\tGiven an array arr of integers, return the maximum product of\n\tnumbers in the array multiplied by all the signs represented\n\tby 1, -1 or 0.\n\n\tExample:\n\t>>> maxProd([1, 2, 2, -4]) == 8\n\t>>> maxProd([0, 1]) == 0\n\t>>> maxProd([]) == null\n\t*/\nconst maxProd2 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet max = 0\n\tlet n = 1\n\tlet sign = 1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) { n += 1 }\n\t\telse if (arr[i] < 0) { n -= 1 }\n\t\tsign *= (arr[i] > 0? 1 : -1)\n\t\tmax = Math.max(max, sign * n * arr[i])\n\t}\n\treturn max\n}\n\n/*\n\tGiven an array arr of integers, return sum of squares of\n\tall numbers in the array.\n\n\tExample:\n\t>>> sumSquare([1, 2, 3]) == 14\n\t>>> sumSquare([]) == 0\n\t>>> sumSquare([1, 2, 3, 4, 5]) == 100\n\t*/\nconst sumSquare = (arr) => {\n\tlet s = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\ts += Math.pow(arr[i], 2)\n\t}\n\treturn s\n}\n\n/*\n\tGiven an array arr of integers, return the sum of all\n\tpairs in the array.\n\n\tExample:\n\t>>> sumPair([1, 2, 3]) == 6\n\t>>> sumPair([]) == 0\n\t>>> sumPair([1, 2, 3, 4, 5]) == 30\n\t*/\nconst sumPair = (arr) => {\n\tlet s = 0\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tfor (let j = i + 1; j < arr.length; j++) {\n\t\t\ts += arr[i] * arr[j]\n\t\t}\n\t}\n\treturn s\n}\n\n/*\n\tGiven an array arr of positive integers, return the maximum\n\tof all numbers in the array multiplied by all the signs\n\trepresented by 1, -1 or 0.\n\n\tExample:\n\t>>> maxProduct([1, 2, 2, -4]) == 8\n\t>>> maxProduct([0, 1]) == 0\n\t>>> maxProduct([]) == null\n\t*/\nconst maxProduct = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet max = 0\n\tlet n = 1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) { n += 1 }\n\t\telse if (arr[i] < 0) { n -= 1 }\n\t\tmax = Math.max(max, arr[i] * n)\n\t}\n\treturn max\n}\n\n/*\n\tGiven an array arr of positive integers, return the maximum\n\tof all numbers in the array multiplied by all the signs\n\trepresented by 1, -1 or 0.\n\n\tExample:\n\t>>> maxProduct([1, 2, 2, -4]) == 8\n\t>>> maxProduct([0, 1]) == 0\n\t>>> maxProduct([]) == null\n\t*/\nconst maxProduct2 = (arr) => {\n\tif (arr.length == 0) { return null }\n\tlet max = 0\n\tlet n = 1\n\tlet sign = 1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > 0) { n += 1 }\n\t\telse if (arr[i] < 0) { n -= 1 }\n\t\tsign *= (arr[i] > 0? 1 : -1)\n\t\tmax = Math.max(max, sign * n * arr[i])\n\t}\n\treturn max\n}\n\nmodule.exports = {\n\tprodSigns,\n\tmaxProd,\n\tmaxProd2,\n\tsumSquare,\n\tsumPair,\n\tmaxProduct,\n\tmaxProduct2\n}<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "/*\n\tGiven a grid with N rows and N columns (N >= 2) and a positive integer k, \n\teach cell of the grid contains a value. Every integer in the range [1, N * N]\n\tinclusive appears exactly once on the cells of the grid.\n\n\tYou have to find the minimum path of length k in the grid. You can start\n\tfrom any cell, and in each step you can move to any of the neighbor cells,\n\tin other words, you can go to cells which share an edge with you current\n\tcell.\n\tPlease note that a path of length k means visiting exactly k cells (not\n\tnecessarily distinct).\n\tYou CANNOT go off the grid.\n\tA path A (of length k) is considered less than a path B (of length k) if\n\tafter making the ordered lists of the values on the cells that A and B go\n\tthrough (let's call them lst_A and lst_B), lst_A is lexicographically less\n\tthan lst_B, in other words, there exist an integer index i (1 <= i <= k)\n\tsuch that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n\tlst_A[j] = lst_B[j].\n\tIt is guaranteed that the answer is unique.\n\tReturn an ordered list of the values on the cells that the minimum path go through.\n\n\tExamples:\n\n\t\t\tInput: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n\t\t\tOutput: [1, 2, 1]\n\n\t\t\tInput: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n\t\t\tOutput: [1]\n\t*/\nconst minPath = (grid, k) => {\n\tlet m = 0\n\tlet n = 0\n\tfor (let i = 0; i < grid.length; i++) {\n\t\tfor (let j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tm = i;\n\t\t\t\tn = j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet min_path = []\n\twhile (k > 0) {\n\t\tif (m == 0 || n == 0) {\n\t\t\tbreak;\n\t\t}\n\t\tmin_path.unshift(grid[m][n])\n\t\tk--\n\t\tif (m - 1 >= 0) {\n\t\t\tmin_path.unshift(grid[m - 1][n])\n\t\t}\n\t\tif (n - 1 >= 0) {\n\t\t\tmin_path.unshift(grid[m][n - 1])\n\t\t}\n\t\tif (m + 1 < grid.length) {\n\t\t\tmin_path.unshift(grid[m + 1][n])\n\t\t}\n\t\tif (n + 1 < grid.length) {\n\t\t\tmin_path.unshift(grid[m][n + 1])\n\t\t}\n\t\tm = m - 1\n\t\tn = n - 1\n\t}\n\treturn min_path\n}\n\nconst grid = [\n\t[1,2,3],\n\t[4,5,6],\n\t[7,8,9]\n]\n\nconst k = 3\n\nconsole.log(minPath(grid, k))<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n\tthe last couple centuries. However, what people don't know is Tribonacci sequence.\n\tTribonacci sequence is defined by the recurrence:\n\ttri(1) = 3\n\ttri(n) = 1 + n / 2, if n is even.\n\ttri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n\tFor example:\n\ttri(2) = 1 + (2 / 2) = 2\n\ttri(4) = 3\n\ttri(3) = tri(2) + tri(1) + tri(4)\n\t\t\t\t = 2 + 3 + 3 = 8 \n\tYou are given a non-negative integer number n, you have to a return a list of the \n\tfirst n + 1 numbers of the Tribonacci sequence.\n\tExamples:\n\ttri(3) = [1, 3, 2, 8]\n\t*/\nconst tri = (n) => {\n\tif (n == 0) { return [1] }\n\tif (n == 1) { return [1, 3] }\n\tlet p = [1, 3]\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (i % 2 == 0) {\n\t\t\tp.push(1 + i / 2)\n\t\t} else {\n\t\t\tp.push(p[i - 1] + p[i - 2] + p[i + 1])\n\t\t}\n\t}\n\treturn p\n}\n\nmodule.exports = tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "/*Given a positive integer n, return the product of the odd digits.\n\tReturn 0 if all digits are even.\n\tFor example:\n\tdigits(1)  == 1\n\tdigits(4)  == 0\n\tdigits(235) == 15\n\t*/\nconst digits = (n) => {\n\tlet p = 1\n\tlet k = 1\n\twhile (n > 0) {\n\t\tlet y = n % 10\n\t\tif (y % 2 == 1) {\n\t\t\tp *= y; k = 0;\n\t\t}\n\t\tn = n / 10\n\t}\n\treturn p * k\n}\n\n/*\nGiven a number represented as an array of digits, plus one to the number.\n*/\nconst plusOne = (n) => {\n\tlet sum = 0\n\tlet i = n.length - 1\n\twhile (i >= 0) {\n\t\tsum = sum + n[i]\n\t\ti--\n\t}\n\tsum += 1\n\tlet result = []\n\tfor (let i = sum; i < 10; i++) {\n\t\tresult.push(0)\n\t}\n\tfor (let i = 0; i < n.length; i++) {\n\t\tresult[i] = n[i]\n\t}\n\treturn result\n}\n\nconst minusOne = (n) => {\n\tlet sum = 0\n\tlet i = n.length - 1\n\twhile (i >= 0) {\n\t\tsum = sum + n[i]\n\t\ti--\n\t}\n\tsum -= 1\n\tlet result = []\n\tfor (let i = sum; i > 0; i--) {\n\t\tresult.push(0)\n\t}\n\tfor (let i = 0; i < n.length; i++) {\n\t\tresult[i] = n[i]\n\t}\n\treturn result\n}\n\nconst getDifference = (x, y) => {\n\tlet diff = []\n\tfor (let i = 0; i < x.length; i++) {\n\t\tdiff.push(x[i] - y[i])\n\t}\n\treturn diff\n}\n\nconst getProduct = (x, y) => {\n\tlet p = 1\n\tfor (let i = 0; i < x.length; i++) {\n\t\tp = p * x[i]\n\t}\n\tfor (let i = 0; i < y.length; i++) {\n\t\tp = p * y[i]\n\t}\n\treturn p\n}\n\nconst getSum = (x, y) => {\n\tlet sum = 0\n\tfor (let i = 0; i < x.length; i++) {\n\t\tsum = sum + x[i]\n\t}\n\tfor (let i = 0; i < y.length; i++) {\n\t\tsum = sum + y[i]\n\t}\n\treturn sum\n}\n\nconst getGCD = (x, y) => {\n\tlet gcd = []\n\tlet xi = []\n\tlet yi = []\n\twhile (x > 0) {\n\t\txi.push(x % 10)\n\t\tx = x / 10\n\t}\n\twhile (y > 0) {\n\t\tyi.push(y % 10)\n\t\ty = y / 10\n\t}\n\tfor (let i = 0; i < xi.length; i++) {\n\t\tgcd.push(yi[i])\n\t}\n\tfor (let i = 0; i < xi.length; i++) {\n\t\twhile (yi[i]!= 0) {\n\t\t\tif (yi[i] > xi[i]) {\n\t\t\t\tyi[i] = yi[i] - xi[i]\n\t\t\t} else {\n\t\t\t\tyi[i] = yi[i] - xi[i] + 10\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < gcd.length; i++) {\n\t\tif (gcd[i] > 1) {\n\t\t\tgcd[i] = 1\n\t\t}\n\t}\n\treturn gcd\n}\n\nconst main = () => {\n\tlet n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tlet x = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tlet y = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\tlet p = getDifference(minusOne(n), minusOne(x))\n\tlet q = getDifference(minusOne(n), minusOne(y))\n\tlet r = getProduct(p, q)\n\tlet g = getGCD(r, getProduct(p, q))\n\tconsole.log(g)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "/*\n\tCreate a function that takes a string as input which contains only square brackets.\n\tThe function should return true if and only if there is a valid subsequence of brackets\n\twhere at least one bracket in the subsequence is nested.\n\tisNested('[[]]') ➞ true\n\tisNested('[]]]]]]][[[[[]') ➞ false\n\tisNested('[][]') ➞ false\n\tisNested('[]') ➞ false\n\tisNested('[[][]]') ➞ true\n\tisNested('[[]][[') ➞ true\n\t*/\nconst isNested = (string) => {\n\tlet opening_bracket_index = []\n\tlet closing_bracket_index1 = []\n\tfor (let i = 0; i < string.length; i++) {\n\t\tif (string[i] == '[') {\n\t\t\topening_bracket_index.push(i)\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.push(i)\n\t\t}\n\t}\n\tlet closing_bracket_index = []\n\tfor (let i = 0; i < closing_bracket_index1.length; i++) {\n\t\tif (string[closing_bracket_index1[i]] == '[') {\n\t\t\tclosing_bracket_index.push(closing_bracket_index1[i])\n\t\t}\n\t\telse {\n\t\t\tclosing_bracket_index1.pop()\n\t\t}\n\t}\n\treturn opening_bracket_index.length > 0 && closing_bracket_index.length > 0 && opening_bracket_index.length == closing_bracket_index.length\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\nconsole.log(isNested('[[]][['));<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1 != 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "/*You are given a list of numbers.\n\tYou need to return the sum of squared numbers in the given list,\n\tround each element in the list to the upper int(Ceiling) first.\n\tExamples:\n\tFor lst = [1,2,3] the output should be 14\n\tFor lst = [1,4,9] the output should be 98\n\tFor lst = [1,3,5,7] the output should be 84\n\tFor lst = [1.4,4.2,0] the output should be 29\n\tFor lst = [-2.4,1,1] the output should be 6\n\t*/\nconst sumSquares = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet y = lst[i]\n\t\tif (y % 1!= 0) {\n\t\t\tif (y > 0) { y = y - y % 1 + 1 }\n\t\t\telse { y = y - y % 1 - 1 }\n\t\t}\n\t\tp += y * y\n\t}\n\treturn p\n}\n\n/*\n\tFind the longest repeating number in an array\n\t*/\nconst longestRepeatingNumber = (lst) => {\n\tlet arr = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tlet x = lst[i]\n\t\tif (arr.indexOf(x)!= -1) {\n\t\t\tarr[arr.indexOf(x)] += 1\n\t\t} else {\n\t\t\tarr.push(x)\n\t\t\tarr[arr.indexOf(x)] += 1\n\t\t}\n\t}\n\tlet max = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i]\n\t\t}\n\t}\n\treturn max\n}\n\n/*\n\tFind the median value of an array\n\t*/\nconst median = (lst) => {\n\tlet i = lst.length // the length of the list\n\tlet j = (i - 1) / 2\n\tif (i % 2 == 0) {\n\t\treturn (lst[j] + lst[j + 1]) / 2\n\t} else {\n\t\treturn lst[j]\n\t}\n}\n\n/*\n\tFind the sum of the numbers in an array\n\t*/\nconst sum = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i]\n\t}\n\treturn sum\n}\n\nconst average = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i]\n\t}\n\treturn sum / lst.length\n}\n\n/*\n\tFind the mean of the numbers in an array\n\t*/\nconst mean = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += lst[i]\n\t}\n\treturn sum / lst.length\n}\n\n/*\n\tFind the geometric mean of an array\n\t*/\nconst geometricMean = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += Math.pow(lst[i], 1 / lst.length)\n\t}\n\treturn Math.pow(sum, 1 / lst.length)\n}\n\nconst count = (lst) => {\n\tlet count = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i]!= 0) {\n\t\t\tcount += 1\n\t\t}\n\t}\n\treturn count\n}\n\n/*\n\tFind the largest element in an array\n\t*/\nconst largest = (lst) => {\n\tlet max = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > max) {\n\t\t\tmax = lst[i]\n\t\t}\n\t}\n\treturn max\n}\n\nconst smallest = (lst) => {\n\tlet min = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] < min) {\n\t\t\tmin = lst[i]\n\t\t}\n\t}\n\treturn min\n}\n\n/*\n\tFind the sum of the absolute values in an array\n\t*/\nconst sumOfAbs = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += Math.abs(lst[i])\n\t}\n\treturn sum\n}\n\nconst maxOfAbs = (lst) => {\n\tlet max = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (Math.abs(lst[i]) > max) {\n\t\t\tmax = Math.abs(lst[i])\n\t\t}\n\t}\n\treturn max\n}\n\nconst minOfAbs = (lst) => {\n\tlet min = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (Math.abs(lst[i]) < min) {\n\t\t\tmin = Math.abs(lst[i])\n\t\t}\n\t}\n\treturn min\n}\n\nconst sumOfSquaresOfLengths = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += Math.pow(lst[i], 2)\n\t}\n\treturn sum\n}\n\n/*\n\tFind the sum of the squares of the elements in an array\n\t*/\nconst sumOfSquares = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += Math.pow(lst[i], 2)\n\t}\n\treturn sum\n}\n\n/*\n\tFind the sum of the absolute values of the elements in an array\n\t*/\nconst sumOfAbs = (lst) => {\n\tlet sum = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tsum += Math.abs(lst[i])\n\t}\n\treturn sum\n}\n\n/*\n\tFind the mean of the"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "/* Create a function that returns true if the last character\n\tof a given string is an alphabetical character and is not\n\ta part of a word, and false otherwise.\n\tNote: \"word\" is a group of characters separated by space.\n\tExamples:\n\tcheckIfLastCharIsALetter(\"apple pie\") ➞ false\n\tcheckIfLastCharIsALetter(\"apple pi e\") ➞ true\n\tcheckIfLastCharIsALetter(\"apple pi e \") ➞ false\n\tcheckIfLastCharIsALetter(\"\") ➞ false\n\t*/\nconst checkIfLastCharIsALetter = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// function checkIfWord(txt)\n// {\n// \tlet y = txt.charCodeAt()\n// \tif (y >= 65 && y <= 90) { return true }\n// \tif (y >= 97 && y <= 122) { return true }\n// \treturn false\n// }\n\nfunction checkIfWord(txt) {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n\nconst checkIfLastCharIsWordChar = (txt) => {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n\n// const checkIfLastCharIsWordChar = (txt) => {\n// \tlet len = txt.length\n// \tif (len == 0) { return false }\n// \tlet y = txt[len - 1].charCodeAt()\n// \tif (len == 1) {\n// \t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n// \t\treturn false\n// \t}\n// \tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n// \tif (txt[len - 2].toLowerCase() =='') {\n// \t\treturn false\n// \t}\n// \treturn true\n// }\n\n/*\nfunction checkIfLastCharIsWordChar(txt) {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n*/\n\nfunction checkIfLastCharIsALetter(txt) {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n\n/*\nfunction checkIfLastCharIsALetter(txt) {\n\tlet len = txt.length\n\tif (len == 0) { return false }\n\tlet y = txt[len - 1].charCodeAt()\n\tif (len == 1) {\n\t\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\t\treturn false\n\t}\n\tif ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n\tif (txt[len - 2].toLowerCase() =='') {\n\t\treturn false\n\t}\n\treturn true\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "/*Create a function which returns the largest index of an element which\n\tis not greater than or equal to the element immediately preceding it. If\n\tno such element exists then return -1. The given array will not contain\n\tduplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = arr.length - 1; i > 0; i--) {\n\t\tif (arr[i] < arr[i - 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Create a function which returns the smallest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 2\n\tcanArrange([1,2,3]) = 4\n\t*/\nconst canNotArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Create a function which returns the largest index of an element which\n\tis not less than the element immediately following it. If no such element\n\texists then return -1. The given array will not contain duplicate values.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canNotArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tsmallest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 0\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tlargest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canNotArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tlargest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 3\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canNotArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tsmallest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 0\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tsmallest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 0\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] < arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tsmallest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5]) = 0\n\tcanArrange([1,2,3]) = -1\n\t*/\nconst canArrange = (arr) => {\n\tif (arr.length == 0) { return -1 }\n\tfor (let i = 0; i < arr.length - 1; i++) {\n\t\tif (arr[i] > arr[i + 1]) { return i }\n\t}\n\treturn -1\n}\n\n/*Given an array of n elements, create a function which returns the index of the\n\tlargest element of the array, assuming that the elements are sorted. If no\n\tsuch element exists then return -1.\n\n\tExamples:\n\tcanArrange([1,2,4,3,5])"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegers = (lst) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n\t}\n\treturn (a === Infinity && b === -Infinity)? (null, null) : (b, a)\n}\n\n/*\n\tCreate a function that returns a tuple (a, b), where 'a' is\n\tthe largest of negative integers, and 'b' is the smallest\n\tof positive integers in a list.\n\tIf there is no negative or positive integers, return them as null.\n\tExamples:\n\tlargestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 2)\n\tlargestSmallestIntegers([]) == (null, null)\n\tlargestSmallestIntegers([0]) == (null, null)\n\t*/\nconst largestSmallestIntegersInRange = (lst, min, max) => {\n\tlet a = Infinity\n\tlet b = -Infinity\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] >= min && lst[i] <= max && lst[i] < a) { a = lst[i] }\n\t\tif (lst[i] < min && lst[i] > b) { b = lst[i] }\n\t}\n\treturn (a === Infinity && b === -Infinity)? (null, null) : (b, a)\n}\n\nconst largestSmallestIntegersInRangeExample = [2, 4, 1, 3, 5, 7]\nconst largestSmallestIntegersInRangeExample2 = [2, 4, 1, 3, 5, 7]\nconst largestSmallestIntegersInRangeExample3 = [0]\nconst largestSmallestIntegersInRangeExample4 = []\n\nconsole.log(largestSmallestIntegersInRange(largestSmallestIntegers(largestSmallestIntegersExample)))\nconsole.log(largestSmallestIntegersInRange(largestSmallestIntegersInRange(largestSmallestIntegersExample2)))\nconsole.log(largestSmallestIntegersInRange(largestSmallestIntegersInRange(largestSmallestIntegersExample3)))\nconsole.log(largestSmallestIntegersInRange(largestSmallestIntegersInRange(largestSmallestIntegersExample4)))\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be . or ,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "/*\n\tCreate a function that takes integers, floats, or strings representing\n\treal numbers, and returns the larger variable in its given variable type.\n\tReturn null if the values are equal.\n\tNote: If a real number is represented as a string, the floating point might be. or,\n\n\tcompareOne(1, 2.5) ➞ 2.5\n\tcompareOne(1, \"2,3\") ➞ \"2,3\"\n\tcompareOne(\"5,1\", \"6\") ➞ \"6\"\n\tcompareOne(\"1\", 1) ➞ null\n\t*/\nconst compareOne = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa < bb) return a\n\tif (bb < aa) return b\n\treturn null\n}\n\n/*\n\tCreate a function that takes two variables and returns the larger of the two\n\n\tcompareTwo(1, 2) ➞ 2\n\tcompareTwo(2, 1) ➞ 2\n\tcompareTwo(2, 3) ➞ 2\n\tcompareTwo(3, 2) ➞ 3\n\tcompareTwo(3, '3') ➞ 3\n\tcompareTwo('3', '2') ➞ '3'\n\tcompareTwo('3', '1') ➞ '3'\n\tcompareTwo('3', 3) ➞ '3'\n\tcompareTwo(3, '3') ➞ 3\n\tcompareTwo(3, '1') ➞ '3'\n\tcompareTwo(1, '1') ➞ null\n\tcompareTwo(2, '2') ➞ null\n\tcompareTwo('2', 2) ➞ '2'\n\tcompareTwo('2', '2') ➞ '2'\n\tcompareTwo('2', '2.5') ➞ '2.5'\n\tcompareTwo('2', '3.5') ➞ '3.5'\n\tcompareTwo('3.5', '3.5') ➞ '3.5'\n\tcompareTwo('3.5', '3') ➞ '3.5'\n\tcompareTwo('3.5', '1') ➞ '3.5'\n\tcompareTwo('1', '2') ➞ null\n\t*/\nconst compareTwo = (a, b) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tif (aa < bb) return a\n\tif (bb < aa) return b\n\treturn null\n}\n\n/*\n\tCreate a function that takes three variables and returns the larger of the two\n\n\tcompareThree(1, 2, 3) ➞ 3\n\tcompareThree(3, 2, 1) ➞ 3\n\tcompareThree(3, 3, 2) ➞ 3\n\tcompareThree(3, 1, 2) ➞ 3\n\tcompareThree(2, 3, 1) ➞ 3\n\tcompareThree(2, 1, 3) ➞ 3\n\tcompareThree(2, 1, 2) ➞ 3\n\tcompareThree(1, 3, 1) ➞ 3\n\tcompareThree(2, 1, 1) ➞ 3\n\tcompareThree('3', '2', '1') ➞ '3'\n\tcompareThree('1', '2', '3') ➞ '1'\n\tcompareThree('1', '1', '2') ➞ '1'\n\tcompareThree('2', '3', '1') ➞ '2'\n\tcompareThree('2', '1', '3') ➞ '2'\n\tcompareThree('2', '1', '1') ➞ '2'\n\tcompareThree('3', '1', '1') ➞ '3'\n\tcompareThree('1', '3', '1') ➞ '1'\n\tcompareThree('1', '1', '3') ➞ '1'\n\tcompareThree('1', '2', '2') ➞ null\n\tcompareThree('2', '1', '2') ➞ null\n\tcompareThree('3', '1', '2') ➞ null\n\t*/\nconst compareThree = (a, b, c) => {\n\tlet aa = Number(a)\n\tif (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n\tlet bb = Number(b)\n\tif (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n\tlet cc = Number(c)\n\tif (typeof c =='string') { cc = Number(c.replace(',', '.')) }\n\tif (aa < bb) return a\n\tif (bb < aa) return b\n\tif (cc < bb) return c\n\tif (cc < aa) return c\n\treturn null\n}\n\n/*\n\tCreate a function that takes four variables and returns the largest\n\n\tcompareFour(1, 2, 3, 4) ➞ 4\n\tcompareFour(4, 3, 2, 1) ➞ 4\n\tcompareFour(4, 4, 3, 2) ➞ 4\n\tcompareFour(4, 3, 3, 4) ➞ 4\n\tcompareFour(3, 4, 4, 1) ➞ 4\n\tcompareFour(3, 3, 4, 4) ➞ 4\n\tcompareFour(4, 4, 4, 3) ➞ 4\n\tcompareFour(3, 3, 3, 3) ➞ 3\n\tcompareFour('1', '2', '3', '4') ➞ '4'\n\tcompareFour('4', '3', '2', '1') ➞ '4'\n\tcompareFour('4', '4', '3', '2') ➞ '4'\n\tcompareFour('4',"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n\tExample\n\tisEqualToSumEven(4) == false\n\tisEqualToSumEven(6) == false\n\tisEqualToSumEven(8) == true\n\t*/\nconst isEqualToSumEven = (n) => {\n\treturn (n >= 8 && n % 2 == 0)\n}\n\nconst isNotEqualToSumEven = (n) => {\n\treturn (n % 2!= 0)\n}\n\nconst isEven = (n) => {\n\treturn (n % 2 == 0)\n}\n\nconst isOdd = (n) => {\n\treturn (n % 2 == 1)\n}\n\nconst isGreaterThanTen = (n) => {\n\treturn (n > 10)\n}\n\nconst isLessThanTen = (n) => {\n\treturn (n < 10)\n}\n\nconst isLessThanOrEqualToTen = (n) => {\n\treturn (n <= 10)\n}\n\nconst isGreaterThanOrEqualToTen = (n) => {\n\treturn (n >= 10)\n}\n\nconst isBetweenTenAndTwenty = (n) => {\n\treturn (n >= 10 && n <= 20)\n}\n\nconst isLessThanTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isGreaterThanTwenty = (n) => {\n\treturn (n > 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanTwenty = (n) => {\n\treturn (n >= 10)\n}\n\nconst isNotGreaterThanTwenty = (n) => {\n\treturn (n <= 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanOrEqualToTwenty = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanOrEqualToTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanTen = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanTen = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isLessThanOrEqualToTwenty = (n) => {\n\treturn (n <= 20)\n}\n\nconst isGreaterThanOrEqualToTwenty = (n) => {\n\treturn (n >= 20)\n}\n\nconst isBetweenTenAndTwenty = (n) => {\n\treturn (n >= 10 && n <= 20)\n}\n\nconst isGreaterThanTwenty = (n) => {\n\treturn (n > 20)\n}\n\nconst isLessThanTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotGreaterThanTwenty = (n) => {\n\treturn (n <= 20)\n}\n\nconst isNotLessThanTwenty = (n) => {\n\treturn (n >= 10)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanOrEqualToTwenty = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanOrEqualToTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanTen = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanTen = (n) => {\n\treturn (n <= 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanOrEqualToTen = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanOrEqualToTen = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isLessThanOrEqualToTwenty = (n) => {\n\treturn (n <= 20)\n}\n\nconst isGreaterThanOrEqualToTwenty = (n) => {\n\treturn (n >= 20)\n}\n\nconst isBetweenTenAndTwenty = (n) => {\n\treturn (n >= 10 && n <= 20)\n}\n\nconst isLessThanTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isGreaterThanTwenty = (n) => {\n\treturn (n > 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotGreaterThanTwenty = (n) => {\n\treturn (n <= 20)\n}\n\nconst isNotLessThanTwenty = (n) => {\n\treturn (n >= 10)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanOrEqualToTwenty = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanOrEqualToTwenty = (n) => {\n\treturn (n < 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n > 20)\n}\n\nconst isNotLessThanTen = (n) => {\n\treturn (n > 10)\n}\n\nconst isNotGreaterThanTen = (n) => {\n\treturn (n <= 20)\n}\n\nconst isNotBetweenTenAndTwenty = (n) => {\n\treturn (n < 10 || n"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "/*The Brazilian factorial is defined as:\n\tbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n\twhere n > 0\n\n\tFor example:\n\t>>> specialFactorial(4)\n\t288\n\n\tThe function will receive an integer as input and should return the special\n\tfactorial of this integer.\n\t*/\nconst specialFactorial = (n) => {\n\tlet p = 1;\n\tlet t = 1;\n\twhile (n > 1) {\n\t\tlet y = p;\n\t\twhile (y > 0) {\n\t\t\ty--;\n\t\t\tp = p * (n - t) / y;\n\t\t\tt++;\n\t\t}\n\t\tn--;\n\t}\n\treturn p;\n}\n\n// Exercicio 2\n/*\n\tThe function should calculate the sum of the first n positive integers\n\tThe sum should be returned as a number.\n\t*/\nconst sum = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\treturn s;\n}\n\n// Exercicio 3\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 4\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegPos = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 5\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegPosNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 6\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumPosNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 7\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegPos = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 8\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumPosNegNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 9\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegPosNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 10\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 11\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumPosNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 12\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumNegPos = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\ts -= i;\n\t}\n\treturn s;\n}\n\n// Exercicio 13\n/*\n\tThe function should return the sum of the first n positive and negative\n\tintegers\n\tThe sum should be returned as a number.\n\t*/\nconst sumPosNegNeg = (n) => {\n\tlet s = 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\ts += i;\n\t}\n\tfor (let i = 1; i <= n;"}
{"task_id": "JavaScript/140", "prompt": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] == ' ') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "/*\n\tGiven a string text, replace all spaces in it with underscores, \n\tand if a string has more than 2 consecutive spaces, \n\tthen replace all consecutive spaces with - \n  \n\tfixSpaces(\"Example\") == \"Example\"\n\tfixSpaces(\"Example 1\") == \"Example_1\"\n\tfixSpaces(\" Example 2\") == \"_Example_2\"\n\tfixSpaces(\" Example   3\") == \"_Example-3\"\n\t*/\nconst fixSpaces = (text) => {\n\tlet t = ''\n\tlet c = 0\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { c++ }\n\t\telse if (c > 0) {\n\t\t\tif (c == 1) { t += '_' }\n\t\t\tif (c == 2) { t += '__' }\n\t\t\tif (c > 2) { t += '-' }\n\t\t\tt += text[i]\n\t\t\tc = 0\n\t\t}\n\t\telse { t += text[i] }\n\t}\n\tif (c > 0) {\n\t\tif (c == 1) { t += '_' }\n\t\tif (c == 2) { t += '__' }\n\t\tif (c > 2) { t += '-' }\n\t\tt += '-'\n\t}\n\treturn t\n}\n\nconst getUniqueString = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t\n}\n\nconst parseForUnique = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t\n}\n\nconst parseForUniqueSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\nconst splitString = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tt += text[i]\n\t}\n\treturn t\n}\n\nconst getStringLength = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tt += text[i]\n\t}\n\treturn t.length\n}\n\nconst isValid = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { return false }\n\t}\n\treturn true\n}\n\nconst getString = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tt += text[i]\n\t}\n\treturn t\n}\n\nconst getUniqueLength = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t.length\n}\n\nconst isValidSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { return false }\n\t}\n\treturn true\n}\n\nconst parseForUniqueSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\nconst parseForUniqueSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\nconst isValidSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { return false }\n\t}\n\treturn true\n}\n\nconst isValidSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { return false }\n\t}\n\treturn true\n}\n\nconst parseForUniqueSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\nconst parseForUniqueSpace = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i] =='') { t += '_' }\n\t\telse { t += text[i] }\n\t}\n\treturn t\n}\n\nconst getUniqueLength = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t.length\n}\n\nconst getUniqueLength = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t.length\n}\n\nconst parseForUnique = (text) => {\n\tlet t = ''\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (t.indexOf(text[i]) == -1) { t += text[i] }\n\t}\n\treturn t\n}\n\nconst parseForUnique = (text) => {\n\tlet"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length != 2) { return 'No' }\n\tif (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "/*Create a function which takes a string representing a file's name, and returns\n\t'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\tA file's name is considered to be valid if and only if all the following conditions \n\tare met:\n\t- There should not be more than three digits ('0'-'9') in the file's name.\n\t- The file's name contains exactly one dot '.'\n\t- The substring before the dot should not be empty, and it starts with a letter from \n\tthe latin alphapet ('a'-'z' and 'A'-'Z').\n\t- The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\tExamples:\n\tfileNameCheck(\"example.txt\") # => 'Yes'\n\tfileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n\t*/\nconst fileNameCheck = (file_name) => {\n\tlet t = file_name.split(/\\./)\n\tif (t.length!= 2) { return 'No' }\n\tif (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n\tif (t[0] == '') { return 'No' }\n\tlet a = t[0][0].charCodeAt()\n\tif (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n\treturn 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "/*\"\n\tThis function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n\tmultiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n\tchange the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n\tExamples:\n\tFor lst = [1,2,3] the output should be 6\n\tFor lst = []  the output should be 0\n\tFor lst = [-1,-5,2,-1,-5]  the output should be -126\n\t*/\nconst sumSquares = (lst) => {\n\tlet y = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (i % 3 == 0) { y += lst[i] * lst[i] }\n\t\telse if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n\t}\n\treturn y\n}\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9])) // 6\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126])) // -126\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "/*\n\tYou are given a string representing a sentence,\n\tthe sentence contains some words separated by a space,\n\tand you have to return a string that contains the words from the original sentence,\n\twhose lengths are prime numbers,\n\tthe order of the words in the new string should be the same as the original one.\n\n\tExample 1:\n\t\t\tInput: sentence = \"This is a test\"\n\t\t\tOutput: \"is\"\n\n\tExample 2:\n\t\t\tInput: sentence = \"lets go for swimming\"\n\t\t\tOutput: \"go for\"\n\n\tConstraints:\n\t\t\t* 1 <= len(sentence) <= 100\n\t\t\t* sentence contains only letters\n\t*/\nconst wordsInSentence = (sentence) => {\n\tlet t = sentence.split(/\\s/)\n\tlet p = ''\n\tfor (let j = 0; j < t.length; j++) {\n\t\tlet len = t[j].length;\n\t\tlet u = 1\n\t\tif (len == 1 || len == 0) { continue }\n\t\tfor (let i = 2; i * i <= len; i++) {\n\t\t\tif (t[j].includes(t[j].substring(0, i))) {\n\t\t\t\tu = i\n\t\t\t}\n\t\t}\n\t\tp += t[j].substring(0, u)\n\t}\n\treturn p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "/*Your task is to implement a function that will simplify the expression\n\tx * n. The function returns true if x * n evaluates to a whole number and false\n\totherwise. Both x and n, are string representation of a fraction, and have the following format,\n\t<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n\tYou can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n\tsimplify(\"1/5\", \"5/1\") = true\n\tsimplify(\"1/6\", \"2/1\") = false\n\tsimplify(\"7/10\", \"10/2\") = false\n\t*/\nconst simplify = (x, n) => {\n\tlet a = x.split(/\\//)\n\tlet b = n.split(/\\//)\n\tlet m = Number(a[0]) * Number(b[0])\n\tlet m1 = Number(a[1]) * Number(b[1])\n\tif (m === m1) {\n\t\tif (m % 1 === 0) {\n\t\t\treturn true\n\t\t} else {\n\t\t\treturn false\n\t\t}\n\t} else {\n\t\treturn false\n\t}\n}\n\nconst solve = (args) => {\n\tlet input = args[0]\n\tlet n = args[1]\n\tlet result = simplify(input, n)\n\tif (result) {\n\t\tconsole.log(\"The simplified fraction is\", input)\n\t} else {\n\t\tconsole.log(\"The original fraction is\", input)\n\t}\n}\n\nsolve([\n\t\"7/10\",\n\t\"10/2\"\n])\n\nsolve([\n\t\"1/5\",\n\t\"5/1\"\n])\n\nsolve([\n\t\"2/5\",\n\t\"5/1\"\n])\n\nsolve([\n\t\"4/5\",\n\t\"5/1\"\n])\n\nsolve([\n\t\"3/5\",\n\t\"5/1\"\n])\n\nsolve([\n\t\"6/5\",\n\t\"5/1\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/1\"\n])\n\nsolve([\n\t\"2/3\",\n\t\"3/1\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/1\"\n])\n\nsolve([\n\t\"2/4\",\n\t\"4/1\"\n])\n\nsolve([\n\t\"2/8\",\n\t\"8/1\"\n])\n\nsolve([\n\t\"4/8\",\n\t\"8/1\"\n])\n\nsolve([\n\t\"2/5\",\n\t\"5/2\"\n])\n\nsolve([\n\t\"1/5\",\n\t\"5/2\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/2\"\n])\n\nsolve([\n\t\"3/4\",\n\t\"4/2\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"3/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"2/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"2/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/5\",\n\t\"5/3\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\"2/4\"\n])\n\nsolve([\n\t\"1/3\",\n\t\"3/4\"\n])\n\nsolve([\n\t\"3/8\",\n\t\"8/2\"\n])\n\nsolve([\n\t\"3/7\",\n\t\"7/2\"\n])\n\nsolve([\n\t\"1/2\",\n\t\""}
{"task_id": "JavaScript/145", "prompt": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*\n\tWrite a function which sorts the given list of integers\n\tin ascending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPoints = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m === n) {\n\t\t\t\tif (h > d) {\n\t\t\t\t\tp[k] = y * p[k] + y * u * p[k + 1]\n\t\t\t\t\tp[k + 1] = u * p[k] + p[k + 1]\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\tp[k] = -y * p[k] + y * p[k + 1]\n\t\t\t\t\tp[k + 1] = p[k]\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\n/*\n\tWrite a function which sorts the given list of integers\n\tin descending order according to the sum of their digits.\n\tNote: if there are several items with similar sum of their digits,\n\torder them based on their index in original list.\n\n\tFor example:\n\t>>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n\t>>> orderByPoints([]) == []\n\t*/\nconst orderByPointsDesc = (nums) => {\n\tlet p = nums\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet m = 0\n\t\t\tlet n = 0\n\t\t\tlet h = p[k]\n\t\t\tlet d = p[k + 1]\n\t\t\tlet y = 1\n\t\t\tlet u = 1\n\t\t\tif (h < 0) { y = -1; h = -h; }\n\t\t\tif (d < 0) { u = -1; d = -d; }\n\t\t\twhile (h >= 10) {\n\t\t\t\tm += h % 10;\n\t\t\t\th = (h - h % 10) / 10;\n\t\t\t}\n\t\t\twhile (d >= 10) {\n\t\t\t\tn += d % 10;\n\t\t\t\td = (d - d % 10) / 10;\n\t\t\t}\n\t\t\tif (m === n) {\n\t\t\t\tif (h > d) {\n\t\t\t\t\tp[k] = -y * p[k] + y * u * p[k + 1]\n\t\t\t\t\tp[k + 1] = -u * p[k] + p[k + 1]\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\tp[k] = y * p[k] + y * p[k + 1]\n\t\t\t\t\tp[k + 1] = p[k]\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\n\nconst nums = [2, 3, 9, 11, 12, 17, -11, 17, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3, -9, -11, -12, -17, -2, -3]\n\nconsole.log(orderByPoints(nums))\nconsole.log(orderByPointsDesc(nums))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that takes an array of numbers as input and returns \n\tthe number of elements in the array that are greater than 10 and both \n\tfirst and last digits of a number are odd (1, 3, 5, 7, 9).\n\tFor example:\n\tspecialFilter([15, -73, 14, -15]) => 1 \n\tspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n\t*/\nconst specialFilter = (nums) => {\n\tlet p = 0\n\tfor (let i = 0; i < nums.length; i++) {\n\t\tif (nums[i] < 10) { continue }\n\t\tlet y = nums[i].toString()\n\t\tif (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n\t\t\tp++\n\t\t}\n\t}\n\treturn p\n}\n\nmodule.exports = specialFilter\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getMaxTriples = (n) => {\n\tlet y = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ty.push(i * i - i + 1)\n\t}\n\tlet u = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (y[i] + y[j] + y[k] % 3 === 0) {\n\t\t\t\t\tu++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn u\n}\n\n/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 2\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t\t\ta = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\t\t\tThe only valid triple is (3, 5, 11).\n\t*/\nconst getTriples2 = (n) => {\n\tlet a = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ta.push(i * i - i + 1)\n\t}\n\tlet result = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (a[i] + a[j] + a[k] % 3 === 0) {\n\t\t\t\t\tresult++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 2\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t\t\ta = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n\t\t\tThe only valid triple is (3, 5, 11).\n\t*/\nconst getTriples3 = (n) => {\n\tlet a = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ta.push(i * i - i + 1)\n\t}\n\tlet result = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (a[i] + a[j] + a[k] % 3 === 0) {\n\t\t\t\t\tresult++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 1\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t*/\nconst getTriples4 = (n) => {\n\tlet a = []\n\tfor (let i = 1; i <= n; i++) {\n\t\ta.push(i * i - i + 1)\n\t}\n\tlet result = 0\n\tfor (let i = 0; i < n - 2; i++) {\n\t\tfor (let j = i + 1; j < n - 1; j++) {\n\t\t\tfor (let k = j + 1; k < n; k++) {\n\t\t\t\tif (a[i] + a[j] + a[k] % 3 === 0) {\n\t\t\t\t\tresult++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n/*\n\tYou are given a positive integer n. You have to create an integer array a of length n.\n\t\t\tFor each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n\t\t\tReturn the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n\tand a[i] + a[j] + a[k] is a multiple of 3.\n\n\tExample :\n\t\t\tInput: n = 5\n\t\t\tOutput: 2\n\t\t\tExplanation: \n\t\t\ta = [1, 3, 7, 13, 21]\n\t\t\tThe only valid triple is (1, 7, 13).\n\t\t\ta = [3, 5, 7, 9, 11, 13,"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n\tis Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n\tUranus, Neptune.\n\tWrite a function that takes two planet names as strings planet1 and planet2.\n\tThe function should return a tuple containing all planets whose orbits are\n\tlocated between the orbit of planet1 and the orbit of planet2, sorted by\n\tthe proximity to the sun.\n\tThe function should return an empty tuple if planet1 or planet2\n\tare not correct planet names.\n\tExamples\n\tbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n\tbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\tbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\t*/\nconst bf = (planet1, planet2) => {\n\tlet y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\tlet u = []\n\tlet lo = -1\n\tlet hi = -1\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet1) { lo = i }\n\t}\n\tfor (let i = 0; i < 8; i++) {\n\t\tif (y[i] == planet2) { hi = i }\n\t}\n\tif (lo == -1 || hi == -1) return []\n\tfor (let i = lo; i <= hi; i++) {\n\t\tu.push(y[i])\n\t}\n\tu.sort((a, b) => {\n\t\tlet a1 = Math.abs(Math.cos(Math.acos(Math.cos(Math.PI / 4 - Math.PI / 2 * y[a].toUpperCase().charCodeAt(0) / 180)) * Math.PI / 180))\n\t\tlet b1 = Math.abs(Math.cos(Math.acos(Math.cos(Math.PI / 4 - Math.PI / 2 * y[b].toUpperCase().charCodeAt(0) / 180)) * Math.PI / 180))\n\t\treturn a1 - b1\n\t})\n\treturn u\n}\n\nlet result = bf('Mercury', 'Neptune')\nconsole.log(result)<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "/*Write a function that accepts a list of strings as a parameter,\n\tdeletes the strings that have odd lengths from it,\n\tand returns the resulted list with a sorted order,\n\tThe list is always a list of strings and never an array of numbers,\n\tand it may contain duplicates.\n\tThe order of the list should be ascending by length of each word, and you\n\tshould return the list sorted by that rule.\n\tIf two words have the same length, sort the list alphabetically.\n\tThe function should return a list of strings in sorted order.\n\tYou may assume that all words will have the same length.\n\tFor example:\n\tassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n\tassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n\t*/\nconst sortedListSum = (lst) => {\n\tlet p = []\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i].length % 2 == 0) {\n\t\t\tp.push(lst[i])\n\t\t}\n\t}\n\tfor (let j = p.length - 2; j >= 0; j--) {\n\t\tfor (let k = 0; k <= j; k++) {\n\t\t\tlet f = 0\n\t\t\tif (p[k].length > p[k + 1].length) { f = 1 }\n\t\t\tif (p[k].length == p[k + 1].length) {\n\t\t\t\tlet r = p[k].length\n\t\t\t\tfor (let l = 0; l < r; l++) {\n\t\t\t\t\tif (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n\t\t\t\t\t\tf = 1;\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (f == 1) {\n\t\t\t\tp.splice(k, 1)\n\t\t\t\tk--\n\t\t\t}\n\t\t}\n\t}\n\treturn p\n}\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"ab\", \"a\", \"aaa\", \"cd\"]))\nconsole.log(sortedListSum([\"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\", \"ab\","}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "/*A simple program which should return the value of x if n is \n\ta prime number and should return the value of y otherwise.\n\n\tExamples:\n\tfor xOrY(7, 34, 12) == 34\n\tfor xOrY(15, 8, 5) == 5\n  \n\t*/\nconst xOrY = (n, x, y) => {\n\tlet len = n\n\tif (len == 1 || len == 0) { return y }\n\tfor (let i = 2; i * i <= len; i++) {\n\t\tif (len % i === 0) { return x }\n\t}\n\treturn y\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n\tin the list that are odd. Ignore numbers that are negative or not integers.\n\tdoubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n\tdoubleTheDifference([-1, -2, 0]) == 0\n\tdoubleTheDifference([9, -2]) == 81\n\tdoubleTheDifference([0]) == 0\n\tIf the input list is empty, return 0.\n\t*/\nconst doubleTheDifference = (lst) => {\n\tlet p = 0\n\tfor (let i = 0; i < lst.length; i++) {\n\t\tif (lst[i] % 2 == 1 && lst[i] > 0) {\n\t\t\tp += lst[i] * lst[i]\n\t\t}\n\t}\n\treturn p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n\tevent is finally known. The feelings and thoughts you have at that moment are\n\tdefinitely worth noting down and comparing.\n\tYour task is to determine if a person correctly guessed the results of a number of matches.\n\tYou are given two arrays of scores and guesses of equal length, where each index shows a match. \n\tReturn an array of the same length denoting how far off each guess was. If they have guessed correctly,\n\tthe value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n\texample:\n\n\tcompare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n\tcompare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\t*/\nconst compare = (game, guess) => {\n\tfor (let i = 0; i < guess.length; i++) {\n\t\tgame[i] -= guess[i]\n if (game[i]<0)\n  game[i] = 0\n  \n\t}\n\treturn game\n}\n\nexport default compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n\tThe extensions are to be used to load additional classes to the class. The\n\tstrength of the extension is as follows: Let CAP be the number of the uppercase\n\tletters in the extension's name, and let SM be the number of lowercase letters\n\tin the extension's name, the strength is given by the fraction CAP - SM.\n\tYou should find the strongest extension and return a string in this\n\tformat: ClassName.StrongestExtensionName.\n\tIf there are two or more extensions with the same strength, you should\n\tchoose the one that comes first in the list.\n\tFor example, if you are given \"Slices\" as the class and a list of the\n\textensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\treturn 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n\t(its strength is -1).\n\tExample:\n\tfor strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n\t*/\nconst strongestExtension = (class_name, extensions) => {\n\tlet u = 0\n\tlet s = -Infinity\n\tfor (let i = extensions.length - 1; i >= 0; i--) {\n\t\tlet y = 0\n\t\tfor (let j = 0; j < extensions[i].length; j++) {\n\t\t\tlet k = extensions[i][j].charCodeAt()\n\t\t\tif (k >= 65 && k <= 90) { y += 1 }\n\t\t\tif (k >= 97 && k <= 122) { y -= 1 }\n\t\t}\n\t\tif (y > u) {\n\t\t\tu = y\n\t\t\ts = i\n\t\t}\n\t}\n\treturn class_name + '.' + extensions[s]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n\tcycpatternCheck(\"abcd\",\"abd\") => false\n\tcycpatternCheck(\"hello\",\"ell\") => true\n\tcycpatternCheck(\"whassup\",\"psus\") => false\n\tcycpatternCheck(\"abab\",\"baa\") => true\n\tcycpatternCheck(\"efef\",\"eeff\") => false\n\tcycpatternCheck(\"himenss\",\"simen\") => true\n\t*/\nconst cycpatternCheck = (a, b) => {\n\tlet l = b.length\n\tlet pat = b + b\n\tfor (let i = 0; i < a.length - l + 1; i++) {\n\t\tfor (let j = 0; j < l + 1; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < l; k++) {\n\t\t\t\tif (a[i + k]!= pat[j + k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\treturn false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n\tevenOddCount(-12) ==> (1, 1)\n\tevenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = num / 2\n  }\n  return (e, o)\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "/*\n\tGiven a positive integer, obtain its roman numeral equivalent as a string,\n\tand return it in lowercase.\n\tRestrictions: 1 <= num <= 1000\n\n\tExamples:\n\t>>> intToMiniRoman(19) == 'xix'\n\t>>> intToMiniRoman(152) == 'clii'\n\t>>> intToMiniRoman(426) == 'cdxxvi'\n\t*/\nconst intToMiniRoman = (number) => {\n\tlet num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n\tlet sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n\tlet i = 12\n\tlet res = ''\n\twhile (number) {\n\t\tlet div = (number - number % num[i]) / num[i]\n\t\tnumber = number % num[i]\n\t\tres += sym[i] + sym[div]\n\t\ti--\n\t}\n\treturn res.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n\tsides form a right-angled triangle, false otherwise.\n\tA right-angled triangle is a triangle in which one angle is right angle or\n\t90 degree.\n\tExample:\n\trightAngleTriangle(3, 4, 5) == true\n\trightAngleTriangle(1, 2, 3) == false\n\t*/\nconst rightAngleTriangle = (a, b, c) => {\n\treturn (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\nconst triangle = (a, b, c) => {\n\treturn rightAngleTriangle(a, b, c) && rightAngleTriangle(b, c, a) && rightAngleTriangle(c, a, b)\n}\n\nconst isRightAngledTriangle = (a, b, c) => {\n\treturn triangle(a, b, c)\n}\n\nconst isEquilateral = (a, b, c) => {\n\treturn isRightAngledTriangle(a, b, c) && isRightAngledTriangle(b, c, a) && isRightAngledTriangle(c, a, b)\n}\n\nconst isIrregular = (a, b, c) => {\n\treturn!isEquilateral(a, b, c)\n}\n\nconst isRegular = (a, b, c) => {\n\treturn isEquilateral(a, b, c)\n}\n\nconst isRightAngledTriangles = (a, b, c, d, e, f, g) => {\n\treturn isRightAngledTriangle(a, b, c) && isRightAngledTriangle(d, e, f) && isRightAngledTriangle(g, b, a)\n}\n\nconst isRegularTriangle = (a, b, c, d, e, f) => {\n\treturn isRightAngledTriangles(a, b, c, d, e, f) && isEquilateral(a, b, c) && isEquilateral(d, e, f)\n}\n\nconst isIrregularTriangle = (a, b, c, d, e, f) => {\n\treturn isRegularTriangle(a, b, c, d, e, f) &&!isRegular(a, b, c) &&!isRegular(d, e, f)\n}\n\nconst isRegularIrregular = (a, b, c, d, e, f, g) => {\n\treturn isRegular(a, b, c, d, e, f) && isIrregular(g, b, c)\n}\n\nconst isIrregularIrregular = (a, b, c, d, e, f, g) => {\n\treturn isIrregular(a, b, c, d, e, f) && isIrregular(g, b, c)\n}\n\nconst isRegularIrregularIrregular = (a, b, c, d, e, f, g, h) => {\n\treturn isRegular(a, b, c, d, e, f) && isIrregular(g, b, c) && isIrregular(h, d, e)\n}\n\nconst isRegularIrregularIrregularIrregular = (a, b, c, d, e, f, g, h, i) => {\n\treturn isRegular(a, b, c, d, e, f) && isIrregular(g, b, c) && isIrregular(h, d, e) && isIrregular(i, e, f)\n}\n\nconst isTriangle = (a, b, c) => {\n\treturn triangle(a, b, c)\n}\n\nconst isIrregularTriangle = (a, b, c) => {\n\treturn isIrregular(a, b, c)\n}\n\nconst isIrregularIrregular = (a, b, c) => {\n\treturn isIrregular(a, b, c)\n}\n\nconst isIrregularIrregularIrregular = (a, b, c, d, e, f, g, h, i) => {\n\treturn isIrregular(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i)\n}\n\nconst isIrregularIrregularIrregularIrregular = (a, b, c, d, e, f, g, h, i, j, k) => {\n\treturn isIrregular(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i) && isIrregular(j, k, a)\n}\n\nconst isTriangleIrregular = (a, b, c) => {\n\treturn triangle(a, b, c) && isIrregular(a, b, c)\n}\n\nconst isTriangleIrregularIrregular = (a, b, c, d, e, f, g, h, i) => {\n\treturn triangle(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i)\n}\n\nconst isIrregularIrregularIrregularTriangle = (a, b, c, d, e, f, g, h, i, j, k) => {\n\treturn isIrregular(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i) && isIrregular(j, k, a)\n}\n\nconst isTriangleIrregularIrregularIrregular = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n\treturn triangle(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i) && isIrregular(j, k, a) && isIrregular(l, m, n)\n}\n\nconst isTriangleIrregularIrregularIrregularIrregular = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) => {\n\treturn triangle(a, b, c) && isIrregular(d, e, f) && isIrregular(g, h, i) && isIrregular(j, k, a) && isIrregular(l, m, n) && isIrregular(o, p, a)\n}\n\nconst isTriangleIrregularIrregularIrregularIrregular = (a, b, c, d, e"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "/*Write a function that accepts a list of strings.\n\tThe list contains different words. Return the word with maximum number\n\tof unique characters. If multiple strings have maximum number of unique\n\tcharacters, return the one which comes first in lexicographical order.\n\n\tfindMax([\"name\", \"of\", \"string\"]) === \"string\"\n\tfindMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n\tfindMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n\t*/\nconst findMax = (words) => {\n\tlet s = -1\n\tlet u = -1\n\tif (words.length == 0) { return '' }\n\tfor (let i = 0; i < words.length; i++) {\n\t\tlet p = 0\n\t\tfor (let j = 0; j < words[i].length; j++) {\n\t\t\tlet y = 1\n\t\t\tfor (let k = 0; k < j; k++) {\n\t\t\t\tif (words[i][j] == words[i][k]) { y = 0 }\n\t\t\t}\n\t\t\tif (y) { p++ }\n\t\t}\n\t\tif (p > u) { s = i, u = p }\n\t}\n\treturn words[s]\n}\n\nmodule.exports = findMax\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "/*\n\tYou're a hungry rabbit, and you already have eaten a certain number of carrots,\n\tbut now you need to eat more carrots to complete the day's meals.\n\tyou should return an array of [ total number of eaten carrots after your meals,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tthe number of carrots left after your meals ]\n\tif there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n\tExample:\n\t* eat(5, 6, 10) -> [11, 4]\n\t* eat(4, 8, 9) -> [12, 1]\n\t* eat(1, 10, 10) -> [11, 0]\n\t* eat(2, 11, 5) -> [7, 0]\n  \n\tVariables:\n\t@number : integer\n\t\t\tthe number of carrots that you have eaten.\n\t@need : integer\n\t\t\tthe number of carrots that you need to eat.\n\t@remaining : integer\n\t\t\tthe number of remaining carrots thet exist in stock\n  \n\tConstrain:\n\t* 0 <= number <= 1000\n\t* 0 <= need <= 1000\n\t* 0 <= remaining <= 1000\n\n\tHave fun :)\n\t*/\nconst eat = (number, need, remaining) => {\n\tif (need <= remaining) {\n\t\treturn [need + number, remaining - need]\n\t} else {\n\t\treturn [remaining, remaining]\n\t}\n}<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "/*\n\tGiven two lists operator, and operand. The first list has basic algebra operations, and \n\tthe second list is a list of integers. Use the two given lists to build the algebric \n\texpression and return the evaluation of this expression.\n\n\tThe basic algebra operations:\n\tAddition ( + ) \n\tSubtraction ( - ) \n\tMultiplication ( * ) \n\tFloor division ( // ) \n\tExponentiation ( ** ) \n\n\tExample:\n\toperator['+', '*', '-']\n\tarray = [2, 3, 4, 5]\n\tresult = 2 + 3 * 4 - 5\n\t=> result = 9\n\n\tNote:\n\t\t\tThe length of operator list is equal to the length of operand list minus one.\n\t\t\tOperand is a list of of non-negative integers.\n\t\t\tOperator list has at least one operator, and operand list has at least two operands.\n\n\t*/\nconst doAlgebra = (operator, operand) => {\n\twhile (operator.length > 0) {\n\t\tlet y = 0\n\t\tfor (let i = operator.length - 1; i >= 0; i--) {\n\t\t\tif (operator[i] == '**') {\n\t\t\t\tlet u = operand[i]\n\t\t\t\twhile (operand[i + 1] > 1) {\n\t\t\t\t\toperand[i + 1]--;\n\t\t\t\t\toperand[i] *= u;\n\t\t\t\t}\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 1) { continue }\n\t\tfor (let i = 0; i < operator.length; i++) {\n\t\t\tif (operator[i] == '*') {\n\t\t\t\toperand[i] *= operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if (operator[i] == '//') {\n\t\t\t\toperand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n\t\t\t\toperand.splice(i + 1, 1)\n\t\t\t\toperator.splice(i, 1)\n\t\t\t\ty = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (y == 0) {\n\t\t\tbreak\n\t\t}\n\t}\n\treturn operand\n}\n\nconst solve = (operator, operand) => {\n\tif (operand.length == 1) {\n\t\treturn operand[0]\n\t}\n\tlet result = doAlgebra(operator, operand)\n\tif (result.length == 1) {\n\t\treturn result[0]\n\t}\n\telse {\n\t\treturn result\n\t}\n}\n\nconst isOperator = (operator, i) => {\n\treturn (operator.length - 1) == i\n}\n\nconst isOperand = (operand, i) => {\n\treturn (operand.length - 1) == i\n}\n\nconst hasOperand = (operator, operand) => {\n\treturn (operand.length - 1) == operator.length - 1\n}\n\nconst operators = ['+', '-', '*', '/', '**']\nconst operands = [1, 2, 3, 4, 5]\nconst operators2 = ['+', '-', '*', '//']\nconst operands2 = [1, 2, 3, 4]\n\nconsole.log(solve(operators, operands))\nconsole.log(solve(operators, operands2))\nconsole.log(solve(operators2, operands2))\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "/*You are given a string s.\n\tif s[i] is a letter, reverse its case from lower to upper or vise versa, \n\totherwise keep it as it is.\n\tIf the string contains no letters, reverse the string.\n\tThe function should return the resulted string.\n\tExamples\n\tsolve(\"1234\") = \"4321\"\n\tsolve(\"ab\") = \"AB\"\n\tsolve(\"#a@C\") = \"#A@c\"\n\t*/\nconst solve = (s) => {\n\tlet t = 0\n\tlet p = ''\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet y = s[i].charCodeAt()\n\t\tif (y >= 65 && y <= 90) {\n\t\t\ty += 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t\tt = 1;\n\t\t} else if (y >= 97 && y <= 122) {\n\t\t\ty -= 32;\n\t\t}\n\t\tp += String.fromCharCode(y)\n\t}\n\treturn p\n}\n\nlet t = solve(\"1234\")\nconsole.log(t)\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "/*\n\tGiven a string 'text', return its md5 hash equivalent string.\n\tIf 'text' is an empty string, return null.\n\n\t>>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\t*/\nconst stringToMd5 = (text) => {\n\tif (text == '') { return null }\n\tvar md5 = require('js-md5')\n\tvar hash = md5(text)\n\treturn hash.digest('hex')\n}\n\nmodule.exports = stringToMd5\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "/*\n\tGiven two positive integers a and b, return the even digits between a\n\tand b, in ascending order.\n\n\tFor example:\n\tgenerateIntegers(2, 8) => [2, 4, 6, 8]\n\tgenerateIntegers(8, 2) => [2, 4, 6, 8]\n\tgenerateIntegers(10, 14) => []\n\t*/\nconst generateIntegers = (a, b) => {\n\tif (a > b) {\n\t\tlet tmp = a;\n\t\ta = b;\n\t\tb = tmp;\n\t}\n\tlet result = [];\n\tlet a1 = a;\n\twhile (a1 <= b) {\n\t\tresult.push(a1);\n\t\ta1 += 2;\n\t}\n\treturn result;\n}\n\nlet test = [2, 4, 6, 8];\n\nlet actual = generateIntegers(2, 8);\nlet expected = [2, 4, 6, 8];\n\nconsole.log('Expected: ', expected, 'Actual: ', actual);\n<|endoftext|>"}
