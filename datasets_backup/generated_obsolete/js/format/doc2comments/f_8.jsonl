{"task_id": "JavaScript/0", "prompt": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n// }\n\n// Check if in given list of numbers, are any two numbers that are close to each other\n//   >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n// }\n\n// Check if in given list of numbers, are any two numbers that are not close to each other\n//   >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n//   true\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   false\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n// }\n\n// Check if in given list of numbers, are any two numbers that are not close to each other\n//   >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n//   true\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   false\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n// }\n\n// Check if in given list of numbers, are any two numbers that are not close to each other\n//   >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n//   true\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   false\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    } else {\n      current_string.push(c);\n    }\n  }\n  return result;\n// };\n\n// const findNextOpenParen = (paren_string, index) => {\n  // for (let i = index; i < paren_string.length; i++) {\n    // if (paren_string[i] == '(') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const findNextCloseParen = (paren_string, index) => {\n  // for (let i = index; i < paren_string.length; i++) {\n    // if (paren_string[i] == ')') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const findPreviousOpenParen = (paren_string, index) => {\n  // for (let i = index; i > 0; i--) {\n    // if (paren_string[i] == '(') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const findPreviousCloseParen = (paren_string, index) => {\n  // for (let i = index; i > 0; i--) {\n    // if (paren_string[i] == ')') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const nextOpenParen = (paren_string, index) => {\n  // if (paren_string[index] == '(') {\n    // return findNextOpenParen(paren_string, index + 1);\n  // }\n  // return -1;\n// };\n\n// const nextCloseParen = (paren_string, index) => {\n  // if (paren_string[index] == ')') {\n    // return findNextCloseParen(paren_string, index + 1);\n  // }\n  // return -1;\n// };\n\n// const previousOpenParen = (paren_string, index) => {\n  // if (paren_string[index] == '(') {\n    // return findPreviousOpenParen(paren_string, index - 1);\n  // }\n  // return -1;\n// };\n\n// const previousCloseParen = (paren_string, index) => {\n  // if (paren_string[index] == ')') {\n    // return findPreviousCloseParen(paren_string, index - 1);\n  // }\n  // return -1;\n// };\n\n// const findMatchingOpen = (paren_string, index) => {\n  // for (let i = index; i < paren_string.length; i++) {\n    // if (paren_string[i] == '(') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const findMatchingClose = (paren_string, index) => {\n  // for (let i = index; i < paren_string.length; i++) {\n    // if (paren_string[i] == ')') {\n      // return i;\n    // }\n  // }\n  // return -1;\n// };\n\n// const closeUnbalanced = (paren_string, index) => {\n  // if (paren_string[index] == ')') {\n    // if (paren_string[index + 1] == ')') {\n      // return index;\n    // }\n  // }\n  // return -1;\n// };\n\n// const openUnbalanced = (paren_string, index) => {\n  // if (paren_string[index] == '(') {\n    // if (paren_string[index + 1] == '(') {\n      // return index;\n    // }\n  // }\n  // return -1;\n// };\n\n// const closeParenthesis = (paren_string) => {\n  // const index = paren_string.lastIndexOf(')');\n  // const open_index = paren_string.lastIndexOf('(');\n  // if (open_index < index) {\n    // return index;\n  // }\n  // return -1;\n// };\n\n// const openParenthesis = (paren_string) => {\n  // const index = paren_string.lastIndexOf(')');\n  // const open_index = paren_string.lastIndexOf('(');\n  // if (open_index > index) {\n    // return index;\n  // }\n  // return -1;\n// };\n\n// const findCloseParen = (paren_string) => {\n  // const index = paren_string.lastIndexOf(')');\n  // const open_index = paren_string.lastIndexOf('(');\n  // if (open_index > index) {\n    // return index;\n  // }\n  // return -1;\n// };\n\n// const findOpenParen = (paren_string) => {\n  // const index = paren_string.lastIndexOf(')');\n  // const open_index = paren_string.lastIndexOf('(');\n  // if (open_index < index) {\n    // return index;\n  // }\n  // return -1;\n// };\n\n// const findOpening = (paren_string, index) => {\n  // for (let i = index; i > 0; i--) {\n    "}
{"task_id": "JavaScript/2", "prompt": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n}\n\n// Given a string, return the value of the number in the string.\n// \n//   >>> truncateNumber('3.5')\n//   3.5\n// const truncateNumber = (str) => {\n  return parseFloat(str) || 0;\n}\n\n// Given a string, return the value of the number in the string.\n// \n//   >>> truncateNumber('3.5')\n//   3.5\n// const truncateNumber = (str) => {\n  return parseFloat(str) || 0;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}\n\n// Given a number, return the value of the number in the number.\n// \n//   >>> truncateNumber(3.5)\n//   3.5\n// const truncateNumber = (number) => {\n  return number;\n}"}
{"task_id": "JavaScript/3", "prompt": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// Below is the solution for Exercise 2 of the homework.\n// const belowZero = (operations) => {\n//   var balance = 0;\n//   for (const op of operations) {\n//     balance += op;\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n// }\n\n// const meanAbsoluteDeviation = (numbers) => {\n  // const mean = (numbers.reduce((prev, item) => {\n  //   return prev + item;\n  // }, 0) / numbers.length);\n  // return (numbers.reduce((prev, item) => {\n  //   return Math.abs(item - mean);\n  // }, 0) / numbers.length);\n// }\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n// }\n\n// const meanAbsoluteDeviation = (numbers) => {\n  // const mean = (numbers.reduce((prev, item) => {\n  //   return prev + item;\n  // }, 0) / numbers.length);\n  // return (numbers.reduce((prev, item) => {\n  //   return Math.abs(item - mean);\n  // }, 0) / numbers.length);\n// }\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n// }\n\n// const meanAbsoluteDeviation = (numbers) => {\n  // const mean = (numbers.reduce((prev, item) => {\n  //   return prev + item;\n  // }, 0) / numbers.length);\n  // return (numbers.reduce((prev, item) => {\n  //   return Math.abs(item - mean);\n  // }, 0) / numbers.length);\n// }\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n// }\n\n// const meanAbsoluteDeviation = (numbers) => {\n  // const mean = (numbers.reduce((prev, item) => {\n  //   return prev + item;\n  // }, 0) / numbers.length);\n  // return (numbers.reduce((prev, item) => {\n  //   return Math.abs(item - mean);\n  // }, 0) / numbers.length);\n// }\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n// }\n\n// const meanAbsoluteDeviation = (numbers) => {\n  // const mean = (numbers.reduce((prev, item) => {\n  //   return prev + item;\n  // }, 0) / numbers.length);\n  // return (numbers.reduce((prev, item) => {\n  //   return Math.abs(item - mean);\n  // }, 0) / numbers.length);\n// }\n\n// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDev"}
{"task_id": "JavaScript/5", "prompt": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n);\n    if (numbers.length > 1)\n      result.push(delimeter);\n  }\n  return result;\n}\n\n// const intersperse = (numbers, delimeter) => {\n//   const n = numbers.length;\n//   const half = n / 2;\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < n)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\n// const intersperse = (numbers, delimeter) => {\n//   const n = numbers.length;\n//   const half = n / 2;\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < n)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\nconst intersperse = (numbers, delimeter) => {\n  const n = numbers.length;\n  const half = n / 2;\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < n)\n      result.push(delimeter);\n  }\n  return result;\n}\n\n// const intersperse = (numbers, delimeter) => {\n//   const half = Math.floor(numbers.length / 2);\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < half)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\n// const intersperse = (numbers, delimeter) => {\n//   const half = Math.floor(numbers.length / 2);\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < half)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\n// const intersperse = (numbers, delimeter) => {\n//   const half = Math.floor(numbers.length / 2);\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < half)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\n// const intersperse = (numbers, delimeter) => {\n//   const half = Math.floor(numbers.length / 2);\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < half)\n//       result.push(delimeter);\n//   }\n//   return result;\n// }\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\nconst intersperse = (numbers, delimeter) => {\n  const half = Math.floor(numbers.length / 2);\n  let result = [];\n  for (let i = 0; i < half; i++) {\n    result.push(numbers[i]);\n    if (i + 1 < half)\n      result.push(delimeter);\n  }\n  return result;\n}\n\n// const intersperse = (numbers, delimeter) => {\n//   const half = Math.floor(numbers.length / 2);\n//   let result = [];\n//   for (let i = 0; i < half; i++) {\n//     result.push(numbers[i]);\n//     if (i + 1 < half)\n//       result.push("}
{"task_id": "JavaScript/6", "prompt": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        max_depth = Math.max(max_depth, depth);\n      }\n    }\n    return max_depth;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups = function (s) {\n    return s.split(' ').map(parseParenGroup);\n  };\n  \n  // Returns the deepest level of nesting of parentheses in a string\n  const getDeepestLevel = function (s) {\n    return getAllGroups(s).reduce((prev, current) => Math.max(prev, current), 0);\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_recur = function (s) {\n    if (s == '') {\n      return [s];\n    }\n    let groups = [];\n    for (const c of s) {\n      let curr_groups = [];\n      curr_groups = getAllGroups_recur(s.substr(0, s.length - 1));\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups.push(c);\n        curr_groups = curr_groups.filter((x) => x!= '');\n        groups = groups.concat(curr_groups);\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur2 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur3 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur4 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur5 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur6 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(curr_groups);\n        curr_groups = [];\n      }\n    }\n    return groups;\n  };\n  \n  // Returns a string containing all the groups of the string\n  const getAllGroups_nonrecur7 = function (s) {\n    let groups = [];\n    let curr_groups = [];\n    for (const c of s) {\n      if (c == '(') {\n        curr_groups.push(c);\n      } else {\n        curr_groups = curr_groups.concat(curr_groups.filter((x) => x!= ''));\n        groups = groups.concat(cur"}
{"task_id": "JavaScript/7", "prompt": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n}\n\n// Filter an input list of strings by returning only those\n//   that contain all given words\n//   >>> filterByWords([], ['a', 'b', 'c'])\n//   []\n//   >>> filterByWords(['abc', 'bacd', 'cde', 'array'], ['a', 'b', 'c'])\n//   ['abc', 'bacd', 'array']\n// const filterByWords = (strings, words) => {\n  return strings.filter(x => words.every(y => x.indexOf(y)!= -1));\n}\n\n// Filter an input list of strings by returning only those\n//   that contain at least one given word\n//   >>> filterByWords([], ['a', 'b', 'c'])\n//   ['a', 'b', 'c']\n// const filterByWords = (strings, words) => {\n  return strings.filter(x => words.some(y => x.indexOf(y)!= -1));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return (sum_value, prod_value);\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n// From a given list of numbers, generate a list of rolling minimum element found until given moment\n//   in the sequence.\n//   >>> rollingMin([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 2, 3, 4, 2, 2]\n// const rollingMin = (numbers) => {\n  var running_min, result = [];\n  for (const n of numbers) {\n    if (running_min == undefined)\n      running_min = n;\n    else\n      running_min = Math.min(running_min, n);\n    result.push(running_min);\n  }\n  return result;\n}\n\n// From a given list of numbers, generate a list of rolling average element found until given moment\n//   in the sequence.\n//   >>> rollingAverage([1, 2, 3, 2, 3, 4, 2])\n//   [1.5, 2.5, 2.5, 2.5, 2.5, 3.0, 2.5]\n// const rollingAverage = (numbers) => {\n  var running_avg, result = [];\n  for (const n of numbers) {\n    if (running_avg == undefined)\n      running_avg = n;\n    else\n      running_avg = (running_avg * running_avg + n) / 2;\n    result.push(running_avg);\n  }\n  return result;\n}\n\n// Given a list of integers, find the index of the maximum number.\n//   >>> maxIndex( [1, 2, 3, 2, 3, 4, 2])\n//   4\n// const maxIndex = (numbers) => {\n  var result = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (result == -1 || numbers[i] > numbers[result])\n      result = i;\n  }\n  return result;\n}\n\n// Given a list of integers, find the index of the minimum number.\n//   >>> minIndex( [1, 2, 3, 2, 3, 4, 2])\n//   0\n// const minIndex = (numbers) => {\n  var result = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (result == -1 || numbers[i] < numbers[result])\n      result = i;\n  }\n  return result;\n}\n\n// Given a list of integers, find the index of the average number.\n//   >>> averageIndex( [1, 2, 3, 2, 3, 4, 2])\n//   2\n// const averageIndex = (numbers) => {\n  var result = -1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (result == -1 || numbers[i] > numbers[result])\n      result = i;\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var suffix = string.split('').reverse().join('');\n  while (suffix.charAt(beginning_of_suffix)!= string.charAt(beginning_of_suffix))\n    beginning_of_suffix++;\n  var postfix = string.slice(beginning_of_suffix);\n  var postfix_as_palindrome = '';\n  while (postfix.charAt(0) == postfix.charAt(postfix.length - 1))\n    postfix_as_palindrome += postfix.charAt(0);\n  return string.slice(0, beginning_of_suffix) + postfix_as_palindrome;\n}\n\n/* Find the longest palindrome that is a suffix of a supplied string.\n  Algorithm idea:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('')\n  ''\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var suffix = string.split('').reverse().join('');\n  while (suffix.charAt(beginning_of_suffix)!= string.charAt(beginning_of_suffix))\n    beginning_of_suffix++;\n  var postfix = string.slice(beginning_of_suffix);\n  var postfix_as_palindrome = '';\n  while (postfix.charAt(0) == postfix.charAt(postfix.length - 1))\n    postfix_as_palindrome += postfix.charAt(0);\n  return postfix_as_palindrome + string.slice(0, beginning_of_suffix);\n}\n\n// Test if a string is a palindrome.\nconst isPalindrome = (string) => {\n  var reversed = string.split('').reverse().join('');\n  return string == reversed;\n}\n\nmodule.exports = {\n  makePalindrome: makePalindrome,\n  isPalindrome: isPalindrome\n};<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n  // Your solution should return the xor of a and b.\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n  // Your solution should return the xor of a and b.\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n  // Your solution should return the xor of a and b.\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n  // Your solution should return the xor of a and b.\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n  // Your solution should return the xor of a and b.\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return i + j;\n  };\n\n\n\n// // const stringXor = (a, b) => {\n  //   let a = a.split('').reverse().join('');\n  //   let b = b.split('').reverse().join('');\n  //   return a + b;\n  // };\n\n// const stringXor = (a, b) => {\n  //   return a + b;\n  // };\n\n  // const stringXor = (a, b) => {\n  //   return a + b;\n  // };\n\n\n// const stringXor = (a, b) => {\n  //   return a + b;\n  // };\n\n  // const stringXor = (a, b) => {\n  //   return a + b;\n  // };\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length > maxlen) {\n      maxlen = s.length;\n    }\n  }\n  return strings[0].slice(0, maxlen);\n// }\n\n// const longest = (strings) => {\n//   if (!Array.isArray(strings))\n//     return null;\n//   if (strings.length == 0)\n//     return null;\n//   var maxlen = Math.max(...strings.map(x => x.length));\n//   return strings[0].slice(0, maxlen);\n// }\n\n// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'bb'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  return strings[0].slice(0, maxlen);\n// }\n\n// const longest = (strings) => {\n//   if (!Array.isArray(strings))\n//     return null;\n//   if (strings.length == 0)\n//     return null;\n//   var maxlen = Math.max(...strings.map(x => x.length));\n//   return strings[0].slice(0, maxlen);\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n// Return a least common multiple of two integers a and b\n//   >>> leastCommonMultiple(3, 5)\n//   15\n//   >>> leastCommonMultiple(25, 15)\n//   50\n// const leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n}\n\n// Return a remainder of two integers a and b\n//   >>> remainder(15, 3)\n//   1\n//   >>> remainder(25, 15)\n//   5\n// const remainder = (a, b) => {\n  return a % b;\n}\n\n// Return a power of two that is equal to a given integer\n//   >>> powerOfTwo(3)\n//   3\n//   >>> powerOfTwo(25)\n//   25\n// const powerOfTwo = (a) => {\n  return a | (a - 1);\n}\n\n// Return an integer that is the sum of two given integers\n//   >>> sum(3, 5)\n//   8\n//   >>> sum(25, 15)\n//   30\n// const sum = (a, b) => {\n  return a + b;\n}\n\n// Return an integer that is the difference of two given integers\n//   >>> difference(3, 5)\n//   2\n//   >>> difference(25, 15)\n//   20\n// const difference = (a, b) => {\n  return a - b;\n}\n\n// Return an integer that is the product of two given integers\n//   >>> product(3, 5)\n//   15\n//   >>> product(25, 15)\n//   375\n// const product = (a, b) => {\n  return a * b;\n}\n\n// Return an integer that is the quotient of two given integers\n//   >>> quotient(3, 5)\n//   1\n//   >>> quotient(25, 15)\n//   5\n// const quotient = (a, b) => {\n  return a / b;\n}\n\n// Return an integer that is the sum of squares of all numbers in an array\n//   >>> sumOfSquares(array)\n//   >>> sumOfSquares([1, 2, 3, 4, 5, 6])\n//   45\n// const sumOfSquares = (array) => {\n  return sum(array.map((x) => x * x));\n}\n\n// Return an integer that is the sum of all numbers in an array\n//   >>> sum(array)\n//   >>> sum([1, 2, 3, 4, 5, 6])\n//   21\n// const sum = (array) => {\n  return sum(array);\n}\n\n// Return the nth element of an array\n//   >>> nth(array, n)\n//   >>> nth([1, 2, 3, 4, 5, 6], 3)\n//   4\n// const nth = (array, n) => {\n  return array[n];\n}\n\n// Return the sum of all even numbers in an array\n//   >>> sumOfEven(array)\n//   >>> sumOfEven([1, 2, 3, 4, 5, 6])\n//   22\n// const sumOfEven = (array) => {\n  return sum(array.filter((x) => x % 2 === 0));\n}\n\n// Return the sum of all odd numbers in an array\n//   >>> sumOfOdd(array)\n//   >>> sumOfOdd([1, 2, 3, 4, 5, 6])\n//   15\n// const sumOfOdd = (array) => {\n  return sum(array.filter((x) => x % 2!== 0));\n}\n\n// Return the difference of all even numbers in an array\n//   >>> differenceOfEven(array)\n//   >>> differenceOfEven([1, 2, 3, 4, 5, 6])\n//   4\n// const differenceOfEven = (array) => {\n  return difference(array.filter((x) => x % 2 === 0));\n}\n\n// Return the difference of all odd numbers in an array\n//   >>> differenceOfOdd(array)\n//   >>> differenceOfOdd([1, 2, 3, 4, 5, 6])\n//   6\n// const differenceOfOdd = (array) => {\n  return difference(array.filter((x) => x % 2!== 0));\n}\n\n// Return the product of all even numbers in an array\n//   >>> productOfEven(array)\n//   >>> productOfEven([1, 2, 3, 4, 5, 6])\n//   24\n// const productOfEven = (array) => {\n  return product(array.filter((x) => x % 2 === 0));\n}\n\n// Return the product of all odd numbers in an array\n//   >>> productOfOdd(array)\n//   >>> productOfOdd([1, 2, 3, 4, 5, 6])\n//   36\n// const productOfOdd = (array) => {\n  return product(array.filter((x) => x % 2!== 0));\n}\n\n// Return the quotient of all even numbers in an array\n//   >>> quotientOfEven(array)\n//   >>> quotientOfEven([1, 2, 3, 4, 5, 6])\n//   2\n// const quotientOfEven = (array) => {\n  return quotient(array.filter((x) => x % 2 === 0));\n}\n\n// Return the quotient of all odd numbers in an array\n//   >>> quotientOfOdd(array)\n//   >>> quotientOfOdd([1, 2, 3, 4, 5, 6])\n//   3\n// const quotientOfOdd = (array) => {\n  return quotient(array.filter((x) => x % 2!== 0));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n// Return list of all suffixes from shortest to longest of the input string\n//   >>> allSuffixes('abc')\n//   ['c', 'bc', 'abc']\n// const allSuffixes = (string) => {\n  var result = [];\n  for (let i = string.length-1; i >= 0; i--) {\n    result.push(string.slice(i));\n  }\n  return result;\n}\n\n// Return the longest prefix of the input string that contains the prefix\n//   >>> longestPrefix('abcd', 'ab')\n//   'ab'\n//   >>> longestPrefix('abcd', 'bc')\n//   'bc'\n//   >>> longestPrefix('abcd', 'ac')\n//   'ac'\n//   >>> longestPrefix('abcd', 'abcc')\n//   'ab'\n//   >>> longestPrefix('abcd', 'bcdd')\n//   'bc'\n// const longestPrefix = (string, prefix) => {\n  var i = 0;\n  while (i < string.length && string.indexOf(prefix, i) > -1) {\n    i += 1;\n  }\n  return string.slice(0, i);\n}\n\n// Return the longest suffix of the input string that contains the suffix\n//   >>> longestSuffix('abcd', 'cd')\n//   'cd'\n//   >>> longestSuffix('abcd', 'ab')\n//   'ab'\n//   >>> longestSuffix('abcd', 'ac')\n//   'ac'\n//   >>> longestSuffix('abcd', 'bc')\n//   'bc'\n//   >>> longestSuffix('abcd', 'bcdd')\n//   'bcdd'\n// const longestSuffix = (string, suffix) => {\n  var i = string.length - 1;\n  while (i > 0 && string.lastIndexOf(suffix, i) > -1) {\n    i -= 1;\n  }\n  return string.slice(i + 1);\n}\n\n// Return the longest common prefix of the input strings\n//   >>> longestCommonPrefix('abcd', 'abcd')\n//   'abcd'\n//   >>> longestCommonPrefix('abcd', 'ab')\n//   'ab'\n//   >>> longestCommonPrefix('abcd', 'ac')\n//   'ac'\n//   >>> longestCommonPrefix('abcd', 'bc')\n//   'bc'\n// const longestCommonPrefix = (string1, string2) => {\n  var minLength = Math.min(string1.length, string2.length);\n  var i = 0;\n  while (i < minLength && string1[i] === string2[i]) {\n    i += 1;\n  }\n  return string1.slice(0, i);\n}\n\n// Return the longest common suffix of the input strings\n//   >>> longestCommonSuffix('abcd', 'abcd')\n//   'abcd'\n//   >>> longestCommonSuffix('abcd', 'ab')\n//   'ab'\n//   >>> longestCommonSuffix('abcd', 'ac')\n//   'ac'\n//   >>> longestCommonSuffix('abcd', 'bc')\n//   'bc'\n// const longestCommonSuffix = (string1, string2) => {\n  var minLength = Math.min(string1.length, string2.length);\n  var i = string1.length - 1;\n  while (i >= 0 && string1[i] === string2[i]) {\n    i -= 1;\n  }\n  return string1.slice(i + 1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n}\n\nexport const isEmpty = (input) =>!input\n\nexport const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\nexport const getRandomIntInclusive = (min, max) => min + getRandomInt(min, max)\n\nexport const isNumeric = (input) => (\n  typeof input === 'number' ||\n  typeof input ==='string' && input.length >= 2 && input.charAt(0) === '0'\n)\n\nexport const isInteger = (input) => isNumeric(input) && input % 1 === 0\n\nexport const isOdd = (input) => input % 2 === 1\n\nexport const isEven = (input) => input % 2 === 0\n\nexport const getRandomIntInclusive = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomBoolean = () => getRandomIntInclusive(0, 1)\n\nexport const getRandomString = (length = 10) => getRandomIntInclusive(0, 9999).toString(10)\n\nexport const getRandomStringInclusive = (length = 10) => getRandomString(length)\n\nexport const getRandomPositiveInt = (min = 0) => getRandomIntInclusive(min, Infinity)\n\nexport const getRandomNegativeInt = (min = -Infinity) => getRandomIntInclusive(min, 0)\n\nexport const getRandomPositiveIntInclusive = (min = 0) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeIntInclusive = (min = -Infinity) => getRandomNegativeInt(min)\n\nexport const getRandomPositiveFloat = (min = 0) => getRandomFloatInclusive(min)\n\nexport const getRandomNegativeFloat = (min = -Infinity) => getRandomFloatInclusive(min)\n\nexport const getRandomFloatInclusive = (min = 0, max = 1) => (Math.random() * (max - min) + min)\n\nexport const getRandomIntInclusive = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomPositiveIntInclusive = (min = 0) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeIntInclusive = (min = -Infinity) => getRandomNegativeInt(min)\n\nexport const getRandomPositiveFloatInclusive = (min = 0) => getRandomPositiveFloat(min)\n\nexport const getRandomNegativeFloatInclusive = (min = -Infinity) => getRandomNegativeFloat(min)\n\nexport const getRandomFloatInclusive = (min = 0, max = 1) => (Math.random() * (max - min) + min)\n\nexport const getRandomFloat = () => getRandomFloatInclusive()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloatInclusive = (min = 0, max = 1) => (Math.random() * (max - min) + min)\n\nexport const getRandomPositiveFloatInclusive = (min = 0) => getRandomPositiveFloat(min)\n\nexport const getRandomNegativeFloatInclusive = (min = -Infinity) => getRandomNegativeFloat(min)\n\nexport const getRandomInt = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomIntInclusive = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomPositiveInt = (min) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeInt = (min) => getRandomNegativeInt(min)\n\nexport const getRandomPositiveIntInclusive = (min) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeIntInclusive = (min) => getRandomNegativeInt(min)\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomInt = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomIntInclusive = (min, max) => min + getRandomInt(min, max)\n\nexport const getRandomPositiveInt = (min) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeInt = (min) => getRandomNegativeInt(min)\n\nexport const getRandomPositiveIntInclusive = (min) => getRandomPositiveInt(min)\n\nexport const getRandomNegativeIntInclusive = (min) => getRandomNegativeInt(min)\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPositiveFloat()\n\nexport const getRandomNegativeFloat = () => getRandomNegativeFloat()\n\nexport const getRandomFloat = () => getRandomFloat()\n\nexport const getRandomPositiveFloat = () => getRandomPos"}
{"task_id": "JavaScript/16", "prompt": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n}\n\n// Given a string, find out how many of the given character does it consist of\n//   >>> countSameChars('abracadabra', 'a')\n//   0\n//   >>> countSameChars('abracadabra', 'a')\n//   1\n//   >>> countSameChars('abracadabra', 'b')\n//   1\n//   >>> countSameChars('abracadabra', 'z')\n//   0\n// const countSameChars = (string, char) => {\n  const count = string.split('').filter((character) => {\n    return string.indexOf(character) === string.indexOf(char.toLowerCase());\n  });\n  return count.length;\n}\n\n// Given a string, find out how many of the given character does it consist of\n//   >>> countSameChars('abracadabra', 'B')\n//   1\n//   >>> countSameChars('abracadabra', 'b')\n//   2\n//   >>> countSameChars('abracadabra', 'z')\n//   2\n// const countSameChars = (string, char) => {\n  const count = string.split('').filter((character) => {\n    return string.indexOf(character) === string.indexOf(char.toLowerCase());\n  });\n  return count.length;\n}\n\n// Given a string, find out how many of the given character does it consist of\n//   >>> countSameChars('abracadabra', 'r')\n//   2\n//   >>> countSameChars('abracadabra', 'a')\n//   2\n//   >>> countSameChars('abracadabra', 'z')\n//   2\n// const countSameChars = (string, char) => {\n  const count = string.split('').filter((character) => {\n    return string.indexOf(character) === string.indexOf(char.toLowerCase());\n  });\n  return count.length;\n}\n\n// Given a string, find out how many of the given character does it consist of\n//   >>> countSameChars('abracadabra', 'Z')\n//   0\n//   >>> countSameChars('abracadabra', 'z')\n//   0\n// const countSameChars = (string, char) => {\n  const count = string.split('').filter((character) => {\n    return string.indexOf(character) === string.indexOf(char.toLowerCase());\n  });\n  return count.length;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const music_list = [];\n  const note_list = music_string.split(' ');\n  \n  for (let i = 0; i < note_list.length; i++) {\n    const current_note = note_list[i];\n    music_list.push(note_map[current_note]);\n  }\n  \n  return music_list;\n};\n\n// 4. Write a function that takes a string as an input and returns list of all the note\n//    lasts in the string.\n// const all_notes_in_string = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const note_list = [];\n  const music_list = music_string.split(' ');\n  \n  for (let i = 0; i < music_list.length; i++) {\n    const current_note = music_list[i];\n    note_list.push(note_map[current_note]);\n  }\n  \n  return note_list;\n};\n\n// 5. Create a function that takes a string as input and returns list of all the note\n//    lasts in the string.\n// const all_notes_in_string = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const note_list = [];\n  const music_list = music_string.split(' ');\n  \n  for (let i = 0; i < music_list.length; i++) {\n    const current_note = music_list[i];\n    note_list.push(note_map[current_note]);\n  }\n  \n  return note_list;\n};\n\n// 6. Given a list of integers, return the highest and lowest values in the list.\n// const find_highest_and_lowest = (list) => {\n  const highest = 0;\n  const lowest = 0;\n  const list_copy = list.slice();\n  const list_copy_length = list_copy.length;\n  \n  for (let i = 0; i < list_copy_length; i++) {\n    const current_value = list_copy[i];\n    if (current_value > highest) highest = current_value;\n    if (current_value < lowest) lowest = current_value;\n  }\n  \n  return [highest, lowest];\n};\n\n// 7. Given a list of integers, return the highest and lowest values in the list.\n// const find_highest_and_lowest = (list) => {\n  const highest = 0;\n  const lowest = 0;\n  const list_copy = list.slice();\n  const list_copy_length = list_copy.length;\n  \n  for (let i = 0; i < list_copy_length; i++) {\n    const current_value = list_copy[i];\n    if (current_value > highest) highest = current_value;\n    if (current_value < lowest) lowest = current_value;\n  }\n  \n  return [highest, lowest];\n};\n\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  const numeral_arr = numbers.split(' ');\n  const numbers_arr = numeral_arr.map((x, i) => {\n    return value_map[x] || i;\n  });\n  const sorted_arr = [...numbers_arr].sort((a, b) => {\n    return a - b;\n  });\n  return sorted_arr.join(' ');\n//   return sorted_arr.join('');\n// };\n// const sortNumbers = (numbers) => {\n//   const sorted_arr = [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n//   return sorted_arr.join('');\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n// };\n// const sortNumbers = (numbers) => {\n//   return [...numbers].sort((a, b) => {\n//     return a - b;\n//   });\n"}
{"task_id": "JavaScript/20", "prompt": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i!= j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let d = Math.abs(a - b);\n          if (d < distance) {\n            distance = d;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = (numbers[i] - min_number) / (max_number - min_number);\n  }\n  return new_numbers;\n// }\n\n// given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const scaleNumbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const scaleNumbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n  return new_numbers;\n// }\n\n// Given a list of numbers, return a list of numbers scaled by their sum\n// const sum_numbers = (numbers) => {\n  var sum_of_numbers = _.sum(numbers);\n  var new_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    new_numbers[i] = numbers[i] / sum_of_numbers;\n  }\n"}
{"task_id": "JavaScript/22", "prompt": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n// }\n\n// Filter given list of any python values only for floats\n//   >>> filterFloats(['a', 3.14, 5])\n//   [3.14]\n//   >>> filterFloats([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterFloats = (values) => {\n  return values.filter(x => Number.isFinite(x));\n// }\n\n// Filter given list of any python values only for strings\n//   >>> filterStrings(['a', 3.14, 5])\n//   ['a', 3.14, 5]\n//   >>> filterStrings([1, 2, 3, 'abc', {}, []])\n//   ['1', '2', '3']\n// const filterStrings = (values) => {\n  return values.filter(x => String.isString(x));\n// }\n\n// Filter given list of any python values only for booleans\n//   >>> filterBooleans(['a', 3.14, 5])\n//   [True, False]\n//   >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterBooleans = (values) => {\n  return values.filter(x => Boolean(x));\n// }\n\n// Filter given list of any python values only for objects\n//   >>> filterObjects(['a', 3.14, 5])\n//   [{}, []]\n//   >>> filterObjects([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterObjects = (values) => {\n  return values.filter(x => x instanceof Object);\n// }\n\n// Filter given list of any python values only for arrays\n//   >>> filterArrays(['a', 3.14, 5])\n//   []\n//   >>> filterArrays([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterArrays = (values) => {\n  return values.filter(x => Array.isArray(x));\n// }\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [1, 2, 3, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x) || Number.isFinite(x));\n// }\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [1, 2, 3, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x) || Number.isFinite(x));\n// }\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [1, 2, 3, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x) || Number.isFinite(x));\n// }\n\n// Filter given list of any python values only for numbers\n//   >>> filterNumbers(['a', 3.14, 5])\n//   [1, 2, 3, 5]\n//   >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterNumbers = (values) => {\n  return values.filter(x => Number.isInteger(x) || Number.isFinite(x));\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n};\n\n// Return a string that contains a given number of copies of a given string\n//   >>> repeat('abc', 3)\n//   'abcabcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that is a given number of characters long\n//   >>> length('abc')\n//   3\n//   >>> length(3)\n//   3\n// const length = (string) => {\n  return string.length;\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 2,'')\n//  'abc'\n//   >>> pad(2,'')\n//  ' '\n// const pad = (string, count, character) => {\n  return string.pad(count, character);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 3,'')\n//  'abc '\n//   >>> pad(3,'')\n//  '  '\n// const pad = (string, count, character) => {\n  return string.pad(count, character);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 3, '0')\n//   '00abc'\n//   >>> pad(3, '0')\n//   '000'\n// const pad = (string, count, character) => {\n  return string.pad(count, character);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 3, '0','')\n//  '0 abc '\n//   >>> pad(3, '0','')\n//  '00 '\n// const pad = (string, count, character, character2) => {\n  return string.pad(count, character, character2);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 3, '0','')\n//  '0 abc '\n//   >>> pad(3, '0','')\n//  '00 '\n// const pad = (string, count, character, character2) => {\n  return string.pad(count, character, character2);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> pad('abc', 3, '0','')\n//  '0 abc '\n//   >>> pad(3, '0','')\n//  '00 '\n// const pad = (string, count, character, character2) => {\n  return string.pad(count, character, character2);\n};\n\n// Return a string that is a given number of characters long\n//   >>> repeat('abc', 2)\n//   'abc'\n//   >>> repeat(2, 'abc')\n//   'abc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n\n// Return a string that has a given number of leading and trailing characters\n//   >>> repeat('abc', 3)\n//   'abcabc'\n//   >>> repeat(3, 'abc')\n//   'abcabc'\n// const repeat = (string, count) => {\n  return string.repeat(count);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n\n  return 0;\n}\n\nexport const largestDivisor = (n) => {\n  return largestDivisor(n);\n}\n\nexport const largestTriangle = (n) => {\n  let total = 0;\n\n  for (let i = 1; i <= n; i++)\n    total += largestDivisor(i);\n\n  return total;\n}\n\n// The largest n such that the sum of all the squares of its positive divisors is a perfect square\n//   >>> largestPerfectSquares(3)\n//   3\n// const largestPerfectSquares = (n) => {\n  let sum = 0;\n\n  for (let i = 1; i <= n; i++)\n    sum += largestDivisor(i) * largestDivisor(i);\n\n  return sum;\n}\n\nexport const largestPerfectSquares = (n) => {\n  return largestPerfectSquares(n);\n}\n\nexport const smallestDivisor = (n) => {\n  let divisor = 0;\n\n  for (let i = 1; i <= n; i++)\n    if (largestDivisor(i) < largestDivisor(divisor))\n      divisor = largestDivisor(i);\n\n  return largestDivisor(divisor);\n}\n\n// The smallest n such that the sum of all the squares of its positive divisors is a perfect square\n//   >>> smallestPerfectSquares(3)\n//   3\n// const smallestPerfectSquares = (n) => {\n  let sum = 0;\n\n  for (let i = 1; i <= n; i++)\n    sum += largestDivisor(i) * largestDivisor(i);\n\n  return sum;\n}\n\nexport const smallestPerfectSquares = (n) => {\n  return smallestPerfectSquares(n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\nfunction isPrime(n) {\n  var factors = factorize(n), count = 0;\n  for (var i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      count += factors[i];\n    }\n  }\n  return count == n;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return Object.keys(dict).filter((num) => dict[num] === 1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n         .map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n         .join('');\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n}\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isString = x => {\n  return typeof x ==='string';\n}\n\nconst parseInt = x => {\n  return parseInt(x, 10);\n}\n\nconst parseFloat = x => {\n  return parseFloat(x);\n}\n\nconst parseDate = x => {\n  const date = new Date(x);\n  return new Date(date.getTime());\n}\n\nconst parseDateTime = x => {\n  const date = new Date(x);\n  return new Date(date.getTime());\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isString = x => {\n  return typeof x ==='string';\n}\n\nconst isArray = x => {\n  return x instanceof Array;\n}\n\nconst isFunction = x => {\n  return typeof x === 'function';\n}\n\nconst isObject = x => {\n  return typeof x === 'object' &&!Array.isArray(x);\n}\n\nconst isFunction = x => {\n  return typeof x === 'function';\n}\n\nconst isArray = x => {\n  return Array.isArray(x);\n}\n\nconst isDate = x => {\n  return x instanceof Date;\n}\n\nconst isDateTime = x => {\n  return x instanceof Date;\n}\n\nconst isBoolean = x => {\n  return typeof x === 'boolean';\n}\n\nconst isBoolean = x => {\n  return typeof x === 'boolean';\n}\n\nconst isString = x => {\n  return typeof x ==='string';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isString = x => {\n  return typeof x ==='string';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === 'number';\n}\n\nconst isNumber = x => {\n  return typeof x === '"}
{"task_id": "JavaScript/30", "prompt": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n//   return l.filter(e => e > 0);\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (!(n % k))\n      return false;\n  return true;\n// }\n\n// // Return the sum of the primes below N.\n// // For example, sumPrimes(10) -> 23\n// function sumPrimes(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^9.\n// // For example, sumPrimesN(10^9) -> 636268700\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^9, with 10^9 < n < 10^10.\n// // For example, sumPrimesN(10^9) -> 81528001208\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^10.\n// // For example, sumPrimesN(10^10) -> 10479002624\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^11.\n// // For example, sumPrimesN(10^11) -> 807989600\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^12.\n// // For example, sumPrimesN(10^12) -> 1059179812\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^13.\n// // For example, sumPrimesN(10^13) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^14.\n// // For example, sumPrimesN(10^14) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^15.\n// // For example, sumPrimesN(10^15) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^16.\n// // For example, sumPrimesN(10^16) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^17.\n// // For example, sumPrimesN(10^17) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^18.\n// // For example, sumPrimesN(10^18) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^19.\n// // For example, sumPrimesN(10^19) -> 10126874960\n// function sumPrimesN(n) {\n  let sum = 0;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// // Return the sum of the primes below N,\n// // where N = 10^20.\n// // For example, sumPrimesN(10^20) -> 10126874960\n// function sumPrimesN(n) {\n  let sum"}
{"task_id": "JavaScript/32", "prompt": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) == 0) {\n      return center;\n    }\n    if (poly(xs, begin) * poly(xs, center) < 0) {\n      begin = center;\n    } else {\n      end = center;\n    }\n  }\n  return begin;\n};\n\nconst findTau = (xs, x, precision) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) == 0) {\n      return center;\n    }\n    if (poly(xs, begin) * poly(xs, center) < 0) {\n      begin = center;\n    } else {\n      end = center;\n    }\n  }\n  while (Math.abs(end - x) > precision) {\n    if (poly(xs, end) == 0) {\n      return end;\n    }\n    end += precision / poly(xs, end);\n  }\n  return end;\n};\n\n/*\n  Given a list of coefficients, find a polynomial that\n  returns the list of coefficients\n  >>> round(findPoly([1, 2]), 2)\n  -2\n  >>> round(findPoly([-6, 11, -6, 1]), 2)\n  1\n  */\nconst findPoly = (xs) => {\n  let coeffs = xs.slice();\n  let n = xs.length;\n  while (n > 2) {\n    let i = n - 1;\n    while (i > 0 && coeffs[i] == 0) {\n      i--;\n    }\n    if (i == 0) {\n      break;\n    }\n    coeffs.splice(i, n - i);\n    n = coeffs.length;\n  }\n  if (n < 3) {\n    return 0;\n  }\n  return coeffs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index, n - 2);\n  }, 0);\n};\n\nconst generateList = (n) => {\n  var list = [];\n  while (list.length < n) {\n    list.push(Math.floor(Math.random() * 10));\n  }\n  return list;\n};\n\nconst generateCoefficients = (n, min, max) => {\n  var coeffs = generateList(n);\n  while (coeffs.reduce((prev, item, index) => prev + item, 0) < min) {\n    coeffs.splice(0, 1);\n  }\n  while (coeffs.reduce((prev, item, index) => prev + item, 0) > max) {\n    coeffs.splice(coeffs.length - 1, 1);\n  }\n  return coeffs;\n};\n\n/*\n  Given list of coefficients and point x,\n  find the polynomial that returns y = coeffs * x^n.\n  >>> round(findPoly([1, 2]), 2)\n  -2\n  >>> round(findPoly([-6, 11, -6, 1]), 2)\n  1\n  >>> round(findPoly([-1, 0, 1, 0, 0, 1]), 2)\n  -1\n  >>> round(findPoly([-1, 0, 1, 0, 0, 1]), 2)\n  1\n  >>> round(findPoly([-1, 0, 1, 0, 0, 1]), 2)\n  1\n  >>> round(findPoly([-1, 0, 1, 0, 0, 1]), 2)\n  1\n  */\nconst findPoly = (xs, x) => {\n  var coeffs = generateList(xs.length);\n  while (coeffs.reduce((prev, item, index) => prev + item, 0) < x) {\n    coeffs.splice(0, 1);\n  }\n  while (coeffs.reduce((prev, item, index) => prev + item, 0) > x) {\n    coeffs.splice(coeffs.length - 1, 1);\n  }\n  return coeffs.reduce((prev, item, index) => prev + item * Math.pow(x, index), 0);\n};\n\nmodule.exports = {\n  findZero,\n  findTau,\n  findPoly,\n  generateCoefficients\n};\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  var sorted = l.filter((item, index) => index % 3!= 0);\n  sorted.push(...three);\n  sorted.sort((a, b) => (a - b));\n  return sorted;\n};\n\nfunction sortThird(l) {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  var sorted = l.filter((item, index) => index % 3!= 0);\n  sorted.push(...three);\n  sorted.sort((a, b) => (a - b));\n  return sorted;\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n\n// Return a list of permutations\n//   >>> permute([1, 2, 3, 4, 5])\n//   [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3],\n//    [1, 3, 2, 4, 5], [1, 3, 2, 5, 4], [1, 3, 4, 2, 5], [1, 3, 4, 5, 2],\n//    [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2],\n//    [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2],\n//    [1, 5, 4, 2, 3], [1, 5, 4, 3, 2]]\n// const permute = (l) => {\n  const perm = [];\n  let current;\n  let n = l.length;\n  let i;\n  let p;\n\n  for (i = 0; i < n; i++) {\n    current = [];\n    for (p = 0; p < n; p++) {\n      current.push(l[p]);\n    }\n    perm.push(current);\n  }\n\n  return perm;\n\n// Return all permutations of a string\n//   >>> permute('012345')\n//   [['0', '1', '2', '3', '4', '5'], ['0', '1', '2', '3', '4', '5'],\n//    ['0', '1', '2', '3', '5', '4'], ['0', '1', '2', '3', '5', '4'],\n//    ['0', '1', '2', '4', '3', '5'], ['0', '1', '2', '4', '3', '5'],\n//    ['0', '1', '2', '4', '5', '3'], ['0', '1', '2', '4', '5', '3'],\n//    ['0', '1', '3', '2', '4', '5'], ['0', '1', '3', '2', '4', '5'],\n//    ['0', '1', '3', '2', '5', '4'], ['0', '1', '3', '2', '5', '4'],\n//    ['0', '1', '3', '4', '2', '5'], ['0', '1', '3', '4', '2', '5'],\n//    ['0', '1', '3', '4', '5', '2'], ['0', '1', '3', '4', '5', '2'],\n//    ['0', '1', '4', '2', '3', '5'], ['0', '1', '4', '2', '3', '5'],\n//    ['0', '1', '4', '2', '5', '3'], ['0', '1', '4', '2', '5', '3'],\n//    ['0', '1', '4', '3', '2', '5'], ['0', '1', '4', '3', '2', '5'],\n//    ['0', '1', '4', '3', '5', '2'], ['0', '1', '4', '3', '5', '2'],\n//    ['0', '1', '4', '5', '2', '3'], ['0', '1', '4', '5', '2', '3'],\n//    ['0', '1', '5', '2', '3', '4'], ['0', '1', '5', '2', '3', '4'],\n//    ['0', '1', '5', '3', '2', '4'], ['0', '1', '5', '3', '2', '4'],\n//    ['0', '1', '5', '4', '2', '3'], ['0', '1', '5', '4', '2', '3'],\n//    ['0', '1', '5', '4', '3', '2'], ['0', '1', '5', '4', '3', '2'],\n//    ['0', '2', '3', '4', '5', '1'], ['0', '2', '3', '4', '5', '1'],\n//    ['0', '2', '3', '5', '4', '1'], ['0', '2', '3', '5', '4', '1'],\n//    ['0', '2', '4', '3', '5', '1'], ['0', '2', '4', '3', '5', '1'],\n//    ['0', '2', '4', '5', '3', '1'], ['0', '2', '4', '5', '3', '1'],\n//    ['0', '3', '2', '4', '5', '1'], ['0', '3', '2', '4', '5', '1'],\n//    ['0', '3', '2', '5', '4', '1'], ['0', '3', '2', '5', '4', '1'],\n//    ['0', '3', '4', '2', '5', '1'], ['0', '3', '4', '2', '5', '1'],\n//    ['0', '3', '4', '5', '2', '1'], ['0', '3', '4', '5', '2', '1'],\n//    ['0', '4', '2', '3', '5', '1'], ['0', '4', '2', '3', '5', '1'],\n//    ['0', '4', '2', '5', '3', '1'],"}
{"task_id": "JavaScript/35", "prompt": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n}\n\nexport const maxElement = (l) => {\n  return Math.max(...l);\n}\n\nexport const maxElement = (l) => {\n  return Math.max(...l);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 10 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 11 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 12 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n\n// Return the number of times the digit 13 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i of ns) {\n    if (i % 11 == 0)\n      ans++;\n    else if (i % 13 == 0)\n      ans += 2;\n  }\n  return ans;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return even;\n// }\n// const sortEven = (l) => {\n//   let even = l.filter((item, index) => index % 2 == 0);\n//   let odd = l.filter((item, index) => index % 2!= 0);\n//   even.sort((a, b) => (a - b));\n//   odd.sort((a, b) => (a - b));\n//   return [...even,...odd];\n// }\n// const sortEven = (l) => {\n//   return l.sort((a, b) => (a - b));\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n}\n\n/*\n  decodes string s with decode_cyclic function.\n  */\nconst decode = (s) => {\n  return decodeCyclic(s);\n}\n\nmodule.exports = {\n  encode,\n  decode,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  return function (n) {\n    var ans = 2;\n    while (!isPrime(ans))\n      ans = ans + 1;\n    return ans;\n  }\n}\n//   # fibonacci: fibonacci-number\n//   >>> fibonacci(1)\n//   2\n//   >>> fibonacci(2)\n//   3\n//   >>> fibonacci(3)\n//   5\n//   >>> fibonacci(4)\n//   13\n//   >>> fibonacci(5)\n//   89\n// const fibonacci = (n) => {\n  var fib = function (n) {\n    return (n < 2)? 1 : fib(n - 1) + fib(n - 2);\n  }\n  return function (n) {\n    return fib(n);\n  }\n}\n//   # prime: prime-number\n//   >>> prime(1)\n//   2\n//   >>> prime(2)\n//   3\n//   >>> prime(3)\n//   5\n//   >>> prime(4)\n//   13\n//   >>> prime(5)\n//   89\n// const prime = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  return function (n) {\n    var ans = 2;\n    while (!isPrime(ans))\n      ans = ans + 1;\n    return ans;\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0) return true\n        \n  return false\n\n//   return false\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n}\n\nconst carRace = async (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push(new Car(Math.random() * 20 - 10))\n  }\n  cars.forEach(car => car.start())\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carRaceCollision(cars[i].x) > carRaceCollision(cars[j].x)) {\n        cars[i].stop()\n        cars[j].stop()\n      }\n    }\n  }\n  let collisions = 0\n  cars.forEach(car => {\n    car.stop()\n  })\n  return collisions\n}\n\nexport { carRace }\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n\n//   // Return list with elements decremented by 1.\n//   //   >>> decrList([6, 4, 6, 3, 4, 4, 10, 1, 124])\n//   //   [5, 3, 5, 2, 3, 3, 9, 0, 123]\n//   //   >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   //   [4, 3, 4, 2, 3, 3, 8, 0, 122]\n//   // const decrList = (l) => {\n//   //   return l.reverse().slice(1).reverse();\n//   // };\n\n//   // Return list with elements removed at the start.\n//   //   >>> removeFirst([1, 2, 3])\n//   //   [2, 3]\n//   //   >>> removeFirst([1, 2, 3, 4])\n//   //   [1, 2, 3]\n//   // const removeFirst = (l) => {\n//   //   return l.slice(1);\n//   // };\n\n//   // Return list with elements removed at the end.\n//   //   >>> removeLast([1, 2, 3])\n//   //   [1, 2]\n//   //   >>> removeLast([1, 2, 3, 4])\n//   //   [1, 2, 3, 4]\n//   // const removeLast = (l) => {\n//   //   return l.slice(0, -1);\n//   // };\n\n//   // Return list with elements removed at the start and end.\n//   //   >>> removeFirstAndLast([1, 2, 3])\n//   //   [2]\n//   //   >>> removeFirstAndLast([1, 2, 3, 4])\n//   //   [1, 2, 3]\n//   // const removeFirstAndLast = (l) => {\n//   //   return l.slice(1, -1);\n//   // };\n\n//   // Return list with elements reversed.\n//   //   >>> reverse([1, 2, 3])\n//   //   [3, 2, 1]\n//   // const reverse = (l) => {\n//   //   return l.reverse();\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the end.\n//   //   >>> addLast([1, 2, 3])\n//   //   [1, 2, 3]\n//   //   >>> addLast([4, 5, 6])\n//   //   [1, 2, 3, 4, 5, 6]\n//   // const addLast = (l, e) => {\n//   //   return l.concat([e]);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start.\n//   //   >>> addFirst([1, 2, 3])\n//   //   [1, 2, 3]\n//   //   >>> addFirst([4, 5, 6])\n//   //   [4, 5, 6, 1, 2, 3]\n//   // const addFirst = (l, e) => {\n//   //   return [e].concat(l);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> addFirstAndLast([1, 2, 3])\n//   //   [1, 2, 3]\n//   //   >>> addFirstAndLast([4, 5, 6])\n//   //   [4, 5, 6, 1, 2, 3]\n//   // const addFirstAndLast = (l, e) => {\n//   //   return [e].concat(l);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> removeFirstAndLast([1, 2, 3])\n//   //   [2, 3]\n//   //   >>> removeFirstAndLast([4, 5, 6])\n//   //   [4, 5, 6]\n//   // const removeFirstAndLast = (l, e) => {\n//   //   return l.slice(1, -1);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> removeLastAndFirst([1, 2, 3])\n//   //   [1, 2]\n//   //   >>> removeLastAndFirst([4, 5, 6])\n//   //   [4, 5]\n//   // const removeLastAndFirst = (l, e) => {\n//   //   return l.slice(0, -1);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> removeFirstAndLast([1, 2, 3, 4])\n//   //   [2, 3, 4]\n//   // const removeFirstAndLast = (l, e) => {\n//   //   return l.slice(1, -1);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> removeFirstAndLast([1, 2, 3, 4, 5, 6, 7, 8])\n//   //   [5, 6, 7, 8]\n//   // const removeFirstAndLast = (l, e) => {\n//   //   return l.slice(1, -1);\n//   // };\n\n//   // Return list with elements reversed and with new elements added at the start and end.\n//   //   >>> removeFirstAndLast([1, 2, 3, 4, 5, 6, 7, 8, 9])\n//   //   [5, 6, 7, 8, 9]\n//   // const removeFirstAndLast = (l, e) => {\n//   //   return l.slice(1, -1);\n//   // };\n// };\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = x / base;\n  }\n  return ret;\n// }\n\n// Change base of a number, where base is a digit between 2 and 36.\n// The input number is string.\n//   return the string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(\"3\", 2)\n//   '11'\n//   >>> changeBase(\"3\", 8)\n//   '11'\n//   >>> changeBase(\"4\", 2)\n//   '10000'\n//   >>> changeBase(\"9\", 2)\n//   '10000'\n//   >>> changeBase(\"10\", 2)\n//   '100000000'\n//   >>> changeBase(\"1000000\", 2)\n//   '100000000'\n//   >>> changeBase(\"100000000\", 2)\n//   '100000000000000000000'\n//   >>> changeBase(\"100000000\", 8)\n//   '100000000000000000000'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  var n = x.toString();\n  for (var i = n.length - 1; i >= 0; i--) {\n    ret = (n.charCodeAt(i) - 48) + ret;\n    if (i == n.length - 1) {\n      ret = ret + base;\n    }\n  }\n  return ret;\n// }\n\n//\n// Convert a number to a string.\n// The base of the string is 10.\n//\n//   >>> convertToString(12)\n//   '12'\n//   >>> convertToString(12, 2)\n//   '1012'\n//   >>> convertToString(12, 8)\n//   '12'\n// const convertToString = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = x / base;\n  }\n  return ret;\n// }\n\n// Convert a number to a string.\n// The base of the string is 36.\n//\n//   >>> convertToString(12, 36)\n//   '12'\n//   >>> convertToString(12, 8)\n//   '12'\n//   >>> convertToString(12, 2)\n//   '12'\n//   >>> convertToString(12, 36)\n//   '100000000000000000000'\n// const convertToString = (x, base) => {\n  var ret = \"\";\n  var n = x.toString();\n  for (var i = n.length - 1; i >= 0; i--) {\n    ret = (n.charCodeAt(i) - 48) + ret;\n    if (i == n.length - 1) {\n      ret = ret + base;\n    }\n  }\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 10.\n//\n//   >>> convertToNumber(\"12\")\n//   12\n//   >>> convertToNumber(\"12\", 2)\n//   12\n//   >>> convertToNumber(\"1012\", 8)\n//   12\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 36.\n//\n//   >>> convertToNumber(\"12\", 36)\n//   12\n//   >>> convertToNumber(\"12\", 2)\n//   12\n//   >>> convertToNumber(\"12\", 36)\n//   100000000000000000000\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 16.\n//\n//   >>> convertToNumber(\"F\", 16)\n//   15\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 2.\n//\n//   >>> convertToNumber(\"1\", 2)\n//   1\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 8.\n//\n//   >>> convertToNumber(\"11\", 8)\n//   11\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 16.\n//\n//   >>> convertToNumber(\"FF\", 16)\n//   255\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 2.\n//\n//   >>> convertToNumber(\"1\")\n//   1\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 8.\n//\n//   >>> convertToNumber(\"00001111\")\n//   255\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n\n//\n// Convert a string to a number.\n// The base of the number is 16.\n//\n//   >>> convertToNumber(\"FF\")\n//   255\n// const convertToNumber = (x, base) => {\n  var ret = parseInt(x, base);\n  return ret;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(3, 4)\n//   12.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(3, 8)\n//   24.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(4, 4)\n//   16.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(2, 5)\n//   30.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(10, 1)\n//   25.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(3, 12)\n//   28.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(15, 7)\n//   54.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(9, 10)\n//   25.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(6, 7)\n//   37.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(9, 11)\n//   33.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(15, 7)\n//   48.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 11)\n//   22.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(20, 5)\n//   50.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(2, 2)\n//   4.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(10, 6)\n//   25.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(15, 11)\n//   36.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(2, 1)\n//   1.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(1, 1)\n//   0.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(1, 3)\n//   1.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(1, 4)\n//   1.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(2, 2)\n//   0.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(3, 2)\n//   1.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(4, 2)\n//   2.0\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n  // }\n\n// Given length of a side and high return area for"}
{"task_id": "JavaScript/46", "prompt": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n      results.at(-3) + results.at(-4));\n  }\n  return results.at(n - 1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[(len - 1) / 2];\n  else\n    return (l[(len - 1) / 2] + l[(len - 2) / 2]) / 2;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n    else\n      return true;\n}\n\n// const isPalindrome = (text) => {\n  // for (let i = 0; i < text.length; i++)\n  //   if (text.charAt(i)!= text.charAt(-i-1))\n  //     return false;\n  //   else\n  //     return true;\n// }\n\n// const isPalindrome = (text) => {\n  let isPal = true;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!= text.charAt(-i-1)) {\n      isPal = false;\n      break;\n    }\n  }\n  return isPal;\n}\n\n// const isPalindrome = (text) => {\n  // for (let i = 0; i < text.length / 2; i++) {\n  //   if (text.charAt(i)!= text.charAt(-i-1))\n  //     return false;\n  // }\n  // return true;\n// }\n\n// const isPalindrome = (text) => {\n  // const array = new Array(text.length);\n  // for (let i = 0; i < text.length; i++)\n  //   array[i] = text.charAt(i);\n  // for (let i = 0; i < text.length; i++)\n  //   if (array[i]!= array[text.length - i - 1])\n  //     return false;\n  // return true;\n// }\n\n// const isPalindrome = (text) => {\n  // const array = new Array(text.length);\n  // for (let i = 0; i < text.length; i++)\n  //   array[i] = text.charAt(i);\n  // for (let i = 0; i < text.length; i++)\n  //   for (let j = 0; j < text.length - i - 1; j++)\n  //     if (array[j]!= array[text.length - j - i - 1])\n  //       return false;\n  // return true;\n// }\n\n// const isPalindrome = (text) => {\n  // const array = new Array(text.length);\n  // for (let i = 0; i < text.length; i++)\n  //   array[i] = text.charAt(i);\n  // for (let i = 0; i < text.length; i++)\n  //   for (let j = 0; j < text.length - i - 1; j++)\n  //     if (array[j]!= array[text.length - j - i - 1])\n  //       return false;\n  // return true;\n// }\n\n// const isPalindrome = (text) => {\n  // const array = new Array(text.length);\n  // for (let i = 0; i < text.length; i++)\n  //   array[i] = text.charAt(i);\n  // const array = new Array(text.length);\n  // for (let i = text.length - 1; i >= 0; i--)\n  //   array[text.length - i - 1] = text.charAt(i);\n  // for (let i = 0; i < text.length; i++)\n  //   if (array[i]!= array[text.length - i - 1])\n  //     return false;\n  // return true;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = ret * p;\n  return ret;\n// };\n\n// Return a random positive integer less than n.\n//   >>> rand(1)\n//   0\n//   >>> rand(10)\n//   0\n//   >>> rand(5)\n//   1\n// const rand = (n) => {\n  var ret = 0;\n  for (var i = 0; i < n; i++)\n    ret += Math.floor(Math.random() * 2);\n  return ret;\n// };\n\n// Return the number of distinct positive integers less than n.\n//   >>> distinct(1)\n//   1\n//   >>> distinct(10)\n//   10\n//   >>> distinct(5)\n//   1\n// const distinct = (n) => {\n  var ret = 1;\n  for (var i = 2; i <= n; i++)\n    ret += Math.pow(i, 2) - 1;\n  return ret;\n// };\n\n// Return a random integer between n and m (inclusive).\n//   >>> randrange(1, 10)\n//   3\n//   >>> randrange(0, 10)\n//   7\n//   >>> randrange(5, 7)\n//   5\n// const randrange = (n, m) => {\n  var ret = 0;\n  for (var i = n; i <= m; i++)\n    ret += Math.floor(Math.random() * i);\n  return ret;\n// };\n\n// Return a random integer between 0 and n (inclusive).\n//   >>> randint(0, 10)\n//   8\n//   >>> randint(0, 10)\n//   9\n// const randint = (n) => {\n  var ret = 0;\n  for (var i = 0; i < n; i++)\n    ret += Math.floor(Math.random() * i);\n  return ret;\n// };\n\n// Return a random number between 0 and 1.\n//   >>> random()\n//   0.2465203908348437\n// const random = () => {\n  var ret = 0.0;\n  for (var i = 0; i < 32; i++)\n    ret += Math.random();\n  return ret / 2147483647;\n// };\n\n// Return a random string of length n.\n//   >>> randstr(5)\n//   'R9A6'\n// const randstr = (n) => {\n  var ret = \"\";\n  for (var i = 0; i < n; i++)\n    ret += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  return ret;\n// };\n\n// Return a random string of length n with a given set of characters.\n//   >>> randstr(5, \"ABCDEF\")\n//   'DQ7C9'\n// const randstr = (n, chars) => {\n  var ret = \"\";\n  for (var i = 0; i < n; i++)\n    ret += chars[Math.floor(Math.random() * chars.length)];\n  return ret;\n// };\n\n// Return a random integer between n and m (inclusive).\n//   >>> randrange(5, 10)\n//   6\n//   >>> randrange(0, 10)\n//   8\n//   >>> randrange(5, 7)\n//   6\n// const randrange = (n, m) => {\n  var ret = 0;\n  for (var i = n; i <= m; i++)\n    ret += Math.floor(Math.random() * i);\n  return ret;\n// };\n\n// Return a random integer between 0 and n (inclusive).\n//   >>> randint(0, 10)\n//   8\n//   >>> randint(0, 10)\n//   9\n// const randint = (n) => {\n  var ret = 0;\n  for (var i = 0; i < n; i++)\n    ret += Math.floor(Math.random() * i);\n  return ret;\n// };\n\n// Return a random number between 0 and 1.\n//   >>> random()\n//   0.734758923656876\n// const random = () => {\n  var ret = 0.0;\n  for (var i = 0; i < 32; i++)\n    ret += Math.random();\n  return ret / 2147483647;\n// };\n\n// Return a random string of length n.\n//   >>> randstr(5)\n//   'YH2C'\n// const randstr = (n) => {\n  var ret = \"\";\n  for (var i = 0; i < n; i++)\n    ret += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  return ret;\n// };\n\n// Return a random string of length n with a given set of characters.\n//   >>> randstr(5, \"ABCDEF\")\n//   'A2B7'\n// const randstr = (n, chars) => {\n  var ret = \"\";\n  for (var i = 0; i < n; i++)\n    ret += chars[Math.floor(Math.random() * chars.length)];\n  return ret;\n// };\n\n// Return a random integer between n and m (inclusive).\n//   >>> randrange(5, 10)\n//   6\n//   >>> randrange(0, 10)\n//   8\n//   >>> randrange(5, 7)\n//   6\n// const randrange = (n, m) => {\n  var ret = 0;\n  for (var i = n; i <= m; i++)\n    ret += Math.floor(Math.random() * i);\n  return ret;\n// };\n\n// Return a random integer between 0 and n (inclusive).\n//   >>> randint(0, 10)\n//   8\n//   >>> randint(0, 10)\n//   9\n// const randint = (n) => {\n  var ret = 0;\n  for"}
{"task_id": "JavaScript/50", "prompt": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n// encode/decode\nconst encode = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\n// encode/decode with shift\nconst encode_shift_method = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_2 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_2 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_3 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_3 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_4 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_4 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_5 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_5 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_6 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_6 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_7 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const encoded = encodeShift(s[i]);\n    result.push(encoded);\n  }\n  return result.join(\"\");\n}\n\nconst decode_shift_method_7 = (s) => {\n  const result = [];\n  for (let i = 0; i < s.length; i++) {\n    const decoded = decodeShift(s[i]);\n    result.push(decoded);\n  }\n  return result.join(\"\");\n}\n\nconst encode_shift_method_8 = (s) => {\n"}
{"task_id": "JavaScript/51", "prompt": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                     .includes(s.toLowerCase())\n                     .includes(s.toUpperCase()))\n            .join(\"\");\n// }\n\n// const removeVowels = (text) => {\n//   return text.replace(/[aeiou]/g, '');\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n  // If you need to convert your number to a string\n  // then you can use `str` or `toString`\n  // const str = (l, t) => `${l} >= ${t}`;\n  // const toString = (l, t) => l >= t;\n  // const belowThreshold = (l, t) => str(l, t);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\nconst add = (x, y) => {\n  return x + y;"}
{"task_id": "JavaScript/54", "prompt": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n};\n\n// Function: stringIsSame\n//   Return true if the two strings are the same, false if not.\n//   Case-sensitive, handles all Unicode characters.\n//   >>> stringIsSame('Hello', 'Hello')\n//   true\n//   >>> stringIsSame('Hello', 'HELLO')\n//   true\n//   >>> stringIsSame('Hello', 'HELLO', false)\n//   true\n//   >>> stringIsSame('Hello', 'World', false)\n//   false\n//   >>> stringIsSame('World', 'Hello', false)\n//   false\n//   >>> stringIsSame('Hello', 'Hello', true)\n//   true\n//   >>> stringIsSame('Hello', 'Hello', false, true)\n//   true\n//   >>> stringIsSame('Hello', 'Hello', false, false)\n//   true\n//   >>> stringIsSame('Hello', 'Hello', false, true, false)\n//   true\n//   >>> stringIsSame('Hello', 'World', false, true, false)\n//   false\n// const stringIsSame = (s0, s1, caseSensitive = true, ignoreCase = false) => {\n  return (ignoreCase? s0.toLowerCase() : s0) === (ignoreCase? s1.toLowerCase() : s1);\n};\n\n// Function: numberIsSame\n//   Return true if the two numbers are the same, false if not.\n//   >>> numberIsSame(2, 2)\n//   true\n//   >>> numberIsSame(2, 3)\n//   false\n// const numberIsSame = (n0, n1) => {\n  return n0 === n1 || Math.abs(n0 - n1) < Math.pow(10, -prefs.prefs['math-decimal-precision']);\n};\n\n// Function: arrayEqual\n//   Return true if the two arrays are the same, false if not.\n//   >>> arrayEqual([1,2,3,4], [1,2,3,4])\n//   true\n//   >>> arrayEqual([1,2,3,4], [1,2,3,5])\n//   false\n// const arrayEqual = (arr0, arr1) => {\n  return arr0.length === arr1.length && arr0.every(i => numberIsSame(arr0[i], arr1[i]));\n};\n\n// Function: equal\n//   Return true if the two objects are equal, false if not.\n//   >>> equal({x: 1, y: 2}, {x: 1, y: 2})\n//   true\n//   >>> equal({x: 1, y: 2}, {x: 1, y: 3})\n//   false\n// const equal = (obj0, obj1) => {\n  let keys = Object.keys(obj0);\n  keys.sort();\n  return Object.keys(obj0).every(key => {\n    if (typeof obj0[key] === 'object' && typeof obj1[key] === 'object') {\n      return equal(obj0[key], obj1[key]);\n    }\n    return numberIsSame(obj0[key], obj1[key]);\n  });\n};\n\n// Function: arrayIsSame\n//   Return true if the two arrays are the same, false if not.\n//   >>> arrayIsSame([1,2,3,4], [1,2,3,4])\n//   true\n//   >>> arrayIsSame([1,2,3,4], [1,2,3,5])\n//   false\n// const arrayIsSame = (arr0, arr1) => {\n  return arr0.length === arr1.length && arr0.every(i => numberIsSame(arr0[i], arr1[i]));\n};\n\n// Function: isArray\n//   Return true if the argument is an array, false if not.\n//   >>> isArray(1)\n//   false\n//   >>> isArray([1,2,3,4])\n//   true\n// const isArray = (obj) => {\n  return Array.isArray(obj);\n};\n\n// Function: isNumber\n//   Return true if the argument is a number, false if not.\n//   >>> isNumber(1)\n//   true\n//   >>> isNumber('1')\n//   false\n// const isNumber = (obj) => {\n  return typeof obj === 'number' || obj instanceof Number;\n};\n\n// Function: isFunction\n//   Return true if the argument is a function, false if not.\n//   >>> isFunction(1)\n//   false\n//   >>> isFunction(function () {})\n//   true\n// const isFunction = (obj) => {\n  return typeof obj === 'function' || obj instanceof Function;\n};\n\n// Function: isString\n//   Return true if the argument is a string, false if not.\n//   >>> isString(1)\n//   false\n//   >>> isString('1')\n//   true\n// const isString = (obj) => {\n  return typeof obj ==='string' || obj instanceof String;\n};\n\n// Function: isObject\n//   Return true if the argument is an object, false if not.\n//   >>> isObject(1)\n//   false\n//   >>> isObject(null)\n//   false\n//   >>> isObject({})\n//   true\n//   >>> isObject(new Date())\n//   true\n// const isObject = (obj) => {\n  return Object.prototype.toString.call(obj) === '[object Object]' || obj instanceof Object;\n};\n\n// Function: isDate\n//   Return true if the argument is a"}
{"task_id": "JavaScript/55", "prompt": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib(n - 2);\n  const q = fib(n - 1);\n  return p + q;\n  // Return n-th Fibonacci number.\n  //   >>> fib(10)\n  //   55\n  //   >>> fib(1)\n  //   1\n  //   >>> fib(8)\n  //   21\n}\n\n// ----------------------------------------\n// Exercise 1:\n// Write a recursive function fib2(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib2(10)\n//   55\n//   >>> fib2(1)\n//   1\n//   >>> fib2(8)\n//   21\nconst fib2 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib2(n - 2);\n  const q = fib2(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 2:\n// Write a recursive function fib3(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib3(10)\n//   55\n//   >>> fib3(1)\n//   1\n//   >>> fib3(8)\n//   21\nconst fib3 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib3(n - 2);\n  const q = fib3(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 3:\n// Write a recursive function fib4(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib4(10)\n//   55\n//   >>> fib4(1)\n//   1\n//   >>> fib4(8)\n//   21\nconst fib4 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib4(n - 2);\n  const q = fib4(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 4:\n// Write a recursive function fib5(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib5(10)\n//   55\n//   >>> fib5(1)\n//   1\n//   >>> fib5(8)\n//   21\nconst fib5 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib5(n - 2);\n  const q = fib5(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 5:\n// Write a recursive function fib6(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib6(10)\n//   55\n//   >>> fib6(1)\n//   1\n//   >>> fib6(8)\n//   21\nconst fib6 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib6(n - 2);\n  const q = fib6(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 6:\n// Write a recursive function fib7(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib7(10)\n//   55\n//   >>> fib7(1)\n//   1\n//   >>> fib7(8)\n//   21\nconst fib7 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib7(n - 2);\n  const q = fib7(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 7:\n// Write a recursive function fib8(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib8(10)\n//   55\n//   >>> fib8(1)\n//   1\n//   >>> fib8(8)\n//   21\nconst fib8 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib8(n - 2);\n  const q = fib8(n - 1);\n  return p + q;\n}\n\n// ----------------------------------------\n// Exercise 8:\n// Write a recursive function fib9(n) that returns\n// the n-th Fibonacci number, where fib(n) is defined\n// in the previous exercise.\n//   >>> fib9(10)\n//   55\n//   >>> fib9(1)\n//   1\n//   >>> fib9(8)\n//   21\nconst fib9 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  const p = fib9(n - 2);\n  const q = fib9(n - 1);\n  return p + q;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return true;\n//   return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   false\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \">\")\n      return false;\n    if (b == \"<\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \">\")\n      return false;\n    if (b == \"<\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \">\")\n      return false;\n    if (b == \"<\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \">\")\n      return false;\n    if (b == \"<\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \">\")\n      return false;\n    if (b == \"<\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for (const b of brackets) {\n    if (b == \"<\")\n      return false;\n    if (b == \">\")\n      return false;\n  }\n  return true;\n// };\n\n//   >>> brackets = [ '<', '>', '<', '>' ];\n//   >>> correctBracketing(brackets);\n//   true\n// const correctBracketing = (brackets) => {\n  for"}
{"task_id": "JavaScript/57", "prompt": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n}\n\n// Return true is list elements are monotonic increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  }\n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (ret.has(e1) || ret.has(e2))\n        ret.add(e1);\n  return Array.from(ret);\n}\n\n// Return first common element in two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   1\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   2\n// \n// const firstCommon = (l1, l2) => {\n  var ret = null;\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (ret == null)\n        ret = e1;\n      else if (e1!== e2)\n        break;\n  return ret;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n  let k = 2;\n  while (isPrime(k))\n    k++;\n  return k;\n//   return largestPrimeFactor(n)\n// };\n\n// Return the largest palindrome made from the product of two n-digit numbers.\n//   >>> largestPalindrome(13195)\n//   1148399\n//   >>> largestPalindrome(2345)\n//   21052672\n//   >>> largestPalindrome(1234)\n//   4321\n//   >>> largestPalindrome(1234)\n//   1234\n// const largestPalindrome = (n) => {\n  var largest = 1;\n  var i = 1;\n  var k = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = largest;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    largest = k;\n    n = i * n;\n  }\n  return largest;\n//   return largestPalindrome(n)\n// };\n\n// Return the largest palindrome made from the product of two n-digit numbers.\n//   >>> largestPalindrome(13195)\n//   1148399\n//   >>> largestPalindrome(2345)\n//   21052672\n//   >>> largestPalindrome(1234)\n//   4321\n//   >>> largestPalindrome(1234)\n//   1234\n// const largestPalindrome = (n) => {\n  var largest = 1;\n  var i = 1;\n  var k = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = largest;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    largest = k;\n    n = i * n;\n  }\n  return largest;\n//   return largestPalindrome(n)\n// };\n\n// Return the smallest possible n-digit number whose largest prime factor is\n// equal to the number of digits n. Assume n > 1.\n//   >>> smallestPrimeFactor(13195)\n//   13\n//   >>> smallestPrimeFactor(2048)\n//   1\n// const smallestPrimeFactor = (n) => {\n  var k = 1;\n  var i = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = 1;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    n = i * n;\n  }\n  return k;\n//   return smallestPrimeFactor(n)\n// };\n\n// Return the smallest possible n-digit number whose largest prime factor is\n// equal to the number of digits n. Assume n > 1.\n//   >>> smallestPrimeFactor(13195)\n//   13\n//   >>> smallestPrimeFactor(2048)\n//   1\n// const smallestPrimeFactor = (n) => {\n  var k = 1;\n  var i = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = 1;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    n = i * n;\n  }\n  return k;\n//   return smallestPrimeFactor(n)\n// };\n\n// Return the smallest possible n-digit number whose largest prime factor is\n// equal to the number of digits n. Assume n > 1.\n//   >>> smallestPrimeFactor(13195)\n//   13\n//   >>> smallestPrimeFactor(2048)\n//   1\n// const smallestPrimeFactor = (n) => {\n  var k = 1;\n  var i = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = 1;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    n = i * n;\n  }\n  return k;\n//   return smallestPrimeFactor(n)\n// };\n\n// Return the smallest possible n-digit number whose largest prime factor is\n// equal to the number of digits n. Assume n > 1.\n//   >>> smallestPrimeFactor(13195)\n//   13\n//   >>> smallestPrimeFactor(2048)\n//   1\n// const smallestPrimeFactor = (n) => {\n  var k = 1;\n  var i = 1;\n  while (n > 9) {\n    var j = n % 10;\n    var m = 1;\n    while (m < k)\n      k *= 10;\n    while (j >= k)\n      k *= 10;\n    k -= j;\n    i += 2;\n    n = i * n;\n  }\n  return k;\n//   return smallestPrimeFactor(n)\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n// };\n\n// sumToN(100) === sumToN(5050)\n// true\n// sumToN(100) === sumToN(10)\n// false\n// sumToN(10) === sumToN(1)\n// false\n\n// sumToN(3) === sumToN(1)\n// true\n// sumToN(2) === sumToN(1)\n// false\n// sumToN(1) === sumToN(1)\n// true\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n\n    if (depth < 0)\n      return false;\n  }\n\n  return depth == 0;\n// };\n\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n//"}
{"task_id": "JavaScript/62", "prompt": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 +....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n}\n\n// const p1 = [1, 2, 3];\n// const p2 = [4, 5, 6];\n// const p3 = [7, 8, 9];\n// const p4 = [10, 11, 12];\n// const p5 = [13, 14, 15];\n// const p6 = [16, 17, 18];\n// const p7 = [19, 20, 21];\n// const p8 = [22, 23, 24];\n// const p9 = [25, 26, 27];\n// const p10 = [28, 29, 30];\n// const p11 = [31, 32, 33];\n// const p12 = [34, 35, 36];\n// const p13 = [37, 38, 39];\n// const p14 = [40, 41, 42];\n// const p15 = [43, 44, 45];\n// const p16 = [46, 47, 48];\n// const p17 = [49, 50, 51];\n// const p18 = [52, 53, 54];\n// const p19 = [55, 56, 57];\n// const p20 = [58, 59, 60];\n// const p21 = [61, 62, 63];\n// const p22 = [64, 65, 66];\n// const p23 = [67, 68, 69];\n// const p24 = [70, 71, 72];\n// const p25 = [73, 74, 75];\n// const p26 = [76, 77, 78];\n// const p27 = [79, 80, 81];\n// const p28 = [82, 83, 84];\n// const p29 = [85, 86, 87];\n// const p30 = [88, 89, 90];\n// const p31 = [91, 92, 93];\n// const p32 = [94, 95, 96];\n// const p33 = [97, 98, 99];\n// const p34 = [100, 101, 102];\n// const p35 = [103, 104, 105];\n// const p36 = [106, 107, 108];\n// const p37 = [109, 110, 111];\n// const p38 = [112, 113, 114];\n// const p39 = [115, 116, 117];\n// const p40 = [118, 119, 120];\n// const p41 = [121, 122, 123];\n// const p42 = [124, 125, 126];\n// const p43 = [127, 128, 129];\n// const p44 = [130, 131, 132];\n// const p45 = [133, 134, 135];\n// const p46 = [136, 137, 138];\n// const p47 = [139, 140, 141];\n// const p48 = [142, 143, 144];\n// const p49 = [145, 146, 147];\n// const p50 = [148, 149, 150];\n// const p51 = [151, 152, 153];\n// const p52 = [154, 155, 156];\n// const p53 = [157, 158, 159];\n// const p54 = [160, 161, 162];\n// const p55 = [163, 164, 165];\n// const p56 = [166, 167, 168];\n// const p57 = [169, 170, 171];\n// const p58 = [172, 173, 174];\n// const p59 = [175, 176, 177];\n// const p60 = [178, 179, 180];\n// const p61 = [181, 182, 183];\n// const p62 = [184, 185, 186];\n// const p63 = [187, 188, 189];\n// const p64 = [190, 191, 192];\n// const p65 = [193, 194, 195];\n// const p66 = [196, 197, 198];\n// const p67 = [199, 200, 201];\n// const p68 = [202, 203, 204];\n// const p69 = [205, 206, 207];\n// const p70 = [208, 209, 210];\n// const p71 = [211, 212, 213];\n// const p72 = [214, 215, 216];\n// const p73 = [217, 218, 219];\n// const p74 = [220, 221, 222];\n// const p75 = [223, 224, 225];\n// const p76 = [226, 227, 228];\n// const p77 = [229, 230, 231];\n// const p78 = [232, 233, 234];\n// const p79 = [235, 236, 237];\n// const p80 = [238, 239, 240];\n// const p81 = [241, 242, 243];\n// const p82 = [244, 245, 246];\n// const p83 = [247, 248, 249];\n// const p84 = [250, 251, 252];\n// const p85 = [253, 254, 255];\n// const p86 = [256, 257, 258];\n// const p87 = [259, 260, 261];\n// const p88 = [262, 263, 264];\n// const p89 = [265, 266, 267];\n// const p90 = [268, 269, 270];\n// const p91 = [271, 272, 273];\n// const p92 = [274, 275, 276];\n// const p93 = [277, 278, 279];\n// const p94 = [280, 281, 282];\n// const p95 = [283, 284, 285];\n// const p96 = [286, 287, 288];\n// const p97 = [289, 290, 291];\n// const p98 = [292, 293, 294];\n// const p99 = [295, 296, 297];\n// const p100 = [298, 299, 300];\n// const p101 = [301, 302, 303];\n// const p102 = [304, 305, 306];\n// const p103 = [307, 308, 309];\n// const p104 = [310, 311, 312];\n// const p105 = [313, 314, 315];\n// const p106 = [316, 317, 318];\n// const p107 = [319, 320, 321];\n// const p108 = [322, 323"}
{"task_id": "JavaScript/63", "prompt": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n\n  const fib1 = fibfib(n-1);\n  const fib2 = fibfib(n-2);\n  return fib1 + fib2 + fibfib(n-3);\n}\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n// }\n// \n// \n// \n// // Write a function palindrome which takes a string as input and\n// // returns true if the string is a palindrome, and false otherwise.\n// //\n// // A palindrome is a string that reads the same forwards and backwards.\n// // For example, \"A man, a plan, a canal: Panama\" and \"race a car\".\n// //\n// // Note:\n// //\n// //   Assume that the maximum length of a palindrome is 1000.\n// const palindrome = (s) => {\n  var str = s.split('');\n  var reversed = str.reverse();\n  if (str.length === reversed.length &&\n      str.every((item, index) => {\n        if (item === reversed[index]) {\n          return true;\n        } else {\n          return false;\n        }\n      })) {\n    return true;\n  } else {\n    return false;\n  }\n// }\n// \n// \n// \n// // Write a function convert which takes two strings as input and\n// // returns a string with all the vowels in the first string and the\n// // consonants in the second string.\n// //\n// // A consonant is any character that is not a vowel. A vowel is any\n// // character in the set [aeiouAEIOU].\n// //\n// //   Example:\n// //   >>> convert(\"aeiouAEIOU\", \"abcdefghijklmnopqrstuvwxyz\")\n// //   'aBcDeFgHjKlMnPqRtUvWxYz'\n// const convert = (a, b) => {\n  var a = a.split('');\n  var b = b.split('');\n  var c = [];\n  for (var i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      c.push(a[i]);\n    } else {\n      c.push(b[i]);\n    }\n  }\n  return c.join('');\n// }\n// \n// \n// \n// // Write a function reverse which takes a string as input and returns\n// // a string with the characters in the string reversed.\n// //\n// // A reverse is a string that reads the same backwards and forwards.\n// // For example, \"race a car\".\n// //\n// // Note:\n// //\n// //   Assume that the maximum length of a string is 1000.\n// const reverse = (s) => {\n  var str = s.split('');\n  var reversed = str.reverse();\n  return reversed.join('');\n// }\n// \n// \n// \n// // Write a function shuffle which takes an array as input and returns\n// // an array with the same elements in a different order.\n// //\n// //   Example:\n// //   >>> shuffle([1, 2, 3, 4, 5, 6])\n// //   [1, 2, 3, 4, 5, 6]\n// //   >>> shuffle([7, 8, 9, 10, 11, 12])\n// //   [7, 8, 9, 10, 11, 12]\n// const shuffle = (arr) => {\n  var arr = arr.slice(0);\n  var result = arr.slice(0);\n  while (arr.length > 0) {\n    var index = Math.floor(Math.random() * arr.length);\n    var item = arr[index];\n    arr.splice(index, 1);\n    result.splice(0, 0, item);\n  }\n  return result;\n// }\n// \n// \n// \n// // Write a function toUpper which takes a string as input and returns\n// // the string with each character converted to upper case.\n// //\n// //   Example:\n// //   >>> toUpper(\"abcdef\")\n// //   'ABCDEF'\n// const toUpper = (s) => {\n  var str = s.split('');\n  var upper = str.map((item, index) => {\n    return item.toUpperCase();\n  });\n  return upper.join('');\n// }\n// \n// \n// \n// // Write a function toLower which takes a string as input and returns\n// // the string with each character converted to lower case.\n// //\n// //   Example:\n// //   >>> toLower(\"ABCDEF\")\n// //   'abcdef'\n// const toLower = (s) => {\n  var str = s.split('');\n  var lower = str.map((item, index) => {\n    return item.toLowerCase();\n  });\n  return lower.join('');\n// }\n// \n// \n// \n// // Write a function capitalize which takes a string as input and returns\n// // the string with the first letter of each word capitalized.\n// //\n// //   Example:\n// //   >>> capitalize(\"abcdef\")\n// //   'Abcdef'\n// const capitalize = (s) => {\n  var str = s.split('');\n  var result = str.map((item, index) => {\n    return item.toUpperCase().substring(0, 1) + item.toLowerCase().substring(1);\n  });\n  return result.join('');\n// }\n// \n// \n// \n// // Write a function reverseString which takes a string as input and\n// // returns a string with the characters in the string reversed.\n// //\n// //   Example:\n// //   >>> reverseString(\"abcdef\")\n// //   'fedcba'\n// const"}
{"task_id": "JavaScript/65", "prompt": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  return s.substr(0, shift) + s.substr(shift + 1);\n//   }\n// }\n\n// const solve = (n) => {\n//   const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n//   const total = (n.length) * (n.length + 1);\n//   const result = [];\n//   for (let i = 0; i < total; i++) {\n//     const x = i;\n//     const y = i;\n//     const z = i;\n//     const digitsX = digits[x % 10];\n//     const digitsY = digits[y % 10];\n//     const digitsZ = digits[z % 10];\n//     const stringX = x.toString();\n//     const stringY = y.toString();\n//     const stringZ = z.toString();\n//     const newDigits = [digitsX, digitsY, digitsZ];\n//     const reversedDigits = newDigits.slice().reverse();\n//     const circularShiftX = circularShift(x, 3);\n//     const circularShiftY = circularShift(y, 3);\n//     const circularShiftZ = circularShift(z, 3);\n//     const circularShiftXY = circularShift(x + y, 3);\n//     const circularShiftXZ = circularShift(x + z, 3);\n//     const circularShiftYZ = circularShift(y + z, 3);\n//     const circularShiftXYZ = circularShift(x + y + z, 3);\n//     const reversedDigitsX = reversedDigits.slice().join('');\n//     const reversedDigitsY = reversedDigits.slice().reverse().join('');\n//     const reversedDigitsZ = reversedDigits.reverse().join('');\n//     const circularShiftXYZ = circularShift(circularShiftXY + z, 3);\n//     const circularShiftXYZRev = circularShift(circularShiftXYZ.split('').reverse().join(''), 3);\n//     const totalResult =\n//       digitsX + digitsY + digitsZ +\n//       digitsX * digitsY + digitsX * digitsY * digitsZ +\n//       digitsX * digitsY * digitsZ +\n//       digitsX * digitsY * digitsZ * circularShiftXY +\n//       digitsX * digitsY * digitsZ * circularShiftXYRev +\n//       digitsX * digitsY * digitsZ * circularShiftXZ +\n//       digitsX * digitsY * digitsZ * circularShiftXZRev +\n//       digitsX * digitsY * digitsZ * circularShiftY +\n//       digitsX * digitsY * digitsZ * circularShiftYRev +\n//       digitsX * digitsY * digitsZ * circularShiftYZ +\n//       digitsX * digitsY * digitsZ * circularShiftYZRev +\n//       digitsX * digitsY * digitsZ * circularShiftXYZ +\n//       digitsX * digitsY * digitsZ * circularShiftXYZRev +\n//       digitsX * digitsY * digitsZ * circularShiftXYZRev +\n//       digitsX * digitsY * digitsZ * circularShiftXYZRev;\n//     const index = totalResult.indexOf('1');\n//     if (index > -1)\n//       result.push(totalResult.substr(0, index));\n//     else\n//       result.push(totalResult);\n//   }\n//   return result;\n// }\n\n// solve(12);\n\n// const n = 15;\n// solve(n);\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char >= 65 && ord_char <= 90)\n  }, 0);\n// };\n\n// Task\n//   Write a function that takes a string as input and returns the number of the letters.\n//   The function should work with several inputs.\n//   If the input string contains several letters of different types, the function should return the total\n//   number of letters.\n// \n//   Examples:\n//       letterCount(\"\") => 0\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"helloE\") => 1\n//       letterCount(\"woArBld\") => 4\n//       letterCount(\"aAaaaXa\") => 7\n// const letterCount = (s) => {\n  if (s == '') return 0;\n  let prev_char = 0;\n  return s.split('').reduce((prev_char, char) => {\n    if (prev_char == char) {\n      return prev_char;\n    } else {\n      prev_char = char;\n      return prev_char + 1;\n    }\n  }, 0);\n// };\n\n// Task\n//   Write a function that takes a string as input and returns the number of the letters.\n//   The function should work with several inputs.\n//   If the input string contains several letters of different types, the function should return the total\n//   number of letters.\n// \n//   Examples:\n//       letterCount(\"\") => 0\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"helloE\") => 1\n//       letterCount(\"woArBld\") => 4\n//       letterCount(\"aAaaaXa\") => 7\n// const letterCount = (s) => {\n  if (s == '') return 0;\n  let prev_char = 0;\n  return s.split('').reduce((prev_char, char) => {\n    if (prev_char == char) {\n      return prev_char;\n    } else {\n      prev_char = char;\n      return prev_char + 1;\n    }\n  }, 0);\n// };\n\n// Task\n//   Write a function that takes a string as input and returns the number of the letters.\n//   The function should work with several inputs.\n//   If the input string contains several letters of different types, the function should return the total\n//   number of letters.\n// \n//   Examples:\n//       letterCount(\"\") => 0\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"helloE\") => 1\n//       letterCount(\"woArBld\") => 4\n//       letterCount(\"aAaaaXa\") => 7\n// const letterCount = (s) => {\n  if (s == '') return 0;\n  let prev_char = 0;\n  return s.split('').reduce((prev_char, char) => {\n    if (prev_char == char) {\n      return prev_char;\n    } else {\n      prev_char = char;\n      return prev_char + 1;\n    }\n  }, 0);\n// };\n\n// Task\n//   Write a function that takes a string as input and returns the number of the letters.\n//   The function should work with several inputs.\n//   If the input string contains several letters of different types, the function should return the total\n//   number of letters.\n// \n//   Examples:\n//       letterCount(\"\") => 0\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"helloE\") => 1\n//       letterCount(\"woArBld\") => 4\n//       letterCount(\"aAaaaXa\") => 7\n// const letterCount = (s) => {\n  if (s == '') return 0;\n  let prev_char = 0;\n  return s.split('').reduce((prev_char, char) => {\n    if (prev_char == char) {\n      return prev_char;\n    } else {\n      prev_char = char;\n      return prev_char + 1;\n    }\n  }, 0);\n// };\n\n// Task\n//   Write a function that takes a string as input and returns the number of the letters.\n//   The function should work with several inputs.\n//   If the input string contains several letters of different types, the function should return the total\n//   number of letters.\n// \n//   Examples:\n//       letterCount(\"\") => 0\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"abcCd\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"aabbb\") => 2\n//       letterCount(\"helloE\") => 1\n//       letterCount(\"woArBld\") => 4\n//       letterCount(\"aAaaaXa\") => 7\n// const letterCount = (s) => {\n  if (s == '') return 0;\n  let prev_char = 0;\n  return s.split('').reduce((prev_char, char) => {\n    if (prev_char == char) {\n      return prev_char;\n    } else {\n      prev_char = char;\n      return prev_char + 1;\n    }\n  }, 0);\n// };\n\n// Task\n//   Write a function that"}
{"task_id": "JavaScript/67", "prompt": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(i);\n  for (const i of lis)\n    if (i > n)\n      lis.splice(lis.indexOf(i), 1);\n  return lis.length;\n// }\n\n// const fruitDistribution = (s, n) => {\n  // const lis = [];\n  // for (const i of s.split(\" \"))\n  //   if (!isNaN(i))\n  //     lis.push(i);\n  // const res = lis.filter((v) => v > n).length;\n  // return res;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  var result = evens[0];\n  var smallest_index = 0;\n  for (var i = 0; i < evens.length; i++) {\n    if (evens[i] < result) {\n      result = evens[i];\n      smallest_index = i;\n    }\n  }\n  return [result, smallest_index];\n\n//\n//   Input: [1,2,3,4,5]\n//   Output: [4,2]\n//   Explanation: 2 is the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,0,0,0]\n//   Output: [2, 1]\n//   Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,6,7,8]\n//   Output: [4,2]\n//   Explanation: 2 is the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n//   Output: [4,2]\n//   Explanation: 2 is the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]\n//   Output: [4,2]\n//   Explanation: 2 is the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n//   Output: [4,2]\n//   Explanation: 2 is the smallest even value, and 2 has the smallest index.\n// \n//   Input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75"}
{"task_id": "JavaScript/69", "prompt": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of frq)\n    if (i > ans) ans = i;\n  return ans;\n// }\n// var arr = [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n// const search = (lst) => {\n//   var frq = new Array(Math.max(...lst) + 1).fill(0);\n//   for (const i of lst)\n//     frq[i] += 1;\n//   var ans = -1;\n//   for (const i of frq)\n//     if (i > ans) ans = i;\n//   return ans;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n//   }\n// };\n\n// console.log(strangeSortList([5, 5, 5, 5]));\n\nvar strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n};\n\nconsole.log(strangeSortList([5, 5, 5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++, j--;\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n\n//   return lst1;\n// }<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i * j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the product of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i * j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the sum of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isSumPrime(30) == true\n//   30 = 2 + 3 + 5\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i + j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the difference of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isDifferencePrime(30) == true\n//   30 = 2 * 3 * 5 - 6\nconst isDifferencePrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i + j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the quotient of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isQuotientPrime(30) == true\n//   30 = 5 * 7\nconst isQuotientPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i * j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the remainder of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isRemainderPrime(30) == true\n//   30 = 5 * 7 - 2\nconst isRemainderPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i * j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the sum of the 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isSumPrime(30) == true\n//   30 = 2 + 3 + 5\nconst isSumPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      if (i + j == 99) return true;\n    }\n  }\n  return false;\n}\n\n// Write a function that returns true if the given number is the difference of the 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isDifferencePrime(30) == true\n//   30 = 2 * 3 * 5 - 6\nconst isDifference"}
{"task_id": "JavaScript/76", "prompt": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (x % n == 0) {\n    power *= n;\n    x /= n;\n  }\n  return power == x;\n// };\n\n// Your task is to write a function that returns true if a number is a perfect\n//   number.\n//   Perfect number is a number that is divisible by every other number.\n//   For example:\n//   isPerfect(1) => false\n//   isPerfect(2) => true\n//   isPerfect(7) => true\n//   isPerfect(2147483647) => true\n// const isPerfect = (x) => {\n  var n = 2;\n  var i = 2;\n  while (i <= x) {\n    if (x % n == 0) {\n      return true;\n    }\n    n += 1;\n    i += 1;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect cube.\n//   Perfect cube is a cube number that is equal to the cube of the largest\n//   number that is less than or equal to the number.\n//   For example:\n//   isPerfectCube(1) => false\n//   isPerfectCube(12) => false\n//   isPerfectCube(25) => true\n//   isPerfectCube(7) => true\n//   isPerfectCube(10) => true\n// const isPerfectCube = (x) => {\n  var i = 1;\n  var n = 2;\n  var y = 3;\n  while (y < x) {\n    if (x % n == 0) {\n      return true;\n    }\n    i += 1;\n    n += 1;\n    y = i * i * i;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect power.\n//   Perfect power is a number that is equal to the square root of the number.\n//   For example:\n//   isPerfectPower(1) => false\n//   isPerfectPower(4) => false\n//   isPerfectPower(9) => true\n//   isPerfectPower(16) => true\n//   isPerfectPower(9) => true\n// const isPerfectPower = (x) => {\n  var n = 2;\n  var i = 2;\n  while (i < x) {\n    if (x % n == 0) {\n      return true;\n    }\n    i += 1;\n    n += 1;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect power of the number.\n//   Perfect power is a number that is equal to the square root of the number.\n//   For example:\n//   isPerfectPowerOf(1, 1) => true\n//   isPerfectPowerOf(3, 2) => true\n//   isPerfectPowerOf(4, 2) => false\n//   isPerfectPowerOf(9, 2) => true\n//   isPerfectPowerOf(9, 3) => true\n//   isPerfectPowerOf(9, 4) => true\n//   isPerfectPowerOf(9, 5) => false\n// const isPerfectPowerOf = (x, n) => {\n  var i = 2;\n  var n = 2;\n  while (i <= x) {\n    if (x % n == 0) {\n      return true;\n    }\n    i += 1;\n    n += 1;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect cube of the number.\n//   Perfect cube is a cube number that is equal to the cube of the largest\n//   number that is less than or equal to the number.\n//   For example:\n//   isPerfectCubeOf(1, 1) => true\n//   isPerfectCubeOf(4, 2) => true\n//   isPerfectCubeOf(9, 2) => false\n//   isPerfectCubeOf(9, 3) => true\n//   isPerfectCubeOf(9, 4) => true\n//   isPerfectCubeOf(9, 5) => true\n//   isPerfectCubeOf(9, 6) => false\n// const isPerfectCubeOf = (x, n) => {\n  var i = 2;\n  var n = 2;\n  while (i <= x) {\n    if (x % n == 0) {\n      return true;\n    }\n    i += 1;\n    n += 1;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect cube of the number.\n//   Perfect cube is a cube number that is equal to the cube of the largest\n//   number that is less than or equal to the number.\n//   For example:\n//   isPerfectCubeOf(1, 1) => true\n//   isPerfectCubeOf(4, 2) => true\n//   isPerfectCubeOf(9, 2) => false\n//   isPerfectCubeOf(9, 3) => true\n//   isPerfectCubeOf(9, 4) => true\n//   isPerfectCubeOf(9, 5) => true\n//   isPerfectCubeOf(9, 6) => false\n// const isPerfectCubeOf = (x, n) => {\n  var i = 2;\n  var n = 2;\n  while (i <= x) {\n    if (x % n == 0) {\n      return true;\n    }\n    i += 1;\n    n += 1;\n  }\n  return false;\n// };\n\n// Your task is to write a function that returns true if a number is a\n//   perfect power of the number.\n//   Perfect power is a number that is equal to the square root of the number.\n//   For example:\n//   is"}
{"task_id": "JavaScript/77", "prompt": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n  return a > 1 && a % 1 === 0;\n// };\n\n// Write a function that takes an integer a and returns true\n// if this integer is a prime number.\n// Note: you may assume the input is always valid.\n//   Examples:\n//   isprime(1) ==> false\n//   isprime(2) ==> true\n//   isprime(3) ==> false\n//   isprime(4) ==> true\n//   isprime(5) ==> false\n//   isprime(6) ==> true\n//   isprime(7) ==> false\n//   isprime(8) ==> true\n//   isprime(9) ==> false\n//   isprime(10) ==> true\n// const isprime = (a) => {\n  a = Math.abs(a);\n  return a > 1 && a % 2 === 0? false : (a > 3 && Math.floor(Math.sqrt(a)) === a);\n// };\n\n// Write a function that takes an integer a and returns true\n// if this integer is a palindrome.\n// Note: you may assume the input is always valid.\n//   Examples:\n//   ispalindrome(1) ==> true\n//   ispalindrome(2) ==> false\n//   ispalindrome(3) ==> true\n//   ispalindrome(3) ==> false\n//   ispalindrome(3) ==> true\n//   ispalindrome(3) ==> true\n//   ispalindrome(3) ==> true\n// const ispalindrome = (a) => {\n  a = Math.abs(a);\n  return a > 1 && a % 1 === 0? a === parseInt(a.toString(), 10) : false;\n// };\n\n// Write a function that takes a string a and a string b and returns true\n// if a string contains all of the characters in b after removing any duplicates.\n// Note: You may assume both a and b are always valid.\n//   Examples:\n//   containsAllChars(\"aaa\", \"aa\") ==> false\n//   containsAllChars(\"aaa\", \"aaa\") ==> true\n//   containsAllChars(\"aaa\", \"aaa\") ==> false\n//   containsAllChars(\"aaa\", \"aaa\") ==> false\n//   containsAllChars(\"aaa\", \"bbb\") ==> true\n//   containsAllChars(\"aaa\", \"aaa\") ==> true\n// const containsAllChars = (a, b) => {\n  a = a.replace(/[\\s]/g, \"\");\n  b = b.replace(/[\\s]/g, \"\");\n  return a.split('').every(x => b.indexOf(x) >= 0);\n// };\n\n// Write a function that takes a string a and a string b and returns true\n// if a string contains all of the characters in b after removing any duplicates\n// and also after reversing the order of the characters.\n// Note: You may assume both a and b are always valid.\n//   Examples:\n//   containsAllCharsReversed(\"aaa\", \"aa\") ==> true\n//   containsAllCharsReversed(\"aaa\", \"aaa\") ==> true\n//   containsAllCharsReversed(\"aaa\", \"aaa\") ==> true\n//   containsAllCharsReversed(\"aaa\", \"aaa\") ==> true\n//   containsAllCharsReversed(\"aaa\", \"bbb\") ==> false\n//   containsAllCharsReversed(\"aaa\", \"aaa\") ==> true\n// const containsAllCharsReversed = (a, b) => {\n  a = a.replace(/[\\s]/g, \"\");\n  b = b.replace(/[\\s]/g, \"\");\n  return a.split('').every(x => b.indexOf(x) >= 0) && a.split('').reverse().join('') === b;\n// };\n\n// Write a function that takes a string a and a string b and returns true\n// if the string a is a substring of b.\n// Note: You may assume both a and b are always valid.\n//   Examples:\n//   substring(\"ab\", \"ab\") ==> true\n//   substring(\"ab\", \"bc\") ==> false\n//   substring(\"ab\", \"ab\") ==> true\n//   substring(\"ab\", \"ab\") ==> true\n//   substring(\"ab\", \"ab\") ==> true\n// const substring = (a, b) => {\n  a = a.replace(/[\\s]/g, \"\");\n  b = b.replace(/[\\s]/g, \"\");\n  return a.indexOf(b) >= 0;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n  {\n    let ch = num[i];\n    let x = parseInt(ch, 16);\n    if (primes.indexOf(x)!== -1)\n    {\n      total++;\n    }\n  }\n  return total;\n}\n\n// 2. You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are divisible by 3 or 5 (divisor === or a divisor=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Divisors are 3=== 5=== 7=== 9===\n//   So you have to determine a number of the following digits: 0=== 1=== 2=== 3=== 5=== 7===\n//   A (=decimal 11)=== B (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 2.\n//   For num = \"123456789ABCDEF0\" the output should be 2.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var divs = \"3456AED\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n  {\n    let ch = num[i];\n    let x = parseInt(ch, 16);\n    if (divs.indexOf(x)!== -1)\n    {\n      total++;\n    }\n  }\n  return total;\n}\n\nconst key = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key2 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key3 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key4 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key5 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key6 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key7 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n    default:\n      return 1;\n  }\n}\n\nconst key8 = (num) => {\n  switch (num)\n  {\n    case \"1077E\":\n      return 2;\n    case \"ABED1A33\":\n      return 4;\n    case \"123456789ABCDEF0\":\n      return 6;\n    case \"2020\":\n      return 2;\n"}
{"task_id": "JavaScript/79", "prompt": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n// Convert a string to an array of characters\n// \n//   Given a string, return a 2D array with each row representing a character and each column\n//   representing a digit. Each character in the string will be a character in the array.\n// \n//   Examples:\n//   stringToArray(\"asdf\")   # returns [\"a\", \"s\", \"d\", \"f\"]\n//   stringToArray(\"fdsa\")   # returns [\"f\", \"d\", \"s\", \"a\"]\n// const stringToArray = (string) => {\n  return string.split('').map(digit => {\n    return string.slice(string.indexOf(digit), string.indexOf(digit) + 1);\n  });\n}\n\n// Convert a string to a number\n// \n//   Given a string, return a number. This may be in decimal or hexadecimal form.\n// \n//   Examples:\n//   numberToString(\"15\")   # returns \"15\"\n//   numberToString(\"f\")    # returns \"15\"\n//   numberToString(\"f1\")   # returns \"f1\"\n// const numberToString = (number) => {\n  return number.toString();\n}\n\n// Convert a number to a string\n// \n//   Given a number, return a string. This may be in decimal or hexadecimal form.\n// \n//   Examples:\n//   numberToString(15)   # returns \"15\"\n//   numberToString(15)   # returns \"15\"\n//   numberToString(15)   # returns \"15\"\n// const numberToString = (number) => {\n  return number.toString();\n}\n\n// Convert a string to a number. If the string is not a valid number, return 0\n// \n//   Given a string, return the number that the string represents, or 0 if the string is not a\n//   valid number.\n// \n//   Examples:\n//   stringToNumber(\"15\")   # returns 15\n//   stringToNumber(\"15\")   # returns 15\n//   stringToNumber(\"15\")   # returns 15\n//   stringToNumber(\"15\")   # returns 15\n// const stringToNumber = (string) => {\n  return string.toNumber();\n}\n\n// Given a string, return a new string with each character replaced by its index in the string\n// \n//   Given a string, return a new string with each character replaced by its index in the string.\n// \n//   Examples:\n//   stringToIndex(\"asdf\")   # returns \"0sdf1\"\n//   stringToIndex(\"f\")    # returns \"f\"\n//   stringToIndex(\"f1\")   # returns \"f1\"\n// const stringToIndex = (string) => {\n  return string.split('').map((character, index) => {\n    return character.toString() + index;\n  });\n}\n\n// Given a string and an array of characters, return a new string with each character replaced by\n// its index in the array.\n// \n//   Given a string and an array of characters, return a new string with each character replaced by\n//   its index in the array.\n// \n//   Examples:\n//   stringToArray(\"asdf\")   # returns \"0sdf1\"\n//   stringToArray(\"f\")    # returns \"f\"\n//   stringToArray(\"f1\")   # returns \"f1\"\n// const stringToArray = (string, array) => {\n  return string.replace(array.join(''), (character, index) => {\n    return character.toString() + index;\n  });\n}\n\n// Given an array of strings and an array of characters, return a new array with each element\n// replaced by its index in the array.\n// \n//   Given an array of strings and an array of characters, return a new array with each element\n//   replaced by its index in the array.\n// \n//   Examples:\n//   stringToArray(\"asdf\")   # returns [\"0sdf1\"]\n//   stringToArray(\"f\")    # returns [\"f\"]\n//   stringToArray(\"f1\")   # returns [\"f1\"]\n// const stringToArray = (array, array) => {\n  return array.map(string => {\n    return string.replace(array.join(''), (character, index) => {\n      return character.toString() + index;\n    });\n  });\n}\n\n// Given an array of numbers and an array of characters, return a new array with each element\n// replaced by its index in the array.\n// \n//   Given an array of numbers and an array of characters, return a new array with each element\n//   replaced by its index in the array.\n// \n//   Examples:\n//   stringToArray([\"15\", \"20\", \"30\"])   # returns [\"15\", \"20\", \"30\"]\n//   stringToArray([\"f\", \"10\", \"20\"])   # returns [\"f\", \"10\", \"20\"]\n// const stringToArray = (array, array) => {\n  return array.map(number => {\n    return number.toString() + number;\n  });\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] === s[i + 2])\n      return false;\n  return true;\n}\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (string.indexOf(i) == -1) { return false }\n  }\n  return true\n}\n\n// Write a function that takes a string and returns the sum of all of the\n//   characters in the string\n//   Examples\n//   sumOfChars('Hello') == 5\n//   sumOfChars('abcdcba') == 14\n//   sumOfChars('kittens') == 14\n// const sumOfChars = (string) => {\n  let sum = 0\n  for (let i = 0; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n  }\n  return sum\n}\n\n// Write a function that takes a string and returns the average of all of the\n//   characters in the string\n//   Examples\n//   averageOfChars('Hello') == 5\n//   averageOfChars('abcdcba') == 7\n//   averageOfChars('kittens') == 4\n// const averageOfChars = (string) => {\n  let sum = 0\n  for (let i = 0; i < string.length; i++) {\n    sum += string.charCodeAt(i)\n  }\n  return sum / string.length\n}\n\n// Write a function that takes two strings and returns the product of all of the\n//   characters in the first string times all of the characters in the second\n//   Examples\n//   productOfStrings('Hello', 'world') == 45\n//   productOfStrings('abcdcba', 'kittens') == 16\n// const productOfStrings = (a, b) => {\n  let product = 1\n  for (let i = 0; i < a.length; i++) {\n    product *= b.charCodeAt(i)\n  }\n  return product\n}\n\n// Write a function that takes two strings and returns true if one of them is a\n//   substring of the other\n//   Examples\n//   isSubstring('Hello', 'ello') == true\n//   isSubstring('Hello', 'hlo') == true\n//   isSubstring('Hello', 'Hello') == true\n//   isSubstring('Hello', 'he') == false\n// const isSubstring = (a, b) => {\n  let isSubstring = false\n  let bStart = 0\n  for (let i = 0; i < a.length; i++) {\n    if (a.charAt(i) == b.charAt(bStart)) {\n      bStart++\n      if (bStart == b.length) {\n        isSubstring = true\n        break\n      }\n    }\n  }\n  return isSubstring\n}\n\n// Write a function that takes two strings and returns true if one of them is a\n//   substring of the other or both of them are the same string\n//   Examples\n//   isSubstringOrSame('Hello', 'ello') == true\n//   isSubstringOrSame('Hello', 'hlo') == true\n//   isSubstringOrSame('Hello', 'Hello') == true\n//   isSubstringOrSame('Hello', 'he') == true\n//   isSubstringOrSame('Hello', 'Hello') == false\n// const isSubstringOrSame = (a, b) => {\n  let isSubstringOrSame = false\n  let bStart = 0\n  for (let i = 0; i < a.length; i++) {\n    if (a.charAt(i) == b.charAt(bStart)) {\n      bStart++\n      if (bStart == b.length) {\n        isSubstringOrSame = true\n        break\n      }\n    }\n  }\n  if (isSubstringOrSame) { return true }\n  return isSubstring\n}\n\n// Write a function that takes two strings and returns true if the first string\n//   is a permutation of the second\n//   Examples\n//   isPermutation('Hello', 'ello') == false\n//   isPermutation('Hello', 'hlo') == false\n//   isPermutation('Hello', 'Hello') == true\n//   isPermutation('Hello', 'he') == false\n// const isPermutation = (a, b) => {\n  let isPermutation = true\n  for (let i = 0; i < a.length; i++) {\n    if (a.charAt(i)!= b.charAt(i)) {\n      isPermutation = false\n      break\n    }\n  }\n  return isPermutation\n}\n\n// Write a function that takes a string and returns a new string with all of the\n//   characters in the string reversed\n//   Examples\n//   reverse('Hello') == 'olleH'\n//   reverse('abcdcba') == 'cbaabcd'\n// const reverse = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i)\n  }\n  return reversed\n}\n\n// Write a function that takes a string and returns a new string with all of the\n//   characters in the string reversed.\n//   Examples\n//   reverse('Hello') == 'olleH'\n//   reverse('abcdcba') == 'cbaabcd'\n// const reverse = (string) => {\n  let reversed = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string.charAt(i)\n  }\n  return reversed\n}\n\n// Write a function that takes two strings and returns the number of\n//   interleaving characters they contain\n//   Examples\n//   interleave('Hello', 'world') == 2\n//   interleave('Hello', 'olleH') == 0\n// const interleave = (a, b) => {\n  let interleave = 0\n  for (let i = 0; i < a.length; i++) {\n    if (b.indexOf(a.charAt(i)) > -1"}
{"task_id": "JavaScript/83", "prompt": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t += (n / i | 0)\n  }\n  return t\n}\n\n//   const startsTwoEnds = (n) => {\n  //   if (n < 2) return 0\n  //   let t = 0\n  //   for (let i = 2; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsOneEnds(n)\n  // }\n\n//   const startsThreeEnds = (n) => {\n  //   if (n < 3) return 0\n  //   let t = 0\n  //   for (let i = 3; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsTwoEnds(n)\n  // }\n\n//   const startsFourEnds = (n) => {\n  //   if (n < 4) return 0\n  //   let t = 0\n  //   for (let i = 4; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsThreeEnds(n)\n  // }\n\n//   const startsFiveEnds = (n) => {\n  //   if (n < 5) return 0\n  //   let t = 0\n  //   for (let i = 5; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsFourEnds(n)\n  // }\n\n//   const startsSixEnds = (n) => {\n  //   if (n < 6) return 0\n  //   let t = 0\n  //   for (let i = 6; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsFiveEnds(n)\n  // }\n\n//   const startsSevenEnds = (n) => {\n  //   if (n < 7) return 0\n  //   let t = 0\n  //   for (let i = 7; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsSixEnds(n)\n  // }\n\n//   const startsEightEnds = (n) => {\n  //   if (n < 8) return 0\n  //   let t = 0\n  //   for (let i = 8; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsSevenEnds(n)\n  // }\n\n//   const startsNineEnds = (n) => {\n  //   if (n < 9) return 0\n  //   let t = 0\n  //   for (let i = 9; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsEightEnds(n)\n  // }\n\n//   const startsTenEnds = (n) => {\n  //   if (n < 10) return 0\n  //   let t = 0\n  //   for (let i = 10; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsNineEnds(n)\n  // }\n\n//   const startsElevenEnds = (n) => {\n  //   if (n < 11) return 0\n  //   let t = 0\n  //   for (let i = 11; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsTenEnds(n)\n  // }\n\n//   const startsTwelveEnds = (n) => {\n  //   if (n < 12) return 0\n  //   let t = 0\n  //   for (let i = 12; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsElevenEnds(n)\n  // }\n\n//   const startsThirteenEnds = (n) => {\n  //   if (n < 13) return 0\n  //   let t = 0\n  //   for (let i = 13; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsTwelveEnds(n)\n  // }\n\n//   const startsFourteenEnds = (n) => {\n  //   if (n < 14) return 0\n  //   let t = 0\n  //   for (let i = 14; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsThirteenEnds(n)\n  // }\n\n//   const startsFifteenEnds = (n) => {\n  //   if (n < 15) return 0\n  //   let t = 0\n  //   for (let i = 15; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsFourteenEnds(n)\n  // }\n\n//   const startsSixteenEnds = (n) => {\n  //   if (n < 16) return 0\n  //   let t = 0\n  //   for (let i = 16; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsFifteenEnds(n)\n  // }\n\n//   const startsSeventeenEnds = (n) => {\n  //   if (n < 17) return 0\n  //   let t = 0\n  //   for (let i = 17; i < n; i++) {\n  //     t += (n / i | 0)\n  //   }\n  //   return t + startsSixteenEnds(n)\n  // }\n"}
{"task_id": "JavaScript/84", "prompt": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = N / 10\n  }\n  return t.toString(2)\n}\n\nexport const solution = solve(147)\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  console.log(t)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join('')\n}\n\n//   Write a function that takes an array and returns an array with all the\n//   elements repeated a given number of times.\n//   Note: You should keep the order of elements in the array and repeat.\n// \n//   For example:\n//   repeat([1,2,3], 2) returns [1,1,2,2,3,3]\n//   repeat([1,2,3], 3) returns [1,1,1,2,2,2,3,3,3]\n//   repeat([1,2,3], 0) returns [1,2,3]\n// const repeat = (arr, times) => {\n  let res = []\n  for (let i = 0; i < times; i++) {\n    for (let j = 0; j < arr.length; j++) {\n      res.push(arr[j])\n    }\n  }\n  return res\n}\n\n//   Write a function that takes a string and returns the string reversed.\n//   Note: You should keep the order of words in the sentence.\n// \n//   For example:\n//   reverse('Hi') returns 'olleH'\n//   reverse('Hello World!!!') returns 'DOLLEH WORD!!!'\n// const reverse = (s) => {\n  let res = []\n  for (let i = s.length - 1; i >= 0; i--) {\n    res.push(s[i])\n  }\n  return res.reverse().join('')\n}\n\n//   Write a function that takes two strings and returns the string formed by\n//   concatenating the two together.\n//   Note: You should keep the order of words in the sentence.\n// \n//   For example:\n//   concatenate('Hi', 'World') returns 'Hi World'\n//   concatenate('Hi', 'World') returns 'Hi World'\n// const concatenate = (a, b) => {\n  let res = []\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i])\n  }\n  for (let i = 0; i < b.length; i++) {\n    res.push(b[i])\n  }\n  return res.join('')\n}\n\n//   Write a function that takes two strings and returns the string formed by\n//   concatenating the first string followed by the second string.\n//   Note: You should keep the order of words in the sentence.\n// \n//   For example:\n//   concatenate('Hi', 'World') returns 'Hi World'\n//   concatenate('Hi', 'World') returns 'Hi World'\n// const concatenate = (a, b) => {\n  let res = []\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i])\n  }\n  for (let i = 0; i < b.length; i++) {\n    res.push(b[i])\n  }\n  return res.join('')\n}\n\n//   Write a function that takes a string and returns the string with all the\n//   characters repeated a given number of times.\n//   Note: You should keep the order of characters in the sentence.\n// \n//   For example:\n//   repeat('Hi', 2) returns 'Hihi'\n//   repeat('Hi', 3) returns 'HiHiiHi'\n// const repeat = (s, times) => {\n  let res = []\n  for (let i = 0; i < times; i++) {\n    for (let j = 0; j < s.length; j++) {\n      res.push(s[j])\n    }\n  }\n  return res.join('')\n}\n\n//   Write a function that takes two strings and returns the string formed by\n//   concatenating the first string followed by the second string.\n//   Note: You should keep the order of words in the sentence.\n// \n//   For example:\n//   concatenate('Hi', 'World') returns 'Hi World'\n//   concatenate('Hi', 'World') returns 'Hi World'\n// const concatenate = (a, b) => {\n  let res = []\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i])\n  }\n  for (let i = 0; i < b.length; i++) {\n    res.push(b[i])\n  }\n  return res.join('')\n}\n\n//   Write a function that takes a string and returns the string with all the\n//   characters reversed.\n//   Note: You should keep the order of words in the sentence.\n// \n//   For example:\n//   reverse('Hi') returns 'olleH'\n//   reverse('Hello World!!!') returns 'dlleH wdloR!'\n// const reverse = (s) => {\n  let res = []\n  for (let i = s."}
{"task_id": "JavaScript/87", "prompt": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2)...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n// function getRow(lst, x) {\n//   return lst.filter((x, i) => i === x)\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    if (ind!= j) {\n      let tmp = arr[j]\n      arr[j] = arr[ind]\n      arr[ind] = tmp\n    }\n  }\n  return arr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Create a function decrypt that takes a string as an argument and\n//   returns a string decrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift up by two multiplied to two places.\n//   For example:\n//   decrypt('lm') returns 'hi'\n//   decrypt('ewhjklnop') returns 'asdfghjkl'\n//   decrypt('kj') returns 'gf'\n//   decrypt('ix') returns 'et'\n// const decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 4\n    if (p < 48) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Return a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift up by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'zm'\n//   encrypt('asdfghjkl') returns 'fhehjklnp'\n//   encrypt('gf') returns 'ef'\n//   encrypt('et') returns 'in'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 2\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Return a function decrypt that takes a string as an argument and\n//   returns a string decrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   decrypt('zm') returns 'hi'\n//   decrypt('fhehjklnp') returns 'asdfghjkl'\n//   decrypt('ef') returns 'gf'\n//   decrypt('in') returns 'et'\n// const decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 2\n    if (p < 48) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Create a function to check if a string is a valid ciphertext\n//   using the alphabet being rotated.\n//   The alphabet should be rotated in a manner such that the letters \n//   shift up by two multiplied to two places.\n//   For example:\n//   isCiphertext('zm') returns true\n//   isCiphertext('fhehjklnp') returns true\n//   isCiphertext('ef') returns true\n//   isCiphertext('in') returns true\n//   isCiphertext('zk') returns false\n// const isCiphertext = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 122) { p -= 26 }\n    if (p < 48 || p > 57) { return false }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Create a function to check if a string is a valid plaintext\n//   using the alphabet being rotated.\n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   isPlaintext('hi') returns true\n//   isPlaintext('lm') returns true\n//   isPlaintext('ewhjklnop') returns true\n//   isPlaintext('kj') returns true\n//   isPlaintext('ix') returns true\n//   isPlaintext('kz') returns false\n// const isPlaintext = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 1\n    if (p < 48) { p += 26 }\n    if (p > 57) { return false }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Create a function to encrypt a string.\n//   Use the alphabet to rotate the string.\n//   The alphabet should be rotated in a manner such that the letters \n//   shift up by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'zm'\n//   encrypt('asdfghjkl') returns 'fhehjklnp'\n//   encrypt('gf') returns 'ef'\n//   encrypt('et') returns 'in'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 1\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Create a function to decrypt a string.\n//   Use the alphabet to rotate the string.\n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied"}
{"task_id": "JavaScript/90", "prompt": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  for (let j = 0; j < arr.length; j++) {\n    if (arr[j] === 2) {\n      return arr[j]\n    }\n  }\n  return null\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        t += 1\n      }\n    }\n  }\n  return t\n}\n\n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//"}
{"task_id": "JavaScript/92", "prompt": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += p.toString()\n  }\n  return t.toUpperCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\n// const skjkasdkd = (lst) => {\n//   for (let i = 0; i < lst.length; i++) {\n//     let p = 1\n//     for (let j = 2; j * j <= lst[i]; j++) {\n//       if (lst[i] % j == 0) { p = 0; break }\n//     }\n//     if (p == 1) { return lst[i] }\n//   }\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      let l = key[i].toLowerCase()\n      let h = key[i].toUpperCase()\n      if (l!= h) {\n        lo = 0\n        hi = 0\n        break\n      }\n    }\n    if (lo == 0) {\n      break\n    }\n  }\n  if (c == dict.length && lo == 1 && hi == 1) {\n    return true\n  }\n  return false\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  var x = a % 10;\n  var y = b % 10;\n  var r = x * y;\n  if (a >= 10) { r += (a / 10) * b }\n  if (b >= 10) { r += (b / 10) * a }\n  return r\n}\n\n// Complete the function that takes an array and returns the sum of the \n//   elements of the array.\n//   Assume that the array is always valid.\n//   Examples:\n//   sum([1, 2, 3, 4]) should return 10.\n//   sum([2, -1, 1, -4]) should return -2.\n// const sum = (nums) => {\n  var sum = 0;\n  for (var i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum\n}\n\n// Complete the function that takes an array and returns the largest number in the array.\n//   Assume that the array is always valid.\n//   Examples:\n//   findLargest([1, 2, 3]) should return 3.\n//   findLargest([-4, 10, -5]) should return 10.\n// const findLargest = (nums) => {\n  var largest = nums[0];\n  for (var i = 1; i < nums.length; i++) {\n    if (nums[i] > largest) { largest = nums[i] }\n  }\n  return largest\n}\n\n// Complete the function that takes an array and returns the smallest number in the array.\n//   Assume that the array is always valid.\n//   Examples:\n//   findSmallest([1, 2, 3]) should return 1.\n//   findSmallest([-4, 10, -5]) should return -5.\n// const findSmallest = (nums) => {\n  var smallest = nums[0];\n  for (var i = 1; i < nums.length; i++) {\n    if (nums[i] < smallest) { smallest = nums[i] }\n  }\n  return smallest\n}\n\n// Complete the function that takes an array and returns the sum of the \n//   absolute values of the elements of the array.\n//   Assume that the array is always valid.\n//   Examples:\n//   sumAbs([1, 2, -3, 4]) should return 6.\n//   sumAbs([-4, 10, -5]) should return 15.\n// const sumAbs = (nums) => {\n  var sum = 0;\n  for (var i = 0; i < nums.length; i++) {\n    sum += Math.abs(nums[i]);\n  }\n  return sum\n}\n\n// Complete the function that takes an array and returns the product of the \n//   elements of the array.\n//   Assume that the array is always valid.\n//   Examples:\n//   product([1, 2, 3, 4]) should return 24.\n//   product([-4, 10, -5]) should return -40.\n// const product = (nums) => {\n  var product = 1;\n  for (var i = 0; i < nums.length; i++) {\n    product *= nums[i];\n  }\n  return product\n}\n\n// Complete the function that takes a string and returns the sum of the \n//   characters in the string.\n//   Assume that the string is always valid.\n//   Examples:\n//   sumChars(\"The answer is 42\") should return 42.\n//   sumChars(\"A man, a plan, a canal\") should return 13.\n// const sumChars = (str) => {\n  var sum = 0;\n  for (var i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum\n}\n\n// Complete the function that takes a string and returns the sum of the \n//   elements of the string.\n//   Assume that the string is always valid.\n//   Examples:\n//   sumStr(\"The answer is 42\") should return 42.\n//   sumStr(\"A man, a plan, a canal\") should return 13.\n// const sumStr = (str) => {\n  var sum = 0;\n  for (var i = 0; i < str.length; i++) {\n    sum += str.charCodeAt(i);\n  }\n  return sum\n}\n\n// Complete the function that takes a string and returns the number of \n//   times that the string appears in the given text.\n//   Assume that the string is always valid.\n//   Examples:\n//   count(\"A man, a plan, a canal\") should return 3.\n//   count(\"A man, a plan, a canal\", \"a\") should return 2.\n// const count = (str, substr) => {\n  var count = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str.indexOf(substr, i)!= -1) {\n      count++;\n    }\n  }\n  return count\n}\n\n// Complete the function that takes two strings and returns the longest \n//   common subsequence of the two strings.\n//   Assume that the strings are always valid.\n//   Examples:\n//   commonSub(\"A man, a plan, a canal\", \"man\") should return \"man\".\n//   commonSub(\"A man, a plan, a canal\", \"can\") should return \"can\".\n// const commonSub = (s1, s2) => {\n  var start = 0;\n  var end = 0;\n  for (var i = 0; i < s1.length; i++) {\n    for (var j = 0; j < s2.length; j++) {\n      if (s1.charAt(i) == s2.charAt(j)) {\n        if (end < i) {\n          end = i;\n        "}
{"task_id": "JavaScript/98", "prompt": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n// function countUpper(s) {\n//   const p = 0\n//   for (let i = 0; i < s.length; i += 2) {\n//     if (s[i].toUpperCase() == s[i]) { p++ }\n//   }\n//   return p\n// }\n\nexport default countUpper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return Math.floor(value)\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n// \n//   makeAPile(3)\n//   => [3, 5, 7]\n// \n//   makeAPile(5)\n//   => [3, 5, 7, 9, 11]\n// \n//   makeAPile(7)\n//   => [3, 5, 7, 9, 11, 13, 15]\n\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// "}
{"task_id": "JavaScript/101", "prompt": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  if (t!= '') {\n    p.push(t);\n  }\n  return p;\n}\n\n// 2) You will be given a string of numbers separated by commas or spaces. Your task is\n//   to split the string into numbers and return an array of the numbers.\n//    \n//   For example:\n//   wordsString(\"1,2,3,4,5\") == [1,2,3,4,5]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  if (t!= '') {\n    p.push(t);\n  }\n  return p;\n}\n\n// 3) You will be given a string of characters separated by commas or spaces. Your task is\n//   to split the string into characters and return an array of the characters.\n//    \n//   For example:\n//   wordsString(\"a,b,c,d\") == ['a','b','c','d']\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  if (t!= '') {\n    p.push(t);\n  }\n  return p;\n}\n\n// 4) You will be given a string of letters. Your task is to return the string, with the spaces\n//   replaced with underscores.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == \"Hi_my_name_is_John\"\n// const wordsString = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='') {\n      t += '_';\n    } else {\n      t += s[i];\n    }\n  }\n  return t;\n}\n\n// 5) Given a string, find out how many times a space appears in the string.\n//    \n//   For example:\n//   wordsString(\"a b c\") == 2\n// const wordsString = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='') {\n      count++;\n    }\n  }\n  return count;\n}\n\n// 6) Given a string, find out the longest string that can be made by replacing all instances of\n//   a space with a underscore.\n//    \n//   For example:\n//   wordsString(\"a b c\") == \"a_b_c\"\n// const wordsString = (s) => {\n  let t = ''\n  let l = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='') {\n      if (l < i) {\n        l = i\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  return t.substring(0, l);\n}\n\n// 7) Given a string, find out the number of times a space appears in the string.\n//    \n//   For example:\n//   wordsString(\"a b c\") == 3\n// const wordsString = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='') {\n      count++;\n    }\n  }\n  return count;\n}\n\n// 8) Given a string, find out the number of characters that are not in upper case\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == 14\n// const wordsString = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!= s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// 9) Given a string, find out the number of characters that are not in lower case\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == 12\n// const wordsString = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase()!= s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n// 10) Given a string, find out the number of times a letter appears in the string.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == 2\n// const wordsString = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i"}
{"task_id": "JavaScript/102", "prompt": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return chooseNum(y, x) + 1\n}\n\n//const chooseNum = (x, y) => {\n//  if (x > y) {\n//    return -1\n//  }\n//  const max = Math.min(x, y)\n//  const min = Math.max(x, y)\n//  const half = max / 2\n//  if (half <= 0) {return -1}\n//  return Math.max(chooseNum(min, half), chooseNum(half + 1, max))\n//}\n\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return chooseNum(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x > y) {\n    return -1\n  }\n  return check(y, x) + 1\n}\n\nconst check = (x, y) => {\n  if (x"}
{"task_id": "JavaScript/103", "prompt": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let avg = 0\n  for (let i = n; i <= m; i++) {\n    avg += i\n  }\n  avg /= (m - n + 1)\n  return Math.round(avg)\n\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p.sort()\n}\n\n// console.log(uniqueDigits([15, 33, 1422, 1]))\n// console.log(uniqueDigits([152, 323, 1422, 10]))\n\n// // -------------------------------\n// // Exercise 1\n// // -------------------------------\n// \n// const isPalindrome = (n) => {\n  // n = parseInt(n)\n  // let reverse = n.toString().split('').reverse().join('')\n  // return n == reverse\n}\n\n// console.log(isPalindrome('abc'))\n// console.log(isPalindrome('abca'))\n// console.log(isPalindrome('aaaa'))\n\n// console.log(isPalindrome(1))\n// console.log(isPalindrome(999))\n\n// // -------------------------------\n// // Exercise 2\n// // -------------------------------\n// \n// const sumOfDigits = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(sumOfDigits(123))\n// console.log(sumOfDigits(999))\n\n// // -------------------------------\n// // Exercise 3\n// // -------------------------------\n// \n// const reverseDigits = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reverse().join('')\n}\n\n// console.log(reverseDigits(1234))\n// console.log(reverseDigits(999))\n\n// // -------------------------------\n// // Exercise 4\n// // -------------------------------\n// \n// const sumOfEvenDigits = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(sumOfEvenDigits(999))\n\n// // -------------------------------\n// // Exercise 5\n// // -------------------------------\n// \n// const sumOfDigits = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(sumOfDigits(999))\n\n// // -------------------------------\n// // Exercise 6\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 7\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 8\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 9\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 10\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 11\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 12\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 13\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}\n\n// console.log(countOfOdds(999))\n\n// // -------------------------------\n// // Exercise 14\n// // -------------------------------\n// \n// const countOfOdds = (n) => {\n  // n = parseInt(n)\n  // return n.toString().split('').reduce((a, b) => a + b, 0)\n}"}
{"task_id": "JavaScript/105", "prompt": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1 , 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1, 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      p[j], p[ind] = p[ind], p[j]\n    }\n  }\n  for (let k = 0; k < p.length; k++) {\n    p[k] = Math.floor(p[k]/10) + String.fromCharCode(p[k] % 10)\n  }\n  return p\n}\n\nconst sort = (arr) => {\n  arr = arr.sort()\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    reversed.push(arr[arr.length - i - 1])\n  }\n  return reversed\n}\n\nconst sortByLength = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = i\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > arr[ind]) {\n        ind = j\n      }\n    }\n    if (ind > i) {\n      reversed.push(arr[i])\n      arr[i] = arr[ind]\n      arr[ind] = reversed[i]\n    }\n  }\n  return arr\n}\n\nconst sortByLengthReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = i\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[j] > arr[ind]) {\n        ind = j\n      }\n    }\n    if (ind > i) {\n      reversed.push(arr[i])\n      arr[i] = arr[ind]\n      arr[ind] = reversed[i]\n    }\n  }\n  return arr\n}\n\nconst sortReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[ind])\n    arr[ind] = arr[i]\n  }\n  return reversed\n}\n\nconst sortReverseReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[i])\n    arr[i] = arr[ind]\n    arr[ind] = reversed[i]\n  }\n  return arr\n}\n\nconst sortReverseLength = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[ind])\n    arr[ind] = arr[i]\n    arr[i] = reversed[i]\n  }\n  return arr\n}\n\nconst sortReverseLengthReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[i])\n    arr[i] = arr[ind]\n    arr[ind] = reversed[i]\n  }\n  return arr\n}\n\nconst sortLength = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[i])\n    arr[i] = arr[ind]\n    arr[ind] = reversed[i]\n  }\n  return arr\n}\n\nconst sortLengthReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[ind])\n    arr[ind] = arr[i]\n    arr[i] = reversed[i]\n  }\n  return arr\n}\n\nconst sortLengthReverseReverse = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind = arr.length - i - 1\n    reversed.push(arr[i])\n    arr[i] = arr[ind]\n    arr[ind] = reversed[i]\n  }\n  return arr\n}\n\nconst main = (arr) => {\n  let reversed = []\n  for (let i = 0; i < arr.length; i++) {\n    let ind"}
{"task_id": "JavaScript/106", "prompt": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    k.push(f);\n    if (i % 2 === 0) {\n      f *= p;\n    }\n  }\n  return k;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 == 0) {\n        e += 1;\n      } else {\n        o += 1;\n      }\n    }\n  }\n  return [e, o];\n//   }\n// }\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h > 0) {\n      k++;\n      h = Math.floor(h / 10);\n    }\n    if (k > p) {\n      p = k;\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "// We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t) {\n      let temp = arr[k];\n      for (let j = 0; j < len; j++) {\n        arr[j] = arr[j + 1];\n      }\n      arr[k] = temp;\n      k--;\n    }\n  }\n  return k >= 0;\n}\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  let last = arr[len - 1]\n  while (k < len) {\n    let i = 0\n    let j = len - 1\n    while (i < j) {\n      if (arr[i] > arr[j]) {\n        arr[i] = arr[i] + last;\n        arr[j] = arr[j] - last;\n        last = arr[j];\n        i++;\n        j--;\n      } else if (arr[i] < arr[j]) {\n        arr[i] = arr[i] + last;\n        arr[j] = arr[j] - last;\n        i++;\n      } else {\n        arr[i] = arr[i] + last;\n        arr[j] = arr[j] + last;\n        last = arr[i];\n        i++;\n        j--;\n      }\n    }\n    if (last > arr[j]) {\n      arr[j] = arr[j] + last;\n      last = arr[j];\n      i--;\n    }\n    k++;\n  }\n  return k >= 0;\n}\n\nexport {\n  moveOneBall\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t++ }\n  }\n  return t === k? \"YES\" : \"NO\"\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n// Given an array of strings, return the longest one\n// \n//  Example:\n//  lengthened([ 'a', 'b', 'c', 'd' ]) == 'd'\n//  lengthened([ 'a', 'b', 'c' ]) == 'c'\n//  lengthened([ 'a' ]) == 'a'\n//  lengthened([ ]) == ''\n// \n// const lengthened = (test) => {\n  let longest = ''\n  let current = 0\n  for (i in test) {\n    if (current < test[i].length) {\n      current = test[i].length\n      longest = test[i]\n    }\n  }\n  return longest\n}\n\n// Given an array of strings, return the longest one\n// \n//  Example:\n//  longest([ 'a', 'b', 'c', 'd' ]) == 'd'\n//  longest([ 'a', 'b', 'c' ]) == 'c'\n//  longest([ 'a' ]) == 'a'\n//  longest([ ]) == ''\n// \n// const longest = (test) => {\n  let longest = ''\n  let current = 0\n  for (i in test) {\n    if (current < test[i].length) {\n      current = test[i].length\n      longest = test[i]\n    }\n  }\n  return longest\n}\n\n// Given an array of strings, return the shortest one\n// \n//  Example:\n//  shortest([ 'a', 'b', 'c', 'd' ]) == 'a'\n//  shortest([ 'a', 'b', 'c' ]) == 'a'\n//  shortest([ 'a' ]) == 'a'\n//  shortest([ ]) == ''\n// \n// const shortest = (test) => {\n  let shortest = ''\n  let current = 0\n  for (i in test) {\n    if (current < test[i].length) {\n      current = test[i].length\n      shortest = test[i]\n    }\n  }\n  return shortest\n}\n\n// Given an array of strings, return the longest one\n// \n//  Example:\n//  longest([ 'a', 'b', 'c', 'd' ]) == 'd'\n//  longest([ 'a', 'b', 'c' ]) == 'c'\n//  longest([ 'a' ]) == 'a'\n//  longest([ ]) == ''\n// \n// const longest = (test) => {\n  let longest = ''\n  let current = 0\n  for (i in test) {\n    if (current < test[i].length) {\n      current = test[i].length\n      longest = test[i]\n    }\n  }\n  return longest\n}\n\n// Given a string, return a dictionary where the key is the length of the string\n//   and the value is the number of strings that have the same length\n// \n//  Example:\n//  dictionaryLength('a') == {1: 1, 2: 1}\n//  dictionaryLength('ab') == {1: 2, 2: 1}\n//  dictionaryLength('abc') == {1: 3, 2: 1, 3: 1}\n//  dictionaryLength('abcde') == {1: 4, 2: 2, 3: 1, 4: 1}\n//  dictionaryLength('abcde') == {1: 4, 2: 2, 3: 1, 4: 1}\n// \n// const dictionaryLength = (test) => {\n  let dictionary = {}\n  for (i in test) {\n    if (i in dictionary) {\n      dictionary[i]++\n    }\n    else {\n      dictionary[i] = 1\n    }\n  }\n  return dictionary\n}\n\n// Given a string, return a dictionary where the key is the number of occurrences\n//   of the string and the value is the length of the string\n// \n//  Example:\n//  dictionaryOccurrences('a') == {1: 1, 2: 1}\n//  dictionaryOccurrences('ab') == {1: 2, 2: 1}\n//  dictionaryOccurrences('abc') == {1: 3, 2: 1, 3: 1}\n//  dictionaryOccurrences('abcde') == {1: 4, 2: 2, 3: 1, 4: 1}\n//  dictionaryOccurrences('abcde') == {1: 4, 2: 2, 3: 1, 4: 1}\n// \n// const dictionaryOccurrences = (test) => {\n  let dictionary = {}\n  for (i in test) {\n    if (i in dictionary) {\n      dictionary[i]++\n    }\n    else {\n      dictionary[i] = 1\n    }\n  }\n  return dictionary\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let d = new Set(t)\n  let result = t.split('').reverse().join('')\n  if (d.has(result)) {\n    return (result, true)\n  } else {\n    return (result, false)\n  }\n// }\n// Task\n//   Given a string, you have to find the longest substring without repeating characters.\n//   Example\n//   For s = \"abcdefg\", the result should be 'fg'\n// const longestSubstring = (s) => {\n  let result = ''\n  let count = 1\n  let max = 0\n  let temp = ''\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (s[i] == s[j]) {\n        temp += s[j]\n        count++\n      }\n    }\n    if (count > max) {\n      result = temp\n      max = count\n    }\n    temp = ''\n    count = 1\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to find the number of unique characters in the string.\n//   Example\n//   For s = \"abcdefg\", the result should be 6\n// const numberOfUniqueChars = (s) => {\n  let result = 1\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!= s[i + 1]) {\n      result++\n    }\n    count++\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to remove all the repeated characters.\n//   Example\n//   For s = \"abca\", the result should be 'a'\n// const removeRepeatedChars = (s) => {\n  let result = ''\n  let count = 1\n  let temp = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i]!= s[i + 1]) {\n      result += s[i]\n      count++\n    }\n    if (count > 1) {\n      temp += s[i]\n      count = 1\n    }\n  }\n  if (count > 1) {\n    result += temp\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to reverse the order of characters in a string.\n//   Example\n//   For s = \"abcdefg\", the result should be 'gfedcba'\n// const reverseString = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    result += s[s.length - i - 1]\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to replace all the occurrences of 'a' with '1' and 'b' with '2'.\n//   Example\n//   For s = \"abc\", the result should be \"1c1\"\n// const replaceAll = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'a') {\n      result += '1'\n    } else {\n      result += s[i]\n    }\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to convert all the occurrences of 'a' to '1' and 'b' to '2'.\n//   Example\n//   For s = \"abcd\", the result should be \"1234\"\n// const replaceAllChar = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'a') {\n      result += '1'\n    } else {\n      result += '2'\n    }\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to return the number of 'b's in the string.\n//   Example\n//   For s = \"abcd\", the result should be 3.\n// const numberOfB = (s) => {\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'b') {\n      result++\n    }\n  }\n  return result\n// }\n// Task\n//   Given a string, you have to return the number of 'b's in the string, but you are not allowed to delete any 'a' or 'b' characters.\n//   Example\n//   For s = \"abcbac\", the result should be 2.\n// const numberOfB2 = (s) => {\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'b') {\n      result++\n    }\n  }\n  return result\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n\n// Given a list of strings, where each string consists of only digits, return a\n// list of lists, where each inner list contains all the substrings of the\n// respective string.\n//   >>> oddCount(['1234567'])\n//   [[\"1234567\"], [\"34567\"], [\"567\"], [\"67\"]]\n// const oddCount = (lst) => {\n  let o = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = []\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      p.push(lst[i].substr(j, h))\n    }\n    o.push(p)\n  }\n  return o\n}\n\n// Given a list of strings, where each string consists of only digits, return a\n// list of lists, where each inner list contains all the substrings of the\n// respective string, but the substrings are in the opposite order.\n//   >>> oddCount(['1234567'])\n//   [[\"67\", \"567\", \"34567\"], [\"67\", \"567\"], [\"67\"]]\n// const oddCount = (lst) => {\n  let o = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = []\n    let h = lst[i].length\n    for (let j = h - 1; j >= 0; j--) {\n      p.push(lst[i].substr(j, h))\n    }\n    o.push(p)\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters.\n//   >>> oddCount('hello')\n//   [\"e\", \"l\", \"l\", \"o\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 0; i < s.length; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first and last characters.\n//   >>> oddCount('hello')\n//   [\"o\", \"h\", \"e\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 1; i < s.length - 1; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first and last characters, in the opposite order.\n//   >>> oddCount('hello')\n//   [\"o\", \"h\", \"e\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 0; i < s.length - 1; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first two characters.\n//   >>> oddCount('hello')\n//   [\"l\", \"l\", \"o\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 1; i < s.length - 1; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// last two characters.\n//   >>> oddCount('hello')\n//   [\"h\", \"e\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 0; i < s.length - 1; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first and last two characters, in the opposite order.\n//   >>> oddCount('hello')\n//   [\"o\", \"h\", \"e\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 0; i < s.length - 2; i++) {\n    o.push(s[i])\n  }\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first and last two characters, in the opposite order, and in the same order\n// as the input string.\n//   >>> oddCount('hello')\n//   [\"o\", \"h\", \"e\"]\n// const oddCount = (str) => {\n  let s = str.split('')\n  let o = []\n  for (let i = 0; i < s.length - 2; i++) {\n    o.push(s[i])\n  }\n  o.push(s[0])\n  return o\n}\n\n// Given a string, return a list of all the string's characters, except for the\n// first and last two characters, in the same order as the input"}
{"task_id": "JavaScript/114", "prompt": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) min = s\n    }\n  }\n  return min\n}\n\nmodule.exports = minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    p += Math.min(m, bucket_capacity)\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        let w = p[k]\n        p[k] = p[ind]\n        p[ind] = w\n        ind = k\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i]!= 'A' && word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I')\n    ) {\n      return word[i + 1];\n    }\n  }\n  return '';\n}\n\nconst test ='sugewa';\nconsole.log(getClosestVowel(test));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 1;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (k - j === k - j) {\n      p[j] = p[ind]\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n  \n// }\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) {\n    if (t[2] < 1 || t[2] > 31) { return false }\n  }\n  if (t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10) {\n    if (t[2] < 1 || t[2] > 30) { return false }\n  }\n  return true\n}\n\nlet t = validDate('03-11-2000')\nconsole.log(t)\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let m = 0\n      let v = 0\n      let s = 0\n      let s2 = 0\n      for (let i = 0; i < txt.length; i++) {\n        if (txt[i] === ',') {\n          p++\n        } else if (txt[i] ==='') {\n          s++\n        } else if (txt[i] === '!') {\n          v++\n        } else if (txt[i] === '?') {\n          s2++\n        }\n      }\n      if (s2 > 0) {\n        return [txt]\n      } else if (s > 0 && v === 0) {\n        return [txt.toLowerCase()]\n      } else if (p > 0) {\n        return t.map(word => word.toLowerCase())\n      } else {\n        return [txt.toLowerCase()]\n      }\n    }\n  }\n// }\n\n// Given a string of words, return a list of words sorted alphabetically.\n//   Examples\n//   sortWords(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"Hello world!\"]\n//   sortWords(\"Hello world!\") ➞ [\"Hello world!\", \"Hello\", \"world!\"]\n//   sortWords(\"Hello world!\") == \"Hello world!\"\nconst sortWords = (txt) => {\n  let t = txt.split(/\\s/)\n  t = t.sort()\n  return t.join(' ')\n}\n\n// Given a string, return the number of lower-case letters it contains.\n//   Examples\n//   containsLetters(\"Hello\") == 5\n//   containsLetters(\"Hello world!\") == 11\n//   containsLetters(\"\") == 0\nconst containsLetters = (txt) => {\n  let p = 0\n  for (let i = 0; i < txt.length; i++) {\n    if (txt[i] === 'a' || txt[i] === 'b' || txt[i] === 'c' || txt[i] === 'd' || txt[i] === 'e' || txt[i] === 'f' || txt[i] === 'g' || txt[i] === 'h' || txt[i] === 'i' || txt[i] === 'j' || txt[i] === 'k' || txt[i] === 'l' || txt[i] ==='m' || txt[i] === 'n' || txt[i] === 'o' || txt[i] === 'p' || txt[i] === 'q' || txt[i] === 'r' || txt[i] ==='s' || txt[i] === 't' || txt[i] === 'u' || txt[i] === 'v' || txt[i] === 'w' || txt[i] === 'x' || txt[i] === 'y' || txt[i] === 'z') {\n      p++\n    }\n  }\n  return p\n}\n\n// Given a string, return the number of lower-case letters it contains, ignoring punctuation.\n//   Examples\n//   containsLetters(\"Hello world!\") == 11\n//   containsLetters(\"Hello world!\") == 5\n//   containsLetters(\"Hello world!\") == 11\n//   containsLetters(\"Hello world!\") == 11\n//   containsLetters(\"\") == 0\nconst containsLettersIgnorePunctuation = (txt) => {\n  let p = 0\n  for (let i = 0; i < txt.length; i++) {\n    if (txt[i] === 'a' || txt[i] === 'b' || txt[i] === 'c' || txt[i] === 'd' || txt[i] === 'e' || txt[i] === 'f' || txt[i] === 'g' || txt[i] === 'h' || txt[i] === 'i' || txt[i] === 'j' || txt[i] === 'k' || txt[i] === 'l' || txt[i] ==='m' || txt[i] === 'n' || txt[i] === 'o' || txt[i] === 'p' || txt[i] === 'q' || txt[i] === 'r' || txt[i] ==='s' || txt[i] === 't' || txt[i] === 'u' || txt[i] === 'v' || txt[i] === 'w' || txt[i] === 'x' || txt[i] === 'y' || txt[i] === 'z') {\n      p++\n    }\n  }\n  return p\n}\n\n// Given a string, return the number of lower-case letters it contains, ignoring punctuation.\n//   Examples\n//   containsLettersIgnorePunctuation(\"Hello world!\") == 11\n//   containsLettersIgnorePunctuation(\"Hello world!\") == 5\n//   containsLettersIgnorePunctuation(\"Hello world!\") == 11\n//   containsLettersIgnorePunctuation(\"Hello world!\") == 11\n//   containsLettersIgnorePunctuation(\"\") == 0\nconst containsLettersIgnorePunctuation = (txt) => {\n  let p = 0\n  for (let i = 0; i < txt.length; i++) {\n    if (txt[i] === 'a' || txt[i] === '"}
{"task_id": "JavaScript/126", "prompt": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup > 1) { return false }\n    }\n    pre = lst[i]\n  }\n  return true\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  return len? (len + 1) : \"NO\"\n// }\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// "}
{"task_id": "JavaScript/128", "prompt": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    n = Math.pow(n, 2)\n    if (arr[i] > 0) {\n      s += n\n    } else if (arr[i] < 0) {\n      s -= n\n    }\n  }\n  return s\n}\n\n//   const mult2 = (x, y) => x * y\n//   const mult3 = (x, y, z) => x * y * z\n//   const mult4 = (x, y, z, a) => x * y * z * a\n//   const mult5 = (x, y, z, a, b) => x * y * z * a * b\n//   const mult6 = (x, y, z, a, b, c) => x * y * z * a * b * c\n//   const mult7 = (x, y, z, a, b, c, d) => x * y * z * a * b * c * d\n//   const mult8 = (x, y, z, a, b, c, d, e) => x * y * z * a * b * c * d * e\n//   const mult9 = (x, y, z, a, b, c, d, e, f) => x * y * z * a * b * c * d * e * f\n//   const mult10 = (x, y, z, a, b, c, d, e, f, g) => x * y * z * a * b * c * d * e * f * g\n// const mult = (x, y, z, a, b, c, d, e, f, g, h) => x * y * z * a * b * c * d * e * f * g * h\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i) => x * y * z * a * b * c * d * e * f * g * h * i\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j) => x * y * z * a * b * c * d * e * f * g * h * i * j\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k) => x * y * z * a * b * c * d * e * f * g * h * i * j * k\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) => x * y * z * a * b * c * d * e * f * g * h * i * j * k * l * m * n * o * p * q * r * s * t\n// const mult = (x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r"}
{"task_id": "JavaScript/129", "prompt": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let solution = []\n  solution.push(grid[m][n])\n  while (m!== 0) {\n    solution.push(grid[m][n])\n    m = (m - 1) % grid.length\n  }\n  solution.reverse()\n  let current = solution.pop()\n  while (current!== solution[0]) {\n    solution.unshift(current)\n    current = solution.pop()\n  }\n  return solution\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    } else {\n      p.push(p[i - 1] + p[i - 2] + p[i + 1])\n    }\n  }\n  return p\n}\n\nexport const solution = tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = Math.floor(n / 10)\n  }\n  return p * k\n\n}\n\n// Given an array of digits (which may be empty), return the largest\n// possible integer that can be formed by concatenating the digits.\n// For example:\n//   digits(['2', '3', '4']) == 9\n//   digits(['9', '2', '3']) == 99\n//   digits([]) == 0\n// const digits = (digits) => {\n  let max = 0\n  let cur = 1\n  for (let i = 0; i < digits.length; i++) {\n    cur = cur * digits[i]\n    if (cur > max) {\n      max = cur\n    }\n  }\n  return max\n\n}\n\n// Given a string, return the number of times the string appears in the given\n// array of strings.\n// For example:\n//   occurs('cat', ['dog', 'cat', 'pig', 'cat']) == 2\n//   occurs('c', ['a', 'b', 'c', 'c']) == 3\n// const occurs = (s, strings) => {\n  let s = ''\n  let n = 1\n  for (let i = 0; i < strings.length; i++) {\n    if (s === strings[i]) {\n      n += 1\n    }\n  }\n  return n\n\n}\n\n// Given a string, return the string reversed.\n// For example:\n//   reverse('penguin') == 'penuqr g'\n//   reverse('a') == 'a'\n// const reverse = (s) => {\n  let r = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    r += s[i]\n  }\n  return r\n\n}\n\n// Given an array of words, return all the words that can be formed by\n// concatenating the words in the array together.\n// For example:\n//   concatWords([['hot', 'dog'], ['cat'], ['pig']]) == ['hot dog', 'hot cat', 'hot pig']\n//   concatWords([['a'], ['ab'], ['abc']]) == ['a', 'ab', 'abc']\n// const concatWords = (words) => {\n  let words = []\n  for (let i = 0; i < words.length; i++) {\n    words = words.concat(words[i].split(''))\n  }\n  return words\n\n}\n\n// Given a string, return a string made of every other letter in the string.\n// For example:\n//   double('penguin') == 'udpegn'\n//   double('ABC') == 'ADEB'\n// const double = (s) => {\n  let d = ''\n  for (let i = 0; i < s.length; i++) {\n    d += s[i]\n    if (i < s.length - 1) {\n      d += s[i + 1]\n    }\n  }\n  return d\n\n}\n\n// Given a string, return a string made of every letter in the string, except\n// for the last one. The last letter is removed and replaced with a new\n// character.\n// For example:\n//   last('cat') == 'at'\n//   last('bat') == 'a'\n// const last = (s) => {\n  let s = ''\n  for (let i = 0; i < s.length - 1; i++) {\n    s += s[i]\n  }\n  return s + s[s.length - 1]\n\n}\n\n// Given a string, return the string reversed.\n// For example:\n//   reverse('penguin') == 'penguqr'\n//   reverse('ABC') == 'CBA'\n// const reverse = (s) => {\n  let r = ''\n  for (let i = s.length - 1; i >= 0; i--) {\n    r += s[i]\n  }\n  return r\n\n}\n\n// Given a string, return a string made of every other character in the string.\n// For example:\n//   double('penguin') == 'pugug'\n//   double('ABC') == 'BABC'\n// const double = (s) => {\n  let d = ''\n  for (let i = 0; i < s.length; i++) {\n    d += s[i]\n    if (i < s.length - 1) {\n      d += s[i + 1]\n    }\n  }\n  return d\n\n}\n\n// Given a string, return a string made of every letter in the string, except\n// for the last one. The last letter is removed and replaced with a new\n// character.\n// For example:\n//   last('cat') == 'cat'\n//   last('bat') == 'bat'\n// const last = (s) => {\n  let s = ''\n  for (let i = 0; i < s.length - 1; i++) {\n    s += s[i]\n  }\n  return s + s[s.length - 1]\n\n}\n\n// Given a string, return a string made of every letter in the string, except\n// for the last two. The last two letters are removed and replaced with a new\n// character.\n// For example:\n//   last('cat') == 'cat'\n//   last('bat') == 'b'\n// const last = (s) => {\n  let s = ''\n  for (let i = 0; i < s.length - 2; i++) {\n    s += s[i]\n  }\n  return s + s[s.length - 2] + s[s.length - 1]\n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    if (string[closing_bracket_index1[i]] == ']') {\n      closing_bracket_index.push(closing_bracket_index1[i])\n    }\n  }\n  if (closing_bracket_index.length == 0) {\n    return false\n  }\n  const index = opening_bracket_index.pop()\n  while (opening_bracket_index.length > 0) {\n    if (closing_bracket_index.indexOf(opening_bracket_index[opening_bracket_index.length - 1])!= -1) {\n      return true\n    }\n    opening_bracket_index.pop()\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y - y % 1 - 1 }\n    }\n    p += Math.pow(y,2)\n  }\n  return p\n}\n\n// Return the sum of all elements in the array\n// const sum = (lst) => {\n//   let sum = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i]\n//   }\n//   return sum\n// }\n\n// Return the sum of squares of all elements in the array\n// const sumSquares = (lst) => {\n//   let sumSquares = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sumSquares += Math.pow(lst[i],2)\n//   }\n//   return sumSquares\n// }\n\n// Return the product of all elements in the array\n// const product = (lst) => {\n//   let product = 1\n//   for (let i = 0; i < lst.length; i++) {\n//     product *= lst[i]\n//   }\n//   return product\n// }\n\n// Return the largest element in the array\n// const largest = (lst) => {\n//   let largest = lst[0]\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] > largest) {\n//       largest = lst[i]\n//     }\n//   }\n//   return largest\n// }\n\n// Return the smallest element in the array\n// const smallest = (lst) => {\n//   let smallest = lst[0]\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < smallest) {\n//       smallest = lst[i]\n//     }\n//   }\n//   return smallest\n// }\n\n// Return the average of all elements in the array\n// const average = (lst) => {\n//   let sum = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i]\n//   }\n//   return sum/lst.length\n// }\n\n// Return the sum of all elements in the array\n// const sum = (lst) => {\n//   let sum = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i]\n//   }\n//   return sum\n// }\n\n// Return the sum of squares of all elements in the array\n// const sumSquares = (lst) => {\n//   let sumSquares = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sumSquares += Math.pow(lst[i],2)\n//   }\n//   return sumSquares\n// }\n\n// Return the product of all elements in the array\n// const product = (lst) => {\n//   let product = 1\n//   for (let i = 0; i < lst.length; i++) {\n//     product *= lst[i]\n//   }\n//   return product\n// }\n\n// Return the largest element in the array\n// const largest = (lst) => {\n//   let largest = lst[0]\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] > largest) {\n//       largest = lst[i]\n//     }\n//   }\n//   return largest\n// }\n\n// Return the smallest element in the array\n// const smallest = (lst) => {\n//   let smallest = lst[0]\n//   for (let i = 1; i < lst.length; i++) {\n//     if (lst[i] < smallest) {\n//       smallest = lst[i]\n//     }\n//   }\n//   return smallest\n// }\n\n// Return the average of all elements in the array\n// const average = (lst) => {\n//   let sum = 0\n//   for (let i = 0; i < lst.length; i++) {\n//     sum += lst[i]\n//   }\n//   return sum/lst.length\n// }\n\n// Given a list of strings, return the longest common prefix of the strings in the list\n// const longestCommonPrefix = (lst) => {\n//   let result = ''\n//   let min = ''\n//   for (let i = 0; i < lst.length; i++) {\n//     let str = lst[i]\n//     let prefix = str.substr(0, min.length)\n//     if (prefix!= min) {\n//       if (prefix.length > result.length) {\n//         result = prefix\n//         min = prefix\n//       }\n//     }\n//   }\n//   return result\n// }\n\n// Given two lists of strings, return the intersection of the strings in the two lists\n// const intersection = (lst1, lst2) => {\n//   let result = []\n//   for (let i = 0; i < lst1.length; i++) {\n//     for (let j = 0; j < lst2.length; j++) {\n//       if (lst1[i] == lst2[j]) {\n//         result.push(lst1[i])\n//       }\n"}
{"task_id": "JavaScript/134", "prompt": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  return (y >= 65 && y <= 90) || (y >= 97 && y <= 122)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return (a, b)\n// }\n\n// Create a function that returns the length of a list.\n//   Examples:\n//   lengthOf([1, 2, 3]) == 3\n//   lengthOf([]) == 0\n// const lengthOf = (lst) => {\n  return lst.length\n// }\n\n// Create a function that returns a boolean value indicating\n//   whether a list is a palindrome.\n//   A list is a palindrome if all elements are equal and the\n//   length of the list is odd.\n//   Examples:\n//   isPalindrome([1, 2, 3]) == true\n//   isPalindrome([1, 1]) == false\n// const isPalindrome = (lst) => {\n  for (let i = 0; i < lst.length / 2; i++) {\n    if (lst[i]!== lst[lst.length - 1 - i]) {\n      return false\n    }\n  }\n  return true\n// }\n\n// Create a function that returns a list with all even numbers.\n//   Examples:\n//   even([1, 2, 3]) == [2, 4]\n//   even([1, 2, 3, 4]) == [2, 4]\n// const even = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n// }\n\n// Create a function that returns a list with all odd numbers.\n//   Examples:\n//   odd([1, 2, 3]) == [1, 3]\n//   odd([1, 2, 3, 4]) == [1, 3, 5]\n// const odd = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n// }\n\n// Create a function that returns the number of occurrences of\n//   an element in a list.\n//   Examples:\n//   count([1, 2, 3, 1, 2, 3, 4, 5, 1], 2) == 3\n//   count([1, 2, 3, 1, 2, 3, 4, 5, 1], 3) == 4\n// const count = (lst, elem) => {\n  let count = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === elem) {\n      count += 1\n    }\n  }\n  return count\n// }\n\n// Create a function that returns a list with all even numbers,\n//   except the number with the largest magnitude.\n//   Examples:\n//   largestOdd([1, 2, 3, 4]) == [1, 3]\n//   largestOdd([1, -2, 3, 4]) == [1, 3]\n// const largestOdd = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      if (Math.abs(lst[i]) > Math.abs(result[0])) {\n        result = [lst[i]]\n      } else {\n        result.unshift(lst[i])\n      }\n    }\n  }\n  return result\n// }\n\n// Create a function that returns a list with all odd numbers,\n//   except the number with the largest magnitude.\n//   Examples:\n//   largestOdd([1, -2, 3, 4]) == [1, 3]\n//   largestOdd([1, -2, 3, 4, 5]) == [1, 3, 5]\n// const largestOdd = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      if (Math.abs(lst[i]) > Math.abs(result[0])) {\n        result = [lst[i]]\n      } else {\n        result.unshift(lst[i])\n      }\n    }\n  }\n  return result\n// }\n\n// Create a function that returns a list with all even numbers,\n//   except the number with the smallest magnitude.\n//   Examples:\n//   smallestOdd([1, 2, 3, 4]) == [2, 4]\n//   smallestOdd([1, -2, 3, 4]) == [2, 4]\n// const smallestOdd = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      if (Math.abs(lst[i]) < Math.abs(result[0])) {\n        result = [lst[i]]\n      } else {\n        result.unshift(lst[i])\n      }\n    }\n  }\n  return result\n// }\n\n// Create a function that returns a list with all odd numbers,\n//   except the number with the smallest magnitude.\n//   Examples:\n//   smallestOdd([1, -2, 3, 4, 5]) == [1, 3,"}
{"task_id": "JavaScript/137", "prompt": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be . or ,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be. or,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa === bb) { return null }\n  if (aa > bb) { return a }\n  return b\n// }\n// compareTwo(1, 2.5) ➞ 2.5\n// compareTwo(1, \"2,3\") ➞ \"2,3\"\n// compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n// compareTwo(\"1\", 1) ➞ 1\n// compareTwo(\"1\", 1.0) ➞ 1\n// compareTwo(\"1\", 1.1) ➞ \"1.1\"\n// compareTwo(\"1\", 1.01) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.01) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.01) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.1) ➞ \"1.0\"\n// compareTwo(\"1.0\", 1.01) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.0) ➞ \"1.0\"\n// compareTwo(\"1.0\", 1.01) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.1) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.1) ➞ \"1.0\"\n// compareTwo(\"1.0\", 1.01) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.0\", 1.0) ➞ \"1.0\"\n// compareTwo(\"1.0\", 1.1) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.1) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.1) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.0) ➞ \"1.01\"\n// compareTwo(\"1.0\", 1.1) ➞ \"1.0\"\n// compareTwo(\"1.0\", 1.01) ➞ \"1.0\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.0) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.1) ➞ \"1.1\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) ➞ \"1.01\"\n// compareTwo(\"1.1\", 1.01) ➞ \"1.1\"\n// compareTwo(\"1.01\", 1.1) �"}
{"task_id": "JavaScript/138", "prompt": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n    || (n >= 6 && n % 2!= 0)\n    || (n >= 4 && n % 2!= 0)\n    || (n >= 2);\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p = n;\n    n--;\n  }\n  return t;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    } else { t += text[i] }\n  }\n  return t\n}\n\n//   Given a string text, remove all spaces, \n//   and if a string has more than 1 space, \n//   then remove all spaces but the first.\n// const removeSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      if (i > 0) { t +='' }\n    } else { t += text[i] }\n  }\n  return t\n}\n\n// Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    } else { t += text[i] }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\n// Given a string text, remove all spaces, \n//   and if a string has more than 1 space, \n//   then remove all spaces but the first.\n// const removeSpaces = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      if (i > 0) { t +='' }\n    } else { t += text[i] }\n  }\n  return t\n}\n\n// Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    } else { t += text[i] }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i > 0) { t +='' }\n      t += text[i].toUpperCase()\n    }\n  }\n  return t\n}\n\nconst toTitleCase = (text) => {\n  let t = ''\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') {\n      t +=''\n    } else {\n      if (i >"}
{"task_id": "JavaScript/141", "prompt": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n// Write a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n\n// Write a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n// function findMax(a, b) {\n//   if (a > b) { return a }\n//   else { return b }\n// }\n\n// function isOdd(n) {\n//   return n % 2 == 1\n// }\n\n// function isEven(n) {\n//   return n % 2 == 0\n// }\n\n// function findMaxOfArray(arr) {\n//   if (arr.length == 0) {\n//     return 0\n//   }\n//   let max = arr[0]\n//   for (let i = 1; i < arr.length; i++) {\n//     if (arr[i] > max) {\n//       max = arr[i]\n//     }\n//   }\n//   return max\n// }\n\n// function maxOfTwoArrays(a, b) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   return findMaxOfArray(aMax + bMax)\n// }\n\n// function maxOfThreeArrays(a, b, c) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   return findMaxOfArray(aMax + bMax + cMax)\n// }\n\n// function maxOfFourArrays(a, b, c, d) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax)\n// }\n\n// function maxOfFiveArrays(a, b, c, d, e) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   let eMax = findMaxOfArray(e)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax + eMax)\n// }\n\n// function maxOfSixArrays(a, b, c, d, e, f) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   let eMax = findMaxOfArray(e)\n//   let fMax = findMaxOfArray(f)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax + eMax + fMax)\n// }\n\n// function maxOfSevenArrays(a, b, c, d, e, f, g) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   let eMax = findMaxOfArray(e)\n//   let fMax = findMaxOfArray(f)\n//   let gMax = findMaxOfArray(g)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax + eMax + fMax + gMax)\n// }\n\n// function maxOfEightArrays(a, b, c, d, e, f, g, h) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   let eMax = findMaxOfArray(e)\n//   let fMax = findMaxOfArray(f)\n//   let gMax = findMaxOfArray(g)\n//   let hMax = findMaxOfArray(h)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax + eMax + fMax + gMax + hMax)\n// }\n\n// function maxOfNineArrays(a, b, c, d, e, f, g, h, i) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = findMaxOfArray(c)\n//   let dMax = findMaxOfArray(d)\n//   let eMax = findMaxOfArray(e)\n//   let fMax = findMaxOfArray(f)\n//   let gMax = findMaxOfArray(g)\n//   let hMax = findMaxOfArray(h)\n//   let iMax = findMaxOfArray(i)\n//   return findMaxOfArray(aMax + bMax + cMax + dMax + eMax + fMax + gMax + hMax + iMax)\n// }\n\n// function maxOfTenArrays(a, b, c, d, e, f, g, h, i, j) {\n//   let aMax = findMaxOfArray(a)\n//   let bMax = findMaxOfArray(b)\n//   let cMax = find"}
{"task_id": "JavaScript/143", "prompt": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (t[j].indexOf(t[j].substring(0, i))!== -1) {\n        u = i;\n      }\n    }\n    p += t[j].substring(0, u) +'';\n  }\n  return p\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  if (m === 0) {\n    return false\n  } else {\n    let d = Number(a[1]) * Number(b[1])\n    if (m === Number(d)) {\n      return true\n    }\n  }\n  return false\n}\n\nsimplify(\"1/5\", \"5/1\")\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      while (h) {\n        if (h < d) {\n          m += h;\n          h = 0;\n        } else {\n          n += d;\n          d = 0;\n        }\n        h = h * 10 + h % 10;\n        d = d * 10 + d % 10;\n      }\n      while (u < n) {\n        p[k] = y * p[k] + u * p[k + 1];\n        p[k + 1] = u * p[k + 1];\n        u++;\n      }\n    }\n  }\n  return p\n}\n\n//   Write a function which finds the first missing positive integer.\n//   For example:\n//   >>> firstMissingPositive([1, 2]) == 3\n//   >>> firstMissingPositive([]) == 1\n//   >>> firstMissingPositive([-1, -2]) == 1\n//   >>> firstMissingPositive([-1, 2, -3]) == 1\n//   >>> firstMissingPositive([1, 1]) == 2\n// const firstMissingPositive = (nums) => {\n  let p = nums\n  for (let j = p.length - 1; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      if (p[k] > 0 && p[k]!= p[k + 1] && p[k] - p[k + 1] + 1 >= 0) {\n        return p[k]\n      }\n    }\n  }\n  return 1\n}\n\n//   Write a function which returns the largest number that is not greater than\n//   its sum. For example:\n//   >>> isNotGreaterThanSum([1, 1, 2, 2, 3, 5, 7]) == 5\n//   >>> isNotGreaterThanSum([1, 2, 3]) == 2\n// const isNotGreaterThanSum = (nums) => {\n  let p = nums\n  for (let j = p.length - 1; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      if (p[k] > 0 && p[k] + p[k + 1] > p[k]) {\n        return p[k]\n      }\n    }\n  }\n  return p[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\nconsole.log(specialFilter([15, -73, 14, -15]), '1')\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]), '2')\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      if (y[i] + y[j] + y[i + 1] % 3 === 0) {\n        u++\n      }\n    }\n  }\n  return u\n}\n\n// const getMaxTriples = (n) => {\n  //   let triples = []\n  //   let a = []\n  //   for (let i = 1; i <= n; i++) {\n  //     a.push(i * i - i + 1)\n  //   }\n  //   let j = 0\n  //   for (let i = 0; i < n - 2; i++) {\n  //     for (let k = i + 1; k < n - 1; k++) {\n  //       if (a[i] + a[j] + a[k] === 0) {\n  //         triples.push([a[i], a[j], a[k]])\n  //         j++\n  //       }\n  //     }\n  //   }\n  //   return triples\n}\n\nconst getMaxTriples = (n) => {\n  let triples = []\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let j = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let k = i + 1; k < n - 1; k++) {\n      if (a[i] + a[j] + a[k] === 0) {\n        triples.push([a[i], a[j], a[k]])\n        j++\n      }\n    }\n  }\n  return triples\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1) { return () }\n  if (hi == -1) { return () }\n  while (hi - lo > 1) {\n    let mid = (hi + lo) / 2\n    let i = mid\n    let j = mid\n    while (y[i] == y[j] && i < hi && j < hi) {\n      i++\n      j++\n    }\n    if (i == mid) { return () }\n    u.push(y[i])\n    hi = mid\n  }\n  return (u.reverse())\n// }\n\n// const bf = (planet1, planet2) => {\n  // const y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  // const u = []\n  // const lo = -1\n  // const hi = -1\n  // while (hi - lo > 1) {\n    // let mid = (hi + lo) / 2\n    // let i = mid\n    // let j = mid\n    // while (y[i] == y[j] && i < hi && j < hi) {\n      // i++\n      // j++\n    // }\n    // if (i == mid) { return () }\n    // u.push(y[i])\n    // hi = mid\n  // }\n  // return (u.reverse())\n// }\n\n// const bf = (planet1, planet2) => {\n  // const y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  // const u = []\n  // const lo = -1\n  // const hi = -1\n  // while (hi - lo > 1) {\n    // let mid = (hi + lo) / 2\n    // let i = mid\n    // let j = mid\n    // while (y[i] == y[j] && i < hi && j < hi) {\n      // i++\n      // j++\n    // }\n    // if (i == mid) { return () }\n    // u.push(y[i])\n    // hi = mid\n  // }\n  // return (u.reverse())\n// }\n\n// const bf = (planet1, planet2) => {\n  // const y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  // const u = []\n  // const lo = -1\n  // const hi = -1\n  // while (hi - lo > 1) {\n    // let mid = (hi + lo) / 2\n    // let i = mid\n    // let j = mid\n    // while (y[i] == y[j] && i < hi && j < hi) {\n      // i++\n      // j++\n    // }\n    // if (i == mid) { return () }\n    // u.push(y[i])\n    // hi = mid\n  // }\n  // return (u.reverse())\n// }\n\n// const bf = (planet1, planet2) => {\n  // const y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  // const u = []\n  // const lo = -1\n  // const hi = -1\n  // while (hi - lo > 1) {\n    // let mid = (hi + lo) / 2\n    // let i = mid\n    // let j = mid\n    // while (y[i] == y[j] && i < hi && j < hi) {\n      // i++\n      // j++\n    // }\n    // if (i == mid) { return () }\n    // u.push(y[i])\n    // hi = mid\n  // }\n  // return (u.reverse())\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let temp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = temp\n      }\n    }\n  }\n  return p\n// }\n//\n// const list_sort = (lst) => {\n  // return lst.sort((a, b) => a.length - b.length)\n// }\n\n// const list_sort = (lst) => {\n  // return lst.sort((a, b) => {\n    // if (a.length > b.length) { return 1 }\n    // if (a.length < b.length) { return -1 }\n    // return 0\n  // })\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) {\n      if (n % (i + 1) === 0) {\n        return y\n      } else {\n        return x\n      }\n    }\n  }\n  return x\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length == 0) {\n    return 0\n  } else {\n    return lst.reduce((acc, n) => acc + n * n, 0)\n  }\n}\n\nconst doubleTheDifference2 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += Math.pow(lst[i], 2)\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference3 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference4 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference5 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference6 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference7 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference8 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference9 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference10 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference11 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference12 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference13 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference14 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference15 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference16 = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i]\n    }\n  }\n  return p\n}"}
{"task_id": "JavaScript/152", "prompt": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n    game[i] = 0\n  }\n  \n  const score = (game, guess) => {\n    for (let i = 0; i < guess.length; i++) {\n      game[i] -= guess[i]\n      if (game[i] < 0)\n        game[i] = 0\n    }\n  }\n  \n  const diff = (a, b) => a - b\n  \n  const max = Math.max\n  const min = Math.min\n  \n  return [...new Set(game).values()].map(score).sort(diff).reduce((acc, num) => {\n    const score = acc[num]\n    return max(acc, score)\n  }, 0)\n  \n}<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y > s) { s = y; u = i }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n// const extension = (ext) => {\n//   let m = ext.match(/^\\w+\\.\\w+$/)\n//   return m\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n// You are given 2 words. You need to return true if the first word or any of its rotations is a substring in the second word\n// const cycpatternCheck = (a, b) => {\n  let l = a.length\n  let pat = a + a\n  for (let i = 0; i < b.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (b[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n// function patternCheck(a, b) {\n  // const l = b.length\n  // const pat = b + b\n  // for (let i = 0; i < a.length - l + 1; i++) {\n  //   for (let j = 0; j < l + 1; j++) {\n  //     let y = 1\n  //     for (let k = 0; k < l; k++) {\n  //       if (a[i + k]!= pat[j + k]) { y = 0 }\n  //     }\n  //     if (y) {\n  //       return true\n  //     }\n  //   }\n  // }\n  // return false\n}\n\nconst patternCheck = (a, b) => {\n  for (let i = 0; i < a.length - b.length + 1; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i + j]!= b[j]) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst patternCheck = (a, b) => {\n  for (let i = 0; i < a.length - b.length + 1; i++) {\n    if (a[i]!= b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst patternCheck = (a, b) => {\n  if (a.length > b.length) {\n    return false\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!= b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst patternCheck = (a, b) => {\n  if (a.length < b.length) {\n    return false\n  }\n  for (let i = 0; i < b.length; i++) {\n    if (a[i]!= b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst patternCheck = (a, b) => {\n  let x = 0\n  let y = 0\n  for (let i = 0; i < a.length; i++) {\n    x += a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    y += b[i]\n  }\n  return x == y\n}\n\nconst patternCheck = (a, b) => {\n  return a.toString().indexOf(b)!= -1\n}\n\nconst patternCheck = (a, b) => {\n  return a.indexOf(b)!= -1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = num / 2 }\n  return {\n    odd: o,\n    even: e\n  }\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n\n// Given a string, return the number of times the string appears in the string.\n// \n//    Example:\n//       occurencesOf(\"abc\") ==> 3\n//       occurencesOf(\"bab\") ==> 2\n// const occurencesOf = (string) => {\n  let cnt = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      if (string[i] === string[j]) { cnt++ }\n    }\n  }\n  return cnt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    if (div > 0) {\n      res += sym[i]\n      number = number + div * num[i]\n    }\n    i--\n  }\n  return res.toLowerCase()\n// }\n\nexport function convertNumberToRoman(num) {\n  return intToMiniRoman(num)\n}\n\nexport function convertRomanToNumber(roman) {\n  let res = 0\n  for (let i = 0; i < roman.length; i++) {\n    let n = num[roman.charAt(i)]\n    res += n\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  //  a * a == b * b + c * c\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n//  Given the lengths of two sides of a right angle triangle. Return true if the\n//   sides form a right angle, false otherwise.\n//   A right angle is a triangle in which all three sides are the same length.\n//   Example:\n//   rightAngle(3, 4) == true\n//   rightAngle(1, 2) == false\n// const rightAngle = (a, b) => {\n  return (a * a == b * b)\n}\n\nconst rightAngle = (a, b) => {\n  return (a * a == b * b)\n}\n\n//  Given the lengths of two sides of a triangle, return the length of the\n//   greatest angle.\n//   Example:\n//   greatestAngle(4, 3, 3) == 6\n//   greatestAngle(1, 2, 4) == 6\n// const greatestAngle = (a, b, c) => {\n  return (a > b? (a > c? a : c) : (b > c? b : c))\n}\n\nconst greatestAngle = (a, b, c) => {\n  return (a > b? (a > c? a : c) : (b > c? b : c))\n}\n\n//  Given the lengths of three sides of a triangle, return the length of the\n//   smallest angle.\n//   Example:\n//   smallestAngle(4, 3, 3) == 12\n//   smallestAngle(1, 2, 4) == 12\n// const smallestAngle = (a, b, c) => {\n  return (a < b? (a < c? a : c) : (b < c? b : c))\n}\n\nconst smallestAngle = (a, b, c) => {\n  return (a < b? (a < c? a : c) : (b < c? b : c))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      p += y\n    }\n    if (p > u) { u = p; s = i }\n  }\n  return words[s]\n}\n\n// Write a function that reads a string and returns the minimum and maximum\n// length of the substring.\n// \n//   findMaxLength([]) => {\n//     let min = 0\n//     let max = 0\n//     let i = 0\n//     while (i < words[i].length) {\n//       let j = i + 1\n//       while (j < words[i].length) {\n//         if (words[i][i] == words[i][j]) { j++ }\n//         else { break }\n//       }\n//       min = Math.min(min, j - i)\n//       max = Math.max(max, j - i)\n//       i = j\n//     }\n//     return [min, max]\n//   }\n// \n//   findMaxLength([\"a\", \"a\", \"b\", \"c\", \"c\"]) === [0, 2]\n//   findMaxLength([\"a\", \"a\", \"b\", \"c\", \"c\"]) === [0, 2]\n//   findMaxLength([\"aa\", \"b\", \"c\", \"c\", \"aa\"]) === [0, 2]\n//   findMaxLength([\"aa\", \"b\", \"c\", \"c\", \"aa\"]) === [0, 2]\n// const findMaxLength = (words) => {\n  let min = 0\n  let max = 0\n  let i = 0\n  while (i < words.length) {\n    let j = i + 1\n    while (j < words.length) {\n      if (words[i][i] == words[i][j]) { j++ }\n      else { break }\n    }\n    min = Math.min(min, j - i)\n    max = Math.max(max, j - i)\n    i = j\n  }\n  return [min, max]\n}\n\n// Write a function that reads a string and returns the string with all the\n// letters in alphabetical order.\n// \n//   findMaxOrder([]) => {\n//     let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n//     let min = 0\n//     let max = 0\n//     let i = 0\n//     while (i < words[i].length) {\n//       let j = i + 1\n//       while (j < words[i].length) {\n//         if (words[i][i] == words[i][j]) { j++ }\n//         else { break }\n//       }\n//       min = Math.min(min, j - i)\n//       max = Math.max(max, j - i)\n//       i = j\n//     }\n//     let result = \"\"\n//     let k = 0\n//     while (k < words[i].length) {\n//       result = result + words[i][k]\n//       k++\n//     }\n//     return alphabet.sort().reverse().reduce((prev, current, index) => {\n//       return (current < prev)? current : prev\n//     }, result)\n//   }\n// \n//   findMaxOrder([\"e\", \"k\", \"z\", \"m\", \"i\", \"g\", \"r\", \"t\", \"j\", \"f\", \"b\", \"p\", \"d\", \"o\", \"n\", \"s\", \"v\", \"u\", \"c\", \"a\", \"l\", \"q\", \"h\", \"w\", \"x\", \"n\", \"v\", \"p\", \"d\", \"q\", \"x\", \"c\", \"o\", \"f\", \"r\", \"t\", \"s\", \"b\", \"g\", \"m\", \"z\", \"j\", \"i\", \"e\"]) === \"bzmcgvqxntdofj\"\n// const findMaxOrder = (words) => {\n  let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n  let min = 0\n  let max = 0\n  let i = 0\n  while (i < words.length) {\n    let j = i + 1\n    while (j < words.length) {\n      if (words[i][i] == words[i][j]) { j++ }\n      else { break }\n    }\n    min = Math.min(min, j - i)\n    max = Math.max(max, j - i)\n    i = j\n  }\n  let result = \"\"\n  let k = 0\n  while (k < words[i].length) {\n    result = result + words[i][k]\n    k++\n  }\n  return alphabet.sort().reverse().reduce((prev, current, index) => {\n    return (current < prev)? current : prev\n  }, result)\n}\n\n// Write a function that reads a string and"}
{"task_id": "JavaScript/159", "prompt": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  } else {\n    return [number, 0]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] = -operand[i]\n      }\n      else if (operator[i] == '+') {\n        operand[i] = operand[i] + operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n  }\n  return operand\n}\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    } else {\n      t = 0;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t === 1) {\n    return p\n  } else {\n    return s\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  const result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n}\n\n// Question: Given a positive integer n, your task is to generate and return all the possible permutations of the digits.\n//\n// Example:\n// For n = 1234, the output should be\n// permute(1234) = 123, 4123, 123, 4123, 1234, 3412, 2341, 1423, 4343, 2341, 3142, 1324, 3214, 2341\n// permute(54321) = 54321\n//\n// Solution: The solution is to use backtracking.\nconst generatePermutations = (num) => {\n  if (num === 0) {\n    return [''];\n  }\n  const permutations = [];\n  let i;\n  for (i = 0; i < num; i++) {\n    const subPermutations = generatePermutations(num - 1);\n    const subPermutation = subPermutations.map(p => p + nums[i]);\n    permutations = permutations.concat(subPermutation);\n  }\n  return permutations;\n};\n\nconst permute = (num) => {\n  const permutations = generatePermutations(num);\n  return permutations;\n};\n\nconst generatePermutations = (num) => {\n  const permutations = [];\n  let i;\n  for (i = 0; i < num; i++) {\n    const subPermutations = generatePermutations(num - 1);\n    const subPermutation = subPermutations.map(p => p + nums[i]);\n    permutations = permutations.concat(subPermutation);\n  }\n  return permutations;\n};\n\n// Question: Given an array of digits, return all possible permutations.\n//\n// Example:\n// For inputDigits = [1, 2, 3], the output should be\n// permute(inputDigits) = [123, 132, 213, 231, 312, 321]\n// permute(inputDigits) = [132, 213, 231, 321, 312, 123]\n// permute(inputDigits) = [321, 312, 123, 132, 213, 231]\n//\n// Solution: The solution is to use backtracking.\nconst generatePermutations = (inputDigits) => {\n  const permutations = [];\n  let i;\n  let j;\n  let k;\n  let result;\n  let permutation;\n  for (i = 0; i < inputDigits.length; i++) {\n    result = [];\n    for (j = 0; j < inputDigits.length; j++) {\n      permutation = inputDigits.slice(0);\n      permutation.splice(i, 1);\n      for (k = 0; k < permutation.length; k++) {\n        result.push(permutation[k]);\n      }\n    }\n    permutations = permutations.concat(result);\n  }\n  return permutations;\n};\n\nconst generatePermutations = (inputDigits) => {\n  const permutations = [];\n  let i;\n  let j;\n  let k;\n  let result;\n  let permutation;\n  for (i = 0; i < inputDigits.length; i++) {\n    result = [];\n    for (j = 0; j < inputDigits.length; j++) {\n      permutation = inputDigits.slice(0);\n      permutation.splice(i, 1);\n      for (k = 0; k < permutation.length; k++) {\n        result.push(permutation[k]);\n      }\n    }\n    permutations = permutations.concat(result);\n  }\n  return permutations;\n};\n\nconst generatePermutations = (inputDigits) => {\n  const permutations = [];\n  let i;\n  let j;\n  let k;\n  let result;\n  let permutation;\n  for (i = 0; i < inputDigits.length; i++) {\n    result = [];\n    for (j = 0; j < inputDigits.length; j++) {\n      permutation = inputDigits.slice(0);\n      permutation.splice(i, 1);\n      for (k = 0; k < permutation.length; k++) {\n        result.push(permutation[k]);\n      }\n    }\n    permutations = permutations.concat(result);\n  }\n  return permutations;\n};\n\n// Question: Given a string, return a list of permutations.\n//\n// Example:\n// For inputString = \"a\", the output should be\n// permute(inputString) = [\"a\"]\n// permute(inputString) = [\"a\"]\n// permute(inputString) = [\"b\"]\n// permute(inputString) = [\"ab\"]\n// permute(inputString) = [\"ba\"]\n// permute(inputString) = [\"a\", \"b\"]\n// permute(inputString) = [\"a\", \"b\", \"a\"]\n// permute(inputString) = [\"a\", \"b\", \"c\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"a\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\", \"a\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\", \"e\", \"a\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"]\n// permute(inputString) = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"a\"]\n// perm"}
