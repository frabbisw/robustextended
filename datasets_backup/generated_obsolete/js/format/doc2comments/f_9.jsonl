{"task_id": "JavaScript/0", "prompt": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n", "canonical_solution": "        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "partial": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n          # print('@@this is the line to split##')\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Check if in given list of numbers, are any two numbers closer to each other than\n//   given threshold.\n//   >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n//   false\n//   >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n//   true\n// const hasCloseElements = (numbers, threshold) => {\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i!= j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n// Check if two numbers are equal, within given threshold.\n//   >>> equals(1.0, 1.0, 0.2)\n//   true\n//   >>> equals(1.0, 1.0, 0.1)\n//   false\n// const equals = (a, b, threshold) => {\n  let a = Math.abs(a);\n  let b = Math.abs(b);\n  if (a > b) {\n    return a - b <= threshold;\n  } else {\n    return b - a <= threshold;\n  }\n// };\n\n// Test harness\n// console.log(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1));\n// console.log(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3));\n// console.log(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5));\n// console.log(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.7));\n// console.log(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.9));\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n", "canonical_solution": "      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "partial": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      # print('@@this is the line to split##')\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "gc": "// Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n//   separate those group into separate strings and return the list of those.\n//   Separate groups are balanced (each open brace is properly closed) and not nested within each other\n//   Ignore any spaces in the input string.\n//   >>> separateParenGroups('( ) (( )) (( )( ))')\n//   ['()', '(())', '(()())']\n// const separateParenGroups = (paren_string) => {\n  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      if (current_depth > 0) {\n        current_string.push(c);\n      } else {\n        result.push(current_string);\n        current_string = [];\n      }\n    } else {\n      current_string.push(c);\n    }\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n", "canonical_solution": "}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "partial": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  return number % 1.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given a positive floating point number, it can be decomposed into\n//   and integer part (largest integer smaller than given number) and decimals\n//   (leftover part always smaller than 1).\n// \n//   Return the decimal part of the number.\n//   >>> truncateNumber(3.5)\n//   0.5\n// const truncateNumber = (number) => {\n  return number % 1.0;\n// }\n\n// Given an array of numbers, it can be decomposed into an integer part and\n//   a decimal part, each in its own array.\n// \n//   Return the array of integer parts of the given numbers.\n//   >>> add(1, 2)\n//   [1, 2]\n// const add = (numbers) => {\n  return [...new Set(numbers.map(Number))];\n// }\n\n// Given an array of numbers, it can be decomposed into an integer part and\n//   a decimal part, each in its own array.\n// \n//   Return the array of decimal parts of the given numbers.\n//   >>> add(1, 2)\n//   [0.5, 0.5]\n// const add = (numbers) => {\n  return [...new Set(numbers.map(Number))];\n// }\n\n// Given a string, return its index of the first occurrence of a given character.\n// \n//   >>> indexOf('abc', 'a')\n//   0\n// const indexOf = (str, char) => {\n  return str.indexOf(char);\n// }\n\n// Given a string, return the index of the last occurrence of a given character.\n// \n//   >>> lastIndexOf('abc', 'a')\n//   3\n// const lastIndexOf = (str, char) => {\n  return str.lastIndexOf(char);\n// }\n\n// Given a string, return the index of the first occurrence of a given substring.\n// \n//   >>> indexOf('abc', 'a')\n//   0\n// const indexOf = (str, subStr) => {\n  return str.indexOf(subStr);\n// }\n\n// Given a string, return the index of the last occurrence of a given substring.\n// \n//   >>> lastIndexOf('abc', 'a')\n//   3\n// const lastIndexOf = (str, subStr) => {\n  return str.lastIndexOf(subStr);\n// }\n\n// Given a string, return the number of occurrences of a given character.\n// \n//   >>> count('abc', 'a')\n//   2\n// const count = (str, char) => {\n  return str.split(char).length - 1;\n// }\n\n// Given a string, return the number of occurrences of a given substring.\n// \n//   >>> count('abc', 'a')\n//   2\n// const count = (str, subStr) => {\n  return str.split(subStr).length - 1;\n// }\n\n// Given a string, return the index of the first non-matching index in a given\n//   substring.\n// \n//   >>> indexOf('abc', 'ba')\n//   1\n// const indexOf = (str, subStr) => {\n  return str.indexOf(subStr);\n// }\n\n// Given a string, return the index of the last non-matching index in a given\n//   substring.\n// \n//   >>> lastIndexOf('abc', 'ba')\n//   1\n// const lastIndexOf = (str, subStr) => {\n  return str.lastIndexOf(subStr);\n// }\n\n// Given a string, return the index of the first non-matching index in a given\n//   substring.\n// \n//   >>> indexOf('abc', 'ba')\n//   1\n// const indexOf = (str, subStr) => {\n  return str.indexOf(subStr);\n// }\n\n// Given a string, return the index of the last non-matching index in a given\n//   substring.\n// \n//   >>> lastIndexOf('abc', 'ba')\n//   1\n// const lastIndexOf = (str, subStr) => {\n  return str.lastIndexOf(subStr);\n// }\n\n// Given a string, return a new string made of the first n characters of the\n//   string.\n// \n//   >>> first('abc', 2)\n//   'ab'\n// const first = (str, n) => {\n  return str.slice(0, n);\n// }\n\n// Given a string, return a new string made of the last n characters of the\n//   string.\n// \n//   >>> last('abc', 2)\n//   'bc'\n// const last = (str, n) => {\n  return str.slice(-n);\n// }\n\n// Given a string, return the index of the first non-matching index in a given\n//   substring.\n// \n//   >>> indexOf('abc', 'ba')\n//   1\n// const indexOf = (str, subStr) => {\n  return str.indexOf(subStr);\n// }\n\n// Given a string, return the index of the last non-matching index in a given\n//   substring.\n// \n//   >>> lastIndexOf('abc', 'ba')\n//   1\n// const lastIndexOf = (str, subStr) => {\n  return str.lastIndexOf(subStr);\n// }\n\n// Given a string, return the index of the first non-matching index in a given\n//   substring.\n// \n//   >>> indexOf('abc', 'ba')\n//   1\n// const indexOf = (str, subStr) => {\n  return str.indexOf(subStr);\n// }\n\n// Given a string, return the index of the last non-matching index in a given\n//   substring.\n// \n//   >>> lastIndexOf('abc', 'ba')\n//   1\n// const lastIndexOf = (str, subStr) => {\n  return str.lastIndexOf(subStr);\n// }\n\n// Given an array of numbers, return an array of the same size, each with the\n//   largest integer in the corresponding array.\n// \n//   >>> largest([1, 2, 3])\n//   [1, 3]\n// const largest = (numbers) => {\n  return [...new Set(numbers.map(Number))];\n// }\n\n// Given an array of numbers, return an array of the same size, each"}
{"task_id": "JavaScript/3", "prompt": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n", "canonical_solution": "      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "partial": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      # print('@@this is the line to split##')\n      return true;\n    }\n  }\n  return false;\n}\n\n", "gc": "// You're given a list of deposit and withdrawal operations on a bank account that starts with\n//   zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n//   at that point function should return true. Otherwise it should return false.\n//   >>> belowZero([1, 2, 3])\n//   false\n//   >>> belowZero([1, 2, -4, 5])\n//   true\n// const belowZero = (operations) => {\n  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// const belowZero = (operations) => {\n//   var balance = 0;\n//   for (const op of operations) {\n//     balance += op;\n//     if (balance < 0) {\n//       return true;\n//     }\n//   }\n//   return false;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n", "canonical_solution": "    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "partial": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    # print('@@this is the line to split##')\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "gc": "// For a given list of input numbers, calculate Mean Absolute Deviation\n//   around the mean of this dataset.\n//   Mean Absolute Deviation is the average absolute difference between each\n//   element and a centerpoint (mean in this case):\n//   MAD = average | x - x_mean |\n//   >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n//   1.0\n// const meanAbsoluteDeviation = (numbers) => {\n  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return Math.abs(item - mean);\n  }, 0) / numbers.length;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n", "canonical_solution": "    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "partial": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    # print('@@this is the line to split##')\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "gc": "// Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n//   >>> intersperse([], 4)\n//   []\n//   >>> intersperse([1, 2, 3], 4)\n//   [1, 4, 2, 4, 3]\n// const intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n);\n    if (numbers.length > 1)\n      result.push(delimeter);\n  }\n  return result;\n}\n\n//------------------------------------------------------------------------------\n// Shift a list\n//------------------------------------------------------------------------------\n// Shifts a list 'n' places to the left.\n//   >>> shift([1, 2, 3, 4], 2)\n//   [3, 4, 1, 2]\n// const shift = (list, n) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice(n);\n  return result.concat(list.slice(0, n));\n}\n\n//------------------------------------------------------------------------------\n// Unshift a list\n//------------------------------------------------------------------------------\n// Unshifts a list 'n' places to the right.\n//   >>> unshift([1, 2, 3, 4], 2)\n//   [1, 2, 4, 3]\n// const unshift = (list, n) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice(0, n);\n  return result.concat(list.slice(n));\n}\n\n//------------------------------------------------------------------------------\n// Shift a list\n//------------------------------------------------------------------------------\n// Shifts a list 'n' places to the left.\n//   >>> shift([1, 2, 3, 4], 2)\n//   [3, 4, 1, 2]\n// const shift = (list, n) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice(n);\n  return result.concat(list.slice(0, n));\n}\n\n//------------------------------------------------------------------------------\n// Unshift a list\n//------------------------------------------------------------------------------\n// Unshifts a list 'n' places to the right.\n//   >>> unshift([1, 2, 3, 4], 2)\n//   [1, 2, 4, 3]\n// const unshift = (list, n) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice(0, n);\n  return result.concat(list.slice(n));\n}\n\n//------------------------------------------------------------------------------\n// Concat two lists\n//------------------------------------------------------------------------------\n// Concatenates two lists.\n//   >>> concat([1, 2], [3, 4])\n//   [1, 2, 3, 4]\n// const concat = (list1, list2) => {\n  if (!Array.isArray(list1) || list1.length == 0)\n    return [];\n  if (!Array.isArray(list2) || list2.length == 0)\n    return [];\n  return list1.concat(list2);\n}\n\n//------------------------------------------------------------------------------\n// Reverse a list\n//------------------------------------------------------------------------------\n// Reverses a list\n//   >>> reverse([1, 2, 3])\n//   [3, 2, 1]\n// const reverse = (list) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice();\n  const n = list.length;\n  for (let i = 0; i < n / 2; i++) {\n    const j = n - i - 1;\n    result[i], result[j] = result[j], result[i];\n  }\n  return result;\n}\n\n//------------------------------------------------------------------------------\n// Rotate a list\n//------------------------------------------------------------------------------\n// Rotates a list 'n' times\n//   >>> rotate([1, 2, 3, 4], 2)\n//   [3, 1, 4, 2]\n// const rotate = (list, n) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = list.slice();\n  const n = n % list.length;\n  if (n < 0) {\n    const n1 = -n;\n    for (let i = 0; i < n1; i++)\n      result.unshift(result.pop());\n  }\n  else if (n > 0) {\n    const n1 = n;\n    for (let i = 0; i < n1; i++)\n      result.push(result.shift());\n  }\n  return result;\n}\n\n//------------------------------------------------------------------------------\n// Map a list\n//------------------------------------------------------------------------------\n// Maps a list to a new list by applying a function to each element\n//   >>> map([1, 2, 3], x => x + 1)\n//   [2, 3, 4]\n// const map = (list, func) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = [];\n  for (const e of list) {\n    result.push(func(e));\n  }\n  return result;\n}\n\n//------------------------------------------------------------------------------\n// Filter a list\n//------------------------------------------------------------------------------\n// Filters a list to a new list by applying a predicate to each element\n//   >>> filter([1, 2, 3, 4], x => x % 2 == 1)\n//   [1, 3]\n// const filter = (list, predicate) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = [];\n  for (const e of list) {\n    if (predicate(e))\n      result.push(e);\n  }\n  return result;\n}\n\n//------------------------------------------------------------------------------\n// Reduce a list\n//------------------------------------------------------------------------------\n// Reduce a list to a new list by applying a function to each element\n//   >>> reduce([1, 2, 3, 4], (acc, x) => acc + x, 0)\n//   10\n// const reduce = (list, func, initial) => {\n  if (!Array.isArray(list) || list.length == 0)\n    return [];\n  const result = [];\n  for (const e of list) {\n    const acc = initial;\n    for (const y of list) {\n      acc = func(acc, y);"}
{"task_id": "JavaScript/6", "prompt": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n", "canonical_solution": "      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "partial": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n        # print('@@this is the line to split##')\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "gc": "// Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n//   For each of the group, output the deepest level of nesting of parentheses.\n//   E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// \n//   >>> parseNestedParens('(()()) ((())) () ((())()())')\n//   [2, 3, 1, 3]\n// const parseNestedParens = (paren_string) => {\n  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  };\n\n  var parseNestedParens = (paren_string) => {\n    const groups = paren_string.split(' ').map((x) => parseParenGroup(x));\n    const max_depth = groups.reduce((a, b) => a > b? a : b, 0);\n    return [...groups.slice(0, max_depth).reverse()];\n  };\n\n  console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n//   [2, 3, 1, 3]\n//   console.log(parseNestedParens('(()()) ((())) () ((())()())'));\n//   [2, 3, 1, 3]\n//   console.log(parseNestedParens('()((()))'));\n//   [1]\n//   console.log(parseNestedParens('()()()'));\n//   [1]\n//   console.log(parseNestedParens('()()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   console.log(parseNestedParens('()'));\n//   [1]\n//   "}
{"task_id": "JavaScript/7", "prompt": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n", "canonical_solution": "}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "partial": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) != -1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that contain given substring\n//   >>> filterBySubstring([], 'a')\n//   []\n//   >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'array']\n// const filterBySubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring)!= -1);\n// }\n\n\n// Filter an input list of strings only for ones that do not contain given substring\n//   >>> filterOutSubstring([], 'a')\n//   []\n//   >>> filterOutSubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n//   ['abc', 'bacd', 'cde', 'array']\n// const filterOutSubstring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) == -1);\n// }\n\n\n// Filter an input list of strings to include only those with a given value\n//   >>> filterByValue([], 1)\n//   []\n//   >>> filterByValue([1, 2, 3], 2)\n//   [2]\n// const filterByValue = (strings, value) => {\n  return strings.filter(x => x === value);\n// }\n\n\n// Sort an input list of strings in ascending order\n//   >>> sort([])\n//   []\n//   >>> sort(['a', 'b', 'c', 'd'])\n//   ['a', 'b', 'c', 'd']\n// const sort = (strings) => {\n  return strings.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    } else if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n// }\n\n\n// Reverse an input list of strings\n//   >>> reverse([])\n//   []\n//   >>> reverse(['a', 'b', 'c', 'd'])\n//   ['d', 'c', 'b', 'a']\n// const reverse = (strings) => {\n  return strings.reverse();\n// }\n\n\n// Join a list of strings together\n//   >>> join([])\n//   ''\n//   >>> join(['a', 'b', 'c', 'd'])\n//   'abcd'\n// const join = (strings) => {\n  return strings.join('');\n// }\n\n\n// Add together an input list of numbers\n//   >>> sum([])\n//   0\n//   >>> sum([1, 2, 3])\n//   6\n// const sum = (numbers) => {\n  return numbers.reduce((prev, next) => prev + next);\n// }\n\n\n// Subtract one input number from another\n//   >>> subtract(4, 4)\n//   0\n//   >>> subtract(5, 4)\n//   1\n//   >>> subtract(4, 5)\n//   -1\n// const subtract = (first, second) => {\n  return first - second;\n// }\n\n\n// Multiplies two numbers together\n//   >>> multiply(4, 4)\n//   16\n//   >>> multiply(5, 4)\n//   20\n//   >>> multiply(4, 5)\n//   40\n// const multiply = (first, second) => {\n  return first * second;\n// }\n\n\n// Determines if an input number is even\n//   >>> isEven(4)\n//   true\n//   >>> isEven(5)\n//   false\n// const isEven = (num) => {\n  return num % 2 === 0;\n// }\n\n\n// Determines if an input number is odd\n//   >>> isOdd(4)\n//   false\n//   >>> isOdd(5)\n//   true\n// const isOdd = (num) => {\n  return num % 2!== 0;\n// }\n\n\n// Converts an input string to an integer\n//   >>> convert('4')\n//   4\n// const convert = (num) => {\n  return parseInt(num);\n// }\n\n\n// Calculates the greatest common divisor between two numbers\n//   >>> gcd(12, 12)\n//   4\n//   >>> gcd(12, 5)\n//   3\n// const gcd = (a, b) => {\n  const divisor = b;\n  while (a % divisor!== 0) {\n    a = divisor;\n    divisor = b % divisor;\n  }\n  return divisor;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n", "canonical_solution": "    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "partial": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    # print('@@this is the line to split##')\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "gc": "// For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n//   Empty sum should be equal to 0 and empty product should be equal to 1.\n//   >>> sumProduct([])\n//   (0, 1)\n//   >>> sumProduct([1, 2, 3, 4])\n//   (10, 24)\n// const sumProduct = (numbers, int) => {\n  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n//   };\n\n// const sumProduct = (numbers, int) => {\n//   const sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   const sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//   }\n//   return [sum_value, prod_value];\n// };\n\n// const sumProduct = (numbers, int) => {\n//   let sum_value = 0, prod_value = 1;\n//   for (const n of numbers) {\n//     sum_value += n;\n//     prod_value *= n;\n//"}
{"task_id": "JavaScript/9", "prompt": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n", "canonical_solution": "      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "partial": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      # print('@@this is the line to split##')\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "gc": "// From a given list of integers, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(n, running_max);\n    if (running_max === n) {\n      result.push(n);\n      running_max = undefined;\n    }\n  }\n  return result;\n}\n\n// From a given list of strings, generate a list of rolling maximum element found until given moment\n//   in the sequence.\n//   >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n//   [1, 2, 3, 3, 3, 4, 4]\n// const rollingMax = (numbers) => {\n  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(n, running_max);\n    if (running_max === n) {\n      result.push(n);\n      running_max = undefined;\n    }\n  }\n  return result;\n}\n\nmodule.exports = {\n  rollingMax\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n", "canonical_solution": "  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "partial": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  # print('@@this is the line to split##')\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "gc": "// Test if gniven strig is a palindrome \n// const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var suffix = string.split('').reverse().join('');\n  var postfix = suffix.split('').reverse().join('');\n  var postfix_prefix = postfix.split('').reverse().join('');\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(postfix_prefix + string.charAt(i))) {\n      beginning_of_suffix = i;\n      break;\n    }\n  }\n  return string.substring(0, beginning_of_suffix + 1);\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makeLongestPalindrome = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  var suffix = string.split('').reverse().join('');\n  var postfix = suffix.split('').reverse().join('');\n  var postfix_prefix = postfix.split('').reverse().join('');\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(postfix_prefix + string.charAt(i))) {\n      beginning_of_suffix = i;\n      break;\n    }\n  }\n  return string.substring(0, beginning_of_suffix + 1);\n}\n\n/* Find the longest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindromeEndingWith = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_prefix = 0;\n  var suffix = string.split('').reverse().join('');\n  var prefix = suffix.split('').reverse().join('');\n  var prefix_suffix = prefix.split('').reverse().join('');\n  for (var i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(prefix_suffix + string.charAt(i))) {\n      beginning_of_prefix = i + 1;\n      break;\n    }\n  }\n  return string.substring(beginning_of_prefix, string.length);\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindromeContaining = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_prefix = 0;\n  var suffix = string.split('').reverse().join('');\n  var prefix = suffix.split('').reverse().join('');\n  var prefix_suffix = prefix.split('').reverse().join('');\n  for (var i = 0; i < string.length; i++) {\n    if (isPalindrome(prefix_suffix + string.charAt(i))) {\n      beginning_of_prefix = i + 1;\n      break;\n    }\n  }\n  return string.substring(beginning_of_prefix, string.length);\n}\n\n/* Find the longest palindrome that contains a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('cata')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  */\nconst makeLongestPalindromeStartingWith = (string) => {\n  if (string == '')\n    return '';\n  var beginning_of_prefix = 0;\n  var suffix = string.split('').reverse().join('');\n  var prefix = suffix.split('').reverse().join('');\n  var prefix_suffix = prefix.split('').reverse().join('');\n  for (var i = string.length - 1; i >= 0; i--) {\n    if (isPalindrome(prefix_suffix + string.charAt(i))) {\n      beginning_of_prefix = i + 1;\n      break;\n    }\n  }\n  return string.substring(beginning_of_prefix, string.length);\n}\n\n/*"}
{"task_id": "JavaScript/11", "prompt": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n", "canonical_solution": "      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "partial": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      # print('@@this is the line to split##')\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "gc": "// Input are two strings a and b consisting only of 1s and 0s.\n//   Perform binary XOR on these inputs and return result also as a string.\n//   >>> stringXor('010', '110')\n//   '100'\n// const stringXor = (a, b) => {\n  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  };\n//   if (a == b)\n//     return '0';\n//   else\n//     return '1';\n  return (a + b).replace(/[^0-1]/g, xor);\n}\n\n// Given a list of numbers, return a list of the corresponding odds.\n//   >>> odds([1,2,3,4])\n//   [1,3,5,7]\n// const odds = (nums) => {\n  var odds = function (nums) {\n    return nums.map(function (x) {\n      return x + 1;\n    });\n  };\n//   return nums.map(function (x) {\n//     return x + 1;\n//   });\n// };\n\n// Given two lists, return a list of the elements common to both lists.\n//   >>> common([1,2,3,4], [1,6,9,12])\n//   [1,6,9]\n// const common = (a, b) => {\n  var common = function (a, b) {\n    return a.filter(function (x) {\n      return b.indexOf(x)!== -1;\n    });\n  };\n//   return a.filter(function (x) {\n//     return b.indexOf(x)!== -1;\n//   });\n// };\n\n// Given two lists, return a list of the elements in the first list but not the\n// second.\n//   >>> subtract([1,2,3,4], [1,6,9,12])\n//   [2,3,4]\n// const subtract = (a, b) => {\n  var subtract = function (a, b) {\n    return a.filter(function (x) {\n      return b.indexOf(x) === -1;\n    });\n  };\n//   return a.filter(function (x) {\n//     return b.indexOf(x) === -1;\n//   });\n// };\n\n// Given a string, return a list of the indices where the string has a 1.\n//   >>> oneIndex([1,2,3,4])\n//   [1,3]\n// const oneIndex = (str) => {\n  var oneIndex = function (str) {\n    return str.split('').filter(function (x) {\n      return x == '1';\n    });\n  };\n//   return str.split('').filter(function (x) {\n//     return x == '1';\n//   });\n// };\n\n// Given two strings, return the string where each character has been swapped\n// to its opposite value.\n//   >>> swap('abc', 'cba')\n//   'cba'\n// const swap = (a, b) => {\n  var swap = function (a, b) {\n    var aa = a.split('');\n    var bb = b.split('');\n    return aa.join('').split('').map(function (x) {\n      return bb.indexOf(x) === -1? x : '1';\n    }).join('');\n  };\n//   return a.split('').map(function (x) {\n//     return bb.indexOf(x) === -1? x : '1';\n//   }).join('');\n// };\n\n// Given a string, return the string reversed.\n//   >>> reverse('abcd')\n//   'dcba'\n// const reverse = (str) => {\n  var reverse = function (str) {\n    return str.split('').reverse().join('');\n  };\n//   return str.split('').reverse().join('');\n// };\n\n// Given a string, return the string with special characters reversed.\n//   >>> reverseSpecial('abcd')\n//   'cbad'\n// const reverseSpecial = (str) => {\n  var reverseSpecial = function (str) {\n    return str.split('').reverse().map(function (x) {\n      return x.replace(/[a-zA-Z0-9]/g, '9').replace(/[A-Z]/g, 'Z');\n    }).join('');\n  };\n//   return str.split('').reverse().map(function (x) {\n//     return x.replace(/[a-zA-Z0-9]/g, '9').replace(/[A-Z]/g, 'Z');\n//   }).join('');\n// };\n\n// Given two strings, return their combined form.\n//   >>> concat('abcd', 'xyz')\n//   'abcdxyz'\n// const concat = (a, b) => {\n  var concat = function (a, b) {\n    return a + b;\n  };\n//   return a + b;\n// };\n\n// Given a string, return the string with special characters removed.\n//   >>> removeSpecial('abcd')\n//   'abcd'\n// const removeSpecial = (str) => {\n  var removeSpecial = function (str) {\n    return str.split('').filter(function (x) {\n      return x.length === 1;\n    }).join('');\n  };\n//   return str.split('').filter(function (x) {\n//     return x.length === 1;\n//   }).join('');\n// };\n\n// Given a string, return a string with the vowels reversed.\n//   >>> reverseVowels('abcdef')\n//   'fedcba'\n// const reverseVowels = (str) => {\n  var reverseVowels = function (str) {\n    return str.split('').reverse().join('');\n  };\n//   return str.split('').reverse().join('');\n// };\n\n// Given a string, return a string with the consonants reversed.\n//   >>> reverseConsonants('abcdef')\n//   'fedcba'\n// const reverseConsonants = (str) => {\n  var reverseConsonants"}
{"task_id": "JavaScript/12", "prompt": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n", "canonical_solution": "    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "partial": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    # print('@@this is the line to split##')\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "gc": "// Out of list of strings, return the longest one. Return the first one in case of multiple\n//   strings of the same length. Return null in case the input list is empty.\n//   >>> longest([])\n// \n//   >>> longest(['a', 'b', 'c'])\n//   'a'\n//   >>> longest(['a', 'bb', 'ccc'])\n//   'ccc'\n// const longest = (strings) => {\n  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length === maxlen)\n      return s;\n  }\n  return strings[0];\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n", "canonical_solution": "    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "partial": "/* Return a greatest common divisor of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b != 0) {\n    let temp = a;\n    a = b;\n    # print('@@this is the line to split##')\n    b = temp % b;\n  }\n  return a;\n}\n\n", "gc": "// Return a greatest common divisor of two integers a and b\n//   >>> greatestCommonDivisor(3, 5)\n//   1\n//   >>> greatestCommonDivisor(25, 15)\n//   5\n// const greatestCommonDivisor = (a, b) => {\n  while (b!= 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n// Return the smallest positive number that has no prime factor\n// greater than the number n\n// const nextPrime = (n) => {\n  const nextPrime = (n) => {\n    const num = (n + 1);\n    let candidate = 2;\n    while (candidate < num) {\n      if (isPrime(candidate)) {\n        return candidate;\n      }\n      candidate += 1;\n    }\n    return num;\n  };\n//   return (n) => {\n  //   const num = (n + 1);\n  //   let candidate = 2;\n  //   while (candidate < num) {\n  //     if (isPrime(candidate)) {\n  //       return candidate;\n  //     }\n  //     candidate += 1;\n  //   }\n  //   return num;\n  // };\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// Return the number of primes that are less than n\n// const countPrimes = (n) => {\n  const countPrimes = (n) => {\n    let count = 0;\n    for (let i = 2; i < n; i += 1) {\n      if (isPrime(i)) {\n        count += 1;\n      }\n    }\n    return count;\n  };\n//   let count = 0;\n//   for (let i = 2; i < n; i += 1) {\n//     if (isPrime(i)) {\n//       count += 1;\n//     }\n//   }\n//   return count;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  // return true;\n// };\n\n// const isPrime = (n) => {\n  // if (n == 1) {\n  //   return false;\n  // }\n  // for (let i = 2; i < n; i += 1) {\n  //   if (n % i === 0) {\n  //     return false;\n  //   }\n  // }\n  //"}
{"task_id": "JavaScript/14", "prompt": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n", "canonical_solution": "  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "partial": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n    # print('@@this is the line to split##')\n  }\n  return result;\n}\n\n", "gc": "// Return list of all prefixes from shortest to longest of the input string\n//   >>> allPrefixes('abc')\n//   ['a', 'ab', 'abc']\n// const allPrefixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n// }\n\n\n// Return all prefixes of a string of length 'len'\n//   >>> allPrefixes('abc', 3)\n//   ['ab', 'abc']\n// const allPrefixes = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(0, len));\n    }\n  }\n  return result;\n// }\n\n// Return list of all suffixes from shortest to longest of the input string\n//   >>> allSuffixes('abc')\n//   ['b', 'c', 'bc']\n// const allSuffixes = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(i, string.length));\n  }\n  return result;\n// }\n\n// Return all suffixes of a string of length 'len'\n//   >>> allSuffixes('abc', 3)\n//   ['c', 'bc']\n// const allSuffixes = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(i, string.length));\n    }\n  }\n  return result;\n// }\n\n\n// Return list of all strings that are a subsequence of the input string\n//   >>> allSubstrings('abc')\n//   ['abc', 'bc', 'ac', 'ab', 'a', '']\n// const allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string of\n// length 'len'\n//   >>> allSubstrings('abc', 3)\n//   ['abc', 'bc', 'ac', 'ab']\n// const allSubstrings = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(0, len));\n    }\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string\n//   >>> allSubstrings('abc')\n//   ['abc', 'bc', 'ac', 'ab', 'a', '']\n// const allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string of\n// length 'len'\n//   >>> allSubstrings('abc', 3)\n//   ['abc', 'bc', 'ac', 'ab']\n// const allSubstrings = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(0, len));\n    }\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string\n//   >>> allSubstrings('abc')\n//   ['abc', 'bc', 'ac', 'ab', 'a', '']\n// const allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string of\n// length 'len'\n//   >>> allSubstrings('abc', 3)\n//   ['abc', 'bc', 'ac', 'ab']\n// const allSubstrings = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(0, len));\n    }\n  }\n  return result;\n// }\n\n\n// Return list of all strings that are a subsequence of the input string\n//   >>> allSubstrings('abc')\n//   ['abc', 'bc', 'ac', 'ab', 'a', '']\n// const allSubstrings = (string) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n// }\n\n// Return list of all strings that are a subsequence of the input string of\n// length 'len'\n//   >>> allSubstrings('abc', 3)\n//   ['abc', 'bc', 'ac', 'ab']\n// const allSubstrings = (string, len) => {\n  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.length - i >= len) {\n      result.push(string.slice(0, len));\n    }\n  }\n  return result;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n", "canonical_solution": "}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "partial": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n//   >>> stringSequence(0)\n//   '0'\n//   >>> stringSequence(5)\n//   '0 1 2 3 4 5'\n// const stringSequence = (n) => {\n  return [...Array(n).keys(), n].join(' ')\n}\n\nexport const randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\nexport const randomString = (length) => {\n  const chars = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789'\n  const random = () => chars[Math.floor(Math.random() * (chars.length - 1))]\n  return (length)? random().repeat(length) : random()\n}\n\nexport const shuffle = (array) => {\n  const length = array.length\n  for (let i = length - 1; i > 0; i--) {\n    const index = Math.floor(Math.random() * (i + 1))\n    const temp = array[i]\n    array[i] = array[index]\n    array[index] = temp\n  }\n  return array\n}\n\nexport const shuffleReverse = (array) => {\n  const length = array.length\n  for (let i = 0; i < length; i++) {\n    const index = Math.floor(Math.random() * (length - i))\n    const temp = array[i]\n    array[i] = array[length - i - 1]\n    array[length - i - 1] = temp\n  }\n  return array\n}\n\nexport const flatten = (array) => {\n  return [].concat(...array)\n}\n\nexport const remove = (array, item) => {\n  return array.filter((value) => value!== item)\n}\n\nexport const hasDuplicates = (array) => {\n  let duplicates = false\n  for (let i = 0; i < array.length - 1; i++) {\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[i] === array[j]) {\n        duplicates = true\n        break\n      }\n    }\n  }\n  return duplicates\n}\n\nexport const removeDuplicates = (array) => {\n  let duplicates = false\n  let temp = []\n  for (let i = 0; i < array.length; i++) {\n    if (temp.indexOf(array[i]) === -1) {\n      temp.push(array[i])\n    }\n  }\n  return temp\n}\n\nexport const isEmpty = (array) => {\n  return!array.length\n}\n\nexport const length = (array) => array.length\n\nexport const map = (array, f) => {\n  return array.map(f)\n}\n\nexport const filter = (array, f) => {\n  return array.filter(f)\n}\n\nexport const reduce = (array, f, initial) => {\n  let reduce = initial\n  for (let i = 0; i < array.length; i++) {\n    reduce = f(reduce, array[i])\n  }\n  return reduce\n}\n\nexport const group = (array, f) => {\n  let group = {}\n  for (let i = 0; i < array.length; i++) {\n    if (!group[f(array[i])]) {\n      group[f(array[i])] = [array[i]]\n    } else {\n      group[f(array[i])].push(array[i])\n    }\n  }\n  return group\n}\n\nexport const groupBy = (array, f) => {\n  let group = {}\n  for (let i = 0; i < array.length; i++) {\n    if (!group[f(array[i])]) {\n      group[f(array[i])] = [array[i]]\n    } else {\n      group[f(array[i])].push(array[i])\n    }\n  }\n  return group\n}\n\nexport const groupByLength = (array, min, max) => {\n  let group = {}\n  for (let i = 0; i < array.length; i++) {\n    if (!group[min + array[i].length - 1]) {\n      group[min + array[i].length - 1] = [array[i]]\n    } else {\n      group[min + array[i].length - 1].push(array[i])\n    }\n  }\n  return group\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n", "canonical_solution": "\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "partial": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n  # print('@@this is the line to split##')\n\n}\n\n", "gc": "// Given a string, find out how many distinct characters (regardless of case) does it consist of\n//   >>> countDistinctCharacters('xyzXYZ')\n//   3\n//   >>> countDistinctCharacters('Jerry')\n//   4\n// const countDistinctCharacters = (string) => {\n  return (new Set(string.toLowerCase())).size;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n", "canonical_solution": "  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "partial": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  # print('@@this is the line to split##')\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "gc": "// Input to this function is a string representing musical notes in a special ASCII format.\n//   Your task is to parse this string and return list of integers corresponding to how many beats does each\n//   not last.\n// \n//   Here is a legend:\n//   'o' - whole note, lasts four beats\n//   'o|' - half note, lasts two beats\n//   '.|' - quater note, lasts one beat\n// \n//   >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n//   [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n// const parseMusic = (music_string) => {\n  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  const string_len = music_string.length;\n  const beat_cnt = 0;\n  const beat_cnt_start = 0;\n  const last_beat = 0;\n  const last_beat_len = 0;\n  const last_beat_cnt = 0;\n  const beat_cnt_next = 0;\n  const beats = [];\n  for (let i = 0; i < string_len; i++) {\n    const current_beat = beat_cnt;\n    const current_beat_len = beat_cnt_start + i - last_beat;\n    const current_beat_next = beat_cnt_start + i;\n    const next_beat = current_beat_next > string_len - 1? string_len - 1 : current_beat_next;\n    const next_beat_len = next_beat - last_beat;\n    const beat_cnt_next = beat_cnt_start + next_beat;\n    if (next_beat_len > 0) {\n      beat_cnt++;\n      if (current_beat < last_beat) {\n        last_beat = current_beat;\n        last_beat_len = current_beat_len;\n        last_beat_cnt = current_beat_next;\n      }\n    }\n    const note = note_map[music_string[i]];\n    const beat_cnt_new = beat_cnt + note;\n    if (beat_cnt_new > beat_cnt) {\n      beats.push(beat_cnt_new);\n      beat_cnt_start = beat_cnt_next;\n      beat_cnt = beat_cnt_new;\n      last_beat = current_beat;\n      last_beat_len = current_beat_len;\n      last_beat_cnt = current_beat_next;\n    }\n  }\n  return beats;\n}\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n", "canonical_solution": "    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "partial": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n  return times;\n}\n\n", "gc": "// Find how many times a given substring can be found in the original string. Count overlaping cases.\n//   >>> howManyTimes('', 'a')\n//   0\n//   >>> howManyTimes('aaa', 'a')\n//   3\n//   >>> howManyTimes('aaaa', 'aa')\n//   3\n// const howManyTimes = (string, substring) => {\n  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n// };\n\n// Find the largest substring that appears more than once in the original string.\n//   >>> longestRepeatedSubstring('a')\n//   'a'\n//   >>> longestRepeatedSubstring('aa')\n//   'a'\n//   >>> longestRepeatedSubstring('aa')\n//   'a'\n// const longestRepeatedSubstring = (string) => {\n  var longest = string;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      if (string.slice(i, j) == string.slice(i, j)) {\n        longest = string.slice(i, j);\n      }\n    }\n  }\n  return longest;\n// };\n\n// Find the largest substring that does not appear more than once in the original string.\n//   >>> longestUniqueSubstring('a')\n//   'a'\n//   >>> longestUniqueSubstring('aa')\n//   'a'\n//   >>> longestUniqueSubstring('aa')\n//   'a'\n// const longestUniqueSubstring = (string) => {\n  var longest = string;\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      if (string.slice(i, j) == string.slice(i, j)) {\n        longest = string.slice(i, j);\n      }\n    }\n  }\n  return longest;\n// };\n\n// Return an array of all of the strings in the original string that have the given substring in them.\n//   >>> allSubstrings('', 'a')\n//   []\n//   >>> allSubstrings('aaa', 'a')\n//   ['aaa']\n//   >>> allSubstrings('aaaa', 'aa')\n//   ['aaa', 'aa', 'aaa']\n// const allSubstrings = (string, substring) => {\n  var allSubstrings = [];\n  for (let i = 0; i < string.length; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      allSubstrings.push(string.slice(i, i+substring.length));\n    }\n  }\n  return allSubstrings;\n// };\n\n// Return the index of the first instance of the given substring. If the substring does not appear in the original string, -1 is returned.\n//   >>> indexOf('', 'a')\n//   -1\n//   >>> indexOf('aaa', 'a')\n//   0\n// const indexOf = (string, substring) => {\n  var index = string.indexOf(substring);\n  if (index == -1) {\n    index = -1;\n  }\n  return index;\n// };\n\n// Return the index of the last instance of the given substring. If the substring does not appear in the original string, -1 is returned.\n//   >>> lastIndexOf('', 'a')\n//   -1\n//   >>> lastIndexOf('aaa', 'a')\n//   2\n// const lastIndexOf = (string, substring) => {\n  var index = string.lastIndexOf(substring);\n  if (index == -1) {\n    index = -1;\n  }\n  return index;\n// };\n\n// Return a string that consists of the given substring repeated count times.\n//   >>> repeat('', 1)\n//   ''\n//   >>> repeat('a', 3)\n//   'aaa'\n// const repeat = (string, count) => {\n  var stringRepeat = '';\n  for (let i = 0; i < count; i++) {\n    stringRepeat += string;\n  }\n  return stringRepeat;\n// };\n\n// Return a string that consists of the given substring repeated count times, but with the character in the middle replaced by the given replacement string.\n//   >>> repeatWith('a', 3, 'b')\n//   'abbabb'\n// const repeatWith = (string, count, replacement) => {\n  var stringRepeat = '';\n  for (let i = 0; i < count; i++) {\n    stringRepeat += string;\n  }\n  return stringRepeat;\n// };\n\n// Return a string that consists of the given substring repeated count times, but with the character in the middle replaced by the given replacement string.\n//   >>> repeatWith('a', 3, 'b')\n//   'abbabb'\n// const repeatWith = (string, count, replacement) => {\n  var stringRepeat = '';\n  for (let i = 0; i < count; i++) {\n    stringRepeat += string;\n  }\n  return stringRepeat;\n// };\n\n// Return a string that consists of the given substring repeated count times, but with the character in the middle replaced by the given replacement string.\n//   >>> repeatWith('a', 3, 'b')\n//   'abbabb'\n// const repeatWith = (string, count, replacement) => {\n  var stringRepeat = '';\n  for (let i = 0; i < count; i++) {\n    stringRepeat += string;\n  }\n  return stringRepeat;\n// };\n\n// Return a string that consists of the given substring repeated count times, but with the character in the middle replaced by the given replacement string.\n//   >>> repeatWith('a', 3, 'b')\n//   'abbabb'\n// const repeatWith = (string, count, replacement) => {\n  var stringRepeat = '';\n  for (let i = 0; i < count; i++) {\n    stringRepeat += string;\n  }\n  return stringRepeat;\n// };\n\n// Return a string that consists of the given substring repeated count times, but with the character in the middle replaced by the given replacement string.\n//   >>> repeatWith('a', 3,"}
{"task_id": "JavaScript/19", "prompt": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n", "canonical_solution": "    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "partial": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    # print('@@this is the line to split##')\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "gc": "// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n//   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n//   Return the string with numbers sorted from smallest to largest\n//   >>> sortNumbers('three one five')\n//   'one three five'\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  const numbers = numbers.split(' ');\n  const sortedNumbers = [];\n  numbers.forEach((number) => {\n    sortedNumbers.push(value_map[number]);\n  });\n  return sortedNumbers.join(' ');\n// };\n\n// const sortNumbers = (numbers) => {\n//   const value_map = {\n//     'zero': 0,\n//     'one': 1,\n//     'two': 2,\n//     'three': 3,\n//     'four': 4,\n//     'five': 5,\n//    'six': 6,\n//    'seven': 7,\n//     'eight': 8,\n//     'nine': 9\n//   };\n\n  // const sortedNumbers = [];\n  // numbers.forEach((number) => {\n  //   sortedNumbers.push(value_map[number]);\n  // });\n  // return sortedNumbers.join(' ');\n// };\n\n// const sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  const sortedNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sortedNumbers.push(value_map[numbers[i]]);\n  }\n  return sortedNumbers.join(' ');\n// };\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  const sortedNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sortedNumbers.push(value_map[numbers[i]]);\n  }\n  return sortedNumbers.join(' ');\n};\n\n// const sortNumbers = (numbers) => {\n//   const value_map = {\n//     'zero': 0,\n//     'one': 1,\n//     'two': 2,\n//     'three': 3,\n//     'four': 4,\n//     'five': 5,\n//    'six': 6,\n//    'seven': 7,\n//     'eight': 8,\n//     'nine': 9\n//   };\n\n//   const sortedNumbers = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     sortedNumbers.push(value_map[numbers[i]]);\n//   }\n//   return sortedNumbers.join(' ');\n// };\n\n// const sortNumbers = (numbers) => {\n//   const value_map = {\n//     'zero': 0,\n//     'one': 1,\n//     'two': 2,\n//     'three': 3,\n//     'four': 4,\n//     'five': 5,\n//    'six': 6,\n//    'seven': 7,\n//     'eight': 8,\n//     'nine': 9\n//   };\n\n//   const sortedNumbers = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     sortedNumbers.push(value_map[numbers[i]]);\n//   }\n//   return sortedNumbers.join(' ');\n// };\n\n// const sortNumbers = (numbers) => {\n//   const value_map = {\n//     'zero': 0,\n//     'one': 1,\n//     'two': 2,\n//     'three': 3,\n//     'four': 4,\n//     'five': 5,\n//    'six': 6,\n//    'seven': 7,\n//     'eight': 8,\n//     'nine': 9\n//   };\n\n//   const sortedNumbers = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     sortedNumbers.push(value_map[numbers[i]]);\n//   }\n//   return sortedNumbers.join(' ');\n// };\n\n// const sortNumbers = (numbers) => {\n//   const value_map = {\n//     'zero': 0,\n//     'one': 1,\n//     'two': 2,\n//     'three': 3,\n//     'four': 4,\n//     'five': 5,\n//    'six': 6,\n//    'seven': 7,\n//     'eight': 8,\n//     'nine': 9\n//   };\n\n//   const sortedNumbers = [];\n//   for (let i = 0; i < numbers.length; i++) {\n//     sortedNumbers.push(value_map[numbers[i]]);\n//   }\n//   return sortedNumbers.join(' ');\n// };\n\nconst sortNumbers = (numbers) => {\n  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n   'six': 6,\n   'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n\n  const sortedNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sortedNumbers.push(value_map[numbers[i]]);\n  }\n  return sortedNumbers."}
{"task_id": "JavaScript/20", "prompt": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n", "canonical_solution": "          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "partial": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          # print('@@this is the line to split##')\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "gc": "// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i!= j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          distance = Math.min(distance, Math.abs(a - b));\n          closest_pair = [Math.min(closest_pair[0], b), Math.max(closest_pair[1], b)];\n        }\n      }\n  return closest_pair;\n//   return numbers.slice(0, 2).sort((a, b) => (a - b));\n// }\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n//   var closest_pair, distance;\n//   for (let i = 0; i < numbers.length; i++)\n//     for (let j = 0; j < numbers.length; j++)\n//       if (i!= j) {\n//         let a = numbers[i], b = numbers[j];\n//         if (distance == null) {\n//           distance = Math.abs(a - b);\n//           closest_pair = [Math.min(a, b), Math.max(a, b)];\n//         } else {\n//           distance = Math.min(distance, Math.abs(a - b));\n//           closest_pair = [Math.min(closest_pair[0], b), Math.max(closest_pair[1], b)];\n//         }\n//       }\n//   return numbers.slice(0, 2).sort((a, b) => (a - b));\n// }\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n//   var closest_pair, distance;\n//   for (let i = 0; i < numbers.length; i++)\n//     for (let j = 0; j < numbers.length; j++)\n//       if (i!= j) {\n//         let a = numbers[i], b = numbers[j];\n//         if (distance == null) {\n//           distance = Math.abs(a - b);\n//           closest_pair = [Math.min(a, b), Math.max(a, b)];\n//         } else {\n//           distance = Math.min(distance, Math.abs(a - b));\n//           closest_pair = [Math.min(closest_pair[0], b), Math.max(closest_pair[1], b)];\n//         }\n//       }\n//   return numbers.slice(0, 2).sort((a, b) => (a - b));\n// }\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n//   (2.0, 2.2)\n//   >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//   (2.0, 2.0)\n// const findClosestElements = (numbers) => {\n//   var closest_pair, distance;\n//   for (let i = 0; i < numbers.length; i++)\n//     for (let j = 0; j < numbers.length; j++)\n//       if (i!= j) {\n//         let a = numbers[i], b = numbers[j];\n//         if (distance == null) {\n//           distance = Math.abs(a - b);\n//           closest_pair = [Math.min(a, b), Math.max(a, b)];\n//         } else {\n//           distance = Math.min(distance, Math.abs(a - b));\n//           closest_pair = [Math.min(closest_pair[0], b), Math.max(closest_pair[1], b)];\n//         }\n//       }\n//   return numbers.slice(0, 2).sort((a, b) => (a - b));\n// }\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n//   other and return them in order (smaller number, larger number).\n//   >>> find"}
{"task_id": "JavaScript/21", "prompt": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n", "canonical_solution": "  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "partial": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  # print('@@this is the line to split##')\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "gc": "// Given list of numbers (of at least two elements), apply a linear transform to that list,\n//   such that the smallest number will become 0 and the largest will become 1\n//   >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n//   [0.0, 0.25, 0.5, 0.75, 1.0]\n// const rescaleToUnit = (numbers) => {\n  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  var scale = 1.0 / (max_number - min_number);\n  var min_number_scaled = 0.0;\n  var max_number_scaled = 1.0;\n  return numbers.map(function(num) {\n    return (num - min_number) * scale;\n  });\n//   return numbers.map(num => (num - min_number) * scale);\n// }\n\n\n// const getMinMaxOfList = (numbers) => {\n  // const sorted_numbers = sorted(numbers);\n  // const min_number = sorted_numbers[0];\n  // const max_number = sorted_numbers[sorted_numbers.length - 1];\n  // return [min_number, max_number];\n// }\n\n\n// const getMinMaxOfList = (numbers) => {\n  // const sorted_numbers = sorted(numbers);\n  // const min_number = sorted_numbers[0];\n  // const max_number = sorted_numbers[sorted_numbers.length - 1];\n  // return [min_number, max_number];\n// }\n\n\n// const getMinMaxOfList = (numbers) => {\n  // const sorted_numbers = sorted(numbers);\n  // const min_number = sorted_numbers[0];\n  // const max_number = sorted_numbers[sorted_numbers.length - 1];\n  // return [min_number, max_number];\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n", "canonical_solution": "}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "partial": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter given list of any python values only for integers\n//   >>> filterIntegers(['a', 3.14, 5])\n//   [5]\n//   >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n//   [1, 2, 3]\n// const filterIntegers = (values) => {\n  return values.filter(x => Number.isInteger(x));\n}\n\nconst filterFloats = values => {\n  return values.filter(x => Number.isFinite(x));\n}\n\nconst filterStrings = values => {\n  return values.filter(x => typeof x ==='string');\n}\n\nconst filterDictionaries = values => {\n  return values.filter(x => x instanceof Map);\n}\n\nconst filterLists = values => {\n  return values.filter(x => x instanceof Array);\n}\n\nconst filter = {\n  strings,\n  integers,\n  floats,\n  dictionaries,\n  lists\n};\n\nconst filterF = f => {\n  return filter[f.name];\n}\n\nconst getF = f => {\n  return f.apply(undefined, [filterF(f)]);\n}\n\nexport default getF;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n", "canonical_solution": "}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "partial": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return length of given string\n//   >>> strlen('')\n//   0\n//   >>> strlen('abc')\n//   3\n// const strlen = (string) => {\n  return string.length;\n};\n\n// Return string reversed\n//   >>> strrev('abc')\n//   'cba'\n//   >>> strrev('abcd')\n//   'dcba'\nconst strrev = (string) => {\n  let rev = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    rev += string[i];\n  }\n  return rev;\n};\n\n// Return string with spaces\n//   >>> spaces('abc')\n//   'abc'\n//   >>> spaces(' abc')\n//   'abc'\n//   >>> spaces(' abc ')\n//   'abc'\nconst spaces = (string) => {\n  let spaces = '';\n  for (let i = 0; i < string.length; i++) {\n    spaces +='';\n  }\n  return spaces;\n};\n\n// Return first N characters of a string\n//   >>> lstrip('abc', 3)\n//   'abc'\n//   >>> lstrip('abc', 4)\n//   'abc'\nconst lstrip = (string, n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return first N characters of a string\n//   >>> rstrip('abc', 3)\n//   'abc'\n//   >>> rstrip('abc', 4)\n//   'abc'\nconst rstrip = (string, n) => {\n  let str = '';\n  for (let i = string.length - n; i < string.length; i++) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return string without leading and trailing spaces\n//   >>> strip(' abc ')\n//   'abc'\n//   >>> strip('abc')\n//   'abc'\nconst strip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return string without leading spaces\n//   >>> lstrip(' abc ')\n//   'abc'\n//   >>> lstrip('abc')\n//   'abc'\nconst lstrip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return string without trailing spaces\n//   >>> rstrip(' abc ')\n//  'abc'\n//   >>> rstrip('abc')\n//   'abc'\nconst rstrip = (string) => {\n  let str = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return string without leading and trailing spaces\n//   >>> strip(' abc ')\n//   'abc'\n//   >>> strip('abc')\n//   'abc'\nconst strip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str;\n};\n\n// Return the number of leading spaces in a string\n//   >>> lstrip('   abc ')\n//   2\n//   >>> lstrip('abc')\n//   0\nconst lstrip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str.length;\n};\n\n// Return the number of trailing spaces in a string\n//   >>> rstrip('   abc ')\n//   2\n//   >>> rstrip('abc')\n//   0\nconst rstrip = (string) => {\n  let str = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    str += string[i];\n  }\n  return str.length;\n};\n\n// Return the number of leading spaces in a string\n//   >>> strip('   abc ')\n//   0\n//   >>> strip('abc')\n//   'abc'\nconst strip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str.length;\n};\n\n// Return the number of trailing spaces in a string\n//   >>> strip('   abc ')\n//   0\n//   >>> strip('abc')\n//   'abc'\nconst strip = (string) => {\n  let str = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    str += string[i];\n  }\n  return str.length;\n};\n\n// Return the number of leading spaces in a string\n//   >>> lstrip('   abc ')\n//   2\n//   >>> lstrip('abc')\n//   'abc'\nconst lstrip = (string) => {\n  let str = '';\n  for (let i = 0; i < string.length; i++) {\n    str += string[i];\n  }\n  return str.length;\n};\n\n// Return the number of trailing spaces in a string\n//   >>> rstrip('   abc ')\n//   2\n//   >>> rstrip('abc')\n//   'abc'\nconst rstrip = (string) => {\n  let str = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    str += string[i];\n  }\n  return str.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n", "canonical_solution": "      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "partial": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      # print('@@this is the line to split##')\n      return i;\n}\n\n", "gc": "// For a given number n, find the largest number that divides n evenly, smaller than n\n//   >>> largestDivisor(15)\n//   5\n// const largestDivisor = (n) => {\n  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i\n  return n\n}\n\n// const largestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= Math.sqrt(n); i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\n// const largestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\nconst largestPrime = (n) => {\n  if (n < 2)\n    return 1\n  for (let i = 2; i <= n; i++)\n    if (n % i == 0)\n      return i\n  return n\n}\n\n// const smallestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\n// const largestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\n// const largestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\nconst smallestPrime = (n) => {\n  if (n < 2)\n    return 1\n  for (let i = 2; i <= n; i++)\n    if (n % i == 0)\n      return i\n  return n\n}\n\n// const smallestPrime = (n) => {\n//   if (n < 2)\n//     return 1\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return i\n//   return n\n// }\n\nconst smallestPrime = (n) => {\n  if (n < 2)\n    return 1\n  for (let i = 2; i <= n; i++)\n    if (n % i == 0)\n      return i\n  return n\n}\n\nconst largestPrime = (n) => {\n  if (n < 2)\n    return 1\n  for (let i = 2; i <= n; i++)\n    if (n % i == 0)\n      return i\n  return n\n}\n\n// const primeFactor = (n) => {\n//   if (n < 2)\n//     return []\n//   for (let i = 2; i <= n; i++)\n//     if (n % i == 0)\n//       return [i]\n//   return []\n// }\n\nconst primeFactor = (n) => {\n  if (n < 2)\n    return []\n  for (let i = 2; i <= n; i++)\n    if (n % i == 0)\n      return [i]\n  return []\n}\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false\n  if (n < 4)\n    return true\n  if (n % 2 == 0)\n    return false\n  if (n % 3 == 0)\n    return false\n  if (n < 9)\n    return true\n  if (n < 36)\n    return false\n  let sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6)\n    if (n % i == 0 || n % (i + 2) == 0)\n      return false\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false\n  if (n < 4)\n    return true\n  if (n % 2 == 0)\n    return false\n  if (n % 3 == 0)\n    return false\n  if (n < 9)\n    return true\n  if (n < 36)\n    return false\n  let sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6)\n    if (n % i == 0 || n % (i + 2) == 0)\n      return false\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false\n  if (n < 4)\n    return true\n  if (n % 2 == 0)\n    return false\n  if (n % 3 == 0)\n    return false\n  if (n < 9)\n    return true\n  if (n < 36)\n    return false\n  let sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6)\n    if (n % i == 0 || n % (i + 2) == 0)\n      return false\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false\n  if (n < 4)\n    return true\n  if (n % 2 == 0)\n    return false\n  if (n % 3 == 0)\n    return false\n  if (n < 9)\n    return true\n  if (n < 36)\n    return false\n  let sqrt = Math.sqrt(n)\n  for (let i = 6; i <= sqrt; i += 6)\n    if (n % i == 0 || n % (i + 2) == 0)\n      return false\n  return true\n}\n\nconst isPrime = (n) => {\n  if (n < 2)\n    return false\n  if (n < 4)\n    return true\n  if (n % 2 == 0)\n    return false\n  if (n % 3 == 0)\n    return false\n  if (n < 9)\n    return true\n  if (n < 36)\n    return false\n  let sqrt = Math.sqrt("}
{"task_id": "JavaScript/25", "prompt": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n", "canonical_solution": "    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "partial": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n      # print('@@this is the line to split##')\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "gc": "// Return list of prime factors of given integer in the order from smallest to largest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\n// const factorize = (n) => {\n  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n// }\n\n// Return list of prime factors of given integer in the order from largest to smallest.\n//   Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n//   Input number should be equal to the product of all factors\n//   >>> factorize(8)\n//   [2, 2, 2]\n//   >>> factorize(25)\n//   [5, 5]\n//   >>> factorize(70)\n//   [2, 5, 7]\nconst largest = (n) => {\n  var fact = [], i = Math.sqrt(n) + 1;\n  while (i >= 2) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i -= 1;\n    }\n  }\n  if (n > 1) {\n    fact.push(n);\n  }\n  return fact;\n}\n\nconst factorize = (n) => {\n  var factors = largest(n);\n  return factors.reduce((acc, cur) => {\n    var newFactors = largest(cur * n);\n    return [...acc,...newFactors];\n  }, []);\n}\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n", "canonical_solution": "      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "partial": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      # print('@@this is the line to split##')\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "gc": "// From a list of integers, remove all elements that occur more than once.\n//   Keep order of elements left the same as in the input.\n//   >>> removeDuplicates([1, 2, 3, 2, 4])\n//   [1, 3, 4]\n// const removeDuplicates = (numbers) => {\n  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  var newList = [];\n  for (const [key, value] of Object.entries(dict)) {\n    if (value === 1) {\n      newList.push(key);\n    }\n  }\n  return newList;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n", "canonical_solution": "          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "partial": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          # print('@@this is the line to split##')\n          .join('');\n}\n\n", "gc": "// For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n//   >>> flipCase('Hello')\n//   'hELLO'\n// const flipCase = (string) => {\n  return string.split('')\n         .map(x => (x.toUpperCase() == x? x.toLowerCase() : x.toUpperCase()))\n         .join('');\n// }\n\n// For a given string, return a string with characters in the given range swapped.\n//   >>> swapCase('abc123def')\n//   'cdeabc123def'\n// const swapCase = (string) => {\n  return string.split('')\n         .map(x => (x.toLowerCase() == x? x.toUpperCase() : x.toLowerCase()))\n         .join('');\n// }\n\n// Given a string, return a string with all the lowercase characters replaced with their uppercase counterparts.\n//   >>> titleCase('hello world')\n//   'Hello World'\n// const titleCase = (string) => {\n  return string.split('')\n         .map(x => x.toUpperCase())\n         .join('');\n// }\n\n// Given a string, return a string with all the upper-case characters replaced with their lowercase counterparts.\n//   >>> titleCase('Hello World')\n//   'hello world'\n// const titleCase = (string) => {\n  return string.split('')\n         .map(x => x.toLowerCase())\n         .join('');\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n", "canonical_solution": "}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "partial": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.join('');\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Concatenate list of strings into a single string\n//   >>> concatenate([])\n//   ''\n//   >>> concatenate(['a', 'b', 'c'])\n//   'abc'\n// const concatenate = (strings) => {\n  return strings.join('');\n// }\n\n// // Filter a list of strings\n//   >>> filter([1, 2, 3], x => x % 2 == 0)\n//   [1, 3]\n// const filter = (list, f) => {\n  const result = [];\n  for (const item of list) {\n    if (f(item)) {\n      result.push(item);\n    }\n  }\n  return result;\n// }\n\n// // Remove duplicates from a list\n//   >>> removeDuplicates([1, 2, 3, 2, 3, 4, 5])\n//   [1, 2, 3, 4, 5]\n// const removeDuplicates = (list) => {\n  const result = [];\n  for (const item of list) {\n    if (result.indexOf(item) === -1) {\n      result.push(item);\n    }\n  }\n  return result;\n// }\n\n// // Return the longest string in a list\n//   >>> longest([1, 2, 3])\n//   3\n// const longest = (list) => {\n  let max = 0;\n  for (const item of list) {\n    if (item.length > max) {\n      max = item.length;\n    }\n  }\n  return max;\n// }\n\n// // Return the shortest string in a list\n//   >>> shortest([1, 2, 3])\n//   1\n// const shortest = (list) => {\n  let min = 0;\n  for (const item of list) {\n    if (item.length < min) {\n      min = item.length;\n    }\n  }\n  return min;\n// }\n\n// // Return the number of elements in a list\n//   >>> length([1, 2, 3])\n//   3\n// const length = (list) => {\n  return list.length;\n// }\n\n// // Return a list containing the numbers from 1 to `n`\n//   >>> range(10)\n//   [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// const range = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    result.push(i);\n  }\n  return result;\n// }\n\n// // Return the index of the first occurrence of `item` in `list`\n//   >>> indexOf([1, 2, 3, 2, 3, 4, 5], 3)\n//   2\n// const indexOf = (list, item) => {\n  const result = -1;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === item) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n// }\n\n// // Return the last element of a list\n//   >>> last([1, 2, 3])\n//   3\n// const last = (list) => {\n  return list[list.length - 1];\n// }\n\n// // Return the index of the last element of a list\n//   >>> lastIndexOf([1, 2, 3, 2, 3, 4, 5], 3)\n//   6\n// const lastIndexOf = (list, item) => {\n  const result = -1;\n  for (let i = list.length - 1; i >= 0; i--) {\n    if (list[i] === item) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 1)\n//   [1, 1, 1]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 2)\n//   [2, 2, 2]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 3)\n//   [3, 3, 3]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 4)\n//   [4, 4, 4]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 5)\n//   [5, 5, 5]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 6)\n//   [6, 6, 6]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`\n//   >>> replicate(3, 7)\n//   [7, 7, 7]\n// const replicate = (n, item) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(item);\n  }\n  return result;\n// }\n\n// // Return a list containing `n` copies of `item`"}
{"task_id": "JavaScript/29", "prompt": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n", "canonical_solution": "}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "partial": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n//   ['abc', 'array']\n// const filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix));\n}\n\n// Filter an input list of strings only for ones that start with a given prefix.\n//   >>> filterByPrefix([], 'a')\n//   []\n//   >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n .filter(x => x.startsWith('a'))\n .map(x => x.slice(1))\n .map(x => x.toLowerCase())\n\n// Get the names of all the packages that contain a given string.\n//   >>> listPackages('tensorflow')\n//   ['tensorflow', 'tensorflow-gpu', 'tensorflow-probability', 'tensorflow-serving', 'tensorflow-tensorboard', 'tensorflow-tensorboard-server', 'tensorflow-tensorboard-tensorboard-plugins', 'tensorflow-addons']\n// const listPackages = (searchStr) => {\n  return find(packages, (packageName) => {\n    return packageName.includes(searchStr);\n  });\n// }\n\n// Find all the packages that contain a given string.\n//   >>> listPackages('tensorflow')\n//   ['tensorflow', 'tensorflow-gpu', 'tensorflow-probability', 'tensorflow-serving', 'tensorflow-tensorboard', 'tensorflow-tensorboard-server', 'tensorflow-tensorboard-tensorboard-plugins', 'tensorflow-addons']\n// const listPackages = (searchStr) => {\n  return find(packages, (packageName) => {\n    return packageName.includes(searchStr);\n  });\n// }\n\n// Find all the files in a given directory.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles = (searchDir) => {\n  return find(files, (fileName) => {\n    return fileName.includes(searchDir);\n  });\n// }\n\n// Find all the files in a given directory that start with a given string.\n//   >>> listFiles('tensorflow')\n//   ['README.md', 'tensorflow.js', 'tensorflow-gpu.js', 'tensorflow-addons.js', 'tensorflow-serving.js', 'tensorflow-tensorboard.js', 'tensorflow-tensorboard-server.js', 'tensorflow-tensorboard-tensorboard-plugins.js']\n// const listFiles"}
{"task_id": "JavaScript/30", "prompt": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n", "canonical_solution": "}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "partial": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(e => e > 0);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return only positive numbers in the list.\n//   >>> getPositive([-1, 2, -4, 5, 6])\n//   [2, 5, 6]\n//   >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   [5, 3, 2, 3, 9, 123, 1]\n// const getPositive = (l) => {\n  return l.filter(e => e > 0);\n// };\n\n// Return a string with all the lowercase letters in the list.\n//   >>> getLowerCase(['a', 'b', 'c', 'd'])\n//   'd'\n// const getLowerCase = (l) => {\n  return l.map(e => e.toLowerCase()).join('');\n// };\n\n// Return a list of unique words in the list.\n//   >>> getUniqueWords([\n//  ...     'a',\n//  ...     'b',\n//  ...     'c',\n//  ...     'a',\n//  ...     'b',\n//  ... ])\n//   ['a', 'b', 'c']\n// const getUniqueWords = (l) => {\n  return l.reduce((acc, e) => {\n    if (acc.indexOf(e) === -1) {\n      acc.push(e);\n    }\n    return acc;\n  }, []);\n// };\n\n// Return a list of numbers in the list, sorted in descending order.\n//   >>> getDescending([3, 2, 1])\n//   [1, 2, 3]\n// const getDescending = (l) => {\n  return l.sort((a, b) => {\n    if (a > b) return -1;\n    if (a < b) return 1;\n    return 0;\n  });\n// };\n\n// Return a list of numbers in the list, sorted in ascending order.\n//   >>> getAscending([1, 2, 3])\n//   [1, 2, 3]\n// const getAscending = (l) => {\n  return l.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n// };\n\n// Return a list of the first two letters in the list.\n//   >>> getFirstTwo(['a', 'b', 'c', 'd', 'e'])\n//   ['a', 'b']\n// const getFirstTwo = (l) => {\n  return l.slice(0, 2);\n// };\n\n// Return a list of the last two letters in the list.\n//   >>> getLastTwo(['a', 'b', 'c', 'd', 'e'])\n//   ['d', 'e']\n// const getLastTwo = (l) => {\n  return l.slice(-2);\n// };\n\n// Return a list of the first ten numbers in the list.\n//   >>> getFirstTen(['a', 'b', 'c', 'd', 'e'])\n//   ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n// const getFirstTen = (l) => {\n  return l.slice(0, 10);\n// };\n\n// Return a list of the last ten numbers in the list.\n//   >>> getLastTen(['a', 'b', 'c', 'd', 'e'])\n//   ['9', '8', '7', '6', '5', '4', '3', '2', '1']\n// const getLastTen = (l) => {\n  return l.slice(-10);\n// };\n\n// Return a list of the first ten numbers in the list, sorted in ascending order.\n//   >>> getFirstTenAscending(['a', 'b', 'c', 'd', 'e'])\n//   ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n// const getFirstTenAscending = (l) => {\n  return getAscending(getFirstTen(l));\n// };\n\n// Return a list of the last ten numbers in the list, sorted in descending order.\n//   >>> getLastTenDescending(['a', 'b', 'c', 'd', 'e'])\n//   ['9', '8', '7', '6', '5', '4', '3', '2', '1']\n// const getLastTenDescending = (l) => {\n  return getDescending(getLastTen(l));\n// };\n\n// Return a list of the first ten numbers in the list, sorted in descending order.\n//   >>> getFirstTenDescending(['a', 'b', 'c', 'd', 'e'])\n//   ['9', '8', '7', '6', '5', '4', '3', '2', '1']\n// const getFirstTenDescending = (l) => {\n  return getDescending(getFirstTen(l));\n// };\n\n// Return a list of the first ten numbers in the list, sorted in ascending order.\n//   >>> getFirstTenAscending(['a', 'b', 'c', 'd', 'e'])\n//   ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n// const getFirstTenAscending = (l) => {\n  return getAscending(getFirstTen(l));\n// };\n\n// Return a list of the first ten words in the list, sorted in ascending order.\n//   >>> getFirstTenWords([\n//  ...     'a',\n//  ...     'b',\n//  ...     'c',\n//  ...     'd',\n//  ...     'e'\n//  ... ])\n//   ['a', 'b', 'c', 'd', 'e']\n// const getFirstTenWords = (l) => {\n  return l.slice(0, 10).map(e => e.split(' ').sort().join(' '));\n// };\n\n// Return a list of the last ten words in the list, sorted in ascending order.\n//   >>> getLastTenWords([\n//  ...     'a',\n//  ...     'b',\n//  ...     'c',\n//  ...     'd',\n//  ...     'e'\n//  ... ])\n//   ['e', 'd', 'c', 'b', 'a']\n// const getLastTen"}
{"task_id": "JavaScript/31", "prompt": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n", "canonical_solution": "    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "partial": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    # print('@@this is the line to split##')\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if a given number is prime, and false otherwise.\n//   >>> isPrime(6)\n//   false\n//   >>> isPrime(101)\n//   true\n//   >>> isPrime(11)\n//   true\n//   >>> isPrime(13441)\n//   true\n//   >>> isPrime(61)\n//   true\n//   >>> isPrime(4)\n//   false\n//   >>> isPrime(1)\n//   false\n// const isPrime = (n) => {\n  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n// }\n\n// Return the sum of all the primes below N.\n// const sumPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (isPrime(i))\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3 and 5 below N.\n// const sumMultiples = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5 and 7 below N.\n// const sumMultiples2 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7 and 11 below N.\n// const sumMultiples3 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11 and 13 below N.\n// const sumMultiples4 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13 and 17 below N.\n// const sumMultiples5 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17 and 19 below N.\n// const sumMultiples6 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0 || i % 19 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17, 19 and 23 below N.\n// const sumMultiples7 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0 || i % 19 == 0 || i % 23 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17, 19, 23 and 29 below N.\n// const sumMultiples8 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0 || i % 19 == 0 || i % 23 == 0 || i % 29 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17, 19, 23, 29 and 31 below N.\n// const sumMultiples9 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0 || i % 19 == 0 || i % 23 == 0 || i % 29 == 0 || i % 31 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37 and 41 below N.\n// const sumMultiples10 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0 || i % 11 == 0 || i % 13 == 0 || i % 17 == 0 || i % 19 == 0 || i % 23 == 0 || i % 29 == 0 || i % 31 == 0 || i % 37 == 0 || i % 41 == 0)\n      sum += i;\n  return sum;\n// }\n\n// Return the sum of all the multiples of 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47 and 49 below N.\n// const sumMultiples11 = (n) => {\n  let sum = 0;\n  for (let i = 2; i < n; i++)\n    if (i % 3 == 0 || i % 5 == 0 || i % 7"}
{"task_id": "JavaScript/32", "prompt": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n", "canonical_solution": "    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "partial": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    # print('@@this is the line to split##')\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "gc": "//   Evaluates polynomial with coefficients xs at point x.\n//   return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n// const poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) === 0) {\n      return center;\n    }\n    else if (poly(xs, center) > 0) {\n      begin = center;\n    }\n    else {\n      end = center;\n    }\n  }\n  return (begin + end) / 2.0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n//   to the values of the corresponding indicies of l, but sorted.\n//   >>> sortThird([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n//   [2, 6, 3, 4, 8, 9, 5]\n// const sortThird = (l) => {\n  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.filter((item, index) => index % 3!= 0);\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n", "canonical_solution": "}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "partial": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return sorted unique elements in a list\n//   >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [0, 2, 3, 5, 9, 123]\n// const unique = (l) => {\n  return Array.from(new Set(l)).sort((a, b) => (a - b));\n  // return Array.from(l).sort((a, b) => (a - b));\n  // return l.filter((v, i, a) => a.indexOf(v) === i).sort((a, b) => a - b);\n}\n\n// Return a list of all the permutations of the supplied list\n//   >>> allPermutations([1, 2, 3])\n//   [\n//     [1, 2, 3],\n//     [1, 3, 2],\n//     [2, 1, 3],\n//     [2, 3, 1],\n//     [3, 1, 2],\n//     [3, 2, 1]\n//   ]\n// const allPermutations = (l) => {\n  const list = unique(l);\n  const permutations = [];\n  const r = [];\n  for (let i = 0; i < list.length; i++) {\n    r = [];\n    for (let j = 0; j < list.length; j++) {\n      r.push(list[j]);\n    }\n    permutations.push(r);\n    r = [];\n  }\n  return permutations;\n}\n\n// Given a list of all the permutations, return the one with the lowest length\n//   >>> minPermutation([1, 2, 3, 4])\n//   [1, 2, 3, 4]\n// const minPermutation = (p) => {\n  // Return the one with the lowest length\n  // return p.sort((a, b) => a.length - b.length)[0];\n  return p.sort((a, b) => a.length - b.length)[0];\n  // return p.sort((a, b) => a - b)[0];\n  // return p.sort((a, b) => a - b)[0];\n}\n\n// Given a list of all the permutations, return the one with the highest length\n//   >>> maxPermutation([1, 2, 3, 4])\n//   [1, 2, 3, 4]\n// const maxPermutation = (p) => {\n  // Return the one with the highest length\n  // return p.sort((a, b) => a.length - b.length)[0];\n  return p.sort((a, b) => a.length - b.length)[0];\n  // return p.sort((a, b) => a - b)[0];\n  // return p.sort((a, b) => a - b)[0];\n}\n\n// Given a list of all the permutations, return the one with the lowest index\n//   >>> minPermutation([1, 2, 3, 4])\n//   [1, 2, 3, 4]\n// const minPermutation = (p) => {\n  // Return the one with the lowest index\n  // return p.sort((a, b) => a.index - b.index)[0];\n  return p.sort((a, b) => a.index - b.index)[0];\n  // return p.sort((a, b) => a - b)[0];\n  // return p.sort((a, b) => a - b)[0];\n}\n\n// Given a list of all the permutations, return the one with the highest index\n//   >>> maxPermutation([1, 2, 3, 4])\n//   [1, 2, 3, 4]\n// const maxPermutation = (p) => {\n  // Return the one with the highest index\n  // return p.sort((a, b) => a.index - b.index)[0];\n  return p.sort((a, b) => a.index - b.index)[0];\n  // return p.sort((a, b) => a - b)[0];\n  // return p.sort((a, b) => a - b)[0];\n}\n\n// Given a list of all the permutations, return the one with the highest index\n//   >>> maxPermutation([1, 2, 3, 4])\n//   [1, 2, 3, 4]\n// const maxPermutation = (p) => {\n  // Return the one with the highest index\n  // return p.sort((a, b) => a.index - b.index)[0];\n  return p.sort((a, b) => a.index - b.index)[0];\n  // return p.sort((a, b) => a - b)[0];\n  // return p.sort((a, b) => a - b)[0];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n", "canonical_solution": "}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "partial": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return Math.max(...l);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return maximum element in the list.\n//   >>> maxElement([1, 2, 3])\n//   3\n//   >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   123\n// const maxElement = (l) => {\n  return Math.max(...l);\n}\n\n// Return minimum element in the list.\n//   >>> minElement([1, 2, 3])\n//   1\n//   >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   -10\n// const minElement = (l) => {\n  return Math.min(...l);\n}\n\n// Return length of the list.\n//   >>> length([1, 2, 3])\n//   3\n//   >>> length([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   11\n// const length = (l) => {\n  return l.length;\n}\n\n// Return sum of all elements in the list.\n//   >>> sum([1, 2, 3])\n//   6\n//   >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//   -10\n// const sum = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n}\n\n// Return a new list that has one element added to the end of the original.\n//   >>> add([1, 2, 3], 4)\n//   [1, 2, 3, 4]\n//   >>> add([1, 2, 3], 4)\n//   [1, 2, 3, 4]\n// const add = (l, x) => [...l, x]\n\n// Return a new list that has one element added to the beginning of the original.\n//   >>> add([1, 2, 3], 0)\n//   [0, 1, 2, 3]\n//   >>> add([1, 2, 3], 0)\n//   [0, 1, 2, 3]\n// const add = (l, x) => [x,...l]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 0, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 0, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n//   >>> add([1, 2, 3], 0, 4)\n//   [4, 1, 2, 3]\n// const add = (l, x, y) => [x,...l, y]\n\n// Return a new list that has one element added to the beginning and end of the original.\n//   >>> add([1, 2,"}
{"task_id": "JavaScript/36", "prompt": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n", "canonical_solution": "  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "partial": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n      # print('@@this is the line to split##')\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "gc": "// Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n//   >>> fizzBuzz(50)\n//   0\n//   >>> fizzBuzz(78)\n//   2\n//   >>> fizzBuzz(79)\n//   3\n// const fizzBuzz = (n) => {\n  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  for (let i = 0; i < ns.length; i++)\n    ans += 1;\n  return ans;\n}\n\n// Return the product of the numbers 1 to n.\n//   >>> fact(0)\n//   1\n//   >>> fact(3)\n//   6\n// const fact = (n) => {\n  var ans = 1;\n  for (let i = 2; i <= n; i++)\n    ans *= i;\n  return ans;\n}\n\n// Return the sum of the numbers 1 to n.\n//   >>> sum(0)\n//   0\n//   >>> sum(4)\n//   9\n// const sum = (n) => {\n  var ans = 0;\n  for (let i = 1; i <= n; i++)\n    ans += i;\n  return ans;\n}\n\n// Return the number of primes between 1 and n.\n//   >>> prime(0)\n//   0\n//   >>> prime(6)\n//   2\n// const prime = (n) => {\n  var ans = 0, num = n + 1;\n  for (let i = 2; i <= n; i++)\n    if (isPrime(i))\n      ans += 1;\n    else\n      num--;\n  return ans;\n}\n\n// Return the number of multiples of 2, 3, and 5 which can be formed with the numbers 1 to n.\n//   >>> multiples(0)\n//   0\n//   >>> multiples(6)\n//   0\n// const multiples = (n) => {\n  var ans = 0;\n  for (let i = 1; i <= n; i++)\n    if (i % 2 == 0)\n      ans += 1;\n    else if (i % 3 == 0)\n      ans += 2;\n    else if (i % 5 == 0)\n      ans += 3;\n  return ans;\n}\n\n// Return the number of perfect numbers less than n.\n//   >>> perfect(0)\n//   0\n//   >>> perfect(9)\n//   0\n// const perfect = (n) => {\n  var ans = 0, num = n + 1;\n  for (let i = 2; i <= n; i++)\n    if (isPerfect(i))\n      ans += 1;\n    else\n      num--;\n  return ans;\n}\n\n// Return the number of abundant numbers less than n.\n//   >>> abundant(0)\n//   0\n//   >>> abundant(9)\n//   0\n// const abundant = (n) => {\n  var ans = 0, num = n + 1;\n  for (let i = 2; i <= n; i++)\n    if (isAbundant(i))\n      ans += 1;\n    else\n      num--;\n  return ans;\n}\n\n// Return the sum of the numbers 1 to n, except that 1 and n are never counted.\n//   >>> sum2(0)\n//   0\n//   >>> sum2(10)\n//   23\n// const sum2 = (n) => {\n  var ans = 0;\n  for (let i = 1; i <= n; i++)\n    if (i!= 1 && i!= n)\n      ans += i;\n  return ans;\n}\n\n// Return the number of composite numbers less than n.\n//   >>> composite(0)\n//   0\n//   >>> composite(10)\n//   4\n// const composite = (n) => {\n  var ans = 0, num = n + 1;\n  for (let i = 2; i <= n; i++)\n    if (isComposite(i))\n      ans += 1;\n    else\n      num--;\n  return ans;\n}\n\n// Return the sum of the numbers 1 to n, except that 1 and n are not included.\n//   >>> sum3(0)\n//   0\n//   >>> sum3(10)\n//   37\n// const sum3 = (n) => {\n  var ans = 0;\n  for (let i = 2; i <= n; i++)\n    if (i!= 1 && i!= n)\n      ans += i;\n  return ans;\n}\n\n// Return the sum of the numbers 1 to n, except that 1 and n are not included.\n//   >>> sum4(0)\n//   0\n//   >>> sum4(10)\n//   23\n// const sum4 = (n) => {\n  var ans = 0;\n  for (let i = 2; i <= n; i++)\n    if (i!= 1 && i!= n)\n      ans += i;\n    else\n      ans -= i;\n  return ans;\n}\n\n// Return the number of abundant numbers less than n.\n//   >>> abundant2(0)\n//   0\n//   >>> abundant2(9)\n//   0\n// const abundant2 = (n) => {\n  var ans = 0, num = n + 1;\n  for (let i = 2; i <= n; i++)\n    if (isAbundant2(i))\n      ans += 1;\n    else\n      num--;\n  return ans;\n}\n\n// Return the sum of the numbers 1 to n, except that 1 and n are not included.\n//   >>> sum5(0)\n//   0\n//   >>> sum5(10)\n//   37\n// const sum5 = (n) => {\n  var ans = 0;\n  for (let i = 2; i <= n; i++)\n    if (i!= 1 && i!= n)\n      ans += i;\n    else\n      ans -= i;\n  return ans;\n}\n\n// Return the sum of the even numbers 1 to n.\n//   >>> sum6(0)\n//   0\n//   >>> sum6(10)\n//   23\n// const sum6 = (n) => {\n  var ans = 0;\n  for (let i = 2; i <= n; i++)\n    if (i % 2 == 0)\n      ans += i;\n  return"}
{"task_id": "JavaScript/37", "prompt": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n", "canonical_solution": "  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "partial": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  # print('@@this is the line to split##')\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "gc": "// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted.\n//   >>> sortEven([1, 2, 3])\n//   [1, 2, 3]\n//   >>> sortEven([5, 6, 3, 4])\n//   [3, 6, 5, 4]\n// const sortEven = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.filter((item, index) => index % 2!= 0);\n\n//   return sorted(l.filter((item, index) => index % 2!= 0),\n//                 (a, b) => (a - b));\n// };\n\n// // This function takes a list l and returns a list l' such that\n// //   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n// //   to the values of the even indicies of l, but sorted in reverse.\n// //   >>> sortEvenReverse([1, 2, 3])\n// //   [3, 2, 1]\n// //   >>> sortEvenReverse([5, 6, 3, 4])\n// //   [4, 3, 6, 5]\n// // const sortEvenReverse = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (b - a));\n  return l.filter((item, index) => index % 2!= 0);\n\n//   return sorted(l.filter((item, index) => index % 2!= 0),\n//                 (a, b) => (b - a));\n// };\n\n// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted in reverse.\n//   >>> sortEvenReverse([1, 2, 3])\n//   [3, 2, 1]\n//   >>> sortEvenReverse([5, 6, 3, 4])\n//   [4, 3, 6, 5]\n// const sortEvenReverse = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (b - a));\n  return l.filter((item, index) => index % 2!= 0);\n\n//   return sorted(l.filter((item, index) => index % 2!= 0),\n//                 (a, b) => (b - a));\n// };\n\n\n// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted in reverse.\n//   >>> sortEvenReverse([1, 2, 3])\n//   [3, 2, 1]\n//   >>> sortEvenReverse([5, 6, 3, 4])\n//   [4, 3, 6, 5]\n// const sortEvenReverse = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.filter((item, index) => index % 2!= 0);\n\n//   return sorted(l.filter((item, index) => index % 2!= 0),\n//                 (a, b) => (a - b));\n// };\n\n// This function takes a list l and returns a list l' such that\n//   l' is identical to l in the odd indicies, while its values at the even indicies are equal\n//   to the values of the even indicies of l, but sorted in reverse.\n//   >>> sortEvenReverse([1, 2, 3])\n//   [3, 2, 1]\n//   >>> sortEvenReverse([5, 6, 3, 4])\n//   [4, 3, 6, 5]\n// const sortEvenReverse = (l) => {\n  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (b - a));\n  return l.filter((item, index) => index % 2!= 0);\n\n//   return sorted(l.filter((item, index) => index % 2!= 0),\n//                 (a, b) => (a - b));\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n", "canonical_solution": "}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "partial": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   returns encoded string by cycling groups of three characters.\n// const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  return encodeCyclic(encodeCyclic(s));\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_reverse = (s) => {\n  return decodeCyclic(s);\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_reversed = (s) => {\n  return decodeCyclic(s);\n}\n\n// Test:\n\nconst cyclic = encodeCyclic('0123');\nconst cyclic_reverse = decodeCyclic('2301');\n\nconsole.log('cyclic:'+ cyclic);\nconsole.log('cyclic_reverse:'+ cyclic_reverse);\n\n// console.log(cyclic_reverse);\n// console.log(cyclic_reverse.length);\n\n/*\n  test:\n  cyclic_reverse: '2301'\n  cyclic_reverse.length: 3\n  cyclic_reverse.indexOf('3'): 1\n  cyclic_reverse.indexOf('1'): -1\n  cyclic_reverse.indexOf('0'): -1\n  cyclic_reverse.indexOf('2'): -1\n  cyclic_reverse.indexOf('4'): -1\n  cyclic_reverse.indexOf('7'): -1\n  cyclic_reverse.indexOf('5'): -1\n  cyclic_reverse.indexOf('6'): -1\n  cyclic_reverse.indexOf('9'): -1\n  cyclic_reverse.indexOf('8'): -1\n  cyclic_reverse.indexOf('A'): -1\n  cyclic_reverse.indexOf('B'): -1\n  cyclic_reverse.indexOf('C'): -1\n  cyclic_reverse.indexOf('D'): -1\n  cyclic_reverse.indexOf('E'): -1\n  cyclic_reverse.indexOf('F'): -1\n  cyclic_reverse.indexOf('G'): -1\n  cyclic_reverse.indexOf('H'): -1\n  cyclic_reverse.indexOf('I'): -1\n  cyclic_reverse.indexOf('J'): -1\n  cyclic_reverse.indexOf('K'): -1\n  cyclic_reverse.indexOf('L'): -1\n  cyclic_reverse.indexOf('M'): -1\n  cyclic_reverse.indexOf('N'): -1\n  cyclic_reverse.indexOf('O'): -1\n  cyclic_reverse.indexOf('P'): -1\n  cyclic_reverse.indexOf('Q'): -1\n  cyclic_reverse.indexOf('R'): -1\n  cyclic_reverse.indexOf('S'): -1\n  cyclic_reverse.indexOf('T'): -1\n  cyclic_reverse.indexOf('U'): -1\n  cyclic_reverse.indexOf('V'): -1\n  cyclic_reverse.indexOf('W'): -1\n  cyclic_reverse.indexOf('X'): -1\n  cyclic_reverse.indexOf('Y'): -1\n  cyclic_reverse.indexOf('Z'): -1\n  cyclic_reverse.indexOf('a'): -1\n  cyclic_reverse.indexOf('b'): -1\n  cyclic_reverse.indexOf('c'): -1\n  cyclic_reverse.indexOf('d'): -1\n  cyclic_reverse.indexOf('e'): -1\n  cyclic_reverse.indexOf('f'): -1\n  cyclic_reverse.indexOf('g'): -1\n  cyclic_reverse.indexOf('h'): -1\n  cyclic_reverse.indexOf('i'): -1\n  cyclic_reverse.indexOf('j'): -1\n  cyclic_reverse.indexOf('k'): -1\n  cyclic_reverse.indexOf('l'): -1\n  cyclic_reverse.indexOf('m'): -1\n  cyclic_reverse.indexOf('n'): -1\n  cyclic_reverse.indexOf('o'): -1\n  cyclic_reverse.indexOf('p'): -1\n  cyclic_reverse.indexOf('q'): -1\n  cyclic_reverse.indexOf('r'): -1\n  cyclic_reverse.indexOf('s'): -1\n  cyclic_reverse.indexOf('t'): -1\n  cyclic_reverse.indexOf('u'): -1\n  cyclic_reverse.indexOf('v'): -1\n  cyclic_reverse.indexOf('w'): -1\n  cyclic_reverse.indexOf('x'): -1\n  cyclic_reverse.indexOf('y'): -1\n  cyclic_reverse.indexOf('z'): -1\n  cyclic_reverse.indexOf('1'): -1\n  cyclic_reverse.indexOf('2'): -1\n  cyclic_reverse.indexOf('3'): -1\n  cyclic_reverse.indexOf('4'): -1\n  cyclic_reverse.indexOf('5'): -1\n  cyclic_reverse.indexOf('6'): -1\n  cyclic_reverse.indexOf('7'): -1\n  cyclic_reverse.indexOf('8'): -1\n  cyclic_reverse.indexOf('9'): -1\n  cyclic_reverse.indexOf('0'): -1\n  cyclic_reverse.indexOf('A'): -1\n"}
{"task_id": "JavaScript/39", "prompt": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n", "canonical_solution": "\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "partial": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  # print('@@this is the line to split##')\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "gc": "//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var fib = function (n) {\n    if (n <= 2)\n      return n;\n    return isPrime(n)? fib(n - 1) + fib(n - 2) : 0;\n  }\n  return fib;\n// };\n//\n//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var fib = function (n) {\n    if (n <= 2)\n      return n;\n    if (isPrime(n))\n      return fib(n - 1) + fib(n - 2);\n    return fib(n - 1);\n  }\n  return fib;\n// };\n//\n//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var fib = function (n) {\n    if (n <= 2)\n      return n;\n    if (isPrime(n))\n      return fib(n - 1) + fib(n - 2);\n    return fib(n - 1);\n  }\n  return fib;\n// };\n//\n//   primeFib returns n-th number that is a Fibonacci number and it's also prime.\n//   >>> primeFib(1)\n//   2\n//   >>> primeFib(2)\n//   3\n//   >>> primeFib(3)\n//   5\n//   >>> primeFib(4)\n//   13\n//   >>> primeFib(5)\n//   89\n// const primeFib = (n) => {\n  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n  var fib = function (n) {\n    if (n <= 2)\n      return n;\n    if (isPrime(n))\n      return fib(n - 1) + fib(n - 2);\n    return fib(n - 1);\n  }\n  return fib;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n", "canonical_solution": "        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "partial": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        # print('@@this is the line to split##')\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "gc": "//   triplesSumToZero takes a list of integers as an input.\n//   it returns true if there are three distinct elements in the list that\n//   sum to zero, and false otherwise.\n// \n//   >>> triplesSumToZero([1, 3, 5, 0])\n//   false\n//   >>> triplesSumToZero([1, 3, -2, 1])\n//   true\n//   >>> triplesSumToZero([1, 2, 3, 7])\n//   false\n//   >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n//   true\n//   >>> triplesSumToZero([1])\n//   false\n// const triplesSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] === 0)\n          return true;\n    return false;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n", "canonical_solution": "}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "partial": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Imagine a road that's a perfectly straight infinitely long line.\n//   n cars are driving left to right;  simultaneously, a different set of n cars\n//   are driving right to left.   The two sets of cars start out being very far from\n//   each other.  All cars move in the same speed.  Two cars are said to collide\n//   when a car that's moving left to right hits a car that's moving right to left.\n//   However, the cars are infinitely sturdy and strong; as a result, they continue moving\n//   in their trajectory as if they did not collide.\n// \n//   This function outputs the number of such collisions.\n// const carRaceCollision = (n) => {\n  return Math.pow(n, 2);\n//   return n * (n + 1) / 2;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n", "canonical_solution": "}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "partial": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map(e => e + 1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Return list with elements incremented by 1.\n//   >>> incrList([1, 2, 3])\n//   [2, 3, 4]\n//   >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//   [6, 4, 6, 3, 4, 4, 10, 1, 124]\n// const incrList = (l) => {\n  return l.map(e => e + 1);\n}\n\nconst isSublistOf = (list, sublist) => {\n  let i = 0, j = 0;\n  while (i < list.length && j < sublist.length) {\n    if (list[i]!== sublist[j]) {\n      return false;\n    }\n    i++;\n    j++;\n  }\n  return i === list.length;\n}\n\nconst find = (sublist, sublistLen, list, listLen) => {\n  if (sublistLen === listLen) {\n    return sublist.length === listLen && isSublistOf(list, sublist);\n  }\n  const start = sublist[sublistLen - 1] + 1;\n  const end = sublist[sublistLen - 1] + 1 + find(sublist, sublistLen - 1, list, listLen);\n  return start < end && isSublistOf(list, sublist.concat(list.slice(start, end)));\n}\n\nconst isPalindrome = (l) => {\n  if (l.length === 0) {\n    return false;\n  }\n  let i = 0, j = l.length - 1;\n  while (i < j) {\n    if (l[i]!== l[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\nconst isPalindromeSublist = (list, sublist) => {\n  return find(sublist, sublist.length, list, list.length);\n}\n\nconst test = () => {\n  const a = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const b = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const c = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const d = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const e = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const f = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const g = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const h = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const i = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const j = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const k = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const l = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const m = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const n = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const o = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const p = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const q = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const r = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const s = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const t = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const u = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const v = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const w = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const x = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const y = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const z = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const aa = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ab = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ac = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ad = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ae = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const af = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ag = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ah = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ai = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const aj = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ak = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const al = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const am = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const an = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ao = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ap = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const aq = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  const ar = [1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/43", "prompt": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n", "canonical_solution": "        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "partial": "/*\n  pairsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        # print('@@this is the line to split##')\n        return true;\n  return false;\n}\n\n", "gc": "//   pairsSumToZero takes a list of integers as an input.\n//   it returns true if there are two distinct elements in the list that\n//   sum to zero, and false otherwise.\n//   >>> pairsSumToZero([1, 3, 5, 0])\n//   false\n//   >>> pairsSumToZero([1, 3, -2, 1])\n//   false\n//   >>> pairsSumToZero([1, 2, 3, 7])\n//   false\n//   >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n//   true\n//   >>> pairsSumToZero([1])\n//   false\n// const pairsSumToZero = (l) => {\n  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true\n  return false\n\n// Given a list of numbers, return all possible combinations of\n// numbers from that list and add them up to get a specific sum.\n// (The answer may be more than one if the sum is not an integer.)\n// const listCombinations = (l, sum) => {\n  for (let i = 1; i <= sum; i++)\n    for (let j = 0; j < l.length; j++)\n      if (i - l[j] >= 0)\n        return [i, l.slice(0, j).concat(l.slice(j + 1)), sum - i]\n  return []\n}\n\n// Given two lists, return the intersection of those lists.\n// The return list is always in sorted order.\n// const listIntersection = (l1, l2) => {\n  for (let i = 0; i < l1.length; i++)\n    for (let j = 0; j < l2.length; j++)\n      if (l1[i] == l2[j])\n        return [l1[i]]\n  return []\n}\n\n// Given a list and an integer, return the list rotated by the given\n// number of places. The list is always in sorted order.\n// const listRotate = (l, n) => {\n  if (n == 0) return l\n  let newList = []\n  for (let i = 0; i < l.length; i++)\n    newList.push(l[l.length - 1 - i])\n  return newList.concat(listRotate(l, n - 1))\n}\n\n// Given a list and an integer k, return kth to last element in the list.\n// The list is always in sorted order.\n// const listKthLast = (l, k) => {\n  if (k < 0) return l[0]\n  if (k >= l.length) return l[l.length - 1]\n  return l[l.length - k - 1]\n}\n\n// Given a list and an integer n, return the nth to last element in the list.\n// The list is always in sorted order.\n// const listNthLast = (l, n) => {\n  if (n < 0) return l[0]\n  if (n >= l.length) return l[l.length - 1]\n  return l[l.length - n - 1]\n}\n\n// Given a list and an integer n, return the nth element in the list.\n// The list is always in sorted order.\n// const listNth = (l, n) => {\n  if (n < 0) return l[0]\n  if (n >= l.length) return l[l.length - 1]\n  return l[n]\n}\n\n// Given a list and two integers, return the list with the first integer\n// removed. The list is always in sorted order.\n// const listRemove = (l, n) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= n)\n      newList.push(l[i])\n  }\n  return newList\n}\n\n// Given a list and two integers, return the list with the second integer\n// removed. The list is always in sorted order.\n// const listRemoveTwo = (l, n) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= n)\n      newList.push(l[i])\n  }\n  return newList\n}\n\n// Given a list and a value, return a list of the indices of all elements\n// equal to that value.\n// const listEqualIndices = (l, val) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] == val)\n      newList.push(i)\n  }\n  return newList\n}\n\n// Given a list and a value, return a list of the indices of all elements\n// less than that value.\n// const listLessThanIndices = (l, val) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < val)\n      newList.push(i)\n  }\n  return newList\n}\n\n// Given a list and a value, return a list of the indices of all elements\n// less than or equal to that value.\n// const listLessThanOrEqualIndices = (l, val) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= val)\n      newList.push(i)\n  }\n  return newList\n}\n\n// Given a list and a value, return a list of the indices of all elements\n// greater than that value.\n// const listGreaterThanIndices = (l, val) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > val)\n      newList.push(i)\n  }\n  return newList\n}\n\n// Given a list and a value, return a list of the indices of all elements\n// greater than or equal to that value.\n// const listGreaterThanOrEqualIndices = (l, val) => {\n  let newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (l"}
{"task_id": "JavaScript/44", "prompt": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n", "canonical_solution": "    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "partial": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    # print('@@this is the line to split##')\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "gc": "// Change numerical base of input number x to base.\n//   return string representation after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 3)\n//   '22'\n//   >>> changeBase(8, 2)\n//   '1000'\n//   >>> changeBase(7, 2)\n//   '111'\n// const changeBase = (x, base) => {\n  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Change number x to base.\n//   return number in base after the conversion.\n//   base numbers are less than 10.\n//   >>> changeBase(8, 2)\n//   4\n//   >>> changeBase(8, 3)\n//   2\n//   >>> changeBase(8, 5)\n//   1\n// const changeBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret = ret * base + x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of digits of x in base.\n//   >>> digits(8)\n//   1\n//   >>> digits(8, 3)\n//   2\n// const digits = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 1 bits in x.\n//   >>> ones(0)\n//   0\n//   >>> ones(1)\n//   1\n// const ones = (x) => {\n  var ret = 0;\n  for (var i = 0; i < x.length; i++) {\n    ret += x[i] % 2;\n  }\n  return ret;\n};\n\n// Return the number of 0 bits in x.\n//   >>> zeros(0)\n//   0\n//   >>> zeros(1)\n//   0\n// const zeros = (x) => {\n  var ret = 0;\n  for (var i = 0; i < x.length; i++) {\n    ret += x[i] % 2;\n  }\n  return ret;\n};\n\n// Return the number of 1s in x modulo base.\n//   >>> onesModBase(8, 3)\n//   1\n//   >>> onesModBase(8, 5)\n//   0\n// const onesModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 0s in x modulo base.\n//   >>> zerosModBase(8, 3)\n//   0\n//   >>> zerosModBase(8, 5)\n//   1\n// const zerosModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 1s in x modulo base.\n//   >>> onesModBase(8, 2)\n//   1\n//   >>> onesModBase(7, 2)\n//   0\n// const onesModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 0s in x modulo base.\n//   >>> zerosModBase(8, 2)\n//   0\n//   >>> zerosModBase(7, 2)\n//   1\n// const zerosModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 1s in x modulo base.\n//   >>> onesModBase(8, 3)\n//   1\n//   >>> onesModBase(8, 5)\n//   0\n// const onesModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n\n// Return the number of 0s in x modulo base.\n//   >>> zerosModBase(8, 3)\n//   0\n//   >>> zerosModBase(8, 5)\n//   1\n// const zerosModBase = (x, base) => {\n  var ret = 0;\n  while (x > 0) {\n    ret += x % base;\n    x = Math.floor(x / base);\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n", "canonical_solution": "}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2.0;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea = (a, h) => {\n  return a * h / 2.0;\n// };\n\n// Given length of a side and high return area for a triangle.\n//   >>> triangleArea(5, 3)\n//   7.5\n// const triangleArea"}
{"task_id": "JavaScript/46", "prompt": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n", "canonical_solution": "                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "partial": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                # print('@@this is the line to split##')\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "gc": "// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fib4(0) -> 0\n//   fib4(1) -> 0\n//   fib4(2) -> 2\n//   fib4(3) -> 0\n//   fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n//   Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n//   >>> fib4(5)\n//   4\n//   >>> fib4(6)\n//   8\n//   >>> fib4(7)\n//   14\n// const fib4 = (n) => {\n  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                 results.at(-3) + results.at(-4));\n  }\n  return results.at(n);\n};\n\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n", "canonical_solution": "    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "partial": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    # print('@@this is the line to split##')\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "gc": "// Return median of elements in the list l.\n//   >>> median([3, 1, 2, 4, 5])\n//   3\n//   >>> median([-10, 4, 6, 1000, 10, 20])\n//   8.0\n// const median = (l) => {\n  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[len / 2];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2;\n//   // Returns median of elements in the list l.\n//   // O(n) runtime complexity.\n//   // O(1) space complexity.\n//   var len = l.length;\n//   if (len % 2 == 1)\n//     return l[len / 2];\n//   else\n//     return (l[len / 2 - 1] + l[len / 2]) / 2;\n// }\n\n// // Finds the median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  a.sort();\n  // Find the median.\n  var len = a.length;\n  if (len % 2 == 1)\n    return a[len / 2];\n  else\n    return (a[len / 2 - 1] + a[len / 2]) / 2;\n}\n\n// // Returns median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  // Sort the array using the insertion sort algorithm.\n  var len = a.length;\n  for (var i = 1; i < len; i++) {\n    for (var j = i; j > 0 && a[j - 1] > a[j]; j--) {\n      var temp = a[j - 1];\n      a[j - 1] = a[j];\n      a[j] = temp;\n    }\n  }\n  // Find the median.\n  if (len % 2 == 1)\n    return a[len / 2];\n  else\n    return (a[len / 2 - 1] + a[len / 2]) / 2;\n}\n\n// // Returns median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  // Sort the array using the selection sort algorithm.\n  var len = a.length;\n  for (var i = 0; i < len - 1; i++) {\n    var minIndex = i;\n    for (var j = i + 1; j < len; j++) {\n      if (a[j] < a[minIndex])\n        minIndex = j;\n    }\n    var temp = a[i];\n    a[i] = a[minIndex];\n    a[minIndex] = temp;\n  }\n  // Find the median.\n  if (len % 2 == 1)\n    return a[len / 2];\n  else\n    return (a[len / 2 - 1] + a[len / 2]) / 2;\n}\n\n// // Returns median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  // Sort the array using the quick sort algorithm.\n  var len = a.length;\n  var i = 0;\n  var j = len - 1;\n  var k = (len - 1) / 2;\n  while (i <= j) {\n    var temp = a[i];\n    a[i] = a[j];\n    a[j] = temp;\n    i++;\n    j--;\n    k--;\n    while (i <= j && a[i] > a[k])\n      k--;\n    if (i <= j) {\n      temp = a[i];\n      a[i] = a[k];\n      a[k] = temp;\n    }\n  }\n  // Find the median.\n  if (len % 2 == 1)\n    return a[len / 2];\n  else\n    return (a[len / 2 - 1] + a[len / 2]) / 2;\n// }\n\n// // Returns median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  // Sort the array using the merge sort algorithm.\n  var len = a.length;\n  var i = 0;\n  var j = len - 1;\n  var k = 0;\n  while (i <= j) {\n    var temp = a[i];\n    a[i] = a[j];\n    a[j] = temp;\n    i++;\n    j--;\n    k++;\n    while (i <= j && a[i] > a[k])\n      k++;\n    if (i <= j) {\n      temp = a[i];\n      a[i] = a[k];\n      a[k] = temp;\n    }\n  }\n  // Find the median.\n  if (len % 2 == 1)\n    return a[len / 2];\n  else\n    return (a[len / 2 - 1] + a[len / 2]) / 2;\n// }\n\n// // Returns median of elements in the array a.\n// const median = (a) => {\n  // Sort the array.\n  // O(n) runtime complexity.\n  // O(1) space complexity.\n  // Sort the array using the merge sort algorithm.\n  var len = a.length;\n  var i = 0;\n  var j = len - 1;\n  var k = 0;\n  while (i <= j) {\n    var temp = a[i];\n    a[i] = a[j];\n    a[j] = temp;\n    i++;\n    j--;\n    k++;\n    while (i <= j && a[i] > a[k])\n      k++;\n    if (i <= j) {\n      temp = a[i];\n      a[i] = a[k];\n      a[k] = temp;\n    }\n  }\n  // Find the median.\n  "}
{"task_id": "JavaScript/48", "prompt": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "partial": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "//   Checks if given string is a palindrome\n//   >>> isPalindrome('')\n//   true\n//   >>> isPalindrome('aba')\n//   true\n//   >>> isPalindrome('aaaaa')\n//   true\n//   >>> isPalindrome('zbcd')\n//   false\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++)\n    if (text[i]!= text.at(-i-1))\n      return false;\n  return true;\n// }\n\n//   >>> isPalindrome('abcd')\n//   false\n\n//   >>> isPalindrome('abc')\n//   true\n//   >>> isPalindrome('ab')\n//   true\n//   >>> isPalindrome('a')\n//   true\n\n//   >>> isPalindrome('abcde')\n//   false\n\n//   >>> isPalindrome('a')\n//   true\n//   >>> isPalindrome('a')\n//   true\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    if (char!== text[text.length-i-1])\n      return false;\n  }\n  return true;\n// }\n\n//   >>> isPalindrome('abcde')\n//   false\n\n//   >>> isPalindrome('abcd')\n//   true\n//   >>> isPalindrome('abcd')\n//   true\n\n//   >>> isPalindrome('a')\n//   true\n//   >>> isPalindrome('a')\n//   true\n\n//   >>> isPalindrome('a')\n//   true\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    let nextChar = text[text.length - i - 1];\n    if (char!== nextChar)\n      return false;\n  }\n  return true;\n// }\n\n//   >>> isPalindrome('a')\n//   true\n//   >>> isPalindrome('a')\n//   true\n\n//   >>> isPalindrome('ab')\n//   false\n\n//   >>> isPalindrome('a')\n//   true\n// const isPalindrome = (text) => {\n  for (let i = 0; i < text.length; i++) {\n    let char = text[i];\n    let nextChar = text[text.length - i - 1];\n    if (char!== nextChar)\n      return false;\n  }\n  return true;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n", "canonical_solution": "    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "partial": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    # print('@@this is the line to split##')\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "gc": "// Return 2^n modulo p (be aware of numerics).\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(0, 101)\n//   1\n//   >>> modp(3, 11)\n//   8\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, p) => {\n  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (ret * 2) % p;\n  return ret;\n// };\n\n// Return a number in [a, b] which is also a divisor of n.\n// If n is divisible by a, return a.\n// Otherwise, return b.\n//   >>> mod(3, 5)\n//   3\n//   >>> mod(1101, 101)\n//   2\n//   >>> mod(100, 101)\n//   2\n// const mod = (n, a, b) => {\n  var m = n;\n  while (m % a!= 0) m = b;\n  return a;\n// };\n\n// Return a number in [a, b] which is also a divisor of n and n is also divisible by a.\n// If n is divisible by a, return a.\n// Otherwise, return b.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   2\n// const modp = (n, a, b) => {\n  var m = n;\n  while (m % a == 0) m = b;\n  return a;\n// };\n\n// Return a number in [a, b] which is also a divisor of n and n is also divisible by b.\n// If n is divisible by b, return b.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b) => {\n  var m = n;\n  while (m % b == 0) m = a;\n  return b;\n// };\n\n// Return a number in [a, b] which is also a divisor of n and n is also divisible by a and b.\n// If n is divisible by a, b, and a + b, return a + b.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b) => {\n  var m = n;\n  while (m % (a + b)!= 0) m = a;\n  return a + b;\n// };\n\n// Return the number in [a, b] which is also a divisor of n and n is also divisible by a and b.\n// If n is divisible by a and b, return a + b.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b) => {\n  var m = n;\n  while (m % (a + b) == 0) m = a;\n  return a + b;\n// };\n\n// Return the number in [a, b] which is also a divisor of n and n is also divisible by a, b, and c.\n// If n is divisible by a, b, and c, return a + b + c.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b, c) => {\n  var m = n;\n  while (m % (a + b + c)!= 0) m = a;\n  return a + b + c;\n// };\n\n// Return the number in [a, b] which is also a divisor of n and n is also divisible by a, b, and c.\n// If n is divisible by a, b, and c, return a + b + c.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b, c) => {\n  var m = n;\n  while (m % (a + b + c) == 0) m = a;\n  return a + b + c;\n// };\n\n// Return the number in [a, b] which is also a divisor of n and n is also divisible by a, b, c, and d.\n// If n is divisible by a, b, c, and d, return a + b + c + d.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b, c, d) => {\n  var m = n;\n  while (m % (a + b + c + d)!= 0) m = a;\n  return a + b + c + d;\n// };\n\n// Return the number in [a, b] which is also a divisor of n and n is also divisible by a, b, c, and d.\n// If n is divisible by a, b, c, and d, return a + b + c + d.\n// Otherwise, return a.\n//   >>> modp(3, 5)\n//   3\n//   >>> modp(1101, 101)\n//   2\n//   >>> modp(100, 101)\n//   1\n// const modp = (n, a, b, c, d) => {\n  var m = n;\n  while (m % (a + b + c + d) == 0) m = a"}
{"task_id": "JavaScript/50", "prompt": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n", "canonical_solution": "  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "partial": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    # print('@@this is the line to split##')\n  )).join(\"\");\n}\n\n", "gc": "//   returns encoded string by shifting every character by 5 in the alphabet.\n// const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad2 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad3 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad4 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad5 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad6 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad7 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad8 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad9 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad10 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad11 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad12 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShiftNoPad13 = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n"}
{"task_id": "JavaScript/51", "prompt": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n", "canonical_solution": "                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "partial": "/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                      # print('@@this is the line to split##')\n                    )\n             .join(\"\")\n}\n\n", "gc": "//   removeVowels is a function that takes string and returns string without vowels.\n//   >>> removeVowels('')\n//   ''\n//   >>> removeVowels(\"abcdef\\nghijklm\")\n//   'bcdf\\nghjklm'\n//   >>> removeVowels('abcdef')\n//   'bcdf'\n//   >>> removeVowels('aaaaa')\n//   ''\n//   >>> removeVowels('aaBAA')\n//   'B'\n//   >>> removeVowels('zbcd')\n//   'zbcd'\n// const removeVowels = (text) => {\n  return text.split(\"\")\n            .filter(s =>![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                     .includes(s.toLowerCase())\n                     .includes(s.toUpperCase()))\n            .join(\"\");\n// }\n\n// const removeVowels = (text) => {\n  return text.replace(/[aeiou]/g, \"\");\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n", "canonical_solution": "      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "partial": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      # print('@@this is the line to split##')\n      return false;\n  return true;\n}\n\n", "gc": "// Return true if all numbers in the list l are below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   true\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   false\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n// Return true if any number in the list l is below threshold t.\n//   >>> belowThreshold([1, 2, 4, 10], 100)\n//   false\n//   >>> belowThreshold([1, 20, 4, 10], 5)\n//   true\n// const belowThreshold = (l, t) => {\n  for (const e of l)\n    if (e < t)\n      return true;\n  return false;\n}\n\n// Return the sum of all the numbers in the list l.\n//   >>> sum([1, 2, 4, 10])\n//   15\n// const sum = (l) => {\n  return l.reduce((acc, n) => acc + n, 0);\n}\n\n// Return the product of all the numbers in the list l.\n//   >>> product([1, 2, 4, 10])\n//   400\n// const product = (l) => {\n  return l.reduce((acc, n) => acc * n, 1);\n}\n\n// Return the largest number in the list l.\n//   >>> largest([1, 2, 4, 10])\n//   10\n// const largest = (l) => {\n  return l.reduce((acc, n) => Math.max(acc, n), 0);\n}\n\n// Return the smallest number in the list l.\n//   >>> smallest([1, 2, 4, 10])\n//   1\n// const smallest = (l) => {\n  return l.reduce((acc, n) => Math.min(acc, n), 0);\n}\n\n// Return the index of the largest number in the list l.\n//   >>> largestIndex([1, 2, 4, 10])\n//   4\n// const largestIndex = (l) => {\n  const arr = l;\n  const idx = arr.indexOf(largest(l));\n  return idx;\n}\n\n// Return the index of the smallest number in the list l.\n//   >>> smallestIndex([1, 2, 4, 10])\n//   1\n// const smallestIndex = (l) => {\n  const arr = l;\n  const idx = arr.indexOf(smallest(l));\n  return idx;\n}\n\n// Return the sum of the squares of the numbers in the list l.\n//   >>> sumOfSquares([1, 2, 4, 10])\n//   55\n// const sumOfSquares = (l) => {\n  const squareSum = (l) => {\n    return l.reduce((acc, n) => acc + n * n, 0);\n  };\n  return squareSum(l);\n}\n\n// Return the mean of the numbers in the list l.\n//   >>> mean([1, 2, 4, 10])\n//   5.5\n// const mean = (l) => {\n  const mean = (l) => {\n    return sum(l) / l.length;\n  };\n  return mean(l);\n}\n\n// Return the mode of the list l.\n//   >>> mode([1, 2, 4, 10])\n//   4\n// const mode = (l) => {\n  const modes = l.map(x => [x]);\n  const max = modes[0];\n  const maxIdx = modes[0].indexOf(max);\n  return modes[0][maxIdx];\n}\n\n// Return the mode of the list l.\n//   >>> mode([1, 2, 4, 10])\n//   4\n// const mode = (l) => {\n  const modes = l.map(x => [x]);\n  const max = modes[0];\n  const maxIdx = modes[0].indexOf(max);\n  return modes[0][maxIdx];\n}\n\n// Return the mode of the list l.\n//   >>> mode([1, 2, 4, 10])\n//   4\n// const mode = (l) => {\n  const modes = l.map(x => [x]);\n  const max = modes[0];\n  const maxIdx = modes[0].indexOf(max);\n  return modes[0][maxIdx];\n}\n\n// Return the mode of the list l.\n//   >>> mode([1, 2, 4, 10])\n//   4\n// const mode = (l) => {\n  const modes = l.map(x => [x]);\n  const max = modes[0];\n  const maxIdx = modes[0].indexOf(max);\n  return modes[0][maxIdx];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n", "canonical_solution": "}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5, 7)\n//   12\n// const add = (x, y) => {\n  return x + y;\n}\n\n// Add two numbers x and y\n//   >>> add(2, 3)\n//   5\n//   >>> add(5"}
{"task_id": "JavaScript/54", "prompt": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n", "canonical_solution": "}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "partial": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//   Check if two words have the same characters.\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n//   true\n//   >>> sameChars('abcd', 'dddddddabc')\n//   true\n//   >>> sameChars('dddddddabc', 'abcd')\n//   true\n//   >>> sameChars('eabcd', 'dddddddabc')\n//   false\n//   >>> sameChars('abcd', 'dddddddabce')\n//   false\n//   >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n//   false\n// const sameChars = (s0, s1) => {\n  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n// };\n// \n// \n// \n// // Part 2\n// \n// \n// \n// // Check if two strings are anagrams.\n// // Anagram means the characters of two strings are not same.\n// // Anagram check only considers the case of ASCII characters.\n// // If a string is anagram, then both strings are anagram.\n// // Anagram check only considers the case of ASCII characters.\n// // For example, anagram check is true for \"abcd\" and \"dcba\", but not for \"abcd\" and \"abcde\".\n// // You can use the sameChars function defined above to judge.\n// // But the check is not exact.\n// // If the input strings are \"abc\" and \"a\", then the check is false.\n// // We can use the sameChars function to judge the input strings.\n// // If the sameChars function is true, then the check is false.\n// // But if the sameChars function is false, then the check is true.\n// // For example, the sameChars function is true for \"abcd\" and \"dcba\", but not for \"abcd\" and \"abcde\".\n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n// // \n//"}
{"task_id": "JavaScript/55", "prompt": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n", "canonical_solution": "    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "partial": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    # print('@@this is the line to split##')\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "gc": "// Return n-th Fibonacci number.\n//   >>> fib(10)\n//   55\n//   >>> fib(1)\n//   1\n//   >>> fib(8)\n//   21\n// const fib = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n-2) + fib(n-1);\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib2(10)\n//   55\n//   >>> fib2(1)\n//   1\n//   >>> fib2(8)\n//   21\n// const fib2 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib3(10)\n//   55\n//   >>> fib3(1)\n//   1\n//   >>> fib3(8)\n//   21\n// const fib3 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib4(10)\n//   55\n//   >>> fib4(1)\n//   1\n//   >>> fib4(8)\n//   21\n// const fib4 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib5(10)\n//   55\n//   >>> fib5(1)\n//   1\n//   >>> fib5(8)\n//   21\n// const fib5 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib6(10)\n//   55\n//   >>> fib6(1)\n//   1\n//   >>> fib6(8)\n//   21\n// const fib6 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n    if (a + b < b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib7(10)\n//   55\n//   >>> fib7(1)\n//   1\n//   >>> fib7(8)\n//   21\n// const fib7 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n    if (a + b < b)\n      break;\n    if (a + b == b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib8(10)\n//   55\n//   >>> fib8(1)\n//   1\n//   >>> fib8(8)\n//   21\n// const fib8 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n    if (a + b < b)\n      break;\n    if (a + b == b)\n      break;\n  }\n  return a;\n// }\n\n// Return n-th Fibonacci number.\n//   >>> fib9(10)\n//   55\n//   >>> fib9(1)\n//   1\n//   >>> fib9(8)\n//   21\n// const fib9 = (n) => {\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  let a = 1, b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a - b;\n    if (a + b == b)\n      break;\n    if (a + b > b)\n      break;\n    if (a + b < b)\n      break;\n    if (a + b == b)\n      break;\n    if (a + b == b)\n      break;\n  }\n  return a;\n// }\n\n// Return n"}
{"task_id": "JavaScript/56", "prompt": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"<\" and \">\".\n//   return false if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"<\")\n//   false\n//   >>> correctBracketing(\"<>\")\n//   false\n//   >>> correctBracketing(\"<<><>>\")\n//   false\n//   >>> correctBracketing(\"><<>\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n// };\n// \n// const checkString = (str) => {\n//   const brackets = str.split(\"\");\n//   const valid = correctBracketing(brackets);\n//   if (!valid)\n//     throw new Error(`invalid brackets in string ${str}`);\n//   return brackets;\n// };\n// \n// const isValid = (str) => {\n//   try {\n//     checkString(str);\n//     return true;\n//   } catch (err) {\n//     return false;\n//   }\n// };\n// \n// \n// const isNotValid = (str) => {\n//   return!isValid(str);\n// };\n// \n// \n// //  var brackets = checkString(\"<>\");\n// //  var valid = correctBracketing(\"<>\");\n// //  console.log(valid);\n// \n// // console.log(isValid(\"<>\"));\n// // console.log(isNotValid(\"<>\"));\n// // console.log(isNotValid(\"<<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console.log(isValid(\"<>\"));\n// // console."}
{"task_id": "JavaScript/57", "prompt": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n", "canonical_solution": "      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "partial": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      # print('@@this is the line to split##')\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "gc": "// Return true is list elements are monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\n// const monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic([1, 2, 4, 20])\n//   true\n//   >>> monotonic([1, 20, 4, 10])\n//   false\n//   >>> monotonic([4, 1, 0, -10])\n//   true\nconst monotonic = (l) => {\n  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2)) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n// Return true if list is monotonically increasing or decreasing.\n//   >>> monotonic(["}
{"task_id": "JavaScript/58", "prompt": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n", "canonical_solution": "      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "partial": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      # print('@@this is the line to split##')\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "gc": "// Return sorted unique common elements for two lists.\n//   >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   [1, 5, 653]\n//   >>> common([5, 3, 2, 8], [3, 2])\n//   [2, 3]\n// \n// const common = (l1, l2) => {\n  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (ret.has(e1) || ret.has(e2))\n        ret.add(e1);\n  return Array.from(ret);\n};\n\n// Return true if the first list is a subsequence of the second.\n//   >>> subsequence([1, 2, 3, 4, 5], [1, 2, 3])\n//   true\n//   >>> subsequence([1, 2, 3, 4, 5], [1, 2, 3, 4])\n//   false\n// \n// const subsequence = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return the largest common element in two lists.\n//   >>> maximum([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n//   653\n//   >>> maximum([5, 3, 2, 8], [3, 2])\n//   2\n// \n// const maximum = (l1, l2) => {\n  var max = 0;\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 > e2)\n        max = Math.max(max, e1);\n      else if (e1 < e2)\n        max = Math.max(max, e2);\n  return max;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2.indexOf(e1)!== i)\n      return false;\n    else\n      i++;\n  return true;\n};\n\n// Return true if the first list is a permutation of the second.\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n//   true\n//   >>> permutation([1, 2, 3, 4, 5], [1, 2, 4, 3, 5])\n//   false\n// \n// const permutation = (l1, l2) => {\n  var i = 0;\n  for (const e1 of l1)\n    if (l2."}
{"task_id": "JavaScript/59", "prompt": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n", "canonical_solution": "  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "partial": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n    # print('@@this is the line to split##')\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "gc": "// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  };\n  var largestPrimeFactor = function (n) {\n    var p = 1;\n    while (n > 1 &&!isPrime(n)) {\n      p = n;\n      n = n / 2;\n    }\n    return p;\n  };\n  return largestPrimeFactor(n);\n}\n\n// Return the largest prime factor of n. Assume n > 1 and is a prime.\n//   >>> largestPrimeFactor(13195)\n//   29\n// const largestPrimeFactor = (n) => {\n  var largestPrimeFactor = function (n) {\n    var i = 2;\n    while (i * i <= n) {\n      if (n % i == 0) {\n        return i;\n      }\n      i++;\n    }\n    return 1;\n  };\n  return largestPrimeFactor(n);\n}\n\n// Return the largest prime factor of n. Assume n > 1 and is a prime.\n//   >>> largestPrimeFactor(2048)\n//   2\n// const largestPrimeFactor = (n) => {\n  var largestPrimeFactor = function (n) {\n    var i = 2;\n    while (i * i <= n) {\n      if (n % i == 0) {\n        return i;\n      }\n      i++;\n    }\n    return 1;\n  };\n  return largestPrimeFactor(n);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n", "canonical_solution": "}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "partial": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return n * (n + 1) / 2;\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// sumToN is a function that sums numbers from 1 to n.\n//   >>> sumToN(30)\n//   465\n//   >>> sumToN(100)\n//   5050\n//   >>> sumToN(5)\n//   15\n//   >>> sumToN(10)\n//   55\n//   >>> sumToN(1)\n//   1\n// const sumToN = (n) => {\n  return n * (n + 1) / 2;\n// };\n\n// sumFromN is a function that sums numbers from 1 to n.\n//   >>> sumFromN(5)\n//   6\n//   >>> sumFromN(10)\n//   45\n// const sumFromN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n// };\n\n// sumFrom1ToN is a function that sums numbers from 1 to n.\n//   >>> sumFrom1ToN(5)\n//   6\n//   >>> sumFrom1ToN(10)\n//   45\n// const sumFrom1ToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n// };\n\n// sumFromNToN is a function that sums numbers from n to n.\n//   >>> sumFromNToN(5)\n//   6\n//   >>> sumFromNToN(10)\n//   45\n// const sumFromNToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += i;\n  }\n  return sum;\n// };\n\n// sumOfSquares is a function that sums the squares of numbers from 1 to n.\n//   >>> sumOfSquares(5)\n//   25\n//   >>> sumOfSquares(10)\n//   400\n// const sumOfSquares = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFrom1ToN is a function that sums the squares of numbers from 1 to n.\n//   >>> sumOfSquaresFrom1ToN(5)\n//   25\n//   >>> sumOfSquaresFrom1ToN(10)\n//   400\n// const sumOfSquaresFrom1ToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFromNToN is a function that sums the squares of numbers from n to n.\n//   >>> sumOfSquaresFromNToN(5)\n//   25\n//   >>> sumOfSquaresFromNToN(10)\n//   400\n// const sumOfSquaresFromNToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFrom1ToN.\n//   >>> sumOfSquaresFrom1ToN(5)\n//   25\n//   >>> sumOfSquaresFrom1ToN(10)\n//   400\n// const sumOfSquaresFrom1ToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFromNToN.\n//   >>> sumOfSquaresFromNToN(5)\n//   25\n//   >>> sumOfSquaresFromNToN(10)\n//   400\n// const sumOfSquaresFromNToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresToN\n//   >>> sumOfSquaresToN(5)\n//   25\n//   >>> sumOfSquaresToN(10)\n//   400\n// const sumOfSquaresToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresToN.\n//   >>> sumOfSquaresToN(5)\n//   25\n//   >>> sumOfSquaresToN(10)\n//   400\n// const sumOfSquaresToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFrom1ToN.\n//   >>> sumOfSquaresFrom1ToN(5)\n//   25\n//   >>> sumOfSquaresFrom1ToN(10)\n//   400\n// const sumOfSquaresFrom1ToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFromNToN.\n//   >>> sumOfSquaresFromNToN(5)\n//   25\n//   >>> sumOfSquaresFromNToN(10)\n//   400\n// const sumOfSquaresFromNToN = (n) => {\n  let sum = 0;\n  for (let i = n; i >= 1; i--) {\n    sum += Math.pow(i, 2);\n  }\n  return sum;\n// };\n\n// sumOfSquaresFrom1ToN.\n//   >>> sumOfSquaresFrom1ToN(5)\n//   25\n//   >>> sumOfSquaresFrom1ToN(10)\n//   400\n// const sumOfSquaresFrom1ToN = (n) => {\n  let sum = 0;\n  for"}
{"task_id": "JavaScript/61", "prompt": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n", "canonical_solution": "      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "partial": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      # print('@@this is the line to split##')\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "gc": "// brackets is a string of \"(\" and \")\".\n//   return true if every opening bracket has a corresponding closing bracket.\n// \n//   >>> correctBracketing(\"(\")\n//   false\n//   >>> correctBracketing(\"()\")\n//   true\n//   >>> correctBracketing(\"(()())\")\n//   true\n//   >>> correctBracketing(\")(()\")\n//   false\n// const correctBracketing = (brackets) => {\n  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n// };\n// \n// var testCorrectBracketing = () => {\n//   var brackets = [\"()\", \"(()())\", \"()()\", \"()()()\"];\n//   var correct = correctBracketing(brackets);\n//   return \"The brackets are \" + correct;\n// };\n// \n// console.log(testCorrectBracketing());\n// \n// \n// \n// var testBracketCount = () => {\n//   var brackets = [\"()\", \"(()())\", \"()()\", \"()()()\"];\n//   var correct = correctBracketing(brackets);\n//   return correct? \"correct\" : \"wrong\";\n// };\n// \n// console.log(testBracketCount());\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 + ....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n", "canonical_solution": "}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "partial": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// xs represent coefficients of a polynomial.\n//   xs[0] + xs[1] * x + xs[2] * x^2 +....\n//    Return derivative of this polynomial in the same form.\n//   >>> derivative([3, 1, 2, 4, 5])\n//   [1, 4, 12, 20]\n//   >>> derivative([1, 2, 3])\n//   [2, 6]\n// const derivative = (xs) => {\n  return xs.map((x, i) => x * i).slice(1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n", "canonical_solution": "    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "partial": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    # print('@@this is the line to split##')\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "gc": "// The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n// const fibfib = (n) => {\n  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// Your task is to implement the FibFib function.\n//   fibfib(n)\n//   should return the nth element of the fibfib number sequence.\n//   The fibfib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the nth element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n\n//  The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the nth element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n\n//  The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the nth element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n\n//  The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the nth element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n\n//  The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n//   fibfib(0) == 0\n//   fibfib(1) == 0\n//   fibfib(2) == 1\n//   fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n//   Please write a function to efficiently compute the nth element of the fibfib number sequence.\n//   >>> fibfib(1)\n//   0\n//   >>> fibfib(5)\n//   4\n//   >>> fibfib(8)\n//   24\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n", "canonical_solution": "  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "partial": "/*Write a function vowelsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  # print('@@this is the line to split##')\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "gc": "// Write a function vowelsCount which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> vowelsCount(\"abcde\")\n//   2\n//   >>> vowelsCount(\"ACEDY\")\n//   3\n// const vowelsCount = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n}\n\n// Write a function consonantsCount which takes a string representing\n//   a word as input and returns the number of consonants in the string.\n//   Consonants in this case are 'b', 'd', 'f', 'g', 'h', 'k', 'l','m',\n//   'n', 'p', 'r', 't', 'v', 'w', and 'x'. Here, 'y' is also a\n//   consonant, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> consonantsCount(\"abcd\")\n//   2\n//   >>> consonantsCount(\"ABEDY\")\n//   4\n// const consonantsCount = (s) => {\n  var consonants = \"bcdfghkmnpqrtvwx\";\n  var n_consonants = s.split('').reduce((prev, item) => {\n    return prev + (consonants.includes(item));\n  }, 0);\n  return n_consonants;\n}\n\n// Write a function countVowels which takes a string representing\n//   a word as input and returns the number of vowels in the string.\n//   Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n//   vowel, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> countVowels(\"abcde\")\n//   2\n//   >>> countVowels(\"ACEDY\")\n//   3\n// const countVowels = (s) => {\n  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  return n_vowels;\n}\n\n// Write a function countConsonants which takes a string representing\n//   a word as input and returns the number of consonants in the string.\n//   Consonants in this case are 'b', 'd', 'f', 'g', 'h', 'k', 'l','m',\n//   'n', 'p', 'r', 't', 'v', 'w', and 'x'. Here, 'y' is also a\n//   consonant, but only when it is at the end of the given word.\n// \n//   Example:\n//   >>> countConsonants(\"abcd\")\n//   2\n//   >>> countConsonants(\"ABEDY\")\n//   4\n// const countConsonants = (s) => {\n  var consonants = \"bcdfghkmnpqrtvwx\";\n  var n_consonants = s.split('').reduce((prev, item) => {\n    return prev + (consonants.includes(item));\n  }, 0);\n  return n_consonants;\n}\n\nfunction main() {\n  var word = \"abcd\";\n  console.log(vowelsCount(word));\n  console.log(consonantsCount(word));\n  console.log(countVowels(word));\n  console.log(countConsonants(word));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n", "canonical_solution": "  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "partial": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n    # print('@@this is the line to split##')\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "gc": "// Circular shift the digits of the integer x, shift the digits right by shift\n//   and return the result as a string.\n//   If shift > number of digits, return digits reversed.\n//   >>> circularShift(12, 1)\n//   \"21\"\n//   >>> circularShift(12, 2)\n//   \"12\"\n// const circularShift = (x, shift) => {\n  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  return s.substr(shift).concat(s.substr(0, shift));\n// }\n// console.log(circularShift(12, 1));\n// console.log(circularShift(12, 2));\n// console.log(circularShift(12, 3));\n// console.log(circularShift(12, 4));\n// console.log(circularShift(12, 5));\n// console.log(circularShift(12, 6));\n// console.log(circularShift(12, 7));\n// console.log(circularShift(12, 8));\n// console.log(circularShift(12, 9));\n// console.log(circularShift(12, 10));\n// console.log(circularShift(12, 11));\n// console.log(circularShift(12, 12));\n// console.log(circularShift(12, 13));\n// console.log(circularShift(12, 14));\n// console.log(circularShift(12, 15));\n// console.log(circularShift(12, 16));\n// console.log(circularShift(12, 17));\n// console.log(circularShift(12, 18));\n// console.log(circularShift(12, 19));\n// console.log(circularShift(12, 20));\n// console.log(circularShift(12, 21));\n// console.log(circularShift(12, 22));\n// console.log(circularShift(12, 23));\n// console.log(circularShift(12, 24));\n// console.log(circularShift(12, 25));\n// console.log(circularShift(12, 26));\n// console.log(circularShift(12, 27));\n// console.log(circularShift(12, 28));\n// console.log(circularShift(12, 29));\n// console.log(circularShift(12, 30));\n// console.log(circularShift(12, 31));\n// console.log(circularShift(12, 32));\n// console.log(circularShift(12, 33));\n// console.log(circularShift(12, 34));\n// console.log(circularShift(12, 35));\n// console.log(circularShift(12, 36));\n// console.log(circularShift(12, 37));\n// console.log(circularShift(12, 38));\n// console.log(circularShift(12, 39));\n// console.log(circularShift(12, 40));\n// console.log(circularShift(12, 41));\n// console.log(circularShift(12, 42));\n// console.log(circularShift(12, 43));\n// console.log(circularShift(12, 44));\n// console.log(circularShift(12, 45));\n// console.log(circularShift(12, 46));\n// console.log(circularShift(12, 47));\n// console.log(circularShift(12, 48));\n// console.log(circularShift(12, 49));\n// console.log(circularShift(12, 50));\n// console.log(circularShift(12, 51));\n// console.log(circularShift(12, 52));\n// console.log(circularShift(12, 53));\n// console.log(circularShift(12, 54));\n// console.log(circularShift(12, 55));\n// console.log(circularShift(12, 56));\n// console.log(circularShift(12, 57));\n// console.log(circularShift(12, 58));\n// console.log(circularShift(12, 59));\n// console.log(circularShift(12, 60));\n// console.log(circularShift(12, 61));\n// console.log(circularShift(12, 62));\n// console.log(circularShift(12, 63));\n// console.log(circularShift(12, 64));\n// console.log(circularShift(12, 65));\n// console.log(circularShift(12, 66));\n// console.log(circularShift(12, 67));\n// console.log(circularShift(12, 68));\n// console.log(circularShift(12, 69));\n// console.log(circularShift(12, 70));\n// console.log(circularShift(12, 71));\n// console.log(circularShift(12, 72));\n// console.log(circularShift(12, 73));\n// console.log(circularShift(12, 74));\n// console.log(circularShift(12, 75));\n// console.log(circularShift(12, 76));\n// console.log(circularShift(12, 77));\n// console.log(circularShift(12, 78));\n// console.log(circularShift(12, 79));\n// console.log(circularShift(12, 80));\n// console.log(circularShift(12, 81));\n// console.log(circularShift(12, 82));\n// console.log(circularShift(12, 83));\n// console.log(circularShift(12, 84));\n// console.log(circularShift(12, 85));\n// console.log(circularShift(12, 86));\n// console.log(circularShift(12, 87));\n// console.log(circularShift(12, 88));\n// console.log(circularShift(12, 89));\n// console.log(circularShift(12, 90));\n// console.log(circularShift(12, 91));\n// console.log(circularShift(12, 92));\n// console.log(circularShift(12, 93));\n// console.log(circularShift(12, 94));\n// console.log(circularShift(12, 95));\n// console.log(circularShift(12, 96));\n// console.log(circularShift(12, 97));\n// console.log(circularShift(12, 98));\n// console.log(circularShift(12, 99));\n//"}
{"task_id": "JavaScript/66", "prompt": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n", "canonical_solution": "    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "partial": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    # print('@@this is the line to split##')\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "gc": "// Task\n//   Write a function that takes a string as input and returns the sum of the upper characters only'\n//   ASCII codes.\n// \n//   Examples:\n//       digitSum(\"\") => 0\n//       digitSum(\"abAB\") => 131\n//       digitSum(\"abcCd\") => 67\n//       digitSum(\"helloE\") => 69\n//       digitSum(\"woArBld\") => 131\n//       digitSum(\"aAaaaXa\") => 153\n// const digitSum = (s) => {\n  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    if (ord_char >= 97 && ord_char <= 122) {\n      return prev + char.charCodeAt(0);\n    }\n    return prev;\n  }, 0);\n}\n\n// Task\n//   Write a function that takes a string as input and returns the number of occurrences of a substring\n//   in the string.\n// \n//   Examples:\n//       occurence(\"\") => 0\n//       occurence(\"a\") => 1\n//       occurence(\"aabb\") => 2\n//       occurence(\"abca\") => 2\n// const occurence = (s, substr) => {\n  if (s == '') return 0;\n  let sub = substr.split('');\n  let prev = 0;\n  for (let i = 0; i < s.length; i++) {\n    let ord_char = s.charCodeAt(i);\n    for (let j = 0; j < sub.length; j++) {\n      if (ord_char == sub[j].charCodeAt(0)) {\n        prev += 1;\n      }\n    }\n  }\n  return prev;\n}\n\n// Task\n//   Write a function that takes a string as input and returns the index of the first character in the string\n//   that matches the index of the substring.\n// \n//   Examples:\n//       firstIndex(\"\") => -1\n//       firstIndex(\"a\") => -1\n//       firstIndex(\"aabb\") => 0\n//       firstIndex(\"abca\") => 0\n// const firstIndex = (s, substr) => {\n  if (s == '') return -1;\n  let sub = substr.split('');\n  for (let i = 0; i < s.length; i++) {\n    let ord_char = s.charCodeAt(i);\n    for (let j = 0; j < sub.length; j++) {\n      if (ord_char == sub[j].charCodeAt(0)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n// Task\n//   Write a function that takes a string as input and returns the index of the last character in the string\n//   that matches the index of the substring.\n// \n//   Examples:\n//       lastIndex(\"\") => -1\n//       lastIndex(\"a\") => -1\n//       lastIndex(\"aabb\") => 3\n//       lastIndex(\"abca\") => 3\n// const lastIndex = (s, substr) => {\n  if (s == '') return -1;\n  let sub = substr.split('');\n  for (let i = s.length - 1; i >= 0; i--) {\n    let ord_char = s.charCodeAt(i);\n    for (let j = 0; j < sub.length; j++) {\n      if (ord_char == sub[j].charCodeAt(0)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n// Task\n//   Write a function that takes a string as input and returns the index of the first character in the string\n//   that does not match the index of the substring.\n// \n//   Examples:\n//       noMatchIndex(\"\") => -1\n//       noMatchIndex(\"a\") => -1\n//       noMatchIndex(\"aabb\") => -1\n//       noMatchIndex(\"abca\") => 1\n// const noMatchIndex = (s, substr) => {\n  if (s == '') return -1;\n  let sub = substr.split('');\n  for (let i = 0; i < s.length; i++) {\n    let ord_char = s.charCodeAt(i);\n    for (let j = 0; j < sub.length; j++) {\n      if (ord_char!= sub[j].charCodeAt(0)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\n// Task\n//   Write a function that takes a string as input and returns the index of the last character in the string\n//   that does not match the index of the substring.\n// \n//   Examples:\n//       noMatchIndex(\"\") => -1\n//       noMatchIndex(\"a\") => -1\n//       noMatchIndex(\"aabb\") => -1\n//       noMatchIndex(\"abca\") => 2\n// const noMatchIndex = (s, substr) => {\n  if (s == '') return -1;\n  let sub = substr.split('');\n  for (let i = s.length - 1; i >= 0; i--) {\n    let ord_char = s.charCodeAt(i);\n    for (let j = 0; j < sub.length; j++) {\n      if (ord_char!= sub[j].charCodeAt(0)) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n", "canonical_solution": "      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "partial": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      # print('@@this is the line to split##')\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "gc": "//   In this task, you will be given a string that represents a number of apples and oranges\n//   that are distributed in a basket of fruit this basket contains\n//   apples, oranges, and mango fruits. Given the string that represents the total number of\n//   the oranges and apples and an integer that represent the total number of the fruits\n//   in the basket return the number of the mango fruits in the basket.\n//   for examble:\n//   fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n//   fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n//   fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n//   fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n// const fruitDistribution = (s, n) => {\n  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(i);\n  let result = 0;\n  for (const i of lis)\n    result += Number(i) * (lis.length - i);\n  return result;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n", "canonical_solution": "  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "partial": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  # print('@@this is the line to split##')\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "gc": "//   \"Given an array representing a branch of a tree that has non-negative integer nodes\n//   your task is to pluck one of the nodes and return it.\n//   The plucked node should be the node with the smallest even value.\n//   If multiple nodes with the same smallest even value are found return the node that has smallest index.\n// \n//   The plucked node should be returned in a list, [ smalest_value, its index ],\n//   If there are no even values or the given array is empty, return [].\n// \n//   Example 1:\n//       Input: [4,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 2:\n//       Input: [1,2,3]\n//       Output: [2, 1]\n//       Explanation: 2 has the smallest even value, and 2 has the smallest index.\n// \n//   Example 3:\n//       Input: []\n//       Output: []\n// \n//   Example 4:\n//       Input: [5, 0, 3, 0, 4, 2]\n//       Output: [0, 1]\n//       Explanation: 0 is the smallest value, but  there are two zeros,\n//                    so we will choose the first zero, which has the smallest index.\n// \n//   Constraints:\n//       * 1 <= nodes.length <= 10000\n//       * 0 <= node.value\n// const pluck = (arr) => {\n  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  var min = evens[0];\n  var minIndex = 0;\n  for (var i = 0; i < evens.length; i++) {\n    if (min > evens[i]) {\n      min = evens[i];\n      minIndex = i;\n    }\n  }\n  return [min, minIndex];\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n", "canonical_solution": "  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "partial": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  # print('@@this is the line to split##')\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "gc": "//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency greater than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of frq) {\n    if (i > 0 && frq[i] >= i) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n\n//   You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n//   zero, and has a frequency less than or equal to the value of the integer itself.\n//   The frequency of an integer is the number of times it appears in the list.\n//   If no such a value exist, return -1.\n//   Examples:\n//       search([4, 1, 2, 2, 3, 1])) == 2\n//       search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == -1\n//       search([5, 5, 4, 4, 4])) == -1\n// const search = (lst) => {\n  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (const i of frq) {\n    if (i > 0 && frq[i] < i) {\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n", "canonical_solution": "    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "partial": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    # print('@@this is the line to split##')\n    sw = !sw;\n  }\n  return res;\n}\n\n", "gc": "//   Given list of integers, return list in strange order.\n//   Strange sorting, is when you start with the minimum value,\n//   then maximum of the remaining integers, then minimum and so on.\n// \n//   Examples:\n//   strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n//   strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n//   strangeSortList([]) == []\n// const strangeSortList = (lst) => {\n  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw =!sw;\n  }\n  return res;\n// };\n\n//   https://www.hackerrank.com/challenges/strange-sort\n\n/*\n   https://www.hackerrank.com/challenges/strange-sort/problem\n   Given a list of strings, return the list in a strange order.\n   Strange sorting, is when you start with the minimum value,\n   then maximum of the remaining integers, then minimum and so on.\n   \n   Examples:\n   strangeSortList([\"hello\", \"world\", \"hi\"]) == [\"hi\", \"world\", \"hello\"]\n   strangeSortList([\"hello\", \"world\", \"hi\", \"bye\"]) == [\"bye\", \"hi\", \"world\", \"hello\"]\n   strangeSortList([]) == []\n   strangeSortList([\"hello\", \"world\", \"hi\", \"bye\"]) == [\"bye\", \"hi\", \"world\", \"hello\"]\n   strangeSortList([\"hello\", \"world\", \"hi\", \"bye\", \"hello\"]) == [\"bye\", \"hi\", \"world\", \"hello\", \"hello\"]\n   \n   https://www.hackerrank.com/challenges/strange-sort/test-cases\n   [\n      [\"hello\", \"world\", \"hi\"],\n      [\"hello\", \"world\", \"hi\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\"],\n      [],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\", \"hello\", \"bye\"]\n   ]\n*/\n\n/*\n   https://www.hackerrank.com/challenges/strange-sort/test-cases\n   [\n      [\"hello\", \"world\", \"hi\"],\n      [\"hello\", \"world\", \"hi\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\"],\n      [],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\", \"hello\"],\n      [\"hello\", \"world\", \"hi\", \"bye\", \"hello\", \"hi\", \"bye\", \"hello\", \"bye\", \"hello\", \"bye\"]\n   ]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n", "canonical_solution": "  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "partial": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  # print('@@this is the line to split##')\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "gc": "//   Given the lengths of the three sides of a triangle. Return the area of\n//   the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n//   Otherwise return -1\n//   Three sides make a valid triangle when the sum of any two sides is greater\n//   than the third side.\n//   Example:\n//   triangleArea(3, 4, 5) == 6.00\n//   triangleArea(1, 2, 10) == -1\n// const triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\nvar triangleArea = (a, b, c) => {\n  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  return Math.sqrt(s * (s - a) * (s - b) * (s - c));\n}\n\n// Test case:\n// triangleArea(4, 5, 6) == 60\n// triangleArea(1, 2, 10) == -1\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n", "canonical_solution": "      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "partial": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      # print('@@this is the line to split##')\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "gc": "//   Write a function that returns true if the object q will fly, and false otherwise.\n//   The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n// \n//   Example:\n//   willItFly([1, 2], 5) ➞ false\n//   # 1+2 is less than the maximum possible weight, but it's unbalanced.\n// \n//   willItFly([3, 2, 3], 1) ➞ false\n//   # it's balanced, but 3+2+3 is more than the maximum possible weight.\n// \n//   willItFly([3, 2, 3], 9) ➞ true\n//   # 3+2+3 is less than the maximum possible weight, and it's balanced.\n// \n//   willItFly([3], 5) ➞ true\n//   # 3 is less than the maximum possible weight, and it's balanced.\n// const willItFly = (q, w) => {\n  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i]!= q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\nvar q = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552,"}
{"task_id": "JavaScript/73", "prompt": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n", "canonical_solution": "      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "partial": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      # print('@@this is the line to split##')\n      ans++;\n  return ans;\n}\n\n", "gc": "//   Given an array arr of integers, find the minimum number of elements that\n//   need to be changed to make the array palindromic. A palindromic array is an array that\n//   is read the same backwards and forwards. In one change, you can change one element to any other element.\n// \n//   For example:\n//   smallestChange([1,2,3,5,4,7,9,6]) == 4\n//   smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n//   smallestChange([1, 2, 3, 2, 1]) == 0\n// const smallestChange = (arr) => {\n  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i]!= arr.at(-i - 1))\n      ans += 1;\n  return ans;\n}\n\nfunction smallestChange(arr) {\n  var ans = 0;\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i]!= arr[arr.length - 1 - i])\n      ans += 1;\n  }\n  return ans;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n", "canonical_solution": "    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "partial": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    # print('@@this is the line to split##')\n    return lst1;\n  else\n    return lst2;\n}\n\n", "gc": "//   Write a function that accepts two lists of strings and returns the list that has\n//   total number of chars in the all strings of the list less than the other list.\n// \n//   if the two lists have the same number of chars, return the first list.\n// \n//   Examples\n//   totalMatch([], []) ➞ []\n//   totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n//   totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n//   totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n//   totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n// const totalMatch = (lst1, lst2) => {\n  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n//   }\n//   \n//   console.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\n//   console.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\n//   console.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5']));\n//   console.log(totalMatch(['4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4'], ['1', '2', '3', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '"}
{"task_id": "JavaScript/75", "prompt": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n", "canonical_solution": "      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "partial": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      # print('@@this is the line to split##')\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "gc": "// Write a function that returns true if the given number is the multiplication of 3 prime numbers\n//   and false otherwise.\n//   Knowing that (a) is less then 100.\n//   Example:\n//   isMultiplyPrime(30) == true\n//   30 = 2 * 3 * 5\n// const isMultiplyPrime = (a) => {\n  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i * j > 101) break;\n      if (!isPrime(i * j)) break;\n    }\n    if (i * j > 101) return false;\n  }\n  return true;\n}\n\n// Write a function that returns the prime number with the largest product of its divisors\n//   Example:\n//   largestProductOfDivisors(20) == 10\n//   20 = 2 * 3 * 5\n// const largestProductOfDivisors = (n) => {\n  var largestProductOfDivisors = function (n) {\n    let largest = 1;\n    let i = 2;\n    while (i < n) {\n      if (n % i == 0) {\n        largest = Math.max(largest, n / i);\n      }\n      i++;\n    }\n    return largest;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let largest = largestProductOfDivisors(i);\n    if (i * largest > 100) break;\n  }\n  return largest;\n}\n\n// Write a function that returns the prime number with the largest sum of its divisors\n//   Example:\n//   largestSumOfDivisors(20) == 12\n//   20 = 2 * 3 * 5\n// const largestSumOfDivisors = (n) => {\n  var largestSumOfDivisors = function (n) {\n    let largest = 1;\n    let i = 2;\n    while (i < n) {\n      if (n % i == 0) {\n        largest = Math.max(largest, n / i + 1);\n      }\n      i++;\n    }\n    return largest;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let largest = largestSumOfDivisors(i);\n    if (i * largest > 100) break;\n  }\n  return largest;\n}\n\n// Write a function that returns the prime number with the largest sum of its factors\n//   Example:\n//   largestSumOfFactors(20) == 2\n//   20 = 2 * 3 * 5\n// const largestSumOfFactors = (n) => {\n  var largestSumOfFactors = function (n) {\n    let largest = 1;\n    let i = 2;\n    while (i < n) {\n      if (n % i == 0) {\n        largest = Math.max(largest, n / i);\n      }\n      i++;\n    }\n    return largest;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let largest = largestSumOfFactors(i);\n    if (i * largest > 100) break;\n  }\n  return largest;\n}\n\n// Write a function that returns true if the given number is a palindrome\n//   Example:\n//   isPalindrome(20) == true\n//   20 = 2 * 3 * 5\n// const isPalindrome = (n) => {\n  var isPalindrome = function (n) {\n    return n === parseInt(n.toString().split('').reverse().join(''));\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPalindrome(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (i * j > 100) break;\n      if (!isPalindrome(i * j)) break;\n    }\n    if (i * j > 100) return false;\n  }\n  return true;\n}\n\n// Write a function that returns the sum of the digits in the given number\n//   Example:\n//   sumOfDigits(20) == 9\n//   20 = 2 * 3 * 5\n// const sumOfDigits = (n) => {\n  var sumOfDigits = function (n) {\n    return n.toString().split('').reduce((a, b) => {\n      return a + Number(b);\n    }, 0);\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let sum = sumOfDigits(i);\n    if (i * sum > 100) break;\n  }\n  return sum;\n}\n\n// Write a function that returns true if the given number is a permutation of the digits\n//   Example:\n//   isPermutation(20) == true\n//   20 = 2 * 3 * 5\n// const isPermutation = (n) => {\n  var isPermutation = function (n) {\n    return n.toString().split('').sort().join('') === n;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let permutation = isPermutation(i);\n    if (i * permutation > 100) break;\n  }\n  return true;\n}\n\n// Write a function that returns true if the given number is a permutation of the digits\n//   Example:\n//   isPermutation(20) == true\n//   20 = 2 * 3 * 5\n// const isPermutation = (n) => {\n  var isPermutation = function (n) {\n    return n.toString().split('').sort().join('') === n;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    let permutation = isPermutation(i);\n    if (i * permutation > 100) break;\n  }\n  return true;\n}\n\n// Write a function that returns true if the given number is a permutation of the digits\n//   Example:\n//   isPermutation(20) == true\n//   20 = 2 * 3 * 5\n// const isPermutation = (n) => {\n  var isPermutation = function (n) {\n    "}
{"task_id": "JavaScript/76", "prompt": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n", "canonical_solution": "  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "partial": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  # print('@@this is the line to split##')\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "gc": "// Your task is to write a function that returns true if a number x is a simple\n//   power of n and false in other cases.\n//   x is a simple power of n if n**int=x\n//   For example:\n//   isSimplePower(1, 4) => true\n//   isSimplePower(2, 2) => true\n//   isSimplePower(8, 2) => true\n//   isSimplePower(3, 2) => false\n//   isSimplePower(3, 1) => false\n//   isSimplePower(5, 3) => false\n// const isSimplePower = (x, n) => {\n  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (x > 1)\n    {\n      power *= n;\n      if (x % n == 0)\n        return false;\n      x /= n;\n    }\n  return true;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n", "canonical_solution": "  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "partial": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = Math.abs(a);\n  # print('@@this is the line to split##')\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "gc": "//   Write a function that takes an integer a and returns true\n//   if this ingeger is a cube of some integer number.\n//   Note: you may assume the input is always valid.\n//   Examples:\n//   iscube(1) ==> true\n//   iscube(2) ==> false\n//   iscube(-1) ==> true\n//   iscube(64) ==> true\n//   iscube(0) ==> true\n//   iscube(180) ==> false\n// const iscube = (a) => {\n  a = Math.abs(a);\n  return a === 1 || a === 4 || a === 9 || a === 16 || a === 25 || a === 36 || a === 49 || a === 64 || a === 81 || a === 100 || a === 121 || a === 144 || a === 169 || a === 196 || a === 225 || a === 256 || a === 289 || a === 324 || a === 361 || a === 400 || a === 441 || a === 464 || a === 489 || a === 516 || a === 545 || a === 564 || a === 581 || a === 600 || a === 621 || a === 644 || a === 665 || a === 686 || a === 709 || a === 732 || a === 745 || a === 764 || a === 781 || a === 800 || a === 821 || a === 844 || a === 857 || a === 870 || a === 881 || a === 894 || a === 907 || a === 922 || a === 936 || a === 949 || a === 962 || a === 975 || a === 988 || a === 1009 || a === 1022 || a === 1035 || a === 1048 || a === 1059 || a === 1070 || a === 1081 || a === 1092 || a === 1105 || a === 1126 || a === 1137 || a === 1148 || a === 1159 || a === 1170 || a === 1181 || a === 1192 || a === 1205 || a === 1218 || a === 1231 || a === 1244 || a === 1255 || a === 1268 || a === 1279 || a === 1290 || a === 1303 || a === 1314 || a === 1325 || a === 1336 || a === 1347 || a === 1358 || a === 1369 || a === 1380 || a === 1391 || a === 1402 || a === 1413 || a === 1424 || a === 1435 || a === 1446 || a === 1457 || a === 1468 || a === 1479 || a === 1490 || a === 1501 || a === 1512 || a === 1523 || a === 1534 || a === 1545 || a === 1556 || a === 1567 || a === 1578 || a === 1589 || a === 1600 || a === 1611 || a === 1622 || a === 1633 || a === 1644 || a === 1655 || a === 1666 || a === 1677 || a === 1688 || a === 1699 || a === 1710 || a === 1721 || a === 1732 || a === 1743 || a === 1754 || a === 1765 || a === 1776 || a === 1787 || a === 1798 || a === 1809 || a === 1820 || a === 1831 || a === 1842 || a === 1853 || a === 1864 || a === 1875 || a === 1886 || a === 1897 || a === 1898 || a === 1899 || a === 1900 || a === 1901 || a === 1902 || a === 1903 || a === 1904 || a === 1905 || a === 1906 || a === 1907 || a === 1908 || a === 1909 || a === 1910 || a === 1911 || a === 1912 || a === 1913 || a === 1914 || a === 1915 || a === 1916 || a === 1917 || a === 1918 || a === 1919 || a === 1920 || a === 1921 || a === 1922 || a === 1923 || a === 1924 || a === 1925 || a === 1926 || a === 1927 || a === 1928 || a === 1929 || a === 1930 || a === 1931 || a === 1932 || a === 1933 || a === 1934 || a === 1935 || a === 1936 || a === 1937 || a === 1938 || a === 1939 || a === 1940 || a === 1941 || a === 1942 || a === 1943 || a === 1944 || a === 1945 || a === 1946 || a === 1947 || a === 1948 || a === 1949 || a === 1950 || a === 1951 || a === 1952 || a === 1953 || a === 1954 || a === 1955 || a === 1956 || a === 1957 || a === 1958 || a === 1959 || a === 1960 || a === 1961 || a === 1962 || a === 1963 || a === 1964 || a === 1965 || a === 1966 || a === 1967 || a === 1968 || a === 1969 || a === 1970 || a === 1971 || a === 1972 || a === 1973 || a === 1974 || a === 1975 || a === 1976 || a === 1977 || a === 1978 || a === 1979 || a === 1980 || a === 1981 || a === 1982 || a === 1983 || a === 1984 || a === 1985 || a === 1986 || a === 1987 || a === 1988 || a === 1989 || a === 1990 || a === 1991 || a === 1992 || a === 1993 || a === 1994 || a === 1995 || a === 1996 || a === 1997 || a === 1998 || a === 1999 || a === 2000 || a === 2001 || a === 2002 || a === 2003 || a === 2004 || a === 2005 || a === 2006 || a === 2007 || a === 2008 || a === 2009 || a === 2010 || a === 2011 || a === 2012 || a === 2013 || a === 2014 || a === 2015 || a === 2016 || a === 2017 || a === 2018 || a === 2019 || a === 2020 || a === 2021 || a === 2022 || a === 2023 || a === 2024 || a === 2025 || a === 2026 || a === 2027 || a === 2028 || a === 2029 || a === 2030 || a === 2031 || a === 2032 || a === 2033 || a === 2034 || a === 2035 || a === 2036 || a === 2037 || a === 2038 || a === 2039 || a === 2040 || a === 2041 || a === 2042 || a === 2043 || a === 2044 || a === 2045 || a === 2046 || a === 2047 || a === 2048 || a === 2049 || a === 2050 || a === 2051 || a === 2052 || a === 2053 || a === 2054 || a === 2055 || a === 2056 || a === 2057 || a === 2058 || a === 2059 || a === 2060 || a === 2061 || a === 2062 || a === 2063 || a === 2064 || a === 2065 || a === 2066 || a === 2067 || a === 2068 || a === 2069 || a === 2070 || a === 2071 || a === 2072 || a === 2073 || a === 2074 || a === 2075 || a === 2076 || a === 2077 || a === 2078"}
{"task_id": "JavaScript/78", "prompt": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n", "canonical_solution": "    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "partial": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    # print('@@this is the line to split##')\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "gc": "// You have been tasked to write a function that receives\n//   a hexadecimal number as a string and counts the number of hexadecimal\n//   digits that are primes (prime number=== or a prime=== is a natural number\n//   greater than 1 that is not a product of two smaller natural numbers).\n//   Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n//   Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n//   So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n//   B (=decimal 11)=== D (=decimal 13).\n//   Note: you may assume the input is always correct or empty string===\n//   and symbols A===B===C===D===E===F are always uppercase.\n//   Examples:\n//   For num = \"AB\" the output should be 1.\n//   For num = \"1077E\" the output should be 2.\n//   For num = \"ABED1A33\" the output should be 4.\n//   For num = \"123456789ABCDEF0\" the output should be 6.\n//   For num = \"2020\" the output should be 2.\n// const hexKey = (num) => {\n  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n  {\n    if (primes.indexOf(num[i])!== -1)\n    {\n      total += 1;\n    }\n  }\n  return total;\n// }\n\nconsole.log(calcHexadecimalPrime(num));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n", "canonical_solution": "}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "partial": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// You will be given a number in decimal form and your task is to convert it to\n//   binary format. The function should return a string, with each character representing a binary\n//   number. Each character in the string will be '0' or '1'.\n// \n//   There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n//   The extra characters are there to help with the format.\n// \n//   Examples:\n//   decimalToBinary(15)   # returns \"db1111db\"\n//   decimalToBinary(32)   # returns \"db100000db\"\n// const decimalToBinary = (decimal) => {\n  return \"db\" + decimal.toString(2) + \"db\";\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n", "canonical_solution": "    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "partial": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    # print('@@this is the line to split##')\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "gc": "// You are given a string s.\n//   Your task is to check if the string is happy or not.\n//   A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n//   For example:\n//   isHappy(a) => false\n//   isHappy(aa) => false\n//   isHappy(abcd) => true\n//   isHappy(aabb) => false\n//   isHappy(adb) => true\n//   isHappy(xyy) => false\n// const isHappy = (s) => {\n  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] === s[i + 1] && s[i] === s[i + 2])\n      return false;\n  return true;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n", "canonical_solution": "      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "partial": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      # print('@@this is the line to split##')\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "gc": "// It is the last week of the semester and the teacher has to give the grades\n//   to students. The teacher has been making her own algorithm for grading.\n//   The only problem is, she has lost the code she used for grading.\n//   She has given you a list of GPAs for some students and you have to write\n//   a function that can output a list of letter grades using the following table:\n//            GPA       |    Letter grade\n//             4.0                A+\n//           > 3.7                A\n//           > 3.3                A-\n//           > 3.0                B+\n//           > 2.7                B\n//           > 2.3                B-\n//           > 2.0                C+\n//           > 1.7                C\n//           > 1.3                C-\n//           > 1.0                D+\n//           > 0.7                D\n//           > 0.0                D-\n//             0.0                E\n// \n// \n//   Example:\n//   numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n// const numericalLetterGrade = (grades) => {\n  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "partial": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "gc": "// Write a function that takes a string and returns true if the string\n//   length is a prime number or false otherwise\n//   Examples\n//   primeLength('Hello') == true\n//   primeLength('abcdcba') == true\n//   primeLength('kittens') == true\n//   primeLength('orange') == false\n// const primeLength = (string) => {\n  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (string.indexOf(i.toString()) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\n// Write a function that takes a number and returns the string of the digits in the number\n//   Examples\n//   digitString(1) == '1'\n//   digitString(2) == '2'\n//   digitString(3) == '3'\n//   digitString(4) == '4'\n//   digitString(5) == '5'\n//   digitString(6) == '6'\n// const digitString = (number) => {\n  let num = number.toString()\n  return num\n}\n\n// Write a function that takes two strings and returns true if the first string\n//   is a permutation of the second string\n//   Examples\n//   permutation('a', 'a') == true\n//   permutation('a', 'b') == true\n//   permutation('a', 'c') == false\n//   permutation('abc', 'abc') == true\n//   permutation('abc', 'cde') == false\n//   permutation('abc', 'abd') == true\n//   permutation('ab', 'cd') == false\n// const permutation = (stringA, stringB) => {\n  let len = stringA.length\n  let set = setA = new Set()\n  for (let i = 0; i < len; i++) {\n    set.add(stringA[i])\n  }\n  for (let i = 0; i < len; i++) {\n    if (!set.has(stringB[i])) {\n      return false\n    }\n  }\n  return true\n}\n\n// Write a function that takes a string and returns the string reversed\n//   Examples\n//   reverse('hello') == 'olleh'\n//   reverse('hello world') == 'world hello'\n//   reverse('hello world') == 'olleh world'\n// const reverse = (string) => {\n  let len = string.length\n  let newString = ''\n  for (let i = len - 1; i >= 0; i--) {\n    newString += string[i]\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns the string reversed,\n//   except the first and last character are the same\n//   Examples\n//   reverse('hello world') == 'olleh world'\n// const reverse = (string) => {\n  let len = string.length\n  let newString = ''\n  for (let i = len - 1; i >= 0; i--) {\n    newString += string[i]\n  }\n  if (string.charAt(0) === newString.charAt(0)) {\n    newString = newString.substring(1, len)\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns the string reversed,\n//   except the last character is the same\n//   Examples\n//   reverse('hello world') == 'world hello'\n// const reverse = (string) => {\n  let len = string.length\n  let newString = ''\n  for (let i = len - 1; i >= 0; i--) {\n    newString += string[i]\n  }\n  if (string.charAt(len - 1) === newString.charAt(len - 1)) {\n    newString = newString.substring(0, len - 1)\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns a string made up of\n//   the first and last character repeated (n times)\n//   Examples\n//   repeat('hello', 2) == 'hellohello'\n//   repeat('hello', 3) == 'hellohellohello'\n// const repeat = (string, n) => {\n  let len = string.length\n  let newString = ''\n  for (let i = 0; i < len; i++) {\n    newString += string[i]\n  }\n  for (let i = 0; i < n; i++) {\n    newString += newString\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns a string made up of\n//   the first and last character repeated, but with a different character\n//   Examples\n//   repeat('hello', 2) == 'hllo'\n//   repeat('hello', 3) == 'hllohello'\n// const repeat = (string, n) => {\n  let len = string.length\n  let newString = ''\n  for (let i = 0; i < len; i++) {\n    newString += string[i]\n  }\n  for (let i = 0; i < n; i++) {\n    newString += string.charAt(0)\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns a string made up of\n//   the first and last character repeated, but with a different character\n//   Examples\n//   repeat('hello', 2) == 'hllo'\n//   repeat('hello', 3) == 'hllohello'\n// const repeat = (string, n) => {\n  let len = string.length\n  let newString = ''\n  for (let i = 0; i < len; i++) {\n    newString += string[i]\n  }\n  for (let i = 0; i < n; i++) {\n    newString += string.charAt(len - 1)\n  }\n  return newString\n}\n\n// Write a function that takes a string and returns a string made up of\n//   the first and last character repeated, but with a different character\n//   Examples\n//   repeat('hello', 2) == 'hllo'\n//   repeat('hello', 3) == 'hllohello'\n// const repeat = (string, n) => {\n  let len = string.length\n  let newString = ''\n  for (let i = 0; i < len; i++) {\n    newString += string[i]\n  }\n  for"}
{"task_id": "JavaScript/83", "prompt": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n", "canonical_solution": "    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "partial": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    # print('@@this is the line to split##')\n    t = t * 10\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, return the count of the numbers of n-digit\n//   positive integers that start or end with 1.\n// const startsOneEnds = (n) => {\n  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t += n - i\n  }\n  return t\n}\n\nconsole.log(startsOneEnds(2))\nconsole.log(startsOneEnds(3))\nconsole.log(startsOneEnds(4))\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(6))\nconsole.log(startsOneEnds(7))\nconsole.log(startsOneEnds(8))\nconsole.log(startsOneEnds(9))\nconsole.log(startsOneEnds(10))\nconsole.log(startsOneEnds(11))\nconsole.log(startsOneEnds(12))\nconsole.log(startsOneEnds(13))\nconsole.log(startsOneEnds(14))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(16))\nconsole.log(startsOneEnds(17))\nconsole.log(startsOneEnds(18))\nconsole.log(startsOneEnds(19))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(21))\nconsole.log(startsOneEnds(22))\nconsole.log(startsOneEnds(23))\nconsole.log(startsOneEnds(24))\nconsole.log(startsOneEnds(25))\nconsole.log(startsOneEnds(26))\nconsole.log(startsOneEnds(27))\nconsole.log(startsOneEnds(28))\nconsole.log(startsOneEnds(29))\nconsole.log(startsOneEnds(30))\nconsole.log(startsOneEnds(31))\nconsole.log(startsOneEnds(32))\nconsole.log(startsOneEnds(33))\nconsole.log(startsOneEnds(34))\nconsole.log(startsOneEnds(35))\nconsole.log(startsOneEnds(36))\nconsole.log(startsOneEnds(37))\nconsole.log(startsOneEnds(38))\nconsole.log(startsOneEnds(39))\nconsole.log(startsOneEnds(40))\nconsole.log(startsOneEnds(41))\nconsole.log(startsOneEnds(42))\nconsole.log(startsOneEnds(43))\nconsole.log(startsOneEnds(44))\nconsole.log(startsOneEnds(45))\nconsole.log(startsOneEnds(46))\nconsole.log(startsOneEnds(47))\nconsole.log(startsOneEnds(48))\nconsole.log(startsOneEnds(49))\nconsole.log(startsOneEnds(50))\nconsole.log(startsOneEnds(51))\nconsole.log(startsOneEnds(52))\nconsole.log(startsOneEnds(53))\nconsole.log(startsOneEnds(54))\nconsole.log(startsOneEnds(55))\nconsole.log(startsOneEnds(56))\nconsole.log(startsOneEnds(57))\nconsole.log(startsOneEnds(58))\nconsole.log(startsOneEnds(59))\nconsole.log(startsOneEnds(60))\nconsole.log(startsOneEnds(61))\nconsole.log(startsOneEnds(62))\nconsole.log(startsOneEnds(63))\nconsole.log(startsOneEnds(64))\nconsole.log(startsOneEnds(65))\nconsole.log(startsOneEnds(66))\nconsole.log(startsOneEnds(67))\nconsole.log(startsOneEnds(68))\nconsole.log(startsOneEnds(69))\nconsole.log(startsOneEnds(70))\nconsole.log(startsOneEnds(71))\nconsole.log(startsOneEnds(72))\nconsole.log(startsOneEnds(73))\nconsole.log(startsOneEnds(74))\nconsole.log(startsOneEnds(75))\nconsole.log(startsOneEnds(76))\nconsole.log(startsOneEnds(77))\nconsole.log(startsOneEnds(78))\nconsole.log(startsOneEnds(79))\nconsole.log(startsOneEnds(80))\nconsole.log(startsOneEnds(81))\nconsole.log(startsOneEnds(82))\nconsole.log(startsOneEnds(83))\nconsole.log(startsOneEnds(84))\nconsole.log(startsOneEnds(85))\nconsole.log(startsOneEnds(86))\nconsole.log(startsOneEnds(87))\nconsole.log(startsOneEnds(88))\nconsole.log(startsOneEnds(89))\nconsole.log(startsOneEnds(90))\nconsole.log(startsOneEnds(91))\nconsole.log(startsOneEnds(92))\nconsole.log(startsOneEnds(93))\nconsole.log(startsOneEnds(94))\nconsole.log(startsOneEnds(95))\nconsole.log(startsOneEnds(96))\nconsole.log(startsOneEnds(97))\nconsole.log(startsOneEnds(98))\nconsole.log(startsOneEnds(99))\nconsole.log(startsOneEnds(100))\nconsole.log(startsOneEnds(101))\nconsole.log(startsOneEnds(102))\nconsole.log(startsOneEnds(103))\nconsole.log(startsOneEnds(104))\nconsole.log(startsOneEnds(105))\nconsole.log(startsOneEnds(106))\nconsole.log(startsOneEnds(107))\nconsole.log(startsOneEnds(108))\nconsole.log(startsOneEnds(109))\nconsole.log(startsOneEnds(110))\nconsole.log(startsOneEnds(111))\nconsole.log(startsOneEnds(112"}
{"task_id": "JavaScript/84", "prompt": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n", "canonical_solution": "    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "partial": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    # print('@@this is the line to split##')\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "gc": "// Given a positive integer N, return the total sum of its digits in binary.\n//    \n//   Example\n//       For N = 1000, the sum of digits will be 1 the output should be \"1\".\n//       For N = 150, the sum of digits will be 6 the output should be \"110\".\n//       For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//    \n//   Variables:\n//       @N integer\n//            Constraints: 0 ≤ N ≤ 10000.\n//   Output:\n//        a string of binary number\n// const solve = (N) => {\n  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = Math.floor(N / 10)\n  }\n  return t\n}\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n", "canonical_solution": "    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "partial": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return t\n}\n\n", "gc": "// Given a non-empty list of integers lst. add the even elements that are at odd indices..\n// \n// \n//   Examples:\n//       add([4, 2, 6, 7]) ==> 2 \n// const add = (lst) => {\n  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\nconsole.log(add([1, 2, 3, 4, 5]))\nconsole.log(add([2, 4, 6, 8]))\nconsole.log(add([7, 9, 11]))\nconsole.log(add([0, 1, 2, 3]))\nconsole.log(add([3, 5, 7, 9]))\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\nconsole.log(add([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n", "canonical_solution": "      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "partial": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a string and returns an ordered version of it.\n//   Ordered version of string, is a string where all words (separated by space)\n//   are replaced by a new word where all the characters arranged in\n//   ascending order based on ascii value.\n//   Note: You should keep the order of words and blank spaces in the sentence.\n// \n//   For example:\n//   antiShuffle('Hi') returns 'Hi'\n//   antiShuffle('hello') returns 'ehllo'\n//   antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n// const antiShuffle = (s) => {\n  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  return arr.join(' ')\n}\n\n// \n// const antiShuffle = (s) => {\n//   let arr = s.split(/\\s/)\n//   for (let i = 0; i < arr.length; i++) {\n//     for (let j = 0; j < arr[i].length; j++) {\n//       let ind = j\n//       for (let k = j + 1; k < arr[i].length; k++) {\n//         if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n//           ind = k\n//         }\n//       }\n//       if (ind > j) {\n//         arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n//       }\n//     }\n//   }\n//   return arr.join(' ')\n// }\n\n// // console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(antiShuffle('Hello World!!!'))\n// console.log(anti"}
{"task_id": "JavaScript/87", "prompt": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n", "canonical_solution": "      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "partial": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n        # print('@@this is the line to split##')\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You are given a 2 dimensional data, as a nested lists,\n//   which is similar to matrix, however, unlike matrices,\n//   each row may contain a different number of columns.\n//   Given lst, and integer x, find integers x in the list,\n//   and return list of tuples, [(x1, y1), (x2, y2)...] such that\n//   each tuple is a coordinate - (row, columns), starting with 0.\n//   Sort coordinates initially by rows in ascending order.\n//   Also, sort coordinates of the row by columns in descending order.\n//    \n//   Examples:\n//   getRow([\n//     [1,2,3,4,5,6],\n//     [1,2,3,4,1,6],\n//     [1,2,3,4,5,1]\n//   ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n//   getRow([], 1) == []\n//   getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n// const getRow = (lst, x) => {\n  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t.sort((a, b) => a[0] - b[0] || b[1] - a[1])\n}\n\n// Given a string s and a dictionary of words dict,\n// return a list of all words in the string.\n// A word is any non-empty string of characters.\n// The word does not contain any duplicate characters.\n// For example, given s = \"ABCD\", dict = {\"ABC\": 0, \"ACD\": 1, \"BCD\": 2},\n// Return [\"ABC\", \"ACD\", \"ADC\", \"BAC\", \"BAD\", \"BCA\", \"BCD\"].\n// Note:\n//\n// The same word in the dictionary may be reused multiple times in the string.\n// All occurrences must be at least 1 character apart in the string.\n// The string may contain letters other than the dictionary’s words.\n// The dictionary may contain duplicate words.\n// Example 1:\n//\n// Input: s = \"abcd\", dict = {\"abcd\": 0, \"a\": 1, \"bcd\": 2, \"cd\": 3}\n// Output: [\"abcd\", \"bcd\", \"acd\"]\n// Example 2:\n//\n// Input: s = \"abcd\", dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4}\n// Output: [\"abcd\", \"bd\", \"acd\", \"d\", \"ad\", \"cb\", \"bc\"]\n// Example 3:\n//\n// Input: s = \"abcde\", dict = {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5}\n// Output: [\"abcde\", \"abe\", \"acd\", \"ade\", \"bce\", \"bdd\", \"bda\", \"bdc\", \"cde\"]\n// Note:\n//\n// All the strings in the input will only contain letters a through z\n// and the dictionary will not contain duplicate words.\n// The input will be a string and the output will be a list of strings.\n// The input string and the dictionary will not be more than 100 characters long.\n// The input dictionary will contain between 1 and 50 characters.\n// The length of the input string will not exceed 10000.\n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n// \n"}
{"task_id": "JavaScript/88", "prompt": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n", "canonical_solution": "      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n        # print('@@this is the line to split##')\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "gc": "//   Given an array of non-negative integers, return a copy of the given array after sorting,\n//   you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n//   or sort it in descending order if the sum( first index value, last index value) is even.\n// \n//   Note:\n//   * don't change the given array.\n// \n//   Examples:\n//   * sortArray([]) => []\n//   * sortArray([5]) => [5]\n//   * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n//   * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n// const sortArray = (array) => {\n  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    if (ind!= j) {\n      let tmp = arr[j]\n      arr[j] = arr[ind]\n      arr[ind] = tmp\n    }\n  }\n  return arr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n", "canonical_solution": "    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "partial": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    # print('@@this is the line to split##')\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "// Create a function encrypt that takes a string as an argument and\n//   returns a string encrypted with the alphabet being rotated. \n//   The alphabet should be rotated in a manner such that the letters \n//   shift down by two multiplied to two places.\n//   For example:\n//   encrypt('hi') returns 'lm'\n//   encrypt('asdfghjkl') returns 'ewhjklnop'\n//   encrypt('gf') returns 'kj'\n//   encrypt('et') returns 'ix'\n// const encrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Decrypt the function with the rotate method\nconst decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 4\n    if (p < 0) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Decrypt the function with the rotate method\nconst decrypt = (s) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() - 4\n    if (p < 0) { p += 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n// Check the function\nconst encrypt = (s) => {\n  console.log('Encrypt:'+ encrypt(s))\n}\n\nencrypt('hi')\nencrypt('asdfghjkl')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('kf')\nencrypt('jf')\nencrypt('gf')\nencrypt('et')\nencrypt('"}
{"task_id": "JavaScript/90", "prompt": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n", "canonical_solution": "  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "partial": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n    # print('@@this is the line to split##')\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "gc": "//   You are given a list of integers.\n//   Write a function nextSmallest() that returns the 2nd smallest element of the list.\n//   Return null if there is no such element.\n//    \n//   nextSmallest([1, 2, 3, 4, 5]) == 2\n//   nextSmallest([5, 1, 4, 3, 2]) == 2\n//   nextSmallest([]) == null\n//   nextSmallest([1, 1]) == null\n// const nextSmallest = (lst) => {\n  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== null) {\n      return arr[i]\n    }\n  }\n  return null\n}\n\n// const nextSmallest = (lst) => {\n//   let arr = lst\n//   let ind = 0\n//   for (let j = 1; j < arr.length; j++) {\n//     if (arr[j] < arr[ind]) {\n//       ind = j\n//     }\n//   }\n//   let tmp = arr[ind]\n//   arr[ind] = arr[0]\n//   arr[0] = tmp\n//   return arr\n// }\n\n// const nextSmallest = (lst) => {\n//   let arr = lst\n//   let ind = 0\n//   for (let j = 1; j < arr.length; j++) {\n//     if (arr[j] < arr[ind]) {\n//       ind = j\n//     }\n//   }\n//   return arr[ind]\n// }\n\n// const nextSmallest = (lst) => {\n//   let arr = lst\n//   let ind = 0\n//   while (ind + 1 < arr.length && arr[ind + 1] > arr[ind]) {\n//     ind++\n//   }\n//   let tmp = arr[ind]\n//   arr[ind] = arr[0]\n//   arr[0] = tmp\n//   return arr\n// }\n\nconst nextSmallest = (lst) => {\n  let ind = 0\n  let tmp = lst[0]\n  for (let j = 1; j < lst.length; j++) {\n    if (lst[j] < lst[ind]) {\n      ind = j\n    }\n  }\n  return lst[ind]\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\nconsole.log(nextSmallest([]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n", "canonical_solution": "        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "partial": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        # print('@@this is the line to split##')\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "gc": "//   You'll be given a string of words, and your task is to count the number\n//   of boredoms. A boredom is a sentence that starts with the word \"I\".\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBored(\"Hello world\")\n//   0\n//   >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n//   1\n// const isBored = (S) => {\n  let t = 0\n  if (S[0] == 'I' && S[1] =='') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n// Part 2\n//   The next function takes a string and a string of words, and returns\n//   the number of sentences that start with a word in the words string.\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBoredSentence(\"I love this weather\", \"sun\", \"cloud\")\n//   1\n// const isBoredSentence = (S, w) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        for (let j = 0; j < w.length; j++) {\n          if (S[i + 4 + j] == w[j]) {\n            t++\n          }\n        }\n      }\n    }\n  }\n  return t\n}\n\nconst words = [\n  'hello', 'world', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m',\n  'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'\n]\n\n// Part 3\n//   The next function takes a string and a string of words, and returns\n//   the number of sentences that start with a word in the words string.\n//   Sentences are delimited by '.', '?' or '!'.\n//   \n//   For example:\n//   >>> isBoredSentence2(\"I love this weather\", \"sun\", \"cloud\")\n//   1\n// const isBoredSentence2 = (S, w) => {\n  let t = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] =='' && S[i + 2] == 'I' && S[i + 3] =='') {\n        for (let j = 0; j < w.length; j++) {\n          if (S[i + 4 + j] == w[j]) {\n            t++\n          }\n        }\n      }\n    }\n  }\n  return t\n}\n\nconst S = 'The sky is blue. The sun is shining. I love this weather'\nconst w ='sun'\n\nconsole.log(isBored(S), isBoredSentence(S, w), isBoredSentence2(S, w))\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n", "canonical_solution": "  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "partial": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n    # print('@@this is the line to split##')\n  }\n  return false\n}\n\n", "gc": "// Create a function that takes 3 numbers.\n//   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n//   Returns false in any other cases.\n//   Examples\n//   anyInt(5, 2, 7) ➞ true\n//   anyInt(3, 2, 2) ➞ false\n//   anyInt(3, -2, 1) ➞ true\n//   anyInt(3.6, -2.2, 2) ➞ false\n// const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n// anyInt(2, -1, -1)\n// → true\n\n// anyInt(4, 3, 3)\n// → true\n\n// anyInt(3.6, -2.2, 1)\n// → true\n\n// anyInt(1.9, 2.9, 2.9)\n// → false\n\n// const anyInt = (x, y, z) => {\n  // Create a function that takes 3 numbers.\n  //   Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  //   Returns false in any other cases.\n  //   Examples\n  //   anyInt(5, 2, 7) ➞ true\n  //   anyInt(3, 2, 2) ➞ false\n  //   anyInt(3, -2, 1) ➞ true\n  //   anyInt(3.6, -2.2, 2) ➞ false\n  //   anyInt(3.6, -2.2, 1) ➞ true\n  //   anyInt(1.9, 2.9, 2.9) ➞ false\n  // const anyInt = (x, y, z) => {\n  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n", "canonical_solution": "    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "partial": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    # print('@@this is the line to split##')\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "gc": "//   Write a function that takes a message, and encodes in such a \n//   way that it swaps case of all letters, replaces all vowels in \n//   the message with the letter that appears 2 places ahead of that \n//   vowel in the english alphabet. \n//   Assume only letters. \n//    \n//   Examples:\n//   >>> encode('test')\n//   'TGST'\n//   >>> encode('This is a message')\n//   'tHKS KS C MGSSCGG'\n// const encode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n//   Write a function that takes a message, and decodes it in such a way \n//   that it swaps case of all letters, replaces all vowels in the message \n//   with the letter that appears 2 places behind that vowel in the english \n//   alphabet. \n//   Assume only letters. \n// const decode = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n//   Write a function that takes a message, and encodes it in such a way \n//   that it replaces vowels with '_' and swap case of all letters. \n//   Assume only letters. \n// const encode_2 = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n//   Write a function that takes a message, and decodes it in such a way \n//   that it replaces vowels with '_' and swap case of all letters. \n//   Assume only letters. \n// const decode_2 = (message) => {\n  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\nconst message = 'This is a message'\nconst expected = 'T_is__a_message'\nconst expected_2 = 'This_is_a_message'\nconst expected_3 = 'This_is_a_message'\nconst expected_4 = 'This_is_a_message'\nconst expected_5 = 'This_is_a_message'\nconst expected_6 = 'This_is_a_message'\nconst expected_7 = 'This_is_a_message'\nconst expected_8 = 'This_is_a_message'\nconst expected_9 = 'This_is_a_message'\nconst expected_10 = 'This_is_a_message'\nconst expected_11 = 'This_is_a_message'\nconst expected_12 = 'This_is_a_message'\nconst expected_13 = 'This_is_a_message'\nconst expected_14 = 'This_is_a_message'\nconst expected_15 = 'This_is_a_message'\nconst expected_16 = 'This_is_a_message'\nconst expected_17 = 'This_is_a_message'\nconst expected_18 = 'This_is_a_message'\nconst expected_19 = 'This_is_a_message'\nconst expected_20 = 'This_is_a_message'\nconst expected_21 = 'This_is_a_message'\nconst expected_22 = 'This_is_a_message'\nconst expected_23 = 'This_is_a_message'\nconst expected_24 = 'This_is_a_message'\nconst expected_25 = 'This_is_a_message'\nconst expected_26 = 'This_is_a_message'\nconst expected_27 = 'This_is_a_message'\nconst expected_28 = 'This_is_a_message'\nconst expected_29 = 'This_is_a_message'\nconst expected_30 = 'This_is_a_message'\nconst expected_31 = 'This_is_a_message'\nconst expected_32 = 'This_is_a_message'\nconst expected_33 = 'This_is_a_message'\nconst expected_34 = 'This_is_a_message'\nconst expected_35 = 'This_is_a_message'\nconst expected_36 = 'This_is_a_message'\nconst expected_37 = 'This_is_a_message'\nconst expected_38 = 'This_is_a_message'\nconst expected_39 = 'This_is_a_message'\nconst expected_40 = 'This_is_a_message'\nconst expected_41 = 'This_is_a_message'\nconst expected_42 = 'This_is_a_message'\nconst expected_43 = 'This_is_a_message'\nconst expected_44 = 'This_is_a_message'\nconst expected_45 = 'This_is_a_message'\nconst expected_46 = 'This_is_a_message'\nconst expected_47 = 'This_is_a_message'\nconst expected_48 = 'This_is_a_message'\nconst expected_49 = 'This_is_a_message'\nconst expected_50 = 'This_is_a_message'\nconst expected_51 = 'This_is_a_message'\nconst expected_52 = 'This_is_a_message'\nconst expected_53 = 'This_is_a_message'\nconst expected_54 = 'This_is_a_message'\nconst expected_55 = 'This_is_a_message'\nconst expected_56 ="}
{"task_id": "JavaScript/94", "prompt": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n", "canonical_solution": "  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "partial": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "gc": "// You are given a list of integers.\n//   You need to find the largest prime value and return the sum of its digits.\n// \n//   Examples:\n//   For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n//   For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n//   For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n//   For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n//   For lst = [0,81,12,3,1,21] the output should be 3\n//   For lst = [0,8,1,2,1,7] the output should be 7\n// const skjkasdkd = (lst) => {\n  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  return t\n}\n\nlet l = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]\n\nlet x = find_max(l)\nconsole.log(x)\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n", "canonical_solution": "      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "partial": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      # print('@@this is the line to split##')\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "gc": "//   Given a dictionary, return true if all keys are strings in lower \n//   case or all keys are strings in upper case, else return false.\n//   The function should return false is the given dictionary is empty.\n//   Examples:\n//   checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n//   checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n//   checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n//   checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n//   checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n// const checkDictCase = (dict) => {\n  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].toLowerCase() === key[i]) {\n        lo++\n      } else {\n        hi++\n      }\n    }\n  }\n  if (c === 0) {\n    return false\n  }\n  if (lo === hi) {\n    return true\n  }\n  return false\n}\n\n//   Given an array of integers, return true if the array contains any duplicate integers.\n//   Otherwise return false.\n//   For example,\n//   Given [1, 2, 3, 1, 4, 5], return true.\n//   Given [1, 2, 3, 4, 5], return false.\n//   Given [1, 1, 1, 1, 1, 1], return false.\n// const checkArrayDuplicate = (arr) => {\n  let result = false\n  let j = 0\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] === arr[i + 1]) {\n      result = true\n      j = i + 1\n    }\n  }\n  if (result) {\n    return true\n  }\n  return false\n}\n\n//   Given a collection of numbers, return all the possible permutations.\n//   For example,\n//   Given [1,2,3], return [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]].\n// const checkPermutations = (arr) => {\n  let result = []\n  let permutation = []\n  let i = 0\n  let j = 0\n  while (i < arr.length) {\n    if (arr[i] === arr[j]) {\n      permutation.push(arr[i])\n      i++\n    } else {\n      j++\n      permutation.push(arr[j])\n    }\n  }\n  for (let i = 0; i < permutation.length; i++) {\n    result.push(permutation)\n  }\n  return result\n}\n\n//   Given a string, return a string with all the unique characters in the string.\n//   If a character is not in the original string, add it to the end of the string.\n//   For example,\n//   Given \"a\", return \"aa\".\n//   Given \"ab\", return \"aab\".\n// const checkUniqueness = (str) => {\n  let result = []\n  for (let i = 0; i < str.length; i++) {\n    let flag = false\n    for (let j = 0; j < result.length; j++) {\n      if (result[j].indexOf(str[i]) > -1) {\n        flag = true\n        break\n      }\n    }\n    if (flag === false) {\n      result.push(str[i])\n    }\n  }\n  return result\n}\n\n//   Given a string, return the string where all non-alphanumeric characters are replaced with\n//   a space. For example,\n//   Given \"Hello, World!\", return \"Hello World!\".\n// const checkAlphanum = (str) => {\n  let result = []\n  for (let i = 0; i < str.length; i++) {\n    if (str[i].match(/[A-Za-z0-9]/)) {\n      result.push(str[i])\n    } else {\n      result.push(' ')\n    }\n  }\n  return result.join('')\n}\n\n//   Given a string, return a string with all the common letters in the string.\n//   For example,\n//   Given \"aab\", return \"aa\".\n// const checkCommonLetters = (str) => {\n  let result = []\n  for (let i = 0; i < str.length; i++) {\n    for (let j = i + 1; j < str.length; j++) {\n      if (str[i] === str[j]) {\n        result.push(str[i])\n      }\n    }\n  }\n  return result.join('')\n}\n\n//   Given a string, return a string where all the duplicate letters are replaced with\n//   a space. For example,\n//   Given \"aaab\", return \"aa aa\".\n// const checkDupLetters = (str) => {\n  let result = []\n  let flag = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i + 1]) {\n      flag = true\n      result.push(str[i])\n    } else {\n      flag = false\n    }\n  }\n  if (flag) {\n    result.push(' ')\n  }\n  return result.join('')\n}\n\n//   Given a string, return a string where all the common letters are replaced with\n//   a space. For example,\n//   Given \"aaab\", return \"aa aa\".\n// const checkCommonLetters = (str) => {\n  let result = []\n  let flag = false\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === str[i + 1]) {\n      flag = true\n      result.push(str[i])\n    } else {\n      flag = false\n    }\n  }\n  if (flag) {\n    result.push(' ')\n  }\n  return"}
{"task_id": "JavaScript/96", "prompt": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n", "canonical_solution": "    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "partial": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n      # print('@@this is the line to split##')\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "gc": "// Implement a function that takes an non-negative integer and returns an array of the first n\n//   integers that are prime numbers and less than n.\n//   for example:\n//   countUpTo(5) => [2,3]\n//   countUpTo(11) => [2,3,5,7]\n//   countUpTo(0) => []\n//   countUpTo(20) => [2,3,5,7,11,13,17,19]\n//   countUpTo(1) => []\n//   countUpTo(18) => [2,3,5,7,11,13,17]\n// const countUpTo = (n) => {\n  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p) t.push(i)\n  }\n  return t\n}\n\n// Implement a function that takes an array of ints and returns a sum of the elements of the array.\n//   for example:\n//   sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 45\n//   sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 42\n//   sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 39\n// const sum = (nums) => {\n  let t = 0\n  for (let i = 0; i < nums.length; i++) {\n    t += nums[i]\n  }\n  return t\n}\n\n// Implement a function that takes an array of ints and returns the largest element in the array.\n//   for example:\n//   max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 10\n//   max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 11\n// const max = (nums) => {\n  let t = 0\n  let m = -1\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > m) { m = nums[i] }\n    t = nums[i]\n  }\n  return t\n}\n\n// Implement a function that takes an array of ints and returns the smallest element in the array.\n//   for example:\n//   min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 1\n//   min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 1\n// const min = (nums) => {\n  let t = 0\n  let m = -1\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < m) { m = nums[i] }\n    t = nums[i]\n  }\n  return t\n}\n\n// Implement a function that takes an array of ints and returns the largest element in the array that is not divisible by the given number.\n//   for example:\n//   maxNotDivisibleBy(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => 4\n//   maxNotDivisibleBy(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => 10\n// const maxNotDivisibleBy = (n, nums) => {\n  let t = 0\n  let m = -1\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > m && nums[i] % n!= 0) { m = nums[i] }\n    t = nums[i]\n  }\n  return t\n}\n\n// Implement a function that takes an array of ints and returns the largest element in the array that is not divisible by the given number.\n//   for example:\n//   maxNotDivisibleBy(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => 12\n//   maxNotDivisibleBy(3, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => 12\n// const maxNotDivisibleBy = (n, nums) => {\n  let t = 0\n  let m = -1\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > m && nums[i] % n == 0) { m = nums[i] }\n    t = nums[i]\n  }\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n", "canonical_solution": "  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "partial": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  # print('@@this is the line to split##')\n  return (a % 10) * (b % 10)\n}\n\n", "gc": "// Complete the function that takes two integers and returns \n//   the product of their unit digits.\n//   Assume the input is always valid.\n//   Examples:\n//   multiply(148, 412) should return 16.\n//   multiply(19, 28) should return 72.\n//   multiply(2020, 1851) should return 0.\n//   multiply(14,-15) should return 20.\n// const multiply = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  var result = 0\n  for (var i = 0; i < a; i++) {\n    result += Math.pow(10, b)\n  }\n  return result\n}\n\n// Complete the function that takes two integers and returns \n//   the product of their digit-wise sum.\n//   Assume the input is always valid.\n//   Examples:\n//   digitSum(148,412) should return 11.\n//   digitSum(19,28) should return 17.\n//   digitSum(2020,1851) should return 12.\n//   digitSum(14,-15) should return 20.\nconst digitSum = (a, b) => {\n  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return Math.pow(10, a) + Math.pow(10, b) - 1\n}\n\n// Complete the function that takes a string and returns the number of vowels in the string.\n//   Assume the input is always valid.\n//   Examples:\n//   vowelCount(\"abcda\") should return 1.\n//   vowelCount(\"abcde\") should return 3.\n//   vowelCount(\"abc\") should return 2.\n//   vowelCount(\"abce\") should return 3.\n//   vowelCount(\"aae\") should return 1.\nconst vowelCount = (s) => {\n  let vowelCount = 0\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\") {\n      vowelCount++\n    }\n  }\n  return vowelCount\n}\n\n// Complete the function that takes two strings and returns \n//   the number of common vowels in the two strings.\n//   Assume the input is always valid.\n//   Examples:\n//   vowelCount(\"abcda\", \"cde\") should return 0.\n//   vowelCount(\"abcda\", \"cda\") should return 1.\n//   vowelCount(\"abcd\", \"e\") should return 1.\n//   vowelCount(\"abcd\", \"abce\") should return 1.\n//   vowelCount(\"aae\", \"aae\") should return 1.\nconst vowelCount2 = (s1, s2) => {\n  let vowelCount = 0\n  for (var i = 0; i < s1.length; i++) {\n    if (s1[i] === s2[i]) {\n      vowelCount++\n    }\n  }\n  return vowelCount\n}\n\n// Complete the function that takes a string and returns \n//   the number of consonants in the string.\n//   Assume the input is always valid.\n//   Examples:\n//   consonantCount(\"abcda\") should return 1.\n//   consonantCount(\"abcde\") should return 3.\n//   consonantCount(\"abc\") should return 2.\n//   consonantCount(\"abce\") should return 1.\n//   consonantCount(\"aae\") should return 1.\nconst consonantCount = (s) => {\n  let consonantCount = 0\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] === \"u\" || s[i] === \"y\" || s[i] === \"x\" || s[i] === \"z\") {\n      consonantCount++\n    }\n  }\n  return consonantCount\n}\n\n// Complete the function that takes two strings and returns \n//   the number of common consonants in the two strings.\n//   Assume the input is always valid.\n//   Examples:\n//   consonantCount(\"abcda\", \"cde\") should return 0.\n//   consonantCount(\"abcda\", \"cda\") should return 1.\n//   consonantCount(\"abcd\", \"e\") should return 1.\n//   consonantCount(\"abcd\", \"abce\") should return 1.\n//   consonantCount(\"aae\", \"aae\") should return 1.\nconst consonantCount2 = (s1, s2) => {\n  let consonantCount = 0\n  for (var i = 0; i < s1.length; i++) {\n    if (s1[i] === s2[i]) {\n      consonantCount++\n    }\n  }\n  return consonantCount\n}\n\n// Complete the function that takes two strings and returns \n//   the number of consonants in the first string that are not in the second.\n//   Assume the input is always valid.\n//   Examples:\n//   nonConsonantCount(\"abcda\", \"cda\") should return 1.\n//   nonConsonantCount(\"abcda\", \"abcda\") should return 0.\n//   nonConsonantCount(\"abcda\", \"abcde\") should return 2.\n//   nonConsonantCount(\"abcda\", \"abce\") should return 1.\n//   nonConsonantCount(\"abcda\", \"aae\") should return 1.\nconst nonConsonantCount = (s1, s2) => {\n  let nonConsonantCount = 0\n  for (var i = 0; i < s1.length; i++) {\n    if (s2.indexOf(s1[i]) === -1) {\n      nonConsonantCount++\n    }\n  }\n  return nonConsonantCount\n}\n\n// Complete the function that takes two strings and returns \n//   the number of consonants in the first string that are not in the second.\n//   Assume the input is always valid.\n//   Examples:\n//   nonConsonantCount(\""}
{"task_id": "JavaScript/98", "prompt": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "partial": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a string s, count the number of uppercase vowels in even indices.\n//    \n//   For example:\n//   countUpper('aBCdEf') returns 1\n//   countUpper('abcdefg') returns 0\n//   countUpper('dBBE') returns 0\n// const countUpper = (s) => {\n  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n// }\n// console.log(countUpper('aBCdEf'))\n// console.log(countUpper('abcdefg'))\n// console.log(countUpper('dBBE'))\n// console.log(countUpper('BBE'))\n// console.log(countUpper('BBE'))\n// console.log(countUpper('aBBbB'))\n// console.log(countUpper('AaAaA'))\n// console.log(countUpper('BBBB'))\n// console.log(countUpper('BBB'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countUpper('aBcDeF'))\n// console.log(countU"}
{"task_id": "JavaScript/99", "prompt": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n", "canonical_solution": "  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "partial": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  # print('@@this is the line to split##')\n  else { value += t }\n  return value\n}\n\n", "gc": "// Create a function that takes a value (string) representing a number\n//   and returns the closest integer to it. If the number is equidistant\n//   from two integers, round it away from zero.\n//   Examples\n//   >>> closestInteger(\"10\")\n//   10\n//   >>> closestInteger(\"15.3\")\n//   15\n//   Note:\n//   Rounding away from zero means that if the given number is equidistant\n//   from two integers, the one you should return is the one that is the\n//   farthest from zero. For example closestInteger(\"14.5\") should\n//   return 15 and closestInteger(\"-14.5\") should return -15.\n// const closestInteger = (value) => {\n  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  return Math.floor(value)\n// }\n\n\n// --------------------------------------------------------------------\n//                          Tests\n// --------------------------------------------------------------------\n\n// Test our function using the console\n\n// const values = [\n//   \"1\",\n//   \"1.1\",\n//   \"1.5\",\n//   \"1.9\",\n//   \"2\",\n//   \"2.1\",\n//   \"2.5\",\n//   \"2.9\",\n//   \"3\",\n//   \"3.1\",\n//   \"3.5\",\n//   \"3.9\",\n//   \"4\",\n//   \"4.1\",\n//   \"4.5\",\n//   \"4.9\",\n//   \"5\",\n//   \"5.1\",\n//   \"5.5\",\n//   \"5.9\",\n//   \"6\",\n//   \"6.1\",\n//   \"6.5\",\n//   \"6.9\",\n//   \"7\",\n//   \"7.1\",\n//   \"7.5\",\n//   \"7.9\",\n//   \"8\",\n//   \"8.1\",\n//   \"8.5\",\n//   \"8.9\",\n//   \"9\",\n//   \"9.1\",\n//   \"9.5\",\n//   \"9.9\",\n//   \"10\",\n//   \"10.1\",\n//   \"10.5\",\n//   \"10.9\",\n//   \"11\",\n//   \"11.1\",\n//   \"11.5\",\n//   \"11.9\",\n//   \"12\",\n//   \"12.1\",\n//   \"12.5\",\n//   \"12.9\",\n//   \"13\",\n//   \"13.1\",\n//   \"13.5\",\n//   \"13.9\",\n//   \"14\",\n//   \"14.1\",\n//   \"14.5\",\n//   \"14.9\",\n//   \"15\",\n//   \"15.1\",\n//   \"15.5\",\n//   \"15.9\",\n//   \"16\",\n//   \"16.1\",\n//   \"16.5\",\n//   \"16.9\",\n//   \"17\",\n//   \"17.1\",\n//   \"17.5\",\n//   \"17.9\",\n//   \"18\",\n//   \"18.1\",\n//   \"18.5\",\n//   \"18.9\",\n//   \"19\",\n//   \"19.1\",\n//   \"19.5\",\n//   \"19.9\",\n//   \"20\",\n//   \"20.1\",\n//   \"20.5\",\n//   \"20.9\",\n//   \"21\",\n//   \"21.1\",\n//   \"21.5\",\n//   \"21.9\",\n//   \"22\",\n//   \"22.1\",\n//   \"22.5\",\n//   \"22.9\",\n//   \"23\",\n//   \"23.1\",\n//   \"23.5\",\n//   \"23.9\",\n//   \"24\",\n//   \"24.1\",\n//   \"24.5\",\n//   \"24.9\",\n//   \"25\",\n//   \"25.1\",\n//   \"25.5\",\n//   \"25.9\",\n//   \"26\",\n//   \"26.1\",\n//   \"26.5\",\n//   \"26.9\",\n//   \"27\",\n//   \"27.1\",\n//   \"27.5\",\n//   \"27.9\",\n//   \"28\",\n//   \"28.1\",\n//   \"28.5\",\n//   \"28.9\",\n//   \"29\",\n//   \"29.1\",\n//   \"29.5\",\n//   \"29.9\",\n//   \"30\",\n//   \"30.1\",\n//   \"30.5\",\n//   \"30.9\",\n//   \"31\",\n//   \"31.1\",\n//   \"31.5\",\n//   \"31.9\",\n//   \"32\",\n//   \"32.1\",\n//   \"32.5\",\n//   \"32.9\",\n//   \"33\",\n//   \"33.1\",\n//   \"33.5\",\n//   \"33.9\",\n//   \"34\",\n//   \"34.1\",\n//   \"34.5\",\n//   \"34.9\",\n//   \"35\",\n//   \"35.1\",\n//   \"35.5\",\n//   \"35.9\",\n//   \"36\",\n//   \"36.1\",\n//   \"36.5\",\n//   \"36.9\",\n//   \"37\",\n//   \"37.1\",\n//   \"37.5\",\n//   \"37.9\",\n//   \"38\",\n//   \"38.1\",\n//   \"38.5\",\n//   \"38.9\",\n//   \"39\",\n//   \"39.1\",\n//   \"39.5\",\n//   \"39.9\",\n//   \"40\",\n//   \"40.1\",\n//   \"40.5\",\n//   \"40.9\",\n//   \"41\",\n//   \"41.1\",\n//   \"41.5\",\n//   \"41.9\",\n//   \"42\",\n//   \"42.1\",\n//   \"42.5\",\n//   \"42.9\",\n//   \"43\",\n//   \"43.1\",\n//   \"43.5\",\n//   \"43.9"}
{"task_id": "JavaScript/100", "prompt": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n", "canonical_solution": "  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "partial": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n    # print('@@this is the line to split##')\n  }\n  return t\n}\n\n", "gc": "//   Given a positive integer n, you have to make a pile of n levels of stones.\n//   The first level has n stones.\n//   The number of stones in the next level is:\n//       - the next odd number if n is odd.\n//       - the next even number if n is even.\n//   Return the number of stones in each level in a list, where element at index\n//   i represents the number of stones in the level (i+1).\n// \n//   Examples:\n//   >>> makeAPile(3)\n//   [3, 5, 7]\n// const makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n// function * makeAPile (n) {\n//   let t = []\n//   for (let i = n; i < n * 3; i += 2) {\n//     t.push(i)\n//   }\n//   return t\n// }\n\n// const makeAPile = (n) => {\n//   let t = []\n//   for (let i = n; i < n * 3; i += 2) {\n//     t.push(i)\n//   }\n//   return t\n// }\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\nconst makeAPile = (n) => {\n  let"}
{"task_id": "JavaScript/101", "prompt": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n", "canonical_solution": "    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "partial": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n      # print('@@this is the line to split##')\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "gc": "//   You will be given a string of words separated by commas or spaces. Your task is\n//   to split the string into words and return an array of the words.\n//    \n//   For example:\n//   wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n//   wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n// const wordsString = (s) => {\n  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] =='' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    } else {\n      t += s[i];\n    }\n  }\n  if (k == 0) {\n    p.push(t);\n  }\n  return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// function wordsString(s) {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// function wordsString(s) {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//       t += s[i];\n//     }\n//   }\n//   if (k == 0) {\n//     p.push(t);\n//   }\n//   return p;\n// }\n\n// const wordsString = (s) => {\n//   let t = ''\n//   let p = []\n//   let k = 0\n//   for (let i = 0; i < s.length; i++) {\n//     if (s[i] =='' || s[i] == ',') {\n//       if (k == 0) {\n//         k = 1;\n//         p.push(t);\n//         t = '';\n//       }\n//     } else {\n//"}
{"task_id": "JavaScript/102", "prompt": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "partial": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// This function takes two positive numbers x and y and returns the\n//   biggest even integer number that is in the range [x, y] inclusive. If \n//   there's no such number, then the function should return -1.\n// \n//   For example:\n//   chooseNum(12, 15) = 14\n//   chooseNum(13, 12) = -1\n// const chooseNum = (x, y) => {\n  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n// }\n\n// This function takes a positive integer n and returns the nth prime number.\n//   For example:\n//   nthPrime(1) = 2\n//   nthPrime(2) = 3\n//   nthPrime(3) = 5\n//   nthPrime(4) = 7\n//   nthPrime(5) = 11\n//   nthPrime(6) = 13\n//   nthPrime(7) = 17\n// const nthPrime = (n) => {\n  let nthPrime = 2\n  for (let i = 3; i <= n; i += 2) {\n    if (isPrime(i)) {return i }\n  }\n  return -1\n// }\n\n// This function takes a positive integer n and returns the nth composite number.\n//   For example:\n//   nthComposite(1) = 1\n//   nthComposite(2) = 2\n//   nthComposite(3) = 3\n//   nthComposite(4) = 4\n//   nthComposite(5) = 5\n//   nthComposite(6) = 6\n//   nthComposite(7) = 7\n// const nthComposite = (n) => {\n  let nthComposite = 1\n  for (let i = 2; i * i <= n; i += 2) {\n    if (isPrime(i)) {return nthPrime(i) }\n  }\n  return -1\n// }\n\n// This function takes a positive integer n and returns the number of n-1\n//   divisors of n.\n//   For example:\n//   divisors(1) = 1\n//   divisors(2) = 2\n//   divisors(3) = 3\n//   divisors(4) = 4\n//   divisors(5) = 5\n//   divisors(6) = 6\n//   divisors(7) = 7\n//   divisors(8) = 8\n// const divisors = (n) => {\n  let divisors = 1\n  for (let i = 2; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      divisors += 2\n    }\n  }\n  return divisors\n// }\n\n// This function takes a positive integer n and returns the number of n-1\n//   primitive roots.\n//   For example:\n//   primitiveRoots(1) = 1\n//   primitiveRoots(2) = 1\n//   primitiveRoots(3) = 2\n//   primitiveRoots(4) = 2\n//   primitiveRoots(5) = 3\n//   primitiveRoots(6) = 3\n//   primitiveRoots(7) = 3\n//   primitiveRoots(8) = 4\n// const primitiveRoots = (n) => {\n  let primitiveRoots = 1\n  for (let i = 2; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      primitiveRoots += 2\n    }\n  }\n  return primitiveRoots\n// }\n\n// This function takes a positive integer n and returns the sum of the \n//   nth to the (n + 1)th prime numbers.\n//   For example:\n//   primeSum(1) = 2\n//   primeSum(2) = 5\n//   primeSum(3) = 11\n//   primeSum(4) = 22\n//   primeSum(5) = 32\n//   primeSum(6) = 42\n//   primeSum(7) = 51\n//   primeSum(8) = 61\n// const primeSum = (n) => {\n  let primeSum = 0\n  for (let i = 2; i * i <= n; i += 2) {\n    if (isPrime(i)) {primeSum += i }\n  }\n  return primeSum\n// }\n\n// This function takes a positive integer n and returns the sum of the \n//   nth to the (n + 1)th primitive roots.\n//   For example:\n//   primitiveSum(1) = 1\n//   primitiveSum(2) = 2\n//   primitiveSum(3) = 4\n//   primitiveSum(4) = 4\n//   primitiveSum(5) = 6\n//   primitiveSum(6) = 6\n//   primitiveSum(7) = 8\n//   primitiveSum(8) = 8\n// const primitiveSum = (n) => {\n  let primitiveSum = 1\n  for (let i = 2; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      primitiveSum += i\n    }\n  }\n  return primitiveSum\n// }\n\n// This function takes a positive integer n and returns the sum of the \n//   nth to the (n + 1)th composite numbers.\n//   For example:\n//   compositeSum(1) = 1\n//   compositeSum(2) = 2\n//   compositeSum(3) = 3\n//   compositeSum(4) = 5\n//   compositeSum(5) = 7\n//   compositeSum(6) = 9\n//   compositeSum(7) = 11\n//   compositeSum(8) = 13\n// const compositeSum = (n) => {\n  let compositeSum = 1\n  for (let i = 2; i * i <= n; i += 2) {\n    if (n % i == 0) {\n      compositeSum += i\n    }\n  }\n  return compositeSum\n// }\n\n// This function takes a positive integer n and returns the sum of the \n//   nth to the (n + 1)th divisors.\n//   For example:\n//   divisorSum(1) = 1\n//   divisorSum(2"}
{"task_id": "JavaScript/103", "prompt": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n", "canonical_solution": "  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "partial": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  # print('@@this is the line to split##')\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "gc": "// You are given two positive integers n and m, and your task is to compute the\n//   average of the integers from n through m (including n and m). \n//   Round the answer to the nearest integer and convert that to binary.\n//   If n is greater than m, return -1.\n//   Example:\n//   roundedAvg(1, 5) => \"0b11\"\n//   roundedAvg(7, 5) => -1\n//   roundedAvg(10, 20) => \"0b1111\"\n//   roundedAvg(20, 33) => \"0b11010\"\n// const roundedAvg = (n, m) => {\n  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  let s = (n - k + 1) + (k - m)\n  let res = Math.floor(s / 2)\n  return res\n}\n\nconsole.log(roundedAvg(10, 20))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n", "canonical_solution": "  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "partial": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n    # print('@@this is the line to split##')\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of positive integers x. return a sorted list of all \n//   elements that hasn't any even digit.\n// \n//   Note: Returned list should be sorted in increasing order.\n//    \n//   For example:\n//   >>> uniqueDigits([15, 33, 1422, 1])\n//   [1, 15, 33]\n//   >>> uniqueDigits([152, 323, 1422, 10])\n//   []\n// const uniqueDigits = (x) => {\n  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  return p\n}\n\n// Given a string, find its first non-digit character\n//   x. Return -1 if x is all digits\n//   Note: x must start with a digit.\n//   \n//   For example:\n//   >>> firstNonDigit('0a1b2c')\n//   5\n//   >>> firstNonDigit('10a1b2c')\n//   -1\n// const firstNonDigit = (x) => {\n  let i = 0\n  while (i < x.length) {\n    let c = x[i]\n    if (isDigit(c)) {\n      break\n    } else {\n      i += 1\n    }\n  }\n  return i\n}\n\n// Given a string, find its last non-digit character\n//   x. Return -1 if x is all digits\n//   Note: x must start with a digit.\n//   \n//   For example:\n//   >>> lastNonDigit('0a1b2c')\n//   2\n//   >>> lastNonDigit('10a1b2c')\n//   -1\n// const lastNonDigit = (x) => {\n  let i = x.length - 1\n  while (i >= 0) {\n    let c = x[i]\n    if (isDigit(c)) {\n      break\n    } else {\n      i -= 1\n    }\n  }\n  return i\n}\n\n// Given a string, return the number of all its\n//   characters are digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are not digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allNonDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (!isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are digits or not digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allDigitsOrNonDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (isDigit(x[i]) ||!isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are all digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are all not digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allNonDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (!isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are all digits or not digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allDigitsOrNonDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (isDigit(x[i]) ||!isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are all digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {\n    if (isDigit(x[i])) {\n      n += 1\n    }\n  }\n  return n\n}\n\n// Given a string, return the number of all its\n//   characters are all not digits.\n//   Note: A string x is all digits if and only if \n//     x.split('').every(isDigit)\n// const allNonDigits = (x) => {\n  let n = 0\n  for (let i = 0; i < x.length; i++) {"}
{"task_id": "JavaScript/105", "prompt": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1 , 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n", "canonical_solution": "      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "partial": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      # print('@@this is the line to split##')\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "gc": "//   Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n//   reverse the resulting array, and then replace each digit by its corresponding name from\n//   \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n// \n//   For example:\n//     arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n//           -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n//           -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n//     return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n//    \n//     If the array is empty, return an empty array:\n//     arr = []\n//     return []\n//    \n//     If the array has any strange number ignore it:\n//     arr = [1, -1, 55] \n//           -> sort arr -> [-1, 1, 55]\n//           -> reverse arr -> [55, 1, -1]\n//     return = ['One']\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      p[j], p[ind] = p[ind], p[j]\n    }\n  }\n  let str = []\n  for (let i = 0; i < p.length; i++) {\n    str.push(one[p[i]])\n  }\n  return str\n}\n\n//   Given a string, return the string reversed.\n//   \n//   For example:\n//     s = \"Hello\"\n//     return \"olleH\"\n// const byLength = (s) => {\n  p = []\n  for (let i = 0; i < s.length; i++) {\n    p.push(s[i])\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      p[j], p[ind] = p[ind], p[j]\n    }\n  }\n  let str = \"\"\n  for (let i = 0; i < p.length; i++) {\n    str += p[i]\n  }\n  return str\n}\n\n// Given two strings, return the string in which the two strings are concatenated,\n//  the concatenation starts with the first string and ends with the second string.\n// \n//   For example:\n//     s1 = \"One\"\n//     s2 = \"Two\"\n//     return \"OneTwo\"\n// const byLength = (s1, s2) => {\n  p = []\n  for (let i = 0; i < s1.length; i++) {\n    p.push(s1[i])\n  }\n  for (let j = 0; j < s2.length; j++) {\n    p.push(s2[j])\n  }\n  let str = \"\"\n  for (let i = 0; i < p.length; i++) {\n    str += p[i]\n  }\n  return str\n}\n\n// Given an array of strings, return a new array of strings,\n//  where each string in the input array has been concatenated with all the strings in the array,\n//  starting with the first string and ending with the last string.\n// \n//   For example:\n//     arr = [\"One\", \"Two\", \"Three\"]\n//     return [\"OneTwoThree\"]\n// const byLength = (arr) => {\n  p = []\n  for (let i = 0; i < arr.length; i++) {\n    p.push(arr[i])\n  }\n  let str = \"\"\n  for (let i = 0; i < p.length; i++) {\n    str += p[i]\n  }\n  return str\n}\n\n// Given a string, return the string with spaces added before and after it so that\n//  the resulting string is a multiple of 4.\n// \n//   For example:\n//     s = \"One\"\n//     return \"  One  \"\n// const byLength = (s) => {\n  p = []\n  for (let i = 0; i < s.length; i++) {\n    p.push(s[i])\n  }\n  let str = \"\"\n  for (let i = 0; i < p.length; i++) {\n    str += p[i]\n  }\n  while (str.length % 4!= 0) {\n    str = \" \" + str\n  }\n  return str\n}\n\n// Given a string, return the string with spaces added before and after it so that\n//  the resulting string is a multiple of 4.\n// \n//   For example:\n//     s = \"One\"\n//     return \"One  \"\n// const byLength = (s) => {\n  p = []\n  for (let i = 0; i < s.length; i++) {\n    p.push(s[i])\n  }\n  let str = \"\"\n  for (let i = 0; i < p.length; i++) {\n    str += p[i]\n  }\n  while (str.length % 4!= 0) {\n    str = \" \" + str\n  }\n  return str\n}\n\n// Given a string, return a new string where the first character has been changed\n//  to a capital.\n// \n//   For example:\n//     s = \"One\"\n//     return \"One\"\n// const byLength = (s) => {\n  p = []\n  for (let i = 0; i < s.length; i++) {\n    p.push(s[i])\n  }\n  let str = \"\"\n  for (let i ="}
{"task_id": "JavaScript/106", "prompt": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n", "canonical_solution": "    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "partial": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    # print('@@this is the line to split##')\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "gc": "// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n//   or the sum of numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    k.push(p)\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the sum of the factorial of i if i is even\n//   or the product of the numbers from 1 to i otherwise.\n//   i starts from 1.\n//   the product of the numbers from 1 to i (1 * 2 *... * i) is the i-th number.\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    k.push(p)\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the sum of the even valued elements of the array.\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    k.push(i)\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the sum of the odd valued elements of the array.\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    k.push(i)\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the sum of the even valued elements of the array multiplied by the odd valued elements of the array.\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    k.push(i)\n  }\n  return k\n}\n\n// Implement the function f that takes n as a parameter,\n//   and returns a list of size n, such that the value of the element at index i is the product of the even valued elements of the array multiplied by the odd valued elements of the array.\n//   Example:\n//   f(5) == [1, 2, 6, 24, 15]\n// const f = (n) => {\n  let f = 1\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    k.push(i)\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n", "canonical_solution": "      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "partial": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n        # print('@@this is the line to split##')\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "gc": "//   Given a positive integer n, return a tuple that has the number of even and odd\n//   integer palindromes that fall within the range(1, n), inclusive.\n// \n//   Example 1:\n// \n//       Input: 3\n//       Output: (1, 2)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n// \n//   Example 2:\n// \n//       Input: 12\n//       Output: (4, 6)\n//       Explanation:\n//       Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// \n//   Note:\n//       1. 1 <= n <= 10^3\n//       2. returned tuple has the number of even and odd integer palindromes respectively.\n// const evenOddPalindrome = (n) => {\n  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j]!= k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p) {\n      if (k.length % 2 === 0) {\n        e += p\n      } else {\n        o += p\n      }\n    }\n  }\n  return [e, o]\n}\n\n// function palindrome(n) {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const palindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const evenOddPalindrome = (n) => {\n//   let k = n.toString()\n//   let e = 0\n//   let o = 0\n//   for (let i = 1; i <= k; i++) {\n//     let p = palindrome(i)\n//     if (p) {\n//       if (p === 1) {\n//         e++\n//       } else {\n//         o++\n//       }\n//     }\n//   }\n//   return [e, o]\n// }\n// \n// const testPalindrome = (n) => {\n//   return evenOddPalindrome(n)\n// }\n// \n// console.log(testPalindrome(12))\n// \n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return 0\n//   }\n// }\n// \n// const testPalindrome = (n) => {\n//   let k = n.toString()\n//   let p = 1\n//   for (let i = 0; i < k.length; i++) {\n//     if (k[i]!= k[k.length - i - 1]) {\n//       p = 0\n//       break\n//     }\n//   }\n//   if (p) {\n//     return 1\n//   } else {\n//     return"}
{"task_id": "JavaScript/108", "prompt": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n", "canonical_solution": "    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "partial": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    # print('@@this is the line to split##')\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "gc": "//   Write a function countNums which takes an array of integers and returns\n//   the number of elements which has a sum of digits > 0.\n//   If a number is negative, then its first signed digit will be negative:\n//   e.g. -123 has signed digits -1, 2, and 3.\n//   >>> countNums([]) == 0\n//   >>> countNums([-1, 11, -11]) == 1\n//   >>> countNums([1, 1, 2]) == 3\n// const countNums = (arr) => {\n  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h > 0) {\n      h -= Math.pow(10, k++)\n    }\n    if (p > 0) {\n      p--\n    }\n  }\n  return p\n}\n\n// const countNums = (arr) => {\n//   let p = 0\n//   for (let i = 0; i < arr.length; i++) {\n//     if (arr[i] > 0) {\n//       p++;\n//       continue;\n//     }\n//     let k = 0\n//     arr[i] = -arr[i]\n//     while (arr[i] > 0) {\n//       arr[i] -= Math.pow(10, k++)\n//     }\n//     if (p > 0) {\n//       p--\n//     }\n//   }\n//   return p\n// }\n\n// console.log(countNums([1, 1, 2, -1, 11, -11, -12, -13, -14, -15]))\n// console.log(countNums([-1, 11, -11]))\n// console.log(countNums([1, 1, 2]))\n// console.log(countNums([-1, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "// We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n", "canonical_solution": "    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "partial": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n      # print('@@this is the line to split##')\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "gc": "// We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n//   numbers in the array will be randomly ordered. Your task is to determine if\n//   it is possible to get an array sorted in non-decreasing order by performing \n//   the following operation on the given array:\n//       You are allowed to perform right shift operation any number of times.\n//    \n//   One right shift operation means shifting all elements of the array by one\n//   position in the right direction. The last element of the array will be moved to\n//   the starting position in the array i.e. 0th index. \n// \n//   If it is possible to obtain the sorted array by performing the above operation\n//   then return true else return false.\n//   If the given array is empty then return true.\n// \n//   Note: The given list is guaranteed to have unique elements.\n// \n//   For Example:\n//    \n//   moveOneBall([3, 4, 5, 1, 2])==>true\n//   Explanation: By performin 2 right shift operations, non-decreasing order can\n//                be achieved for the given array.\n//   moveOneBall([3, 5, 4, 1, 2])==>false\n//   Explanation:It is not possible to get non-decreasing order for the given\n//               array by performing any number of right shift operations.\n//                \n// const moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t) {\n      k = j\n      break;\n    }\n  }\n  let arrCopy = arr.slice()\n  for (let i = len - 1; i >= k; i--) {\n    let t = arr[i]\n    let j = k\n    while (j < len && arrCopy[j] < t) {\n      arr[j] = arrCopy[j]\n      j++\n    }\n    arr[j] = t\n  }\n  return (arr.length == k + 1)\n}\n\n// \n// Solution:\n// \n//  1. We need to find the kth largest element in the array\n//  2. The kth largest element is the smallest element in the array, so we can\n//     iterate through the array, find the kth largest element and then return\n//     true\n//  3. For any given element, if we can move one element, then the kth largest\n//     element must be the kth largest element in the new array, so we need to\n//     continue iterating the array. If we can't move the element, then we can\n//     stop iterating the array.\n// \n// Time Complexity: O(n)\n// Space Complexity: O(1)\n//\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t) {\n      k = j\n      break;\n    }\n  }\n  let arrCopy = arr.slice()\n  let curr = arr[k]\n  let j = k\n  while (j < len && arrCopy[j] < curr) {\n    arr[j] = arrCopy[j]\n    j++\n  }\n  arr[j] = curr\n  return (arr.length == k + 1)\n}\n\nconst moveOneBall = (arr) => {\n  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  let arrCopy = arr.slice()\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t) {\n      k = j\n      break;\n    }\n  }\n  let curr = arr[k]\n  let j = k\n  while (j < len && arrCopy[j] < curr) {\n    arr[j] = arrCopy[j]\n    j++\n  }\n  arr[j] = curr\n  return (arr.length == k + 1)\n}\n\nmodule.exports = moveOneBall\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n", "canonical_solution": "  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "partial": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  # print('@@this is the line to split##')\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "gc": "// In this problem, you will implement a function that takes two lists of numbers,\n//   and determines whether it is possible to perform an exchange of elements\n//   between them to make lst1 a list of only even numbers.\n//   There is no limit on the number of exchanged elements between lst1 and lst2.\n//   If it is possible to exchange elements between the lst1 and lst2 to make\n//   all the elements of lst1 to be even, return \"YES\".\n//   Otherwise, return \"NO\".\n//   For example:\n//   exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n//   exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n//   It is assumed that the input lists will be non-empty.\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t == k) { return \"YES\" }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t-- }\n  }\n  if (t == 0) { return \"YES\" }\n  return \"NO\"\n// }\n// // test\n// let l1 = [1, 2, 3, 4]\n// let l2 = [1, 5, 3, 4]\n// console.log(exchange(l1, l2))\n// // => \"YES\"\n\n// // 1\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t == k) { return \"YES\" }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t-- }\n  }\n  if (t == 0) { return \"YES\" }\n  return \"NO\"\n// }\n// // test\n// let l1 = [1, 2, 3, 4]\n// let l2 = [1, 5, 3, 4]\n// console.log(exchange(l1, l2))\n// // => \"YES\"\n\n// // 2\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t == k) { return \"YES\" }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t-- }\n  }\n  if (t == 0) { return \"YES\" }\n  return \"NO\"\n// }\n// // test\n// let l1 = [1, 2, 3, 4]\n// let l2 = [1, 5, 3, 4]\n// console.log(exchange(l1, l2))\n// // => \"NO\"\n\n// // 3\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t == k) { return \"NO\" }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t-- }\n  }\n  if (t == 0) { return \"NO\" }\n  return \"YES\"\n// }\n// // test\n// let l1 = [1, 2, 3, 4]\n// let l2 = [1, 5, 3, 4]\n// console.log(exchange(l1, l2))\n// // => \"YES\"\n\n// // 4\n// const exchange = (lst1, lst2) => {\n  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  if (t == k) { return \"NO\" }\n  for (let j = 0; j < lst2.length; j++) {\n    if (lst2[j] % 2 == 0) { t-- }\n  }\n  if (t == 0) { return \"YES\" }\n  return \"NO\"\n// }\n// // test\n// let l1 = [1, 2, 3, 4]\n// let l2 = [1, 5, 3, 4]\n// console.log(exchange(l1, l2))\n// // => \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n", "canonical_solution": "  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "partial": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  # print('@@this is the line to split##')\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "gc": "// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the most repetition and containing the corresponding count.\n//   If several letters have the same occurrence, return all of them.\n//    \n//   Example:\n//   histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n//   histogram('a b b a') == {'a': 2, 'b': 2}\n//   histogram('a b c a b') == {'a': 2, 'b': 2}\n//   histogram('b b b b a') == {'b': 4}\n//   histogram('') == {}\n// \n// const histogram = (test) => {\n  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  return d\n}\n\n// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the highest occurrence.\n//   If several letters have the same occurrence, return all of them.\n//   \n//   Example:\n//   highest('a b c') == 'c'\n//   highest('a b c d e f') == 'e'\n//   highest('a b c d a b c') == 'c'\n//   highest('a b c d a b c d a b c') == 'a'\n//   highest('a b c d a b c d a b c e f') == 'e'\n//   highest('') == ''\n// \n// const highest = (test) => {\n  let h = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in h) {\n      h[t[m]]++\n    }\n    else {\n      h[t[m]] = 1\n    }\n  }\n  return h\n}\n\n// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the highest occurrence, in descending order.\n//   If several letters have the same occurrence, return all of them.\n//   \n//   Example:\n//   highestDesc('a b c') == 'c'\n//   highestDesc('a b c d e f') == 'f'\n//   highestDesc('a b c d a b c') == 'c'\n//   highestDesc('a b c d a b c d a b c') == 'a'\n//   highestDesc('a b c d a b c d a b c e f') == 'f'\n//   highestDesc('') == ''\n// \n// const highestDesc = (test) => {\n  let h = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in h) {\n      h[t[m]]++\n    }\n    else {\n      h[t[m]] = 1\n    }\n  }\n  return h\n}\n\n// Given a string representing a space separated lowercase letters, return a dictionary\n//   of the letter with the highest occurrence, in ascending order.\n//   If several letters have the same occurrence, return all of them.\n//   \n//   Example:\n//   highestAsc('a b c') == 'a'\n//   highestAsc('a b c d e f') == 'a'\n//   highestAsc('a b c d a b c') == 'a'\n//   highestAsc('a b c d a b c d a b c') == 'c'\n//   highestAsc('a b c d a b c d a b c e f') == 'c'\n//   highestAsc('') == ''\n// \n// const highestAsc = (test) => {\n  let h = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in h) {\n      h[t[m]]++\n    }\n    else {\n      h[t[m]] = 1\n    }\n  }\n  return h\n}\n\n// Given a string representing a space separated lowercase letters, return the string\n//   with the lowest number of repetitions.\n//   If several letters have the same occurrence, return all of them.\n//   \n//   Example:\n//   lowest('a b c') == 'a'\n//   lowest('a b c d e f') == 'a'\n//   lowest('a b c d a b c') == 'a'\n//   lowest('a b c d a b c d a b c') == 'a'\n//   lowest('a b c d a b c d a b c e f') == 'a'\n//   lowest('') == ''\n// \n// const lowest = (test) => {\n  let l = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in l) {\n      l[t[m]]++\n    }\n    else {\n      l[t[m]] = 1\n    }\n  }\n  return l\n}\n\n// Given a string representing a space separated lowercase letters, return the string\n//   with the highest number of repetitions.\n//   If several letters have the same occurrence, return all of them.\n//   \n//   Example:\n//   highest('a b c') == 'c'\n//   highest('a b c d e f') == 'c'\n//   highest('a b c d a b c') == 'c'\n//   highest('a b c d a b c d a b c') == 'c'\n//   highest('a b c d a b c d a b c e f') == 'c'\n//   highest('') == ''\n// \n// const highest = (test) => {\n  let h = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in h) {\n"}
{"task_id": "JavaScript/112", "prompt": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n", "canonical_solution": "  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "partial": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n    # print('@@this is the line to split##')\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "gc": "// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n// const reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = t.split('')\n  z.reverse()\n  if (z.join('') == s) {\n    return {\n      text: t,\n      isPalindrome: true\n    }\n  }\n  else {\n    return {\n      text: t,\n      isPalindrome: false\n    }\n  }\n// }\n\n// Task\n//   We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n//   then check if the result string is palindrome.\n//   A string is called palindrome if it reads the same backward as forward.\n//   You should return a tuple containing the result string and true/false for the check.\n//   Example\n//   For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n//   For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n//   For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\nconst reverseDelete = (s, c) => {\n  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  return {\n    text: t,\n    isPalindrome: true\n  }\n}\n\n// Test\nconst test = [\n  {\n    s: 'abcdedcba',\n    c: 'ab',\n    r: 'bcdedc'\n  },\n  {\n    s: 'abcdedcba',\n    c: 'b',\n    r: 'acdedc'\n  },\n  {\n    s: 'abcdedcba',\n    c: 'b',\n    r: 'abdedc'\n  },\n  {\n    s: 'abcdedcba',\n    c: 'a',\n    r: 'bcedc'\n  }\n]\n\ntest.forEach(({s, c, r}) => {\n  console.log('reverseDelete(', s, ',', c, ') = ', r)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n", "canonical_solution": "    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "partial": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n      # print('@@this is the line to split##')\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "gc": "// Given a list of strings, where each string consists of only digits, return a list.\n//   Each element i of the output should be \"the number of odd elements in the\n//   string i of the input.\" where all the i's should be replaced by the number\n//   of odd digits in the i'th string of the input.\n// \n//   >>> oddCount(['1234567'])\n//   [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n//   >>> oddCount(['3',\"11111111\"])\n//   [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n//    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n// const oddCount = (lst) => {\n  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    d.push(p)\n  }\n  return d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n", "canonical_solution": "      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "partial": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n        # print('@@this is the line to split##')\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "gc": "//   Given an array of integers nums, find the minimum sum of any non-empty sub-array\n//   of nums.\n//   Example\n//   minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n//   minSubArraySum([-1, -2, -3]) == -6\n// const minSubArraySum = (nums) => {\n  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) {\n        min = s\n      }\n    }\n  }\n  return min\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n", "canonical_solution": "    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "partial": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    # print('@@this is the line to split##')\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "gc": "//   You are given a rectangular grid of wells. Each row represents a single well,\n//   and each 1 in a row represents a single unit of water.\n//   Each well has a corresponding bucket that can be used to extract water from it, \n//   and all buckets have the same capacity.\n//   Your task is to use the buckets to empty the wells.\n//   Output the number of times you need to lower the buckets.\n// \n//   Example 1:\n//       Input: \n//           grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n//           bucket_capacity : 1\n//       Output: 6\n// \n//   Example 2:\n//       Input: \n//           grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n//           bucket_capacity : 2\n//       Output: 5\n//    \n//   Example 3:\n//       Input: \n//           grid : [[0,0,0], [0,0,0]]\n//           bucket_capacity : 5\n//       Output: 0\n// \n//   Constraints:\n//       * all wells have the same length\n//       * 1 <= grid.length <= 10^2\n//       * 1 <= grid[:,1].length <= 10^2\n//       * grid[i][j] -> 0 | 1\n//       * 1 <= capacity <= 10\n// const maxFill = (grid, capacity) => {\n  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    if (m == 0) { continue }\n    if (m < grid[i][0]) { p++ }\n    else {\n      let h = m - grid[i][0]\n      for (let j = 0; j < h; j++) {\n        if (grid[i][j + 1] > grid[i][j]) {\n          p++\n        }\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n", "canonical_solution": "      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "partial": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n        # print('@@this is the line to split##')\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   In this Kata, you have to sort an array of non-negative integers according to\n//   number of ones in their binary representation in ascending order.\n//   For similar number of ones, sort based on decimal value.\n// \n//   It must be implemented like this:\n//   >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n//   >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n//   >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n// const sortArray = (arr) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f1 > f2) {\n        let tmp = p[k]\n        p[k] = p[ind]\n        p[ind] = tmp\n        ind = k\n      }\n    }\n  }\n  return p\n}\n\nexport { sortArray }\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n", "canonical_solution": "        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "partial": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        # print('@@this is the line to split##')\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "gc": "// Given a string s and a natural number n, you have been tasked to implement \n//   a function that returns a list of all words from string s that contain exactly \n//   n consonants, in order these words appear in the string s.\n//   If the string s is empty then the function should return an empty list.\n//   Note: you may assume the input string contains only letters and spaces.\n//   Examples:\n//   selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n//   selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n//   selectWords(\"simple white space\", 2) ==> []\n//   selectWords(\"Hello world\", 4) ==> [\"world\"]\n//   selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n// const selectWords = (s, n) => {\n  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j]!= 'a' && t[i][j]!= 'e' && t[i][j]!= 'i' && t[i][j]!= 'o' && t[i][j]!= 'u' && t[i][j]!= 'A' &&\n        t[i][j]!= 'E' && t[i][j]!= 'I' && t[i][j]!= 'O' && t[i][j]!= 'U') {\n        l += 1\n      }\n    }\n    if (l == n) {\n      k.push(t[i])\n    }\n  }\n  return k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n", "canonical_solution": "      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "partial": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      # print('@@this is the line to split##')\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "gc": "// You are given a word. Your task is to find the closest vowel that stands between \n//   two consonants from the right side of the word (case sensitive).\n//    \n//   Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n//   find any vowel met the above condition. \n// \n//   You may assume that the given string contains English letter only.\n// \n//   Example:\n//   getClosestVowel(\"yogurt\") ==> \"u\"\n//   getClosestVowel(\"FULL\") ==> \"U\"\n//   getClosestVowel(\"quick\") ==> \"\"\n//   getClosestVowel(\"ab\") ==> \"\"\n// const getClosestVowel = (word) => {\n  for (let i = word.length - 2; i > 0; i--) {\n    if (\n     !(word[i]!= 'a' && word[i]!= 'e' && word[i]!= 'i' && word[i]!= 'o' && word[i]!= 'u' && word[i]!= 'A' &&\n        word[i]!= 'U' && word[i]!= 'O' && word[i]!= 'I' && word[i]!= 'E')\n      &&\n      (word[i + 1]!= 'a' && word[i + 1]!= 'e' && word[i + 1]!= 'i' && word[i + 1]!= 'o' && word[i + 1]!= 'u' && word[i + 1]!= 'A' &&\n        word[i + 1]!= 'U' && word[i + 1]!= 'O' && word[i + 1]!= 'I' && word[i + 1]!= 'E')\n      &&\n      (word[i + 2]!= 'a' && word[i + 2]!= 'e' && word[i + 2]!= 'i' && word[i + 2]!= 'o' && word[i + 2]!= 'u' && word[i + 2]!= 'A' &&\n        word[i + 2]!= 'U' && word[i + 2]!= 'O' && word[i + 2]!= 'I' && word[i + 2]!= 'E')\n    ) {\n      return word[i + 1]\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n", "canonical_solution": "  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "partial": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  # print('@@this is the line to split##')\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "gc": "// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if it is possible to concatenate the two strings in\n//   some order, that the resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n// }\n\n// You are given a list of two strings, both strings consist of open\n//   parentheses '(' or close parentheses ')' only.\n//   Your job is to check if there's a way to make a good string, that the\n//   resulting string will be good.\n//   A string S is considered to be good if and only if all parentheses in S\n//   are balanced. For example: the string '(())()' is good, while the string\n//   '())' is not.\n//   Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n//   Examples:\n//   matchParens(['()(', ')']) == 'Yes'\n//   matchParens([')', ')']) == 'No'\n// const matchParens = (lst) => {\n  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n// }\n\n// Given a string, check if it can be made good by appending parentheses.\n// For example:\n//   'abc' -> 'abc'\n//   'a(bc)d' -> 'ab(c)d'\n//   'a[bc]' -> 'a[bc]'\n//   'a[bc][de]' -> 'a[bc][de]'\n//   'a(bc(de)f)' -> 'a(bc(de)f)'\n//   'a(bc(de)f)' -> 'a(bc(de)f)'\n//   'a[bc][de](fg)h' -> 'a[bc][de](fg)h'\n//   'a(bc(de)f)h' -> 'a(bc(de)f)h'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' -> 'a[bc][de]fghi'\n//   'a(bc(de)f)hij' -> 'a(bc(de)f)hij'\n//   'a[bc][de]fghi' ->"}
{"task_id": "JavaScript/120", "prompt": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n", "canonical_solution": "    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "partial": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    # print('@@this is the line to split##')\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "gc": "//   Given an array arr of integers and a positive integer k, return a sorted list \n//   of length k with the maximum k numbers in arr.\n// \n//   Example 1:\n// \n//       Input: arr = [-3, -4, 5], k = 3\n//       Output: [-4, -3, 5]\n// \n//   Example 2:\n// \n//       Input: arr = [4, -4, 4], k = 2\n//       Output: [4, 4]\n// \n//   Example 3:\n// \n//       Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//       Output: [2]\n// \n//   Note:\n//       1. The length of the array will be in the range of [1, 1000].\n//       2. The elements in the array will be in the range of [-1000, 1000].\n//       3. 0 <= k <= len(arr)\n// const maximum = (arr, k) => {\n  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind!= j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p.slice(0, k)\n}\n\nlet test = [{\n  \"arr\": [-3, -4, 5],\n  \"k\": 3\n}, {\n  \"arr\": [4, -4, 4],\n  \"k\": 2\n}, {\n  \"arr\": [-3, 2, 1, 2, -1, -2, 1],\n  \"k\": 1\n}]\n\nfor (let t of test) {\n  console.log(sortedK(t.arr, t.k))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "partial": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n//    \n// \n//   Examples\n//   solution([5, 8, 7, 1]) ==> 12\n//   solution([3, 3, 3, 3, 3]) ==> 9\n//   solution([30, 13, 24, 321]) ==>0\n// const solution = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\nconst solution = (lst) => {\n  const odd = lst.filter((n) => n % 2 == 1)\n  return odd.reduce((acc, n) => acc + n, 0)\n}\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\nconst solution = (lst) => {\n  const odd = lst.filter((n) => n % 2 == 1)\n  return odd.reduce((acc, n) => acc + n, 0)\n}\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = (lst) => {\n//   const odd = lst.filter((n) => n % 2 == 1)\n//   return odd.reduce((acc, n) => acc + n, 0)\n// }\n\n// const solution = ("}
{"task_id": "JavaScript/122", "prompt": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n", "canonical_solution": "  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "partial": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    # print('@@this is the line to split##')\n  }\n  return p\n}\n\n", "gc": "//   Given a non-empty array of integers arr and an integer k, return\n//   the sum of the elements with at most two digits from the first k elements of arr.\n// \n//   Example:\n// \n//       Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n//       Output: 24 # sum of 21 + 3\n// \n//   Constraints:\n//       1. 1 <= len(arr) <= 100\n//       2. 1 <= k <= len(arr)\n// const addElements = (arr, k) => {\n  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n    else { break }\n  }\n  if (p === 0) {\n    return 0\n  } else if (p < 10) {\n    return p\n  } else if (p > 99) {\n    return p + 1\n  } else {\n    let c = p + 1\n    for (let i = k; i < arr.length; i++) {\n      if (arr[i] < 10) {\n        break\n      }\n      c += arr[i]\n    }\n    return c\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n", "canonical_solution": "  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "partial": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  # print('@@this is the line to split##')\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "gc": "//   Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n// \n//   The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n//   as follows: start with any positive integer n. Then each term is obtained from the \n//   previous term as follows: if the previous term is even, the next term is one half of \n//   the previous term. If the previous term is odd, the next term is 3 times the previous\n//   term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n// \n//   Note: \n//       1. Collatz(1) is [1].\n//       2. returned list sorted in increasing order.\n// \n//   For example:\n//   getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n// const getOddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n\n// const p = getOddCollatz(5)\n// console.log(p)\n\n// \n// \n// // 我把计算出来的结果放在一个键值对里，然后把计算的结果还原成原来的结果。\n// // 这个需要做到每个结果只能用一个指针。\n// const oddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n// console.log(oddCollatz(5))\n\n// 另一种题目，把计算出来的结果放在一个键值对里，然后把计算的结果还原成原来的结果。\n// 这个需要做到每个结果只能用一个指针。\n// const oddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n// console.log(oddCollatz(5))\n\n// 这个题目最简单，每个结果只能用一个指针。\n// const oddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n// console.log(oddCollatz(5))\n\n// 这个题目最简单，每个结果只能用一个指针。\n// const oddCollatz = (n) => {\n  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  return p\n}\n// console.log(oddCollatz(5))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n", "canonical_solution": "  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "partial": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  # print('@@this is the line to split##')\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "gc": "// You have to write a function which validates a given date string and\n//   returns true if the date is valid otherwise false.\n//   The date is valid if all of the following rules are satisfied:\n//   1. The date string is not empty.\n//   2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n//   3. The months should not be less than 1 or higher than 12.\n//   4. The date should be in the format: mm-dd-yyyy\n// \n//   for example: \n//   validDate('03-11-2000') => true\n// \n//   validDate('15-01-2012') => false\n// \n//   validDate('04-0-2040') => false\n// \n//   validDate('06-04-2020') => true\n// \n//   validDate('06/04/2020') => false\n// const validDate = (date) => {\n  let t = date.split(/-/)\n  if (t.length!= 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if (t[0]!= 2 && t[1] > 31) { return false }\n  if (t[0] == 4 && t[1] > 30) { return false }\n  if (t[0]!= 4 && t[1] > 31) { return false }\n  if (t[0] == 6 && t[1] > 29) { return false }\n  if (t[0]!= 6 && t[1] > 30) { return false }\n  if (t[0] == 8 && t[1] > 29) { return false }\n  if (t[0]!= 8 && t[1] > 30) { return false }\n  if (t[0] == 10 && t[1] > 29) { return false }\n  if (t[0]!= 10 && t[1] > 30) { return false }\n  if (t[0] == 12 && t[1] > 29) { return false }\n  if (t[0]!= 12 && t[1] > 30) { return false }\n  if (t[2] < 1 || t[2] > 31) { return false }\n  return true\n}\n\n// https://leetcode.com/problems/valid-palindrome/discuss/7988/Java-solution-using-JavaScript-and-JavaScript-convert-the-string-to-an-integer-in-javascript/2\nconst validatePalindrome = (str) => {\n  let result = 0, i = 0, len = str.length\n  while (i < len) {\n    result += (str[i] === str[len - i - 1]? 1 : 0)\n    i++\n  }\n  return result % 2 === 0\n}\n\n// https://leetcode.com/problems/valid-palindrome/discuss/7988/Java-solution-using-JavaScript-and-JavaScript-convert-the-string-to-an-integer-in-javascript/2\nconst validatePalindromeInJS = (str) => {\n  let str2 = str.split('')\n  let len = str2.length\n  let result = 0, i = 0, j = len - 1\n  while (i < len && j >= 0) {\n    if (str2[i] === str2[j]) {\n      result += 1\n      i++\n      j--\n    } else {\n      if (str2[i] === str2[j]) {\n        result += 2\n        i++\n        j--\n      } else {\n        if (str2[i]!== str2[j]) {\n          i++\n          j--\n        }\n      }\n    }\n  }\n  return result % 2 === 0\n}\n\n// https://leetcode.com/problems/valid-palindrome/discuss/7988/Java-solution-using-JavaScript-and-JavaScript-convert-the-string-to-an-integer-in-javascript/2\nconst validatePalindrome2 = (str) => {\n  let result = 0, i = 0, j = 0\n  while (i < str.length && j < str.length) {\n    if (str[i] === str[j]) {\n      result += 1\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result % 2 === 0\n}\n\n// https://leetcode.com/problems/valid-palindrome/discuss/7988/Java-solution-using-JavaScript-and-JavaScript-convert-the-string-to-an-integer-in-javascript/2\nconst validatePalindrome3 = (str) => {\n  let result = 0, i = 0, j = 0\n  while (i < str.length && j < str.length) {\n    if (str[i] === str[j]) {\n      result += 1\n      i++\n      j++\n    } else {\n      i++\n    }\n  }\n  return result % 2 === 0\n}\n\nmodule.exports = {\n  validatePalindrome,\n  validatePalindrome2,\n  validatePalindrome3\n}<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n", "canonical_solution": "      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "partial": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      # print('@@this is the line to split##')\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "gc": "// Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n//   should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n//   alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n//   Examples\n//   splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n//   splitWords(\"abcdef\") == 3\n// const splitWords = (txt) => {\n  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      let words = []\n      let hasLower = false\n      let hasOdd = false\n      let cnt = 0\n      let c = 0\n      for (c = 0; c < 26; c++) {\n        if (txt.indexOf(String.fromCharCode(c + 97)) > -1) {\n          p = txt.indexOf(String.fromCharCode(c + 97))\n          hasLower = true\n          hasOdd = false\n          cnt++\n          words[cnt - 1] = String.fromCharCode(c + 97)\n        }\n      }\n      if (hasLower) {\n        words.push(txt)\n      }\n      return words\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n", "canonical_solution": "      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "partial": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      # print('@@this is the line to split##')\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "gc": "// Given a list of numbers, return whether or not they are sorted\n//   in ascending order. If list has more than 1 duplicate of the same\n//   number, return false. Assume no negative numbers and only integers.\n//   Examples\n//   isSorted([5]) ➞ true\n//   isSorted([1, 2, 3, 4, 5]) ➞ true\n//   isSorted([1, 3, 2, 4, 5]) ➞ false\n//   isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n//   isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n//   isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n//   isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n//   isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n// const isSorted = (lst) => {\n  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup > 1) { return false }\n    }\n    pre = lst[i]\n  }\n  return true\n  // }\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n", "canonical_solution": "  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "partial": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  # print('@@this is the line to split##')\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "gc": "// You are given two intervals,\n//   where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n//   The given intervals are closed which means that the interval (start, end)\n//   includes both start and end.\n//   For each given interval, it is assumed that its start is less or equal its end.\n//   Your task is to determine whether the length of intersection of these two \n//   intervals is a prime number.\n//   Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n//   which its length is 1, which not a prime number.\n//   If the length of the intersection is a prime number, return \"YES\",\n//   otherwise, return \"NO\".\n//   If the two intervals don't intersect, return \"NO\".\n// \n// \n//   [input/output] samples:\n//   intersection((1, 2), (2, 3)) ==> \"NO\"\n//   intersection((-1, 1), (0, 4)) ==> \"NO\"\n//   intersection((-3, -1), (-5, 5)) ==> \"YES\"\n// const intersection = (interval1, interval2) => {\n  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len < 2) { return \"NO\" }\n  \n  let n = len - 1\n  let prime = true\n  let i = 2\n  let j = 2\n  \n  while (prime) {\n    if (i > n) { return \"NO\" }\n    if (n % i == 0) {\n      prime = false\n    }\n    i++\n  }\n  \n  return \"YES\"\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n", "canonical_solution": "    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "partial": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    # print('@@this is the line to split##')\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "gc": "//   You are given an array arr of integers and you need to return\n//   sum of magnitudes of integers multiplied by product of all signs\n//   of each number in the array, represented by 1, -1 or 0.\n//   Note: return null for empty arr.\n// \n//   Example:\n//   >>> prodSigns([1, 2, 2, -4]) == -9\n//   >>> prodSigns([0, 1]) == 0\n//   >>> prodSigns([]) == null\n// const prodSigns = (arr) => {\n  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] > 0) { n += 1 }\n    if (arr[i] < 0) { n -= 1 }\n  }\n  return n * s\n}\n\n// https://judge.run.pwn.sh/training/problems/1\n//\n//   You are given two integer arrays arr1 and arr2.\n//   Find the largest product of elements in both arrays.\n//\n//   Example:\n//   >>> arr1 = [1, 2, 3, 4]\n//   >>> arr2 = [4, 5, 6, 7]\n//   >>> largestProduct([1, 2, 3, 4], [4, 5, 6, 7]) == 48\n//   >>> largestProduct([1, 2, 3, 4], [4, 5, 6]) == 24\n// const largestProduct = (arr1, arr2) => {\n  let n = arr1.length\n  let m = arr2.length\n  let arr1max = arr1[0]\n  let arr2max = arr2[0]\n  for (let i = 1; i < n; i++) {\n    if (arr1[i] > arr1max) {\n      arr1max = arr1[i]\n    }\n  }\n  for (let i = 1; i < m; i++) {\n    if (arr2[i] > arr2max) {\n      arr2max = arr2[i]\n    }\n  }\n  let arr1s = arr1.reduce((p, v) => p * v, 1)\n  let arr2s = arr2.reduce((p, v) => p * v, 1)\n  let product = Math.max(arr1s, arr2s)\n  return product\n}\n\n// https://judge.run.pwn.sh/training/problems/2\n//\n//   Given two arrays arr1 and arr2, calculate the union of both\n//   and return the maximum element in the union.\n//\n//   Example:\n//   >>> arr1 = [1, 2, 3, 4]\n//   >>> arr2 = [4, 5, 6, 7]\n//   >>> unionOf([1, 2, 3, 4], [4, 5, 6, 7]) == 17\n// const unionOf = (arr1, arr2) => {\n  let union = []\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] < 0) {\n      union.push(arr1[i])\n    }\n  }\n  for (let i = 0; i < arr2.length; i++) {\n    if (arr2[i] < 0) {\n      union.push(arr2[i])\n    }\n  }\n  union.sort()\n  return union[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n", "canonical_solution": "  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "partial": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  # print('@@this is the line to split##')\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "gc": "//   Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n//   each cell of the grid contains a value. Every integer in the range [1, N * N]\n//   inclusive appears exactly once on the cells of the grid.\n// \n//   You have to find the minimum path of length k in the grid. You can start\n//   from any cell, and in each step you can move to any of the neighbor cells,\n//   in other words, you can go to cells which share an edge with you current\n//   cell.\n//   Please note that a path of length k means visiting exactly k cells (not\n//   necessarily distinct).\n//   You CANNOT go off the grid.\n//   A path A (of length k) is considered less than a path B (of length k) if\n//   after making the ordered lists of the values on the cells that A and B go\n//   through (let's call them lst_A and lst_B), lst_A is lexicographically less\n//   than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n//   such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n//   lst_A[j] = lst_B[j].\n//   It is guaranteed that the answer is unique.\n//   Return an ordered list of the values on the cells that the minimum path go through.\n// \n//   Examples:\n// \n//       Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n//       Output: [1, 2, 1]\n// \n//       Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n//       Output: [1]\n// const minPath = (grid, k) => {\n  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let dp = [grid[0][0]]\n  while (k > 1) {\n    dp.push(grid[m][n])\n    k--\n    m = (m - 1) % grid.length\n    n = (n - 1) % grid.length\n  }\n  return dp\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n", "canonical_solution": "    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "partial": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n      # print('@@this is the line to split##')\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "gc": "// Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n//   the last couple centuries. However, what people don't know is Tribonacci sequence.\n//   Tribonacci sequence is defined by the recurrence:\n//   tri(1) = 3\n//   tri(n) = 1 + n / 2, if n is even.\n//   tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n//   For example:\n//   tri(2) = 1 + (2 / 2) = 2\n//   tri(4) = 3\n//   tri(3) = tri(2) + tri(1) + tri(4)\n//          = 2 + 3 + 3 = 8 \n//   You are given a non-negative integer number n, you have to a return a list of the \n//   first n + 1 numbers of the Tribonacci sequence.\n//   Examples:\n//   tri(3) = [1, 3, 2, 8]\n// const tri = (n) => {\n  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    } else {\n      p.push(p[i - 2] + p[i - 1] + p[i + 1])\n    }\n  }\n  return p\n}\n\nfunction trib(n) {\n  let trib = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 == 0) {\n      trib.push(1 + i / 2)\n    } else {\n      trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1])\n    }\n  }\n  return trib\n}\n\n// const trib = (n) => {\n//   let trib = []\n//   for (let i = 1; i <= n; i++) {\n//     trib.push(1 + i / 2)\n//   }\n//   return trib\n// }\n\nfunction trib2(n) {\n  let trib = [0, 1]\n  for (let i = 1; i <= n; i++) {\n    trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1])\n  }\n  return trib\n}\n\nconsole.log(trib2(5))\n\n// function trib(n) {\n//   let trib = []\n//   for (let i = 1; i <= n; i++) {\n//     trib.push(1 + i / 2)\n//   }\n//   return trib\n// }\n\nfunction trib3(n) {\n  let trib = [0]\n  for (let i = 1; i <= n; i++) {\n    trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1])\n  }\n  return trib\n}\n\nconsole.log(trib3(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n", "canonical_solution": "    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "partial": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n      # print('@@this is the line to split##')\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "gc": "// Given a positive integer n, return the product of the odd digits.\n//   Return 0 if all digits are even.\n//   For example:\n//   digits(1)  == 1\n//   digits(4)  == 0\n//   digits(235) == 15\n// const digits = (n) => {\n  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n /= 10\n  }\n  return p*k\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n", "canonical_solution": "    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "partial": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    # print('@@this is the line to split##')\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "gc": "//   Create a function that takes a string as input which contains only square brackets.\n//   The function should return true if and only if there is a valid subsequence of brackets\n//   where at least one bracket in the subsequence is nested.\n//   isNested('[[]]') ➞ true\n//   isNested('[]]]]]]][[[[[]') ➞ false\n//   isNested('[][]') ➞ false\n//   isNested('[]') ➞ false\n//   isNested('[[][]]') ➞ true\n//   isNested('[[]][[') ➞ true\n// const isNested = (string) => {\n  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    if (string[closing_bracket_index1[i]] == ']') {\n      closing_bracket_index.push(closing_bracket_index1[i])\n    }\n  }\n  let result = false\n  if (opening_bracket_index.length > 0 && opening_bracket_index.length == closing_bracket_index.length) {\n    let stack = opening_bracket_index.length\n    for (let i = 0; i < stack; i++) {\n      if (closing_bracket_index.indexOf(opening_bracket_index[i]) == -1) {\n        result = false\n        break\n      }\n    }\n    result = true\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n", "canonical_solution": "      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      # print('@@this is the line to split##')\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "gc": "// You are given a list of numbers.\n//   You need to return the sum of squared numbers in the given list,\n//   round each element in the list to the upper int(Ceiling) first.\n//   Examples:\n//   For lst = [1,2,3] the output should be 14\n//   For lst = [1,4,9] the output should be 98\n//   For lst = [1,3,5,7] the output should be 84\n//   For lst = [1.4,4.2,0] the output should be 29\n//   For lst = [-2.4,1,1] the output should be 6\n// const sumSquares = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1!= 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = y + y % 1 - 1 }\n    }\n    p = p + Math.pow(y, 2)\n  }\n  return p\n}\n\nlet lst = [1,2,3,4]\nconsole.log(sumSquares(lst))\n\nlet lst = [1,4,9]\nconsole.log(sumSquares(lst))\n\nlet lst = [1,3,5,7]\nconsole.log(sumSquares(lst))\n\nlet lst = [1.4,4.2,0]\nconsole.log(sumSquares(lst))\n\nlet lst = [-2.4,1,1]\nconsole.log(sumSquares(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n", "canonical_solution": "    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "partial": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    # print('@@this is the line to split##')\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "gc": "// Create a function that returns true if the last character\n//   of a given string is an alphabetical character and is not\n//   a part of a word, and false otherwise.\n//   Note: \"word\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"apple pie\") ➞ false\n//   checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n//   checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (y >= 97 && y <= 122) { return true }\n  if (y >= 65 && y <= 90) {\n    if (len >= 3) {\n      let z = txt[len - 2].charCodeAt()\n      if (z >= 97 && z <= 122) { return true }\n    }\n    if (len >= 2) {\n      let z = txt[len - 1].charCodeAt()\n      if (z >= 65 && z <= 90) { return true }\n    }\n    return false\n  }\n  return false\n}\n\n// Create a function that returns true if the last character\n//   of a given string is a number, and false otherwise.\n//   Note: \"number\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsANumber(\"1234\") ➞ true\n//   checkIfLastCharIsANumber(\"1234 5\") ➞ false\n//   checkIfLastCharIsANumber(\"1234 5 a\") ➞ false\n//   checkIfLastCharIsANumber(\"\") ➞ false\n// const checkIfLastCharIsANumber = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if (y >= 48 && y <= 57) { return true }\n    return false\n  }\n  if (y >= 48 && y <= 57) { return true }\n  return false\n}\n\n// Create a function that returns true if the last character\n//   of a given string is a whitespace, and false otherwise.\n//   Note: \"whitespace\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsAWhitespace(\" 1234\") ➞ true\n//   checkIfLastCharIsAWhitespace(\" 1234 5\") ➞ false\n//   checkIfLastCharIsAWhitespace(\"1234 5 a\") ➞ false\n//   checkIfLastCharIsAWhitespace(\"\") ➞ false\n// const checkIfLastCharIsAWhitespace = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if (y == 32) { return true }\n    return false\n  }\n  if (y == 32) { return true }\n  return false\n}\n\n// Create a function that returns true if the last character\n//   of a given string is a punctuation, and false otherwise.\n//   Note: \"punctuation\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsAPunctuation(\"1234\") ➞ true\n//   checkIfLastCharIsAPunctuation(\"1234 5\") ➞ false\n//   checkIfLastCharIsAPunctuation(\"1234 5 a\") ➞ false\n//   checkIfLastCharIsAPunctuation(\"\") ➞ false\n// const checkIfLastCharIsAPunctuation = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if (y == 32) { return true }\n    return false\n  }\n  if (y == 32) { return false }\n  if (y >= 33 && y <= 47) { return true }\n  if (y >= 58 && y <= 64) { return true }\n  if (y >= 91 && y <= 96) { return true }\n  if (y >= 123 && y <= 126) { return true }\n  return false\n}\n\n// Create a function that returns true if the last character\n//   of a given string is a letter, and false otherwise.\n//   Note: \"letter\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsALetter(\"1234\") ➞ false\n//   checkIfLastCharIsALetter(\"1234 5\") ➞ true\n//   checkIfLastCharIsALetter(\"1234 5 a\") ➞ true\n//   checkIfLastCharIsALetter(\"\") ➞ false\n// const checkIfLastCharIsALetter = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if (y >= 97 && y <= 122) { return true }\n    return false\n  }\n  if (y >= 97 && y <= 122) { return true }\n  return false\n}\n\n// Create a function that returns true if the last character\n//   of a given string is a number, and false otherwise.\n//   Note: \"number\" is a group of characters separated by space.\n//   Examples:\n//   checkIfLastCharIsANumber(\"1234\") ➞ true\n//   checkIfLastCharIsANumber(\"1234 5\") ➞ false\n//   checkIfLastCharIsANumber(\"1234 5 a\") ➞ false\n//   checkIfLastCharIsANumber(\"\") ➞ false\n// const checkIfLastCharIsANumber = (txt) => {\n  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if"}
{"task_id": "JavaScript/135", "prompt": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n", "canonical_solution": "  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "partial": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n    # print('@@this is the line to split##')\n  }\n  return -1\n}\n\n", "gc": "// Create a function which returns the largest index of an element which\n//   is not greater than or equal to the element immediately preceding it. If\n//   no such element exists then return -1. The given array will not contain\n//   duplicate values.\n// \n//   Examples:\n//   canArrange([1,2,4,3,5]) = 3\n//   canArrange([1,2,3]) = -1\n// const canArrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n// Return the smallest index of an element which is not less than the element\n// immediately following it. If no such element exists then return -1. The\n// given array will not contain duplicate values.\n// \n//   Examples:\n//   canUnarrange([1,2,4,3,5]) = 4\n//   canUnarrange([1,2,3]) = -1\n// const canUnarrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) { return i }\n  }\n  return -1\n}\n\n// Return the largest index of an element which is not less than the element\n// immediately preceding it. If no such element exists then return -1. The\n// given array will not contain duplicate values.\n// \n//   Examples:\n//   canUnarrange([1,2,4,3,5]) = 2\n//   canUnarrange([1,2,3]) = -1\n// const canUnarrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] > arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n// Return the largest index of an element which is not less than the element\n// immediately following it. If no such element exists then return -1. The\n// given array will not contain duplicate values.\n// \n//   Examples:\n//   canUnarrange([1,2,4,3,5]) = 1\n//   canUnarrange([1,2,3]) = -1\n// const canUnarrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) { return i }\n  }\n  return -1\n}\n\n// Return the smallest index of an element which is not greater than the element\n// immediately preceding it. If no such element exists then return -1. The\n// given array will not contain duplicate values.\n// \n//   Examples:\n//   canUnarrange([1,2,4,3,5]) = 5\n//   canUnarrange([1,2,3]) = -1\n// const canUnarrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n// Return the smallest index of an element which is not greater than the element\n// immediately following it. If no such element exists then return -1. The\n// given array will not contain duplicate values.\n// \n//   Examples:\n//   canUnarrange([1,2,4,3,5]) = 3\n//   canUnarrange([1,2,3]) = -1\n// const canUnarrange = (arr) => {\n  if (arr.length == 0) { return -1 }\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] < arr[i + 1]) { return i }\n  }\n  return -1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n", "canonical_solution": "  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "partial": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n    # print('@@this is the line to split##')\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "gc": "// Create a function that returns a tuple (a, b), where 'a' is\n//   the largest of negative integers, and 'b' is the smallest\n//   of positive integers in a list.\n//   If there is no negative or positive integers, return them as null.\n//   Examples:\n//   largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n//   largestSmallestIntegers([]) == (null, null)\n//   largestSmallestIntegers([0]) == (null, null)\n// const largestSmallestIntegers = (lst) => {\n  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  return [a, b]\n// }\n\n// Get the largest of the first 'n' integers in a list.\n// If 'n' is larger than the number of integers in the list,\n// return the largest of the remaining integers.\n// const largestFirstNIntegers = (lst, n) => {\n  let largest = 0\n  for (let i = 0; i < n; i++) {\n    if (lst[i] > largest) { largest = lst[i] }\n  }\n  if (lst.length > n) { largest = largestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return largest\n// }\n\n// Get the smallest of the first 'n' integers in a list.\n// If 'n' is larger than the number of integers in the list,\n// return the smallest of the remaining integers.\n// const smallestFirstNIntegers = (lst, n) => {\n  let smallest = Infinity\n  for (let i = 0; i < n; i++) {\n    if (lst[i] < smallest) { smallest = lst[i] }\n  }\n  if (lst.length > n) { smallest = smallestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return smallest\n// }\n\n// Get the largest of the first 'n' integers in a list,\n// and the smallest of the remaining integers.\n// const largestAndSmallestIntegers = (lst, n) => {\n  let largest = largestFirstNIntegers(lst, n)\n  let smallest = smallestFirstNIntegers(lst, n)\n  return [largest, smallest]\n// }\n\n// Get the largest of the first 'n' integers in a list.\n// If 'n' is larger than the number of integers in the list,\n// return the largest of the remaining integers.\n// const largestFirstNIntegers = (lst, n) => {\n  let largest = 0\n  for (let i = 0; i < n; i++) {\n    if (lst[i] > largest) { largest = lst[i] }\n  }\n  if (lst.length > n) { largest = largestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return largest\n// }\n\n// Get the smallest of the first 'n' integers in a list,\n// and the largest of the remaining integers.\n// const smallestAndLargestIntegers = (lst, n) => {\n  let smallest = Infinity\n  let largest = -Infinity\n  for (let i = 0; i < n; i++) {\n    if (lst[i] < smallest) { smallest = lst[i] }\n    if (lst[i] > largest) { largest = lst[i] }\n  }\n  if (lst.length > n) { largest = largestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return [smallest, largest]\n// }\n\n// Get the largest of the first 'n' integers in a list,\n// and the smallest of the remaining integers.\n// const largestAndSmallestIntegers = (lst, n) => {\n  let largest = largestFirstNIntegers(lst, n)\n  let smallest = smallestFirstNIntegers(lst, n)\n  return [largest, smallest]\n// }\n\n// Get the largest of the first 'n' integers in a list.\n// If 'n' is larger than the number of integers in the list,\n// return the largest of the remaining integers.\n// const largestFirstNIntegers = (lst, n) => {\n  let largest = 0\n  for (let i = 0; i < n; i++) {\n    if (lst[i] > largest) { largest = lst[i] }\n  }\n  if (lst.length > n) { largest = largestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return largest\n// }\n\n// Get the smallest of the first 'n' integers in a list.\n// If 'n' is larger than the number of integers in the list,\n// return the smallest of the remaining integers.\n// const smallestFirstNIntegers = (lst, n) => {\n  let smallest = Infinity\n  for (let i = 0; i < n; i++) {\n    if (lst[i] < smallest) { smallest = lst[i] }\n  }\n  if (lst.length > n) { smallest = smallestFirstNIntegers(lst.slice(n), lst.length - n) }\n  return smallest\n// }\n\n// Get the largest of the first 'n' integers in a list,\n// and the smallest of the remaining integers.\n// const largestAndSmallestIntegers = (lst, n) => {\n  let largest = largestFirstNIntegers(lst, n)\n  let smallest = smallestFirstNIntegers(lst, n)\n  return [largest, smallest]\n// }\n\n// Get the largest of the first 'n' integers in a list,\n// and the smallest of the remaining integers.\n// const largestAndSmallestIntegers = (lst, n) => {\n  let largest = largestFirstNIntegers(lst, n)\n  let smallest = smallestFirstNIntegers(lst, n)\n  return [largest, smallest]\n// }\n\n// Get the largest of the first 'n' integers in a list.\n// If 'n' is larger"}
{"task_id": "JavaScript/137", "prompt": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be . or ,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n", "canonical_solution": "  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "partial": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ null\n  */\nconst compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  # print('@@this is the line to split##')\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "gc": "//   Create a function that takes integers, floats, or strings representing\n//   real numbers, and returns the larger variable in its given variable type.\n//   Return null if the values are equal.\n//   Note: If a real number is represented as a string, the floating point might be. or,\n// \n//   compareOne(1, 2.5) ➞ 2.5\n//   compareOne(1, \"2,3\") ➞ \"2,3\"\n//   compareOne(\"5,1\", \"6\") ➞ \"6\"\n//   compareOne(\"1\", 1) ➞ null\n// const compareOne = (a, b) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b =='string') { bb = Number(b.replace(',', '.')) }\n  if (aa < bb) { return a }\n  if (aa > bb) { return b }\n  return null\n}\n\n//   Create a function that takes two strings, and returns the larger string.\n//   Return null if the values are equal.\n//   Note: If a string is represented as a number, the floating point might be. or,\n// \n//   compareTwo(\"bob\", \"jack\") ➞ \"bob\"\n//   compareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n//   compareTwo(\"1\", \"1\") ➞ null\n// const compareTwo = (a, b) => {\n  let aa = String(a)\n  if (typeof a =='string') { aa = String(a.replace(',', '.')) }\n  let bb = String(b)\n  if (typeof b =='string') { bb = String(b.replace(',', '.')) }\n  if (aa < bb) { return a }\n  if (aa > bb) { return b }\n  return null\n}\n\n//   Create a function that takes two arrays of strings, and returns the array\n//   containing the largest string.\n//   Return null if the values are equal.\n//   Note: If a string is represented as a number, the floating point might be. or,\n// \n//   compareTwo([ \"bob\", \"jack\" ], [ \"bob\", \"bob\" ]) ➞ [ \"bob\", \"jack\" ]\n//   compareTwo([ \"5,1\", \"6\" ], [ \"1\", \"1\" ]) ➞ [ \"5,1\", \"6\" ]\n//   compareTwo([ \"1\", \"1\" ], [ \"1\", \"1\" ]) ➞ null\n// const compareTwo = (a, b) => {\n  let aa = Array.from(a)\n  if (typeof a =='string') { aa = Array.from(a.replace(',', '.')) }\n  let bb = Array.from(b)\n  if (typeof b =='string') { bb = Array.from(b.replace(',', '.')) }\n  if (aa[0] < bb[0]) { return a }\n  if (aa[0] > bb[0]) { return b }\n  return null\n}\n\n//   Create a function that takes two objects, and returns the object\n//   containing the largest string.\n//   Return null if the values are equal.\n//   Note: If a string is represented as a number, the floating point might be. or,\n// \n//   compareTwo({ a: \"bob\", b: \"jack\" }, { a: \"bob\", b: \"bob\" }) ➞ { a: \"bob\", b: \"jack\" }\n//   compareTwo({ a: \"5,1\", b: \"6\" }, { a: \"1\", b: \"1\" }) ➞ { a: \"5,1\", b: \"6\" }\n//   compareTwo({ a: \"1\", b: \"1\" }, { a: \"1\", b: \"1\" }) ➞ null\n// const compareTwo = (a, b) => {\n  let aa = Object.fromEntries(a)\n  if (typeof a =='string') { aa = Object.fromEntries(a.replace(',', '.')) }\n  let bb = Object.fromEntries(b)\n  if (typeof b =='string') { bb = Object.fromEntries(b.replace(',', '.')) }\n  if (aa[0] < bb[0]) { return a }\n  if (aa[0] > bb[0]) { return b }\n  return null\n}\n\n//   Create a function that takes a number, and returns the largest value.\n//   Return null if the value is equal.\n//   Note: If a string is represented as a number, the floating point might be. or,\n// \n//   largestNumber([ 1, 2.5 ]) ➞ 2.5\n//   largestNumber([ 1, \"2,3\" ]) ➞ \"2,3\"\n//   largestNumber([ \"5,1\", \"6\" ]) ➞ \"6\"\n//   largestNumber([ \"1\", 1 ]) ➞ null\n// const largestNumber = (a) => {\n  let aa = Number(a)\n  if (typeof a =='string') { aa = Number(a.replace(',', '.')) }\n  if (aa > 0) { return a }\n  return null\n}\n\n//   Create a function that takes an array of numbers, and returns the largest value.\n//   Return null if the value is equal.\n//   Note: If a string is represented as a number, the floating point might be. or,\n// \n//   largestNumber([ 1, 2.5 ]) ➞ 2.5\n//   largestNumber([ 1, \"2,3\" ]) ➞ \"2,3\"\n//   largestNumber([ \"5,1\", \"6\" ]) ➞ \"6\"\n//   largestNumber([ \"1\", 1 ]) ➞ null\n// const largestNumber = (a) => {\n  let aa = Array.from(a)\n  if (typeof a =='string') { aa = Array.from(a.replace(',', '.')) }\n  if (aa.length > 0) { return Math.max(...aa) }\n  return null\n}"}
{"task_id": "JavaScript/138", "prompt": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n", "canonical_solution": "}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "partial": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "// Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == true\n// const isEqualToSumOdd = (n) => {\n  return (n >= 8 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == true\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == true\n// const isEqualToSumOdd = (n) => {\n  return (n >= 6 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == true\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 9 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 8 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 8 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 11 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 6 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 12 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 13 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 8 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 14 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 15 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 8 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 17 positive odd numbers\n//   Example\n//   isEqualToSumOdd(4) == false\n//   isEqualToSumOdd(6) == false\n//   isEqualToSumOdd(8) == false\n// const isEqualToSumOdd = (n) => {\n  return (n >= 6 && n % 2 == 1)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 18 positive even numbers\n//   Example\n//   isEqualToSumEven(4) == false\n//   isEqualToSumEven(6) == false\n//   isEqualToSumEven(8) == false\n// const isEqualToSumEven = (n) => {\n  return (n >= 6 && n % 2 == 0)\n}\n\n// Evaluate whether the given number n can be written as the sum of exactly 19 positive odd numbers\n//   "}
{"task_id": "JavaScript/139", "prompt": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n", "canonical_solution": "      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "partial": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      # print('@@this is the line to split##')\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "gc": "// The Brazilian factorial is defined as:\n//   brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n//   where n > 0\n// \n//   For example:\n//   >>> specialFactorial(4)\n//   288\n// \n//   The function will receive an integer as input and should return the special\n//   factorial of this integer.\n// const specialFactorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p = n;\n    n--;\n  }\n  return t;\n}\n\n// The factorial of a negative integer n is undefined.\n//\n// The function should return the factorial of the given number.\n//\n// Note: The return value of the function should be a number.\nconst factorial = (n) => {\n  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p = n;\n    n--;\n  }\n  return t;\n}\n\n// The function should return the sum of all the divisors of a number n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfDivisors = (n) => {\n  let s = 1;\n  let m = 2;\n  while (m <= n) {\n    if (n % m === 0) {\n      s += m;\n      while (n % m === 0) {\n        n /= m;\n      }\n    }\n    m++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan2 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan3 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i) && isPrime(i * i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan4 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i) && isPrime(i * i * i) && isPrime(i * i * i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan5 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i) && isPrime(i * i * i) && isPrime(i * i * i * i) && isPrime(i * i * i * i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan6 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i) && isPrime(i * i * i) && isPrime(i * i * i * i) && isPrime(i * i * i * i * i) && isPrime(i * i * i * i * i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan7 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i * i) && isPrime(i * i * i) && isPrime(i * i * i * i) && isPrime(i * i * i * i * i) && isPrime(i * i * i * i * i * i) && isPrime(i * i * i * i * i * i * i)) {\n      s += i;\n    }\n    i++;\n  }\n  return s;\n}\n\n// The function should return the sum of all the primes that are less than n.\n//\n// Note: The return value of the function should be a number.\nconst sumOfPrimesLessThan8 = (n) => {\n  let s = 0;\n  let i = 1;\n  while (i <= n) {\n    if (isPrime(i) && isPrime(i"}
{"task_id": "JavaScript/140", "prompt": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n", "canonical_solution": "      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "partial": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      # print('@@this is the line to split##')\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "gc": "//   Given a string text, replace all spaces in it with underscores, \n//   and if a string has more than 2 consecutive spaces, \n//   then replace all consecutive spaces with - \n//    \n//   fixSpaces(\"Example\") == \"Example\"\n//   fixSpaces(\"Example 1\") == \"Example_1\"\n//   fixSpaces(\" Example 2\") == \"_Example_2\"\n//   fixSpaces(\" Example   3\") == \"_Example-3\"\n// const fixSpaces = (text) => {\n  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] =='') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0\n    }\n    else { t += text[i] }\n  }\n  return t\n}\n//   \n// \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   \n//   "}
{"task_id": "JavaScript/141", "prompt": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n", "canonical_solution": "  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "partial": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  # print('@@this is the line to split##')\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "gc": "// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n// }\n\n// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n// }\n\n// Create a function which takes a string representing a file's name, and returns\n//   'Yes' if the the file's name is valid, and returns 'No' otherwise.\n//   A file's name is considered to be valid if and only if all the following conditions \n//   are met:\n//   - There should not be more than three digits ('0'-'9') in the file's name.\n//   - The file's name contains exactly one dot '.'\n//   - The substring before the dot should not be empty, and it starts with a letter from \n//   the latin alphapet ('a'-'z' and 'A'-'Z').\n//   - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n//   Examples:\n//   fileNameCheck(\"example.txt\") # => 'Yes'\n//   fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n// const fileNameCheck = (file_name) => {\n  let t = file_name.split(/\\./)\n  if (t.length!= 2) { return 'No' }\n  if (t[1]!= 'txt' && t[1]!= 'dll' && t[1]!= 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  return 'Yes'\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n", "canonical_solution": "    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "partial": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    # print('@@this is the line to split##')\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "gc": "// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n\n// \"\n//   This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n//   multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n//   change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n//    \n//   Examples:\n//   For lst = [1,2,3] the output should be 6\n//   For lst = []  the output should be 0\n//   For lst = [-1,-5,2,-1,-5]  the output should be -126\n// const sumSquares = (lst) => {\n  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n  }\n  return y\n}\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "partial": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      # print('@@this is the line to split##')\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "gc": "//   You are given a string representing a sentence,\n//   the sentence contains some words separated by a space,\n//   and you have to return a string that contains the words from the original sentence,\n//   whose lengths are prime numbers,\n//   the order of the words in the new string should be the same as the original one.\n// \n//   Example 1:\n//       Input: sentence = \"This is a test\"\n//       Output: \"is\"\n// \n//   Example 2:\n//       Input: sentence = \"lets go for swimming\"\n//       Output: \"go for\"\n// \n//   Constraints:\n//       * 1 <= len(sentence) <= 100\n//       * sentence contains only letters\n// const wordsInSentence = (sentence) => {\n  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) {\n        u = i\n        break\n      }\n    }\n    p += t[j][0] + u\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n", "canonical_solution": "  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "partial": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  # print('@@this is the line to split##')\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "gc": "// Your task is to implement a function that will simplify the expression\n//   x * n. The function returns true if x * n evaluates to a whole number and false\n//   otherwise. Both x and n, are string representation of a fraction, and have the following format,\n//   <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n// \n//   You can assume that x, and n are valid fractions, and do not have zero as denominator.\n// \n//   simplify(\"1/5\", \"5/1\") = true\n//   simplify(\"1/6\", \"2/1\") = false\n//   simplify(\"7/10\", \"10/2\") = false\n// const simplify = (x, n) => {\n  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  if(a[1] === \"\" && b[1] === \"\"){\n    return true\n  }else{\n    let d = Number(a[1]) * Number(b[1])\n    return m % d === 0\n  }\n  \n  // return (x, n) => {\n  //   let a = x.split(/\\//)\n  //   let b = n.split(/\\//)\n  //   let m = Number(a[0]) * Number(b[0])\n  //   if(a[1] === \"\" && b[1] === \"\"){\n  //     return true\n  //   }else{\n  //     let d = Number(a[1]) * Number(b[1])\n  //     return m % d === 0\n  //   }\n  // }\n  \n}\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n", "canonical_solution": "      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "partial": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      # print('@@this is the line to split##')\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "//   Write a function which sorts the given list of integers\n//   in ascending order according to the sum of their digits.\n//   Note: if there are several items with similar sum of their digits,\n//   order them based on their index in original list.\n// \n//   For example:\n//   >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n//   >>> orderByPoints([]) == []\n// const orderByPoints = (nums) => {\n  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      if (h === 0 && d === 0) {\n        if (m === 0) {\n          if (u === -1) { m = 1; }\n          else { m = u; }\n        }\n        if (n === 0) {\n          if (y === -1) { n = 1; }\n          else { n = y; }\n        }\n        p[k] = m;\n        p[k + 1] = n;\n        break;\n      }\n    }\n  }\n  return p\n}\n\nconst points = [1, 11, -1, -11, -12]\nconsole.log(orderByPoints(points))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n", "canonical_solution": "      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "partial": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      # print('@@this is the line to split##')\n      p++\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that takes an array of numbers as input and returns \n//   the number of elements in the array that are greater than 10 and both \n//   first and last digits of a number are odd (1, 3, 5, 7, 9).\n//   For example:\n//   specialFilter([15, -73, 14, -15]) => 1 \n//   specialFilter([33, -2, -3, 45, 21, 109]) => 2\n// const specialFilter = (nums) => {\n  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p += 1\n    }\n  }\n  return p\n\n// Test your solution using the test cases below.\n// Note that test cases are given in ascending order.\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 1\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 2\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15]]\n// => 1\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 2\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 3\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 3\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 3\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 3\n\n// [[15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109], [15, -73, 14, -15], [33, -2, -3, 45, 21, 109]]\n// => 3\n\n// [[15"}
{"task_id": "JavaScript/147", "prompt": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n", "canonical_solution": "      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "partial": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      # print('@@this is the line to split##')\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "gc": "//   You are given a positive integer n. You have to create an integer array a of length n.\n//       For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n//       Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n//   and a[i] + a[j] + a[k] is a multiple of 3.\n// \n//   Example :\n//       Input: n = 5\n//       Output: 1\n//       Explanation: \n//       a = [1, 3, 7, 13, 21]\n//       The only valid triple is (1, 7, 13).\n// const getMaxTriples = (n) => {\n  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      let sum = y[i] + y[j] + y[n - 1]\n      if (sum % 3 === 0) {\n        u += 1\n      }\n    }\n  }\n  return u\n}\n\n// function getMaxTriples(n) {\n//   let y = []\n//   for (let i = 1; i <= n; i++) {\n//     y.push(i * i - i + 1)\n//   }\n//   let u = 0\n//   for (let i = 0; i < n - 2; i++) {\n//     for (let j = i + 1; j < n - 1; j++) {\n//       let sum = y[i] + y[j] + y[n - 1]\n//       if (sum % 3 === 0) {\n//         u += 1\n//       }\n//     }\n//   }\n//   return u\n// }\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n", "canonical_solution": "  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "partial": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  # print('@@this is the line to split##')\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "gc": "// There are eight planets in our solar system: the closerst to the Sun\n//   is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n//   Uranus, Neptune.\n//   Write a function that takes two planet names as strings planet1 and planet2.\n//   The function should return a tuple containing all planets whose orbits are\n//   located between the orbit of planet1 and the orbit of planet2, sorted by\n//   the proximity to the sun.\n//   The function should return an empty tuple if planet1 or planet2\n//   are not correct planet names.\n//   Examples\n//   bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n//   bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n//   bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n// const bf = (planet1, planet2) => {\n  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  for (let i = lo; i <= hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\nconsole.log(bf('Jupiter', 'Mercury'))\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n", "canonical_solution": "            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "partial": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            # print('@@this is the line to split##')\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "gc": "// Write a function that accepts a list of strings as a parameter,\n//   deletes the strings that have odd lengths from it,\n//   and returns the resulted list with a sorted order,\n//   The list is always a list of strings and never an array of numbers,\n//   and it may contain duplicates.\n//   The order of the list should be ascending by length of each word, and you\n//   should return the list sorted by that rule.\n//   If two words have the same length, sort the list alphabetically.\n//   The function should return a list of strings in sorted order.\n//   You may assume that all words will have the same length.\n//   For example:\n//   assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n//   assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n// const sortedListSum = (lst) => {\n  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let t = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = t\n      }\n    }\n  }\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n", "canonical_solution": "    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "partial": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    # print('@@this is the line to split##')\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "gc": "// A simple program which should return the value of x if n is \n//   a prime number and should return the value of y otherwise.\n// \n//   Examples:\n//   for xOrY(7, 34, 12) == 34\n//   for xOrY(15, 8, 5) == 5\n//    \n// const xOrY = (n, x, y) => {\n  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (n % i === 0) { return x }\n  }\n  return y\n}\n\nconsole.log(xOrY(7, 34, 12))\nconsole.log(xOrY(15, 8, 5))\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n", "canonical_solution": "    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "partial": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n      # print('@@this is the line to split##')\n    }\n  }\n  return p\n}\n\n", "gc": "// Given a list of numbers, return the sum of squares of the numbers\n//   in the list that are odd. Ignore numbers that are negative or not integers.\n//   doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n//   doubleTheDifference([-1, -2, 0]) == 0\n//   doubleTheDifference([9, -2]) == 81\n//   doubleTheDifference([0]) == 0\n//   If the input list is empty, return 0.\n// const doubleTheDifference = (lst) => {\n  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  const oddNums = lst.filter(num => num % 2 === 1)\n  const total = sumOfSquares(oddNums)\n  return total\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n", "canonical_solution": " game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "partial": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n # print('@@this is the line to split##')\n game[i]=-game[i];  }\n  return game\n}\n\n", "gc": "// I think we all remember that feeling when the result of some long-awaited\n//   event is finally known. The feelings and thoughts you have at that moment are\n//   definitely worth noting down and comparing.\n//   Your task is to determine if a person correctly guessed the results of a number of matches.\n//   You are given two arrays of scores and guesses of equal length, where each index shows a match. \n//   Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n//   the value is 0, and if not, the value is the absolute difference between the guess and the score.\n//    \n//    \n//   example:\n// \n//   compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n//   compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n// const compare = (game, guess) => {\n  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n  game[i] = 0\n  }\n  \n  return game\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n", "canonical_solution": "    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "partial": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n      # print('@@this is the line to split##')\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "gc": "// You will be given the name of a class (a string) and a list of extensions.\n//   The extensions are to be used to load additional classes to the class. The\n//   strength of the extension is as follows: Let CAP be the number of the uppercase\n//   letters in the extension's name, and let SM be the number of lowercase letters\n//   in the extension's name, the strength is given by the fraction CAP - SM.\n//   You should find the strongest extension and return a string in this\n//   format: ClassName.StrongestExtensionName.\n//   If there are two or more extensions with the same strength, you should\n//   choose the one that comes first in the list.\n//   For example, if you are given \"Slices\" as the class and a list of the\n//   extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//   return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n//   (its strength is -1).\n//   Example:\n//   for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n// const strongestExtension = (class_name, extensions) => {\n  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y > u) {\n      u = y\n      s = i\n    }\n  }\n  return class_name + '.' + extensions[s]\n// }\n\n// Given a class name, return the class name with all underscores replaced by spaces.\n//   For example, given 'MyClass', return 'My Class'\n// const normalizeClassName = (class_name) => {\n  let k = 0\n  let n = class_name.length\n  let i = 0\n  let str = ''\n  for (; i < n; i++) {\n    if (class_name[i]!= '_') {\n      str += class_name[i]\n    }\n  }\n  for (i = 0; i < str.length; i++) {\n    if (str[i] == '_') {\n      str = str.substr(0, i) +'' + str.substr(i + 1)\n    }\n  }\n  return str\n// }\n\n// Given a class name, return the class name with all underscores replaced by hyphens.\n//   For example, given 'MyClass', return 'My-Class'\n// const normalizeClassNameWithHyphens = (class_name) => {\n  let k = 0\n  let n = class_name.length\n  let i = 0\n  let str = ''\n  for (; i < n; i++) {\n    if (class_name[i]!= '_') {\n      str += class_name[i]\n    }\n  }\n  for (i = 0; i < str.length; i++) {\n    if (str[i] == '_') {\n      str = str.substr(0, i) + '-' + str.substr(i + 1)\n    }\n  }\n  return str\n// }\n\n// Given a class name, return the class name with all hyphens replaced by underscores.\n//   For example, given 'My-Class', return 'My_Class'\n// const normalizeClassNameWithUnderscores = (class_name) => {\n  let k = 0\n  let n = class_name.length\n  let i = 0\n  let str = ''\n  for (; i < n; i++) {\n    if (class_name[i]!= '-') {\n      str += class_name[i]\n    }\n  }\n  for (i = 0; i < str.length; i++) {\n    if (str[i] == '-') {\n      str = str.substr(0, i) + '_' + str.substr(i + 1)\n    }\n  }\n  return str\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "partial": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "gc": "// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n//   cycpatternCheck(\"abcd\",\"abd\") => false\n//   cycpatternCheck(\"hello\",\"ell\") => true\n//   cycpatternCheck(\"whassup\",\"psus\") => false\n//   cycpatternCheck(\"abab\",\"baa\") => true\n//   cycpatternCheck(\"efef\",\"eeff\") => false\n//   cycpatternCheck(\"himenss\",\"simen\") => true\n// const cycpatternCheck = (a, b) => {\n  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k]!= pat[j + k]) { y = 0 }\n      }\n      if (y) {\n        console.log(\"true\")\n        return true\n      }\n    }\n  }\n  console.log(\"false\")\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n", "canonical_solution": "    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "partial": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    # print('@@this is the line to split##')\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "gc": "// Given an integer. return a tuple that has the number of even and odd digits respectively.\n// \n//    Example:\n//       evenOddCount(-12) ==> (1, 1)\n//       evenOddCount(123) ==> (1, 2)\n// const evenOddCount = (num) => {\n  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = num / 2\n  }\n  return (e, o)\n}\n\n// Given two integers a and b, return their sum, or -1 if no solution exists.\n// \n//    Example:\n//       add(1, 2) ==> 3\n//       add(3, 3) ==> 6\n//       add(4, 5) ==> -1\n// const add = (a, b) => {\n  let a = parseInt(a)\n  let b = parseInt(b)\n  if (a > b) { return add(b, a) }\n  if (a < b) { return add(a, b) }\n  if (a == b) { return a }\n  return -1\n}\n\n// Given two integers a and b, return their sum, or -1 if no solution exists.\n// \n//    Example:\n//       add(1, 2) ==> 3\n//       add(3, 3) ==> 6\n//       add(4, 5) ==> -1\n// const add = (a, b) => {\n  let a = parseInt(a)\n  let b = parseInt(b)\n  if (a > b) { return add(b, a) }\n  if (a < b) { return add(a, b) }\n  if (a == b) { return a }\n  return -1\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n  }\n  return o + e\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n  }\n  return o + e\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n  }\n  return o + e\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n  }\n  return o + e\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n  }\n  return o + e\n}\n\n// Given an integer n, return the number of ways to write the number as a sum of\n// odd or even digits.\n// \n//    Example:\n//       numDigits(4) ==> 4\n//       numDigits(5) ==> 6\n//       numDigits(1) ==> 1\n//       numDigits(11) ==> 5\n//       numDigits(9) ==> 2\n// const numDigits = (n) => {\n  let o = 0\n  let e = 0\n  if (n < 0) { n = -n }\n  while (n > 0) {\n    if (n % 2 == 0) { e++ }\n    else { o++ }\n    n = n / 2\n"}
{"task_id": "JavaScript/156", "prompt": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n", "canonical_solution": "    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "partial": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    # print('@@this is the line to split##')\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "gc": "//   Given a positive integer, obtain its roman numeral equivalent as a string,\n//   and return it in lowercase.\n//   Restrictions: 1 <= num <= 1000\n// \n//   Examples:\n//   >>> intToMiniRoman(19) == 'xix'\n//   >>> intToMiniRoman(152) == 'clii'\n//   >>> intToMiniRoman(426) == 'cdxxvi'\n// const intToMiniRoman = (number) => {\n  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm','m']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    res += sym[i]\n    i--\n    if (div == 1) {\n      res += sym[i]\n    }\n  }\n  return res.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n", "canonical_solution": "}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "partial": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n  # print('@@this is the line to split##')\n}\n\n", "gc": "//  Given the lengths of the three sides of a triangle. Return true if the three\n//   sides form a right-angled triangle, false otherwise.\n//   A right-angled triangle is a triangle in which one angle is right angle or\n//   90 degree.\n//   Example:\n//   rightAngleTriangle(3, 4, 5) == true\n//   rightAngleTriangle(1, 2, 3) == false\n// const rightAngleTriangle = (a, b, c) => {\n  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n//  Given the lengths of the three sides of a triangle. Return the length of the\n//  shortest side of the triangle.\n//   a > b > c\n//   Example:\n//   shortestSide(3, 4, 5) == 3\n//   shortestSide(1, 2, 3) == 1\n// const shortestSide = (a, b, c) => {\n  return Math.min(Math.min(a, b), c)\n}\n\n//  Given the lengths of the three sides of a triangle. Return the area of the\n//  triangle.\n//   a > b > c\n//   Example:\n//   area(3, 4, 5) == (3 * 4 + 5 * 5) / 2\n// const area = (a, b, c) => {\n  return (a * b + b * c + c * a) / 2\n}\n\n//  Given a list of triangle sides. Return the sum of the lengths of the sides.\n//   Example:\n//   sides(3, 4, 5) == 8\n// const sides = (a, b, c) => {\n  return a + b + c\n}\n\n//  Given a list of triangle sides. Return the product of the lengths of the\n//  sides.\n//   Example:\n//   sides(3, 4, 5) == 12\n// const sides = (a, b, c) => {\n  return a * b * c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n", "canonical_solution": "      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "partial": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n        # print('@@this is the line to split##')\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "gc": "// Write a function that accepts a list of strings.\n//   The list contains different words. Return the word with maximum number\n//   of unique characters. If multiple strings have maximum number of unique\n//   characters, return the one which comes first in lexicographical order.\n// \n//   findMax([\"name\", \"of\", \"string\"]) === \"string\"\n//   findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n//   findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n// const findMax = (words) => {\n  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (p < y) { p = y }\n    }\n    if (s < p) { s = p; u = i }\n  }\n  return words[u]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n", "canonical_solution": "  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "partial": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n    # print('@@this is the line to split##')\n  }\n  return [remaining + number, 0]\n}\n\n", "gc": "//   You're a hungry rabbit, and you already have eaten a certain number of carrots,\n//   but now you need to eat more carrots to complete the day's meals.\n//   you should return an array of [ total number of eaten carrots after your meals,\n//                                   the number of carrots left after your meals ]\n//   if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n//    \n//   Example:\n//   * eat(5, 6, 10) -> [11, 4]\n//   * eat(4, 8, 9) -> [12, 1]\n//   * eat(1, 10, 10) -> [11, 0]\n//   * eat(2, 11, 5) -> [7, 0]\n//    \n//   Variables:\n//   @number : integer\n//       the number of carrots that you have eaten.\n//   @need : integer\n//       the number of carrots that you need to eat.\n//   @remaining : integer\n//       the number of remaining carrots thet exist in stock\n//    \n//   Constrain:\n//   * 0 <= number <= 1000\n//   * 0 <= need <= 1000\n//   * 0 <= remaining <= 1000\n// \n//   Have fun :)\n// const eat = (number, need, remaining) => {\n  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [number, remaining]\n}\n\nmodule.exports = eat\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n", "canonical_solution": "        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "partial": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        # print('@@this is the line to split##')\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "gc": "//   Given two lists operator, and operand. The first list has basic algebra operations, and \n//   the second list is a list of integers. Use the two given lists to build the algebric \n//   expression and return the evaluation of this expression.\n// \n//   The basic algebra operations:\n//   Addition ( + ) \n//   Subtraction ( - ) \n//   Multiplication ( * ) \n//   Floor division ( // ) \n//   Exponentiation ( ** ) \n// \n//   Example:\n//   operator['+', '*', '-']\n//   array = [2, 3, 4, 5]\n//   result = 2 + 3 * 4 - 5\n//   => result = 9\n// \n//   Note:\n//       The length of operator list is equal to the length of operand list minus one.\n//       Operand is a list of of non-negative integers.\n//       Operator list has at least one operator, and operand list has at least two operands.\n// \n// const doAlgebra = (operator, operand) => {\n  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n  }\n  if (operand.length > 0) {\n    return operand[0]\n  }\n  else {\n    return 0\n  }\n}\n\n// const doAlgebra = (operator, operand) => {\n//   // Note: The operator and operand are lists of non-negative integers.\n//   // Note: The length of operator list is equal to the length of operand list minus one.\n//   let y = 0\n//   while (operator.length > 0) {\n//     let u = 0\n//     for (let i = operator.length - 1; i >= 0; i--) {\n//       if (operator[i] == '**') {\n//         let u = operand[i]\n//         while (operand[i + 1] > 1) {\n//           operand[i + 1]--;\n//           operand[i] *= u;\n//         }\n//         operand.splice(i + 1, 1)\n//         operator.splice(i, 1)\n//         y = 1\n//         break\n//       }\n//     }\n//     if (y == 1) { break }\n//     for (let i = 0; i < operator.length; i++) {\n//       if (operator[i] == '*') {\n//         operand[i] *= operand[i + 1]\n//         operand.splice(i + 1, 1)\n//         operator.splice(i, 1)\n//         y = 1\n//         break\n//       }\n//       else if (operator[i] == '//') {\n//         operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n//         operand.splice(i + 1, 1)\n//         operator.splice(i, 1)\n//         y = 1\n//         break\n//       }\n//       else if (operator[i] == '-') {\n//         operand[i] -= operand[i + 1]\n//         operand.splice(i + 1, 1)\n//         operator.splice(i, 1)\n//         y = 1\n//         break\n//       }\n//       else if (operator[i] == '+') {\n//         operand[i] += operand[i + 1]\n//         operand.splice(i + 1, 1)\n//         operator.splice(i, 1)\n//         y = 1\n//         break\n//       }\n//     }\n//   }\n//   if (operand.length > 0) {\n//     return operand[0]\n//   }\n//   else {\n//     return 0\n//   }\n// }\n\n// const doAlgebra = (operator, operand) => {\n//   let i = 0\n//   let j = 0\n//   let k = 0\n//   while (i < operator.length) {\n//     let x = 0\n//     let y = 0\n//     let z = 0\n//     let n = 0\n//     for (let m = j; m < j + operand[i] && m < operator.length; m++) {\n//       x = operator[m]\n//       if (x == '*') {\n//         y = operand[i]\n//         while (operand[i + 1] > 1) {\n//           operand[i + 1]--;\n//           "}
{"task_id": "JavaScript/161", "prompt": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n", "canonical_solution": "    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "partial": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n      # print('@@this is the line to split##')\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "gc": "// You are given a string s.\n//   if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//   otherwise keep it as it is.\n//   If the string contains no letters, reverse the string.\n//   The function should return the resulted string.\n//   Examples\n//   solve(\"1234\") = \"4321\"\n//   solve(\"ab\") = \"AB\"\n//   solve(\"#a@C\") = \"#A@c\"\n// const solve = (s) => {\n  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y);\n  }\n  return t? p : s;\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n", "canonical_solution": "  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "partial": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  # print('@@this is the line to split##')\n  return md5(text)\n}\n\n", "gc": "//   Given a string 'text', return its md5 hash equivalent string.\n//   If 'text' is an empty string, return null.\n// \n//   >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n// const stringToMd5 = (text) => {\n  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n// }\n// \n// //--------------------------------------------------------------------------\n// //   A string is an array of Unicode characters.\n// //\n// //   Given a string 'text', return the string with each character \n// //   lowercased.\n// //\n// //   >>> stringToLowerCase('Hello World')\n// const stringToLowerCase = (text) => {\n  var result = []\n  for (var i = 0; i < text.length; i++) {\n    result.push(text.charCodeAt(i).toString(16).toLowerCase())\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   uppercased.\n// //\n// //   >>> stringToUpperCase('Hello world') == 'HELLO WORLD'\n// const stringToUpperCase = (text) => {\n  var result = []\n  for (var i = 0; i < text.length; i++) {\n    result.push(text.charCodeAt(i).toString(16).toUpperCase())\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   capitalized.\n// //\n// //   >>> stringToCapitalized('Hello world') == 'Hello World'\n// const stringToCapitalized = (text) => {\n  var result = []\n  for (var i = 0; i < text.length; i++) {\n    result.push(text.charCodeAt(i).toString(16).toUpperCase())\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   translated to upper case.\n// //\n// //   >>> stringToTranslated('Hello world') == 'Hello world'\n// const stringToTranslated = (text) => {\n  var result = []\n  for (var i = 0; i < text.length; i++) {\n    result.push(text.charCodeAt(i).toString(16).toUpperCase())\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   translated to lower case.\n// //\n// //   >>> stringToTranslated('Hello world') == 'hello world'\n// const stringToTranslated = (text) => {\n  var result = []\n  for (var i = 0; i < text.length; i++) {\n    result.push(text.charCodeAt(i).toString(16).toUpperCase())\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   replaced by the first character of the next word.\n// //\n// //   >>> stringToNextWord('Hello world') == 'Hello'\n// const stringToNextWord = (text) => {\n  var result = []\n  var index = 0\n  var i = 0\n  while (i < text.length) {\n    if (text.charCodeAt(i) == 32) {\n      result.push(text.charCodeAt(i + 1).toString(16).toUpperCase())\n      i += 2\n    } else {\n      result.push(text.charCodeAt(i).toString(16).toUpperCase())\n      i++\n    }\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   replaced by the first character of the next sentence.\n// //\n// //   >>> stringToNextSentence('Hello world') == 'Hello world'\n// const stringToNextSentence = (text) => {\n  var result = []\n  var index = 0\n  var i = 0\n  while (i < text.length) {\n    if (text.charCodeAt(i) == 32) {\n      result.push(text.charCodeAt(i + 1).toString(16).toUpperCase())\n      i += 2\n    } else {\n      if (text.charCodeAt(i) == 13 && text.charCodeAt(i + 1) == 10) {\n        result.push(text.charCodeAt(i + 1).toString(16).toUpperCase())\n        i += 2\n      } else {\n        result.push(text.charCodeAt(i).toString(16).toUpperCase())\n        i++\n      }\n    }\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   replaced by the first character of the next word.\n// //\n// //   >>> stringToNextWord('Hello world') == 'Hello'\n// const stringToNextWord = (text) => {\n  var result = []\n  var index = 0\n  var i = 0\n  while (i < text.length) {\n    if (text.charCodeAt(i) == 32) {\n      result.push(text.charCodeAt(i + 1).toString(16).toUpperCase())\n      i += 2\n    } else {\n      result.push(text.charCodeAt(i).toString(16).toUpperCase())\n      i++\n    }\n  }\n  return result.join('')\n// }\n// \n// //--------------------------------------------------------------------------\n// //   Given a string 'text', return the string with each character \n// //   replaced by the first character of the next sentence.\n// //\n// //   >>> stringToNextSentence('Hello world') == 'Hello world'\n// const stringToNextSentence = (text) => {\n  var"}
{"task_id": "JavaScript/163", "prompt": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n", "canonical_solution": "  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "partial": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  # print('@@this is the line to split##')\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "gc": "//   Given two positive integers a and b, return the even digits between a\n//   and b, in ascending order.\n// \n//   For example:\n//   generateIntegers(2, 8) => [2, 4, 6, 8]\n//   generateIntegers(8, 2) => [2, 4, 6, 8]\n//   generateIntegers(10, 14) => []\n// const generateIntegers = (a, b) => {\n  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i <= b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  let i = a;\n  while (i < b) {\n    result.push(i);\n    i += 2;\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i < b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i < b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\nconst generateIntegers = (a, b) => {\n  let result = [];\n  for (let i = a; i <= b; i += 2) {\n    result.push(i);\n  }\n  return result;\n};\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i < b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n// const generateIntegers = (a, b) => {\n//   let result = [];\n//   for (let i = a; i <= b; i += 2) {\n//     result.push(i);\n//   }\n//   return result;\n// };\n\n//"}
