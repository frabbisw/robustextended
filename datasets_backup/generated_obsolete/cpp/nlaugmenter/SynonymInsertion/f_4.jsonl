{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers closer cheeseparing to each other than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheck if in given vector of numbers, are any two numbers closer cheeseparing to each other than \n given threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tif(numbers.size() <= 1)\n\t\treturn false;\n\tfloat last = numbers[0];\n\tfor(int i = 1; i < numbers.size(); i++){\n\t\tfloat current = numbers[i];\n\t\tif(abs(current - last) <= threshold)\n\t\t\treturn true;\n\t\tlast = current;\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(6.0);\n\tnumbers.push_back(7.0);\n\tnumbers.push_back(8.0);\n\tnumbers.push_back(9.0);\n\tnumbers.push_back(10.0);\n\tnumbers.push_back(11.0);\n\tnumbers.push_back(12.0);\n\tnumbers.push_back(13.0);\n\tnumbers.push_back(14.0);\n\tnumbers.push_back(15.0);\n\tnumbers.push_back(16.0);\n\tnumbers.push_back(17.0);\n\tnumbers.push_back(18.0);\n\tnumbers.push_back(19.0);\n\tnumbers.push_back(20.0);\n\tnumbers.push_back(21.0);\n\tnumbers.push_back(22.0);\n\tnumbers.push_back(23.0);\n\tnumbers.push_back(24.0);\n\tnumbers.push_back(25.0);\n\tnumbers.push_back(26.0);\n\tnumbers.push_back(27.0);\n\tnumbers.push_back(28.0);\n\tnumbers.push_back(29.0);\n\tnumbers.push_back(30.0);\n\tnumbers.push_back(31.0);\n\tnumbers.push_back(32.0);\n\tnumbers.push_back(33.0);\n\tnumbers.push_back(34.0);\n\tnumbers.push_back(35.0);\n\tnumbers.push_back(36.0);\n\tnumbers.push_back(37.0);\n\tnumbers.push_back(38.0);\n\tnumbers.push_back(39.0);\n\tnumbers.push_back(40.0);\n\tnumbers.push_back(41.0);\n\tnumbers.push_back(42.0);\n\tnumbers.push_back(43.0);\n\tnumbers.push_back(44.0);\n\tnumbers.push_back(45.0);\n\tnumbers.push_back(46.0);\n\tnumbers.push_back(47.0);\n\tnumbers.push_back(48.0);\n\tnumbers.push_back(49.0);\n\tnumbers.push_back(50.0);\n\tnumbers.push_back(51.0);\n\tnumbers.push_back(52.0);\n\tnumbers.push_back(53.0);\n\tnumbers.push_back(54.0);\n\tnumbers.push_back(55.0);\n\tnumbers.push_back(56.0);\n\tnumbers.push_back(57.0);\n\tnumbers.push_back(58.0);\n\tnumbers.push_back(59.0);\n\tnumbers.push_back(60.0);\n\tnumbers.push_back(61.0);\n\tnumbers.push_back(62.0);\n\tnumbers.push_back(63.0);\n\tnumbers.push_back(64.0);\n\tnumbers.push_back(65.0);\n\tnumbers.push_back(66.0);\n\tnumbers.push_back(67.0);\n\tnumbers.push_back(68.0);\n\tnumbers.push_back(69.0);\n\tnumbers.push_back(70.0);\n\tnumbers.push_back(71.0);\n\tnumbers.push_back(72.0);\n\tnumbers.push_back(73.0);\n\tnumbers.push_back(74.0);\n\tnumbers.push_back(75.0);\n\tnumbers.push_back(76.0);\n\tnumbers.push_back(77.0);\n\tnumbers.push_back(78.0);\n\tnumbers.push_back(79.0);\n\tnumbers.push_back(80.0);\n\tnumbers.push_back(81.0);\n\tnumbers.push_back(82.0);\n\tnumbers.push_back(83.0);\n\tnumbers.push_back(84.0);\n\tnumbers.push_back(85.0);\n\tnumbers.push_back(86.0);\n\tnumbers.push_back(87.0);\n\tnumbers.push_back(88.0);\n\tnumbers.push_back(89.0);\n\tnumbers.push_back(90.0);\n\tnumbers.push_back(91.0);\n\tnumbers.push_back(92.0);\n\tnumbers.push_back(93.0);\n\tnumbers.push_back(94.0);\n\tnumbers.push_back(95.0);\n\tnumbers.push_back(96.0);\n\tnumbers.push_back(97.0);\n\tnumbers.push_back(98.0);\n\tnumbers.push_back(99.0);\n\tnumbers.push_back("}
{"task_id": "CPP/1", "prompt": "/*\nInput to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n separate divide those group into separate strings drawstring and return the vector of those. \n Separate groups are balanced (each open brace pair is properly closed) and not nested nest within each other \n Ignore dismiss any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string drawstring containing multiple groups group of nested parentheses parenthesis. Your goal is to \n separate divide those group into separate strings drawstring and return the vector of those. \n Separate groups are balanced (each open brace pair is properly closed) and not nested nest within each other \n Ignore dismiss any spaces in the input string.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> separate_groups;\n    stack<char> stk;\n    for(int i=0; i<paren_string.length(); i++){\n        if(paren_string[i]=='('){\n            stk.push('(');\n        }\n        else if(paren_string[i]==')'){\n            if(stk.empty()){\n                return separate_groups;\n            }\n            char top = stk.top();\n            if(top=='('){\n                stk.pop();\n            }\n            else{\n                separate_groups.push_back(string(1, top));\n                stk.pop();\n            }\n        }\n        else{\n            if(!stk.empty()){\n                separate_groups.push_back(string(1, paren_string[i]));\n            }\n        }\n    }\n    return separate_groups;\n}\nint main(){\n    string paren_string = \"()()()()\";\n    vector<string> separate_groups = separate_paren_groups(paren_string);\n    for(int i=0; i<separate_groups.size(); i++){\n        printf(\"%s\\n\", separate_groups[i].c_str());\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/2", "prompt": "/*\nGiven a positive floating float point number, it can be decomposed disintegrate into \n and integer part (largest big integer smaller than given pass number) and decimals decimal fraction \n (leftover part always smaller than 1). \n\n Return the decimal part share of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive floating float point number, it can be decomposed disintegrate into \n and integer part (largest big integer smaller than given pass number) and decimals decimal fraction \n (leftover part always smaller than 1). \n\n Return the decimal part share of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n    float decimal_part,integer_part;\n    float decimal_part_share;\n    int int_part;\n    int int_part_share;\n    int i;\n    int num_decimals;\n    num_decimals=0;\n    while(number-floor(number)>=0.000001)\n        num_decimals++;\n    \n    if(num_decimals>0){\n        decimal_part=number-floor(number);\n        integer_part=floor(number);\n        int_part_share=0;\n        for(i=num_decimals;i>0;i--){\n            int_part_share=int_part_share+(int_part%10);\n            int_part=int_part/10;\n        }\n        decimal_part_share=decimal_part*10;\n        decimal_part_share=int_part_share+decimal_part_share;\n        \n        return decimal_part_share;\n    }\n    else{\n        return number;\n    }\n}\n\n/*\nGiven a positive floating float point number, it can be decomposed disintegrate into \n and integer part (largest big integer smaller than given pass number) and decimals decimal fraction \n (leftover part always smaller than 1). \n\n Return the decimal part share of the number.\n>>> truncate_number(3.5)\n0.5\n*/\nfloat truncate_number(float number){\n    float decimal_part,integer_part;\n    float decimal_part_share;\n    int int_part;\n    int int_part_share;\n    int i;\n    int num_decimals;\n    num_decimals=0;\n    while(number-floor(number)>=0.000001)\n        num_decimals++;\n    \n    if(num_decimals>0){\n        decimal_part=number-floor(number);\n        integer_part=floor(number);\n        int_part_share=0;\n        for(i=num_decimals;i>0;i--){\n            int_part_share=int_part_share+(int_part%10);\n            int_part=int_part/10;\n        }\n        decimal_part_share=decimal_part*10;\n        decimal_part_share=int_part_share+decimal_part_share;\n        \n        return decimal_part_share;\n    }\n    else{\n        return number;\n    }\n}\n\nint main(){\n    float number;\n    printf(\"Please enter a float number : \");\n    scanf(\"%f\",&number);\n    \n    printf(\"Decimal part of %f is %f\\n\",number,truncate_number(number));\n    \n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank depository financial institution account that starts get down with \n zero balance. Your task undertaking is to detect if at any point the balance balance wheel of account falls descend below zero, and \n at that point function should return true. Otherwise differently it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re given a vector of deposit and withdrawal operations on a bank depository financial institution account that starts get down with \n zero balance. Your task undertaking is to detect if at any point the balance balance wheel of account falls descend below zero, and \n at that point function should return true. Otherwise differently it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    vector<int> dp;\n    for(int i=0; i<operations.size(); i++){\n        dp.push_back(operations[i]);\n    }\n    int n=operations.size();\n    int sum=0;\n    for(int i=0; i<n; i++){\n        sum+=dp[i];\n    }\n    if(sum<0) return true;\n    else return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v;\n    for(int i=0; i<n; i++){\n        int t;\n        scanf(\"%d\",&t);\n        v.push_back(t);\n    }\n    if(below_zero(v)) printf(\"true\");\n    else printf(\"false\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average modal absolute difference between each \n element chemical element and a centerpoint (mean in this case shell ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of input numbers, calculate Mean Absolute Deviation \n around the mean of this dataset. \n Mean Absolute Deviation is the average modal absolute difference between each \n element chemical element and a centerpoint (mean in this case shell ): \n MAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\tint number_of_values = numbers.size();\n\tfloat sum = 0.0;\n\tfor(int i = 0; i < number_of_values; i++){\n\t\tsum = sum + (fabs(numbers[i]) - numbers[i] );\n\t}\n\treturn sum/number_of_values;\n}\n\n/*\nFor a given vector of input numbers, calculate Standard Deviation \n around the mean of this dataset. \n Standard Deviation is the square root of the average of the square of \n differences between each element and the mean. \n>>> mean_standard_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\nfloat mean_standard_deviation(vector<float> numbers){\n\tint number_of_values = numbers.size();\n\tfloat sum = 0.0;\n\tfor(int i = 0; i < number_of_values; i++){\n\t\tsum = sum + (fabs(numbers[i]) - numbers[i] );\n\t}\n\treturn pow(sum/number_of_values, 0.5);\n}\n\n\n/*\nFor a given vector of input numbers, calculate Sum of Squares \n around the mean of this dataset. \n Sum of Squares is the average of the squared differences between each \n element and the mean. \n>>> sum_of_squares({1.0, 2.0, 3.0, 4.0})\n4.0\n*/\nfloat sum_of_squares(vector<float> numbers){\n\tint number_of_values = numbers.size();\n\tfloat sum = 0.0;\n\tfor(int i = 0; i < number_of_values; i++){\n\t\tsum = sum + (fabs(numbers[i]) - numbers[i] );\n\t}\n\treturn sum/number_of_values;\n}\n<|endoftext|>"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutive elements component of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/*\nInsert a number \"delimeter\" between every two consecutive elements component of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tint i = 0;\n\tint j = 0;\n\tint del = delimeter;\n\tint len = numbers.size();\n\tint temp = 0;\n\tvector<int> output;\n\tfor(i = 0; i < len; i++){\n\t\ttemp = numbers[i];\n\t\tif(i == 0 || i == len - 1){\n\t\t\toutput.push_back(temp);\n\t\t}else{\n\t\t\toutput.push_back(temp);\n\t\t\toutput.push_back(del);\n\t\t}\n\t}\n\treturn output;\n}\nint main(){\n\tvector<int> numbers = {1, 2, 3, 4, 5};\n\tint delimeter = 4;\n\tvector<int> output = intersperse(numbers, delimeter);\n\tfor(auto &a : output){\n\t\tprintf(\"%d \", a);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/6", "prompt": "/*\nInput to this function is a string drawstring represented multiple groups group for nested parentheses separated break by spaces. \n For each of the group, output the deepest cryptic level of nesting of parentheses parenthesis. \n E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string drawstring represented multiple groups group for nested parentheses separated break by spaces. \n For each of the group, output the deepest cryptic level of nesting of parentheses parenthesis. \n E.g. (() ()) has maximum maximal two levels of nesting while (( ()) ) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n\tvector<int> num_levels;\n\tint level = 0;\n\tint level_count = 0;\n\tbool is_open = true;\n\tfor(int i = 0; i < paren_string.size(); i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tlevel++;\n\t\t\tlevel_count++;\n\t\t\tif(is_open){\n\t\t\t\tnum_levels.push_back(level_count);\n\t\t\t\tis_open = false;\n\t\t\t}\n\t\t}else if(paren_string[i] == ')'){\n\t\t\tif(!is_open){\n\t\t\t\tlevel--;\n\t\t\t\tlevel_count--;\n\t\t\t\tnum_levels.push_back(level_count);\n\t\t\t}\n\t\t}else{\n\t\t\tis_open = true;\n\t\t}\n\t}\n\tif(is_open){\n\t\tnum_levels.push_back(level_count);\n\t}\n\treturn num_levels;\n}\nint main(){\n\tstring input_str;\n\tcin>>input_str;\n\tvector<int> num_levels = parse_nested_parens(input_str);\n\tfor(int i = 0; i < num_levels.size(); i++){\n\t\tcout<<num_levels[i]<<\" \";\n\t}\n\tcout<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain hold given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that contain hold given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> result;\n\tfor(int i=0; i<strings.size(); i++){\n\t\tif(strings[i].find(substring)!= string::npos){\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\n/*\nFind the maximum sum of two subsets of a given array\n>>> max_sum({1,2,3,4,5})\n7\n>>> max_sum([1,2,3,4,5,6,7,8])\n15\n*/\n#include<vector>\n#include<map>\nint max_sum(vector<int> a){\n\tint sum = 0;\n\tmap<int, int> sum_map;\n\tfor(int i=0; i<a.size(); i++){\n\t\tsum += a[i];\n\t\tsum_map[sum] = sum_map[sum] + 1;\n\t}\n\tint max = 0;\n\tfor(int i=0; i<a.size(); i++){\n\t\tint temp = sum_map[sum - a[i]];\n\t\tif(temp > max) max = temp;\n\t}\n\treturn sum - max;\n}\n\n/*\nGiven a positive integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n\n>>> count_digit_1({2, 3, 5, 7, 9, 11, 13, 17})\n10\n>>> count_digit_1(27)\n8\n>>> count_digit_1(28)\n9\n>>> count_digit_1(31)\n1\n>>> count_digit_1(32)\n2\n>>> count_digit_1(123)\n12\n>>> count_digit_1(100)\n10\n>>> count_digit_1(101)\n10\n>>> count_digit_1(999)\n9\n>>> count_digit_1(1000)\n10\n>>> count_digit_1(1000000)\n11\n*/\n#include<vector>\n#include<iostream>\nint count_digit_1(int n){\n\tvector<int> v;\n\tfor(int i=0; i<=n; i++){\n\t\tv.push_back(i);\n\t}\n\tint count = 0;\n\twhile(v.size() > 1){\n\t\tint max_index = 0;\n\t\tint max_digit = 0;\n\t\tfor(int i=0; i<v.size(); i++){\n\t\t\tint sum = v[i] + v[i+1];\n\t\t\tif(sum > max_digit){\n\t\t\t\tmax_index = i;\n\t\t\t\tmax_digit = sum;\n\t\t\t}\n\t\t}\n\t\tcount += max_digit;\n\t\tv.erase(v.begin() + max_index);\n\t\tv.erase(v.begin() + max_index + 1);\n\t}\n\treturn count;\n}\n\n/*\nGiven a positive integer n, find the largest palindrome made from the product of two 2-digit numbers.\n>>> largest_palindrome({2, 3, 5, 7, 9, 11, 13, 17})\n999\n>>> largest_palindrome(100)\n100\n>>> largest_palindrome(1)\n1\n>>> largest_palindrome(2)\n2\n>>> largest_palindrome(999)\n999\n>>> largest_palindrome(1000)\n999\n*/\n#include<iostream>\n#include<string>\n#include<vector>\nusing namespace std;\nint largest_palindrome(int n){\n\tstring s = to_string(n);\n\tvector<int> v;\n\tfor(int i=0; i<s.size(); i++){\n\t\tv.push_back(atoi(s.substr(i, 2).c_str()));\n\t}\n\tint count = 0;\n\tint max = 0;\n\tfor(int i=0; i<v.size(); i++){\n\t\tfor(int j=i+1; j<v.size(); j++){\n\t\t\tint sum = v[i] * v[j];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t\tcount += max;\n\t\tmax = 0;\n\t}\n\treturn count;\n}\n\n/*\nGiven two non-empty linked lists representing two non-negative integers, return the node which holds the largest number.\nNote: The head of the linked list should not be nil.\n>>> list_largest_node({1, 2, 3, 4, 5}, {1, 2, 3, 4, 5})\n5\n>>> list_largest_node({1, 2, 3, 4, 5}, {6, 7, 8, 9, 10})\n10\n>>> list_largest_node({1, 2, 3, 4, 5, 6, 7}, {1, 2, 3, 4, 5, 6, 7})\n7\n>>> list_largest_node({1, 2, 3, 4, 5, 6, 7}, {8, 9, 10, 11, 12, 13, 14})\n14\n*/\n#include<vector>\n#include<list>\nusing namespace std;\nstruct Node{\n\tint data;\n\tstruct Node *next;\n\tstruct Node *prev;\n};\nstruct Node * list_largest_node(struct Node *head1, struct Node *head2){\n\tif(head1 == NULL){\n\t\treturn head2;\n\t}\n\tif(head2 == NULL){\n\t\treturn head1;\n\t}\n\tstruct Node *temp1 = head1->next;\n\tstruct Node *temp2 = head2->next;\n\tstruct Node *temp = NULL;\n\twhile(temp1!= NULL && temp2!= NULL){\n\t\tif(temp1->data > temp2->data){\n\t\t\ttemp = temp1;\n\t\t\ttemp1 = temp1->next;\n\t\t}else{\n\t\t\ttemp = temp2;\n\t\t\ttemp2 = temp2->next;\n\t\t}\n\t}\n\tif(temp1 == NULL && temp2 == NULL){\n\t\treturn head"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting dwell of a sum and a product of all the integers in a vector. \n Empty sum should be equal adequate to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, return a vector consisting dwell of a sum and a product of all the integers in a vector. \n Empty sum should be equal adequate to 0 and empty product should be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n\tvector<int> sums, products;\n\tint sum = 0, product = 1;\n\tfor(auto number: numbers){\n\t\tsum += number;\n\t}\n\tsums.push_back(sum);\n\tfor(int i = 0; i < sums.size(); i++){\n\t\tproducts.push_back(product);\n\t\tproduct *= sums[i];\n\t}\n\treturn products;\n}\n\nint main(){\n\tint numbers[4];\n\tvector<int> numbers_vec;\n\tint sum, product;\n\twhile(cin >> sum && cin >> product){\n\t\tnumbers_vec.clear();\n\t\tfor(int i = 0; i < 4; i++){\n\t\t\tcin >> numbers[i];\n\t\t\tnumbers_vec.push_back(numbers[i]);\n\t\t}\n\t\tvector<int> products = sum_product(numbers_vec);\n\t\tcout << \"(\" << products[0] << \",\" << products[1] << \")\" << endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, generate render a vector of rolling maximum maximal element found detect until given moment here and now \n in the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrom a given vector of integers, generate render a vector of rolling maximum maximal element found detect until given moment here and now \n in the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n\tint max = 0;\n\tint max_i = 0;\n\tint i = 0;\n\tfor(;i<numbers.size();i++){\n\t\tif(max < numbers[i]){\n\t\t\tmax = numbers[i];\n\t\t\tmax_i = i;\n\t\t}\n\t}\n\tint j = 0;\n\tvector<int> result;\n\tfor(;j<=max_i;j++){\n\t\tresult.push_back(numbers[j]);\n\t}\n\treturn result;\n}\n\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> numbers(n);\n\tfor(int i=0;i<n;i++){\n\t\tint v;\n\t\tscanf(\"%d\",&v);\n\t\tnumbers[i] = v;\n\t}\n\tvector<int> result = rolling_max(numbers);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%d \",result[i]);\n\t}\n\tprintf(\"\\n\");\n}\n<|endoftext|>"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins begin with a supplied string drawstring. \n     Algorithm idea is simple elementary: - Find the longest long postfix of supplied add string bowed stringed instrument that is a palindrome. \n     - Append to the end conclusion of the string chain reverse reversion of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortest palindrome that begins begin with a supplied string drawstring. \n     Algorithm idea is simple elementary: - Find the longest long postfix of supplied add string bowed stringed instrument that is a palindrome. \n     - Append to the end conclusion of the string chain reverse reversion of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    if(str.size()==0) return \"\";\n    if(is_palindrome(str)) return str;\n    if(str.size()==1) return str;\n    string prefix = str.substr(0,1);\n    string suffix = str.substr(str.size()-1,1);\n    string str_prefix = make_palindrome(prefix);\n    string str_suffix = make_palindrome(suffix);\n    return str_prefix+str_suffix;\n}\nint main(){\n    string str;\n    while(getline(cin,str)){\n        string palindrome = make_palindrome(str);\n        if(is_palindrome(palindrome)){\n            cout<<palindrome<<endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/11", "prompt": "/*\nInput are two strings a and b consisting dwell only of 1s and 0s. \n Perform do binary XOR on these inputs and return result solution also as a string chain.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInput are two strings a and b consisting dwell only of 1s and 0s. \n Perform do binary XOR on these inputs and return result solution also as a string chain.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    int i;\n    string result=\"\";\n    int length_a=a.size();\n    int length_b=b.size();\n    if(length_a!=length_b)\n        return \"0\";\n    for(i=0;i<length_a;i++){\n        if(a[i]==b[i]){\n            result+=a[i];\n        }\n        else{\n            result+=(a[i]^b[i]);\n        }\n    }\n    return result;\n}\n\nint main(){\n    string a,b;\n    cin>>a>>b;\n    string result=string_xor(a,b);\n    cout<<result<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return the longest one. Return the first one in case character of multiple \n strings of the same length duration. Return None in case the input stimulation vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return the longest one. Return the first one in case character of multiple \n strings of the same length duration. Return None in case the input stimulation vector is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    int n = strings.size();\n    if(n == 0) return \"\";\n    int max_len = 0;\n    string max_str = \"\";\n    for(int i = 0; i < n; i++){\n        if(strings[i].length() > max_len) {\n            max_len = strings[i].length();\n            max_str = strings[i];\n        }\n    }\n    return max_str;\n}\n<|endoftext|>"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a greatest common coarse divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nReturn a greatest common coarse divisor of two integers a and b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int temp;\n    while(a!= b){\n        if(b > a)\n            temp = a;\n        else\n            temp = b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\n/*\nReturn a least common multiple of two integers a and b\n>>> least_common_multiple(3, 5)\n15\n>>> least_common_multiple(25, 15)\n45\n*/\nint least_common_multiple(int a, int b){\n    return a * b / greatest_common_divisor(a, b);\n}\n\nint main(){\n    int a, b;\n    while(scanf(\"%d %d\", &a, &b) == 2){\n        printf(\"%d\\n\", least_common_multiple(a, b));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vector of all prefixes from shortest to longest farseeing of the input string drawstring\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of all prefixes from shortest to longest farseeing of the input string drawstring\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n\tvector<string> prefixes;\n\tstring prefix = \"\";\n\tif(str.length() == 0)\n\t\treturn prefixes;\n\tif(str.length() == 1)\n\t\treturn prefixes;\n\tfor(int i = 1; i < str.length(); i++){\n\t\tfor(int j = 0; j < i; j++){\n\t\t\tprefix = str.substr(0, i);\n\t\t\tprefixes.push_back(prefix);\n\t\t}\n\t}\n\treturn prefixes;\n}\n\nint main(){\n\tstring str = \"abc\";\n\tvector<string> prefixes = all_prefixes(str);\n\tfor(int i = 0; i < prefixes.size(); i++){\n\t\tcout << prefixes.at(i) << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/15", "prompt": "/*\nReturn a string containing check space - delimited specify numbers starting depart from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nReturn a string containing check space - delimited specify numbers starting depart from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    string output;\n    while(n>0){\n        output = output + to_string(n%10) + \" \";\n        n /= 10;\n    }\n    return output;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    printf(\"%s\",string_sequence(n).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a string, find receive out how many distinct characters (regardless of case character) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string, find receive out how many distinct characters (regardless of case character) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n    vector<int> v;\n    for(int i = 0; i < str.size(); i++){\n        v.push_back(str[i]);\n    }\n    sort(v.begin(), v.end());\n    int count = 0;\n    for(int i = 0; i < v.size(); i++){\n        if(i == 0 || v[i]!= v[i-1]){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    string str;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%s\", &str);\n        printf(\"%d\\n\", count_distinct_characters(str));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string drawstring representing musical melodious notes in a special especial ASCII format. \n Your task undertaking is to parse this string and return vector of integers integer corresponding correspond to how many beats does each \n not last. \n\n Here is a legend caption: \n \" o \" - whole unharmed note, lasts four beats \n \" o| \" - half one-half note bill, lasts last two beats \n \" .| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string drawstring representing musical melodious notes in a special especial ASCII format. \n Your task undertaking is to parse this string and return vector of integers integer corresponding correspond to how many beats does each \n not last. \n\n Here is a legend caption: \n \" o \" - whole unharmed note, lasts four beats \n \" o| \" - half one-half note bill, lasts last two beats \n \".| \" - quater note, lasts one beat\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> note_count;\n    int i = 0, current_beat = 0;\n    string current_beat_string = \"\";\n    while(i < music_string.length()){\n        if(music_string[i] == 'o' && music_string[i+1] == 'o'){\n            current_beat += 1;\n            if(music_string[i+2] == '|' && music_string[i+3] == 'o' && music_string[i+4] == 'o'){\n                current_beat += 2;\n            }\n        }\n        else if(music_string[i] == 'o' && music_string[i+1] == 'o'){\n            current_beat += 1;\n            if(music_string[i+2] == '|' && music_string[i+3] == 'o'){\n                current_beat += 1;\n            }\n        }\n        else if(music_string[i] == 'o'){\n            current_beat += 1;\n        }\n        else if(music_string[i] == '|' && music_string[i+1] == 'o'){\n            current_beat += 2;\n        }\n        else if(music_string[i] == '.' && music_string[i+1] == 'o'){\n            current_beat += 1;\n        }\n        i += 1;\n    }\n    return note_count;\n}\n<|endoftext|>"}
{"task_id": "CPP/18", "prompt": "/*\nFind how many times a given contribute substring can be found in the original string drawstring. Count overlaping overlap cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFind how many times a given contribute substring can be found in the original string drawstring. Count overlaping overlap cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int i=0,j=0,k=0;\n    int flag=0;\n    while(i<str.length() && j<substring.length()){\n        if(str[i]==substring[j]){\n            k++;\n            i++;\n            j++;\n        }\n        else{\n            if(k>0){\n                flag++;\n                k=0;\n            }\n            i++;\n        }\n    }\n    if(k>0){\n        flag++;\n    }\n    return flag;\n}\nint main(){\n    string str,substr;\n    while(cin>>str>>substr){\n        int count=0;\n        for(int i=0;i<str.length();i++){\n            if(str.find(substr,i)>=0){\n                count++;\n            }\n        }\n        printf(\"%d\\n\",count);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space - delimited specify string of numberals from \" zero \" to \" nine \". \n Valid choices choice are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n Return the string chain with numbers sorted from smallest small to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInput is a space - delimited specify string of numberals from \" zero \" to \" nine \". \n Valid choices choice are \" zero \", \" one \",' two \",' three \", \" four \", \" five \",' six \",' seven \", \" eight \" and \" nine \". \n Return the string chain with numbers sorted from smallest small to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<string,int> m;\n    string temp;\n    for(int i=0;i<numbers.size();i++)\n        m[numbers[i]]=i;\n    temp=numbers;\n    for(int i=0;i<numbers.size()-1;i++)\n        if(m[temp[i]]<m[temp[i+1]])\n            swap(temp[i],temp[i+1]);\n    return temp;\n}\nint main()\n{\n    string n;\n    cin>>n;\n    cout<<sort_numbers(n)<<endl;\n}\n<|endoftext|>"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vector of numbers (of length at least two) select choice and return two that are the closest to each \n other and return them in order decree (smaller number issue, larger number numeral).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrom a supplied vector of numbers (of length at least two) select choice and return two that are the closest to each \n other and return them in order decree (smaller number issue, larger number numeral).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> closest_elements;\n    float minimum_distance = 1;\n    float current_distance;\n    for(int i = 0; i < numbers.size(); i++){\n        current_distance = abs(numbers[i] - numbers[i+1]);\n        if(minimum_distance > current_distance){\n            minimum_distance = current_distance;\n            closest_elements.clear();\n            closest_elements.push_back(numbers[i]);\n            closest_elements.push_back(numbers[i+1]);\n        }\n        else if(minimum_distance == current_distance){\n            closest_elements.push_back(numbers[i]);\n            closest_elements.push_back(numbers[i+1]);\n        }\n    }\n    return closest_elements;\n}\n<|endoftext|>"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply use a linear transform to that vector, \n such that the smallest minor number will become 0 and the largest big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least two elements), apply use a linear transform to that vector, \n such that the smallest minor number will become 0 and the largest big will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n    vector<float> result(numbers);\n    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n    for(int i = 0; i < numbers.size(); i++){\n        result[i] = numbers[i]/max - min/max;\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "CPP/22", "prompt": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": false, "gc": "/*\nFilter given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> v;\n\tfor(auto any:values){\n\t\tif(boost::any_cast<int>(any)){\n\t\t\tv.push_back(boost::any_cast<int>(any));\n\t\t}\n\t}\n\treturn v;\n}\n\nint main(){\n\tlist_any values = {1, 2, 3, \"abc\", {}, {}, 3.14};\n\tvalues.push_back(\"a\");\n\tvalues.push_back(3.14);\n\tvalues.push_back(boost::any(1));\n\tvector<int> v = filter_integers(values);\n\tfor(auto i:v){\n\t\tcout<<i<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/23", "prompt": "/*\nReturn length of given contribute string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/*\nReturn length of given contribute string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int i=0;\n    while(str[i]!='\\0'){\n        i++;\n    }\n    return i;\n}\nint main(){\n    string str;\n    cin>>str;\n    cout<<strlen(str);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given number n, find receive the largest number phone number that divides n evenly, smaller belittled than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given number n, find receive the largest number phone number that divides n evenly, smaller belittled than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int x=0,y=n;\n    while(y!=0){\n        int a=0,b=0;\n        while(y>0){\n            a=x;\n            b=y;\n            x=b%a;\n            y=a-b;\n        }\n        if(x>0)\n            break;\n        if(x<0)\n            x*=-1;\n        y=n-x;\n    }\n    return x;\n}\n\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)==1){\n        printf(\"%d\\n\",largest_divisor(n));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/25", "prompt": "/*\nReturn vector of prime factors agent of given integer in the order decree from smallest to largest big. \n Each of the factors should be vectored number numeral of times corresponding represent to how many times prison term it appeares look in factorization. \n Input stimulation number phone number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nReturn vector of prime factors agent of given integer in the order decree from smallest to largest big. \n Each of the factors should be vectored number numeral of times corresponding represent to how many times prison term it appeares look in factorization. \n Input stimulation number phone number should be equal to the product of all factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n\tvector<int> prime_factors;\n\tfor(int i = 2; i <= n/2; i++){\n\t\tint p = n % i;\n\t\tif(p == 0){\n\t\t\tprime_factors.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\tif(n!= 1){\n\t\tprime_factors.push_back(n);\n\t}\n\treturn prime_factors;\n}\nint main(){\n\tint n = 1;\n\twhile(true){\n\t\tvector<int> prime_factors = factorize(n);\n\t\tfor(int i = 0; i < prime_factors.size(); i++){\n\t\t\tprintf(\"%d \", prime_factors[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t\tscanf(\"%d\", &n);\n\t\tif(n == 0)\n\t\t\tbreak;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elements component that occur more than once. \n Keep restrain order of elements element left the same as in the input stimulation.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove all elements component that occur more than once. \n Keep restrain order of elements element left the same as in the input stimulation.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tif(numbers.empty()){\n\t\treturn numbers;\n\t}\n\tfor(auto it = numbers.begin(); it!= numbers.end(); it++){\n\t\tif(find(result.begin(), result.end(), *it) == result.end()){\n\t\t\tresult.push_back(*it);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint a[4] = {1, 2, 3, 2};\n\tvector<int> nums(a, a+4);\n\tvector<int> result = remove_duplicates(nums);\n\tfor(auto it = result.begin(); it!= result.end(); it++){\n\t\tprintf(\"%d \", *it);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given string, flip throw lowercase characters character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given string, flip throw lowercase characters character to uppercase and uppercase to lowercase.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tint i=0;\n\tint j=str.size()-1;\n\twhile(i<j){\n\t\tif(str[i]>='a' && str[i]<='z'){\n\t\t\tstr[i]=str[i]-'a'+'A';\n\t\t\tstr[j]=str[j]-'A'+'a';\n\t\t\ti++;\n\t\t\tj--;\n\t\t}else{\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring str;\n\twhile(cin>>str){\n\t\tcout<<filp_case(str)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\tint n = strings.size();\n\tif(n==0){\n\t\treturn \"\";\n\t}\n\tstring s = \"\";\n\tfor(int i=0;i<n;i++){\n\t\ts = s+strings[i];\n\t}\n\treturn s;\n}\nint main(){\n\tvector<string> v = {\"a\", \"b\", \"c\"};\n\tcout<<concatenate(v);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings only for ones that start begin with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings only for ones that start begin with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> ret;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(prefix) == 0)\n            ret.push_back(strings[i]);\n    }\n    return ret;\n}\n<|endoftext|>"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers issue in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": true, "gc": "/*\nReturn only positive numbers issue in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n    vector<float> r;\n    for(auto i: l){\n        if(i>0){\n            r.push_back(i);\n        }\n    }\n    return r;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<float> l;\n    for(int i=0; i<n; i++){\n        float x;\n        scanf(\"%f\", &x);\n        l.push_back(x);\n    }\n    vector<float> r=get_positive(l);\n    for(auto i: r){\n        printf(\"%f \", i);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given contribute number is prime choice, and false otherwise differently.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if a given contribute number is prime choice, and false otherwise differently.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n\tlong long i = 2, flag = 1;\n\twhile(i*i <= n){\n\t\tif(n % i == 0){\n\t\t\tflag = 0;\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t}\n\tif(flag == 1){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tlong long n, i;\n\t\tscanf(\"%lld\", &n);\n\t\ti = 0;\n\t\twhile(is_prime(n)){\n\t\t\tn += 1;\n\t\t\ti++;\n\t\t}\n\t\tprintf(\"%d\\n\", i);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     double bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find receive x such that poly(x) = 0. find_zero returns only only zero point detail, even if there are many. \n     Moreover, find_zero only takes learn list xs having even number of coefficients coefficient and largest bombastic non zero coefficient as it guarantees undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    Evaluates polynomial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n     * / \n     double bivalent sum=0;\n     int i;\n     for (i=0;i<xs.size();i++)\n     { \n         sum+=xs[i]*pow(x,i);\n     } \n     return sum;\n}\n\ndouble find_zero(vector < double > xs){\n     / * \n     xs are coefficients of a polynomial. find_zero find receive x such that poly(x) = 0. find_zero returns only only zero point detail, even if there are many. \n     Moreover, find_zero only takes learn list xs having even number of coefficients coefficient and largest bombastic non zero coefficient as it guarantees undertake a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n     int n = xs.size();\n     int i = 0;\n     double p = 1;\n     double x = xs[0];\n     while (i < n - 1)\n     {\n         p *= xs[i];\n         i++;\n         x += xs[i];\n     }\n     return x - p;\n}\n\nint main()\n{\n     double x;\n     vector<double> xs;\n     double bivalent_sum;\n     vector < double > xs_test;\n     vector < double > xs_test2;\n     vector < double > xs_test3;\n     vector < double > xs_test4;\n     vector < double > xs_test5;\n     vector < double > xs_test6;\n     double x_zero;\n     double x_zero2;\n     double x_zero3;\n     double x_zero4;\n     double x_zero5;\n     double x_zero6;\n     double x_zero7;\n     double x_zero8;\n     double x_zero9;\n     double x_zero10;\n     double x_zero11;\n     double x_zero12;\n     double x_zero13;\n     double x_zero14;\n     double x_zero15;\n     double x_zero16;\n     double x_zero17;\n     double x_zero18;\n     double x_zero19;\n     double x_zero20;\n     double x_zero21;\n     double x_zero22;\n     double x_zero23;\n     double x_zero24;\n     double x_zero25;\n     double x_zero26;\n     double x_zero27;\n     double x_zero28;\n     double x_zero29;\n     double x_zero30;\n     double x_zero31;\n     double x_zero32;\n     double x_zero33;\n     double x_zero34;\n     double x_zero35;\n     double x_zero36;\n     double x_zero37;\n     double x_zero38;\n     double x_zero39;\n     double x_zero40;\n     double x_zero41;\n     double x_zero42;\n     double x_zero43;\n     double x_zero44;\n     double x_zero45;\n     double x_zero46;\n     double x_zero47;\n     double x_zero48;\n     double x_zero49;\n     double x_zero50;\n     double x_zero51;\n     double x_zero52;\n     double x_zero53;\n     double x_zero54;\n     double x_zero55;\n     double x_zero56;\n     double x_zero57;\n     double x_zero58;\n     double x_zero59;\n     double x_zero60;\n     double x_zero61;\n     double x_zero62;\n     double x_zero63;\n     double x_zero64;\n     double x_zero65;\n     double x_zero66;\n     double x_zero67;\n     double x_zero68;\n     double x_zero69;\n     double x_zero70;\n     double x_zero71;\n     double x_zero72;\n     double x_zero73;\n     double x_zero74;\n     double x_zero75;\n     double x_zero76;\n     double x_zero77;\n     double x_zero78;\n     double x_zero79;\n     double x_zero80;\n     double x_zero81;\n     double x_zero82;\n     double x_zero83;\n     double x_zero84;\n     double x_zero85;\n     double x_zero86;\n     double x_zero87;\n     double x_zero88;\n     double x_zero89;\n     double x_zero90;\n     double x_zero91;\n     double x_zero92;\n     double x_zero93;\n     double x_zero94;\n     double x_zero95;\n     double x_zero96;\n     double x_zero97;\n     double x_zero98;\n     double x_zero99;\n     double x_zero100;\n     double x_zero101;\n     double x_zero102;\n     double x_zero103;\n     double x_zero104;\n     double x_zero105;\n     double x_zero106;\n     double x_zero107;\n     double x_zero108;\n     double x_zero109;\n     double x_zero110;\n     double x_zero111;\n     double x_zero112;\n     double x_zero113;\n     double x_zero114;\n     double x_zero115;\n     double x_zero116;\n     double x_zero117;\n     double x_zero118;\n     double x_zero119;\n     double x_zero120;\n     double x_zero121;\n     double x_zero122;\n     double x_zero123;\n     double x_zero124;\n     double x_zero125;\n"}
{"task_id": "CPP/33", "prompt": "/*\nThis function takes a vector l and returns refund a vector l' such that \n l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n to the values value of the corresponding indicies of l, but sorted screen.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns refund a vector l' such that \n l' is identical to l in the indicies that are not divisible by three, while its values value at the indicies that are divisible by three are equal \n to the values value of the corresponding indicies of l, but sorted screen.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n    vector<int> l_copy(l);\n    sort(l_copy.begin(), l_copy.end());\n    int size = l_copy.size();\n    vector<int> r(size);\n    for(int i = 0; i < size; i++){\n        int index = i;\n        if(i % 3 == 0){\n            for(int j = 0; j < size; j++){\n                if(j!= index){\n                    if(l_copy[j] == l_copy[index]){\n                        r[i] = l_copy[j];\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    return r;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> v(n);\n        for(int i = 0; i < n; i++){\n            scanf(\"%d\", &v[i]);\n        }\n        vector<int> sorted = sort_third(v);\n        for(int i = 0; i < sorted.size(); i++){\n            printf(\"%d \", sorted[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements component in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*\nReturn sorted unique elements component in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    sort(l.begin(),l.end());\n    vector<int> unique_element;\n    int i=0;\n    while(i<l.size()){\n        if(find(l.begin(),l.end(),l[i])==l.end()){\n            unique_element.push_back(l[i]);\n        }\n        i++;\n    }\n    return unique_element;\n}\n\nint main(){\n    int n,i;\n    vector<int> v;\n    cin>>n;\n    for(i=0;i<n;i++){\n        int x;\n        cin>>x;\n        v.push_back(x);\n    }\n    cout<<\"The sorted unique elements are: \";\n    for(i=0;i<n;i++){\n        cout<<unique(v)[i]<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/35", "prompt": "/*\nReturn maximum element chemical element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": true, "gc": "/*\nReturn maximum element chemical element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n    float max = 0;\n    for(int i = 0; i < l.size(); i++){\n        if(l[i] > max){\n            max = l[i];\n        }\n    }\n    return max;\n}\nint main(){\n    vector<float> v = {1, 2, 3, 4, 5};\n    cout<<\"max_element:\"<<max_element(v)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times meter the digit 7 appears look in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nReturn the number of times meter the digit 7 appears look in integers less than n which are divisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n\tint count = 0;\n\tint i = 1;\n\twhile(i <= n){\n\t\tif((i % 11) == 0 || (i % 13) == 0){\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%d\", &n);\n\tprintf(\"%d\\n\", fizz_buzz(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns refund a vector l' such that \n l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n to the values of the even indicies of l, but sorted screen.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns refund a vector l' such that \n l' is identical to l in the odd leftover indicies, while its values at the even indicies are equal adequate \n to the values of the even indicies of l, but sorted screen.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tint size = l.size();\n\tvector<float> odd(l);\n\tfor(int i=0;i<size;i+=2){\n\t\tif(i+1>=size) break;\n\t\telse{\n\t\t\tfloat temp = l[i];\n\t\t\tl[i] = l[i+1];\n\t\t\tl[i+1] = temp;\n\t\t}\n\t}\n\treturn l;\n}\nint main(){\n\tint size;\n\tscanf(\"%d\", &size);\n\tvector<float> l(size);\n\tfor(int i=0;i<size;i++)\n\t\tscanf(\"%f\", &l[i]);\n\tvector<float> l2 = sort_even(l);\n\tfor(int i=0;i<l2.size();i++)\n\t\tprintf(\"%f \", l2[i]);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string drawstring encoded with encode_cyclic function affair. Returns decoded decode string. \n     * /\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input string drawstring encoded with encode_cyclic function affair. Returns decoded decode string. \n     * /\n    int l=s.length();\n    int num=(l+2)/3;\n    string output=\"\";\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        s=s.substr(i*3,3);\n        if (s.length()==3) s=s.substr(1)+s[0];\n        output=output+s;\n    }\n    return output;\n    */\n    //returns decoded string.\n    return s;\n}\nint main(){\n    string test=\"abcdefghijklmnopqrstuvwxyz\";\n    string encoded=encode_cyclic(test);\n    string decoded=decode_cyclic(encoded);\n    if (test!=decoded) {\n        printf(\"%s vs %s\\n\",test.c_str(),decoded.c_str());\n        return 1;\n    }\n    else printf(\"%s vs %s\\n\",test.c_str(),decoded.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib returns n-th number that is a Fibonacci number phone number and it's also prime choice.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprime_fib returns n-th number that is a Fibonacci number phone number and it's also prime choice.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i = 1;\n    int fib = 2;\n    while(fib<n){\n        if(isPrime(fib)){\n            i++;\n            if(i == n)\n                return fib;\n        }\n        fib = fib + fib;\n    }\n    return fib;\n}\n<|endoftext|>"}
{"task_id": "CPP/40", "prompt": "/*\ntriples_sum_to_zero takes a vector of integers as an input remark. \n it returns true dependable if there are three distinct elements element in the vector that \n sum to zero, and false delusive otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriples_sum_to_zero takes a vector of integers as an input remark. \n it returns true dependable if there are three distinct elements element in the vector that \n sum to zero, and false delusive otherwise.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint i=0, j=0, k=0, sum=0;\n\tfor(i=0; i<l.size(); i++){\n\t\tif(l[i]>0)\n\t\t\tj++;\n\t\telse\n\t\t\tk++;\n\t}\n\tif(j>0 && k>0){\n\t\tfor(i=0; i<l.size(); i++){\n\t\t\tif(l[i]>0){\n\t\t\t\tsum += l[i];\n\t\t\t\tif(sum==0)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse\n\t\t\t\tsum -= l[i];\n\t\t}\n\t\treturn false;\n\t}\n\telse\n\t\treturn false;\n}\nint main(){\n\tvector<int> v;\n\tint i=0, j=0, k=0, sum=0;\n\twhile(scanf(\"%d\", &k)==1){\n\t\tv.push_back(k);\n\t}\n\tif(triples_sum_to_zero(v)){\n\t\tfor(i=0; i<v.size(); i++){\n\t\t\tif(v[i]>0)\n\t\t\t\tj++;\n\t\t\telse\n\t\t\t\tk++;\n\t\t}\n\t\tif(j>0 && k>0){\n\t\t\tfor(i=0; i<v.size(); i++){\n\t\t\t\tif(v[i]>0){\n\t\t\t\t\tsum += v[i];\n\t\t\t\t\tif(sum==0)\n\t\t\t\t\t\tprintf(\"%d\\n\", v[i]);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tsum -= v[i];\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\t\telse\n\t\t\treturn 0;\n\t}\n\telse\n\t\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight neat infinitely long retentive line. \n n cars car are driving left impart to right;   simultaneously, a different unlike set bent of n cars cable car \n are driving drive right correct to left.    The two sets of cars start originate out being very far from \n each other.   All cars car move be active in the same speed.   Two cars are said to collide \n when a car that's moving motivate left impart to right proper hits hit a car that's moving go right to left. \n However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n in their trajectory as if they did not collide. \n\n This function outputs the number act of such collisions collision. \n * / \n # include admit < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImagine a road that's a perfectly straight neat infinitely long retentive line. \n n cars car are driving left impart to right;   simultaneously, a different unlike set bent of n cars cable car \n are driving drive right correct to left.    The two sets of cars start originate out being very far from \n each other.   All cars car move be active in the same speed.   Two cars are said to collide \n when a car that's moving motivate left impart to right proper hits hit a car that's moving go right to left. \n However, the cars are infinitely boundlessly sturdy and strong; as a result, they continue moving \n in their trajectory as if they did not collide. \n\n This function outputs the number act of such collisions collision. \n * / \n # include admit < stdio.h > \n using namespace std;\nint car_race_collision(int n){\n    int collisions = 0;\n    int i,j;\n    for(i = 0; i < n; i++){\n        for(j = 0; j < n; j++){\n            if(i!= j){\n                if(i > j){\n                    if(abs(i - j) <= 1 && car_race_collision(i - 1) == 0 && car_race_collision(j + 1) == 0){\n                        collisions++;\n                    }\n                }else{\n                    if(abs(i - j) <= 1 && car_race_collision(i - 1) == 0 && car_race_collision(j - 1) == 0){\n                        collisions++;\n                    }\n                }\n            }\n        }\n    }\n    return collisions;\n}\nint main(){\n    int n;\n    cin >> n;\n    cout << car_race_collision(n);\n    return 0;\n}\n/*\n    admit 2\n    n = 3\n    collisions = 0\n    n = 4\n    collisions = 1\n    n = 5\n    collisions = 2\n    n = 6\n    collisions = 3\n    n = 7\n    collisions = 4\n    n = 8\n    collisions = 5\n    n = 9\n    collisions = 6\n    n = 10\n    collisions = 7\n    n = 11\n    collisions = 8\n    n = 12\n    collisions = 9\n    n = 13\n    collisions = 10\n    n = 14\n    collisions = 11\n    n = 15\n    collisions = 12\n    n = 16\n    collisions = 13\n    n = 17\n    collisions = 14\n    n = 18\n    collisions = 15\n    n = 19\n    collisions = 16\n    n = 20\n    collisions = 17\n    n = 21\n    collisions = 18\n    n = 22\n    collisions = 19\n    n = 23\n    collisions = 20\n    n = 24\n    collisions = 21\n    n = 25\n    collisions = 22\n    n = 26\n    collisions = 23\n    n = 27\n    collisions = 24\n    n = 28\n    collisions = 25\n    n = 29\n    collisions = 26\n    n = 30\n    collisions = 27\n    n = 31\n    collisions = 28\n    n = 32\n    collisions = 29\n    n = 33\n    collisions = 30\n    n = 34\n    collisions = 31\n    n = 35\n    collisions = 32\n    n = 36\n    collisions = 33\n    n = 37\n    collisions = 34\n    n = 38\n    collisions = 35\n    n = 39\n    collisions = 36\n    n = 40\n    collisions = 37\n    n = 41\n    collisions = 38\n    n = 42\n    collisions = 39\n    n = 43\n    collisions = 40\n    n = 44\n    collisions = 41\n    n = 45\n    collisions = 42\n    n = 46\n    collisions = 43\n    n = 47\n    collisions = 44\n    n = 48\n    collisions = 45\n    n = 49\n    collisions = 46\n    n = 50\n    collisions = 47\n    n = 51\n    collisions = 48\n    n = 52\n    collisions = 49\n    n = 53\n    collisions = 50\n    n = 54\n    collisions = 51\n    n = 55\n    collisions = 52\n    n = 56\n    collisions = 53\n    n = 57\n    collisions = 54\n    n = 58\n    collisions = 55\n    n = 59\n    collisions = 56\n    n = 60\n    collisions = 57\n    n = 61\n    collisions = 58\n    n = 62\n    collisions = 59\n    n = 63\n    collisions = 60\n    n = 64\n    collisions = 61\n    n = 65\n    collisions = 62\n    n = 66\n    collisions = 63\n    n = 67\n    collisions = 64\n    n = 68\n    collisions = 65\n    n = 69\n    collisions = 66\n    n = 70\n    collisions = 67\n    n = 71\n    collisions = 68\n    n = 72\n    collisions = 69\n    n = 73\n    collisions = 70\n    n = 74\n    collisions = 71\n    n = 75\n    collisions = 72\n    n = 76\n    collisions = 73\n    n = 77\n    collisions = 74\n    n = 78\n    collisions = 75\n    n = 79\n    collisions = 76\n    n = 80\n    collisions = 77\n    n = 81\n    collisions = 78\n    n = 82\n    collisions = 79\n    n = 83\n    collisions = 80\n    n = 84\n    collisions = 81\n    n = 85\n    collisions = 82\n    n = 86\n    collisions = 83\n    n = 87\n    collisions = 84\n    n = 88\n    collisions = 85\n    n = 89\n    collisions = 86\n    n = 90\n    collisions = 87\n    n = 91\n    collisions = 88\n    n = 92\n    collisions = 89\n    n = 93\n    collisions = 90\n    n = 94\n    collisions = 91\n    n = 95\n    collisions = 92\n    n = 96\n    collisions = 93\n    n = 97\n    collisions = 94\n    n = 98\n    collisions = 95\n    n = 99\n    collisions = 96\n    n = 100\n    collisions = 97\n    n = 101\n    collisions = 98\n    n = 102\n    collisions = 99\n    n = 103\n    collisions = 100\n    n"}
{"task_id": "CPP/42", "prompt": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": false, "gc": "/*\nReturn vector with elements incremented by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tint i;\n\tvector<int> r;\n\tfor(i=0;i<l.size();i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nvector<int> incr_vector(vector<int> l){\n\tint i;\n\tvector<int> r;\n\tfor(i=0;i<l.size();i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(0);\n\tl.push_back(123);\n\tvector<int> r = incr_vector(l);\n\tfor(int i=0;i<r.size();i++){\n\t\tprintf(\"%d\\t\",r[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an input remark. \n it returns true dependable if there are two distinct elements element in the vector that \n sum to zero, and false delusive otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes a vector of integers as an input remark. \n it returns true dependable if there are two distinct elements element in the vector that \n sum to zero, and false delusive otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n    int sum = 0;\n    for(int i = 0; i < l.size(); i++){\n        sum += l.at(i);\n        if(sum == 0) return true;\n    }\n    return false;\n}\nint main(){\n    int size;\n    printf(\"Enter the size of vector\\n\");\n    scanf(\"%d\",&size);\n    vector<int> l(size);\n    for(int i = 0; i < size; i++){\n        scanf(\"%d\",&l.at(i));\n    }\n    if(pairs_sum_to_zero(l)){\n        printf(\"Vector has pairs sum to zero\\n\");\n    }\n    else{\n        printf(\"Vector doesn't have pairs sum to zero\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input remark number x to base.\nreturn string drawstring representation after the conversion. \n base floor numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChange numerical base of input remark number x to base.\nreturn string drawstring representation after the conversion. \n base floor numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n\tstring s = \"\";\n\twhile(x){\n\t\ts = ((x%base) + base) + s;\n\t\tx = x/base;\n\t}\n\treturn s;\n}\nint main(){\n\tint n,base;\n\tscanf(\"%d\",&n);\n\tscanf(\"%d\",&base);\n\tprintf(\"%s\",change_base(n,base).c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side english and high return area sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven length of a side english and high return area sphere for a triangle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n    return a*h/2;\n}\nint main(){\n    float a,h;\n    scanf(\"%f%f\",&a,&h);\n    printf(\"%.2f\",triangle_area(a,h));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/46", "prompt": "/*\nThe Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined specify as follows: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write spell a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe Fib4 number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined specify as follows: \n fib4(0) - > 0 \n fib4(1) - > 0 \n fib4(2) - > 2 \n fib4(3) - > 0 \n fib4(n) - > fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write spell a function to efficiently compute calculate the n-th element of the fib4 number issue sequence succession.   Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n==0||n==1)\n        return n;\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\", &n);\n    printf(\"fib4(%d) = %d\\n\", n, fib4(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n    float median;\n    int n=l.size();\n    if(n%2==0){\n        median=(l[n/2-1]+l[n/2])/2;\n    }\n    else{\n        median=l[n/2];\n    }\n    return median;\n}\nint main(){\n    vector<float> v;\n    for(int i=0;i<6;i++){\n        v.push_back(i+1);\n    }\n    printf(\"%f\\n\",median(v));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string drawstring is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nChecks if given string drawstring is a palindrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\tint i=0, j=text.length()-1;\n\twhile(i<j){\n\t\tif(text[i]!=text[j])\n\t\t\treturn false;\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nint main(){\n\tstring text;\n\tcout<<\"Enter a string: \";\n\tcin>>text;\n\tif(is_palindrome(text))\n\t\tcout<<\"String is a palindrome\"<<endl;\n\telse\n\t\tcout<<\"String is not a palindrome\"<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n\treturn n%p;\n}\nint main(){\n\tint n,p;\n\tscanf(\"%d %d\",&n,&p);\n\tprintf(\"%d\\n\",modp(n,p));\n}\n<|endoftext|>"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n     string chain out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // takes as input stimulation string encoded encode with encode_shift function routine. Returns decoded string chain.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string drawstring by shifting every character quality by 5 in the alphabet. \n     string chain out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nstring decode_shift(string s){\n     // takes as input stimulation string encoded encode with encode_shift function routine. Returns decoded string chain.\n     string chain out;\n     int i;\n     for (i=0;i<s.length();i++)\n     { \n         int w=((int)s[i]-5+(int)'a')%26+(int)'a';   \n         out=out+(char)w;\n     } \n     return out;\n}\nint main(){\n    string s1,s2;\n    cin>>s1;\n    cin>>s2;\n    cout<<encode_shift(s1)<<endl;\n    cout<<decode_shift(s2)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vowels is a function that takes string drawstring and returns string drawstring without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremove_vowels is a function that takes string drawstring and returns string drawstring without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    for(int i=0; i<text.length(); i++){\n        if(vowels.find(text[i])!= string::npos)\n            text.erase(text.begin()+i);\n    }\n    return text;\n}\n\nint main(){\n    string text;\n    while(cin >> text){\n        cout << remove_vowels(text) << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/52", "prompt": "/*\nReturn true if all numbers issue in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nReturn true if all numbers issue in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n    int cnt = 0;\n    for(int i=0; i<l.size(); i++){\n        if(l[i] < t){\n            cnt++;\n        }\n    }\n    if(cnt == l.size()){\n        return true;\n    }else{\n        return false;\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int>v;\n    for(int i=0; i<n; i++){\n        int t;\n        scanf(\"%d\", &t);\n        v.push_back(t);\n    }\n    int k;\n    scanf(\"%d\", &k);\n    bool flag = false;\n    for(int i=0; i<k; i++){\n        flag = below_threshold(v, v[i]);\n        if(flag == true){\n            printf(\"yes\\n\");\n            return 0;\n        }\n    }\n    printf(\"no\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n\treturn x+y;\n}\nint main(){\n\tint a,b;\n\tprintf(\"Enter two number: \");\n\tscanf(\"%d%d\",&a,&b);\n\tprintf(\"The result is %d\",add(a,b));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nCheck if two words have the same characters character.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    int count=0;\n    for(int i=0;i<s0.length();i++){\n        if(s0[i]==s1[i]){\n            count++;\n        }\n    }\n    if(count==s0.length())\n        return true;\n    else\n        return false;\n}\nint main(){\n    string s0,s1;\n    while(cin>>s0>>s1){\n        if(same_chars(s0,s1))\n            cout<<\"true\"<<endl;\n        else\n            cout<<\"false\"<<endl;\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==1)\n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    printf(\"Enter the number:\");\n    scanf(\"%d\",&n);\n    printf(\"The Fibonacci number is:%d\\n\",fib(n));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' <' and '>'.\nreturn true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    bool status = true;\n    int i = 0;\n    int len = brackets.length();\n    while(i < len && status){\n        status = false;\n        for(int j = 0; j < brackets[i]; j++)\n            if(brackets[i + j] == brackets[i] && brackets[i + j + 1] == brackets[i + 1]){\n                brackets[i + j] = brackets[i];\n                brackets[i + j + 1] = brackets[i + 1];\n                status = true;\n                break;\n            }\n        i += brackets[i] + brackets[i + 1];\n    }\n    return status;\n}\nint main(){\n    int T;\n    string brackets;\n    cin>>T;\n    while(T--){\n        cin>>brackets;\n        if(correct_bracketing(brackets))\n            cout<<\"yes\"<<endl;\n        else\n            cout<<\"no\"<<endl;\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements component are monotonically increasing or decreasing decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nReturn true is vector elements component are monotonically increasing or decreasing decrease.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tint i=1;\n\tfor(i=1;i<l.size();i++){\n\t\tif(l[i-1]>l[i])return false;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<float> v;\n\tint t,i;\n\tscanf(\"%d\",&t);\n\tfor(i=0;i<t;i++){\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tv.clear();\n\t\tfor(int j=0;j<n;j++){\n\t\t\tscanf(\"%f\",&v[j]);\n\t\t}\n\t\tif(monotonic(v))printf(\"%d \",i+1);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted unique common elements component for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*\nReturn sorted unique common elements component for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n\tint size1 = l1.size();\n\tint size2 = l2.size();\n\tvector<int> l3(size1,0);\n\tvector<int> l4(size2,0);\n\tvector<int> l5(size1,0);\n\tvector<int> l6(size2,0);\n\tfor(int i=0;i<size1;i++){\n\t\tfor(int j=0;j<size2;j++){\n\t\t\tif(l1[i]==l2[j]){\n\t\t\t\tl3[i]++;\n\t\t\t\tl4[j]++;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=0;i<size1;i++){\n\t\tif(l3[i]>0)\n\t\t\tl5.push_back(l1[i]);\n\t}\n\tfor(int i=0;i<size2;i++){\n\t\tif(l4[i]>0)\n\t\t\tl6.push_back(l2[i]);\n\t}\n\treturn l5.size()>0?l5:l6;\n}\nint main(){\n\tint size1,size2;\n\tscanf(\"%d %d\",&size1,&size2);\n\tvector<int> l1(size1),l2(size2);\n\tfor(int i=0;i<size1;i++){\n\t\tscanf(\"%d\",&l1[i]);\n\t}\n\tfor(int i=0;i<size2;i++){\n\t\tscanf(\"%d\",&l2[i]);\n\t}\n\tvector<int> l5 = common(l1,l2);\n\tfor(int i=0;i<l5.size();i++)\n\t\tprintf(\"%d \",l5[i]);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nReturn the largest prime choice factor of n. Assume n > 1 and is not a prime flower.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i = 2;\n    while(n % i!= 0) {\n        while(n % i == 0) {\n            n /= i;\n            i++;\n        }\n    }\n    if(n == 1) {\n        return n;\n    }\n    else {\n        return largest_prime_factor(n);\n    }\n}\n\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", largest_prime_factor(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers issue from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": true, "gc": "/*\nsum_to_n is a function that sums numbers issue from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum = 1;\n    for(int i=1; i<=n; i++)\n        sum += i;\n    return sum;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",sum_to_n(n));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of' (' and ')'.\nreturn true if every opening possibility bracket has a corresponding closing shutting bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    int i = 0, j = 0, index = 0;\n    bool is_correct = true;\n    while(i < brackets.size()){\n        if(brackets[i] == '('){\n            index = i;\n            while(i < brackets.size() && brackets[i]!= ')'){\n                i++;\n            }\n            if(brackets[i] == ')'){\n                j = i+1;\n            }\n            else{\n                is_correct = false;\n            }\n        }\n        i++;\n    }\n    return is_correct;\n}\nint main(){\n    string brackets;\n    while(getline(cin, brackets)){\n        if(correct_bracketing(brackets)){\n            cout << brackets << endl;\n        }\n        else{\n            cout << \"Not a valid bracketing.\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  Return refund derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs represent coefficients of a polynomial. \n xs{0 } + xs{1} * x + xs{2} * x^2 +.... \n  Return refund derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> dxs(xs.size(),0);\n\tfloat sum=0;\n\tfor(int i=1;i<xs.size();i++){\n\t\tdxs[i]=sum+xs[i-1]*dxs[i-1];\n\t\tsum+=xs[i-1]*i;\n\t}\n\treturn dxs;\n}\nint main(){\n\tvector<float> xs;\n\tvector<float> dxs;\n\tvector<float>::iterator iter;\n\twhile(cin>>xs){\n\t\tdxs=derivative(xs);\n\t\titer=dxs.begin();\n\t\twhile(iter!=dxs.end()){\n\t\t\tprintf(\"%f \",*iter);\n\t\t\titer++;\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined specify as follows: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write spell a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined specify as follows: \n fibfib(0) = = 0 \n fibfib(1) = = 0 \n fibfib(2) = = 1 \n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write spell a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    int a, b;\n    if(n == 0){\n        return 0;\n    }\n    if(n == 1){\n        return 0;\n    }\n    if(n == 2){\n        return 1;\n    }\n    a = fibfib(n - 1);\n    b = fibfib(n - 2);\n    return a + b + fibfib(n - 3);\n}\n\nint main(){\n    printf(\"The fibfib number sequence is a sequence succession similar to the Fibbonacci sequnece that's defined specify as follows:\\n fibfib(0) = = 0 \\n fibfib(1) = = 0 \\n fibfib(2) = = 1 \\n fibfib(n) = = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\\n Please write spell a function to efficiently compute calculate the n-th element of the fibfib number issue sequence succession.\\n\");\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"fibfib(%d) = %d\\n\", n, fibfib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/64", "prompt": "/*\nWrite a function vowels_count which takes aim a string representing exemplify a word as input stimulation and returns the number numeral of vowels in the string. Vowels vowel in this case event are' a',' e', 'i',' o',' u'. \n Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n Example: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function vowels_count which takes aim a string representing exemplify a word as input stimulation and returns the number numeral of vowels in the string. Vowels vowel in this case event are' a',' e', 'i',' o',' u'. \n Here,' y' is also besides a vowel, but only when it is at the end conclusion of the given word. \n Example: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n\tint count=0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]=='a' ||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(s[s.length()-1]=='y'){\n\t\tcount++;\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tcout<<\"Enter the word: \";\n\tgetline(cin,s);\n\tcout<<vowels_count(s)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the digits of the integer x, shift the digits digit right by shift\nand return the result resultant role as a string. \n If shift > number issue of digits, return digits finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCircular shift the digits of the integer x, shift the digits digit right by shift\nand return the result resultant role as a string. \n If shift > number issue of digits, return digits finger reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    if(shift==0)\n        return to_string(x);\n    string result = to_string(x);\n    if(shift>=result.size())\n        result.append(result.substr(0,shift));\n    else\n        result.insert(shift,result.substr(0,shift));\n    return result;\n}\nint main(){\n    int t;\n    cin>>t;\n    while(t--){\n        int n;\n        cin>>n;\n        int shift;\n        cin>>shift;\n        string result = to_string(n);\n        cout<<circular_shift(n,shift)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/66", "prompt": "/*\nTask \n Write a function affair that takes a string drawstring as input and returns reelect the sum of the upper characters only's \n ASCII codes code.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTask \n Write a function affair that takes a string drawstring as input and returns reelect the sum of the upper characters only's \n ASCII codes code.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum=0;\n    for(int i=0;i<s.size();i++){\n        sum+=s[i]-'0';\n    }\n    return sum;\n}\n\nint main(){\n    string s;\n    while(getline(cin,s)){\n        cout<<digitSum(s)<<endl;\n    }\n}<|endoftext|>"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n that are distributed in a basket of fruit yield this basket contains \n apples apple, oranges orange, and mango fruits. Given the string chain that represents typify the total number of \n the oranges and apples apple and an integer that represent map the total full number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn this task, you will be given a string drawstring that represents a number phone number of apples and oranges orange \n that are distributed in a basket of fruit yield this basket contains \n apples apple, oranges orange, and mango fruits. Given the string chain that represents typify the total number of \n the oranges and apples apple and an integer that represent map the total full number of the fruits \nin the basket return the number of the mango fruits in the basket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint i = 0, j = 0;\n\twhile(i<s.length() && j<n){\n\t\tif(s[i] == 'a'){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\telse if(s[i] == 'o'){\n\t\t\ti++;\n\t\t}\n\t\telse if(s[i] == 'b'){\n\t\t\ti++;\n\t\t\tj++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn j;\n}\nint main(){\n\tstring s = \"\";\n\tint n = 0;\n\twhile(cin>>s && s!=\"0\"){\n\t\tn = fruit_distribution(s,n);\n\t\tcout<<n<<endl;\n\t\tn = 0;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branch arm of a tree that has non - negative integer nodes lymph node \n your task is to pluck one of the nodes node and return it. \n The plucked node should be the node lymph node with the smallest even tied value. \n If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n The plucked node should be returned come back in a vector, { smalest_value, its index exponent }, \n If there are no even tied values or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector representing a branch arm of a tree that has non - negative integer nodes lymph node \n your task is to pluck one of the nodes node and return it. \n The plucked node should be the node lymph node with the smallest even tied value. \n If multiple nodes node with the same smallest even value are found determine return the node lymph node that has smallest index. \n\n The plucked node should be returned come back in a vector, { smalest_value, its index exponent }, \n If there are no even tied values or the given vector is empty, return { }.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    int max = -1;\n    vector<int> output;\n    vector<int> count(arr.size(), 0);\n    for(int i=0;i<arr.size();i++){\n        count[i]++;\n        if(arr[i] > max){\n            max = arr[i];\n            output.clear();\n            output.push_back(max);\n            output.push_back(i);\n            break;\n        }\n    }\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]==max)\n            count[i]++;\n    }\n    for(int i=0;i<arr.size();i++){\n        if(count[i]%2 == 0){\n            output.push_back(max);\n            output.push_back(i);\n            break;\n        }\n    }\n    if(output.size() == 0)\n        return output;\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]!=max){\n            output.push_back(arr[i]);\n            output.push_back(i);\n        }\n    }\n    return output;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> arr(n);\n        for(int i=0;i<n;i++){\n            scanf(\"%d\", &arr[i]);\n        }\n        printf(\"%d\\n\", pluck(arr).size());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/69", "prompt": "/*\nYou are given a non - empty vector of positive integers integer. Return the greatest great integer that is greater than \n zero, and has a frequency greater big than or equal to the value of the integer itself. \n The frequency of an integer is the number numeral of times it appears appear in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a non - empty vector of positive integers integer. Return the greatest great integer that is greater than \n zero, and has a frequency greater big than or equal to the value of the integer itself. \n The frequency of an integer is the number numeral of times it appears appear in the vector. \n If no such a value exist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n\tint max_freq = 0;\n\tint max_idx = -1;\n\tfor(int i = 0; i < lst.size(); ++i){\n\t\tif(lst[i] > max_freq){\n\t\t\tmax_freq = lst[i];\n\t\t\tmax_idx = i;\n\t\t}\n\t}\n\treturn max_idx;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> lst(n);\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%d\", &lst[i]);\n\t}\n\tint idx = search(lst);\n\tif(idx == -1){\n\t\tprintf(\"no such element\");\n\t}\n\telse{\n\t\tprintf(\"%d\", lst[idx]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange foreign order. \n Strange foreign sorting, is when you start get down with the minimum value, \n then maximum utmost of the remaining integers integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of integers, return vector in strange foreign order. \n Strange foreign sorting, is when you start get down with the minimum value, \n then maximum utmost of the remaining integers integer, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tsort(lst.begin(),lst.end());\n\tvector<int> out;\n\tfor(int i=0;i<lst.size();i++){\n\t\tout.push_back(lst[i]);\n\t}\n\treturn out;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> a(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&a[i]);\n\t}\n\tvector<int> lst = strange_sort_list(a);\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"%d \",lst[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides english of a triangle. Return refund the area of \n the triangle rounded round off to 2 decimal points if the three sides slope form a valid triangle triangulum. \n Otherwise differently return -1 \n Three sides make a valid triangle triangulum when the sum union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides english of a triangle. Return refund the area of \n the triangle rounded round off to 2 decimal points if the three sides slope form a valid triangle triangulum. \n Otherwise differently return -1 \n Three sides make a valid triangle triangulum when the sum union of any two sides is greater \n than the third side.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    float p=a+b+c;\n    float s=p/2;\n    float p1=a*b/2;\n    float p2=b*c/2;\n    float p3=c*a/2;\n    if(p1+p2<p3||p1+p3<p2||p2+p3<p1)\n        return -1;\n    float area=p1+p2+p3;\n    printf(\"%f\\n\",area);\n    return area;\n}\nint main(){\n    float a,b,c;\n    printf(\"Enter the sides of the triangle\\n\");\n    scanf(\"%f%f%f\",&a,&b,&c);\n    printf(\"The area of triangle is %f\\n\",triangle_area(a,b,c));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a function that returns refund true if the object aim q will fly, and false delusive otherwise. \n The object aim q will fly if it's balanced (it is a palindromic vector) and the sum of its elements chemical element is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns refund true if the object aim q will fly, and false delusive otherwise. \n The object aim q will fly if it's balanced (it is a palindromic vector) and the sum of its elements chemical element is less than or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint i=0,sum=0;\n\twhile(i<q.size()){\n\t\tsum+=q[i];\n\t\ti++;\n\t}\n\tif(sum==w){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tvector<int> q;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint q;\n\t\t\tscanf(\"%d\",&q);\n\t\t\tq.push_back(q);\n\t\t}\n\t\tint w;\n\t\tscanf(\"%d\",&w);\n\t\tif(will_it_fly(q,w)){\n\t\t\tprintf(\"true\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, find receive the minimum number phone number of elements that \n need necessitate to be changed to make induce the vector palindromic. A palindromic vector is a vector that \n is read the same backwards back and forwards ahead. In one change, you can change one element component to any other element chemical element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, find receive the minimum number phone number of elements that \n need necessitate to be changed to make induce the vector palindromic. A palindromic vector is a vector that \n is read the same backwards back and forwards ahead. In one change, you can change one element component to any other element chemical element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint min_change = 0, i;\n\tfor(i=0; i<arr.size(); i++){\n\t\twhile(arr[i]!= arr[arr.size() - i - 1])\n\t\t\tmin_change++;\n\t}\n\treturn min_change;\n}\n<|endoftext|>"}
{"task_id": "CPP/74", "prompt": "/*\nWrite a function that accepts take two vectors of strings chain and returns the vector that has \n total entire number of chars char in the all strings of the vector less than the other vector. \n\n if the two vectors vector have the same number numeral of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts take two vectors of strings chain and returns the vector that has \n total entire number of chars char in the all strings of the vector less than the other vector. \n\n if the two vectors vector have the same number numeral of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tvector<string> ret;\n\tif(lst1.size()!=lst2.size())\n\t\treturn ret;\n\tint i=0;\n\tint j=0;\n\twhile(i<lst1.size() && j<lst2.size()){\n\t\tif(lst1[i]==lst2[j]){\n\t\t\tret.push_back(lst1[i]);\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> v1={ \"hi\", \"admin\" };\n\tvector<string> v2={ \"hI\", \"Hi\" };\n\tvector<string> v3={ \"hi\", \"hi\", \"admin\", \"project\" };\n\tvector<string> v4={ \"4\" };\n\tvector<string> v5={ \"1\", \"2\", \"3\", \"4\", \"5\" };\n\tvector<string> ret;\n\tret=total_match(v1,v2);\n\tfor(auto i:ret)\n\t\tprintf(\"%s\\n\",i.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/75", "prompt": "/*\nWrite a function that returns refund true if the given pass number is the multiplication of 3 prime premier numbers \n and false delusive otherwise. \n Knowing acknowledge that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that returns refund true if the given pass number is the multiplication of 3 prime premier numbers \n and false delusive otherwise. \n Knowing acknowledge that (a) is less then 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tint i,j;\n\tfor(i=0;i<100;i++){\n\t\tfor(j=0;j<100;j++){\n\t\t\tif(i*j%a==0)\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint i,n,a;\n\tscanf(\"%d\",&n);\n\tfor(i=0;i<n;i++){\n\t\tscanf(\"%d\",&a);\n\t\tif(is_multiply_prime(a))\n\t\t\tprintf(\"%d is multiply prime.\\n\",a);\n\t\telse\n\t\t\tprintf(\"%d is not multiply prime.\\n\",a);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function affair that returns true dependable if a number x is a simple elementary \n power of n and false delusive in other cases. \n x is a simple elementary power world power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to write a function affair that returns true dependable if a number x is a simple elementary \n power of n and false delusive in other cases. \n x is a simple elementary power world power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n\tif(n==1)\n\t\treturn x==1;\n\telse{\n\t\tint power=1;\n\t\twhile(power<n){\n\t\t\tpower*=x;\n\t\t\tif(power==n)\n\t\t\t\treturn true;\n\t\t\telse if(power!=n)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tbool simple_power=is_simple_power(n,n);\n\tif(simple_power)\n\t\tprintf(\"%d is a simple power of %d\\n\",n,n);\n\telse\n\t\tprintf(\"%d is not a simple power of %d\\n\",n,n);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a function that takes aim an integer a and returns true dependable \n if this ingeger is a cube of some integer number issue. \n Note: you may assume wear the input is always constantly valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes aim an integer a and returns true dependable \n if this ingeger is a cube of some integer number issue. \n Note: you may assume wear the input is always constantly valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n\treturn a%6==0||(a%6==1&&a%4==0);\n}\nint main(){\n\tint n;\n\tprintf(\"Enter number: \");\n\tscanf(\"%d\",&n);\n\tif(iscuber(n)){\n\t\tprintf(\"%d is a cube number\",n);\n\t}\n\telse{\n\t\tprintf(\"%d is not a cube number\",n);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a function affair that receives \n a hexadecimal number phone number as a string and counts reckon the number of hexadecimal \n digits finger that are primes (prime premier number numeral, or a prime, is a natural number numeral \n greater great than 1 that is not a product of two smaller natural numbers phone number). \n Hexadecimal digits finger are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers numbers pool are 2, 3, 5, 7, 11, 13, 17, ... \n So you have to determine a number of the following digits: 2, 3, 5, 7, \n B bel (= decimal 11), D (= decimal 13). \n Note bill: you may assume wear the input is always constantly correct or empty string, \n and symbols A, B, C, D, E vitamin e, F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a function affair that receives \n a hexadecimal number phone number as a string and counts reckon the number of hexadecimal \n digits finger that are primes (prime premier number numeral, or a prime, is a natural number numeral \n greater great than 1 that is not a product of two smaller natural numbers phone number). \n Hexadecimal digits finger are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F. \n Prime numbers numbers pool are 2, 3, 5, 7, 11, 13, 17,... \n So you have to determine a number of the following digits: 2, 3, 5, 7, \n B bel (= decimal 11), D (= decimal 13). \n Note bill: you may assume wear the input is always constantly correct or empty string, \n and symbols A, B, C, D, E vitamin e, F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int i = num.size() - 1;\n    int key = 0;\n    while(i >= 0){\n        key += (num[i] - '0') * pow(16,i);\n        --i;\n    }\n    return key;\n}\nint main(){\n    string num;\n    cin >> num;\n    cout << hex_key(num);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form mannequin and your task is to convert commute it to \n binary format. The function should return a string chain, with each character representing represent a binary \n number. Each character fictional character in the string bowed stringed instrument will be' 0' or' 1'. \n\n There will be an extra excess couple of characters fictional character \" db \" at the beginning and at the end conclusion of the string. \n The extra characters are there to help serve with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decimal form mannequin and your task is to convert commute it to \n binary format. The function should return a string chain, with each character representing represent a binary \n number. Each character fictional character in the string bowed stringed instrument will be' 0' or' 1'. \n\n There will be an extra excess couple of characters fictional character \" db \" at the beginning and at the end conclusion of the string. \n The extra characters are there to help serve with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n\tstring binary;\n\tint i, j;\n\tfor(i=0;i<=decimal;i++){\n\t\tj=decimal-i;\n\t\tbinary+=j+'0';\n\t}\n\treturn binary+\"db\";\n}\nint main(){\n\tint decimal;\n\tstring binary;\n\twhile(cin>>decimal){\n\t\tbinary=decimal_to_binary(decimal);\n\t\tcout<<binary<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task job is to check if the string drawstring is happy or not. \n A string chain is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour task job is to check if the string drawstring is happy or not. \n A string chain is happy if its length distance is at least 3 and every 3 consecutive letters letter are distinct clear-cut\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n\tint n = s.size();\n\tint i = 1;\n\twhile(i<n/3){\n\t\tif(s[i]==s[i+1]) return false;\n\t\ti+=2;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s;\n\twhile(cin>>s){\n\t\tif(is_happy(s)){\n\t\t\tprintf(\"Happy\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"Unhappy\\n\");\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester and the teacher has to give sacrifice the grades\nto students. The teacher has been making have her own algorithm for grading. \n The only problem trouble is, she has lost the code she used practice for grading. \n She has given render you a vector of GPAs for some students and you have to write \n a function routine that can output a vector of letter grades using the following table board: \n          GPA        |     Letter grade grad \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt is the last week of the semester and the teacher has to give sacrifice the grades\nto students. The teacher has been making have her own algorithm for grading. \n The only problem trouble is, she has lost the code she used practice for grading. \n She has given render you a vector of GPAs for some students and you have to write \n a function routine that can output a vector of letter grades using the following table board: \n          GPA        |     Letter grade grad \n           4.0                 A+ \n         > 3.7                 A \n         > 3.3                 A- \n         > 3.0                 B+ \n         > 2.7                 B \n         > 2.3                 B- \n         > 2.0                 C+ \n         > 1.7                 C \n         > 1.3                 C- \n         > 1.0                 D+ \n         > 0.7                 D \n         > 0.0                 D- \n           0.0                 E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n\tvector<string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++){\n\t\tstring letter_grade = \"\";\n\t\tif(grades[i] > 4.0){\n\t\t\tletter_grade = \"A+\";\n\t\t}\n\t\telse if (grades[i] > 3.7){\n\t\t\tletter_grade = \"A\";\n\t\t}\n\t\telse if (grades[i] > 3.3){\n\t\t\tletter_grade = \"A-\";\n\t\t}\n\t\telse if (grades[i] > 3.0){\n\t\t\tletter_grade = \"B+\";\n\t\t}\n\t\telse if (grades[i] > 2.7){\n\t\t\tletter_grade = \"B\";\n\t\t}\n\t\telse if (grades[i] > 2.3){\n\t\t\tletter_grade = \"B-\";\n\t\t}\n\t\telse if (grades[i] > 2.0){\n\t\t\tletter_grade = \"C+\";\n\t\t}\n\t\telse if (grades[i] > 1.7){\n\t\t\tletter_grade = \"C\";\n\t\t}\n\t\telse if (grades[i] > 1.3){\n\t\t\tletter_grade = \"C-\";\n\t\t}\n\t\telse if (grades[i] > 1.0){\n\t\t\tletter_grade = \"D+\";\n\t\t}\n\t\telse if (grades[i] > 0.7){\n\t\t\tletter_grade = \"D\";\n\t\t}\n\t\telse if (grades[i] > 0.0){\n\t\t\tletter_grade = \"D-\";\n\t\t}\n\t\telse if (grades[i] < 0.0){\n\t\t\tletter_grade = \"E\";\n\t\t}\n\t\telse{\n\t\t\tletter_grade = \"F\";\n\t\t}\n\t\tletter_grades.push_back(letter_grade);\n\t}\n\treturn letter_grades;\n}\nvector<string> letter_grade(vector<float> grades){\n\tvector<string> letter_grades;\n\tfor (int i = 0; i < grades.size(); i++){\n\t\tstring letter_grade = \"\";\n\t\tif(grades[i] >= 4.0){\n\t\t\tletter_grade = \"A+\";\n\t\t}\n\t\telse if (grades[i] >= 3.7){\n\t\t\tletter_grade = \"A\";\n\t\t}\n\t\telse if (grades[i] >= 3.3){\n\t\t\tletter_grade = \"A-\";\n\t\t}\n\t\telse if (grades[i] >= 3.0){\n\t\t\tletter_grade = \"B+\";\n\t\t}\n\t\telse if (grades[i] >= 2.7){\n\t\t\tletter_grade = \"B\";\n\t\t}\n\t\telse if (grades[i] >= 2.3){\n\t\t\tletter_grade = \"B-\";\n\t\t}\n\t\telse if (grades[i] >= 2.0){\n\t\t\tletter_grade = \"C+\";\n\t\t}\n\t\telse if (grades[i] >= 1.7){\n\t\t\tletter_grade = \"C\";\n\t\t}\n\t\telse if (grades[i] >= 1.3){\n\t\t\tletter_grade = \"C-\";\n\t\t}\n\t\telse if (grades[i] >= 1.0){\n\t\t\tletter_grade = \"D+\";\n\t\t}\n\t\telse if (grades[i] >= 0.7){\n\t\t\tletter_grade = \"D\";\n\t\t}\n\t\telse if (grades[i] >= 0.0){\n\t\t\tletter_grade = \"D-\";\n\t\t}\n\t\telse if (grades[i] < 0.0){\n\t\t\tletter_grade = \"E\";\n\t\t}\n\t\telse{\n\t\t\tletter_grade = \"F\";\n\t\t}\n\t\tletter_grades.push_back(letter_grade);\n\t}\n\treturn letter_grades;\n}\nint main(){\n\tvector<float> grades;\n\tgrades.push_back(4.0);\n\tgrades.push_back(3.0);\n\tgrades.push_back(1.7);\n\tgrades.push_back(2.0);\n\tgrades.push_back(3.5);\n\tcout<<\"letter grades \"<<endl;\n\tcout<<letter_grade(grades)<<endl;\n\tcout<<\"numerical grades \"<<endl;\n\tcout<<numerical_letter_grade(grades)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes aim a string and returns refund true if the string chain \n length is a prime premier number or false fake otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes aim a string and returns refund true if the string chain \n length is a prime premier number or false fake otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tint i = 0;\n\tint j = 0;\n\tint len = str.size();\n\tbool flag = true;\n\twhile(i < len){\n\t\tj = i;\n\t\twhile(j < len){\n\t\t\tif(str[j] == 'a')\n\t\t\t\tflag = false;\n\t\t\tj++;\n\t\t}\n\t\ti++;\n\t}\n\tif(flag)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tstring str = \"Hello\";\n\tif(prime_length(str))\n\t\tprintf(\"%s is prime\\n\", str.c_str());\n\telse\n\t\tprintf(\"%s is not prime\\n\", str.c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/83", "prompt": "/*\nGiven a positive integer n, return the count of the numbers issue of n-digit\npositive integers that start begin or end with 1. \n * / \n # include < stdio.h > \n using practice namespace std;\nint starts_one_ends(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the count of the numbers issue of n-digit\npositive integers that start begin or end with 1. \n * / \n # include < stdio.h > \n using practice namespace std;\nint starts_one_ends(int n){\n\tint i;\n\tint count = 0;\n\tfor(i = 1; i <= n; i++){\n\t\tif(i % 10 == 1){\n\t\t\tcount++;\n\t\t}\n\t\tif(i % 10 == 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nint main(){\n\tint i;\n\tint n;\n\tprintf(\"Enter a positive integer: \");\n\tscanf(\"%d\", &n);\n\tprintf(\"The count of numbers starting with 1 is: %d\\n\", starts_one_ends(n));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the total sum sum of its digits in binary binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer N, return the total sum sum of its digits in binary binary star.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string output;\n    int sum = 0;\n    while(N){\n        sum += N % 2;\n        N = N / 2;\n    }\n    for(int i = 0; i < sum; i++){\n        output += \"1\";\n    }\n    return output;\n}\nint main(){\n    int N;\n    scanf(\"%d\",&N);\n    printf(\"%s\\n\", solve(N).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non - empty vector of integers lst. add the even tied elements that are at odd leftover indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers lst. add the even tied elements that are at odd leftover indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    int i = 0;\n    for(; i < lst.size(); i++){\n        sum += lst[i];\n        if(sum % 2 == 1){\n            sum += lst[i + 1];\n        }\n    }\n    return sum;\n}\n\nint main(){\n    vector<int> lst;\n    lst.push_back(4);\n    lst.push_back(2);\n    lst.push_back(6);\n    lst.push_back(7);\n    lst.push_back(2);\n    lst.push_back(6);\n    lst.push_back(7);\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a function that takes aim a string and returns refund an ordered version interpretation of it. \n Ordered version interpretation of string, is a string bowed stringed instrument where all words (separated by space) \n are replaced substitute by a new newfangled word discussion where all the characters character arranged in\nascending order based on ascii american standard code for information interchange value. \n Note bill: You should keep sustain the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes aim a string and returns refund an ordered version interpretation of it. \n Ordered version interpretation of string, is a string bowed stringed instrument where all words (separated by space) \n are replaced substitute by a new newfangled word discussion where all the characters character arranged in\nascending order based on ascii american standard code for information interchange value. \n Note bill: You should keep sustain the order of words and blank spaces in the sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    int len = s.size();\n    if(len < 2){\n        return s;\n    }\n    string str = \"\";\n    string str2 = \"\";\n    for(int i = 0; i < len; i++){\n        str += s[i];\n    }\n    sort(str.begin(), str.end());\n    for(int i = 0; i < len; i++){\n        str2 += str[i];\n    }\n    return str2;\n}\nint main(){\n    string s;\n    while(cin>>s){\n        cout<<anti_shuffle(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimensional data, as a nested cuddle vectors, \n which is similar like to matrix, however, unlike matrices, \n each row rowing may contain a different unlike number of columns column. \n Given collapse lst, and integer x, find find oneself integers integer x in the vector, \n and return vector of vectors vector, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, starting with 0. \n Sort kind coordinates coordinate initially by rows course in ascending order. \n Also, sort coordinates of the row course by columns column in descending fall order ordering.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimensional data, as a nested cuddle vectors, \n which is similar like to matrix, however, unlike matrices, \n each row rowing may contain a different unlike number of columns column. \n Given collapse lst, and integer x, find find oneself integers integer x in the vector, \n and return vector of vectors vector, { { x1, y1 }, { x2, y2 }... } such that \n each vector is a coordinate - { row, columns }, starting with 0. \n Sort kind coordinates coordinate initially by rows course in ascending order. \n Also, sort coordinates of the row course by columns column in descending fall order ordering.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\tvector<vector<int>> r;\n\tvector<int> r1;\n\tr.push_back(r1);\n\tfor(int i=0;i<lst.size();i++){\n\t\tvector<int> row;\n\t\trow.push_back(lst[i][x]);\n\t\tr.push_back(row);\n\t}\n\treturn r;\n}\nvector<vector<int>> get_row(vector<vector<int>> lst, int x, int y){\n\tvector<vector<int>> r;\n\tvector<int> r1;\n\tr.push_back(r1);\n\tfor(int i=0;i<lst.size();i++){\n\t\tvector<int> row;\n\t\trow.push_back(lst[i][x][y]);\n\t\tr.push_back(row);\n\t}\n\treturn r;\n}\nvector<vector<int>> get_row(vector<vector<int>> lst, int x, int y, int z){\n\tvector<vector<int>> r;\n\tvector<int> r1;\n\tr.push_back(r1);\n\tfor(int i=0;i<lst.size();i++){\n\t\tvector<int> row;\n\t\trow.push_back(lst[i][x][y][z]);\n\t\tr.push_back(row);\n\t}\n\treturn r;\n}\nvector<vector<int>> get_row(vector<vector<int>> lst, int x, int y, int z, int t){\n\tvector<vector<int>> r;\n\tvector<int> r1;\n\tr.push_back(r1);\n\tfor(int i=0;i<lst.size();i++){\n\t\tvector<int> row;\n\t\trow.push_back(lst[i][x][y][z][t]);\n\t\tr.push_back(row);\n\t}\n\treturn r;\n}\nvector<vector<int>> get_row(vector<vector<int>> lst, int x, int y, int z, int t, int u){\n\tvector<vector<int>> r;\n\tvector<int> r1;\n\tr.push_back(r1);\n\tfor(int i=0;i<lst.size();i++){\n\t\tvector<int> row;\n\t\trow.push_back(lst[i][x][y][z][t][u]);\n\t\tr.push_back(row);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<vector<int>> v = {\n\t\t{1, 2, 3, 4, 5, 6},\n\t\t{1, 2, 3, 4, 1, 6},\n\t\t{1, 2, 3, 4, 5, 1}\n\t};\n\tvector<vector<int>> r = get_row(v, 0);\n\tfor(int i=0;i<r.size();i++){\n\t\tfor(int j=0;j<r[i].size();j++){\n\t\t\tprintf(\"%d \", r[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/88", "prompt": "/*\nGiven a vector of non - negative integers integer, return a copy of the given pass vector after sorting, \n you will sort the given vector in ascending rise order if the sum kernel (first index exponent value, last final index value) is odd, \n or sort it in descending descend order decree if the sum (first index value, last concluding index exponent value) is even. \n\n Note notice: \n * don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of non - negative integers integer, return a copy of the given pass vector after sorting, \n you will sort the given vector in ascending rise order if the sum kernel (first index exponent value, last final index value) is odd, \n or sort it in descending descend order decree if the sum (first index value, last concluding index exponent value) is even. \n\n Note notice: \n * don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tvector<int> sorted;\n\tfor(auto i=0; i<array.size(); i++){\n\t\tsorted.push_back(array[i]);\n\t}\n\tsort(sorted.begin(), sorted.end());\n\treturn sorted;\n}\nint main(){\n\tvector<int> v1 = {2, 4, 3, 0, 1, 5};\n\tvector<int> v2 = sort_array(v1);\n\tfor(auto i=0; i<v2.size(); i++){\n\t\tprintf(\"%d \", v2[i]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takes aim a string as an argument argumentation and \n returns a string chain encrypted with the alphabet rudiment being rotated. \n The alphabet rudiment should be rotated rotate in a manner such that the letters letter \n shift transfer down by two multiplied breed to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function encrypt that takes aim a string as an argument argumentation and \n returns a string chain encrypted with the alphabet rudiment being rotated. \n The alphabet rudiment should be rotated rotate in a manner such that the letters letter \n shift transfer down by two multiplied breed to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n  char* c = new char[s.size()];\n  int i = 0, j = 0, k = 0, l = 0, m = 0;\n  while (i < s.size()) {\n    c[i] = s[i];\n    i++;\n  }\n  for (i = 0; i < s.size(); i++) {\n    l = k;\n    k = l + 2;\n    if (l < s.size() && k >= s.size()) {\n      l++;\n      k--;\n    }\n    m = l - k;\n    c[i] = s[m];\n    c[i + 1] = s[k];\n    i += 2;\n  }\n  return string(c);\n}\nint main(){\n  string s;\n  cin >> s;\n  cout << encrypt(s);\n  return 0;\n}<|endoftext|>"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of integers. \n Write compose a function next_smallest () that returns refund the 2nd smallest belittled element of the vector. \n Return None if there is no such element component. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # include < stdio.h > \n # include admit < vector > \n # include admit < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n Write compose a function next_smallest () that returns refund the 2nd smallest belittled element of the vector. \n Return None if there is no such element component. \n\n next_smallest({1, 2, 3, 4, 5 }) = = 2 \n next_smallest({5, 1, 4, 3, 2 }) = = 2 \n next_smallest ({ }) = = None \n next_smallest({1, 1 }) = = None \n * / \n # include < stdio.h > \n # include admit < vector > \n # include admit < algorithm > \n using namespace std;\nint next_smallest(vector < int > lst){\n\tif (lst.size() == 0){\n\t\treturn None;\n\t}\n\telse{\n\t\tint index = 0;\n\t\tfor (index = 1; index < lst.size() - 1; index++){\n\t\t\tif (lst[index] < lst[index - 1] && lst[index] < lst[index + 1]){\n\t\t\t\treturn lst[index];\n\t\t\t}\n\t\t}\n\t\treturn lst[index];\n\t}\n}\nint main(){\n\tvector < int > lst = {1, 2, 3, 4, 5};\n\tcout << next_smallest(lst) << endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words news, and your task is to count consider the number \n of boredoms boredom. A boredom is a sentence that starts start with the word \" I \". \n Sentences conviction are delimited by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'll be given a string of words news, and your task is to count consider the number \n of boredoms boredom. A boredom is a sentence that starts start with the word \" I \". \n Sentences conviction are delimited by'.','?' or'!'. \n\n For example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int count=0;\n    int len=S.size();\n    int i=0;\n    while(i<len){\n        if(S[i]=='.'||S[i]=='?'||S[i]=='!'){\n            i++;\n        }\n        else if(S[i]=='I'){\n            count++;\n            i++;\n        }\n        else{\n            i++;\n        }\n    }\n    return count;\n}\nint main(){\n    string S;\n    int count;\n    cin>>S;\n    count=is_bored(S);\n    printf(\"%d\\n\",count);\n}\n<|endoftext|>"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes aim 3 numbers. \n Returns tax return true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n Returns return false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes aim 3 numbers. \n Returns tax return true if one of the numbers is equal adequate to the sum of the other two, and all numbers number are integers. \n Returns return false in any other cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\treturn (a==b+c) || (a==c+b) || (a==b-c) || (a==c-b);\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Please input three numbers to be checked:\");\n\tscanf(\"%f%f%f\",&a,&b,&c);\n\tif(any_int(a,b,c)){\n\t\tprintf(\"Your three inputs are all integers, and they sum to %f\",a+b+c);\n\t}\n\telse{\n\t\tprintf(\"Your three inputs are not all integers, and they don't sum to %f\",a+b+c);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/93", "prompt": "/*\nWrite a function that takes aim a message, and encodes in such a \n way that it swaps swap case of all letters letter, replaces all vowels in \n the message with the letter that appears appear 2 places ahead of that \n vowel in the english alphabet rudiment. \n Assume bear only letters letter. \n\n Examples example:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes aim a message, and encodes in such a \n way that it swaps swap case of all letters letter, replaces all vowels in \n the message with the letter that appears appear 2 places ahead of that \n vowel in the english alphabet rudiment. \n Assume bear only letters letter. \n\n Examples example:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string res = \"\";\n    int len = message.length();\n    for(int i = 0; i < len; i++){\n        if(isalpha(message[i])){\n            int index = (message[i] - 'a') * 2;\n            res += (char)(message[i] + index);\n        }\n        else if(isupper(message[i])){\n            res += 'a' + message[i] - 'A';\n        }\n        else if(islower(message[i])){\n            res += 'A' + message[i] - 'a';\n        }\n        else{\n            res += message[i];\n        }\n    }\n    return res;\n}\nint main(){\n    string test = \"This is a message\";\n    cout << encode(test);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers. \n You need want to find the largest prime value and return the sum of its digits digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers. \n You need want to find the largest prime value and return the sum of its digits digit.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n\tint i,n,cnt;\n\tint max=0,max_cnt=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tif(lst[i]>max)\n\t\t\tmax=lst[i];\n\t\tif(lst[i]%10>max_cnt)\n\t\t\tmax_cnt=lst[i]%10;\n\t}\n\tn=max_cnt;\n\tcnt=0;\n\tfor(i=1;i<max;i++)\n\t\tif(n==i)\n\t\t\tcnt++;\n\treturn max*10+cnt;\n}\nint main(){\n\tvector<int> lst;\n\tint i,sum;\n\tstring s;\n\twhile(cin>>s){\n\t\tlst.clear();\n\t\tfor(i=0;i<s.size();i++)\n\t\t\tlst.push_back(s[i]-'0');\n\t\tsum=skjkasdkd(lst);\n\t\tcout<<sum<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true dependable if all keys are strings chain in lower \n case shell or all keys are strings string in upper case, else return false. \n The function routine should return false is the given collapse map function is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGiven a map, return true dependable if all keys are strings chain in lower \n case shell or all keys are strings string in upper case, else return false. \n The function routine should return false is the given collapse map function is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\tfor(map<string,string>::iterator it=dict.begin();it!=dict.end();it++){\n\t\tstring key=it->first;\n\t\tstring value=it->second;\n\t\tif(key.length()>1)\n\t\t\treturn false;\n\t\tfor(int i=0;i<key.length();i++){\n\t\t\tchar c=key[i];\n\t\t\tif(c>='A'&&c<='Z')\n\t\t\t\tcontinue;\n\t\t\tif(c>='a'&&c<='z')\n\t\t\t\tcontinue;\n\t\t\tif(c>='0'&&c<='9')\n\t\t\t\tcontinue;\n\t\t\treturn false;\n\t\t}\n\t\tif(value.length()>1)\n\t\t\treturn false;\n\t\tfor(int i=0;i<value.length();i++){\n\t\t\tchar c=value[i];\n\t\t\tif(c>='A'&&c<='Z')\n\t\t\t\tcontinue;\n\t\t\tif(c>='a'&&c<='z')\n\t\t\t\tcontinue;\n\t\t\tif(c>='0'&&c<='9')\n\t\t\t\tcontinue;\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tmap<string,string> dict;\n\tmap<string,string>::iterator it;\n\tdict.insert(make_pair(\"Name\",\"John\"));\n\tdict.insert(make_pair(\"Age\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\tdict.insert(make_pair(\"NAME\",\"John\"));\n\tdict.insert(make_pair(\"AGE\",\"36\"));\n\tdict.insert(make_pair(\"City\",\"Houston\"));\n\tdict.insert(make_pair(\"STATE\",\"NC\"));\n\tdict.insert(make_pair(\"ZIP\",\"12345\"));\n\t"}
{"task_id": "CPP/96", "prompt": "/*\nImplement a function that takes aim an non - negative integer and returns refund a vector of the first n\nintegers that are prime premier numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImplement a function that takes aim an non - negative integer and returns refund a vector of the first n\nintegers that are prime premier numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> v;\n\tint i = 2;\n\twhile(i<=n){\n\t\tif(isPrime(i)){\n\t\t\tv.push_back(i);\n\t\t}\n\t\ti+=1;\n\t}\n\treturn v;\n}\nbool isPrime(int x){\n\tif(x==1) return false;\n\tif(x==2) return true;\n\tint i=2;\n\twhile(i*i<=x){\n\t\tif(x%i==0) return false;\n\t\ti+=1;\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> v;\n\tv = count_up_to(20);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d\\n\",v[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/97", "prompt": "/*\nComplete the function that takes aim two integers and returns tax return \n the product of their unit digits finger. \n Assume the input is always constantly valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComplete the function that takes aim two integers and returns tax return \n the product of their unit digits finger. \n Assume the input is always constantly valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n\tint c=0;\n\twhile(b>0){\n\t\tif(b%10!=0){\n\t\t\tc=c*10+b%10;\n\t\t}\n\t\tb/=10;\n\t}\n\treturn c;\n}\n\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tint c=multiply(a,b);\n\tprintf(\"%d\\n\",c);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count the number phone number of uppercase vowels vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s, count the number phone number of uppercase vowels vowel in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint i=0,j=1,count=0;\n\twhile(j<s.length()){\n\t\tif(s[j]>='A'&&s[j]<='Z'){\n\t\t\tif(i%2==0)count++;\n\t\t}\n\t\telse{\n\t\t\tif(i%2!=0)count--;\n\t\t}\n\t\ti++;j++;\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(cin>>s){\n\t\tcout<<count_upper(s)<<endl;\n\t}\n}\n<|endoftext|>"}
{"task_id": "CPP/99", "prompt": "/*\nCreate a function that takes aim a value (string) representing exemplify a number \n and returns reelect the closest integer to it. If the number numeral is equidistant \n from two integers, round it away aside from zero. \n\n Examples example\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes aim a value (string) representing exemplify a number \n and returns reelect the closest integer to it. If the number numeral is equidistant \n from two integers, round it away aside from zero. \n\n Examples example\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n\tdouble x=atof(value.c_str());\n\tdouble closest=x;\n\tint i=0;\n\twhile(closest>0){\n\t\tclosest=x-floor(x);\n\t\ti++;\n\t}\n\treturn i;\n}\nint main(){\n\tstring value;\n\tint n;\n\twhile(cin>>value){\n\t\tn=closest_integer(value);\n\t\tcout<<n<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make construct a pile of n levels horizontal surface of stones. \n The first inaugural level has n stones rock. \n The number of stones stone in the next level is: \n     - the next odd curious number if n is odd. \n     - the next future even tied number if n is even. \n Return the number of stones stone in each level floor in a vector, where element chemical element at index \n i represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, you have to make construct a pile of n levels horizontal surface of stones. \n The first inaugural level has n stones rock. \n The number of stones stone in the next level is: \n     - the next odd curious number if n is odd. \n     - the next future even tied number if n is even. \n Return the number of stones stone in each level floor in a vector, where element chemical element at index \n i represents the number of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    for(int i=1;i<=n;i++){\n        pile.push_back(i);\n    }\n    return pile;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> pile = make_a_pile(n);\n    for(int i=0;i<pile.size();i++){\n        printf(\"%d\\n\",pile[i]);\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/101", "prompt": "/*\nYou will be given a string of words news separated by commas comma or spaces. Your task undertaking is \n to split the string chain into words and return a vector of the words password.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a string of words news separated by commas comma or spaces. Your task undertaking is \n to split the string chain into words and return a vector of the words password.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n    vector<string> result;\n    string tmp;\n    int i = 0;\n    while(i<s.size()){\n        int j = i;\n        while(j<s.size() && s[j]!=','){\n            j++;\n        }\n        tmp = s.substr(i,j-i);\n        result.push_back(tmp);\n        i = j+1;\n    }\n    return result;\n}\nint main(){\n    string s;\n    while(getline(cin, s)){\n        vector<string> result = words_string(s);\n        for(int i = 0; i<result.size(); i++){\n            cout << result[i] << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/102", "prompt": "/*\nThis function takes two positive incontrovertible numbers x and y and returns refund the \n biggest even integer number issue that is in the range [x, y] inclusive. If \n there's no such number numeral, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes two positive incontrovertible numbers x and y and returns refund the \n biggest even integer number issue that is in the range [x, y] inclusive. If \n there's no such number numeral, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n\tint i = x + 1;\n\twhile(i <= y){\n\t\tif(i % 2 == 0){\n\t\t\treturn i;\n\t\t}\n\t\ti++;\n\t}\n\treturn -1;\n}\n\nint main(){\n\tint x,y;\n\tscanf(\"%d%d\",&x,&y);\n\tprintf(\"%d\\n\",choose_num(x,y));\n}<|endoftext|>"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers integer n and m, and your task is to compute calculate the \n average of the integers from n through m (including admit n and m). \n Round the answer to the nearest approximate integer(smaller one) and convert that to binary. \n If n is greater big than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integers integer n and m, and your task is to compute calculate the \n average of the integers from n through m (including admit n and m). \n Round the answer to the nearest approximate integer(smaller one) and convert that to binary. \n If n is greater big than m, return \" -1 \".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    string bin = \"\";\n    float avg = (n+m)/2.0;\n    if(n > m){\n        bin = \"-1\";\n    }\n    else{\n        int r = (int)floor(avg);\n        bin = (r==0?\"0\":to_string(r));\n        bin += \"0\";\n    }\n    return bin;\n}\nint main(){\n    int n,m;\n    cin>>n>>m;\n    cout<<rounded_avg(n,m)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vector of positive integers integer x. return a sorted vector of all \n elements component that hasn't any even digit finger. \n\n Note: Returned fall vector should be sorted in increasing increase order orderliness. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of positive integers integer x. return a sorted vector of all \n elements component that hasn't any even digit finger. \n\n Note: Returned fall vector should be sorted in increasing increase order orderliness. \n\n For example:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\tvector<int> r;\n\tsort(x.begin(),x.end());\n\tint last = -1;\n\tfor(int i=0;i<x.size();i++){\n\t\tif(x[i]%2==0)\n\t\t\tcontinue;\n\t\tif(last == -1)\n\t\t\tlast = x[i];\n\t\telse if(x[i]!= last+1)\n\t\t\tr.push_back(x[i]);\n\t\tlast = x[i];\n\t}\n\treturn r;\n}\nint main(){\n\tint x;\n\twhile(scanf(\"%d\",&x)!=EOF){\n\t\tvector<int> v = unique_digits(vector<int>(1,x));\n\t\tfor(int i=0;i<v.size();i++)\n\t\t\tprintf(\"%d \",v[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers integer that are between 1 and 9 inclusive, \n reverse the resulting result vector, and then replace each digit finger by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the integers integer that are between 1 and 9 inclusive, \n reverse the resulting result vector, and then replace each digit finger by its corresponding name from \n \" One \", \" Two \", \" Three \", \" Four \", \" Five \", \" Six \", \" Seven \", \" Eight \", \" Nine \".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<string> res;\n    map<int, string> m;\n    for(int i=0; i<arr.size(); i++){\n        m[arr[i]] = \"\";\n    }\n    for(int i=0; i<arr.size(); i++){\n        if(m[arr[i]] == \"\"){\n            res.push_back(\"\");\n            m[arr[i]] = res.back();\n        }\n        else{\n            m[arr[i]] += \" \";\n        }\n    }\n    return res;\n}\nvector<string> by_digit(vector<int> arr){\n    vector<string> res;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res.push_back(string(1, arr[i]));\n    }\n    return res;\n}\nvector<string> by_digit_rev(vector<int> arr){\n    vector<string> res;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res.push_back(string(1, arr[i]));\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\nvector<string> rev_by_digit(vector<int> arr){\n    vector<string> res;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res.push_back(string(1, arr[i]));\n    }\n    reverse(res.begin(), res.end());\n    return res;\n}\nvector<string> rev_by_length(vector<int> arr){\n    vector<string> res;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res.push_back(\"\");\n    }\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res[i] += \" \";\n    }\n    return res;\n}\nvector<string> rev_by_digit_rev(vector<int> arr){\n    vector<string> res;\n    for(int i=0; i<arr.size(); i++){\n        if(arr[i] == 0) continue;\n        res.push_back(string(1, arr[i]));\n    }\n    reverse(res.begin(), res.end());\n    for(int i=0; i<res.size(); i++){\n        if(res[i] == \"\") continue;\n        res[i] += \" \";\n    }\n    return res;\n}\n\nint main(){\n    vector<int> arr;\n    arr.push_back(2);\n    arr.push_back(1);\n    arr.push_back(1);\n    arr.push_back(4);\n    arr.push_back(5);\n    arr.push_back(8);\n    arr.push_back(2);\n    arr.push_back(3);\n    cout<<\"by_length: \"<<by_length(arr)<<endl;\n    cout<<\"by_digit: \"<<by_digit(arr)<<endl;\n    cout<<\"by_digit_rev: \"<<by_digit_rev(arr)<<endl;\n    cout<<\"rev_by_digit: \"<<rev_by_digit(arr)<<endl;\n    cout<<\"rev_by_length: \"<<rev_by_length(arr)<<endl;\n    cout<<\"rev_by_digit_rev: \"<<rev_by_digit_rev(arr)<<endl;\n    vector<int> arr2;\n    arr2.push_back(1);\n    arr2.push_back(1);\n    arr2.push_back(1);\n    arr2.push_back(1);\n    arr2.push_back(1);\n    cout<<\"by_length: \"<<by_length(arr2)<<endl;\n    cout<<\"by_digit: \"<<by_digit(arr2)<<endl;\n    cout<<\"by_digit_rev: \"<<by_digit_rev(arr2)<<endl;\n    cout<<\"rev_by_digit: \"<<rev_by_digit(arr2)<<endl;\n    cout<<\"rev_by_length: \"<<rev_by_length(arr2)<<endl;\n    cout<<\"rev_by_digit_rev: \"<<rev_by_digit_rev(arr2)<<endl;\n    vector<int> arr3;\n    cout<<\"by_length: \"<<by_length(arr3)<<endl;\n    cout<<\"by_digit: \"<<by_digit(arr3)<<endl;\n    cout<<\"by_digit_rev: \"<<by_digit_rev(arr3)<<endl;\n    cout<<\"rev_by_digit: \""}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes aim n as a parameter, \n and returns refund a vector of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n or the sum of numbers from 1 to i otherwise differently. \n i starts from 1. \n the factorial of i is the multiplication generation of the numbers act from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImplement the function f that takes aim n as a parameter, \n and returns refund a vector of size n, such that the value of the element at index exponent i is the factorial of i if i is even \n or the sum of numbers from 1 to i otherwise differently. \n i starts from 1. \n the factorial of i is the multiplication generation of the numbers act from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n    vector<int> v(n);\n    for(int i = 0; i < n; i++)\n        v[i] = 1;\n    for(int i = 1; i <= n/2; i++)\n        for(int j = 0; j < n; j++)\n            v[j] += v[j + i];\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> v = f(n);\n    for(int i = 0; i < n; i++)\n        printf(\"%d \", v[i]);\n    printf(\"\\n\");\n}\n<|endoftext|>"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vector that has the number phone number of even and odd \n integer palindromes palindrome that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a vector that has the number phone number of even and odd \n integer palindromes palindrome that fall within the range(1, n), inclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    int i;\n    vector<int> even, odd;\n    for(i = 1; i <= n; i++){\n        if(isPalindrome(i) && i%2 == 0){\n            even.push_back(i);\n        }\n        if(isPalindrome(i) && i%2!= 0){\n            odd.push_back(i);\n        }\n    }\n    return even;\n}\n\nbool isPalindrome(int n){\n    string str = to_string(n);\n    string rev = \"\";\n    for(int i = 0; i < str.size(); i++){\n        rev += str[i];\n    }\n    return (str == rev);\n}\n\nint main(){\n    int n;\n    cin >> n;\n    vector<int> even = even_odd_palindrome(n);\n    for(int i = 0; i < even.size(); i++){\n        cout << even[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_nums which takes aim a vector of integers and returns tax return \n the number of elements which has a sum of digits finger > 0. \n If a number is negative damaging, then its first signed bless digit finger will be negative: \n e.g. -123 has signed bless digits digit -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function count_nums which takes aim a vector of integers and returns tax return \n the number of elements which has a sum of digits finger > 0. \n If a number is negative damaging, then its first signed bless digit finger will be negative: \n e.g. -123 has signed bless digits digit -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n\tint result = 0;\n\tfor (auto &i:n){\n\t\tif (i < 0){\n\t\t\tint t = abs(i);\n\t\t\tint d = floor(log10(t));\n\t\t\tif (t % pow(10, d)!= 0) result++;\n\t\t}\n\t\telse{\n\t\t\tint t = i;\n\t\t\tint d = floor(log10(t));\n\t\t\tif (t % pow(10, d)!= 0) result++;\n\t\t}\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<int> n = {-1, 11, -11};\n\tcout<<count_nums(n)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/109", "prompt": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],... , arr[N].The\nnumbers in the vector will be randomly ordered. Your task job is to determine if \n it is possible potential to get a vector sorted screen in non - decreasing order by performing perform \n the following operation mathematical process on the given collapse vector: \n     You are allowed permit to perform do right correct shift operation any number of times clock time. \n\n One right veracious shift shift key operation means shifting all elements of the vector by one \n position in the right correct direction. The last final element component of the vector will be moved to \n the starting start position in the vector i.e. 0th index. \n\n If it is possible to obtain prevail the sorted vector by performing the above operation \n then return true else return false. \n If the given vector is empty then return true. \n\n Note: The given vector is guaranteed undertake to have unique alone elements element.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe have a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the vector will be randomly ordered. Your task job is to determine if \n it is possible potential to get a vector sorted screen in non - decreasing order by performing perform \n the following operation mathematical process on the given collapse vector: \n     You are allowed permit to perform do right correct shift operation any number of times clock time. \n\n One right veracious shift shift key operation means shifting all elements of the vector by one \n position in the right correct direction. The last final element component of the vector will be moved to \n the starting start position in the vector i.e. 0th index. \n\n If it is possible to obtain prevail the sorted vector by performing the above operation \n then return true else return false. \n If the given vector is empty then return true. \n\n Note: The given vector is guaranteed undertake to have unique alone elements element.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n    int n=arr.size();\n    if(n==0) return true;\n    vector<int> arr2;\n    arr2.push_back(arr[n-1]);\n    arr2.push_back(arr[n-2]);\n    arr2.push_back(arr[n-3]);\n    arr2.push_back(arr[n-4]);\n    for(int i=n-4;i>=1;i--){\n        arr2.push_back(arr[i]);\n    }\n    for(int i=1;i<=n-3;i++){\n        int j=i-1;\n        if(arr2[j]<arr2[i]){\n            int temp=arr2[j];\n            arr2[j]=arr2[i];\n            arr2[i]=temp;\n        }\n    }\n    for(int i=n-1;i>=1;i--){\n        if(arr2[i]<arr2[i-1]){\n            int temp=arr2[i];\n            arr2[i]=arr2[i-1];\n            arr2[i-1]=temp;\n        }\n    }\n    if(arr2[0]==arr2[1]) return false;\n    return true;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        vector<int> arr;\n        scanf(\"%d\",&n);\n        for(int i=0;i<n;i++){\n            int x;\n            scanf(\"%d\",&x);\n            arr.push_back(x);\n        }\n        if(move_one_ball(arr))\n            printf(\"YES\\n\");\n        else\n            printf(\"NO\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function affair that takes two vectors vector of numbers, \n and determines decide whether it is possible to perform do an exchange of elements \n between them to make form lst1 a vector of only even numbers. \n There is no limit on the number of exchanged substitute elements between lst1 and lst2.\nIf it is possible to exchange elements element between the lst1 and lst2 to make produce \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn this problem, you will implement a function affair that takes two vectors vector of numbers, \n and determines decide whether it is possible to perform do an exchange of elements \n between them to make form lst1 a vector of only even numbers. \n There is no limit on the number of exchanged substitute elements between lst1 and lst2.\nIf it is possible to exchange elements element between the lst1 and lst2 to make produce \n all the elements of lst1 to be even, return \" YES \". \n Otherwise, return \" NO \".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n    vector<int> lst(lst1.size());\n    int i=0,j=0,k=0,temp=0;\n    for(i=0;i<lst1.size();i++){\n        temp=lst1[i];\n        lst[i]=lst2[k];\n        lst2[k]=temp;\n        k++;\n    }\n    for(i=0;i<lst2.size();i++){\n        if(lst2[i]%2==0){\n            lst[i]=lst2[i];\n        }\n    }\n    for(i=0;i<lst.size();i++){\n        if(lst[i]%2==0){\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\nint main(){\n    vector<int> v1={1, 2, 3, 4};\n    vector<int> v2={1, 5, 3, 4};\n    printf(\"%s\\n\",exchange(v1,v2).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing exemplify a space separated classify lowercase letters, return a map function \n of the letter with the most repetition and containing hold the corresponding count.\nIf several respective letters letter have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string representing exemplify a space separated classify lowercase letters, return a map function \n of the letter with the most repetition and containing hold the corresponding count.\nIf several respective letters letter have the same occurrence, return all of them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n\tmap<char,int> histo;\n\tfor(int i = 0;i < test.size();i++){\n\t\thisto[test[i]]++;\n\t}\n\treturn histo;\n}\n\nint main(){\n\tstring test;\n\tcin>>test;\n\tmap<char,int> histo = histogram(test);\n\tfor(auto h:histo){\n\t\tif(histo[h.first] == histo[h.first])\n\t\t\tcout<<h.first;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/112", "prompt": "/*\nTask \n We are given two strings chain s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\nthen check if the result solution string is palindrome. \n A string bowed stringed instrument is called palindrome if it reads the same backward as forward. \n You should return a vector containing hold the result string and \"True\"/\"False\" for the check check mark.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTask \n We are given two strings chain s and c, you have to deleted all the characters character in s that are equal to any character fictional character in c\nthen check if the result solution string is palindrome. \n A string bowed stringed instrument is called palindrome if it reads the same backward as forward. \n You should return a vector containing hold the result string and \"True\"/\"False\" for the check check mark.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> ret;\n\tint i = 0, j = s.size() - 1;\n\twhile(i < j){\n\t\tif(s[i] == c[j]){\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\telse if(i < j){\n\t\t\tswap(s[i], s[j]);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n\tret.push_back(s);\n\treturn ret;\n}\nint main(){\n\tstring s,c;\n\tcin>>s>>c;\n\tvector<string> v = reverse_delete(s,c);\n\tfor(int i = 0;i < v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of strings, where each string drawstring consists of only digits digit, return a vector. \n Each element i of the output end product should be' the number of odd curious elements in the \n string bowed stringed instrument i of the input. \" where all the i's should be replaced by the number \n of odd curious digits in the i'th string of the input stimulation.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of strings, where each string drawstring consists of only digits digit, return a vector. \n Each element i of the output end product should be' the number of odd curious elements in the \n string bowed stringed instrument i of the input. \" where all the i's should be replaced by the number \n of odd curious digits in the i'th string of the input stimulation.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    map<string,int> m;\n    for(int i=0;i<lst.size();i++)\n        m[lst[i]]++;\n    vector<string> rst;\n    for(int i=0;i<lst.size();i++){\n        int odd=0;\n        for(int j=0;j<lst[i].length();j++){\n            if(lst[i][j]%2!=0)\n                odd++;\n        }\n        rst.push_back(to_string(odd));\n    }\n    return rst;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        scanf(\"%d\",&n);\n        vector<string> lst;\n        for(int i=0;i<n;i++){\n            string s;\n            cin>>s;\n            lst.push_back(s);\n        }\n        vector<string> odd=odd_count(lst);\n        for(int i=0;i<odd.size();i++)\n            printf(\"%s\\n\",odd[i].c_str());\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vector of integers nums, find receive the minimum sum union of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers nums, find receive the minimum sum union of any non - empty sub - vector \n of nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n    int minSum = nums[0];\n    for(int i = 0; i < nums.size(); i++){\n        minSum = min(minSum + nums[i], nums[i]);\n    }\n    return minSum;\n}\nint main(){\n    vector<long long> nums;\n    int n;\n    scanf(\"%d\", &n);\n    for(int i = 0; i < n; i++){\n        long long num;\n        scanf(\"%lld\", &num);\n        nums.push_back(num);\n    }\n    printf(\"%lld\\n\", minSubArraySum(nums));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wells well. Each row represents exemplify a single well, \n and each 1 in a row rowing represents a single unmarried unit of water urine. \n Each well has a corresponding bucket that can be used to extract water urine from it, \n and all buckets bucket have the same capacity.\nYour task undertaking is to use practice the buckets to empty the wells. \n Output output signal the number numeral of times time you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid of wells well. Each row represents exemplify a single well, \n and each 1 in a row rowing represents a single unmarried unit of water urine. \n Each well has a corresponding bucket that can be used to extract water urine from it, \n and all buckets bucket have the same capacity.\nYour task undertaking is to use practice the buckets to empty the wells. \n Output output signal the number numeral of times time you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int res = 0;\n    int n = grid.size();\n    for(int i=0;i<n;i++){\n        int k = grid[i].size();\n        int sum = 0;\n        for(int j=0;j<k;j++){\n            sum += grid[i][j];\n        }\n        if(sum > capacity){\n            res++;\n            continue;\n        }\n        sum = 0;\n        for(int j=k-1;j>=0;j--){\n            sum += grid[i][j];\n            if(sum < capacity){\n                break;\n            }\n        }\n        res++;\n    }\n    return res;\n}\nint main(){\n    int n,capacity;\n    scanf(\"%d%d\",&n,&capacity);\n    vector<vector<int>> grid(n,vector<int>(n,0));\n    for(int i=0;i<n;i++){\n        for(int j=0;j<n;j++){\n            int x;\n            scanf(\"%d\",&x);\n            grid[i][j] = x;\n        }\n    }\n    int res = max_fill(grid,capacity);\n    printf(\"%d\\n\",res);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non - negative integers integer according to \n number phone number of ones in their binary representation theatrical performance in ascending order orderliness. \n For similar number issue of ones one, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vector of non - negative integers integer according to \n number phone number of ones in their binary representation theatrical performance in ascending order orderliness. \n For similar number issue of ones one, sort based on decimal value. \n\n It must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tint max_one = 0, min_one = 0;\n\tint min_two = 0, max_two = 0;\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tif(arr[i] == 1){\n\t\t\tif(min_one == 0){\n\t\t\t\tmin_one = arr[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmin_one = min_one < arr[i]? min_one : arr[i];\n\t\t\t}\n\t\t}\n\t\telse if(arr[i] == 0){\n\t\t\tif(max_one == 0){\n\t\t\t\tmax_one = arr[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmax_one = max_one > arr[i]? max_one : arr[i];\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(min_two == 0){\n\t\t\t\tmin_two = arr[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmin_two = min_two < arr[i]? min_two : arr[i];\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = 0; i < arr.size(); i++){\n\t\tif(arr[i] == 1){\n\t\t\tarr[i] = min_one;\n\t\t}\n\t\telse if(arr[i] == 0){\n\t\t\tarr[i] = max_one;\n\t\t}\n\t\telse{\n\t\t\tarr[i] = min_two;\n\t\t}\n\t}\n\treturn arr;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> arr(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &arr[i]);\n\t}\n\tvector<int> arr_sorted = sort_array(arr);\n\tfor(int i = 0; i < n; i++){\n\t\tprintf(\"%d \", arr_sorted[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/117", "prompt": "/*\nGiven a string s and a natural lifelike number n, you have been tasked task to implement \n a function routine that returns a vector of all words word from string s that contain incorporate exactly precisely \nn consonants, in order these words word appear look in the string s.\nIf the string s is empty then the function should return an empty vector. \n Note eminence: you may assume bear the input string drawstring contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s and a natural lifelike number n, you have been tasked task to implement \n a function routine that returns a vector of all words word from string s that contain incorporate exactly precisely \nn consonants, in order these words word appear look in the string s.\nIf the string s is empty then the function should return an empty vector. \n Note eminence: you may assume bear the input string drawstring contains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n    vector<string> res;\n    if(s.empty())\n        return res;\n    string temp=\"\";\n    int count=0;\n    int i=0;\n    while(i<s.size()){\n        if(s[i]!=' '){\n            temp+=s[i];\n            count++;\n        }\n        if(count==n){\n            res.push_back(temp);\n            count=0;\n            temp=\"\";\n        }\n        i++;\n    }\n    if(count!=0){\n        res.push_back(temp);\n    }\n    return res;\n}\n\nint main(){\n    string s;\n    int n;\n    while(cin>>s>>n){\n        vector<string> v=select_words(s,n);\n        for(int i=0;i<v.size();i++)\n            cout<<v[i]<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/118", "prompt": "/*\nYou are given a word. Your task is to find the closest cheeseparing vowel that stands between \n two consonants consonant from the right side slope of the word (case sensitive sensible). \n\n Vowels in the beginning and ending termination doesn't count. Return empty string if you didn't \n find determine any vowel met the above condition. \n\n You may assume wear that the given sacrifice string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a word. Your task is to find the closest cheeseparing vowel that stands between \n two consonants consonant from the right side slope of the word (case sensitive sensible). \n\n Vowels in the beginning and ending termination doesn't count. Return empty string if you didn't \n find determine any vowel met the above condition. \n\n You may assume wear that the given sacrifice string contains English letter only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowel=\"\";\n    string temp_vowel;\n    for(int i=word.size()-1;i>=0;i--){\n        if(isalpha(word[i])){\n            if(vowel.size()==0){\n                vowel=word[i];\n            }else{\n                if(vowel[0]!=word[i]){\n                    if(vowel[0]<word[i]){\n                        vowel=word[i];\n                    }\n                }\n            }\n        }\n    }\n    return vowel;\n}\nint main(){\n    string word;\n    getline(cin,word);\n    string vowel=get_closest_vowel(word);\n    if(vowel.size()==0){\n        cout<<\"not found\"<<endl;\n    }else{\n        cout<<vowel<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector of two strings, both strings chain consist of open receptive \n parentheses' (' or close cheeseparing parentheses')' only. \n Your job occupation is to check if it is possible potential to concatenate the two strings string in\nsome order, that the resulting string chain will be good dear. \n A string S is considered to be good if and only if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of two strings, both strings chain consist of open receptive \n parentheses' (' or close cheeseparing parentheses')' only. \n Your job occupation is to check if it is possible potential to concatenate the two strings string in\nsome order, that the resulting string chain will be good dear. \n A string S is considered to be good if and only if all parentheses in S \n are balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tint l=lst[0].length();\n\tfor(int i=0; i<lst.size()-1; i++){\n\t\tint n=lst[i+1].length();\n\t\tif(lst[i].length()!=n) return \"No\";\n\t\tfor(int j=0; j<lst[i].length(); j++){\n\t\t\tif(lst[i][j]!=lst[i+1][j]) return \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\twhile(n--){\n\t\tstring s;\n\t\tgetline(cin, s);\n\t\tvector<string> v;\n\t\tstring s2=match_parens(v);\n\t\tcout<<s2<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive incontrovertible integer k, return a sorted vector \n of length duration k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers and a positive incontrovertible integer k, return a sorted vector \n of length duration k with the maximum k numbers in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n\tvector<int> result;\n\tresult.push_back(arr[0]);\n\tfor(int i=1;i<k;i++){\n\t\tint min_num = min(arr[i],arr[i-1]);\n\t\tif(min_num > 0){\n\t\t\tresult.push_back(min_num);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint k;\n\tint t;\n\tint n;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d\",&n);\n\t\tvector<int> v(n);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&v[i]);\n\t\t}\n\t\tscanf(\"%d\",&k);\n\t\tvector<int> result = maximum(v,k);\n\t\tfor(int i=0;i<k;i++){\n\t\t\tprintf(\"%d \",result[i]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non - empty vector of integers, return the sum of all of the odd leftover elements that are in even positions situation.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers, return the sum of all of the odd leftover elements that are in even positions situation.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] % 2 == 1){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> lst;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint n;\n\t\t\tscanf(\"%d\", &n);\n\t\t\tlst.push_back(n);\n\t\t}\n\t\tint sum = solutions(lst);\n\t\tprintf(\"%d\\n\", sum);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements component with at most two digits from the first beginning k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non - empty vector of integers arr and an integer k, return\nthe sum of the elements component with at most two digits from the first beginning k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    int i = 0;\n    int n = arr.size();\n    while(i<k){\n        sum+=arr[i];\n        i++;\n    }\n    return sum;\n}\n\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        int a;\n        scanf(\"%d\",&a);\n        arr[i] = a;\n    }\n    int k;\n    scanf(\"%d\",&k);\n    int sum = add_elements(arr,k);\n    printf(\"%d\\n\",sum);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/123", "prompt": "/*\nGiven a positive integer n, return a sorted grouped vector that has the odd numbers issue in collatz sequence. \n\n The Collatz conjecture speculation is a conjecture in mathematics that concerns concern a sequence defined define \n as follows keep up: start begin with any positive plus integer n. Then each term condition is obtained from the \n previous term as follows adopt: if the previous term terminus is even, the next adjacent term is one half of \n the previous term. If the previous term condition is odd, the next following term terminus is 3 times the previous former \n term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n Note: \n     1. Collatz(1) is { 1 }. \n     2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a sorted grouped vector that has the odd numbers issue in collatz sequence. \n\n The Collatz conjecture speculation is a conjecture in mathematics that concerns concern a sequence defined define \n as follows keep up: start begin with any positive plus integer n. Then each term condition is obtained from the \n previous term as follows adopt: if the previous term terminus is even, the next adjacent term is one half of \n the previous term. If the previous term condition is odd, the next following term terminus is 3 times the previous former \n term plus 1. The conjecture is that no matter what value of n, the sequence will always constantly reach 1. \n\n Note: \n     1. Collatz(1) is { 1 }. \n     2. returned vector sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> res;\n    while(n){\n        if(n%2==1){\n            res.push_back(n);\n        }\n        n=n/2;\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> res=get_odd_collatz(n);\n    sort(res.begin(),res.end());\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates validate a given date string drawstring and \n returns true truthful if the date is valid otherwise false delusive. \n The date is valid if all of the following rules dominion are satisfied quenched: \n 1. The date string is not empty. \n 2. The number of days day is not less than 1 or higher high than 31 days for months 1,3,5,7,8,10,12. And the number of days sidereal day is not less than 1 or higher gamey than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n 3. The months should not be less than 1 or higher gamey than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which validates validate a given date string drawstring and \n returns true truthful if the date is valid otherwise false delusive. \n The date is valid if all of the following rules dominion are satisfied quenched: \n 1. The date string is not empty. \n 2. The number of days day is not less than 1 or higher high than 31 days for months 1,3,5,7,8,10,12. And the number of days sidereal day is not less than 1 or higher gamey than 30 days for months month 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2. \n 3. The months should not be less than 1 or higher gamey than 12. \n 4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tif(date.size() == 0){\n\t\treturn false;\n\t}\n\tstring month = date.substr(0,2);\n\tstring day = date.substr(3,2);\n\tstring year = date.substr(6,4);\n\tint month_array[12] = {31,28,31,30,31,30,31,31,30,31,30,31};\n\tint day_array[32] = {31,30,31,30,31,30,31,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31,30,31};\n\tint year_array[4] = {1900,1901,1902,1903};\n\tint year_array_size = sizeof(year_array)/sizeof(year_array[0]);\n\tint day_count = 0;\n\tint month_count = 0;\n\tint year_count = 0;\n\tif(month == \"01\"){\n\t\tmonth_count++;\n\t}else if(month == \"02\"){\n\t\tmonth_count++;\n\t}else if(month == \"03\"){\n\t\tmonth_count++;\n\t}else if(month == \"04\"){\n\t\tmonth_count++;\n\t}else if(month == \"05\"){\n\t\tmonth_count++;\n\t}else if(month == \"06\"){\n\t\tmonth_count++;\n\t}else if(month == \"07\"){\n\t\tmonth_count++;\n\t}else if(month == \"08\"){\n\t\tmonth_count++;\n\t}else if(month == \"09\"){\n\t\tmonth_count++;\n\t}else if(month == \"10\"){\n\t\tmonth_count++;\n\t}else if(month == \"11\"){\n\t\tmonth_count++;\n\t}else if(month == \"12\"){\n\t\tmonth_count++;\n\t}\n\tif(day == \"01\"){\n\t\tday_count++;\n\t}else if(day == \"02\"){\n\t\tday_count++;\n\t}else if(day == \"03\"){\n\t\tday_count++;\n\t}else if(day == \"04\"){\n\t\tday_count++;\n\t}else if(day == \"05\"){\n\t\tday_count++;\n\t}else if(day == \"06\"){\n\t\tday_count++;\n\t}else if(day == \"07\"){\n\t\tday_count++;\n\t}else if(day == \"08\"){\n\t\tday_count++;\n\t}else if(day == \"09\"){\n\t\tday_count++;\n\t}else if(day == \"10\"){\n\t\tday_count++;\n\t}else if(day == \"11\"){\n\t\tday_count++;\n\t}else if(day == \"12\"){\n\t\tday_count++;\n\t}else if(day == \"13\"){\n\t\tday_count++;\n\t}else if(day == \"14\"){\n\t\tday_count++;\n\t}else if(day == \"15\"){\n\t\tday_count++;\n\t}else if(day == \"16\"){\n\t\tday_count++;\n\t}else if(day == \"17\"){\n\t\tday_count++;\n\t}else if(day == \"18\"){\n\t\tday_count++;\n\t}else if(day == \"19\"){\n\t\tday_count++;\n\t}else if(day == \"20\"){\n\t\tday_count++;\n\t}else if(day == \"21\"){\n\t\tday_count++;\n\t}else if(day == \"22\"){\n\t\tday_count++;\n\t}else if(day == \"23\"){\n\t\tday_count++;\n\t}else if(day == \"24\"){\n\t\tday_count++;\n\t}else if(day == \"25\"){\n\t\tday_count++;\n\t}else if(day == \"26\"){\n\t\tday_count++;\n\t}else if(day == \"27\"){\n\t\tday_count++;\n\t}else if(day == \"28\"){\n\t\tday_count++;\n\t}else if(day == \"29\"){\n\t\tday_count++;\n\t}else if(day == \"30\"){\n\t\tday_count++;\n\t}else if(day == \"31\"){\n\t\tday_count++;\n\t}\n\tint day_month = 0;\n\tint day_year = 0;\n\tfor(int i = 0; i < year_array_size; i++){\n\t\tif(year == year_array[i]){\n\t\t\tyear_count++;\n\t\t}\n\t}\n\tif(month_count == 1 && day_count == 1 && year_count == 1){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nint main(){\n\tstring date = \"03-11-2000\";\n\tif(valid_date(date)){\n\t\tprintf(\"%s is valid\", date.c_str());\n\t}else{\n\t\tprintf(\"%s is invalid\", date.c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string of words news, return a vector of words split separate on whitespace, if no whitespaces exists in the text textbook you \n should split on commas comma',' if no commas exists exist you should return a vector with one element component, the number of lower - case event letters letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1, ... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string of words news, return a vector of words split separate on whitespace, if no whitespaces exists in the text textbook you \n should split on commas comma',' if no commas exists exist you should return a vector with one element component, the number of lower - case event letters letter with odd order in the \n alphabet, ord(\"a \") = 0, ord(\"b \") = 1,... ord(\"z \") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> ret;\n\tstring str = txt;\n\t// remove all spaces\n\tfor(int i=0; i<str.size(); i++)\n\t\tif(str[i] =='')\n\t\t\tstr[i] ='';\n\t// remove all commas\n\tfor(int i=0; i<str.size(); i++)\n\t\tif(str[i] == ',')\n\t\t\tstr[i] ='';\n\t// split on whitespace\n\tfor(int i=0; i<str.size(); i++)\n\t\tif(str[i] =='')\n\t\t\tret.push_back(str.substr(0, i));\n\treturn ret;\n}\nint main(){\n\tstring txt = \"\";\n\tcout<<\"Enter text: \";\n\tgetline(cin, txt);\n\tvector<string> words = split_words(txt);\n\tcout<<\"The text split on whitespace is: \";\n\tfor(int i=0; i<words.size(); i++)\n\t\tcout<<words[i]<<\" \";\n\tcout<<\"\\n\";\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a vector of numbers, return whether or not they are sorted classify \n in ascending order decree. If vector has more than 1 duplicate of the same \n number issue, return false. Assume no negative damaging numbers and only integers integer.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return whether or not they are sorted classify \n in ascending order decree. If vector has more than 1 duplicate of the same \n number issue, return false. Assume no negative damaging numbers and only integers integer.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n\tif(lst.size() == 1){\n\t\treturn true;\n\t}\n\tauto it = lst.begin();\n\tfor(++it; it!= lst.end(); ++it){\n\t\tif(*it < *(it-1)){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tvector<int> v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(4);\n\tv.push_back(5);\n\tv.push_back(6);\n\tv.push_back(7);\n\tv.push_back(8);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\tv.push_back(9);\n\t"}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two intervals, \n where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two intervals, \n where each interval time interval is a pair of integers integer. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    if(interval1[0]>interval1[1])\n        swap(interval1[0],interval1[1]);\n    if(interval2[0]>interval2[1])\n        swap(interval2[0],interval2[1]);\n    if(interval1[0]>interval2[0])\n        return \"NO\";\n    int i=interval1[0],j=interval2[0];\n    int res=0;\n    while(i<=interval1[1] && j<=interval2[1]){\n        if(i==j){\n            res++;\n            i++;\n            j++;\n        }\n        else{\n            if(i<j)\n                i++;\n            else\n                j++;\n        }\n    }\n    return (res%2==0)? \"YES\":\"NO\";\n}\nint main(){\n    vector<int> interval1={1,2},interval2={2,3};\n    cout<<intersection(interval1,interval2);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vector arr of integers and you need want to return\nsum of magnitudes of integers integer multiplied by product merchandise of all signs \n of each number numeral in the vector, represented by 1, -1 or 0. \n Note bill: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector arr of integers and you need want to return\nsum of magnitudes of integers integer multiplied by product merchandise of all signs \n of each number numeral in the vector, represented by 1, -1 or 0. \n Note bill: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n\tif(arr.size()==0)\n\t\treturn -32768;\n\tdouble temp=1;\n\tint sign=1;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]<0){\n\t\t\tsign=-1;\n\t\t}\n\t\tif(arr[i]>0){\n\t\t\tsign=1;\n\t\t}\n\t\ttemp*=pow(sign*arr[i],2);\n\t}\n\treturn temp;\n}\n\nint main(){\n\tvector<int> arr;\n\tarr.push_back(1);\n\tarr.push_back(2);\n\tarr.push_back(2);\n\tarr.push_back(-4);\n\tcout<<prod_signs(arr)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/129", "prompt": "/*\nGiven a grid with N rows and N columns column (N > = 2) and a positive integer k, \n each cell cellular telephone of the grid contains a value. Every integer in the range image { 1, N * N } \n inclusive appears exactly precisely once on the cells of the grid.\n\nYou have to find line up the minimum path of length k in the grid. You can start depart \n from any cell, and in each step you can move go to any of the neighbor cells cellular telephone, \n in other words, you can go to cells which share partake an edge boundary with you current \n cell cellular telephone. \n Please note that a path of length k means visiting exactly precisely k cells (not \n necessarily inevitably distinct clear-cut). \n You CANNOT go off the grid.\nA path way A (of length k) is considered less than a path B bel (of length k) if \n after making the ordered vectors of the values on the cells that A and B go move \n through (let lease's call bid them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed guarantee that the answer is unique alone. \n Return an ordered vector of the values on the cells that the minimum path go function through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGiven a grid with N rows and N columns column (N > = 2) and a positive integer k, \n each cell cellular telephone of the grid contains a value. Every integer in the range image { 1, N * N } \n inclusive appears exactly precisely once on the cells of the grid.\n\nYou have to find line up the minimum path of length k in the grid. You can start depart \n from any cell, and in each step you can move go to any of the neighbor cells cellular telephone, \n in other words, you can go to cells which share partake an edge boundary with you current \n cell cellular telephone. \n Please note that a path of length k means visiting exactly precisely k cells (not \n necessarily inevitably distinct clear-cut). \n You CANNOT go off the grid.\nA path way A (of length k) is considered less than a path B bel (of length k) if \n after making the ordered vectors of the values on the cells that A and B go move \n through (let lease's call bid them lst_A and lst_B), lst_A is lexicographically less \n than lst_B, in other words, there exist an integer index exponent i (1 < = i < = k)\nsuch that lst_A[i ] < lst_B[i ] and for any j (1 < = j < i) we have \n lst_A[j ] = lst_B[j ]. \n It is guaranteed guarantee that the answer is unique alone. \n Return an ordered vector of the values on the cells that the minimum path go function through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    int n = grid.size();\n    vector<int> res(k);\n    if(n == 0 || k == 0) return res;\n    vector<int> pre(n);\n    vector<int> cur(n);\n    pre[0] = 0;\n    cur[0] = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            if(j == 0){\n                pre[i + 1] = grid[i][0] + 1;\n            }else{\n                pre[i + 1] = min(pre[i], grid[i][j - 1] + 1) + 1;\n            }\n        }\n        cur[i + 1] = pre[i + 1];\n    }\n    for(int i = 0; i < k; i++){\n        res[i] = cur[i + 1];\n    }\n    return res;\n}\nint main(){\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector<vector<int>> grid(n);\n    for(int i = 0; i < n; i++){\n        vector<int> row(n);\n        for(int j = 0; j < n; j++){\n            scanf(\"%d\", &row[j]);\n        }\n        grid[i] = row;\n    }\n    vector<int> res = minPath(grid, k);\n    for(int i = 0; i < k; i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n the last couple centuries century. However, what people don't know sleep together is Tribonacci sequence. \n Tribonacci sequence succession is defined define by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveryone knows Fibonacci sequence, it was studied analyze deeply by mathematicians mathematician in \n the last couple centuries century. However, what people don't know sleep together is Tribonacci sequence. \n Tribonacci sequence succession is defined define by the recurrence: \n tri(1) = 3 \n tri(n) = 1 + n / 2, if n is even. \n tri(n) =   tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> ret;\n    ret.push_back(1);\n    for(int i = 1; i < n; i++){\n        ret.push_back(ret[i - 1] + ret[i - 2] + ret[i + 1]);\n    }\n    return ret;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\", &n) && n){\n        vector<int> ret = tri(n);\n        for(int i = 0; i < ret.size(); i++){\n            printf(\"%d\\n\", ret[i]);\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product intersection of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return the product intersection of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    string s;\n    s.resize(n);\n    for(int i=0;i<n;i++)\n        s[i]=n%10+'0';\n    int ret=0;\n    for(int i=0;i<n;i++)\n        if(s[i]=='1')\n            ret=ret*2+1;\n    return ret;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int ret=digits(n);\n    printf(\"%d\\n\",ret);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that takes aim a string as input remark which contains only square straight brackets. \n The function routine should return true if and only if there is a valid subsequence sequel of brackets bracket \n where at least one bracket in the subsequence is nested. \n\n is_nested (\" [ [ ] ] \") ➞ true on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ false assumed \n is_nested (\" [ ] [ ] \") ➞ false \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true dependable \n * / \n # include admit < stdio.h > \n # include admit < string > \n using namespace std;\nbool is_nested(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes aim a string as input remark which contains only square straight brackets. \n The function routine should return true if and only if there is a valid subsequence sequel of brackets bracket \n where at least one bracket in the subsequence is nested. \n\n is_nested (\" [ [ ] ] \") ➞ true on-key \n is_nested (\" [ ] ] ] ] ] ] ] [ [ [ [ [ ] \") ➞ false assumed \n is_nested (\" [ ] [ ] \") ➞ false \n is_nested (\" [ ] \") ➞ false \n is_nested (\" [ [ ] [ ] ] \") ➞ true \n is_nested (\" [ [ ] ] [ [ \") ➞ true dependable \n * / \n # include admit < stdio.h > \n # include admit < string > \n using namespace std;\nbool is_nested(string str){\n\tint count = 0;\n\tfor(int i = 0; i < str.length(); i++){\n\t\tif(str[i] == '['){\n\t\t\tcount++;\n\t\t}\n\t\tif(str[i] == ']'){\n\t\t\tcount--;\n\t\t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring str = \" [ [ ] ] \";\n\tcout << is_nested(str) << endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vector of numbers. \n You need want to return the sum of squared numbers issue in the given vector, \n round round off each element in the vector to the upper int(Ceiling) first foremost.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of numbers. \n You need want to return the sum of squared numbers issue in the given vector, \n round round off each element in the vector to the upper int(Ceiling) first foremost.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint i, j;\n\tfloat temp;\n\tint output=0;\n\tfor (i=0;i<lst.size();i++){\n\t\ttemp = lst[i];\n\t\toutput += (int)ceil(temp*temp);\n\t}\n\treturn output;\n}\nint main(){\n\tint i, j;\n\tvector<float> lst;\n\tfor (i=0;i<5;i++){\n\t\tscanf(\"%f\", &lst[i]);\n\t}\n\tprintf(\"%d\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a function that returns refund true if the last concluding character \n of a given hold string is an alphabetical alphabetic character and is not \n a part function of a word, and false otherwise. \n Note bill: \" word \" is a group of characters separated divide by space distance.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns refund true if the last concluding character \n of a given hold string is an alphabetical alphabetic character and is not \n a part function of a word, and false otherwise. \n Note bill: \" word \" is a group of characters separated divide by space distance.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n\tstring last_char = txt.substr(txt.length()-1, 1);\n\tfor(int i = 0; i < 26; i++){\n\t\tif(last_char == string(1, i + 'a')){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tstring txt = \"\";\n\tscanf(\"%s\", &txt);\n\tprintf(\"%s\", check_if_last_char_is_a_letter(txt)? \"true\" : \"false\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which returns refund the largest index exponent of an element which \n is not greater big than or equal to the element component immediately preceding it. If \n no such element component exists exist then return -1. The given vector will not contain \n duplicate values value.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which returns refund the largest index exponent of an element which \n is not greater big than or equal to the element component immediately preceding it. If \n no such element component exists exist then return -1. The given vector will not contain \n duplicate values value.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int i = 0, j = -1, max = -1, elem = -1;\n    for(i = 0; i < arr.size(); i++){\n        if(arr[i] >= arr[i + 1]){\n            if(j == -1){\n                j = i;\n                elem = arr[i];\n            }else{\n                if(arr[i] > elem){\n                    elem = arr[i];\n                    j = i;\n                }\n            }\n        }\n    }\n    if(j == -1){\n        return -1;\n    }else{\n        return j;\n    }\n}\n\nint main(){\n    vector<int> arr;\n    arr.push_back(1);\n    arr.push_back(2);\n    arr.push_back(4);\n    arr.push_back(3);\n    arr.push_back(5);\n    printf(\"%d\\n\", can_arrange(arr));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a function that returns refund a vector (a, b), where \" a \" is \n the largest large of negative integers integer, and \" b \" is the smallest \n of positive plus integers in a vector. \n If there is no negative damaging or positive plus integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that returns refund a vector (a, b), where \" a \" is \n the largest large of negative integers integer, and \" b \" is the smallest \n of positive plus integers in a vector. \n If there is no negative damaging or positive plus integers, return them as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tvector<int> temp;\n\tvector<int> lst_sorted;\n\tlst_sorted = lst;\n\tsort(lst_sorted.begin(), lst_sorted.end());\n\ttemp.push_back(lst_sorted.front());\n\tlst_sorted.erase(lst_sorted.begin());\n\twhile(lst_sorted.size() > 0){\n\t\tif(temp.back() > lst_sorted.back()){\n\t\t\ttemp.pop_back();\n\t\t\ttemp.push_back(lst_sorted.back());\n\t\t}\n\t\telse{\n\t\t\tlst_sorted.erase(lst_sorted.begin());\n\t\t}\n\t}\n\treturn temp;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(1);\n\tlst.push_back(2);\n\tlst.push_back(3);\n\tlst.push_back(4);\n\tlst.push_back(5);\n\tlst.push_back(6);\n\tlst.push_back(7);\n\tlst.push_back(8);\n\tlst.push_back(9);\n\tlst.push_back(10);\n\tlst.push_back(11);\n\tlst.push_back(12);\n\tlst.push_back(13);\n\tlst.push_back(14);\n\tlst.push_back(15);\n\tlst.push_back(16);\n\tlst.push_back(17);\n\tlst.push_back(18);\n\tlst.push_back(19);\n\tlst.push_back(20);\n\tlst.push_back(21);\n\tlst.push_back(22);\n\tlst.push_back(23);\n\tlst.push_back(24);\n\tlst.push_back(25);\n\tlst.push_back(26);\n\tlst.push_back(27);\n\tlst.push_back(28);\n\tlst.push_back(29);\n\tlst.push_back(30);\n\tlst.push_back(31);\n\tlst.push_back(32);\n\tlst.push_back(33);\n\tlst.push_back(34);\n\tlst.push_back(35);\n\tlst.push_back(36);\n\tlst.push_back(37);\n\tlst.push_back(38);\n\tlst.push_back(39);\n\tlst.push_back(40);\n\tlst.push_back(41);\n\tlst.push_back(42);\n\tlst.push_back(43);\n\tlst.push_back(44);\n\tlst.push_back(45);\n\tlst.push_back(46);\n\tlst.push_back(47);\n\tlst.push_back(48);\n\tlst.push_back(49);\n\tlst.push_back(50);\n\tlst.push_back(51);\n\tlst.push_back(52);\n\tlst.push_back(53);\n\tlst.push_back(54);\n\tlst.push_back(55);\n\tlst.push_back(56);\n\tlst.push_back(57);\n\tlst.push_back(58);\n\tlst.push_back(59);\n\tlst.push_back(60);\n\tlst.push_back(61);\n\tlst.push_back(62);\n\tlst.push_back(63);\n\tlst.push_back(64);\n\tlst.push_back(65);\n\tlst.push_back(66);\n\tlst.push_back(67);\n\tlst.push_back(68);\n\tlst.push_back(69);\n\tlst.push_back(70);\n\tlst.push_back(71);\n\tlst.push_back(72);\n\tlst.push_back(73);\n\tlst.push_back(74);\n\tlst.push_back(75);\n\tlst.push_back(76);\n\tlst.push_back(77);\n\tlst.push_back(78);\n\tlst.push_back(79);\n\tlst.push_back(80);\n\tlst.push_back(81);\n\tlst.push_back(82);\n\tlst.push_back(83);\n\tlst.push_back(84);\n\tlst.push_back(85);\n\tlst.push_back(86);\n\tlst.push_back(87);\n\tlst.push_back(88);\n\tlst.push_back(89);\n\tlst.push_back(90);\n\tlst.push_back(91);\n\tlst.push_back(92);\n\tlst.push_back(93);\n\tlst.push_back(94);\n\tlst.push_back(95);\n\tlst.push_back(96);\n\tlst.push_back(97);\n\tlst.push_back(98);\n\tlst.push_back(99);\n\tlst.push_back(100);\n\tlst.push_back(101);\n\tlst.push_back(102);\n\tlst.push_back(103);\n\tlst.push_back(104);\n\tlst.push_back(105);\n\tlst.push_back(106);\n\tlst"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a function that takes aim integers, floats float, or strings representing present \n real numbers number, and returns the larger large variable variable star in its given variable type character. \n Return restitution \" None \" if the values are equal. \n Note: If a real veridical number numeral is represented stage as a string, the floating point might be. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # include < stdio.h > \n # include < string > \n # include admit < algorithm > \n # include < boost rise / any.hpp > \n using practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes aim integers, floats float, or strings representing present \n real numbers number, and returns the larger large variable variable star in its given variable type character. \n Return restitution \" None \" if the values are equal. \n Note: If a real veridical number numeral is represented stage as a string, the floating point might be. or, \n\n compare_one(1, 2.5) ➞ 2.5 \n compare_one(1, \" 2,3 \") ➞ \" 2,3 \" \n compare_one(\"5,1 \", \" 6 \") ➞ \" 6 \" \n compare_one(\"1 \", 1) ➞ \" None \" \n * / \n # include < stdio.h > \n # include < string > \n # include admit < algorithm > \n # include < boost rise / any.hpp > \n using practice namespace std;\nboost::any compare_one(boost::any a,boost::any b){\n   boost::any ret;\n   std::cout << \"1: \" << a << \" \" << b << std::endl;\n   if(a.type()==b.type()){\n      boost::any tmp(a.get<boost::any>());\n      std::cout << \"2: \" << a << \" \" << b << std::endl;\n      std::cout << \"3: \" << tmp << std::endl;\n      if(tmp>b){\n         ret=tmp;\n         std::cout << \"4: \" << ret << std::endl;\n      }\n      else{\n         ret=b;\n         std::cout << \"5: \" << ret << std::endl;\n      }\n   }\n   else{\n      std::cout << \"6: \" << a << \" \" << b << std::endl;\n   }\n   return ret;\n}\n#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <functional>\n#include <map>\n#include <functional>\n#include <list>\n#include <iterator>\n#include <string>\n#include <cctype>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#include <cstdarg>\n#include <cassert>\n#include <sstream>\n#include <limits>\n#include <vector>\n#include <deque>\n#include <stack>\n#include <queue>\n#include <bitset>\n#include <numeric>\n#include <utility>\n#include <valarray>\n#include <complex>\n#include <cmath>\n#include <climits>\n#include <csetjmp>\n#include <cfloat>\n#include <clocale>\n#include <ciso646>\n#include <cwchar>\n#include <cwctype>\n#define clr(arr, val) memset(arr, val, sizeof(arr))\n#define pb push_back\n#define ppb pop_back\n#define mp make_pair\n#define fi first\n#define se second\n#define sqr(x) ((x) * (x))\n#define SZ(x) ((int)(x).size())\n#define RESET(x, val) memset(x, val, sizeof(x))\n#define max(a, b) ((a) > (b)? (a) : (b))\n#define min(a, b) ((a) < (b)? (a) : (b))\n#define fori(i, n) for(int i = 0; i < n; i++)\n#define forj(j, n) for(int j = 0; j < n; j++)\n#define rof(i, n) for(int i = (n); i >= 0; i--)\n#define fork(i, n, k) for(int i = n; i >= n - k; i--)\n#define rfor(i, n) for(int i = (n); i >= 0; i--)\n#define ford(i, n, k) for(int i = n; i >= n - k; i--)\n#define rforj(i, n) for(int i = n; i >= 0; i--)\n#define forr(i, n) for(int i = (n); i >= 0; i--)\n#define rforj(i, n) for(int i = (n) - 1; i >= 0; i--)\n#define forx(i, n, x) for(int i = n; i >= n - x; i--)\n#define rforx(i, n) for(int i = n - 1; i >= 0; i--)\n#define forw(i, n, x) for(int i = n; i >= n - x; i--)\n#define rforx(i, n) for(int i = n - 1; i >= 0; i--)\n#define forz(i, n, x) for(int i = n; i >= n - x; i--)\n#define rforz(i, n) for(int i = n - 1; i >= n - x; i--)\n#define ford(i, n, k) for(int i = n; i >= n - k; i--)\n#define rford(i, n) for(int i = n - 1; i >= n - k; i--)\n#define forrj(i, n, k) for(int i = n; i >= n - k; i--)\n#define forrd(i, n, k) for(int i = n - 1; i >= n - k; i--)\n#define fordj(i, n, k) for(int i = n; i >= n - k; i--)\n#define fordj(i, n) for(int i = n - 1; i >= n - k; i--)\n#define fordj(i, n) for(int i = n - 1; i >= n - k; i--)\n#define fordj(i, n, x) for(int i = n; i >= n - k; i--)\n#define fordj(i, n, x) for(int i = n - 1; i >= n - k; i--)\n#define fordx(i, n, x) for(int i = n; i >= n - x; i--)\n#define fordx(i, n) for(int"}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whether the given number phone number n can be written as the sum union of exactly 4 positive positivist even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaluate whether the given number phone number n can be written as the sum union of exactly 4 positive positivist even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n\tif(n%2 == 1){\n\t\treturn false;\n\t}\n\tint sum = n;\n\tint tmp = n;\n\twhile(tmp>0){\n\t\tif(tmp%2 == 0){\n\t\t\tsum+=tmp;\n\t\t}\n\t\ttmp = tmp/2;\n\t}\n\tif(sum%2 == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\nint main(){\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tif(is_equal_to_sum_even(n)){\n\t\t\tprintf(\"%d can be written as sum of 4 positive even numbers.\\n\",n);\n\t\t}\n\t\telse{\n\t\t\tprintf(\"%d cannot be written as sum of 4 positive even numbers.\\n\",n);\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/139", "prompt": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe Brazilian factorial is defined as: \n brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1! \n where n > 0 \n\n For example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tlong long result=1,i=1;\n\tfor(i;i<=n;i++){\n\t\tresult*=i;\n\t}\n\treturn result;\n}\nint main(int argc, char const *argv[]) {\n\tint n;\n\tprintf(\"Digite um número inteiro positivo: \");\n\tscanf(\"%d\", &n);\n\tprintf(\"O número %d é: %lld\\n\", n, special_factorial(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/140", "prompt": "/*\nGiven a string text, replace supplant all spaces in it with underscores underscore, \n and if a string has more than 2 consecutive straight spaces, \n then replace substitute all consecutive spaces distance with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string text, replace supplant all spaces in it with underscores underscore, \n and if a string has more than 2 consecutive straight spaces, \n then replace substitute all consecutive spaces distance with - \n\n fix_spaces (\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n\tint count = 0;\n\tfor(int i=0;i<text.size();i++){\n\t\tif(text[i] ==''){\n\t\t\tcount++;\n\t\t\tif(count==2){\n\t\t\t\ttext[i] = '_';\n\t\t\t}\n\t\t}\n\t}\n\tif(text.find(' ')!= string::npos){\n\t\tint index = text.find(' ');\n\t\ttext.replace(index,1,\"_\");\n\t}\n\tif(text.find(\"  \")!= string::npos){\n\t\tint index = text.find(\"  \");\n\t\ttext.replace(index,2,\"-\");\n\t}\n\treturn text;\n}\n\nint main(){\n\tstring text;\n\ttext = \"Example\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"Example 1\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \" Example 2\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \" Example   3\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"  \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"  \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"\";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"  \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"  \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout << fix_spaces(text) << endl;\n\ttext = \"   \";\n\tcout <<"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a function which takes aim a string representing exemplify a file's name, and returns \n \" Yes \" if the the file's name is valid, and returns reelect \" No \" otherwise. \n A file's name is considered think to be valid if and only if all the following conditions condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains exactly precisely one dot \". \" \n - The substring before the dot should not be empty, and it starts start with a letter from \n the latin romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which takes aim a string representing exemplify a file's name, and returns \n \" Yes \" if the the file's name is valid, and returns reelect \" No \" otherwise. \n A file's name is considered think to be valid if and only if all the following conditions condition \n are met: \n - There should not be more than three digits (' 0'-'9') in the file's name. \n - The file's name contains exactly precisely one dot \". \" \n - The substring before the dot should not be empty, and it starts start with a letter from \n the latin romance alphapet (' a'-'z' and' A'-'Z'). \n - The substring after the dot should be one of these: {' txt \", \" exe \", \" dll \" }\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n\tint dot = 0;\n\tfor(int i=0;i<file_name.length();i++)\n\t\tif(file_name[i]=='.')\n\t\t\tdot++;\n\tif(dot!=1){\n\t\treturn \"No\";\n\t}\n\telse{\n\t\tint d1 = 0, d2 = 0;\n\t\tfor(int i=0;i<file_name.length();i++)\n\t\t\tif(file_name[i]>='a' && file_name[i]<='z')\n\t\t\t\td1++;\n\t\t\telse if(file_name[i]>='A' && file_name[i]<='Z')\n\t\t\t\td2++;\n\t\tif(d1==1 && d2==1){\n\t\t\treturn \"Yes\";\n\t\t}\n\t\telse{\n\t\t\treturn \"No\";\n\t\t}\n\t}\n}\n\nint main(){\n\tstring file_name = \"test.txt\";\n\tcout<<file_name_check(file_name);\n}\n<|endoftext|>"}
{"task_id": "CPP/142", "prompt": "/*\n\" \n This function will take a vector of integers integer. For all entries in the vector, the function affair shall square the integer entry introduction if its index is a \n multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function routine will not \n change deepen the entries in the vector whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries entrance. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\" \n This function will take a vector of integers integer. For all entries in the vector, the function affair shall square the integer entry introduction if its index is a \n multiple of 3 and will cube the integer entry introduction if its index is a multiple of 4 and not a multiple of 3. The function routine will not \n change deepen the entries in the vector whose indexes are not a multiple of 3 or 4. The function routine shall then return the sum of all entries entrance. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(auto i:lst){\n\t\tsum += i*i;\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst = {1,2,3};\n\tcout<<sum_squares(lst)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a string representing exemplify a sentence,\nthe sentence contains some words news separated by a space quad, \n and you have to return a string that contains hold the words from the original sentence,\nwhose lengths length are prime numbers, \n the order of the words word in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string representing exemplify a sentence,\nthe sentence contains some words news separated by a space quad, \n and you have to return a string that contains hold the words from the original sentence,\nwhose lengths length are prime numbers, \n the order of the words word in the new string should be the same as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string ret;\n    int length = sentence.length();\n    int prime_number = 0;\n    for(int i = 1; i < length; i++){\n        int j = i;\n        while(j < length){\n            if(sentence[j]!=''){\n                prime_number++;\n            }\n            j++;\n        }\n    }\n    for(int i = 0; i < length; i++){\n        if(sentence[i]!=''){\n            ret += sentence[i];\n        }\n        else{\n            ret += \" \";\n        }\n    }\n    return ret;\n}\nint main(){\n    char sentence[100];\n    while(scanf(\"%s\", sentence)!= EOF){\n        printf(\"%s\\n\", words_in_sentence(sentence).c_str());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to implement a function affair that will simplify the expression \n x * n. The function affair returns true truthful if x * n evaluates to a whole hale number and false fake \n otherwise. Both x and n, are string representation of a fraction, and have the following keep up format, \n < numerator>/<denominator > where both numerator and denominator are positive incontrovertible whole hale numbers issue. \n\n You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = true \n simplify(\"1/6 \", \" 2/1 \") = false fake \n simplify(\"7/10 \", \" 10/2 \") = false fake \n * / \n # include < stdio.h > \n # include admit < string > \n using namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to implement a function affair that will simplify the expression \n x * n. The function affair returns true truthful if x * n evaluates to a whole hale number and false fake \n otherwise. Both x and n, are string representation of a fraction, and have the following keep up format, \n < numerator>/<denominator > where both numerator and denominator are positive incontrovertible whole hale numbers issue. \n\n You can assume that x, and n are valid fractions, and do not have zero as denominator. \n\n simplify(\"1/5 \", \" 5/1 \") = true \n simplify(\"1/6 \", \" 2/1 \") = false fake \n simplify(\"7/10 \", \" 10/2 \") = false fake \n * / \n # include < stdio.h > \n # include admit < string > \n using namespace std;\nbool simplify(string x,string n){\n\tint i = 0,j = 0,k = 0,l = 0;\n\tif(x.length()!= n.length()){\n\t\treturn false;\n\t}\n\twhile(i < x.length() && j < n.length()){\n\t\tif(x[i] ==''){\n\t\t\ti++;\n\t\t}\n\t\tif(n[j] ==''){\n\t\t\tj++;\n\t\t}\n\t\tif(x[i] == '0'){\n\t\t\ti++;\n\t\t}\n\t\tif(n[j] == '0'){\n\t\t\tj++;\n\t\t}\n\t\tif(x[i] == n[j]){\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(x[i] ==''){\n\t\t\ti++;\n\t\t}\n\t\tif(n[j] ==''){\n\t\t\tj++;\n\t\t}\n\t\tif(x[i]!= '0' && x[i]!= n[j]){\n\t\t\treturn false;\n\t\t}\n\t\tif(x[i]!= '0' && x[i]!= n[j]){\n\t\t\treturn false;\n\t\t}\n\t\tif(i == x.length()){\n\t\t\tif(j == n.length()){\n\t\t\t\treturn true;\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif(j == n.length()){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn false;\n}\nint main(){\n\tstring x,n;\n\tcin>>x>>n;\n\tif(simplify(x,n)){\n\t\tcout<<\"Simplify(\"<<x<<\", \"<<n<<\" ) = true \";\n\t}else{\n\t\tcout<<\"Simplify(\"<<x<<\", \"<<n<<\" ) = false fake \";\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which sorts classify the given vector of integers integer \n in ascending order ordering according to the sum of their digits finger. \n Note: if there are several respective items detail with similar alike sum of their digits finger, \n order ordain them based on their index in original vector. \n\n For example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function which sorts classify the given vector of integers integer \n in ascending order ordering according to the sum of their digits finger. \n Note: if there are several respective items detail with similar alike sum of their digits finger, \n order ordain them based on their index in original vector. \n\n For example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\tvector<int> points;\n\tif(nums.empty())\n\t\treturn nums;\n\tint len = nums.size();\n\tfor(int i = 0; i < len; i++){\n\t\tif(nums[i] < 0)\n\t\t\tpoints.push_back(nums[i]);\n\t\telse{\n\t\t\tint sum = 0;\n\t\t\twhile(nums[i] > 0){\n\t\t\t\tsum = sum + (nums[i]%10);\n\t\t\t\tnums[i] = nums[i] / 10;\n\t\t\t}\n\t\t\tpoints.push_back(sum);\n\t\t}\n\t}\n\treturn points;\n}\n\nint main(){\n\tvector<int> nums = {1, 11, -1, -11, -12};\n\tvector<int> result = order_by_points(nums);\n\tfor(int i = 0; i < result.size(); i++)\n\t\tprintf(\"%d\\n\", result[i]);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes aim a vector of numbers as input remark and returns \n the number issue of elements in the vector that are greater capital than 10 and both \n first and last final digits finger of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes aim a vector of numbers as input remark and returns \n the number issue of elements in the vector that are greater capital than 10 and both \n first and last final digits finger of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint i, j;\n\tfor(i=0; i<nums.size()-1; i++){\n\t\tif(nums[i]>10){\n\t\t\tfor(j=i+1; j<nums.size(); j++){\n\t\t\t\tif(nums[j]>10 && (nums[i]%10==nums[j]%10))\n\t\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint main(){\n\tvector<int> nums;\n\tint n;\n\tcin>>n;\n\twhile(n--){\n\t\tint a, b;\n\t\tcin>>a>>b;\n\t\tnums.push_back(a);\n\t\tnums.push_back(b);\n\t}\n\tint i=0;\n\twhile(i<nums.size()-1){\n\t\tif(specialFilter(nums)==1){\n\t\t\tcout<<nums[i]<<\" \";\n\t\t\tnums.erase(nums.begin()+i);\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tcout<<nums[nums.size()-1]<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/147", "prompt": "/*\nYou are given a positive integer n. You have to create produce an integer vector a of length n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number phone number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a positive integer n. You have to create produce an integer vector a of length n.\n     For each i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1. \n     Return the number phone number of triples (a{i}, a{j}, a{k}) of a where i < j < k, \n and a[i] + a[j] + a[k] is a multiple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a;\n    int i;\n    for(i=1;i<=n;i++){\n        a.push_back(i*i-i+1);\n    }\n    int res=0;\n    int m=a.size();\n    int j=0;\n    int k=0;\n    for(i=1;i<=m;i++){\n        for(j=i+1;j<=m;j++){\n            for(k=j+1;k<=m;k++){\n                if(a[i] + a[j] + a[k] == 3 * (i-j+k)){\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    int res=get_matrix_triples(n);\n    printf(\"%d\",res);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/148", "prompt": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n Write compose a function that takes assume two planet names name as strings planet1 and planet2. \n The function routine should return a vector containing all planets whose orbits orbit are \n located situate between the orbit sphere of planet1 and the orbit sphere of planet2, sorted classify by \n the proximity to the sun sunlight. \n The function should return an empty vector if planet1 or planet2\nare not correct right planet satellite names name calling. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThere are eight planets in our solar system: the closerst to the Sun \n is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n Uranus, Neptune. \n Write compose a function that takes assume two planet names name as strings planet1 and planet2. \n The function routine should return a vector containing all planets whose orbits orbit are \n located situate between the orbit sphere of planet1 and the orbit sphere of planet2, sorted classify by \n the proximity to the sun sunlight. \n The function should return an empty vector if planet1 or planet2\nare not correct right planet satellite names name calling. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> result;\n\tvector<string> planet1Vector;\n\tvector<string> planet2Vector;\n\tif(planet1==\"\"){\n\t\tcout<<\"Planet1 is empty\"<<endl;\n\t\treturn result;\n\t}\n\tif(planet2==\"\"){\n\t\tcout<<\"Planet2 is empty\"<<endl;\n\t\treturn result;\n\t}\n\tif(planet1.length()>planet2.length()){\n\t\tplanet1Vector=bf(planet1,planet2.substr(0,planet1.length()-planet2.length()));\n\t\tplanet2Vector=bf(planet2,planet1);\n\t}\n\telse{\n\t\tplanet2Vector=bf(planet2,planet1.substr(0,planet2.length()-planet1.length()));\n\t\tplanet1Vector=bf(planet1,planet2);\n\t}\n\tresult=planet1Vector;\n\tresult.insert(result.end(),planet2Vector.begin(),planet2Vector.end());\n\treturn result;\n}\nint main(){\n\tvector<string> result;\n\tresult=bf(\"Mercury\",\"Jupiter\");\n\tfor(int i=0;i<result.size();i++)\n\t\tprintf(\"%s\\n\",result[i].c_str());\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a function that accepts take a vector of strings as a parameter argument, \n deletes the strings bowed stringed instrument that have odd lengths distance from it, \n and returns the resulted leave vector with a sorted screen order, \n The vector is always a vector of strings string and never a vector of numbers issue, \n and it may contain duplicates. \n The order of the vector should be ascending ascend by length distance of each word password, and you \n should return the vector sorted by that rule. \n If two words have the same length, sort the vector alphabetically. \n The function should return a vector of strings chain in sorted order holy order. \n You may assume wear that all words will have the same length distance.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts take a vector of strings as a parameter argument, \n deletes the strings bowed stringed instrument that have odd lengths distance from it, \n and returns the resulted leave vector with a sorted screen order, \n The vector is always a vector of strings string and never a vector of numbers issue, \n and it may contain duplicates. \n The order of the vector should be ascending ascend by length distance of each word password, and you \n should return the vector sorted by that rule. \n If two words have the same length, sort the vector alphabetically. \n The function should return a vector of strings chain in sorted order holy order. \n You may assume wear that all words will have the same length distance.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> res;\n    for(string str:lst)\n        res.push_back(str);\n    sort(res.begin(), res.end(), [](const string & a, const string & b) -> bool {\n        int sum = 0;\n        for(int i = 0; i < a.length(); i++)\n            sum += a[i] - b[i];\n        return sum < 0;\n    });\n    return res;\n}\n\nvector<string> delete_odd(vector<string> lst){\n    vector<string> res;\n    for(string str:lst)\n        res.push_back(str);\n    for(int i = 0; i < res.size()-1; i++)\n        for(int j = i+1; j < res.size(); j++){\n            int sum = 0;\n            for(int k = 0; k < res[i].length(); k++)\n                sum += res[i][k] - res[j][k];\n            if(sum % 2 == 1)\n                res.erase(res.begin() + j);\n        }\n    return res;\n}\n\nint main(){\n    vector<string> lst;\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"c\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");\n    lst.push_back(\"a\");\n    lst.push_back(\"b\");\n    lst.push_back(\"a\");"}
{"task_id": "CPP/150", "prompt": "/*\nA simple program which should return the value of x if n is \n a prime choice number and should return the value of y otherwise differently.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA simple program which should return the value of x if n is \n a prime choice number and should return the value of y otherwise differently.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n\tif(n%2==0){\n\t\treturn x;\n\t}\n\telse{\n\t\treturn y;\n\t}\n}\nint main(){\n\tint n,x,y;\n\tprintf(\"enter the number of the prime number\\n\");\n\tscanf(\"%d\",&n);\n\tx=x_or_y(n,0,0);\n\tprintf(\"value of x is %d\\n\",x);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares public square of the numbers \n in the vector that are odd leftover. Ignore numbers that are negative damaging or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the input stimulation vector is empty, return 0. \n * / \n # include < stdio.h > \n # include admit < math.h > \n # include admit < vector > \n using namespace std;\nlong long double_the_difference(vector < float air bladder > lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return the sum of squares public square of the numbers \n in the vector that are odd leftover. Ignore numbers that are negative damaging or not integers. \n\n double_the_difference({1, 3, 2, 0 }) = = 1 + 9 + 0 + 0 = 10 \n double_the_difference({-1, -2, 0 }) = = 0 \n double_the_difference({9, -2 }) = = 81 \n double_the_difference({0 }) = = 0  \n\n If the input stimulation vector is empty, return 0. \n * / \n # include < stdio.h > \n # include admit < math.h > \n # include admit < vector > \n using namespace std;\nlong long double_the_difference(vector < float air bladder > lst){\n    long long double_the_difference = 0;\n    if(lst.size() == 0){\n        return 0;\n    }\n    for(auto x: lst){\n        if(x > 0){\n            double_the_difference += x*x;\n        }\n    }\n    return double_the_difference;\n}\n\n# include < stdio.h > \nint main(int argc, char const *argv[]) {\n    vector < float > lst{1, 3, 2, 0};\n    printf(\"%llf\\n\", double_the_difference(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling spirit when the result of some long - awaited expect \n event is finally ultimately known. The feelings feeling and thoughts you have at that moment here and now are \n definitely decidedly worth noting down and comparing compare. \n Your task job is to determine if a person correctly guessed the results of a number phone number of matches couple. \n You are given move over two vectors vector of scores and guesses of equal adequate length, where each index exponent shows express a match. \n Return fall a vector of the same length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference dispute between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI think we all remember that feeling spirit when the result of some long - awaited expect \n event is finally ultimately known. The feelings feeling and thoughts you have at that moment here and now are \n definitely decidedly worth noting down and comparing compare. \n Your task job is to determine if a person correctly guessed the results of a number phone number of matches couple. \n You are given move over two vectors vector of scores and guesses of equal adequate length, where each index exponent shows express a match. \n Return fall a vector of the same length denoting how far off each guess was. If they have guessed correctly, \n the value is 0, and if not, the value is the absolute difference dispute between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n    vector<int> result(guess.size(),0);\n    for(int i=0;i<guess.size();i++){\n        if(game[i]==guess[i])\n            result[i]=0;\n        else\n            result[i]=abs(game[i]-guess[i]);\n    }\n    return result;\n}\nint main(){\n    int n;\n    while(cin>>n)\n    {\n        vector<int> scores(n);\n        vector<int> guess(n);\n        for(int i=0;i<n;i++)\n        {\n            cin>>scores[i];\n            guess[i]=scores[i];\n        }\n        vector<int> result=compare(scores,guess);\n        for(int i=0;i<result.size();i++)\n            cout<<result[i]<<\" \";\n        cout<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/153", "prompt": "/*\nYou will be given the name of a class (a string drawstring) and a vector of extensions.\nThe extensions are to be used to load additional extra classes to the class course. The \n strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \nin the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension propagation and return a string bowed stringed instrument in this \n format: ClassName. StrongestExtensionName. \n If there are two or more extensions with the same strength, you should \n choose the one that comes first foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given the name of a class (a string drawstring) and a vector of extensions.\nThe extensions are to be used to load additional extra classes to the class course. The \n strength of the extension reference is as follows: Let permit CAP be the number of the uppercase \n letters in the extension reference's name, and let SM be the number of lowercase small letter letters letter \nin the extension's name, the strength is given by the fraction CAP - SM. \n You should find the strongest extension propagation and return a string bowed stringed instrument in this \n format: ClassName. StrongestExtensionName. \n If there are two or more extensions with the same strength, you should \n choose the one that comes first foremost in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint strength=0;\n\tfor(int i=0;i<class_name.size();i++){\n\t\tif(class_name[i]>='A'&&class_name[i]<='Z'){\n\t\t\tstrength++;\n\t\t}else{\n\t\t\tstrength++;\n\t\t}\n\t}\n\tint i=0;\n\tint max=0;\n\tstring output;\n\tfor(int j=0;j<extensions.size();j++){\n\t\tif(strength>max){\n\t\t\tmax=strength;\n\t\t\toutput=extensions[j];\n\t\t\ti=j;\n\t\t}\n\t}\n\treturn class_name+\".\"+output;\n}\n\nint main(){\n\tvector<string> extensions;\n\tstring class_name;\n\tint i=0;\n\twhile(1){\n\t\tclass_name=getline(cin,\"\");\n\t\tif(class_name.compare(\"\")==0)\n\t\t\tbreak;\n\t\textensions.push_back(getline(cin,\"\"));\n\t}\n\tstring result=Strongest_Extension(class_name,extensions);\n\tcout<<result<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need want to return true if the second word son or any of its rotations is a substring in the first inaugural word \n cycpattern_check(\"abcd\",\"abd \") = > false delusive \n cycpattern_check(\"hello\",\"ell \") = > true \n cycpattern_check(\"whassup\",\"psus \") = > false fake \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include admit < string > \n using namespace std;\nbool cycpattern_check(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need want to return true if the second word son or any of its rotations is a substring in the first inaugural word \n cycpattern_check(\"abcd\",\"abd \") = > false delusive \n cycpattern_check(\"hello\",\"ell \") = > true \n cycpattern_check(\"whassup\",\"psus \") = > false fake \n cycpattern_check(\"abab\",\"baa \") = > true \n cycpattern_check(\"efef\",\"eeff \") = > false \n cycpattern_check(\"himenss\",'simen \") = > true \n\n * / \n # include < stdio.h > \n # include admit < string > \n using namespace std;\nbool cycpattern_check(string a,string b){\n\tint len_a = a.size();\n\tint len_b = b.size();\n\tif(len_a<len_b){\n\t\treturn false;\n\t}\n\tint i = 0;\n\twhile(i<len_a){\n\t\tint j = 0;\n\t\twhile(j<len_b){\n\t\t\tif(a[i]==b[j]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tif(j==len_b){\n\t\t\treturn true;\n\t\t}\n\t\ti++;\n\t}\n\treturn false;\n}\nint main(){\n\tstring a,b;\n\tcin>>a>>b;\n\tcout<<cycpattern_check(a,b)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/155", "prompt": "/*\nGiven an integer. return a vector that has the number of even and odd leftover digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven an integer. return a vector that has the number of even and odd leftover digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n\tint cnt_even = 0, cnt_odd = 0;\n\twhile(num){\n\t\tif(num%2 == 0){\n\t\t\tcnt_even++;\n\t\t\tnum /= 2;\n\t\t}\n\t\telse{\n\t\t\tcnt_odd++;\n\t\t\tnum = num / 2;\n\t\t}\n\t}\n\tvector<int> res;\n\tres.push_back(cnt_even);\n\tres.push_back(cnt_odd);\n\treturn res;\n}\n\nint main(){\n\tint num;\n\twhile(cin >> num){\n\t\tvector<int> res = even_odd_count(num);\n\t\tint i = 0;\n\t\tfor(int num:res){\n\t\t\tcout << num << \" \";\n\t\t\ti++;\n\t\t\tif(i%2 == 0){\n\t\t\t\tcout << \"even\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcout << \"odd\";\n\t\t\t}\n\t\t\tcout << endl;\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain prevail its roman numeral equivalent as a string, \n and return it in lowercase small letter. \n Restrictions: 1 < = num < = 1000 \n\n Examples exercise:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer, obtain prevail its roman numeral equivalent as a string, \n and return it in lowercase small letter. \n Restrictions: 1 < = num < = 1000 \n\n Examples exercise:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n    string mini_roman = \"\";\n    vector<int> v;\n    v.push_back(1);\n    v.push_back(5);\n    v.push_back(10);\n    v.push_back(50);\n    v.push_back(100);\n    v.push_back(500);\n    v.push_back(1000);\n    int i = 0;\n    while(number > 0){\n        while(number >= v[i]){\n            number = number - v[i];\n            mini_roman = mini_roman + 'x';\n        }\n        i++;\n    }\n    return mini_roman;\n}\nint main(){\n    int number;\n    while(cin>>number){\n        cout<<int_to_mini_romank(number)<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/157", "prompt": "/*\nGiven the lengths of the three sides english of a triangle. Return refund true if the three \n sides slope form a right correctly - angled triangle triangulum, false fake otherwise differently. \n A right correctly - angled lean triangle is a triangle in which one angle is right correct angle slant or \n 90 degree academic degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides english of a triangle. Return refund true if the three \n sides slope form a right correctly - angled triangle triangulum, false fake otherwise differently. \n A right correctly - angled lean triangle is a triangle in which one angle is right correct angle slant or \n 90 degree academic degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tif(a==0||b==0||c==0){\n\t\treturn false;\n\t}\n\tfloat x1=a+b,y1=c,x2=b,y2=a;\n\tif(x1*x1==y1*y1&&x2*x2==y2*y2){\n\t\treturn true;\n\t}\n\tfloat x3=a,y3=b*a/x1,x4=a*b/x1,x5=a*c/y1,y4=c*b/y1;\n\tif(x3*x3==y3*y3&&x4*x4==y4*y4&&x5*x5==y5*y5){\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\twhile(cin>>a>>b>>c){\n\t\tif(right_angle_triangle(a,b,c)){\n\t\t\tcout<<\"right\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"not right\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts take a vector of strings. \n The vector contains check different words. Return the word news with maximum number numeral \n of unique characters. If multiple strings drawstring have maximum number of unique\ncharacters, return the one which comes first foremost in lexicographical order. \n\n find_max({\"name \", \" of \",' string chain \" }) = =' string drawstring \" \n find_max({\"name \", \" enam \", \" game \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" cc \" }) = = \" aaaaaaa \" \n * / \n # include < stdio.h > \n # include admit < vector > \n # include admit < string drawstring > \n # include < algorithm > \n using namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts take a vector of strings. \n The vector contains check different words. Return the word news with maximum number numeral \n of unique characters. If multiple strings drawstring have maximum number of unique\ncharacters, return the one which comes first foremost in lexicographical order. \n\n find_max({\"name \", \" of \",' string chain \" }) = =' string drawstring \" \n find_max({\"name \", \" enam \", \" game \" }) = = \" enam \" \n find_max({\"aaaaaaa \", \" bb \", \" cc \" }) = = \" aaaaaaa \" \n * / \n # include < stdio.h > \n # include admit < vector > \n # include admit < string drawstring > \n # include < algorithm > \n using namespace std;\nstring find_max(vector<string> words){\n\tint c = 1;\n\tstring max = \"\";\n\tfor(int i=0; i<words.size(); i++){\n\t\tint len = words[i].size();\n\t\tfor(int j=0; j<len; j++){\n\t\t\tc = c+words[i][j]-'0';\n\t\t}\n\t\tc = c/len;\n\t\tif(c>max.size()){\n\t\t\tmax = words[i];\n\t\t}\n\t}\n\treturn max;\n}\n\nint main(){\n\tint n;\n\tcin >> n;\n\tvector<string> words(n);\n\tfor(int i=0; i<n; i++){\n\t\tcin >> words[i];\n\t}\n\tcout << find_max(words);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n but now you need to eat more carrots to complete dispatch the day's meals meal. \n you should return a vector of { total number of eaten corrode carrots carrot after your meals, \n                                 the number of carrots left impart after your meals meal } \n if there are not enough remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re a hungry rabbit, and you already have eaten feed a certain number of carrots carrot, \n but now you need to eat more carrots to complete dispatch the day's meals meal. \n you should return a vector of { total number of eaten corrode carrots carrot after your meals, \n                                 the number of carrots left impart after your meals meal } \n if there are not enough remaining carrots, you will eat all remaining carrots, but will still even be hungry athirst.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n\tvector<int> ans;\n\tif(number < need)\n\t\tans.push_back(number);\n\telse if(remaining < need){\n\t\tans.push_back(remaining);\n\t\treturn ans;\n\t}\n\telse{\n\t\tint eaten = number - need;\n\t\tans.push_back(number - need);\n\t\tnumber = remaining;\n\t\teat(number,need,remaining);\n\t}\n\treturn ans;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n,m,r;\n\t\tscanf(\"%d %d %d\",&n,&m,&r);\n\t\tvector<int> ans = eat(n,m,r);\n\t\tif(ans.size()==1)\n\t\t\tprintf(\"%d\\n\",ans[0]);\n\t\telse\n\t\t\tprintf(\"%d\\n\",ans[1]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator hustler, and operand. The first vector has basic algebra operations process, and \n the second vector is a vector of integers. Use practice the two given vectors vector to build the algebric \n expression formulation and return the evaluation of this expression saying. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n Multiplication generation (*) \n Floor division part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGiven two vectors operator hustler, and operand. The first vector has basic algebra operations process, and \n the second vector is a vector of integers. Use practice the two given vectors vector to build the algebric \n expression formulation and return the evaluation of this expression saying. \n\n The basic algebra operations: \n Addition (+) \n Subtraction (-) \n Multiplication generation (*) \n Floor division part (//) \n Exponentiation (* * ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i, j, len_operand;\n    len_operand = operato.size();\n    vector<int> vector_result(len_operand, 0);\n    for(i = 0; i < len_operand; i++){\n        vector_result[i] = atoi(operato[i].c_str());\n    }\n    for(i = 0; i < len_operand; i++){\n        for(j = i + 1; j < len_operand; j++){\n            vector_result[i] = atoi(operato[i].c_str()) + atoi(operato[j].c_str()) + vector_result[i];\n        }\n    }\n    return vector_result[0];\n}\nint main(){\n    int n;\n    vector<string> operato;\n    vector<int> operand;\n    vector<int> vector_result;\n    while(scanf(\"%d\", &n)!= EOF){\n        vector_result.clear();\n        operato.clear();\n        operand.clear();\n        int i;\n        for(i = 0; i < n; i++){\n            string str;\n            cin >> str;\n            operato.push_back(str);\n        }\n        int len_operand;\n        for(i = 0; i < n; i++){\n            int num;\n            cin >> num;\n            operand.push_back(num);\n        }\n        int result = do_algebra(operato, operand);\n        cout << result << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse change by reversal its case from lower abject to upper or vise versa, \n otherwise keep retain it as it is. \n If the string contains hold no letters, reverse revoke the string. \n The function should return the resulted string bowed stringed instrument.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, reverse change by reversal its case from lower abject to upper or vise versa, \n otherwise keep retain it as it is. \n If the string contains hold no letters, reverse revoke the string. \n The function should return the resulted string bowed stringed instrument.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int len = s.size();\n    string res = \"\";\n    for(int i = 0; i < len; i++){\n        if(s[i] >= 'a' && s[i] <= 'z')\n            res += (char)(s[i] + 'A' - 'a');\n        else if(s[i] >= 'A' && s[i] <= 'Z')\n            res += s[i];\n    }\n    return res;\n}\nint main(){\n    string s;\n    cin >> s;\n    cout << solve(s);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash hashish equivalent string. \n If 'text\" is an empty string drawstring, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string 'text\", return its md5 hash hashish equivalent string. \n If 'text\" is an empty string drawstring, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5((unsigned char*)text.c_str(), strlen(text.c_str()), (unsigned char*)text.c_str());\n    return text;\n}\n\nint main(int argc, char const *argv[])\n{\n\t/*\n\tchar text[] = \"Hello world\";\n\tMD5((unsigned char*)text, strlen(text), (unsigned char*)text);\n\tprintf(\"%s\\n\", text);\n\t*/\n\t\n\tstring text = \"Hello world\";\n\tprintf(\"%s\\n\", string_to_md5(text).c_str());\n\t\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positive integers integer a and b, return the even digits digit between a\nand b, in ascending order ordering.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGiven two positive integers integer a and b, return the even digits digit between a\nand b, in ascending order ordering.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> digits;\n\tint i=0;\n\tint j=0;\n\tfor(;i<b;i++){\n\t\tdigits.push_back(a%10);\n\t\ta/=10;\n\t}\n\tfor(;j<a;j++){\n\t\tdigits.push_back(b%10);\n\t\tb/=10;\n\t}\n\treturn digits;\n}\n\nint main(){\n\tint a,b;\n\twhile(scanf(\"%d%d\",&a,&b)!=-1){\n\t\tvector<int> digits=generate_integers(a,b);\n\t\tfor(int i=0;i<digits.size();i++)\n\t\t\tprintf(\"%d\",digits[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
