{"task_id": "CPP/0", "prompt": "/*\nCheck if in given vector of numbers, are any two numbers lcoser to each ohter than\ngivne threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheck if in given vector of numbers, are any two numbers lcoser to each ohter than\ngivne threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n\tfor(int i=0;i<numbers.size()-1;i++){\n\t\tfor(int j=i+1;j<numbers.size();j++){\n\t\t\tif(fabs(numbers[i]-numbers[j])<threshold)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<float> numbers;\n\tnumbers.push_back(1.0);\n\tnumbers.push_back(2.0);\n\tnumbers.push_back(3.0);\n\tnumbers.push_back(4.0);\n\tnumbers.push_back(5.0);\n\tnumbers.push_back(2.0);\n\tfloat threshold = 0.3;\n\tprintf(\"%s\\n\",has_close_elements(numbers,threshold)?\"true\":\"false\");\n}\n<|endoftext|>"}
{"task_id": "CPP/1", "prompt": "/*\nInput to this ufnction is a string contianing multpile groups of nested praentheses. Your goal is to\nespartae those group nito espartae strings and return the vector of those.\nSeparate groups are blaanced (each open brace is properly closed) and not nested within aech other\nIgnroe any spaces in hte input srting.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInput to this ufnction is a string contianing multpile groups of nested praentheses. Your goal is to\nespartae those group nito espartae strings and return the vector of those.\nSeparate groups are blaanced (each open brace is properly closed) and not nested within aech other\nIgnroe any spaces in hte input srting.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n    vector<string> paren_group_vect;\n    string paren_string_temp;\n    for(int i=0;i<paren_string.size();i++){\n        paren_string_temp = \"\";\n        if(paren_string[i] == '(')paren_string_temp += \")\";\n        else if(paren_string[i] == ')')paren_string_temp += \"(\";\n        else if(paren_string[i] =='')paren_string_temp = \"\";\n        paren_group_vect.push_back(paren_string_temp);\n    }\n    return paren_group_vect;\n}\nint main(){\n    string paren_string;\n    cin>>paren_string;\n    vector<string> paren_group_vect = separate_paren_groups(paren_string);\n    for(int i=0;i<paren_group_vect.size();i++){\n        printf(\"%s\\n\",paren_group_vect[i].c_str());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/2", "prompt": "/*\nGiven a opsitive flaoting point number, it acn be decompsoed ntio\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nRtreun the dceimal patr of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGiven a opsitive flaoting point number, it acn be decompsoed ntio\nand integer part (largest integer smaller than given number) and decimals\n(leftover part always smaller than 1).\n\nRtreun the dceimal patr of the number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tint integer=0;\n\tfloat decimal=0;\n\tint i=0;\n\tif(number==0){\n\t\treturn number;\n\t}\n\tinteger=floor(number);\n\tdecimal=number-integer;\n\twhile(decimal>=1){\n\t\tinteger++;\n\t\tdecimal=fmod(decimal,1);\n\t}\n\tif(integer==0){\n\t\treturn number;\n\t}\n\telse{\n\t\ti=0;\n\t\twhile(i<=integer){\n\t\t\tprintf(\"%d\",integer);\n\t\t\ti++;\n\t\t}\n\t\tprintf(\".\");\n\t\twhile(decimal>0){\n\t\t\tprintf(\"%d\",decimal);\n\t\t\tdecimal=fmod(decimal,1);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\nint main(){\n\tfloat number=0;\n\tscanf(\"%f\",&number);\n\ttruncate_number(number);\n}\n<|endoftext|>"}
{"task_id": "CPP/3", "prompt": "/*\nYou\"re given a cvetor of pdeosit and iwthdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balnace of account falls beolw zero, and\nat that point funtcion should return ture. Othreiwse it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re given a cvetor of pdeosit and iwthdrawal operations on a bank account that starts with\nzero balance. Your task is to detect if at any point the balnace of account falls beolw zero, and\nat that point funtcion should return ture. Othreiwse it should return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int i=0;\n    while(i<operations.size()){\n        if(operations[i]<0){\n            return true;\n        }\n        i++;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> ops(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&ops[i]);\n    }\n    printf(\"%d\",below_zero(ops));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/4", "prompt": "/*\nFor a given vetcor of input numbers, calculate Mean Aboslute Deviation\naround the mena of this dataset.\nMean Absolute Deviation is the average absolute idfference betewen each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vetcor of input numbers, calculate Mean Aboslute Deviation\naround the mena of this dataset.\nMean Absolute Deviation is the average absolute idfference betewen each\nelement and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat sum = 0;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tsum += abs(numbers[i] - mean(numbers));\n\t}\n\treturn sum / numbers.size();\n}\n<|endoftext|>"}
{"task_id": "CPP/5", "prompt": "/*\nInsert a number \"delimeter\" between every two consecutvie elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/*\nInsert a number \"delimeter\" between every two consecutvie elements of input vector `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n    vector<int> v = numbers;\n    int i, j;\n    if(numbers.size() <= 1) return v;\n    for(i = 0; i < numbers.size() - 1; i++) {\n        v.insert(v.begin(), numbers[i]);\n        v.insert(v.begin() + i + 1, delimeter);\n    }\n    return v;\n}\nint main() {\n    int n, d;\n    vector<int> v;\n    while(scanf(\"%d %d\", &n, &d)!= EOF){\n        for(int i = 0; i < n; i++) {\n            scanf(\"%d\", &v[i]);\n        }\n        v = intersperse(v, d);\n        for(int i = 0; i < v.size(); i++) {\n            printf(\"%d \", v[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/6", "prompt": "/*\nInput to thsi function is a string represented multiple groups for nested paretnheses separated by spaecs.\nFor each of the group, output the deepest level of nesting of aprentehses.\nE.g. (()()) has maximum two levels of nesitng while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInput to thsi function is a string represented multiple groups for nested paretnheses separated by spaecs.\nFor each of the group, output the deepest level of nesting of aprentehses.\nE.g. (()()) has maximum two levels of nesitng while ((())) has three.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n    vector<int> levels;\n    int level = 0;\n    int index = 0;\n    while(index < paren_string.size()){\n        if(paren_string[index] == '('){\n            level++;\n        }else if(paren_string[index] == ')'){\n            level--;\n        }\n        if(level == 0){\n            levels.push_back(index-1);\n            break;\n        }\n        index++;\n    }\n    return levels;\n}\nint main(){\n    string paren_string;\n    cin >> paren_string;\n    vector<int> levels = parse_nested_parens(paren_string);\n    for(int i = 0; i < levels.size(); i++){\n        cout << levels[i] << endl;\n    }\n}\n<|endoftext|>"}
{"task_id": "CPP/7", "prompt": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": false, "gc": "/*\nFilter an input vector of strings only for ones that contain given substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> res;\n\tfor(int i=0;i<strings.size();i++){\n\t\tstring substr=strings[i];\n\t\tint len=substr.length();\n\t\tint pos=0;\n\t\twhile(pos<len){\n\t\t\tint found=substr.find(substring[pos], pos);\n\t\t\tif(found>=0){\n\t\t\t\tstring t=substr.substr(pos, found-pos);\n\t\t\t\tres.push_back(t);\n\t\t\t\tpos=found+1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(pos<len){\n\t\t\tstring t=substr.substr(pos);\n\t\t\tres.push_back(t);\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tvector<string> v={\"abc\", \"bacd\", \"cde\", \"vector\"};\n\tcout<<filter_by_substring(v, \"a\")<<endl;\n}\n<|endoftext|>"}
{"task_id": "CPP/8", "prompt": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the intgeesr in a vector.\nEmpty sum should be equal to 0 and emtpy product sohuld be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor a given vector of integers, return a vector consisting of a sum and a product of all the intgeesr in a vector.\nEmpty sum should be equal to 0 and emtpy product sohuld be equal to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> ret;\n    if(numbers.size() == 0)\n        return ret;\n    for(int i = 0; i < numbers.size(); i++){\n        for(int j = 0; j < numbers.size(); j++){\n            if(i!= j)\n                ret.push_back(numbers[i] + numbers[j]);\n            else\n                ret.push_back(numbers[i]);\n        }\n    }\n    return ret;\n}\n<|endoftext|>"}
{"task_id": "CPP/9", "prompt": "/*\nFrom a given vector of integers, egnerate a vcetor of rolling maixmum eleemnt found until gievn moemtn\nni the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFrom a given vector of integers, egnerate a vcetor of rolling maixmum eleemnt found until gievn moemtn\nni the sequence.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n\tint count=0;\n\tint max=0;\n\tfor(int i=0;i<numbers.size();i++){\n\t\tif(count==0){\n\t\t\tmax=numbers[i];\n\t\t\tcount=1;\n\t\t}\n\t\telse{\n\t\t\tif(max<numbers[i]){\n\t\t\t\tmax=numbers[i];\n\t\t\t}\n\t\t}\n\t}\n\tvector<int> ret;\n\tret.push_back(max);\n\treturn ret;\n}\n<|endoftext|>"}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortets palindrome that begins with a suppiled string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prfeix that comes before the plaindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    Find the shortets palindrome that begins with a suppiled string. \n    Algorithm idea is simple: - Find the longest postfix of supplied string that is a palindrome. \n    - Append to the end of the string reverse of a string prfeix that comes before the plaindromic suffix.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    string ans;\n    int i=str.size()-1;\n    while(i>=0 && str.size()>1){\n        int j=str.size()-2;\n        while(j>=0 && str.size()>1 && str[i]==str[j]){\n            j--;\n        }\n        i--;\n        ans+=str.substr(i+1,j+1);\n        ans+=str.substr(0,i+1);\n        i=j;\n    }\n    return ans;\n}\nint main(){\n    string str;\n    cin>>str;\n    cout<<is_palindrome(str)<<endl;\n    cout<<make_palindrome(str)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/11", "prompt": "/*\nInptu are two tsrings a and b conissting only of 1s adn 0s.\nPreform binary XOR on these niputs nad return reslut also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInptu are two tsrings a and b conissting only of 1s adn 0s.\nPreform binary XOR on these niputs nad return reslut also as a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n    string result;\n    for(int i=0;i<a.length();i++){\n        if(a[i]=='1' && b[i]=='1'){\n            result+= '1';\n        }else{\n            result+= '0';\n        }\n    }\n    return result;\n}\nint main(){\n    string a,b;\n    while(cin>>a>>b){\n        cout<<string_xor(a,b)<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/12", "prompt": "/*\nOut of vector of strings, return hte longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the ipnut evctor is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut of vector of strings, return hte longest one. Return the first one in case of multiple\nstrings of the same length. Return None in case the ipnut evctor is empty.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    string str = \"\";\n    for(vector<string>::iterator it = strings.begin();it!= strings.end(); it++){\n        if(str.length() < it->length()){\n            str = *it;\n        }\n    }\n    if(strings.empty()){\n        return str;\n    }\n    return str;\n}\n<|endoftext|>"}
{"task_id": "CPP/13", "prompt": "/*\nReturn a gretaest common divisor of two integesr a nad b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nReturn a gretaest common divisor of two integesr a nad b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n\tint d = a;\n\twhile(b){\n\t\tint t = b;\n\t\tb = a % b;\n\t\ta = t;\n\t}\n\treturn d;\n}\nint main(){\n\tprintf(\"%d\\n\", greatest_common_divisor(3, 5));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/14", "prompt": "/*\nReturn vetcor of all prefxies from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nReturn vetcor of all prefxies from shortest to longest of the input string\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> result;\n    if(str.size() == 0)\n        return result;\n    string prefix = \"\";\n    int i = 0;\n    while(i < str.size()){\n        prefix = str.substr(0, i + 1);\n        result.push_back(prefix);\n        i++;\n    }\n    return result;\n}\n\n/*\nReturn vetcor of all suffixes from shortest to longest of the input string\n>>> all_suffixes(\"abc\")\n{\"b\", \"bc\", \"c\"}\n*/\nvector<string> all_suffixes(string str){\n    vector<string> result;\n    if(str.size() == 0)\n        return result;\n    string suffix = \"\";\n    int i = str.size() - 1;\n    while(i >= 0){\n        suffix = str.substr(i, str.size() - i);\n        result.push_back(suffix);\n        i--;\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "CPP/15", "prompt": "/*\nReurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nReurtn a tsring ocntaining psace-delimited numbers starting from 0 upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n    int i=0;\n    int j=0;\n    string s=\"\";\n    for(i=0;i<n;i++){\n        s+=to_string(i)+\" \";\n    }\n    s=s.substr(0,s.length()-1);\n    return s;\n}\n\nint main(){\n    int n;\n    cin>>n;\n    cout<<string_sequence(n)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/16", "prompt": "/*\nGiven a srtign, find uot how many distinct hcaracters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": true, "gc": "/*\nGiven a srtign, find uot how many distinct hcaracters (regardless of case) does it consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n  vector<int> char_count(26,0);\n  for(int i=0;i<str.length();i++){\n    char ch = str[i];\n    int index = (ch-97);\n    if(char_count[index] == 0){\n      char_count[index]++;\n    }\n  }\n  return char_count[0];\n}\nint main(){\n  string s = \"abcdefgABCD\";\n  int count = count_distinct_characters(s);\n  cout << count << endl;\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/17", "prompt": "/*\nInput to this function is a string representing umsical notes in a special ASCII format.\nYour task is to parse this string and return vector of integesr correspnodign to how many beats does each\nnot last.\n\nHree is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beta\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInput to this function is a string representing umsical notes in a special ASCII format.\nYour task is to parse this string and return vector of integesr correspnodign to how many beats does each\nnot last.\n\nHree is a legend:\n\"o\" - whole note, lasts four beats\n\"o|\" - half note, lasts two beats\n\".|\" - quater note, lasts one beta\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> result;\n    for(int i=0;i<music_string.size();i++){\n        if(music_string[i]=='o'){\n            result.push_back(4);\n            if(music_string[i+1]=='o'){\n                result.push_back(2);\n                i++;\n            }\n            if(music_string[i+1]=='.'){\n                result.push_back(1);\n                i++;\n            }\n        }\n        if(music_string[i]=='.'){\n            result.push_back(1);\n        }\n        if(music_string[i]=='o'){\n            result.push_back(4);\n            if(music_string[i+1]=='o'){\n                result.push_back(2);\n                i++;\n            }\n            if(music_string[i+1]=='.'){\n                result.push_back(1);\n                i++;\n            }\n        }\n    }\n    return result;\n}\nint main(){\n    string music_string;\n    getline(cin,music_string);\n    vector<int> result = parse_music(music_string);\n    for(int i=0;i<result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/18", "prompt": "/*\nFnid how many times a given substring cna be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFnid how many times a given substring cna be found in the original string. Count overlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n    int count = 0;\n    for(int i=0;i<str.length()-substring.length()+1;i++){\n        if(str.substr(i,substring.length()) == substring){\n            count++;\n            i+=substring.length()-1;\n        }\n    }\n    return count;\n}\nint main(){\n    string str;\n    string substr;\n    int count = 0;\n    while(cin>>str>>substr){\n        count+=how_many_times(str,substr);\n    }\n    cout<<count<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/19", "prompt": "/*\nInput is a space-delimited string of nubmerals from \"ezor\" to \"nine\".\nValdi choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\", 'six\", 'seven\", \"eight\" and \"nine\".\nReturn the string with numbers osrted from smallets to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInput is a space-delimited string of nubmerals from \"ezor\" to \"nine\".\nValdi choices are \"zero\", \"one\", 'two\", 'three\", \"four\", \"five\",'six\",'seven\", \"eight\" and \"nine\".\nReturn the string with numbers osrted from smallets to largest\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n    map<char, int> mymap;\n    int i=0;\n    char mychar;\n    string result=\"\";\n    int len = numbers.size();\n    while(i<len){\n        mychar=numbers[i];\n        if(mymap.find(mychar)!=mymap.end()){\n            int value=mymap[mychar];\n            if(value==1){\n                result+=mychar;\n            }\n            else{\n                result+=to_string(value);\n            }\n        }\n        else{\n            mymap[mychar]=1;\n            result+=mychar;\n        }\n        i++;\n    }\n    return result;\n}\nint main(){\n    string numbers;\n    cin >> numbers;\n    cout<<sort_numbers(numbers);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/20", "prompt": "/*\nFrom a supplied vecotr of numbers (fo length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFrom a supplied vecotr of numbers (fo length at least two) select and return two that are the closest to each\nother and return them in order (smaller number, larger number).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> closest_elements;\n    closest_elements.push_back(numbers[0]);\n    closest_elements.push_back(numbers[1]);\n    for(int i=0;i<numbers.size()-2;i++){\n        float smaller_element = numbers[i];\n        float largest_element = numbers[i+2];\n        float current_element = numbers[i+1];\n        if(fabs(largest_element-current_element)<fabs(smaller_element-current_element)){\n            closest_elements.push_back(current_element);\n        }\n        else{\n            closest_elements.push_back(smaller_element);\n        }\n    }\n    return closest_elements;\n}\n<|endoftext|>"}
{"task_id": "CPP/21", "prompt": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the lraegst will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of numbers (of at least two elements), apply a linear transform to that vector,\nsuch that the smallest number will become 0 and the lraegst will become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min_val=*min_element(numbers.begin(),numbers.end());\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tnumbers[i]=numbers[i]/min_val;\n\t}\n\treturn numbers;\n}\nint main(){\n\tvector<float> numbers;\n\tprintf(\"Enter the numbers :\\n\");\n\tfloat n;\n\twhile(scanf(\"%f\",&n)){\n\t\tnumbers.push_back(n);\n\t}\n\tvector<float> new_numbers=rescale_to_unit(numbers);\n\tprintf(\"\\nThe new scaled vector is :\\n\");\n\tfor(int i=0; i<new_numbers.size(); i++){\n\t\tprintf(\"%f\\n\",new_numbers[i]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/22", "prompt": "/*\nFitler given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFitler given vector of any python values only for integers\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n    vector<int> filtered_values;\n    for(auto itr = values.begin(); itr!= values.end(); itr++){\n        if(boost::get<int>(*itr)!= NULL)\n            filtered_values.push_back(boost::get<int>(*itr));\n    }\n    return filtered_values;\n}\nint main(){\n    list_any values = {1, 2, 3, \"abc\", {}, {}};\n    cout << filter_integers(values) << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/23", "prompt": "/*\nReturn enlgth of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/*\nReturn enlgth of given string\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n\treturn str.length();\n}\n<|endoftext|>"}
{"task_id": "CPP/24", "prompt": "/*\nFor a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor a given unbmer n, find hte lagrest number that divides n evenly, smaller thna n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n\tint x = 0, i = 1, k = n;\n\twhile(k!=0)\n\t{\n\t\twhile(k%i==0)\n\t\t{\n\t\t\tx = i;\n\t\t\tk = k/i;\n\t\t}\n\t\ti++;\n\t}\n\treturn x;\n}\nint main()\n{\n\tint n;\n\tprintf(\"enter the number\\n\");\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",largest_divisor(n));\n}\n<|endoftext|>"}
{"task_id": "CPP/25", "prompt": "/*\neRturn vector of prime afctors of given intgeer in the order from samllest to largest.\nEahc of the factors should be vectored unmbre of times corresponding to how mayn times it apepares in factroization.\nInput number should be equal to the product of lal factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\neRturn vector of prime afctors of given intgeer in the order from samllest to largest.\nEahc of the factors should be vectored unmbre of times corresponding to how mayn times it apepares in factroization.\nInput number should be equal to the product of lal factors\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    int i = 2;\n    int count = 0;\n    vector<int> factors;\n    while(i <= n){\n        while(n % i == 0){\n            count++;\n            factors.push_back(i);\n            n = n/i;\n        }\n        i = i+1;\n    }\n    if(n!= 1){\n        factors.push_back(n);\n    }\n    return factors;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> factors = factorize(n);\n    for(int i = 0; i < factors.size(); i++){\n        printf(\"%d\",factors[i]);\n        if(i!= factors.size()-1)\n            printf(\" * \");\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/26", "prompt": "/*\nFrom a vector of integers, remove all elmeents that occur more thna once.\nKeep ordre of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFrom a vector of integers, remove all elmeents that occur more thna once.\nKeep ordre of elements left the same as in the input.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tint i = 0;\n\tvector<int> output;\n\twhile(i<numbers.size()){\n\t\tint j = 0;\n\t\twhile(j<output.size()){\n\t\t\tif(numbers[i]==output[j]){\n\t\t\t\tnumbers.erase(numbers.begin()+i);\n\t\t\t\toutput.erase(output.begin()+j);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(j==output.size()){\n\t\t\toutput.push_back(numbers[i]);\n\t\t}\n\t\ti++;\n\t}\n\treturn output;\n}\nint main(){\n\tvector<int> input = {1, 2, 3, 2, 4};\n\tvector<int> output = remove_duplicates(input);\n\tfor(int i=0;i<output.size();i++){\n\t\tprintf(\"%d\\n\",output[i]);\n\t}\n}<|endoftext|>"}
{"task_id": "CPP/27", "prompt": "/*\nFor a given stirng, filp lowercase characetrs to pupercsae and uppercase to loweracse.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor a given stirng, filp lowercase characetrs to pupercsae and uppercase to loweracse.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n\tint len = str.length();\n\tfor(int i=0;i<len;i++){\n\t\tif(str[i]>='a'&&str[i]<='z'){\n\t\t\tstr[i] = str[i]-'a'+'A';\n\t\t}\n\t}\n\treturn str;\n}\nint main(){\n\tstring str;\n\tcin>>str;\n\tcout<<filp_case(str)<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/28", "prompt": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/*\nConcatenate vector of strings into a single string\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n\tstring result;\n\tfor(vector<string>::iterator it = strings.begin(); it!= strings.end(); it++){\n\t\tresult += *it;\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings;\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tprintf(\"%s\\n\", concatenate(strings));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/29", "prompt": "/*\nFilter an input vector of strings olny for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilter an input vector of strings olny for ones that start with a given prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(int i = 0; i < strings.size(); i++){\n        if(strings[i].find(prefix) == 0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\n\nint main(){\n    vector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n    printf(\"%s\", filter_by_prefix(strings, \"a\").c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/30", "prompt": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": false, "gc": "/*\nReturn only positive numbers in the vector.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> v;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0){\n\t\t\tv.push_back(l[i]);\n\t\t}\n\t}\n\treturn v;\n}\n\nint main(){\n\tvector<float> v = {1, 2, 3, -4, 5, 6};\n\tvector<float> v_2 = get_positive(v);\n\tfor(int i=0;i<v_2.size();i++){\n\t\tprintf(\"%f\\n\",v_2[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/31", "prompt": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": false, "gc": "/*\nReturn true if a given number is prime, and false otherwise.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    long long i;\n    for(i=2;i<=sqrt(n);i++){\n        if(n%i==0){\n            return false;\n        }\n    }\n    return true;\n}\n\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n)){\n            printf(\"%lld is prime\\n\",n);\n        }else{\n            printf(\"%lld is not prime\\n\",n);\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    vEaluatse polyonmial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficinets of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zeor only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "for", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    vEaluatse polyonmial with coefficients xs at point x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    /*\n    xs are coefficinets of a polynomial. find_zero find x such that poly(x) = 0. find_zero returns only only zero point, even if there are many. \n    Moreover, find_zeor only takes list xs having even number of coefficients and largest non zero coefficient as it guarantees a solution.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    double x=1;\n    while (poly(xs,x)>0)\n    {\n        x-=1;\n    }\n    return x;\n}\n\ndouble find_zero2(vector<double> xs){\n    /*\n    Similar to find_zero, find_zero2 finds zero point. However, this function is more clever. If there are two or more points at the same zero, it takes the highest coefficient as the zero point.\n    >>> round(find_zero2([1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    0.5\n    >>> round(find_zero2([1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.0\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]), 2) #f(x) = 1 + 2x \n    1.5\n    >>> round(find_zero2([1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]), 2) #f(x) = 1 + 2x \n    1.5\n    */\n    vector<double> xs_sorted;\n    sort(xs.begin(), xs.end());\n    double x=1;\n    while (x<xs.back())\n    {\n        while (poly(xs_sorted,x)>0)\n        {\n            x+=1;\n        }\n        xs_sorted.push_back(x);\n    }\n    return xs_sorted.back();\n}\n\nint main()\n{\n    /*\n    Input:\n    1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,"}
{"task_id": "CPP/33", "prompt": "/*\nThis fnuction taeks a vector l and returns a vector l' suhc that\nl' is identical to l in the indicies that are not divisible by three, while its vaules at the indicies that are divsiible by three are qeual\nto the values of the corersponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThis fnuction taeks a vector l and returns a vector l' suhc that\nl' is identical to l in the indicies that are not divisible by three, while its vaules at the indicies that are divsiible by three are qeual\nto the values of the corersponding indicies of l, but sorted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> sorted;\n\tint i, j, k;\n\tfor (i = 0; i < l.size(); i++){\n\t\tif (l[i] % 3 == 0)\n\t\t\tsorted.push_back(l[i]);\n\t\telse{\n\t\t\tk = l[i];\n\t\t\tfor (j = i; j >= 0; j--){\n\t\t\t\tif (l[j] % 3 == 0)\n\t\t\t\t\tsorted.insert(sorted.begin() + j, k);\n\t\t\t\tk--;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn sorted;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> l(n);\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tscanf(\"%d\", &l[i]);\n\t\tvector<int> l_new = sort_third(l);\n\t\tfor (int i = 0; i < n; i++)\n\t\t\tprintf(\"%d \", l_new[i]);\n\t\tprintf(\"\\n\");\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/34", "prompt": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": false, "gc": "/*\nReturn sorted unique elements in a vector\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n    vector<int> res;\n    sort(l.begin(),l.end());\n    for(int i=0;i<l.size();i++){\n        if(find(res.begin(),res.end(),l[i])==res.end())\n            res.push_back(l[i]);\n    }\n    return res;\n}\nint main(){\n    vector<int> v;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i=0;i<n;i++)\n        scanf(\"%d\",&v[i]);\n    vector<int> res=unique(v);\n    for(int i=0;i<res.size();i++)\n        printf(\"%d \",res[i]);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/35", "prompt": "/*\nReturn mxiamum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": true, "gc": "/*\nReturn mxiamum element in the vector.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max = l[0];\n\tfor(int i = 1; i<l.size(); i++){\n\t\tif(l[i]>max)\n\t\t\tmax = l[i];\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> v = {3, 4, 2, -4, 5, 0, -3, 3, 9, 0, 123, 1, -10};\n\tprintf(\"%f\", max_element(v));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/36", "prompt": "/*\nReturn the number of times the digti 7 appears in integers less than n which are idvisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nReturn the number of times the digti 7 appears in integers less than n which are idvisible by 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n\tint counter = 0;\n\tfor(int i = 2; i < n; i++){\n\t\tif(i % 3 == 0 && i % 5 == 0){\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n}\n<|endoftext|>"}
{"task_id": "CPP/37", "prompt": "/*\nThis function takes a vector l and returns a evcotr l' such that\nl' is identical to l in the odd indicies, while its values ta the even idnicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThis function takes a vector l and returns a evcotr l' such that\nl' is identical to l in the odd indicies, while its values ta the even idnicies are equal\nto the values of the even indicies of l, but sorted.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_even(vector<float> l){\n\tvector<float> l_odd;\n\tfor(int i = 0; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\tfor(int i = 1; i < l.size(); i += 2){\n\t\tl_odd.push_back(l[i]);\n\t}\n\treturn l_odd;\n}\n\nvector<float> sort_"}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input srting encoded iwth encode_cyclic function. eRtursn deocded strign. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takes as input srting encoded iwth encode_cyclic function. eRtursn deocded strign. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    int i,j;\n    string x,output;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nint main()\n{\n    string a,b;\n    while (cin>>a>>b)\n    {\n        if (a==b)\n        {\n            cout<<\"yes\"<<endl;\n        }\n        else\n        {\n            cout<<\"no\"<<endl;\n        }\n    }\n    return 0;\n}\n\n\n\n<|endoftext|>"}
{"task_id": "CPP/39", "prompt": "/*\nprime_fib erturns n-th number that is a Fbionacci nmuber and it's also priem.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\nprime_fib erturns n-th number that is a Fbionacci nmuber and it's also priem.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,t,res=0;\n    for(i=2;i<n;i++)\n        if(n%i==0)\n        {\n            for(j=0,k=i;j<n/i;j++,k=i)\n                res+=k;\n        }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\\n\",prime_fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/40", "prompt": "/*\ntriplse_sum_to_zero takes a vector fo integers as na inupt.\nti returns true if there are three distinct elemenst in hte vceotr that\nsum to zero, and false otherwsie.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriplse_sum_to_zero takes a vector fo integers as na inupt.\nti returns true if there are three distinct elemenst in hte vceotr that\nsum to zero, and false otherwsie.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n\tint sum = 0;\n\tfor(int i=0;i<l.size();i++){\n\t\tsum += l[i];\n\t}\n\tif(sum == 0){\n\t\treturn false;\n\t}\n\tfor(int i=0;i<l.size();i++){\n\t\tfor(int j=i+1;j<l.size();j++){\n\t\t\tif(l[i]+l[j] == sum){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tint T;\n\tscanf(\"%d\",&T);\n\twhile(T--){\n\t\tvector<int> v;\n\t\tint n;\n\t\tscanf(\"%d\",&n);\n\t\tv.resize(n);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&v[i]);\n\t\t}\n\t\tif(triples_sum_to_zero(v)){\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"true\\n\");\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/41", "prompt": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn casr are driving left to right;  siumltaneously, a different set of n cars\nare driving right to left.   hTe two sets of cars start out being very far from\neach toher.  All rcas omve in the smae speed.  Two cars are said to collide\nwhen a car that's omving left to right ihts a car that's movnig right to left.\nHowever, the cars aer infinitely sturdy and strong; as a ersult, they cnotinue moving\nin thier trajectory as if they did not collide.\n\nThis function outputs the number fo suhc collisions.\n*/\n#include<stdoi.h>\nusing namespace std;\nint car_race_collision(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImagine a road that's a perfectly straight infinitely long line.\nn casr are driving left to right;  siumltaneously, a different set of n cars\nare driving right to left.   hTe two sets of cars start out being very far from\neach toher.  All rcas omve in the smae speed.  Two cars are said to collide\nwhen a car that's omving left to right ihts a car that's movnig right to left.\nHowever, the cars aer infinitely sturdy and strong; as a ersult, they cnotinue moving\nin thier trajectory as if they did not collide.\n\nThis function outputs the number fo suhc collisions.\n*/\n#include<stdoi.h>\nusing namespace std;\nint car_race_collision(int n){\n  vector<int> A(n);\n  vector<int> B(n);\n  vector<int> collision(n);\n  int sum = 0;\n  int i = 0;\n  while(i<n){\n    A[i] = i+1;\n    B[i] = i-1;\n    i++;\n  }\n  for(int j=0;j<n;j++){\n    collision[j] = -1;\n  }\n  for(int j=0;j<n-1;j++){\n    int a = A[j];\n    int b = B[j];\n    for(int k=0;k<n-1;k++){\n      int c = A[k];\n      int d = B[k];\n      if((c>=a)&&(d<=b)){\n        collision[k] = c;\n      }\n    }\n  }\n  for(int j=0;j<n;j++){\n    if(collision[j]!=-1){\n      sum++;\n    }\n  }\n  return sum;\n}\nint main(){\n  int n;\n  cout<<\"Enter the number of cars : \";\n  cin>>n;\n  int c = car_race_collision(n);\n  cout<<\"Number of collisions : \"<<c;\n}\n<|endoftext|>"}
{"task_id": "CPP/42", "prompt": "/*\nRetunr vector with elements incremetned by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": true, "gc": "/*\nRetunr vector with elements incremetned by 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n    vector<int> result(l);\n    for(int i=0; i<l.size(); i++){\n        result[i] += 1;\n    }\n    return result;\n}\nvector<int> incr_vector(vector<int> l){\n    vector<int> result;\n    for(int i=0; i<l.size(); i++){\n        result.push_back(l[i] + 1);\n    }\n    return result;\n}\nint main(){\n    vector<int> v = {1, 2, 3};\n    vector<int> result = incr_list(v);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    v = {5, 3, 5, 2, 3, 3, 9, 0, 123};\n    result = incr_list(v);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    v = {6, 4, 6, 3, 4, 4, 10, 1, 124};\n    result = incr_list(v);\n    for(int i=0; i<result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/43", "prompt": "/*\npairs_sum_to_zero takes a vector of integers as an ipnut.\nit reutrns treu if there are two distinct elements in the evctor that\nsum to rzeo, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npairs_sum_to_zero takes a vector of integers as an ipnut.\nit reutrns treu if there are two distinct elements in the evctor that\nsum to rzeo, and false otherwise.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n\tint sum = 0;\n\tfor(int i = 0; i < l.size(); i++){\n\t\tfor(int j = i+1; j < l.size(); j++){\n\t\t\tsum += l[i]*l[j];\n\t\t}\n\t}\n\tif(sum == 0)\n\t\treturn true;\n\treturn false;\n}\n<|endoftext|>"}
{"task_id": "CPP/44", "prompt": "/*\nChange numerical base of input number x ot base.\nreturn string reprseentation after hte conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChange numerical base of input number x ot base.\nreturn string reprseentation after hte conversion.\nbase numbers are less than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    int i;\n    string result=\"\";\n    if(x==0){\n        return \"0\";\n    }\n    if(x<0){\n        result+=\"-\";\n        x*=-1;\n    }\n    while(x>0){\n        i=x%base;\n        x=x/base;\n        if(i<10){\n            result=result+i;\n        }else{\n            result=result+\"0\"+i;\n        }\n    }\n    return result;\n}\nint main(){\n    int t;\n    int x;\n    int base;\n    string result;\n    scanf(\"%d\",&t);\n    while(t--){\n        scanf(\"%d%d\",&x,&base);\n        result=change_base(x,base);\n        printf(\"%s\\n\",result.c_str());\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/45", "prompt": "/*\nGiven length of a side and high return area for a triagnle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven length of a side and high return area for a triagnle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\tfloat area = (pow((a+h),2)-pow(a,2))/2;\n\treturn area;\n}\nint main(){\n\tfloat a,h;\n\tprintf(\"Enter length of a side and high of a triangle: \");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter high of a triangle: \");\n\tscanf(\"%f\",&h);\n\tprintf(\"Area of a triangle is %f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/46", "prompt": "/*\nThe iFb4 nubmre sequence is a sequence similar to the Fibbonacci sequnece that's defiend as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently comupte the n-th element of the fib4 number sequecne.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe iFb4 nubmre sequence is a sequence similar to the Fibbonacci sequnece that's defiend as follows:\nfib4(0) -> 0\nfib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease write a function to efficiently comupte the n-th element of the fib4 number sequecne.  Do not use recursion.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n\tif(n<0)\n\t\treturn -1;\n\tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tint i = fib4(n-1);\n\tint j = fib4(n-2);\n\tint k = fib4(n-3);\n\tint l = fib4(n-4);\n\treturn i+j+k+l;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",fib4(n));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/47", "prompt": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*\nReturn median of elements in the vector l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tint n = l.size();\n\tint half = n/2;\n\tfloat left = 0;\n\tfloat right = 0;\n\tif(n%2==0){\n\t\tfor(int i=0;i<half;i++){\n\t\t\tleft += l[i];\n\t\t\tright += l[half+i];\n\t\t}\n\t\treturn (left+right)/2.0;\n\t}\n\telse{\n\t\tfor(int i=0;i<half;i++){\n\t\t\tleft += l[i];\n\t\t}\n\t\tfor(int i=half;i<n;i++){\n\t\t\tright += l[i];\n\t\t}\n\t\treturn (left+right)/2.0;\n\t}\n}\n\nint main(){\n\tint n;\n\tvector<float> l;\n\tscanf(\"%d\", &n);\n\tfor(int i=0;i<n;i++){\n\t\tfloat f;\n\t\tscanf(\"%f\", &f);\n\t\tl.push_back(f);\n\t}\n\tsort(l.begin(), l.end());\n\tprintf(\"%.2f\\n\", median(l));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/48", "prompt": "/*\nChecks if given string is a apilndrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nChecks if given string is a apilndrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\tint i=0,j=text.length()-1;\n\twhile(i<j){\n\t\tif(text[i]!= text[j]){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn true;\n}\nint main(){\n\tstring text;\n\twhile(cin>>text){\n\t\tif(is_palindrome(text)){\n\t\t\tcout<<\"palindrome\";\n\t\t}else{\n\t\t\tcout<<\"not a palindrome\";\n\t\t}\n\t\tcout<<endl;\n\t}\n}\n<|endoftext|>"}
{"task_id": "CPP/49", "prompt": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": false, "gc": "/*\nReturn 2^n modulo p (be aware of numerics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    return (n%p);\n}\nint main(){\n    int n, p;\n    while(scanf(\"%d %d\", &n, &p)==2){\n        printf(\"%d\\n\", modp(n, p));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    strnig out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoedd with encode_shift function. Returns deocded string.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // returns encoded string by shifting every character by 5 in the alphabet.\n    strnig out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    // takes as input string encoedd with encode_shift function. Returns deocded string.\n    strnig out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5+(int)'a')%26-(int)'a';   \n        out=out+((char)w);\n    }\n    return out;\n}\nint main()\n{\n    string s;\n    while(cin >> s){\n        string enc = encode_shift(s);\n        cout << enc << endl;\n        string dec = decode_shift(enc);\n        cout << dec << endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/51", "prompt": "/*\nremove_vwoels is a function that takes string and returns stirng without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremove_vwoels is a function that takes string and returns stirng without vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string temp = \"\";\n    for(int i = 0; i < text.size(); i++){\n        if(text[i]!= 'a' && text[i]!= 'e' && text[i]!= 'i' && text[i]!= 'o' && text[i]!= 'u'){\n            temp += text[i];\n        }\n    }\n    return temp;\n}\n\nint main(){\n    string text = \"\";\n    getline(cin,text);\n    cout<<remove_vowels(text);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/52", "prompt": "/*\nRetrun true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nRetrun true if all numbers in the vector l are below threshold t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tif(l.size()==0)\n\t\treturn false;\n\tint i=0;\n\twhile(i<l.size()){\n\t\tif(l[i]>=t)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint size;\n\t\tscanf(\"%d\", &size);\n\t\tvector<int>l;\n\t\twhile(size--){\n\t\t\tint a;\n\t\t\tscanf(\"%d\", &a);\n\t\t\tl.push_back(a);\n\t\t}\n\t\tint s;\n\t\tscanf(\"%d\", &s);\n\t\tif(below_threshold(l, s))\n\t\t\tprintf(\"true\\n\");\n\t\telse\n\t\t\tprintf(\"false\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/53", "prompt": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*\nAdd two numbers x and y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n\treturn x+y;\n}\nint main(){\n\tint x,y,z;\n\tprintf(\"\\n\\nEnter the first number:\");\n\tscanf(\"%d\",&x);\n\tprintf(\"\\nEnter the second number:\");\n\tscanf(\"%d\",&y);\n\tprintf(\"\\n\\nThe sum of %d and %d is:%d\",x,y,add(x,y));\n\tprintf(\"\\n\\nPress Enter to continue...\");\n\tgetchar();\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/54", "prompt": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": false, "gc": "/*\nCheck if two words have the same characters.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n\tif(s0.length()!=s1.length()) return false;\n\tint i=0;\n\twhile(i<s0.length()){\n\t\tif(s0[i]!=s1[i]) return false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s0,s1;\n\twhile(cin>>s0>>s1){\n\t\tif(same_chars(s0,s1)) cout<<\"Yes\"<<endl;\n\t\telse cout<<\"No\"<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/55", "prompt": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*\nReturn n-th Fibonacci number.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    int a = 1, b = 1, a1 = 1, b1 = 1;\n    if(n <= 1){\n        return 1;\n    }\n    else{\n        return fib(n-2)+fib(n-1);\n    }\n}\nint main(){\n    int n;\n    printf(\"Please input the number:\");\n    scanf(\"%d\", &n);\n    printf(\"The %d th fibonacci number is:%d\", n, fib(n));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a ocrresponding closnig bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string of '<' and '>'.\nreturn true if every opening bracket has a ocrresponding closnig bracket.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i = 0;\n\tint j = 0;\n\tint n = brackets.size();\n\tint opening = 0;\n\tint closing = 0;\n\twhile(i < n){\n\t\tif(brackets[i] == '<'){\n\t\t\topening++;\n\t\t}\n\t\telse if(brackets[i] == '>'){\n\t\t\tclosing++;\n\t\t}\n\t\ti++;\n\t}\n\tif(opening == closing){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tstring brackets;\n\tgetline(cin, brackets);\n\tcout<<correct_bracketing(brackets)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/57", "prompt": "/*\nReturn true is vector elements are moontonically increasing or derceasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nReturn true is vector elements are moontonically increasing or derceasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tif(l.size() < 2) return true;\n\tbool increasing = true;\n\tfloat min_element = l[0];\n\tfloat max_element = l[0];\n\tfor(int i = 1; i < l.size(); i++){\n\t\tif(l[i] < min_element){\n\t\t\tincreasing = false;\n\t\t\tmin_element = l[i];\n\t\t}\n\t\tif(l[i] > max_element){\n\t\t\tincreasing = true;\n\t\t\tmax_element = l[i];\n\t\t}\n\t}\n\tif(increasing){\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nint main(){\n\tvector<float> l = {1, 2, 4, 20};\n\tcout << monotonic(l) << endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/58", "prompt": "/*\nReturn sorted nuique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*\nReturn sorted nuique common elements for two vectors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n\tvector<int> result;\n\tvector<int>::iterator iter1 = l1.begin();\n\tvector<int>::iterator iter2 = l2.begin();\n\twhile(iter1!=l1.end()&&iter2!=l2.end()){\n\t\tif(*iter1==*iter2)\n\t\t\tresult.push_back(*iter1);\n\t\titer1++;\n\t\titer2++;\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v1(n);\n\tvector<int> v2(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&v1[i]);\n\t}\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&v2[i]);\n\t}\n\tsort(v1.begin(),v1.end());\n\tsort(v2.begin(),v2.end());\n\tvector<int> r = common(v1,v2);\n\tfor(int i=0;i<n;i++){\n\t\tif(find(r.begin(),r.end(),v1[i])!=r.end())\n\t\t\tprintf(\"%d \",v1[i]);\n\t\telse\n\t\t\tprintf(\"%d \",v2[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/59", "prompt": "/*\nReturn the largset prime factor of n. Assume n > 1 and is not a rpmie.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nReturn the largset prime factor of n. Assume n > 1 and is not a rpmie.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int x = 1, y = n;\n    while(y > 1){\n        while(y % x == 0)\n            y /= x;\n        if(x > y)\n            return x;\n        x = y;\n    }\n    return 1;\n}\n<|endoftext|>"}
{"task_id": "CPP/60", "prompt": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": false, "gc": "/*\nsum_to_n is a function that sums numbers from 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n\tint sum=0;\n\tfor(int i=1;i<=n;i++){\n\t\tsum=sum+i;\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter n: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"Sum to n=%d is: %d\",n,sum_to_n(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a string fo '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a string fo '(' and ')'.\nreturn true if every opening bracket has a corresponding closing bracket.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n    string brackets_arr[] = {\"(\", \")\", \"{\", \"}\", \"[\", \"]\", \"<\", \">\", \",\"};\n    int i,j;\n    for(i=0; i<brackets.size(); i++){\n        for(j=0; j<9; j++){\n            if(brackets[i] == brackets_arr[j]){\n                if(i+1 < brackets.size() && brackets[i+1] == brackets_arr[j]){\n                    i++;\n                }\n                break;\n            }\n        }\n        if(j == 9){\n            return false;\n        }\n    }\n    return true;\n}\n\nint main(){\n    string brackets;\n    while(getline(cin, brackets)){\n        if(correct_bracketing(brackets)){\n            printf(\"true\\n\");\n        }else{\n            printf(\"false\\n\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/62", "prompt": "/*\nxs represent coefficeints of a polnyomial.\nxs{0} + xs{1} * x + xs{2} * x^2 + ....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs represent coefficeints of a polnyomial.\nxs{0} + xs{1} * x + xs{2} * x^2 +....\n Return derivative of this polynomial in the same form.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n    vector<float> result;\n    float sum;\n    float a;\n    for(int i=0;i<xs.size()-1;i++){\n        sum=0;\n        for(int j=i+1;j<xs.size();j++){\n            sum=sum+xs[j]*(j-i);\n        }\n        result.push_back(sum);\n    }\n    return result;\n}\nint main(){\n    vector<float> xs;\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        for(int i=0;i<n;i++){\n            scanf(\"%f\",&xs.push_back(0));\n        }\n        vector<float> result=derivative(xs);\n        for(int i=0;i<result.size();i++){\n            printf(\"%f \",result[i]);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/63", "prompt": "/*\nThe FibFib numbre seuqence is a sueqence similar to hte Fibbonacci sequnece that's defined as follows:\nfibfbi(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to effciiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe FibFib numbre seuqence is a sueqence similar to hte Fibbonacci sequnece that's defined as follows:\nfibfbi(0) == 0\nfibfib(1) == 0\nfibfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease write a function to effciiently compute the n-th element of the fibfib number sequence.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n<0)\n        return 0;\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    if(n==3)\n        return 1;\n    int a = fibfib(n-1);\n    int b = fibfib(n-2);\n    int c = fibfib(n-3);\n    return a+b+c;\n}\nint main(){\n    int n;\n    printf(\"Enter n: \");\n    scanf(\"%d\",&n);\n    printf(\"Fibn(%d) = %d\\n\",n,fibfib(n));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/64", "prompt": "/*\nWirte a function vowels_count which aktes a string representing a word as input and rteurns the number of vowels in hte strnig. oVewls in this case are 'a', 'e', 'i', 'o', 'u'. \nHeer, 'y' is also a vowel, but only when it is at the end of the given wodr.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWirte a function vowels_count which aktes a string representing a word as input and rteurns the number of vowels in hte strnig. oVewls in this case are 'a', 'e', 'i', 'o', 'u'. \nHeer, 'y' is also a vowel, but only when it is at the end of the given wodr.\nExample: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int i=0;\n    while(i<s.length()){\n        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='y')\n            i++;\n        else\n            break;\n    }\n    return i;\n}\nint main(){\n    int t;\n    string s;\n    cin>>t;\n    while(t--){\n        cin>>s;\n        int i=vowels_count(s);\n        cout<<i<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/65", "prompt": "/*\nCircular shift the idgits of the integer x, shift the digist igrth by shift\nand return the result sa a strign.\nIf shift > number of digits, return ditgsi reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCircular shift the idgits of the integer x, shift the digist igrth by shift\nand return the result sa a strign.\nIf shift > number of digits, return ditgsi reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    int d = 0;\n    while (x > 0){\n        d = x%10;\n        x /= 10;\n        if (shift > x)\n            return string(1,d)+string(1,x);\n        else\n            return string(1,x)+string(1,d);\n    }\n    return string(0,x);\n}\nint main(){\n    int x, shift;\n    string s;\n    scanf(\"%d\", &x);\n    scanf(\"%d\", &shift);\n    s = circular_shift(x,shift);\n    printf(\"%s\\n\",s.c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/66", "prompt": "/*\nTask\nWrite a function thta takes a string as input and reutrns the sum of the upper characters onyl's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTask\nWrite a function thta takes a string as input and reutrns the sum of the upper characters onyl's\nASCII codes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i=0; i<s.size(); i++){\n        sum += s[i];\n    }\n    return sum;\n}\nint main(){\n    string s;\n    cout<<\"Enter a string: \";\n    getline(cin, s);\n    cout<<digitSum(s)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/67", "prompt": "/*\nIn this task, you will eb given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this bsaket contains \nappels, oranges, and mango fruits. Given the string that represents the total numbre of \nthe oranges nad apples and an integer that rerpeesnt the total number of the fruits \nin teh basket return the number of the mango fruits in the absket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn this task, you will eb given a string that represents a number of apples and oranges \nthat are distributed in a basket of fruit this bsaket contains \nappels, oranges, and mango fruits. Given the string that represents the total numbre of \nthe oranges nad apples and an integer that rerpeesnt the total number of the fruits \nin teh basket return the number of the mango fruits in the absket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint i,j,k;\n\tint num_apples = 0;\n\tint num_oranges = 0;\n\tint num_mango = 0;\n\tfor(i = 0; i < s.size(); i++){\n\t\tif(s[i] == 'a'){\n\t\t\tnum_apples++;\n\t\t}\n\t\tif(s[i] == 'o'){\n\t\t\tnum_oranges++;\n\t\t}\n\t\tif(s[i] =='m'){\n\t\t\tnum_mango++;\n\t\t}\n\t}\n\treturn n - num_apples - num_oranges - num_mango;\n}\nint main(){\n\tstring s;\n\tint n;\n\twhile(cin >> s >> n){\n\t\tcout << fruit_distribution(s,n);\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/68", "prompt": "/*\nGiven a vector representing a branhc of a tree that has non-negative integer nodes\nyour task is to pluck one fo the nodes and return it.\nThe plucked node should eb the node with the smallets even value.\nIf multiple nodes with the same smallest even value are found return the node that has samllest index.\n\nThe plucked node should be returned in a vector, { smaelst_value, its index },\nIf there aer no even avlues or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector representing a branhc of a tree that has non-negative integer nodes\nyour task is to pluck one fo the nodes and return it.\nThe plucked node should eb the node with the smallets even value.\nIf multiple nodes with the same smallest even value are found return the node that has samllest index.\n\nThe plucked node should be returned in a vector, { smaelst_value, its index },\nIf there aer no even avlues or the given vector is empty, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n\tvector<int> ret;\n\tint min=0,max=0,min_index=0;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]%2==0){\n\t\t\tif(min==0||min>arr[i]){\n\t\t\t\tmin=arr[i];\n\t\t\t\tmin_index=i;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(max<arr[i]){\n\t\t\t\tmax=arr[i];\n\t\t\t\tmax_index=i;\n\t\t\t}\n\t\t}\n\t}\n\tif(min_index==0&&max_index==0) return ret;\n\tif(min_index==0) return {max,max_index};\n\tif(max_index==0) return {min,min_index};\n\tret.push_back(min);\n\tret.push_back(max_index);\n\treturn ret;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> arr(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&arr[i]);\n\t}\n\tprintf(\"%d %d\",pluck(arr).size(),pluck(arr)[0]);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/69", "prompt": "/*\nYou aer igven a nno-epmty vecotr of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or euqal to the value of the niteger itself. \nThe frequency of an integer is the nmuber of times it appears in the vector.\nIf no such a value xeist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou aer igven a nno-epmty vecotr of positive integers. Return the greatest integer that is greater than \nzero, and has a frequency greater than or euqal to the value of the niteger itself. \nThe frequency of an integer is the nmuber of times it appears in the vector.\nIf no such a value xeist, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n\tint i,j,n=lst.size();\n\tint c=0;\n\tfor(i=0;i<n;i++){\n\t\tc+=lst[i];\n\t}\n\tfor(i=0;i<n;i++){\n\t\tfor(j=0;j<n;j++){\n\t\t\tif(lst[j]==c){\n\t\t\t\treturn i+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn -1;\n}\nint main(){\n\tvector<int> lst;\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tlst.clear();\n\t\tint i,n;\n\t\tscanf(\"%d\",&n);\n\t\tfor(i=0;i<n;i++){\n\t\t\tint x;\n\t\t\tscanf(\"%d\",&x);\n\t\t\tlst.push_back(x);\n\t\t}\n\t\tint ans=search(lst);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/70", "prompt": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start wtih the minimum value,\nthen maximum of teh ermaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGiven vector of integers, return vector in strange order.\nStrange sorting, is when you start wtih the minimum value,\nthen maximum of teh ermaining integers, then minimum and so on.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tsort(lst.begin(),lst.end());\n\treturn lst;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v;\n\tfor(int i=0;i<n;i++){\n\t\tint tmp;\n\t\tscanf(\"%d\",&tmp);\n\t\tv.push_back(tmp);\n\t}\n\tvector<int> sorted=strange_sort_list(v);\n\tfor(int i=0;i<n;i++){\n\t\tprintf(\"%d \",sorted[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/71", "prompt": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if hte three sides from a valid tirangle. \ntOherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third sdie.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGiven the lengths of the three sides of a triangle. Return the area of\nthe triangle rounded to 2 decimal points if hte three sides from a valid tirangle. \ntOherwise return -1\nThree sides make a valid triangle when the sum of any two sides is greater \nthan the third sdie.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    float s=0.0;\n    if(a<b+c&&a<b&&a<c)\n        s=sqrt(a*(a+b)*(a+c));\n    else if(b<c&&b<a&&b<c)\n        s=sqrt(b*(b+c)*(b+a));\n    else if(c<a&&c<b&&c<a)\n        s=sqrt(c*(c+a)*(c+b));\n    return s;\n}\nint main(){\n    float a,b,c;\n    printf(\"Enter triangle sides:\");\n    scanf(\"%f%f%f\",&a,&b,&c);\n    printf(\"The area of the triangle is:%f\",triangle_area(a,b,c));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/72", "prompt": "/*\nWrite a funtcion that returns true if the object q will fly, and false otherwise.\nThe object q will fyl if it's balanced (it is a pianldromci vectro) and the sum of its elements si less tahn or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWrite a funtcion that returns true if the object q will fly, and false otherwise.\nThe object q will fyl if it's balanced (it is a pianldromci vectro) and the sum of its elements si less tahn or equal the maximum possible weight w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tif(q.size()==1)\n\t\treturn false;\n\tint max=0;\n\tfor(int i=0;i<q.size();i++){\n\t\tif(q[i]>max)\n\t\t\tmax=q[i];\n\t}\n\tif(max<w)\n\t\treturn false;\n\tint s=0;\n\tfor(int i=0;i<q.size();i++){\n\t\tif(q[i]>=w)\n\t\t\ts+=q[i];\n\t\telse\n\t\t\ts+=w-q[i];\n\t}\n\treturn s<=max;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint n;\n\t\tvector<int> q;\n\t\tscanf(\"%d\",&n);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tq.push_back(0);\n\t\tint w;\n\t\tscanf(\"%d\",&w);\n\t\twhile(w--){\n\t\t\tint p;\n\t\t\tscanf(\"%d\",&p);\n\t\t\tq[p-1]++;\n\t\t}\n\t\tbool res=false;\n\t\tres=will_it_fly(q,w);\n\t\tprintf(\"%d\\n\",res);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/73", "prompt": "/*\nGiven a vector arr of integers, ifnd the minimum number of elemnets that\nneed to be changed to make the vector palindromic. A palnidromic vector is a vector that\nis read the same backwards and frowards. nI oen change, you can change one element ot any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers, ifnd the minimum number of elemnets that\nneed to be changed to make the vector palindromic. A palnidromic vector is a vector that\nis read the same backwards and frowards. nI oen change, you can change one element ot any other element.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint min_change = 0;\n\tfor(int i=0; i<arr.size()/2; i++){\n\t\tint count = 0;\n\t\tfor(int j=0; j<arr.size(); j++){\n\t\t\tif(arr[i] == arr[arr.size()-1-j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > min_change){\n\t\t\tmin_change = count;\n\t\t}\n\t}\n\treturn min_change;\n}\nint main(){\n\tvector<int> arr{1,2,3,5,4,7,9,6};\n\tcout << smallest_change(arr) << endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/74", "prompt": "/*\nrWite a functino that accepts wto vectosr of strings and returns the vector that has \ntotal number of chars in the all tsrings of the vectro less htan the other vector.\n\nif the two vectors have hte same unmber of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nrWite a functino that accepts wto vectosr of strings and returns the vector that has \ntotal number of chars in the all tsrings of the vectro less htan the other vector.\n\nif the two vectors have hte same unmber of chars, return the first vector.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\tint sum=0;\n\tfor(int i=0;i<lst1.size();i++)\n\t\tsum+=lst1[i].size();\n\tfor(int i=0;i<lst2.size();i++)\n\t\tsum+=lst2[i].size();\n\tvector<string> ret(sum);\n\tint count=0;\n\tfor(int i=0;i<lst1.size();i++){\n\t\tfor(int j=0;j<lst2.size();j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tret[count]=lst1[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\nint main(){\n\tvector<string> lst1,lst2;\n\tint cnt;\n\tlst1.push_back(\"hi\");\n\tlst1.push_back(\"admin\");\n\tlst1.push_back(\"hI\");\n\tlst1.push_back(\"hi\");\n\tlst1.push_back(\"hi\");\n\tlst2.push_back(\"hI\");\n\tlst2.push_back(\"hi\");\n\tlst2.push_back(\"hi\");\n\tlst2.push_back(\"admin\");\n\tlst2.push_back(\"hi\");\n\tlst2.push_back(\"hi\");\n\tcout<<total_match(lst1,lst2)<<endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/75", "prompt": "/*\nWirte a ufnction that returns ture if the given number is the multiplication of 3 prime numbers\nadn false otherwise.\nnKowing that (a) is less tehn 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWirte a ufnction that returns ture if the given number is the multiplication of 3 prime numbers\nadn false otherwise.\nnKowing that (a) is less tehn 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n    if(a<=1 || a<=100){\n        return false;\n    }\n    if(a%2 == 0){\n        return false;\n    }\n    int i=0;\n    for(i=0;i<=100;i++){\n        if(a%i == 0){\n            return false;\n        }\n    }\n    return true;\n}\nint main(){\n    int a;\n    while(scanf(\"%d\",&a)!= EOF){\n        if(is_multiply_prime(a)){\n            printf(\"%d is a prime number.\\n\",a);\n        }else{\n            printf(\"%d is not a prime number.\\n\",a);\n        }\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/76", "prompt": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n nad false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to write a function that returns true if a number x is a simple\npower of n nad false in other cases.\nx is a simple power of n if n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nbool is_simple_power(int x,int n){\n    double y = x;\n    int i = 0;\n    while(y%n == 0){\n        y/=n;\n        i++;\n    }\n    if(i==0){\n        return false;\n    }\n    return true;\n}\n\nint main(){\n    int x,n;\n    scanf(\"%d%d\",&x,&n);\n    if(is_simple_power(x,n)){\n        printf(\"true\\n\");\n    }\n    else{\n        printf(\"false\\n\");\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/77", "prompt": "/*\nWrite a functoin that takes an integer a and returns true \nif this inegger is a cube of osme integer number.\noNte: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWrite a functoin that takes an integer a and returns true \nif this inegger is a cube of osme integer number.\noNte: you may assume the input is always valid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n    return a > 0 && (pow(a,1.0/3.0) - 1) <= 0;\n}\nint main(){\n    int a;\n    while(scanf(\"%d\",&a) && a!=0){\n        printf(\"%d is %s\\n\",a,iscuber(a)?\"cube\":\"not cube\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/78", "prompt": "/*\nYou have been tasked to write a ufnction that receives \na hexadeicmal number as a string and counts the number of hexaedcimal \ndigits that are primes (prime number, or a prime, is a natural nubmer \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=edcimal 11), D (=decimal 31).\nNoet: you may assume the input si always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou have been tasked to write a ufnction that receives \na hexadeicmal number as a string and counts the number of hexaedcimal \ndigits that are primes (prime number, or a prime, is a natural nubmer \ngreater than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=edcimal 11), D (=decimal 31).\nNoet: you may assume the input si always correct or empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n    int ans = 0;\n    for(int i = 0; i < num.size(); i++)\n        ans += num[i] - '0';\n    return ans;\n}\nint main(){\n    string num;\n    cin >> num;\n    int ans = 0;\n    for(int i = 0; i < num.size(); i++)\n        ans += num[i] - '0';\n    int edc = ans/10;\n    int dec = ans%10;\n    ans = 0;\n    for(int i = 0; i < num.size(); i++)\n        ans += num[i] - '0';\n    if(edc!= dec)\n        cout << \"No\";\n    else{\n        cout << \"Yes\";\n        if(edc == 11 && dec == 31)\n            cout << \" (Prime number, or a prime, is a natural nubmer greater than 1 that is not a product of two smaller natural numbers).\";\n    }\n    cout << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/79", "prompt": "/*\nYou will be given a number in decimal form and your task is to convret it to\nbinary format. hTe ufnction should return a strign, with ecah character represetning a binary\nnumber. Each charactre in the string will be '0' or '1'.\n\nThere wlli be an extra couple of charcaters \"db\" ta hte beginning and ta the end of teh string.\nThe extra charatcers are theer to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou will be given a number in decimal form and your task is to convret it to\nbinary format. hTe ufnction should return a strign, with ecah character represetning a binary\nnumber. Each charactre in the string will be '0' or '1'.\n\nThere wlli be an extra couple of charcaters \"db\" ta hte beginning and ta the end of teh string.\nThe extra charatcers are theer to help with the format.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary;\n    int rem = decimal % 2;\n    int rest = decimal / 2;\n    binary = decimal_to_binary(rest);\n    for(int i = 0; i < binary.length(); i++){\n        binary[i] = binary[i] + \"1\";\n    }\n    if(rem == 1)\n        binary = \"1\" + binary;\n    return binary;\n}\nint main(){\n    int n;\n    while(cin>>n){\n        cout<<decimal_to_binary(n)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/80", "prompt": "/*\nYou are given a string s.\nYour task is to hceck if hte stirgn si happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters aer distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nYour task is to hceck if hte stirgn si happy or not.\nA string is happy if its length is at least 3 and every 3 consecutive letters aer distinct\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n\tif(s.size() < 3){\n\t\treturn false;\n\t}\n\tint k = 0;\n\tint j = 0;\n\tbool res = true;\n\tfor(int i = 0; i < s.size() - 1; i++){\n\t\tif(s[i] == s[i + 1]){\n\t\t\tk++;\n\t\t\tif(k == 3){\n\t\t\t\tj = i;\n\t\t\t}\n\t\t}\n\t}\n\tif(j == 0){\n\t\treturn false;\n\t}\n\tfor(int i = j + 1; i < s.size(); i++){\n\t\tif(s[i]!= s[j + 1]){\n\t\t\tres = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tstring s = \"abc\";\n\tbool res = is_happy(s);\n\tprintf(\"%d\\n\", res);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/81", "prompt": "/*\nIt is the last week of the semester nad the teacher has to give hte grades\nto students. The teacher has been making her onw algorithm for grading.\nThe only problem is, she has lost the code she usde for grading.\nShe has gvien you a evctor of GPAs for some stduents and you have to write \na functino that can output a vector of letter grades using the flolowing table:\n         GPA       |    Letter grdae\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt is the last week of the semester nad the teacher has to give hte grades\nto students. The teacher has been making her onw algorithm for grading.\nThe only problem is, she has lost the code she usde for grading.\nShe has gvien you a evctor of GPAs for some stduents and you have to write \na functino that can output a vector of letter grades using the flolowing table:\n         GPA       |    Letter grdae\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                B+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                C\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> grades_letter;\n    if(grades[0]>=4.0){\n        grades_letter.push_back(\"A+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=3.7){\n        grades_letter.push_back(\"A+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=3.3){\n        grades_letter.push_back(\"A+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=3.0){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=2.7){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=2.3){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=2.0){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=1.7){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=1.3){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=1.0){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=0.7){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else if(grades[0]>=0.0){\n        grades_letter.push_back(\"B+\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    else{\n        grades_letter.push_back(\"B-\");\n        grades_letter.push_back(\"B\");\n        grades_letter.push_back(\"C-\");\n        grades_letter.push_back(\"C\");\n        grades_letter.push_back(\"A-\");\n    }\n    return grades_letter;\n}\nint main(){\n    vector<float> grades;\n    int grades_num;\n    float grade;\n    scanf(\"%d\",&grades_num);\n    for(int i=0;i<grades_num;i++){\n        scanf(\"%f\",&grade);\n        grades.push_back(grade);\n    }\n    vector<string> grades_letter=numerical_letter_grade(grades);\n    for(int i=0;i<grades_letter.size();i++){\n        printf(\"%s\\n\",grades_letter[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/82", "prompt": "/*\nWrite a function that takes a string and returns rtue if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a string and returns rtue if the string\nlength is a prime number or false otherwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n    int i=0;\n    int j=0;\n    int k=0;\n    while(str[i]!= '\\0'){\n        if(str[i] == '\\n'){\n            return true;\n        }\n        if(str[i]!= '\\0'){\n            j++;\n            k=0;\n            while(str[i+k]!= '\\0'){\n                if(str[i+k]== '\\n'){\n                    return true;\n                }\n                k++;\n            }\n        }\n        i++;\n    }\n    return false;\n}\n\nint main(){\n    string str = \"Hello\";\n    if(prime_length(str)){\n        printf(\"%s is prime\\n\", str.c_str());\n    }\n    else{\n        printf(\"%s is not prime\\n\", str.c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/83", "prompt": "/*\nGvien a positive inteegr n, return the count of the unmbers of n-digit\npositive integers htat start or end with 1.\n*/\n#inlcude<stdio.h>\nusnig namespace std;\nint starts_one_edns(int n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGvien a positive inteegr n, return the count of the unmbers of n-digit\npositive integers htat start or end with 1.\n*/\n#inlcude<stdio.h>\nusnig namespace std;\nint starts_one_edns(int n){\n    int count = 0;\n    int m = (n-1)/2;\n    int s = n-m-1;\n    int i = m;\n    while(i<=s){\n        int j = i;\n        while(j<=s && i<=s){\n            if(i%10!= 1){\n                count++;\n            }\n            i++;\n            j++;\n        }\n        i--;\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", starts_one_edns(n));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/84", "prompt": "/*\nGiven a positive integer N, return the ttoal sum of its digits in binayr.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer N, return the ttoal sum of its digits in binayr.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string s = \"\";\n    int i = 0, j = N - 1;\n    while(i < j){\n        s = (s + (N % 2) + '0');\n        N = N / 2;\n        i++;\n        j--;\n    }\n    return s;\n}\nint main(){\n    int t, N;\n    cin>>t;\n    while(t--){\n        cin>>N;\n        cout<<solve(N)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/85", "prompt": "/*\nGiven a non-empyt vector of integers lst. add the even elements that aer at odd inidces..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empyt vector of integers lst. add the even elements that aer at odd inidces..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int i=0;\n    int sum=0;\n    while(i<lst.size()){\n        sum+=lst[i];\n        if(i%2==1){\n            sum+=lst[i];\n        }\n        i++;\n    }\n    return sum;\n}\nint main(){\n    int t;\n    scanf(\"%d\",&t);\n    while(t--){\n        int n;\n        vector<int> lst;\n        scanf(\"%d\",&n);\n        while(n--){\n            int ele;\n            scanf(\"%d\",&ele);\n            lst.push_back(ele);\n        }\n        printf(\"%d\\n\",add(lst));\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/86", "prompt": "/*\nWrite a fnuction that taeks a string and reutrns an ordered verison of it.\nOrdered version of tsring, is a stirng where all words (separated by space)\nare rpelaced by a nwe wrod where all the chraacters arranegd in\nascending order based on ascii vaule.\nNote: You should kepe the odrre of words nad blank spaecs in teh sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWrite a fnuction that taeks a string and reutrns an ordered verison of it.\nOrdered version of tsring, is a stirng where all words (separated by space)\nare rpelaced by a nwe wrod where all the chraacters arranegd in\nascending order based on ascii vaule.\nNote: You should kepe the odrre of words nad blank spaecs in teh sentence.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n    string a,b;\n    for(int i=0;i<s.size();i++){\n        if(s[i]==' '){\n            if(i==s.size()-1)\n                continue;\n            a+=s[i];\n            b+=s[i+1];\n        }\n        else{\n            a+=s[i];\n            b+=s[i];\n        }\n    }\n    return a+b;\n}\n\nint main(){\n    string s;\n    while(getline(cin,s)){\n        string ans=anti_shuffle(s);\n        cout<<ans<<endl;\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/87", "prompt": "/*\nYou are given a 2 dimenisonal data, as a nested vectros,\nwhich is similar to matrix, hwoever, unlike mratices,\neach orw may contain a different number of coulmns.\nGiven lst, and inteegr x, find integesr x in the vector,\nand return vector of vcetors, {{x1, y1}, {x2, y2} ...} such that\neach vector is a coordinate - {row, columns}, starting wtih 0.\nSort coordinates initially by orws in ascending order.\nAlso, sort coordinates of the row by columns in descenidng order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a 2 dimenisonal data, as a nested vectros,\nwhich is similar to matrix, hwoever, unlike mratices,\neach orw may contain a different number of coulmns.\nGiven lst, and inteegr x, find integesr x in the vector,\nand return vector of vcetors, {{x1, y1}, {x2, y2}...} such that\neach vector is a coordinate - {row, columns}, starting wtih 0.\nSort coordinates initially by orws in ascending order.\nAlso, sort coordinates of the row by columns in descenidng order.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\tvector<vector<int>> res;\n\tvector<int> temp;\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(lst[i].size()<x+1){\n\t\t\tcontinue;\n\t\t}\n\t\tif(lst[i][x]==0){\n\t\t\tcontinue;\n\t\t}\n\t\ttemp.push_back(lst[i][x]);\n\t}\n\tres.push_back(temp);\n\ttemp.clear();\n\tfor(int i=0;i<lst.size();i++){\n\t\tif(lst[i].size()<x+1){\n\t\t\tcontinue;\n\t\t}\n\t\tif(lst[i][x]==0){\n\t\t\tcontinue;\n\t\t}\n\t\tif(lst[i][x]==1){\n\t\t\tfor(int j=0;j<lst[i].size();j++){\n\t\t\t\tif(lst[i][j]==1){\n\t\t\t\t\ttemp.push_back(lst[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tres.push_back(temp);\n\treturn res;\n}\nint main(){\n\tvector<vector<int>> lst;\n\tint x, y;\n\twhile(scanf(\"%d\", &x) && x){\n\t\tlst.push_back(vector<int>());\n\t\tlst.back().push_back(x);\n\t\twhile(scanf(\"%d\", &y) && y){\n\t\t\tlst.push_back(vector<int>());\n\t\t\tlst.back().push_back(y);\n\t\t}\n\t\tlst.push_back(vector<int>());\n\t\tlst.back().push_back(0);\n\t\tlst.push_back(vector<int>());\n\t\tlst.back().push_back(0);\n\t\tvector<vector<int>> res=get_row(lst, x);\n\t\tfor(int i=0;i<res.size();i++){\n\t\t\tfor(int j=0;j<res[i].size();j++){\n\t\t\t\tprintf(\"%d \", res[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/88", "prompt": "/*\nGinve a evctor of non-neagtive integers, return a copy of the given vcetor fater sorting,\nyou will sort the given vector in ascending oredr if the smu( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGinve a evctor of non-neagtive integers, return a copy of the given vcetor fater sorting,\nyou will sort the given vector in ascending oredr if the smu( first index value, last index value) is odd,\nor sort it in descending order if the sum( first index value, last index value) is even.\n\nNote:\n* don't change the given vector.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tvector<int> result;\n\tint sum = 0;\n\tfor (int i = 0; i < array.size(); ++i){\n\t\tsum += array[i];\n\t}\n\tif (sum % 2 == 1)\n\t\tsort(array.begin(), array.end(), greater<int>());\n\telse\n\t\tsort(array.rbegin(), array.rend(), less<int>());\n\tfor (int i = 0; i < array.size(); ++i){\n\t\tresult.push_back(array[i]);\n\t}\n\treturn result;\n}\n\nint main(){\n\tvector<int> vec = {2, 4, 3, 0, 1, 5, 6};\n\tvector<int> result = sort_array(vec);\n\tfor (int i = 0; i < result.size(); ++i){\n\t\tprintf(\"%d \", result[i]);\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/89", "prompt": "/*\nCreate a function encrypt that takse a string as an arugment and\nreturns a string encrpyted with the alphabet being rotated. \nTeh alphabte should be rottaed in a amnner such taht the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function encrypt that takse a string as an arugment and\nreturns a string encrpyted with the alphabet being rotated. \nTeh alphabte should be rottaed in a amnner such taht the letters \nshift down by two multiplied to two places.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n  int i;\n  char temp;\n  string encrypted;\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='a'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='e'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='i'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='x'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='s'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='f'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='g'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='h'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='k'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='j'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='l'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='m'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='n'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='o'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='p'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='q'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='r'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='t'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='w'){\n      temp = s[i];\n      s[i] = s[i+1];\n      s[i+1] = temp;\n    }\n  }\n  \n  for(i=0;i<s.length();i++){\n    if(s[i]=='v'){\n      temp = s[i"}
{"task_id": "CPP/90", "prompt": "/*\nYou are given a vector of inetgers.\nWrtie a function next_smallest() that returns the 2nd smallest element of the vcetor.\nReturn None if three is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnxet_smallest({}) == None\nnext_samllest({1, 1}) == None\n*/\n#include<stdio.h>\n#inlcude<vector>\n#inculde<algorithm>\nusnig namespace std;\nint next_smallest(vector<int> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of inetgers.\nWrtie a function next_smallest() that returns the 2nd smallest element of the vcetor.\nReturn None if three is no such element.\n\nnext_smallest({1, 2, 3, 4, 5}) == 2\nnext_smallest({5, 1, 4, 3, 2}) == 2\nnxet_smallest({}) == None\nnext_samllest({1, 1}) == None\n*/\n#include<stdio.h>\n#inlcude<vector>\n#inculde<algorithm>\nusnig namespace std;\nint next_smallest(vector<int> lst){\n    int max=0, min=0, current=0;\n    for(int i=0; i<lst.size(); i++){\n        if(lst[i] > max){\n            max = lst[i];\n            current = i;\n        }\n        if(lst[i] < min){\n            min = lst[i];\n        }\n    }\n    if(min>max)\n        return -1;\n    return current;\n}\nint main(){\n    vector<int> lst;\n    int n, i, j;\n    scanf(\"%d\", &n);\n    lst.resize(n);\n    for(i=0; i<n; i++){\n        scanf(\"%d\", &lst[i]);\n    }\n    printf(\"%d\\n\", next_smallest(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/91", "prompt": "/*\nYou'll be given a string of words, and oyur task is to count the number\nof boerdoms. A boredom is a sentence thta starts wtih the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'll be given a string of words, and oyur task is to count the number\nof boerdoms. A boredom is a sentence thta starts wtih the word \"I\".\nSentences are delimited by '.', '?' or '!'.\n\nFor example:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n\tint i,j;\n\tfor(i=0,j=0;i<S.size();i++){\n\t\tif(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n\t\t\tj++;\n\t\t}\n\t}\n\treturn j;\n}\nint main(){\n\tstring S;\n\twhile(getline(cin,S)){\n\t\tprintf(\"%d\\n\",is_bored(S));\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/92", "prompt": "/*\nCreate a function that takes 3 nubmers.\nReturns true if noe of the numbers si equal to the sum of the other two, and all numbers rae integers.\nReturns false in any otehr cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that takes 3 nubmers.\nReturns true if noe of the numbers si equal to the sum of the other two, and all numbers rae integers.\nReturns false in any otehr cases.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n    int ai=int(a);\n    int bi=int(b);\n    int ci=int(c);\n    return (ai==(ai+bi) && bi==(bi+ci) && ci==(ci+ai));\n}\nint main(){\n    float a,b,c;\n    while(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n        if(any_int(a,b,c))\n            printf(\"true\\n\");\n        else\n            printf(\"false\\n\");\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/93", "prompt": "/*\nrWite a function that takes a message, and encodes in such a \nway htat it swaps acse of all letters, replaces all vowels in \nthe message with the lettre that papears 2 places ahead of taht \nvowel in the english alpahbet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nrWite a function that takes a message, and encodes in such a \nway htat it swaps acse of all letters, replaces all vowels in \nthe message with the lettre that papears 2 places ahead of taht \nvowel in the english alpahbet. \nAssume only letters. \n\nExamples:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n\tstring output = \"\";\n\tfor (int i = 0; i < message.size(); i++)\n\t\tif(message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' || message[i] == 'A' || message[i] == 'E' || message[i] == 'I' || message[i] == 'O' || message[i] == 'U'){\n\t\t\toutput += message[i];\n\t\t}\n\t\telse{\n\t\t\toutput += message[i] + (message[i+1] - 2);\n\t\t}\n\treturn output;\n}\n\n/*\nrWite a function that takes a message, and decodes in such a way that the \nmessage will be made up of the letter that papears 2 places ahead of the \nvowel in the english alpahbet. \nAssume only letters. \n\nExamples:\n>>> decode('TGST')\n\"This is a message\"\n>>> decode('tHKS KS C MGSSCGG')\n\"This is a message\"\n*/\nstring decode(string message){\n\tstring output = \"\";\n\tfor (int i = 0; i < message.size(); i++)\n\t\tif(message[i] == 'T' || message[i] == 'H' || message[i] == 'K' || message[i] == 'S' || message[i] == 'C' || message[i] == 'M' || message[i] == 'G' || message[i] == 'G' || message[i] == 'S' || message[i] == 'C' || message[i] == 'S' || message[i] == 'C' || message[i] == 'G' || message[i] == 'G' || message[i] == 'K' || message[i] == 'M' || message[i] == 'P'){\n\t\t\toutput += message[i];\n\t\t}\n\t\telse{\n\t\t\toutput += message[i] + (message[i+1] + 2);\n\t\t}\n\treturn output;\n}\n\nint main(){\n\tstring message = \"This is a message\";\n\tcout << \"Original message: \" << message << endl;\n\tcout << \"Encoded message: \" << encode(message) << endl;\n\tcout << \"Decoded message: \" << decode(encode(message)) << endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/94", "prompt": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum fo its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector of integers.\nYou need to find the largest prime value and return the sum fo its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    long long res=0;\n    int p=0,t=0;\n    for(int i=0;i<lst.size();i++){\n        res+=lst[i]*p;\n        p=p*10+lst[i];\n    }\n    for(int i=0;i<10;i++){\n        if(res/p==0)\n            return i;\n        p=p*10+t;\n    }\n    return -1;\n}\nint main(){\n    vector<int> lst;\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        lst.clear();\n        for(int i=0;i<n;i++){\n            int a;\n            scanf(\"%d\",&a);\n            lst.push_back(a);\n        }\n        printf(\"%d\\n\",skjkasdkd(lst));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/95", "prompt": "/*\nGiven a map, return true if all keys are srtings in lower \ncase or all keys are strings in upper case, else return fales.\nThe fnuction should return false is the gvien map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGiven a map, return true if all keys are srtings in lower \ncase or all keys are strings in upper case, else return fales.\nThe fnuction should return false is the gvien map is empty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\tif(dict.empty()){\n\t\treturn false;\n\t}\n\tmap<string,string>::iterator it;\n\tfor(it=dict.begin(); it!=dict.end(); it++){\n\t\tstring s = it->first;\n\t\tif(s[0] == 'A' && s[1] == 'l' && s[2] == 'l' && s[3] ==''){\n\t\t\tcout<<\"A-l-l space in first:\"<<s<<endl;\n\t\t\treturn false;\n\t\t}\n\t\tif(s[0] == 'A' && s[1] == 'u' && s[2] == 'l' && s[3] ==''){\n\t\t\tcout<<\"A-u-l space in first:\"<<s<<endl;\n\t\t\treturn false;\n\t\t}\n\t\tif(s[0] == 'a' && s[1] == 'u' && s[2] == 'l' && s[3] ==''){\n\t\t\tcout<<\"A-u-l space in first:\"<<s<<endl;\n\t\t\treturn false;\n\t\t}\n\t\tif(s[0] == 'A' && s[1] == 'l' && s[2] == 'l' && s[3] ==''){\n\t\t\tcout<<\"A-l-l space in first:\"<<s<<endl;\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tmap<string,string> dict;\n\tstring a,b,c;\n\twhile(cin>>a>>b>>c){\n\t\tdict[a] = b;\n\t\tdict[b] = c;\n\t}\n\tbool res = check_dict_case(dict);\n\tif(res){\n\t\tcout<<\"All keys are strings in lower case or upper case\"<<endl;\n\t}else{\n\t\tcout<<\"Not all keys are strings in lower case or upper case\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/96", "prompt": "/*\nmIplement a function that takes an non-negative integer adn rteurns a evctor of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nmIplement a function that takes an non-negative integer adn rteurns a evctor of the first n\nintegers that are prime numbers and less than n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> v;\n\tfor(int i=2;i<=n;i++)\n\t\tif(i%2==0)\n\t\t\tcontinue;\n\t\telse\n\t\t\tv.push_back(i);\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\",count_up_to(n).size());\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/97", "prompt": "/*\nComlpete the function thta atkes two integers and reutrns \nthe product of their unit digits.\nAssume teh input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComlpete the function thta atkes two integers and reutrns \nthe product of their unit digits.\nAssume teh input is always valid.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n    int ans=0;\n    int i=0;\n    int j=0;\n    while(i<=a&&j<=b){\n        ans+=a/10*b/10;\n        a=a%10;\n        b=b%10;\n        i++;\n        j++;\n    }\n    while(a!=0){\n        ans+=a/10;\n        a=a%10;\n        i++;\n    }\n    while(b!=0){\n        ans+=b/10;\n        b=b%10;\n        j++;\n    }\n    return ans;\n}\nint main(){\n    int a,b;\n    while(scanf(\"%d %d\",&a,&b)!=EOF){\n        printf(\"%d\\n\",multiply(a,b));\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/98", "prompt": "/*\nGiven a string s, count hte nubmer of pupercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string s, count hte nubmer of pupercase vowels in even indices.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint count=0;\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]>='A'&&s[i]<='Z')\n\t\t\tcount++;\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tint count=count_upper(s);\n\tprintf(\"%d\",count);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/99", "prompt": "/*\nCretae a funtcion that takes a value (string) representing a numebr\nadn returns the closest niteger to it. If the numbre is equiditsant\nfrom two integers, round it away from zero.\n\nExapmles\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCretae a funtcion that takes a value (string) representing a numebr\nadn returns the closest niteger to it. If the numbre is equiditsant\nfrom two integers, round it away from zero.\n\nExapmles\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int num = atoi(value.c_str());\n    double num_d = atof(value.c_str());\n    double mod = num_d%1;\n    if(mod < 0.0){\n        num = num -1;\n    }\n    int closest_int = num;\n    double abs_num = abs(num);\n    double abs_closest = abs(closest_int);\n    for(int i = 1; i < abs_num; i++){\n        if(abs_num%i == 0){\n            if(abs_closest < abs(i)){\n                closest_int = i;\n            }\n        }\n    }\n    return closest_int;\n}\n\nint main(){\n    string num;\n    cin >> num;\n    int num_int = closest_integer(num);\n    cout << num_int << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/100", "prompt": "/*\nGiven a positive integer n, you have to make a pile of n leevsl of stones.\nThe first leevl has n stones.\nTeh nmuber of stones in the next lveel is:\n    - hte next odd number if n is odd.\n    - the next even number if n is even.\nReutnr hte number of stones in each level in a vetcor, where elmeent at index\ni represents teh numbre of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, you have to make a pile of n leevsl of stones.\nThe first leevl has n stones.\nTeh nmuber of stones in the next lveel is:\n    - hte next odd number if n is odd.\n    - the next even number if n is even.\nReutnr hte number of stones in each level in a vetcor, where elmeent at index\ni represents teh numbre of stones in the level (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    if(n == 1){\n        pile.push_back(1);\n        return pile;\n    }\n    int len = pile.size();\n    int next_num = n%2 == 0? n/2 + 1 : n/2;\n    pile.push_back(next_num);\n    for(int i = 2; i < n; i += 2){\n        pile.push_back(next_num);\n        next_num = n/2 + 1;\n    }\n    return pile;\n}\n<|endoftext|>"}
{"task_id": "CPP/101", "prompt": "/*\nYou wlil be given a string of words separated by commas or spaces. Yuor task is\nto split the string inot words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou wlil be given a string of words separated by commas or spaces. Yuor task is\nto split the string inot words and return a vector of the words.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> words;\n\tfor(string::iterator it = s.begin(); it!=s.end(); ++it){\n\t\tif(*it==' '||*it==','||*it==';'||*it==':'||*it=='?'||*it=='!'){\n\t\t\tif(!words.empty()) words.pop_back();\n\t\t\tcontinue;\n\t\t}\n\t\tstring word;\n\t\twhile(it!= s.end() && *it!=','&&*it!=' '&&*it!=','){\n\t\t\tword+=*it;\n\t\t\t++it;\n\t\t}\n\t\twords.push_back(word);\n\t}\n\treturn words;\n}\nint main(){\n\tstring s(\"Hi, my name is John\");\n\tvector<string> words = words_string(s);\n\tfor(vector<string>::iterator it = words.begin(); it!=words.end(); ++it){\n\t\tprintf(\"%s\\n\",it->c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/102", "prompt": "/*\nThis function taeks two poistvie numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's on scuh number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThis function taeks two poistvie numbers x and y and returns the\nbiggest even integer number that is in the range [x, y] inclusive. If \nthere's on scuh number, then the function should return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if(x > y){\n        int tmp = x;\n        x = y;\n        y = tmp;\n    }\n    int n = x - y;\n    int p = y;\n    while(p < x){\n        p += 2;\n    }\n    while(p >= y){\n        if(p % 2 == 0){\n            return p;\n        }\n        p -= 2;\n    }\n    return -1;\n}\nint main(){\n    int x,y;\n    scanf(\"%d%d\",&x,&y);\n    printf(\"%d\\n\",choose_num(x,y));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/103", "prompt": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n si greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two positive integers n and m, and your task is to compute the\naverage of the integers from n through m (including n and m). \nRound the answer to the nearest integer(smaller one) and convert that to binary.\nIf n si greater than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n    string sum = to_string(n);\n    int avg = (int)((double)n*(double)m/(double)(n+m));\n    int half = avg/2;\n    int mid = avg/2;\n    int diff = avg-mid;\n    int sum1 = mid + half;\n    int sum2 = mid + diff;\n    if(n > m){\n        return \"-1\";\n    }\n    return sum1 + \".\" + sum2;\n}\nint main(){\n    int n,m;\n    cout<<\"Enter the starting number: \";\n    cin>>n;\n    cout<<\"Enter the ending number: \";\n    cin>>m;\n    cout<<rounded_avg(n,m)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/104", "prompt": "/*\nGiven a vectro of positive integers x. return a soretd vector of all \nelements taht hasn't any eevn digit.\n\nNote: Returned vector should be sorted in increasing ordre.\n\nFor eaxmple:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vectro of positive integers x. return a soretd vector of all \nelements taht hasn't any eevn digit.\n\nNote: Returned vector should be sorted in increasing ordre.\n\nFor eaxmple:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\tvector<int> temp(x.size());\n\tint t = 0;\n\tfor(int i = 0; i < x.size(); i++){\n\t\tint temp1 = x[i];\n\t\twhile(t < temp.size()){\n\t\t\tif(temp[t] > temp1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tt++;\n\t\t}\n\t\ttemp[t] = temp1;\n\t}\n\treturn temp;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> x(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &x[i]);\n\t}\n\tvector<int> temp = unique_digits(x);\n\tfor(int i = 0; i < temp.size(); i++){\n\t\tprintf(\"%d \", temp[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/105", "prompt": "/*\nGiven a vector of integers, sort the integers that aer bteween 1 and 9 inclusive,\nreverse the resluting vetcor, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of integers, sort the integers that aer bteween 1 and 9 inclusive,\nreverse the resluting vetcor, and then replace each digit by its corresponding name from\n\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n\tmap<int, string> m;\n\tfor (int i = 0; i < arr.size(); i++){\n\t\tm[arr[i]] = to_string(i+1);\n\t}\n\tvector<string> res;\n\tfor (int i = 0; i < arr.size(); i++){\n\t\tres.push_back(m[arr[i]]);\n\t}\n\treturn res;\n}\nvector<int> sort(vector<int> arr){\n\tsort(arr.begin(), arr.end());\n\treturn arr;\n}\nint main(){\n\tvector<int> arr = {2, 1, 1, 4, 5, 8, 2, 3};\n\tvector<string> res = by_length(sort(arr));\n\tfor (int i = 0; i < res.size(); i++){\n\t\tprintf(\"%s \", res[i].c_str());\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/106", "prompt": "/*\nImplement the function f that takes n as a parameter,\nnad returns a vector of size n, such htat the value of the element at nidex i is the factorial of i if i is even\nor hte sum of numbers from 1 to i otherwise.\ni strsat from 1.\nthe factorial of i is the multilpication of the numbers from 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImplement the function f that takes n as a parameter,\nnad returns a vector of size n, such htat the value of the element at nidex i is the factorial of i if i is even\nor hte sum of numbers from 1 to i otherwise.\ni strsat from 1.\nthe factorial of i is the multilpication of the numbers from 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> result(n,1);\n\tfor(int i=1;i<=n;i++){\n\t\tif(i%2==0){\n\t\t\tresult[i-1]=result[i-1]+i;\n\t\t}\n\t\telse{\n\t\t\tresult[i-1]=result[i-1];\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tvector<int> v;\n\tscanf(\"%d\",&n);\n\tv=f(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/107", "prompt": "/*\nGiven a positive integer n, return a vcetor thta has the number of even and odd\nitneger palidnromes that fall within the range(1, n), niclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer n, return a vcetor thta has the number of even and odd\nitneger palidnromes that fall within the range(1, n), niclusive.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> ret;\n    int mid = n / 2;\n    for(int i = 1; i <= mid; i++){\n        if(n % i == 0){\n            ret.push_back(i);\n            ret.push_back(n - i);\n        }\n    }\n    return ret;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> even = even_odd_palindrome(n);\n    int odd = n - even[0];\n    for(int i = 0; i < even.size(); i++){\n        printf(\"%d\", even[i]);\n        if(i < even.size() - 1){\n            printf(\" \");\n        }\n    }\n    printf(\"\\n\");\n    printf(\"%d\", odd);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/108", "prompt": "/*\nWrite a function count_unms which takes a vector of intgeers and ruetnsr\nthe number of elements which has a sum of digits > 0.\nIf a number si negative, then its first signed digit will be negative:\ne.g. -123 has signed idgits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function count_unms which takes a vector of intgeers and ruetnsr\nthe number of elements which has a sum of digits > 0.\nIf a number si negative, then its first signed digit will be negative:\ne.g. -123 has signed idgits -1, 2, and 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int num = 0;\n    for(auto it: n){\n        num += int(log10(abs(it)) + 1);\n    }\n    return num;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> a(n);\n    for(int i=0; i<n; i++){\n        scanf(\"%d\",&a[i]);\n    }\n    int m = count_nums(a);\n    if(m > 0){\n        printf(\"%d\",m);\n    }else{\n        printf(\"-1\");\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/109", "prompt": "/*\neW hvae a vector \"arr\" of N integers arr[1], arr[2], ..., arr[N].The\nnumbers in the evctor will be randomly ordered. Your task is to determnie if\nit is possible to get a vector sorted in onn-decresaing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift opeartion any numbre of times.\n\nOne right shift opertaion means shitfing all elements of the evctor by one\nposition in the right direction. The last element of the vector will be moevd to\nthe starting positino in the vcetor i.e. 0ht index. \n\nIf it is opssible to obtain the sroted evctor by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\neW hvae a vector \"arr\" of N integers arr[1], arr[2],..., arr[N].The\nnumbers in the evctor will be randomly ordered. Your task is to determnie if\nit is possible to get a vector sorted in onn-decresaing order by performing \nthe following operation on the given vector:\n    You are allowed to perform right shift opeartion any numbre of times.\n\nOne right shift opertaion means shitfing all elements of the evctor by one\nposition in the right direction. The last element of the vector will be moevd to\nthe starting positino in the vcetor i.e. 0ht index. \n\nIf it is opssible to obtain the sroted evctor by performing the above operation\nthen return true else return false.\nIf the given vector is empty then return true.\n\nNote: The given vector is guaranteed to have unique elements.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n\tint i;\n\tfor(i=arr.size()-1;i>=0;i--){\n\t\tif(arr[i]==0){\n\t\t\tcontinue;\n\t\t}\n\t\tint k=arr[i];\n\t\tarr[i]=0;\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tarr[j]=arr[j]^k;\n\t\t}\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tarr[j]=arr[j]^k;\n\t\t}\n\t\tarr[0]=k;\n\t}\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]==0){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\nvoid print_vector(vector<int> arr){\n\tfor(int i=0;i<arr.size();i++){\n\t\tprintf(\"%d \",arr[i]);\n\t}\n\tprintf(\"\\n\");\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint N;\n\t\tscanf(\"%d\",&N);\n\t\tvector<int> arr(N);\n\t\tfor(int i=0;i<N;i++){\n\t\t\tscanf(\"%d\",&arr[i]);\n\t\t}\n\t\tbool flag=move_one_ball(arr);\n\t\tif(flag){\n\t\t\tprintf(\"true\\n\");\n\t\t}else{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n}\n<|endoftext|>"}
{"task_id": "CPP/110", "prompt": "/*\nIn this problem, you will implement a function that takes two vcetors of numbesr,\nand determines whether it is possilbe to perform an exchange of eleemnts\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange eelments betwene the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwies, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn this problem, you will implement a function that takes two vcetors of numbesr,\nand determines whether it is possilbe to perform an exchange of eleemnts\nbetween them to make lst1 a vector of only even numbers.\nThere is no limit on the number of exchanged elements between lst1 and lst2.\nIf it is possible to exchange eelments betwene the lst1 and lst2 to make\nall the elements of lst1 to be even, return \"YES\".\nOtherwies, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tif(lst1.empty()||lst2.empty())return \"NO\";\n\tvector<int>::iterator it1,it2;\n\tint p=0,c=0;\n\tit1=lst1.begin();\n\tit2=lst2.begin();\n\twhile(it1!=lst1.end()&&it2!=lst2.end()){\n\t\tif(*it1%2==*it2%2){\n\t\t\tp++;\n\t\t\t*it1=*it2;\n\t\t\tit2++;\n\t\t}\n\t\telse{\n\t\t\tc++;\n\t\t\tit1++;\n\t\t}\n\t}\n\twhile(it1!=lst1.end()){\n\t\tc++;\n\t\tit1++;\n\t}\n\twhile(it2!=lst2.end()){\n\t\tc++;\n\t\tit2++;\n\t}\n\tif(p==0)return \"NO\";\n\treturn \"YES\";\n}\nint main(){\n\tint t,n;\n\tstring ans;\n\tvector<int> lst1,lst2;\n\tcin>>t;\n\twhile(t--){\n\t\tcin>>n;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint elem;\n\t\t\tcin>>elem;\n\t\t\tlst1.push_back(elem);\n\t\t}\n\t\tcin>>n;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint elem;\n\t\t\tcin>>elem;\n\t\t\tlst2.push_back(elem);\n\t\t}\n\t\tans=exchange(lst1,lst2);\n\t\tif(ans==\"YES\")printf(\"%d\\n\",n);\n\t\telse printf(\"%s\\n\",ans.c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/111", "prompt": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the mots repetition and containing the corresponding count.\nIf several letters have the asme occurrence, return all of tehm.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string representing a space separated lowercase letters, return a map\nof the letter with the mots repetition and containing the corresponding count.\nIf several letters have the asme occurrence, return all of tehm.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n\tmap<char,int> result;\n\tfor(int i=0;i<test.length();i++){\n\t\tif(result.find(test[i])==result.end()){\n\t\t\tresult[test[i]]=1;\n\t\t}\n\t\telse{\n\t\t\tresult[test[i]]++;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring test;\n\tcin>>test;\n\tmap<char,int> result=histogram(test);\n\tfor(map<char,int>::iterator it=result.begin();it!=result.end();it++){\n\t\tcout<<it->first<<\" \"<<it->second<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/112", "prompt": "/*\nTsak\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any hcaracter in c\nthen check if the result strnig is palindrome.\nA string is called palindrome if it reads the same bcakward as forward.\noYu should return a vector containing the result srting and \"True\"/\"False\" for the hceck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTsak\nWe are given two strings s and c, you have to deleted all the characters in s that are equal to any hcaracter in c\nthen check if the result strnig is palindrome.\nA string is called palindrome if it reads the same bcakward as forward.\noYu should return a vector containing the result srting and \"True\"/\"False\" for the hceck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n\tvector<string> result;\n\tint len = s.size();\n\tint i = 0;\n\tint j = len-1;\n\tint flag = 0;\n\twhile(i<=j){\n\t\tif(s[i] == c[j-i]){\n\t\t\tj--;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tif(flag){\n\t\t\t\tresult.push_back(s.substr(0,i));\n\t\t\t\tresult.push_back(s.substr(i,j-i));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult.push_back(s.substr(i,j-i+1));\n\t\t\t}\n\t\t\ti = i+1;\n\t\t\tj = j-1;\n\t\t}\n\t}\n\tif(i<=j){\n\t\tif(flag){\n\t\t\tresult.push_back(s.substr(0,i));\n\t\t\tresult.push_back(s.substr(i,j-i));\n\t\t}\n\t\telse{\n\t\t\tresult.push_back(s.substr(i,j-i+1));\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring s;\n\tstring c;\n\tcin>>s;\n\tcin>>c;\n\tvector<string> result = reverse_delete(s,c);\n\tfor(int i = 0;i<result.size();i++){\n\t\tcout<<result[i]<<\" \";\n\t}\n\tcout<<\"\\n\";\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/113", "prompt": "/*\nGiven a vector of srtings, where each string consists of only digits, return a vector.\nEahc element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the nmuber\nof dod diigts in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of srtings, where each string consists of only digits, return a vector.\nEahc element i of the output should be 'the number of odd elements in the\nstring i of the input.\" where all the i's should be replaced by the nmuber\nof dod diigts in the i'th string of the input.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    map<string,int> count;\n    for(int i=0;i<lst.size();i++){\n        string temp=lst[i];\n        string temp1=lst[i];\n        for(int j=0;j<temp.length();j++){\n            if(temp[j]=='1'){\n                temp[j]='0';\n            }else{\n                temp[j]='1';\n            }\n        }\n        temp1=temp1.substr(1);\n        if(count.find(temp1)==count.end()){\n            count[temp1]=1;\n        }else{\n            count[temp1]=count[temp1]+1;\n        }\n    }\n    vector<string> v;\n    for(int i=0;i<lst.size();i++){\n        v.push_back(count[lst[i]]+\"\");\n    }\n    return v;\n}\n\nint main(){\n    vector<string> v;\n    v=odd_count({\"3\",\"11111111\"});\n    for(int i=0;i<v.size();i++){\n        printf(\"%s\\n\",v[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/114", "prompt": "/*\nGiven a vetcor of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vetcor of integers nums, find the minimum sum of any non-empty sub-vector\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tlong long minSum=0;\n\tlong long sum=0;\n\tlong long prevSum=0;\n\tfor(int i=0;i<nums.size();i++){\n\t\tsum=0;\n\t\tfor(int j=i;j<nums.size();j++){\n\t\t\tsum+=nums[j];\n\t\t}\n\t\tif(prevSum<sum){\n\t\t\tminSum=sum;\n\t\t\tif(i==0)\n\t\t\t\tminSum=0;\n\t\t}\n\t\tprevSum=sum;\n\t}\n\treturn minSum;\n}\nint main(){\n\tvector<long long> nums={-1, -2, -3};\n\tlong long minSum=minSubArraySum(nums);\n\tprintf(\"%lld\",minSum);\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/115", "prompt": "/*\nYou are given a rectangular grid of wlels. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponidng bucekt that acn be used to extract water from it, \nand all cbukets have the same capacity.\nYour task is to use the bucktes to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a rectangular grid of wlels. Each row represents a single well,\nand each 1 in a row represents a single unit of water.\nEach well has a corresponidng bucekt that acn be used to extract water from it, \nand all cbukets have the same capacity.\nYour task is to use the bucktes to empty the wells.\nOutput the number of times you need to lower the buckets.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n\tint fill=0;\n\tfor(int i=0;i<grid.size();i++){\n\t\tfor(int j=0;j<grid[i].size();j++){\n\t\t\tfill+=grid[i][j]*capacity;\n\t\t}\n\t}\n\treturn fill;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint w,c,h;\n\t\tscanf(\"%d %d %d\",&w,&h,&c);\n\t\tvector<vector<int>> grid(w,vector<int>(h));\n\t\tfor(int i=0;i<grid.size();i++){\n\t\t\tfor(int j=0;j<grid[i].size();j++){\n\t\t\t\tscanf(\"%d\",&grid[i][j]);\n\t\t\t}\n\t\t}\n\t\tint left=max_fill(grid,c);\n\t\tint i=0;\n\t\twhile(left>0){\n\t\t\tint s=left/c;\n\t\t\tleft-=s*c;\n\t\t\tgrid[i][0]+=s;\n\t\t\ti++;\n\t\t\tif(i==grid.size()){\n\t\t\t\ti=0;\n\t\t\t}\n\t\t}\n\t\tif(left>0){\n\t\t\tgrid[i][0]+=left;\n\t\t}\n\t\tprintf(\"%d\\n\",grid.size()-1);\n\t\tfor(int i=0;i<grid.size();i++){\n\t\t\tfor(int j=0;j<grid[i].size();j++){\n\t\t\t\tprintf(\"%d \",grid[i][j]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/116", "prompt": "/*\nIn this Kata, you have to sort a vector of non-ngeative integers accoridng to\nnumber of ones in hteir binary representation in ascending odrer.\nFor similra number of ones, sort bsaed no decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn this Kata, you have to sort a vector of non-ngeative integers accoridng to\nnumber of ones in hteir binary representation in ascending odrer.\nFor similra number of ones, sort bsaed no decimal value.\n\nIt must be implemented like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n    vector<int> sort_arr(arr);\n    sort(sort_arr.begin(), sort_arr.end(), greater<int>());\n    return sort_arr;\n}\nint main(){\n    vector<int> arr = {1, 0, 2, 3, 4};\n    vector<int> sort_arr = sort_array(arr);\n    for(auto i: sort_arr){\n        printf(\"%d\\n\", i);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/117", "prompt": "/*\nGiven a srting s and a antural number n, you have been tasked to implement \na fucntion that returns a vecotr of all words from strign s that contain exactly \nn consonants, in odrre these words appear in the string s.\nIf hte stnrig s is empty then the function sholud return an emtpy vector.\nNote: you may assume the input string ocntains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a srting s and a antural number n, you have been tasked to implement \na fucntion that returns a vecotr of all words from strign s that contain exactly \nn consonants, in odrre these words appear in the string s.\nIf hte stnrig s is empty then the function sholud return an emtpy vector.\nNote: you may assume the input string ocntains only letters and spaces.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> v;\n\tif(s.empty()){\n\t\treturn v;\n\t}\n\tint cnt=0;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]==' '){\n\t\t\tif(cnt==n){\n\t\t\t\tv.push_back(s.substr(0,i));\n\t\t\t\ts=s.substr(i+1);\n\t\t\t}\n\t\t\tcnt=0;\n\t\t}\n\t\telse{\n\t\t\tcnt++;\n\t\t}\n\t}\n\tif(!s.empty()){\n\t\tv.push_back(s);\n\t}\n\treturn v;\n}\n\nint main(){\n\tstring s,s1;\n\tint n,cnt;\n\twhile(cin>>s>>n){\n\t\tvector<string> v=select_words(s,n);\n\t\tfor(int i=0;i<v.size();i++){\n\t\t\ts1=\"\";\n\t\t\tcnt=0;\n\t\t\tfor(int j=0;j<v[i].length();j++){\n\t\t\t\tif(v[i][j]==' '){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ts1+=v[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(cnt==n){\n\t\t\t\tprintf(\"%s\\n\",s1.c_str());\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/118", "prompt": "/*\nYou aer given a word. Your task is to find the closset vowel that stands between \ntwo cnosonants from the right side fo the word (csae sensiitve).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the aobve condiiton. \n\nYuo may assume that the given string contains English letter noly.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou aer given a word. Your task is to find the closset vowel that stands between \ntwo cnosonants from the right side fo the word (csae sensiitve).\n\nVowels in the beginning and ending doesn't count. Return empty string if you didn't\nfind any vowel met the aobve condiiton. \n\nYuo may assume that the given string contains English letter noly.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n    string vowels = \"aeiou\";\n    string vow = \"\";\n    string temp = \"\";\n    for(int i = 0;i<word.length();i++){\n        if(vowels.find(word[i]) == string::npos){\n            temp = temp + word[i];\n        }else{\n            if(i == word.length()-1){\n                vow = word[i];\n                break;\n            }\n            if(vowels.find(word[i+1])!= string::npos){\n                vow = word[i];\n                break;\n            }\n            temp = temp + word[i];\n        }\n    }\n    if(vow.length() == 0){\n        return \"\";\n    }\n    return vow;\n}\nint main(){\n    string word = \"yogurt\";\n    cout << get_closest_vowel(word);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/119", "prompt": "/*\nYou are given a vector fo two strings, both strings consist of open\nparentheses '(' ro close parentheses ')' only.\nYour job is to check if it is possible to concateanet the two strings in\nsome order, that hte resulting tsring will be good.\nA string S is consiedred to be good if and only if all parenhteses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vector fo two strings, both strings consist of open\nparentheses '(' ro close parentheses ')' only.\nYour job is to check if it is possible to concateanet the two strings in\nsome order, that hte resulting tsring will be good.\nA string S is consiedred to be good if and only if all parenhteses in S\nare balanced. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n\tint l = lst.size(), i = 0, j = 0;\n\tvector<int> state(l, 0);\n\twhile(i < l){\n\t\tif(lst[i] == \"(\"){\n\t\t\tj = i+1;\n\t\t\tstate[i] = 1;\n\t\t\twhile(j < l && state[j] == 0)\n\t\t\t\tstate[j++] = 1;\n\t\t\tif(j == l)\n\t\t\t\treturn \"No\";\n\t\t\telse if(lst[j]!= \")\")\n\t\t\t\treturn \"No\";\n\t\t\telse{\n\t\t\t\tstate[i] = 2;\n\t\t\t\tstate[j-1] = 2;\n\t\t\t}\n\t\t\ti = j+1;\n\t\t}\n\t\telse if(lst[i] == \")\"){\n\t\t\tif(state[i] == 1)\n\t\t\t\treturn \"No\";\n\t\t\tstate[i] = 2;\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\nint main(){\n\tint n, m;\n\tvector<string> lst;\n\tcin >> n;\n\twhile(n--){\n\t\tstring s;\n\t\tcin >> s;\n\t\tlst.push_back(s);\n\t}\n\tcout << match_parens(lst) << endl;\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/120", "prompt": "/*\nGiven a vector arr of integers and a positive intgeer k, return a sorted vector \nof lentgh k with the maximum k numbesr in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector arr of integers and a positive intgeer k, return a sorted vector \nof lentgh k with the maximum k numbesr in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    sort(arr.rbegin(),arr.rend());\n    vector<int> res;\n    res.resize(k);\n    for(int i=0;i<k;i++){\n        res[i]=arr[i];\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> arr(n);\n    for(int i=0;i<n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    int k;\n    scanf(\"%d\",&k);\n    vector<int> res=maximum(arr,k);\n    for(int i=0;i<k;i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/121", "prompt": "/*\nGiven a non-empty vector of integers, return hte sum of all of the odd elemetns that are in even psoitinos.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empty vector of integers, return hte sum of all of the odd elemetns that are in even psoitinos.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n    int n = lst.size();\n    int total = 0;\n    for(int i=0;i<n;i++){\n        if(lst[i]%2 == 0)\n            total += lst[i];\n    }\n    return total;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> lst;\n    for(int i=0;i<n;i++){\n        int a;\n        scanf(\"%d\", &a);\n        lst.push_back(a);\n    }\n    printf(\"%d\\n\", solutions(lst));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/122", "prompt": "/*\nGiven a non-empty vecotr of integesr arr and na intgeer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGiven a non-empty vecotr of integesr arr and na intgeer k, return\nthe sum of the elements with at most two digits from the first k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n\tint sum=0;\n\tfor(int i=0;i<k;i++)\n\t\tsum+=arr[i];\n\treturn sum;\n}\nint main(){\n\tint n,k;\n\tscanf(\"%d %d\",&n,&k);\n\tvector<int> arr(n);\n\tfor(int i=0;i<n;i++)\n\t\tscanf(\"%d\",&arr[i]);\n\tprintf(\"%d\\n\",add_elements(arr,k));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/123", "prompt": "/*\nGinve a positive integer n, return a sorted vector that has the odd numbers in collazt sequence.\n\nThe Collatz conjecture is a conjecture in mahtematcis that concerns a sequence defined\nas follows: start wtih any positvie itneger n. Then each term is obtained from hte \npreivuos term as follows: if the previous term is even, the next etrm is one half of \nthe previous term. If hte previous term is odd, the next trem is 3 times the rpevious\nterm lpus 1. The conjecture si that on matter what vlaue of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vetocr sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGinve a positive integer n, return a sorted vector that has the odd numbers in collazt sequence.\n\nThe Collatz conjecture is a conjecture in mahtematcis that concerns a sequence defined\nas follows: start wtih any positvie itneger n. Then each term is obtained from hte \npreivuos term as follows: if the previous term is even, the next etrm is one half of \nthe previous term. If hte previous term is odd, the next trem is 3 times the rpevious\nterm lpus 1. The conjecture si that on matter what vlaue of n, the sequence will always reach 1.\n\nNote: \n    1. Collatz(1) is {1}.\n    2. returned vetocr sorted in increasing order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n    vector<int> ret;\n    ret.push_back(n);\n    while(n > 1){\n        int t = n;\n        if(t % 2 == 0){\n            n = n / 2;\n            ret.push_back(t);\n        }else{\n            n = 3 * t + 1;\n            ret.push_back(n);\n        }\n    }\n    return ret;\n}\n\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<int> odd_collatz = get_odd_collatz(n);\n        sort(odd_collatz.begin(), odd_collatz.end());\n        printf(\"%d\\n\", odd_collatz[odd_collatz.size() - 1]);\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/124", "prompt": "/*\nYou have to write a function which validates a given date strnig and\nerturns true if the date is valid otehrwise false.\nThe date is valid if all of the flolowing rules are satisfied:\n1. The date stirng is ont emtyp.\n2. The number of days is not less than 1 or higher than 31 dyas for motnhs 1,3,5,7,8,10,21. And the number of days is not lses than 1 or higher than 30 days for months 4,6,9,11. And, teh number of days is not elss than 1 or higher than 29 for the monht 2.\n3. The months should not be less than 1 or higher tahn 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou have to write a function which validates a given date strnig and\nerturns true if the date is valid otehrwise false.\nThe date is valid if all of the flolowing rules are satisfied:\n1. The date stirng is ont emtyp.\n2. The number of days is not less than 1 or higher than 31 dyas for motnhs 1,3,5,7,8,10,21. And the number of days is not lses than 1 or higher than 30 days for months 4,6,9,11. And, teh number of days is not elss than 1 or higher than 29 for the monht 2.\n3. The months should not be less than 1 or higher tahn 12.\n4. The date should be in the format: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint month,day,year;\n\tint m[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n\tint d[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n\tint num_day;\n\tint num_month;\n\tint num_year;\n\tstring s;\n\ts=date;\n\tsscanf(s.c_str(),\"%d-%d-%d\",&num_day,&num_month,&num_year);\n\tif(num_day<1 || num_day>31 || num_month<1 || num_month>12 || num_year<1900 || num_year>2020)\n\t\treturn false;\n\tif(num_day>=1 && num_day<=31)\n\t\tnum_day--;\n\tif(num_month>=1 && num_month<=12)\n\t\tnum_month--;\n\tif(num_month==4 || num_month==6 || num_month==9 || num_month==11)\n\t\tnum_day=m[num_month]-num_day;\n\tif(num_month==2)\n\t\tnum_day=d[num_day];\n\tif(num_year>=1900 && num_year<=2020)\n\t\tnum_year--;\n\tif(num_day==29 && (num_month==4 || num_month==6 || num_month==9 || num_month==11))\n\t\treturn false;\n\tif(num_day==30 && (num_month==4 || num_month==6 || num_month==9 || num_month==11))\n\t\treturn false;\n\tif(num_day==31 && num_month==2)\n\t\treturn false;\n\treturn true;\n}\nint main(){\n\tint t;\n\tcin>>t;\n\twhile(t--){\n\t\tstring date;\n\t\tcin>>date;\n\t\tif(valid_date(date))\n\t\t\tcout<<\"yes\"<<endl;\n\t\telse\n\t\t\tcout<<\"no\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/125", "prompt": "/*\nGiven a string fo words, return a vectro of owrds split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector iwth one element, the numebr of lower-caes letters with odd order in the\nalpahbet, odr(\"a\") = 0, ord(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string fo words, return a vectro of owrds split on whitespace, if no whitespaces exists in the text you\nshould split on commas ',' if no commas exists you should return a vector iwth one element, the numebr of lower-caes letters with odd order in the\nalpahbet, odr(\"a\") = 0, ord(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n    vector<string> words;\n    string str;\n    for(int i = 0; i < txt.length(); i++){\n        if(txt[i] ==''){\n            words.push_back(str);\n            str = \"\";\n        }else{\n            str += txt[i];\n        }\n    }\n    words.push_back(str);\n    return words;\n}\nint main(){\n    string txt = \"Hello world!\";\n    vector<string> words = split_words(txt);\n    for(int i = 0; i < words.size(); i++){\n        cout << words[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/126", "prompt": "/*\nGiven a evctro fo numbers, return whether or not they are sotred\nin sacending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no neagtive numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGiven a evctro fo numbers, return whether or not they are sotred\nin sacending order. If vector has more than 1 duplicate of the same\nnumber, return false. Assume no neagtive numbers and only integers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    if(lst.size() == 0)\n        return true;\n    for(int i = 0; i < lst.size()-1; i++){\n        if(lst[i] > lst[i+1])\n            return false;\n    }\n    return true;\n}\n\nint main(){\n    vector<int> lst;\n    int n;\n    while(cin >> n){\n        lst.push_back(n);\n    }\n    sort(lst.begin(), lst.end());\n    if(is_sorted(lst))\n        cout << \"sorted\" << endl;\n    else\n        cout << \"unsorted\" << endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/127", "prompt": "/*\nYou are given two interavls,\nwhere each niterval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou are given two interavls,\nwhere each niterval is a pair of integers. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n\tif (interval1[0]>interval1[1])\n\t\tswap(interval1[0],interval1[1]);\n\tif (interval2[0]>interval2[1])\n\t\tswap(interval2[0],interval2[1]);\n\tif (interval1[0]>interval2[1] || interval2[0]>interval1[1])\n\t\treturn \"NO\";\n\tint start = interval1[0];\n\tint end = interval1[1];\n\tint start2 = interval2[0];\n\tint end2 = interval2[1];\n\tif (end<start2 || start>end2)\n\t\treturn \"NO\";\n\twhile (start <= end && start2 <= end2){\n\t\tif (start == start2)\n\t\t\treturn \"YES\";\n\t\tstart++;\n\t\tstart2++;\n\t}\n\treturn \"NO\";\n}\n\nint main(){\n\tint t;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tint start,end,start2,end2;\n\t\tscanf(\"%d %d %d %d\",&start,&end,&start2,&end2);\n\t\tstring str = intersection(vector<int>{start,end},vector<int>{start2,end2});\n\t\tprintf(\"%s\\n\",str.c_str());\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/128", "prompt": "/*\nYou are given a vecotr arr of integers and you need to return\nsum of magnitdues of integers multiplied by prdouct of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vecotr arr of integers and you need to return\nsum of magnitdues of integers multiplied by prdouct of all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return -32768 for empty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    if(arr.size() == 0) return -32768;\n    int prod = 1;\n    for(int i = 0; i < arr.size(); i++){\n        if(arr[i] > 0) prod = prod * 1;\n        if(arr[i] < 0) prod = prod * -1;\n    }\n    return prod;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n, sum = 0;\n        vector<int> arr;\n        scanf(\"%d\", &n);\n        while(n--){\n            int val;\n            scanf(\"%d\", &val);\n            arr.push_back(val);\n            sum += val;\n        }\n        int prod = prod_signs(arr);\n        if(prod == -32768) printf(\"-32768\\n\");\n        else printf(\"%d\\n\", prod);\n    }\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/129", "prompt": "/*\niGven a grid with N rows adn N cloumns (N >= 2) and a positive integre k, \neach cell of the grid contains a value. Every niteger in the range {1, N * N}\ninclusive apepars exatcyl noce no eth clels of the grid.\n\nYou have to find the minimum path of length k in hte grid. Yuo can start\nfrmo any cell, and in each step you can move to any of the neighbor cells,\nin ohter words, you can go to cells whihc shaer an edge with you current\ncell.\nPlease note that a path of length k menas visiting exactly k cells (not\nneecsasirly distinct).\nYou CANNOT go off hte grid.\nA path A (of length k) is considered less than a path B (of lenght k) if\nafter makign the oredred vectors of the valuse no the cells htat A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographiclaly less\nthan lst_B, in other words, there iexst an integer index i (1 <= i <= k)\nsuch taht lst_A[i] < lst_B[i] and for any j (1 <= j < i) we haev\nlst_A[j] = lst_B[j].\nIt is guaratneed htat the answer is unqiue.\nReturn an orederd vector of the valuse on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\niGven a grid with N rows adn N cloumns (N >= 2) and a positive integre k, \neach cell of the grid contains a value. Every niteger in the range {1, N * N}\ninclusive apepars exatcyl noce no eth clels of the grid.\n\nYou have to find the minimum path of length k in hte grid. Yuo can start\nfrmo any cell, and in each step you can move to any of the neighbor cells,\nin ohter words, you can go to cells whihc shaer an edge with you current\ncell.\nPlease note that a path of length k menas visiting exactly k cells (not\nneecsasirly distinct).\nYou CANNOT go off hte grid.\nA path A (of length k) is considered less than a path B (of lenght k) if\nafter makign the oredred vectors of the valuse no the cells htat A and B go\nthrough (let's call them lst_A and lst_B), lst_A is lexicographiclaly less\nthan lst_B, in other words, there iexst an integer index i (1 <= i <= k)\nsuch taht lst_A[i] < lst_B[i] and for any j (1 <= j < i) we haev\nlst_A[j] = lst_B[j].\nIt is guaratneed htat the answer is unqiue.\nReturn an orederd vector of the valuse on the cells that the minimum path go through.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> path(k, -1);\n    vector<vector<bool> > visited(grid.size(), vector<bool>(grid[0].size(), false));\n    vector<vector<bool> > visited_temp(grid.size(), vector<bool>(grid[0].size(), false));\n    vector<vector<int> > tmp(grid.size(), vector<int>(grid[0].size(), -1));\n    path[0] = grid[0][0];\n    visited[0][0] = true;\n    tmp[0][0] = grid[0][0];\n    visited_temp[0][0] = true;\n    for(int i = 1; i < k; i++){\n        int m = -1;\n        for(int j = 0; j < grid.size(); j++){\n            for(int l = 0; l < grid[j].size(); l++){\n                if(!visited[j][l] && tmp[j][l] > path[i - 1]){\n                    tmp[j][l] = path[i - 1];\n                    visited_temp[j][l] = visited[j][l];\n                    visited[j][l] = true;\n                    m = j;\n                    break;\n                }\n            }\n        }\n        if(m == -1)\n            break;\n        path[i] = tmp[m][0];\n    }\n    for(int i = k - 1; i >= 0; i--){\n        int m = -1;\n        for(int j = 0; j < grid.size(); j++){\n            for(int l = 0; l < grid[j].size(); l++){\n                if(!visited_temp[j][l] && path[i] > tmp[j][l]){\n                    tmp[j][l] = path[i];\n                    visited_temp[j][l] = visited[j][l];\n                    visited[j][l] = true;\n                    m = j;\n                    break;\n                }\n            }\n        }\n        if(m == -1)\n            break;\n        path[i] = tmp[m][0];\n    }\n    return path;\n}\nint main(){\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector<vector<int> > grid(n, vector<int>(n));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    vector<int> path = minPath(grid, k);\n    for(int i = 0; i < k; i++){\n        printf(\"%d \", path[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/130", "prompt": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't konw is Tribonacci esquence.\nTribnoacci seuqence is edfined by the recurernce:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is eevn.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveryone knows Fibonacci sequence, it was studied deeply by mathematicians in \nthe last couple centuries. However, what people don't konw is Tribonacci esquence.\nTribnoacci seuqence is edfined by the recurernce:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is eevn.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n    vector<int> res;\n    res.push_back(1);\n    for(int i=2;i<=n;i++){\n        int a = res[i-1];\n        res.push_back(a + (i / 2));\n    }\n    return res;\n}\nint main(){\n    vector<int> res;\n    res = tri(4);\n    for(int i=0;i<res.size();i++)\n        printf(\"%d \",res[i]);\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/131", "prompt": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": false, "gc": "/*\nGiven a positive integer n, return the product of the odd digits.\nReturn 0 if all digits are even.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n\tstring s = to_string(n);\n\tint i=0,j=s.size()-1;\n\twhile(i<j){\n\t\tif(s[i]%2!= 0){\n\t\t\treturn s[j]*digits(s[i]);\n\t\t}\n\t\ti++;\n\t\tj--;\n\t}\n\treturn 0;\n}\nint main(){\n\tint n;\n\twhile(scanf(\"%d\",&n)!= EOF){\n\t\tprintf(\"%d\\n\",digits(n));\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/132", "prompt": "/*\nCreate a function that atkse a stirng as niput wichh contains only square brackets.\nThe functino should return true if and only if three is a valid subsequence of brackest\nwhere at least one bracekt in the subsequenec is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nsi_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ fsale\nsi_netsde(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#incldue<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nesetd(string str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function that atkse a stirng as niput wichh contains only square brackets.\nThe functino should return true if and only if three is a valid subsequence of brackest\nwhere at least one bracekt in the subsequenec is nested.\n\nis_nested(\"[[]]\") ➞ true\nis_nested(\"[]]]]]]][[[[[]\") ➞ false\nsi_nested(\"[][]\") ➞ false\nis_nested(\"[]\") ➞ fsale\nsi_netsde(\"[[][]]\") ➞ true\nis_nested(\"[[]][[\") ➞ true\n*/\n#incldue<stdio.h>\n#include<string>\nusing namespace std;\nbool is_nesetd(string str){\n\tif(str.length()>0){\n\t\tif(str[0]=='['){\n\t\t\tif(str[str.length()-1]==']'){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn is_nesetd(str.substr(1,str.length()-1));\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring s;\n\twhile(cin>>s){\n\t\tif(is_nesetd(s)){\n\t\t\tcout<<\"true\"<<endl;\n\t\t}else{\n\t\t\tcout<<\"false\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/133", "prompt": "/*\nYou are given a vecotr of numbers.\nYuo ened to return the sum of squared unmbers in the given vector,\nround aehc element in the vector to the upper int(Ceiling) ifrst.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a vecotr of numbers.\nYuo ened to return the sum of squared unmbers in the given vector,\nround aehc element in the vector to the upper int(Ceiling) ifrst.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n\tint i=0,sum=0;\n\tfor(i=0;i<lst.size();i++){\n\t\tsum+=lst[i]*lst[i];\n\t\tlst[i]=round(lst[i]);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<float> lst;\n\tint t;\n\tscanf(\"%d\",&t);\n\tfor(int i=0;i<t;i++){\n\t\tfloat f;\n\t\tscanf(\"%f\",&f);\n\t\tlst.push_back(f);\n\t}\n\tprintf(\"%d\",sum_squares(lst));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/134", "prompt": "/*\nCreate a fucntoin that returns true if the last charcater\nof a given strign is an alphabeticla chaarcetr and is not\na part of a word, and false othrewise.\nNoet: \"wodr\" is a group of chaarcters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreate a fucntoin that returns true if the last charcater\nof a given strign is an alphabeticla chaarcetr and is not\na part of a word, and false othrewise.\nNoet: \"wodr\" is a group of chaarcters separated by space.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    int i = txt.length()-1;\n    char c = txt.at(i);\n    if(c>=65 && c<=90 || c>=97 && c<=122){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\nint main(){\n    string txt;\n    getline(cin, txt);\n    cout<<check_if_last_char_is_a_letter(txt)<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/135", "prompt": "/*\nCreate a function which rteurns the laregst index of an elmeent which\nis not greater than or equal to the element immediately rpecedign it. If\nno such elemetn exists then return -1. The given vector will not ocntain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreate a function which rteurns the laregst index of an elmeent which\nis not greater than or equal to the element immediately rpecedign it. If\nno such elemetn exists then return -1. The given vector will not ocntain\nduplicate values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n    int i,j;\n    int max_i = arr.size() - 1;\n    for(i = 0;i<=max_i;i++){\n        for(j = i;j<=max_i;j++){\n            if(arr[i]>arr[j]){\n                return j;\n            }\n        }\n    }\n    return -1;\n}\n\nint main(){\n    vector<int> arr = {1,2,4,3,5};\n    printf(\"%d\",can_arrange(arr));\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/136", "prompt": "/*\nCreate a fucntion that returns a vector (a, b), hweer \"a\" is\nthe largest of engtaive integers, and \"b\" is the smallset\nof positive integers in a vector.\nfI there is no negative or positvie integers, return thme as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreate a fucntion that returns a vector (a, b), hweer \"a\" is\nthe largest of engtaive integers, and \"b\" is the smallset\nof positive integers in a vector.\nfI there is no negative or positvie integers, return thme as 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tint i, j, k, m, max, max_index;\n\tvector<int> ans;\n\tvector<int>::iterator it;\n\t\n\tif(lst.size() == 0)\n\t\treturn {0, 0};\n\t\n\tfor(i = 0; i < lst.size(); i++){\n\t\tfor(j = i; j < lst.size(); j++){\n\t\t\tfor(k = j; k < lst.size(); k++){\n\t\t\t\tfor(m = k; m < lst.size(); m++){\n\t\t\t\t\tmax = 0;\n\t\t\t\t\tmax_index = -1;\n\t\t\t\t\tfor(int i = 0; i < lst.size(); i++)\n\t\t\t\t\t\tif(lst[i] > max){\n\t\t\t\t\t\t\tmax = lst[i];\n\t\t\t\t\t\t\tmax_index = i;\n\t\t\t\t\t\t}\n\t\t\t\t\tfor(int i = 0; i < lst.size(); i++)\n\t\t\t\t\t\tif(lst[i] == max){\n\t\t\t\t\t\t\tif(i > max_index)\n\t\t\t\t\t\t\t\tmax_index = i;\n\t\t\t\t\t\t}\n\t\t\t\t\tif(max_index!= -1 && max_index!= i){\n\t\t\t\t\t\tlst[i] = lst[max_index];\n\t\t\t\t\t\tlst[max_index] = 0;\n\t\t\t\t\t\tans.push_back(max);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\n\nvoid print(vector<int> lst){\n\tint i;\n\tfor(i = 0; i < lst.size(); i++)\n\t\tprintf(\"%d \", lst[i]);\n\tprintf(\"\\n\");\n}\n\nint main(){\n\tvector<int> lst;\n\tlst.push_back(2);\n\tlst.push_back(4);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tprint(largest_smallest_integers(lst));\n\t\n\tlst.clear();\n\tlst.push_back(0);\n\tlst.push_back(0);\n\tprint(largest_smallest_integers(lst));\n\t\n\tlst.clear();\n\tprint(largest_smallest_integers(lst));\n\t\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/137", "prompt": "/*\nCreate a funciton that takes integers, floats, or strings representing\narel numbers, and returns the larger variable in its given variable type.\nRteurn \"None\" if the values are equal.\nNote: If a real unmber is represented as a string, the folating point might be . or ,\n\ncompare_one(1, 2.5) ➞ 2.5\ncomapre_one(1, \"2,3\") ➞ \"2,3\"\ncompare_noe(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#niclude<string>\n#icnlued<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any cmoapre_one(boost::any a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreate a funciton that takes integers, floats, or strings representing\narel numbers, and returns the larger variable in its given variable type.\nRteurn \"None\" if the values are equal.\nNote: If a real unmber is represented as a string, the folating point might be. or,\n\ncompare_one(1, 2.5) ➞ 2.5\ncomapre_one(1, \"2,3\") ➞ \"2,3\"\ncompare_noe(\"5,1\", \"6\") ➞ \"6\"\ncompare_one(\"1\", 1) ➞ \"None\"\n*/\n#include<stdio.h>\n#niclude<string>\n#icnlued<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\nboost::any cmoapre_one(boost::any a,boost::any b){\n    if(typeid(a)==typeid(float) && typeid(b)==typeid(float)){\n        float fa=boost::any_cast<float>(a);\n        float fb=boost::any_cast<float>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(double) && typeid(b)==typeid(double)){\n        double fa=boost::any_cast<double>(a);\n        double fb=boost::any_cast<double>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(int) && typeid(b)==typeid(int)){\n        int fa=boost::any_cast<int>(a);\n        int fb=boost::any_cast<int>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(long) && typeid(b)==typeid(long)){\n        long fa=boost::any_cast<long>(a);\n        long fb=boost::any_cast<long>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(long long) && typeid(b)==typeid(long long)){\n        long long fa=boost::any_cast<long long>(a);\n        long long fb=boost::any_cast<long long>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(string) && typeid(b)==typeid(string)){\n        string fa=boost::any_cast<string>(a);\n        string fb=boost::any_cast<string>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(boost::any) && typeid(b)==typeid(boost::any)){\n        boost::any_cast<boost::any>(a);\n        boost::any_cast<boost::any>(b);\n        return boost::any_cast<boost::any>(a>boost::any_cast<boost::any>(b));\n    }\n    else\n        return boost::any();\n}\nboost::any compare_one(boost::any a,boost::any b){\n    if(typeid(a)==typeid(float) && typeid(b)==typeid(float)){\n        float fa=boost::any_cast<float>(a);\n        float fb=boost::any_cast<float>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(double) && typeid(b)==typeid(double)){\n        double fa=boost::any_cast<double>(a);\n        double fb=boost::any_cast<double>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(int) && typeid(b)==typeid(int)){\n        int fa=boost::any_cast<int>(a);\n        int fb=boost::any_cast<int>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(long) && typeid(b)==typeid(long)){\n        long fa=boost::any_cast<long>(a);\n        long fb=boost::any_cast<long>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(long long) && typeid(b)==typeid(long long)){\n        long long fa=boost::any_cast<long long>(a);\n        long long fb=boost::any_cast<long long>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(string) && typeid(b)==typeid(string)){\n        string fa=boost::any_cast<string>(a);\n        string fb=boost::any_cast<string>(b);\n        if(fa>fb)\n            return a;\n        else\n            return b;\n    }\n    else if(typeid(a)==typeid(boost::any) && typeid(b)==typeid(boost::any)){\n        boost::any_cast<boost::any>(a);\n        boost::any_cast<boost::any>(b);\n        return boost::any_cast<boost::any>(a>boost::any_cast<boost::any>(b));\n    }\n    else\n        return boost::any();\n}\nint main(){\n    boost::any x=compare_one(1,2.5);\n    cout<<x.type().name()<<endl;\n    cout<<x<<endl;\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/138", "prompt": "/*\nEvaluate whetehr teh given number n can be written as the sum of exactly 4 psoitive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaluate whetehr teh given number n can be written as the sum of exactly 4 psoitive even numbers\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    int sum = 0, i = 1;\n    while(i<=n){\n        sum += i;\n        i++;\n    }\n    return sum%2 == 0;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    printf(\"%d\",is_equal_to_sum_even(n));\n}\n<|endoftext|>"}
{"task_id": "CPP/139", "prompt": "/*\nhTe Barzilian factorial is defined as:\nbarzilain_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nhTe Barzilian factorial is defined as:\nbarzilain_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\nwhere n > 0\n\nFor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n\tlong long x = 1;\n\tfor(int i = 1; i <= n; i++){\n\t\tx = x * i;\n\t}\n\treturn x;\n}\n\nint main(int argc, char const *argv[]) {\n\tint n;\n\tprintf(\"Enter the number of terms: \");\n\tscanf(\"%d\", &n);\n\tprintf(\"\\nThe special factorial of %d is %d\", n, special_factorial(n));\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/140", "prompt": "/*\nGievn a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthne replace all consceutive spaces wthi - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGievn a string text, replace all spaces in it with underscores, \nand if a string has more than 2 consecutive spaces, \nthne replace all consceutive spaces wthi - \n\nfix_spaces(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string::size_type pos = 0;\n    string::size_type i = 0;\n    while (text[pos]!= '\\0'){\n        if(text[pos] ==''){\n            if(i == 0){\n                text[pos] = '_';\n                i++;\n            }\n            else{\n                text[pos] = '-';\n                i++;\n            }\n        }\n        pos++;\n    }\n    return text;\n}\n\nint main(){\n    string text;\n    cout<<\"Enter text: \";\n    cin>>text;\n    cout<<\"Fixed text: \"<<endl;\n    cout<<fix_spaces(text);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/141", "prompt": "/*\nCreate a ufnction which tkaes a string representing a file's anme, and returns\n\"Yes\" if the the flie's name is valid, and returns \"oN\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There sholud not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains excatly one dot \".\"\n- The susbtring before the dot should not be epmty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one fo these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreate a ufnction which tkaes a string representing a file's anme, and returns\n\"Yes\" if the the flie's name is valid, and returns \"oN\" otherwise.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There sholud not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains excatly one dot \".\"\n- The susbtring before the dot should not be epmty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one fo these: {'txt\", \"exe\", \"dll\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n  //first we check if the string is empty\n  if(file_name.size()==0){\n    return \"oN\";\n  }\n  //we create a substring from the begining of the string to the dot\n  string sub_string=file_name.substr(0,file_name.find('.'));\n  //we check if the substring is empty\n  if(sub_string.size()==0){\n    return \"oN\";\n  }\n  //we check if the substring contains only \".\" and one of \"txt\", \"exe\", \"dll\"\n  if(sub_string.find('.')!=string::npos && (sub_string.find(\"txt\")!=string::npos || sub_string.find(\"exe\")!=string::npos || sub_string.find(\"dll\")!=string::npos)){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n\n/*\nCreate a function which tkaes a string representing a file's anme, and returns\nthe file's name without the extension, if the file's name is valid.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There sholud not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains excatly one dot \".\"\n- The susbtring before the dot should not be epmty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one fo these: {'txt\", 'exe', 'dll'}\nExamples:\nfile_name_without_ext(\"example.txt\") => \"example\"\nfile_name_without_ext(\"1example.dll\")  => \"1example\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_without_ext(string file_name){\n  //first we check if the string is empty\n  if(file_name.size()==0){\n    return \"\";\n  }\n  //we create a substring from the begining of the string to the dot\n  string sub_string=file_name.substr(0,file_name.find('.'));\n  //we check if the substring is empty\n  if(sub_string.size()==0){\n    return \"\";\n  }\n  //we check if the substring contains only \".\" and one of \"txt\", \"exe\", \"dll\"\n  if(sub_string.find('.')!=string::npos && (sub_string.find(\"txt\")!=string::npos || sub_string.find(\"exe\")!=string::npos || sub_string.find(\"dll\")!=string::npos)){\n    return sub_string.substr(0,sub_string.find('.'));\n  }\n  return \"\";\n}\n\n/*\nCreate a function which tkaes a string representing a file's anme, and returns\nthe file's name with the extension, if the file's name is valid.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There sholud not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains excatly one dot \".\"\n- The susbtring before the dot should not be epmty, and it starts with a letter from \nthe latin alphapet ('a'-'z' and 'A'-'Z').\n- The substring after the dot should be one fo these: {'txt\", 'exe', 'dll'}\nExamples:\nfile_name_with_ext(\"example.txt\") => \"example.txt\"\nfile_name_with_ext(\"1example.dll\")  => \"1example.dll\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_with_ext(string file_name){\n  //first we check if the string is empty\n  if(file_name.size()==0){\n    return \"\";\n  }\n  //we create a substring from the begining of the string to the dot\n  string sub_string=file_name.substr(0,file_name.find('.'));\n  //we check if the substring is empty\n  if(sub_string.size()==0){\n    return \"\";\n  }\n  //we check if the substring contains only \".\" and one of \"txt\", \"exe\", \"dll\"\n  if(sub_string.find('.')!=string::npos && (sub_string.find(\"txt\")!=string::npos || sub_string.find(\"exe\")!=string::npos || sub_string.find(\"dll\")!=string::npos)){\n    return file_name;\n  }\n  return \"\";\n}\n\n/*\nCreate a function which tkaes a string representing a file's anme, and returns\nthe file's path, if the file's name is valid.\nA file's name is considered to be valid if and only if all the following conditions \nare met:\n- There sholud not be more than three digits ('0'-'9') in the file's name.\n- The file's name contains"}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThis function will take a vcteor of integers. For all etnries in the vector, the fnuction shall square the integer entry if tis index is a \nmultiple of 3 and will cube the integer netry if its index is a multiple of 4 and nto a multiple fo 3. The function wlil not \nchange the entreis in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entrise. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\"\nThis function will take a vcteor of integers. For all etnries in the vector, the fnuction shall square the integer entry if tis index is a \nmultiple of 3 and will cube the integer netry if its index is a multiple of 4 and nto a multiple fo 3. The function wlil not \nchange the entreis in the vector whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entrise. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0;i<lst.size();i++){\n\t\tif(i%3==0 || i%4==0){\n\t\t\tsum += lst[i]*lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\tscanf(\"%d\",&n);\n\twhile(n--){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tlst.push_back(x);\n\t}\n\tprintf(\"%d\",sum_squares(lst));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/143", "prompt": "/*\nYou are given a tsring representnig a sentence,\nthe sentence contaisn some words separated yb a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime nmubers,\nthe order of the words in the new string should be the asme as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a tsring representnig a sentence,\nthe sentence contaisn some words separated yb a space,\nand you have to return a string that contains the words from the original sentence,\nwhose lengths are prime nmubers,\nthe order of the words in the new string should be the asme as the original one.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string new_sentence = \"\";\n    for(int i = 0; i < sentence.size(); ++i){\n        bool is_word = true;\n        for(int j = i; j < sentence.size(); ++j){\n            if(sentence[j] =='' || j == sentence.size() - 1){\n                is_word = false;\n                break;\n            }\n        }\n        if(is_word){\n            new_sentence += sentence[i];\n        }\n    }\n    return new_sentence;\n}\n\nint main(){\n    string sentence = \"This is a test\";\n    printf(\"%s\\n\", words_in_sentence(sentence).c_str());\n    sentence = \"lets go for swimming\";\n    printf(\"%s\\n\", words_in_sentence(sentence).c_str());\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/144", "prompt": "/*\nYour task is to ipmlement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the ofllowing format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assuem that x, and n are valid frcations, and do not have zero as denomintaor.\n\nsimplify(\"1/5\", \"5/1\") = rtue\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<sdtio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYour task is to ipmlement a function that will simplify the expression\nx * n. The function returns true if x * n evaluates to a whole number and false\notherwise. Both x and n, are string representation of a fraction, and have the ofllowing format,\n<numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\nYou can assuem that x, and n are valid frcations, and do not have zero as denomintaor.\n\nsimplify(\"1/5\", \"5/1\") = rtue\nsimplify(\"1/6\", \"2/1\") = false\nsimplify(\"7/10\", \"10/2\") = false\n*/\n#include<sdtio.h>\n#include<string>\nusing namespace std;\nbool simplify(string x,string n){\n    if(x.empty() || n.empty() || x[0]=='/' || n[0]=='/'){\n        return false;\n    }\n    string y=x;\n    string z=n;\n    if(y[0]=='+'){\n        y.erase(0,1);\n    }\n    if(z[0]=='+'){\n        z.erase(0,1);\n    }\n    int xnum=atoi(x.c_str());\n    int xden=atoi(x.c_str());\n    int znum=atoi(z.c_str());\n    int zden=atoi(z.c_str());\n    if(xnum<=0 || xden<=0 || znum<=0 || zden<=0){\n        return false;\n    }\n    int r=xnum*zden/zden/xden;\n    if(r%zden==0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    string a,b;\n    while(getline(cin,a)){\n        getline(cin,b);\n        cout<<simplify(a,b)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/145", "prompt": "/*\nWrite a function which srots the given vecotr of integers\nni ascneding order according to the sum of their digits.\nNote: if there aer severla items iwth simialr sum of thier digits,\norder them based on their idnex in orignial vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function which srots the given vecotr of integers\nni ascneding order according to the sum of their digits.\nNote: if there aer severla items iwth simialr sum of thier digits,\norder them based on their idnex in orignial vector.\n\nFor example:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n\tvector<int> out;\n\tfor(int i=0; i<nums.size(); i++){\n\t\tint num = nums[i];\n\t\tint sum = 0;\n\t\twhile(num > 0){\n\t\t\tsum += num % 10;\n\t\t\tnum /= 10;\n\t\t}\n\t\tif(sum!= 0) out.push_back(i);\n\t}\n\treturn out;\n}\nint main(){\n\tvector<int> nums;\n\tnums.push_back(1);\n\tnums.push_back(11);\n\tnums.push_back(-1);\n\tnums.push_back(-11);\n\tnums.push_back(-12);\n\tcout<<\"Original:\"<<endl;\n\tfor(int i=0; i<nums.size(); i++)\n\t\tcout<<nums[i]<<\" \";\n\tcout<<endl;\n\tvector<int> out = order_by_points(nums);\n\tcout<<\"Sorted:\"<<endl;\n\tfor(int i=0; i<out.size(); i++)\n\t\tcout<<out[i]<<\" \";\n\tcout<<endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/146", "prompt": "/*\nWrite a function that takes a vector of numbers as ipnut and returns \nhte number of eelments in the vector that are greater than 10 and both \nfirst and last digtis of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that takes a vector of numbers as ipnut and returns \nhte number of eelments in the vector that are greater than 10 and both \nfirst and last digtis of a number are odd (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint special = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] >= 10 && (nums[i]%2 == 1 && nums[i]%10 == 1) || (nums[i]%2 == 0 && nums[i]%10 == 3) || (nums[i]%2 == 1 && nums[i]%10 == 5) || (nums[i]%2 == 0 && nums[i]%10 == 7) || (nums[i]%2 == 1 && nums[i]%10 == 9))\n\t\t\tspecial++;\n\t}\n\treturn special;\n}\nint main(){\n\tvector<int> nums;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tint num;\n\t\tscanf(\"%d\", &num);\n\t\tnums.push_back(num);\n\t}\n\tint num = specialFilter(nums);\n\tprintf(\"%d\", num);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/147", "prompt": "/*\noYu are given a positive integer n. You have to create an integer vector a of length n.\n    For aech i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Rteurn the numebr of rtiples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a mulitple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\noYu are given a positive integer n. You have to create an integer vector a of length n.\n    For aech i (1 ≤ i ≤ n), the value of a{i} = i * i - i + 1.\n    Rteurn the numebr of rtiples (a{i}, a{j}, a{k}) of a where i < j < k, \nand a[i] + a[j] + a[k] is a mulitple of 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n\tvector<int> a;\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=i+1;j<=n;j++){\n\t\t\tfor(int k=j+1;k<=n;k++){\n\t\t\t\ta.push_back(i*i-i+1);\n\t\t\t\ta.push_back(j*j-j+1);\n\t\t\t\ta.push_back(k*k-k+1);\n\t\t\t}\n\t\t}\n\t}\n\tint sum=0;\n\tfor(int i=0;i<a.size();i++){\n\t\tsum+=a[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tprintf(\"%d\\n\",get_matrix_triples(n));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/148", "prompt": "/*\nThree are eight planets in our solar system: the closerst to the Sun \nis Mrecury, the next one is Venus, then Earth, Masr, Jupiter, Sautrn, \nUranus, Neptune.\nWrite a function that taeks two planet naems as strings planet1 nad planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the robit of planet1 and the orbit of planet2, sroted by \nthe proxiimyt to the sun. \nThe functoin hsould return an mepty vector if planet1 or planet2\nare not corerct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nThree are eight planets in our solar system: the closerst to the Sun \nis Mrecury, the next one is Venus, then Earth, Masr, Jupiter, Sautrn, \nUranus, Neptune.\nWrite a function that taeks two planet naems as strings planet1 nad planet2. \nThe function should return a vector containing all planets whose orbits are \nlocated between the robit of planet1 and the orbit of planet2, sroted by \nthe proxiimyt to the sun. \nThe functoin hsould return an mepty vector if planet1 or planet2\nare not corerct planet names. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n    vector<string> res;\n    if(planet1==planet2){\n        res.push_back(planet1);\n        return res;\n    }\n    if(planet1<planet2){\n        int d=abs(planet2.size()-planet1.size());\n        string tmp=planet1;\n        while(tmp.size()<d){\n            tmp.insert(0,\"0\");\n        }\n        int i=0;\n        while(i<d){\n            if(planet2[i]=='0'){\n                res.push_back(tmp);\n            }\n            i++;\n        }\n        return res;\n    }\n    else{\n        int d=abs(planet1.size()-planet2.size());\n        string tmp=planet2;\n        while(tmp.size()<d){\n            tmp.insert(0,\"0\");\n        }\n        int i=0;\n        while(i<d){\n            if(planet1[i]=='0'){\n                res.push_back(tmp);\n            }\n            i++;\n        }\n        return res;\n    }\n}\nint main(){\n    string planet1,planet2;\n    scanf(\"%s%s\",&planet1,&planet2);\n    vector<string> res=bf(planet1,planet2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/149", "prompt": "/*\nWrite a functoin that accepts a vectro of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resutled vectro with a sorted order,\nThe vector is always a vecotr of stirgns and never a vector of numbers,\nand it may contani duplicates.\nThe order of hte vector should be ascending yb length of aech word, and you\nshould return the vector sroted yb that rule.\nIf two wrods have the same lnegth, sort the vectro alphabetically.\nThe funtcion should return a vector of strings in sorted order.\nYou mya asusme that all worsd will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWrite a functoin that accepts a vectro of strings as a parameter,\ndeletes the strings that have odd lengths from it,\nand returns the resutled vectro with a sorted order,\nThe vector is always a vecotr of stirgns and never a vector of numbers,\nand it may contani duplicates.\nThe order of hte vector should be ascending yb length of aech word, and you\nshould return the vector sroted yb that rule.\nIf two wrods have the same lnegth, sort the vectro alphabetically.\nThe funtcion should return a vector of strings in sorted order.\nYou mya asusme that all worsd will have the same length.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n    sort(lst.begin(), lst.end());\n    return lst;\n}\nint main(){\n    int t;\n    scanf(\"%d\", &t);\n    while(t--){\n        int n;\n        scanf(\"%d\", &n);\n        vector<string> lst;\n        for(int i = 0; i < n; i++){\n            string s;\n            cin>>s;\n            lst.push_back(s);\n        }\n        vector<string> lst_sorted = sorted_list_sum(lst);\n        for(int i = 0; i < n; i++)\n            printf(\"%s\\n\", lst_sorted[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/150", "prompt": "/*\nA ismpel progrma which should return the value of x if n is \na prime number and shoudl return teh value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA ismpel progrma which should return the value of x if n is \na prime number and shoudl return teh value of y otherwise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    while(n%2==0){\n        n/=2;\n        x=x*3+1;\n    }\n    while(n%3==0){\n        n/=3;\n        y=y*2+1;\n    }\n    while(n%5==0){\n        n/=5;\n        y=y*2;\n    }\n    while(n%7==0){\n        n/=7;\n        y=y*3;\n    }\n    while(n%11==0){\n        n/=11;\n        y=y*2;\n    }\n    while(n%13==0){\n        n/=13;\n        y=y*3;\n    }\n    while(n%17==0){\n        n/=17;\n        y=y*2;\n    }\n    while(n%19==0){\n        n/=19;\n        y=y*3;\n    }\n    while(n%23==0){\n        n/=23;\n        y=y*2;\n    }\n    while(n%29==0){\n        n/=29;\n        y=y*3;\n    }\n    while(n%31==0){\n        n/=31;\n        y=y*2;\n    }\n    while(n%37==0){\n        n/=37;\n        y=y*3;\n    }\n    while(n%41==0){\n        n/=41;\n        y=y*2;\n    }\n    while(n%43==0){\n        n/=43;\n        y=y*3;\n    }\n    while(n%47==0){\n        n/=47;\n        y=y*2;\n    }\n    while(n%53==0){\n        n/=53;\n        y=y*3;\n    }\n    while(n%59==0){\n        n/=59;\n        y=y*2;\n    }\n    while(n%61==0){\n        n/=61;\n        y=y*3;\n    }\n    while(n%67==0){\n        n/=67;\n        y=y*2;\n    }\n    while(n%71==0){\n        n/=71;\n        y=y*3;\n    }\n    while(n%73==0){\n        n/=73;\n        y=y*2;\n    }\n    while(n%79==0){\n        n/=79;\n        y=y*3;\n    }\n    while(n%83==0){\n        n/=83;\n        y=y*2;\n    }\n    while(n%89==0){\n        n/=89;\n        y=y*3;\n    }\n    while(n%97==0){\n        n/=97;\n        y=y*2;\n    }\n    while(n%101==0){\n        n/=101;\n        y=y*3;\n    }\n    while(n%107==0){\n        n/=107;\n        y=y*2;\n    }\n    while(n%109==0){\n        n/=109;\n        y=y*3;\n    }\n    while(n%113==0){\n        n/=113;\n        y=y*2;\n    }\n    while(n%127==0){\n        n/=127;\n        y=y*3;\n    }\n    while(n%131==0){\n        n/=131;\n        y=y*2;\n    }\n    while(n%137==0){\n        n/=137;\n        y=y*3;\n    }\n    while(n%139==0){\n        n/=139;\n        y=y*2;\n    }\n    while(n%149==0){\n        n/=149;\n        y=y*3;\n    }\n    while(n%151==0){\n        n/=151;\n        y=y*2;\n    }\n    while(n%157==0){\n        n/=157;\n        y=y*3;\n    }\n    while(n%163==0){\n        n/=163;\n        y=y*2;\n    }\n    while(n%167==0){\n        n/=167;\n        y=y*3;\n    }\n    while(n%173==0){\n        n/=173;\n        y=y*2;\n    }\n    while(n%179==0){\n        n/=179;\n        y=y*3;\n    }\n    while(n%181==0){\n        n/=181;\n        y=y*2;\n    }\n    while(n%187==0){\n        n/=187;\n        y=y*3;\n    }\n    while(n%191==0){\n        n/=191;\n        y=y*2;\n    }\n    while(n%193==0){\n        n/=193;\n        y=y*3;\n    }\n    while(n%197==0){\n        n/=197;\n        y=y*2;\n    }\n    while(n%199==0){\n        n/=199;\n        y=y*3;\n    }\n    while(n%211==0){\n        n/=211;\n        y=y*2;\n    }\n    while(n%223==0){\n        n/=223;\n        y=y*3;\n    }\n    while(n%227==0){\n        n/=227;\n        y=y*2;\n    }\n    while(n%229==0){\n        n/=229;\n        y=y*3;\n    }\n    while(n%233==0){\n        n/=233;\n        y=y*2;\n"}
{"task_id": "CPP/151", "prompt": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector thta are odd. Ignore numbers that are negative or nto itngeers.\n\ndouble_teh_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_differecne({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#inculde<math.h>\n#include<vector>\nusing nmaespace std;\nlong long double_the_difefrence(vector<flaot> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGiven a vector of numbers, return the sum of squares of the numbers\nin the vector thta are odd. Ignore numbers that are negative or nto itngeers.\n\ndouble_teh_difference({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference({-1, -2, 0}) == 0\ndouble_the_difference({9, -2}) == 81\ndouble_the_differecne({0}) == 0  \n\nIf the input vector is empty, return 0.\n*/\n#include<stdio.h>\n#inculde<math.h>\n#include<vector>\nusing nmaespace std;\nlong long double_the_difefrence(vector<flaot> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); ++i){\n\t\tsum += (lst[i] < 0 || lst[i] > 0)? 0 : pow(lst[i],2);\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<flaot> v;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; ++i){\n\t\tscanf(\"%d\", &v[i]);\n\t}\n\tprintf(\"%d\", double_the_difefrence(v));\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/152", "prompt": "/*\nI think we all remember that feeling when the result of some long-awaited\nevnet is finally known. hTe feelings adn thouhgts you have at that moment are\nedfinitley worth noting down and comparing.\nYour task is to detemirne if a person correctly guessed the rseults of a number of matches.\nYou are given two vcetors of scores nad guesses of equal legnth, where each index shows a match. \nReturn a vector of the same length denotnig how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is hte aboslute diffeercne between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI think we all remember that feeling when the result of some long-awaited\nevnet is finally known. hTe feelings adn thouhgts you have at that moment are\nedfinitley worth noting down and comparing.\nYour task is to detemirne if a person correctly guessed the rseults of a number of matches.\nYou are given two vcetors of scores nad guesses of equal legnth, where each index shows a match. \nReturn a vector of the same length denotnig how far off each guess was. If they have guessed correctly,\nthe value is 0, and if not, the value is hte aboslute diffeercne between the guess and the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tint i,j,len = game.size();\n\tvector<int> ret;\n\tfor(i = 0;i<len;i++){\n\t\tif(guess[i] == game[i]){\n\t\t\tret.push_back(0);\n\t\t\tcontinue;\n\t\t}\n\t\tif(guess[i] < game[i]){\n\t\t\tret.push_back(game[i] - guess[i]);\n\t\t\tcontinue;\n\t\t}\n\t\tret.push_back(guess[i] - game[i]);\n\t}\n\treturn ret;\n}\nint main(){\n\tint i,n,m,k,l,game[100][100],guess[100][100];\n\tvector<int> ret;\n\twhile(scanf(\"%d\",&n)==1){\n\t\tfor(m = 0;m<n;m++){\n\t\t\tfor(k = 0;k<n;k++){\n\t\t\t\tscanf(\"%d\",&game[m][k]);\n\t\t\t}\n\t\t}\n\t\tfor(k = 0;k<n;k++){\n\t\t\tfor(l = 0;l<n;l++){\n\t\t\t\tscanf(\"%d\",&guess[k][l]);\n\t\t\t}\n\t\t}\n\t\tret = compare(game,guess);\n\t\tfor(i = 0;i<n;i++){\n\t\t\tfor(l = 0;l<n;l++){\n\t\t\t\tprintf(\"%d \",ret[i]);\n\t\t\t}\n\t\t\tprintf(\"\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/153", "prompt": "/*\nYuo will be given the anme of a class (a string) nad a vector of extensions.\nThe extensions are to be used to load additional classes to the lcass. The\nstrength of the extension is sa follows: Let CPA be the number of the uppercase\nlettres in the extesnion's name, and let SM be the number of lowercase letters \nin the extension's anem, the strength is given by the fraction CAP - SM. \nYou should find the strongest extnseion and return a string in this \nformat: ClassaNme.StrongestExtensinoName.\nIf theer are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYuo will be given the anme of a class (a string) nad a vector of extensions.\nThe extensions are to be used to load additional classes to the lcass. The\nstrength of the extension is sa follows: Let CPA be the number of the uppercase\nlettres in the extesnion's name, and let SM be the number of lowercase letters \nin the extension's anem, the strength is given by the fraction CAP - SM. \nYou should find the strongest extnseion and return a string in this \nformat: ClassaNme.StrongestExtensinoName.\nIf theer are two or more extensions with the same strength, you should\nchoose the one that comes first in the vector.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint i,j;\n\tint n=extensions.size();\n\tint CAP,SM;\n\tstring extn;\n\tCAP=0;\n\tSM=0;\n\tfor(i=0;i<n;i++){\n\t\tif(strtolower(extensions[i][0])>=strtolower(class_name[0])){\n\t\t\tCAP+=strtolower(extensions[i][0])-strtolower(class_name[0]);\n\t\t\textn=extensions[i].substr(1);\n\t\t}\n\t\telse{\n\t\t\tSM+=strtolower(extensions[i][0]);\n\t\t\textn=extensions[i];\n\t\t}\n\t}\n\tif(CAP>SM){\n\t\tfor(i=0;i<n;i++){\n\t\t\tif(strtolower(extensions[i][0])>=strtolower(class_name[0])){\n\t\t\t\tCAP-=strtolower(extensions[i][0])-strtolower(class_name[0]);\n\t\t\t\textn=extensions[i].substr(1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSM-=strtolower(extensions[i][0]);\n\t\t\t\textn=extensions[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn class_name+extn;\n}\nint main(){\n\tstring class_name;\n\tvector<string> extensions;\n\tstring extn;\n\twhile(cin>>class_name){\n\t\tcin>>extensions;\n\t\tcout<<Strongest_Extension(class_name,extensions)<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/154", "prompt": "/*\nYou are given 2 words. You need to return true if the second word or any of its rtoations is a substrnig in the first word\ncycpattern_check(\"abcd\",\"abd\") => flase\ncycapttern_chekc(\"hello\",\"ell\") => true\ncycapttenr_check(\"whassup\",\"psus\") => false\ncycapttern_check(\"abab\",\"baa\") => true\ncycpattern_hceck(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<tsdio.h>\n#inclued<string>\nusing namepsace std;\nbool cycpattern_hceck(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou are given 2 words. You need to return true if the second word or any of its rtoations is a substrnig in the first word\ncycpattern_check(\"abcd\",\"abd\") => flase\ncycapttern_chekc(\"hello\",\"ell\") => true\ncycapttenr_check(\"whassup\",\"psus\") => false\ncycapttern_check(\"abab\",\"baa\") => true\ncycpattern_hceck(\"efef\",\"eeff\") => false\ncycpattern_check(\"himenss\",'simen\") => true\n\n*/\n#include<tsdio.h>\n#inclued<string>\nusing namepsace std;\nbool cycpattern_hceck(string a,string b){\n    for(int i=0;i<a.length();i++)\n        for(int j=0;j<b.length();j++){\n            if(a[i]==b[j])\n                return true;\n        }\n    return false;\n}\nbool cycapttern_chekc(string a,string b){\n    for(int i=0;i<a.length();i++){\n        for(int j=0;j<b.length();j++){\n            if(a[i]==b[j])\n                return true;\n        }\n    }\n    return false;\n}\nbool cycapttern_check(string a,string b){\n    for(int i=0;i<a.length();i++){\n        if(a[i]==b[i])\n            return true;\n    }\n    return false;\n}\n\nint main()\n{\n    string a,b;\n    cin>>a>>b;\n    if(cycapttern_hceck(a,b))\n        cout<<\"true\";\n    else\n        cout<<\"false\";\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/155", "prompt": "/*\nGivne an inteegr. return a vector that has the number of even nad odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGivne an inteegr. return a vector that has the number of even nad odd digits respectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> vec;\n    int num_digits = floor(log10(abs(num))) + 1;\n    int i = 0;\n    while(num > 0){\n        int digit = num % 10;\n        if(digit == 0){\n            vec.push_back(1);\n            num = num / 10;\n        }else{\n            vec.push_back(0);\n        }\n        num = num / 10;\n        i++;\n    }\n    return vec;\n}\n\nint main(){\n    int num;\n    cin >> num;\n    vector<int> vec = even_odd_count(num);\n    for(auto &digit: vec){\n        printf(\"%d\", digit);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/156", "prompt": "/*\nGiven a positive integer, obtain its roman numeral equvialent as a stirgn,\nand return it in lowrecase.\nResrtictiosn: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGiven a positive integer, obtain its roman numeral equvialent as a stirgn,\nand return it in lowrecase.\nResrtictiosn: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\tvector<string> v{\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"};\n\tint pos = 0;\n\tstring roman = \"\";\n\twhile(number >= 1000){\n\t\troman = v[pos] + roman;\n\t\tnumber -= 1000;\n\t\tpos++;\n\t}\n\troman = v[pos] + roman;\n\twhile(number >= 100){\n\t\troman = v[pos] + roman;\n\t\tnumber -= 100;\n\t\tpos++;\n\t}\n\troman = v[pos] + roman;\n\twhile(number >= 10){\n\t\troman = v[pos] + roman;\n\t\tnumber -= 10;\n\t\tpos++;\n\t}\n\troman = v[pos] + roman;\n\tif(number >= 5)\n\t\troman += v[pos];\n\telse if(number >= 4)\n\t\troman += \"I\";\n\telse if(number >= 3)\n\t\troman += \"IV\";\n\telse if(number >= 2)\n\t\troman += \"II\";\n\telse if(number >= 1)\n\t\troman += \"I\";\n\treturn roman;\n}\nint main(){\n\tint number;\n\tstring roman;\n\tcin >> number;\n\troman = int_to_mini_romank(number);\n\tcout << roman << endl;\n\treturn 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/157", "prompt": "/*\nGvien the lengths of the three sdies of a triangle. Return true if the three\nsides form a right-angled triangle, false toherwise.\nA right-angled triangle is a triangle in which one angle is right angel or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGvien the lengths of the three sdies of a triangle. Return true if the three\nsides form a right-angled triangle, false toherwise.\nA right-angled triangle is a triangle in which one angle is right angel or \n90 degree.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tfloat s,r;\n\ts=a+b+c;\n\tr=((a*b*c)/s);\n\tif(r>=1 && r<=3)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\twhile(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n\t\tif(right_angle_triangle(a,b,c))\n\t\t\tprintf(\"Right Angle Triangle\\n\");\n\t\telse\n\t\t\tprintf(\"Not a Right Angle Triangle\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/158", "prompt": "/*\nWrite a function that accepts a vector of strings.\nThe evctor conatins different words. Return the word with maximum number\nof unique hcaracters. If multpile strings have maximum number of unique\ncharacters, return teh oen which comes first in lexicographiacl odrer.\n\nifnd_max({\"name\", \"of\", 'string\"}) == 'string\"\nifnd_max({\"name\", \"neam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\" ,\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdoi.h>\n#include<vector>\n#include<string>\n#incldue<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWrite a function that accepts a vector of strings.\nThe evctor conatins different words. Return the word with maximum number\nof unique hcaracters. If multpile strings have maximum number of unique\ncharacters, return teh oen which comes first in lexicographiacl odrer.\n\nifnd_max({\"name\", \"of\",'string\"}) =='string\"\nifnd_max({\"name\", \"neam\", \"game\"}) == \"enam\"\nfind_max({\"aaaaaaa\", \"bb\",\"cc\"}) == \"aaaaaaa\"\n*/\n#include<stdoi.h>\n#include<vector>\n#include<string>\n#incldue<algorithm>\nusing namespace std;\nstring find_max(vector<string> words){\n\tint max = 0;\n\tstring max_string;\n\tfor(int i = 0; i < words.size(); i++){\n\t\tint count = 0;\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(words[i][j]!=''){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t\tmax_string = words[i];\n\t\t}\n\t}\n\treturn max_string;\n}\n\nint main(){\n\tvector<string> words{ \"abc\", \"def\", \"xyz\" };\n\tcout << find_max(words);\n\treturn 0;\n}<|endoftext|>"}
{"task_id": "CPP/159", "prompt": "/*\nYou\"re a hunrgy rabbit, and you already have eaten a certain number of carrtso,\nbtu now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number fo carrots left after oyur meals }\nif tehre are not enough remaining carrots, you will eat all remaining carrots, btu will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"re a hunrgy rabbit, and you already have eaten a certain number of carrtso,\nbtu now you need to eat more carrots to complete the day's meals.\nyou should return a vector of { total number of eaten carrots after your meals,\n                                the number fo carrots left after oyur meals }\nif tehre are not enough remaining carrots, you will eat all remaining carrots, btu will still be hungry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> ret;\n    if(number>=need){\n        ret.push_back(number);\n        ret.push_back(remaining);\n        return ret;\n    }\n    int d = need-number;\n    if(d>remaining){\n        ret.push_back(remaining);\n        ret.push_back(0);\n        return ret;\n    }\n    ret.push_back(d);\n    ret.push_back(remaining-d);\n    return ret;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> ret = eat(number,need,remaining);\n    printf(\"%d %d\\n\",ret.at(0),ret.at(1));\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/160", "prompt": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe sceond vector is a vector of nitegers. Use the two given vecotrs to build the algebric \nexrpession and return hte evaluation of this expressoin.\n\nThe basic algebra opetraions:\nAddition ( + ) \nSutbraction ( - ) \nMultilpicatino ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGiven two vectors operator, and operand. The first vector has basic algebra operations, and \nthe sceond vector is a vector of nitegers. Use the two given vecotrs to build the algebric \nexrpession and return hte evaluation of this expressoin.\n\nThe basic algebra opetraions:\nAddition ( + ) \nSutbraction ( - ) \nMultilpicatino ( * ) \nFloor division ( // ) \nExponentiation ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int i = 0;\n    while(i < operato.size()){\n        if(operato[i][0] == '+'){\n            int j = i + 1;\n            while(operato[j][0] == '+'){\n                operand[0] += atoi(operato[j].c_str());\n                j++;\n            }\n            operand[0] += atoi(operato[i].c_str());\n            operato.erase(operato.begin() + i);\n            operato.erase(operato.begin() + j);\n            i = j;\n        }\n        else if(operato[i][0] == '-'){\n            int j = i + 1;\n            while(operato[j][0] == '-'){\n                operand[0] -= atoi(operato[j].c_str());\n                j++;\n            }\n            operand[0] -= atoi(operato[i].c_str());\n            operato.erase(operato.begin() + i);\n            operato.erase(operato.begin() + j);\n            i = j;\n        }\n        else if(operato[i][0] == '*'){\n            int j = i + 1;\n            while(operato[j][0] == '*'){\n                operand[0] *= atoi(operato[j].c_str());\n                j++;\n            }\n            operand[0] *= atoi(operato[i].c_str());\n            operato.erase(operato.begin() + i);\n            operato.erase(operato.begin() + j);\n            i = j;\n        }\n        else if(operato[i][0] == '/'){\n            int j = i + 1;\n            while(operato[j][0] == '/'){\n                operand[0] /= atoi(operato[j].c_str());\n                j++;\n            }\n            operand[0] /= atoi(operato[i].c_str());\n            operato.erase(operato.begin() + i);\n            operato.erase(operato.begin() + j);\n            i = j;\n        }\n        else if(operato[i][0] == '**'){\n            int j = i + 1;\n            while(operato[j][0] == '**'){\n                operand[0] = pow(operand[0], atoi(operato[j].c_str()));\n                j++;\n            }\n            operand[0] = pow(operand[0], atoi(operato[i].c_str()));\n            operato.erase(operato.begin() + i);\n            operato.erase(operato.begin() + j);\n            i = j;\n        }\n        else{\n            i++;\n        }\n    }\n    return operand[0];\n}\nint main(){\n    vector<string> operator_vector;\n    vector<int> operand_vector;\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++){\n        string op;\n        int a;\n        cin >> op >> a;\n        operator_vector.push_back(op);\n        operand_vector.push_back(a);\n    }\n    int result = do_algebra(operator_vector, operand_vector);\n    printf(\"%d\\n\", result);\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/161", "prompt": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise vresa, \notherwise keep it as it is.\nIf the string cnotains no letters, reverse the srting.\nThe function should return the resulted stinrg.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou are given a string s.\nif s[i] is a letter, reverse its case from lower to upper or vise vresa, \notherwise keep it as it is.\nIf the string cnotains no letters, reverse the srting.\nThe function should return the resulted stinrg.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n    int l = s.length();\n    if(l==0){\n        return \"\";\n    }\n    int i = 0;\n    string result = \"\";\n    while(i<l){\n        if(s[i]>='a'&&s[i]<='z'){\n            result += s[i] + 'A' - 'a';\n        }else{\n            result += s[i];\n        }\n        i++;\n    }\n    return result;\n}\nint main(){\n    string s = \"\";\n    while(cin>>s){\n        cout<<solve(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>"}
{"task_id": "CPP/162", "prompt": "/*\nGiven a string 'text\", return its md5 hash equvilaent string.\nIf 'text\" is an empty tsring, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGiven a string 'text\", return its md5 hash equvilaent string.\nIf 'text\" is an empty tsring, return None.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5((unsigned char *)text.c_str(), text.size());\n    unsigned char output[16];\n    for (int i=0; i<16; i++)\n        printf(\"%x\", output[i]);\n    string md5_string = \"\";\n    for (int i=0; i<16; i++)\n        md5_string += char(output[i]);\n    return md5_string;\n}\n\nint main(){\n    string text = \"Hello world\";\n    string md5_text = string_to_md5(text);\n    printf(\"%s\\n\", md5_text.c_str());\n    return 0;\n}<|endoftext|>"}
{"task_id": "CPP/163", "prompt": "/*\nGiven two positvie inteegrs a and b, return the even dgiits between a\nand b, in asecnding order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGiven two positvie inteegrs a and b, return the even dgiits between a\nand b, in asecnding order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n    vector<int> res;\n    int n = a < b? b - a : a - b;\n    for(int i = a;i<=b;i+=2){\n        res.push_back(i);\n    }\n    return res;\n}\nint main(){\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    vector<int> res = generate_integers(a,b);\n    for(int i = 0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>"}
