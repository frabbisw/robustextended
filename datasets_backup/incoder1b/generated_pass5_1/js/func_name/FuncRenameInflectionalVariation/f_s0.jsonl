{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "<|endoftext|>/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  const closest = numbers.reduce((prev, cur) => {\n    const diff = Math.abs(cur - prev);\n    return diff < threshold? cur : prev;\n  }, null);\n  return closest!== null;\n};\n\nconst isInRange = (value, min, max) => {\n  return value >= min && value <= max;\n};\n\nconst isInRangeOrNull = (value, min, max) => {\n  return isInRange(value, min, max) || value || null;\n};\n\nconst isInRangeOrUndefined = (value, min, max) => {\n  return isInRangeOrNull(value, min, max) || isUndefined(value);\n};\n\nconst isInRangeOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrNullOrUndefined(value, min, max) || isUndefined(value);\n};\n\nconst isInRangeOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNull(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNull(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined(value, min, max) || value === null;\n};\n\nconst isInRangeOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (value, min, max) => {\n  return isInRangeOrUndefinedOrNullOrUndefinedOr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "<|endoftext|>/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const paren_groups = paren_string.split(')');\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    const paren_group_open_brace = paren_group.indexOf('(');\n    const paren_group_close_brace = paren_group.indexOf(')');\n    if (paren_group_open_brace === -1 || paren_group_close_brace === -1) {\n      console.error('Invalid paren group:'+ paren_group);\n      return [];\n    }\n    if (paren_group_open_brace === paren_group_close_brace) {\n      paren_group_string += paren_group;\n    } else {\n      if (paren_group_open_brace > paren_group_close_brace) {\n        console.error('Invalid paren group:'+ paren_group);\n        return [];\n      }\n      paren_group_string += paren_group.substring(0, paren_group_open_brace);\n      paren_group_string += paren_group.substring(paren_group_close_brace + 1);\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return a list of all strings within each group.\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_groups = paren_string.split(')');\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    const paren_group_open_brace = paren_group.indexOf('(');\n    const paren_group_close_brace = paren_group.indexOf(')');\n    if (paren_group_open_brace === -1 || paren_group_close_brace === -1) {\n      console.error('Invalid paren group:'+ paren_group);\n      return [];\n    }\n    if (paren_group_open_brace === paren_group_close_brace) {\n      paren_group_string += paren_group;\n    } else {\n      if (paren_group_open_brace > paren_group_close_brace) {\n        console.error('Invalid paren group:'+ paren_group);\n        return [];\n      }\n      paren_group_string += paren_group.substring(0, paren_group_open_brace);\n      paren_group_string += paren_group.substring(paren_group_close_brace + 1);\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return a list of all strings within each group.\n  Ignore any spaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.split(')');\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    const paren_group_open_brace = paren_group.indexOf('(');\n    const paren_group_close_brace = paren_group.indexOf(')');\n    if (paren_group_open_brace === -1 || paren_group_close_brace === -1) {\n      console.error('Invalid paren group:'+ paren_group);\n      return [];\n    }\n    if (paren_group_open_brace === paren_group_close_brace) {\n      paren_group_string += paren_group;\n    } else {\n      if (paren_group_open_brace > paren_group_close_brace) {\n        console.error('Invalid paren group:'+ paren_group);\n        return [];\n      }\n      paren_group_string += paren_group.substring(0, paren_group_open_brace);\n      paren_group_string += paren_group.substring(paren_group_close_brace + 1);\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return a list of all strings within each group.\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsIgnoreSpaces('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.split(')');\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    const paren_group_open_brace = paren_group.indexOf('(');\n    const paren_group_close_brace = paren_group.indexOf(')');\n    if (paren_group_open_brace === -1 || paren_group_close_brace === -1) {\n      console.error('Invalid paren group:'+ paren_group);\n      return [];\n    }\n    if (paren_group_open_brace === paren_group_close_brace) {\n      paren_group_string += paren_group;\n    } else {\n      if (paren_group_open_brace > paren_group_close_brace) {\n        console.error('Invalid paren group:'+ paren_group);\n        return [];\n      }\n      paren_group_string += paren_group.substring(0, paren_group_open_brace);\n      paren_group_string += paren_group.substring(paren_group_close_brace + 1);\n    }\n    paren_group_strings.push(paren_group_string);\n  }\n  return paren_group_strings;\n};\n\n/**\n  Given a string containing multiple groups of parentheses, return a list of all strings within each group.\n  Ignore any spaces in the input string.\n  >>> separateParenGroupsIgnoreSpacesIgnoreSpaces('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroupsIgnoreSpacesIgnoreSpacesIgnoreSpaces = (paren_string) => {\n  const paren_groups = paren_string.split(')');\n  const paren_group_strings = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren_group = paren_groups[i];\n    const paren_group_string = '';\n    const paren_group_open_brace = paren_group.indexOf('(');\n    const paren_group_close_brace = paren_group.indexOf(')');\n    if (paren_group_open_brace === -1 || paren_group_close_brace === -1) {\n      console.error('Invalid paren group:'+ paren_group);\n      return [];\n    }\n    if (paren_group_open_brace === paren_group_close_brace) {\n      paren_group_string += paren_group;\n    } else {\n      if (paren_group_open_brace > paren_group_close_brace) {\n        console.error('Invalid paren group:'+ paren_group);\n        return [];\n      }\n      paren_group_string += paren_group.substring(0, paren_group_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  let palindromeLength = 0;\n  let palindromePrefix = string;\n  let palindromeSuffix = string;\n  let palindromePrefixLength = string.length;\n  let palindromeSuffixLength = string.length;\n  let palindromePrefixEnd = palindromePrefixLength - 1;\n  let palindromeSuffixEnd = palindromeSuffixLength - 1;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palindromeSuffixEnd;\n  let palindromePrefixEnd = palindromePrefixEnd < 0? palindromePrefixEnd + 1 : palindromePrefixEnd;\n  let palindromeSuffixEnd = palindromeSuffixEnd < 0? palindromeSuffixEnd + 1 : palin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "<|endoftext|>/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const stones = [...Array(Math.pow(2, n))].map((_, i) => i);\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => []);\n  for (let i = 0; i < stones.length; i += 1) {\n    const level = levels[stones[i]];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst makeLevel = (n) => {\n  const level = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < level.length; i += 1) {\n    const level = level[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return level;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevel(3)\n  [3, 5, 7]\n  */\nconst makeLevels = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevels(3)\n  [3, 5, 7]\n  */\nconst makeLevelsOddEven = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevelsOddEven(3)\n  [3, 5, 7]\n  */\nconst makeLevelsOddEvenEven = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevelsOddEvenEven(3)\n  [3, 5, 7]\n  */\nconst makeLevelsOddEvenEvenEven = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevelsOddEvenEvenEvenEven(3)\n  [3, 5, 7]\n  */\nconst makeLevelsOddEvenEvenEvenEvenEven = (n) => {\n  const levels = [...Array(Math.pow(2, n))].map((_, i) => i);\n  for (let i = 0; i < levels.length; i += 1) {\n    const level = levels[i];\n    if (level.length < n) {\n      level.push(0);\n    }\n  }\n  return levels;\n};\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeLevelsOddEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEvenEven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "<|endoftext|>/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  const words = s.split(',').map(w => w.trim());\n  return words;\n};\n\n/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "<|endoftext|>/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = 0;\n  let max = 0;\n  let min = 0;\n  let even = 0;\n  let odd = 0;\n  let evenNum = 0;\n  let oddNum = 0;\n  let evenNum2 = 0;\n  let oddNum2 = 0;\n  let evenNum3 = 0;\n  let oddNum3 = 0;\n  let evenNum4 = 0;\n  let oddNum4 = 0;\n  let evenNum5 = 0;\n  let oddNum5 = 0;\n  let evenNum6 = 0;\n  let oddNum6 = 0;\n  let evenNum7 = 0;\n  let oddNum7 = 0;\n  let evenNum8 = 0;\n  let oddNum8 = 0;\n  let evenNum9 = 0;\n  let oddNum9 = 0;\n  let evenNum10 = 0;\n  let oddNum10 = 0;\n  let evenNum11 = 0;\n  let oddNum11 = 0;\n  let evenNum12 = 0;\n  let oddNum12 = 0;\n  let evenNum13 = 0;\n  let oddNum13 = 0;\n  let evenNum14 = 0;\n  let oddNum14 = 0;\n  let evenNum15 = 0;\n  let oddNum15 = 0;\n  let evenNum16 = 0;\n  let oddNum16 = 0;\n  let evenNum17 = 0;\n  let oddNum17 = 0;\n  let evenNum18 = 0;\n  let oddNum18 = 0;\n  let evenNum19 = 0;\n  let oddNum19 = 0;\n  let evenNum20 = 0;\n  let oddNum20 = 0;\n  let evenNum21 = 0;\n  let oddNum21 = 0;\n  let evenNum22 = 0;\n  let oddNum22 = 0;\n  let evenNum23 = 0;\n  let oddNum23 = 0;\n  let evenNum24 = 0;\n  let oddNum24 = 0;\n  let evenNum25 = 0;\n  let oddNum25 = 0;\n  let evenNum26 = 0;\n  let oddNum26 = 0;\n  let evenNum27 = 0;\n  let oddNum27 = 0;\n  let evenNum28 = 0;\n  let oddNum28 = 0;\n  let evenNum29 = 0;\n  let oddNum29 = 0;\n  let evenNum30 = 0;\n  let oddNum30 = 0;\n  let evenNum31 = 0;\n  let oddNum31 = 0;\n  let evenNum32 = 0;\n  let oddNum32 = 0;\n  let evenNum33 = 0;\n  let oddNum33 = 0;\n  let evenNum34 = 0;\n  let oddNum34 = 0;\n  let evenNum35 = 0;\n  let oddNum35 = 0;\n  let evenNum36 = 0;\n  let oddNum36 = 0;\n  let evenNum37 = 0;\n  let oddNum37 = 0;\n  let evenNum38 = 0;\n  let oddNum38 = 0;\n  let evenNum39 = 0;\n  let oddNum39 = 0;\n  let evenNum40 = 0;\n  let oddNum40 = 0;\n  let evenNum41 = 0;\n  let oddNum41 = 0;\n  let evenNum42 = 0;\n  let oddNum42 = 0;\n  let evenNum43 = 0;\n  let oddNum43 = 0;\n  let evenNum44 = 0;\n  let oddNum44 = 0;\n  let evenNum45 = 0;\n  let oddNum45 = 0;\n  let evenNum46 = 0;\n  let oddNum46 = 0;\n  let evenNum47 = 0;\n  let oddNum47 = 0;\n  let evenNum48 = 0;\n  let oddNum48 = 0;\n  let evenNum49 = 0;\n  let oddNum49 = 0;\n  let evenNum50 = 0;\n  let oddNum50 = 0;\n  let evenNum51 = 0;\n  let oddNum51 = 0;\n  let evenNum52 = 0;\n  let oddNum52 = 0;\n  let evenNum53 = 0;\n  let oddNum53 = 0;\n  let evenNum54 = 0;\n  let oddNum54 = 0;\n  let evenNum55 = 0;\n  let oddNum55 = 0;\n  let evenNum56 = 0;\n  let oddNum56 = 0;\n  let evenNum57 = 0;\n  let oddNum57 = 0;\n  let evenNum58 = 0;\n  let oddNum58 = 0;\n  let evenNum59 = 0;\n  let oddNum59 = 0;\n  let evenNum60 = 0;\n  let oddNum60 = 0;\n  let evenNum61 = 0;\n  let oddNum61 = 0;\n  let evenNum62 = 0;\n  let oddNum62 = 0;\n  let evenNum63 = 0;\n  let oddNum63 = 0;\n  let evenNum64 = 0;\n  let oddNum64 = 0;\n  let evenNum65 = 0;\n  let oddNum65 = 0;\n  let evenNum66 = 0;\n  let oddNum66 = 0;\n  let evenNum67 = 0;\n  let oddNum67 = 0;\n  let evenNum68 = 0;\n  let oddNum68 = 0;\n  let evenNum69 = 0;\n  let oddNum69 = 0;\n  let evenNum70 = 0;\n  let oddNum70 = 0;\n  let evenNum71 = 0;\n  let oddNum71 = 0;\n  let evenNum72 = 0;\n  let oddNum72 = 0;\n  let evenNum73 = 0;\n  let oddNum73 = 0;\n  let evenNum74 = 0;\n  let oddNum74 = 0;\n  let evenNum75 = 0;\n  let oddNum75 = 0;\n  let evenNum76 = 0;\n  let oddNum76 = 0;\n  let evenNum77 = 0;\n  let oddNum77 = 0;\n  let evenNum78 = 0;\n  let oddNum78 = 0;\n  let evenNum79 = 0;\n  let oddNum79 = 0;\n  let evenNum80 = 0;\n  let oddNum80 = 0;\n  let evenNum81 = 0;\n  let oddNum81 = 0;\n  let evenNum82 = 0;\n  let oddNum82 = 0;\n  let evenNum83 = 0;\n  let oddNum83 = 0;\n  let evenNum84 = 0;\n  let oddNum84 = 0;\n  let evenNum85 = 0;\n  let oddNum85 = 0;\n  let evenNum86 = 0;\n  let oddNum86 = 0;\n  let evenNum87 = 0;\n  let oddNum87 = 0;\n  let evenNum88 = 0;\n  let oddNum88 = 0;\n  let evenNum89 = 0;\n  let oddNum89 = 0;\n  let evenNum90 = 0;\n  let oddNum90 = 0;\n  let evenNum91 = 0;\n  let oddNum91 = 0;\n  let evenNum92 = 0;\n  let oddNum92 = 0;\n  let evenNum93 = 0;\n  let oddNum93 = 0;\n  let evenNum94 = 0;\n  let oddNum94 = 0;\n  let evenNum95 = 0;\n  let oddNum95 = 0;\n  let evenNum96 = 0;\n  let oddNum96 = 0;\n  let evenNum97 = 0;\n  let oddNum97 = 0;\n  let evenNum98 = 0;\n  let oddNum98 = 0;\n  let evenNum99 = 0;\n  let oddNum99 = 0;\n  let evenNum100 = 0;\n  let oddNum100 = 0;\n  let evenNum101 = 0;\n  let oddNum101 = 0;\n  let evenNum102 = 0;\n  let oddNum102 = 0;\n  let evenNum103 = 0;\n  let oddNum103 = 0;\n  let evenNum104 = 0;\n  let oddNum104 = 0;\n  let evenNum105 = 0;\n  let oddNum105 = 0;\n  let evenNum106 = 0;\n  let oddNum106 = 0;\n  let evenNum107 = 0;\n  let oddNum107 = 0;\n  let evenNum108 = 0;\n  let oddNum108 = 0;\n  let evenNum109 = 0;\n  let oddNum109 = 0;\n  let evenNum110 = 0;\n  let oddNum110 = 0;\n  let evenNum111 = 0;\n  let oddNum111 = 0;\n  let evenNum112 = 0;\n  let oddNum112 = 0;\n  let evenNum113 = 0;\n  let oddNum113 = 0;\n  let evenNum114 = 0;\n  let oddNum114 = 0;\n  let evenNum115 = 0;\n  let oddNum115 = 0;\n  let evenNum116 = 0;\n  let oddNum116 = 0;\n  let evenNum117 = 0;\n  let oddNum117 = 0;\n  let evenNum118 = 0;\n  let oddNum118 = 0;\n  let evenNum119 = 0;\n  let oddNum119 = 0;\n  let evenNum120 = 0;\n  let oddNum120 = 0;\n  let evenNum121 = 0;\n  let oddNum121 = 0;\n  let evenNum122 = 0;\n  let ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "<|endoftext|>/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  sum of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingSum(1, 5) => \"0b11\"\n  roundingSum(7, 5) => -1\n  roundingSum(10, 20) => \"0b1111\"\n  roundingSum(20, 33) => \"0b11010\"\n  */\nconst roundingSum = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  binary = sum.toString(2);\n  if (count > 1) {\n    return binary;\n  } else {\n    return -1;\n  }\n};\n\n/*\n  You are given two positive integers n and m, and your task is to compute the\n  difference of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingDiff(1, 5) => \"0b11\"\n  roundingDiff(7, 5) => -1\n  roundingDiff(10, 20) => \"0b1111\"\n  roundingDiff(20, 33) => \"0b11010\"\n  */\nconst roundingDiff = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  let binary = \"\";\n  for (let i = n; i <= m", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "<|endoftext|>/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2 === 0) {\n      res.push(item);\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      res.push(item);\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueEvenDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      res.push(item);\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        res.push(item);\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenEvenDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        if (item % 2 === 0) {\n          res.push(item);\n        }\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenEvenDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenOddDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        if (item % 2 === 0) {\n          if (item % 2 === 1) {\n            res.push(item);\n          }\n        }\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has even digit and has odd digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenOddDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenOddDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenOddEvenDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        if (item % 2 === 0) {\n          if (item % 2 === 1) {\n            if (item % 2 === 0) {\n              res.push(item);\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenOddEvenDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenOddEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenOddOddEvenDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        if (item % 2 === 0) {\n          if (item % 2 === 1) {\n            if (item % 2 === 0) {\n              if (item % 2 === 1) {\n                if (item % 2 === 0) {\n                  res.push(item);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenOddOddEvenDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenOddOddEvenDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueOddOrEvenOddOddOddEvenOddDigit = (x) => {\n  const res = [];\n  \n  x.forEach((item) => {\n    if (item % 2!== 0) {\n      if (item % 2 === 1) {\n        if (item % 2 === 0) {\n          if (item % 2 === 1) {\n            if (item % 2 === 0) {\n              if (item % 2 === 1) {\n                if (item % 2 === 0) {\n                  if (item % 2 === 1) {\n                    if (item % 2 === 0) {\n                      if (item % 2 === 1) {\n                        if (item % 2 === 0) {\n                          res.push(item);\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  \n  return res;\n};\n\n/*Given a list of positive integers x. return a sorted list of all \n  elements that has odd or even digit and has odd or even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueOddOrEvenOddOddEvenOddOddDigit([15, 33, 1422, 1])\n  [1422, 1, 15]\n  >>> uniqueOddOrEvenOddOddEvenOddOddDigit([152, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "<|endoftext|>/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byName = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byNameReversedReversedReversedReversed = (arr) => {\n  const len = arr.length;\n  const reversed = arr.slice().reverse();\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(reversed[i]);\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "<|endoftext|>/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function g that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  g(5) == [1, 2, 6, 24, 15]\n  */\nconst g = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function h that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  h(5) == [1, 2, 6, 24, 15]\n  */\nconst h = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function i that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  i(5) == [1, 2, 6, 24, 15]\n  */\nconst i = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function j that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  j(5) == [1, 2, 6, 24, 15]\n  */\nconst j = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function k that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  k(5) == [1, 2, 6, 24, 15]\n  */\nconst k = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function l that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  l(5) == [1, 2, 6, 24, 15]\n  */\nconst l = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function m that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  m(5) == [1, 2, 6, 24, 15]\n  */\nconst m = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function n that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  n(5) == [1, 2, 6, 24, 15]\n  */\nconst n = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function o that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common divisor of i is the product of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  o(5) == [1, 2, 6, 24, 15]\n  */\nconst o = (n) => {\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i);\n    } else {\n      result.push(result.reduce((acc, val) => acc + val * i, 1));\n    }\n  }\n  return result;\n};\n\n/* Implement the function p that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the greatest common divisor of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the greatest common ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...evenPalindromes,...oddPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(2, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (2, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(3, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (3, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(4, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (4, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(5, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (5, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(6, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (6, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {\n  const evenPalindromes = Array.from({ length: n }, (_, i) => i % 2 === 0).filter(Boolean);\n  const oddPalindromes = Array.from({ length: n }, (_, i) => i % 2!== 0).filter(Boolean);\n  return [...oddPalindromes,...evenPalindromes];\n};\n\n// Given a positive integer n, return a tuple that has the number of even and odd\n// integer palindromes that fall within the range(7, n), inclusive.\n\n// Example 1:\n\n//     Input: 3\n//     Output: (7, 1)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n// Example 2:\n\n//     Input: 12\n//     Output: (4, 6)\n//     Explanation:\n//     Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n// Note:\n//     1. 1 <= n <= 10^3\n//     2. returned tuple has the number of even and odd integer palindromes respectively.\nconst evenOdderPalindrome = (n) => {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "<|endoftext|>/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 0\n  >>> countZeros([1, 1, 2]) == 0\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 0\n  >>> countOdds([1, 1, 2]) == 0\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countZeros which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countZeros([]) == 0\n  >>> countZeros([-1, 11, -11]) == 0\n  >>> countZeros([1, 1, 2]) == 0\n  */\nconst countZeros = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 0\n  >>> countOdds([1, 1, 2]) == 0\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 0\n  >>> countOdds([1, 1, 2]) == 0\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countOdds([]) == 0\n  >>> countOdds([-1, 11, -11]) == 0\n  >>> countOdds([1, 1, 2]) == 0\n  */\nconst countOdds = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countEvens which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countEvens([]) == 0\n  >>> countEvens([-1, 11, -11]) == 0\n  >>> countEvens([1, 1, 2]) == 0\n  */\nconst countEvens = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const num = arr[i];\n    if (num >= 0) {\n      count += num >= 0? 1 : 0;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function countOdds which takes an array of integers and returns\n  the number of elements which has a sum of digits == 0.\n  If a number is negative, then its first signed digit will be negative:", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "<|endoftext|>/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let result = true;\n  let arrLength = arr.length;\n  let arrTemp = [];\n  let arrTemp2 = [];\n  let arrTemp3 = [];\n  let arrTemp4 = [];\n  let arrTemp5 = [];\n  let arrTemp6 = [];\n  let arrTemp7 = [];\n  let arrTemp8 = [];\n  let arrTemp9 = [];\n  let arrTemp10 = [];\n  let arrTemp11 = [];\n  let arrTemp12 = [];\n  let arrTemp13 = [];\n  let arrTemp14 = [];\n  let arrTemp15 = [];\n  let arrTemp16 = [];\n  let arrTemp17 = [];\n  let arrTemp18 = [];\n  let arrTemp19 = [];\n  let arrTemp20 = [];\n  let arrTemp21 = [];\n  let arrTemp22 = [];\n  let arrTemp23 = [];\n  let arrTemp24 = [];\n  let arrTemp25 = [];\n  let arrTemp26 = [];\n  let arrTemp27 = [];\n  let arrTemp28 = [];\n  let arrTemp29 = [];\n  let arrTemp30 = [];\n  let arrTemp31 = [];\n  let arrTemp32 = [];\n  let arrTemp33 = [];\n  let arrTemp34 = [];\n  let arrTemp35 = [];\n  let arrTemp36 = [];\n  let arrTemp37 = [];\n  let arrTemp38 = [];\n  let arrTemp39 = [];\n  let arrTemp40 = [];\n  let arrTemp41 = [];\n  let arrTemp42 = [];\n  let arrTemp43 = [];\n  let arrTemp44 = [];\n  let arrTemp45 = [];\n  let arrTemp46 = [];\n  let arrTemp47 = [];\n  let arrTemp48 = [];\n  let arrTemp49 = [];\n  let arrTemp50 = [];\n  let arrTemp51 = [];\n  let arrTemp52 = [];\n  let arrTemp53 = [];\n  let arrTemp54 = [];\n  let arrTemp55 = [];\n  let arrTemp56 = [];\n  let arrTemp57 = [];\n  let arrTemp58 = [];\n  let arrTemp59 = [];\n  let arrTemp60 = [];\n  let arrTemp61 = [];\n  let arrTemp62 = [];\n  let arrTemp63 = [];\n  let arrTemp64 = [];\n  let arrTemp65 = [];\n  let arrTemp66 = [];\n  let arrTemp67 = [];\n  let arrTemp68 = [];\n  let arrTemp69 = [];\n  let arrTemp70 = [];\n  let arrTemp71 = [];\n  let arrTemp72 = [];\n  let arrTemp73 = [];\n  let arrTemp74 = [];\n  let arrTemp75 = [];\n  let arrTemp76 = [];\n  let arrTemp77 = [];\n  let arrTemp78 = [];\n  let arrTemp79 = [];\n  let arrTemp80 = [];\n  let arrTemp81 = [];\n  let arrTemp82 = [];\n  let arrTemp83 = [];\n  let arrTemp84 = [];\n  let arrTemp85 = [];\n  let arrTemp86 = [];\n  let arrTemp87 = [];\n  let arrTemp88 = [];\n  let arrTemp89 = [];\n  let arrTemp90 = [];\n  let arrTemp91 = [];\n  let arrTemp92 = [];\n  let arrTemp93 = [];\n  let arrTemp94 = [];\n  let arrTemp95 = [];\n  let arrTemp96 = [];\n  let arrTemp97 = [];\n  let arrTemp98 = [];\n  let arrTemp99 = [];\n  let arrTemp100 = [];\n  let arrTemp101 = [];\n  let arrTemp102 = [];\n  let arrTemp103 = [];\n  let arrTemp104 = [];\n  let arrTemp105 = [];\n  let arrTemp106 = [];\n  let arrTemp107 = [];\n  let arrTemp108 = [];\n  let arrTemp109 = [];\n  let arrTemp110 = [];\n  let arrTemp111 = [];\n  let arrTemp112 = [];\n  let arrTemp113 = [];\n  let arrTemp114 = [];\n  let arrTemp115 = [];\n  let arrTemp116 = [];\n  let arrTemp117 = [];\n  let arrTemp118 = [];\n  let arrTemp119 = [];\n  let arrTemp120 = [];\n  let arrTemp121 = [];\n  let arrTemp122 = [];\n  let arrTemp123 = [];\n  let arrTemp124 = [];\n  let arrTemp125 = [];\n  let arrTemp126 = [];\n  let arrTemp127 = [];\n  let arrTemp128 = [];\n  let arrTemp129 = [];\n  let arrTemp130 = [];\n  let arrTemp131 = [];\n  let arrTemp132 = [];\n  let arrTemp133 = [];\n  let arrTemp134 = [];\n  let arrTemp135 = [];\n  let arrTemp136 = [];\n  let arrTemp137 = [];\n  let arrTemp138 = [];\n  let arrTemp139 = [];\n  let arrTemp140 = [];\n  let arrTemp141 = [];\n  let arrTemp142 = [];\n  let arrTemp143 = [];\n  let arrTemp144 = [];\n  let arrTemp145 = [];\n  let arrTemp146 = [];\n  let arrTemp147 = [];\n  let arrTemp148 = [];\n  let arrTemp149 = [];\n  let arrTemp150 = [];\n  let arrTemp151 = [];\n  let arrTemp152 = [];\n  let arrTemp153 = [];\n  let arrTemp154 = [];\n  let arrTemp155 = [];\n  let arrTemp156 = [];\n  let arrTemp157 = [];\n  let arrTemp158 = [];\n  let arrTemp159 = [];\n  let arrTemp160 = [];\n  let arrTemp161 = [];\n  let arrTemp162 = [];\n  let arrTemp163 = [];\n  let arrTemp164 = [];\n  let arrTemp165 = [];\n  let arrTemp166 = [];\n  let arrTemp167 = [];\n  let arrTemp168 = [];\n  let arrTemp169 = [];\n  let arrTemp170 = [];\n  let arrTemp171 = [];\n  let arrTemp172 = [];\n  let arrTemp173 = [];\n  let arrTemp174 = [];\n  let arrTemp175 = [];\n  let arrTemp176 = [];\n  let arrTemp177 = [];\n  let arrTemp178 = [];\n  let arrTemp179 = [];\n  let arrTemp180 = [];\n  let arrTemp181 = [];\n  let arrTemp182 = [];\n  let arrTemp183 = [];\n  let arrTemp184 = [];\n  let arrTemp185 = [];\n  let arrTemp186 = [];\n  let arrTemp187 = [];\n  let arrTemp188 = [];\n  let arrTemp189 = [];\n  let arrTemp190 = [];\n  let arrTemp191 = [];\n  let arrTemp192 = [];\n  let arrTemp193 = [];\n  let arrTemp194 = [];\n  let arrTemp195 = [];\n  let arrTemp196 = [];\n  let arrTemp197 = [];\n  let arrTemp198 = [];\n  let arrTemp199 = [];\n  let arrTemp200 = [];\n  let arrTemp201 = [];\n  let arrTemp202 = [];\n  let arrTemp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "<|endoftext|>/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  return stringXorX(a, b);\n};\n\n/**\n  Perform binary XOR on two strings.\n  >>> stringXorX('010', '110')\n  '100'\n  */\nconst stringXorX = (a, b) => {\n  let result = '';\n  for (let i = 0; i < a.length; i++) {\n    result += a[i] ^ b[i];\n  }\n  return result;\n};\n\n/**\n  Convert a string to binary representation\n  >>> stringToBinary('010')\n  '1010'\n  */\nconst stringToBinary = str => {\n  let result = '';\n  for (let i = 0; i < str.length; i++) {\n    result += str[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert binary to string\n  >>> binaryToString(101010)\n  '1010'\n  */\nconst binaryToString = binary => {\n  let result = '';\n  for (let i = 0; i < binary.length; i++) {\n    result += binary[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert binary to hexadecimal representation\n  >>> binaryToHex(101010)\n  '0x1010'\n  */\nconst binaryToHex = binary => {\n  let result = '';\n  for (let i = 0; i < binary.length; i++) {\n    result += binary[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert binary to decimal representation\n  >>> binaryToDecimal(101010)\n  10\n  */\nconst binaryToDecimal = binary => {\n  let result = 0;\n  for (let i = 0; i < binary.length; i++) {\n    result += binary[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to binary representation\n  >>> decimalToBinary(10)\n  '1010'\n  */\nconst decimalToBinary = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to hexadecimal representation\n  >>> decimalToHex(10)\n  '0x10'\n  */\nconst decimalToHex = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to decimal representation\n  >>> decimalToDecimal(10)\n  10\n  */\nconst decimalToDecimal = decimal => {\n  let result = 0;\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to octal representation\n  >>> decimalToOctal(10)\n  '10'\n  */\nconst decimalToOctal = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert octal to decimal representation\n  >>> octalToDecimal(10)\n  10\n  */\nconst octalToDecimal = octal => {\n  let result = 0;\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert octal to hexadecimal representation\n  >>> octalToHex(10)\n  '0x10'\n  */\nconst octalToHex = octal => {\n  let result = '';\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal to decimal representation\n  >>> hexadecimalToDecimal('0x10')\n  10\n  */\nconst hexadecimalToDecimal = hexadecimal => {\n  let result = 0;\n  for (let i = 0; i < hexadecimal.length; i++) {\n    result += hexadecimal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal to binary representation\n  >>> hexadecimalToBinary('0x10')\n  '1010'\n  */\nconst hexadecimalToBinary = hexadecimal => {\n  let result = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    result += hexadecimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert hexadecimal to octal representation\n  >>> hexadecimalToOctal('0x10')\n  '10'\n  */\nconst hexadecimalToOctal = hexadecimal => {\n  let result = '';\n  for (let i = 0; i < hexadecimal.length; i++) {\n    result += hexadecimal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert octal to hexadecimal representation\n  >>> octalToHex('0x10')\n  '0x10'\n  */\nconst octalToHex = octal => {\n  let result = '';\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert octal to binary representation\n  >>> octalToBinary('0x10')\n  '1010'\n  */\nconst octalToBinary = octal => {\n  let result = '';\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to octal representation\n  >>> decimalToOctal('10')\n  '10'\n  */\nconst decimalToOctal = decimal => {\n  let result = 0;\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to hexadecimal representation\n  >>> decimalToHex('10')\n  '0x10'\n  */\nconst decimalToHex = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to binary representation\n  >>> decimalToBinary('10')\n  '1010'\n  */\nconst decimalToBinary = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to decimal representation\n  >>> decimalToDecimal('10')\n  10\n  */\nconst decimalToDecimal = decimal => {\n  let result = 0;\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to binary representation\n  >>> decimalToBinary('10')\n  10\n  */\nconst decimalToBinary = decimal => {\n  let result = '';\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(2);\n  }\n  return result;\n};\n\n/**\n  Convert decimal to octal representation\n  >>> decimalToOctal('10')\n  '10'\n  */\nconst decimalToOctal = decimal => {\n  let result = 0;\n  for (let i = 0; i < decimal.length; i++) {\n    result += decimal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert octal to decimal representation\n  >>> octalToDecimal('10')\n  10\n  */\nconst octalToDecimal = octal => {\n  let result = 0;\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(8);\n  }\n  return result;\n};\n\n/**\n  Convert octal to hexadecimal representation\n  >>> octalToHex('10')\n  '0x10'\n  */\nconst octalToHex = octal => {\n  let result = '';\n  for (let i = 0; i < octal.length; i++) {\n    result += octal[i].toString(16);\n  }\n  return result;\n};\n\n/**\n  Convert octal to binary representation\n  >>> octalToBinary('10')\n  '1010'\n  */", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "<|endoftext|>/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let result = true;\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2!== lst2[j] % 2) {\n      result = false;\n      break;\n    }\n    i++;\n    j++;\n  }\n  return result;\n};\n\n/*\n  Write a function that takes an array of numbers and a number as input\n  and returns the largest number in the array that is evenly divisible by the\n  number input. For example,\n  largestEven([2, 5, 10, 15], 2) => 15\n  largestEven([2, 5, 10, 15], 3) => 10\n  largestEven([2, 5, 10, 15], 4) => 5\n  largestEven([2, 5, 10, 15], 5) => 2\n  largestEven([2, 5, 10, 15], 6) => 1\n  largestEven([2, 5, 10, 15], 7) => 0\n  largestEven([2, 5, 10, 15], 8) => -1\n  largestEven([2, 5, 10, 15], 9) => -2\n  largestEven([2, 5, 10, 15], 10) => -3\n  largestEven([2, 5, 10, 15], 11) => -4\n  largestEven([2, 5, 10, 15], 12) => -5\n  largestEven([2, 5, 10, 15], 13) => -6\n  largestEven([2, 5, 10, 15], 14) => -7\n  largestEven([2, 5, 10, 15], 15) => -8\n  largestEven([2, 5, 10, 15], 16) => -9\n  largestEven([2, 5, 10, 15], 17) => -10\n  largestEven([2, 5, 10, 15], 18) => -11\n  largestEven([2, 5, 10, 15], 19) => -12\n  largestEven([2, 5, 10, 15], 20) => -13\n  largestEven([2, 5, 10, 15], 21) => -14\n  largestEven([2, 5, 10, 15], 22) => -15\n  largestEven([2, 5, 10, 15], 23) => -16\n  largestEven([2, 5, 10, 15], 24) => -17\n  largestEven([2, 5, 10, 15], 25) => -18\n  largestEven([2, 5, 10, 15], 26) => -19\n  largestEven([2, 5, 10, 15], 27) => -20\n  largestEven([2, 5, 10, 15], 28) => -21\n  largestEven([2, 5, 10, 15], 29) => -22\n  largestEven([2, 5, 10, 15], 30) => -23\n  largestEven([2, 5, 10, 15], 31) => -24\n  largestEven([2, 5, 10, 15], 32) => -25\n  largestEven([2, 5, 10, 15], 33) => -26\n  largestEven([2, 5, 10, 15], 34) => -27\n  largestEven([2, 5, 10, 15], 35) => -28\n  largestEven([2, 5, 10, 15], 36) => -29\n  largestEven([2, 5, 10, 15], 37) => -30\n  largestEven([2, 5, 10, 15], 38) => -31\n  largestEven([2, 5, 10, 15], 39) => -32\n  largestEven([2, 5, 10, 15], 40) => -33\n  largestEven([2, 5, 10, 15], 41) => -34\n  largestEven([2, 5, 10, 15], 42) => -35\n  largestEven([2, 5, 10, 15], 43) => -36\n  largestEven([2, 5, 10, 15], 44) => -37\n  largestEven([2, 5, 10, 15], 45) => -38\n  largestEven([2, 5, 10, 15], 46) => -39\n  largestEven([2, 5, 10, 15], 47) => -40\n  largestEven([2, 5, 10, 15], 48) => -41\n  largestEven([2, 5, 10, 15], 49) => -42\n  largestEven([2, 5, 10, 15], 50) => -43\n  largestEven([2, 5, 10, 15], 51) => -44\n  largestEven([2, 5, 10, 15], 52) => -45\n  largestEven([2, 5, 10, 15], 53) => -46\n  largestEven([2, 5, 10, 15], 54) => -47\n  largestEven([2, 5, 10, 15], 55) => -48\n  largestEven([2, 5, 10, 15], 56) => -49\n  largestEven([2, 5, 10, 15], 57) => -50\n  largestEven([2, 5, 10, 15], 58) => -51\n  largestEven([2, 5, 10, 15], 59) => -52\n  largestEven([2, 5, 10, 15], 60) => -53\n  largestEven([2, 5, 10, 15], 61) => -54\n  largestEven([2, 5, 10, 15], 62) => -55\n  largestEven([2, 5, 10, 15], 63) => -56\n  largestEven([2, 5, 10, 15], 64) => -57\n  largestEven([2, 5, 10, 15], 65) => -58\n  largestEven([2, 5, 10, 15], 66) => -59\n  largestEven([2, 5, 10, 15], 67) => -60\n  largestEven([2, 5, 10, 15], 68) => -61\n  largestEven([2, 5, 10, 15], 69) => -62\n  largestEven([2, 5, 10, 15], 70) => -63\n  largestEven([2, 5, 10, 15], 71) => -64\n  largestEven([2, 5, 10, 15], 72) => -65\n  largestEven([2, 5, 10, 15], 73) => -66\n  largestEven([2, 5, 10, 15], 74) => -67\n  largestEven([2, 5, 10, 15], 75) => -68\n  largestEven([2, 5, 10, 15], 76) => -69\n  largestEven([2, 5, 10, 15], 77) => -70\n  largestEven([2, 5, 10, 15], 78) => -71\n  largestEven([2, 5, 10, 15], 79) => -72\n  largestEven([2, 5, 10, 15], 80) => -73\n  largestEven([2, 5, 10, 15], 81) => -74\n  largestEven([2, 5, 10, 15], 82) => -75\n  largestEven([2, 5, 10, 15], 83) => -76\n  largestEven([2, 5, 10, 15], 84) => -77\n  largestEven([2, 5, 10, 15], 85) => -78\n  largestEven([2, 5, 10, 15], 86) => -79\n  largestEven([2, 5, 10, 15], 87) => -80\n  largestEven([2, 5, 10, 15], 88) => -81\n  largestEven([2, 5, 10, 15], 89) => -82\n  largestEven", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "<|endoftext|>/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]++;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed('b b b b a') == {'b': 4}\n  histograms_reversed('') == {}\n\n  */\nconst histograms_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed('b b b b a') == {'b': 4}\n  histograms_reversed_reversed('') == {}\n\n  */\nconst histograms_reversed_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed('b b b b a') == {'b': 4}\n  histograms_reversed_reversed_reversed('') == {}\n\n  */\nconst histograms_reversed_reversed_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed('b b b b a') == {'b': 4}\n  histograms_reversed_reversed_reversed_reversed('') == {}\n\n  */\nconst histograms_reversed_reversed_reversed_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed('b b b b a') == {'b': 4}\n  histograms_reversed_reversed_reversed_reversed('') == {}\n\n  */\nconst histograms_reversed_reversed_reversed_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed_reversed_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed_reversed_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed_reversed('b b b b a') == {'b': 4}\n  histograms_reversed_reversed_reversed_reversed_reversed('') == {}\n\n  */\nconst histograms_reversed_reversed_reversed_reversed_reversed = (test) => {\n  const letters = test.split(' ');\n  const histograms = {};\n  letters.forEach((letter) => {\n    histograms[letter] = histograms[letter] || 0;\n    histograms[letter]--;\n  });\n  return histograms;\n};\n\n/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms_reversed_reversed_reversed_reversed_reversed('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms_reversed_reversed_reversed_reversed_reversed('a b b a') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_reversed_reversed_reversed('a b c a b') == {'a': 2, 'b': 2}\n  histograms_reversed_reversed_", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "<|endoftext|>/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const reversed = s.split(\"\").reverse().join(\"\");\n  const deleted = reversed.split(\"\").filter(x => x!== c);\n  return deleted.length === 0? null : deleted;\n};\n\n/*Task\n  Given a string s and an integer n, return true if s and n are anagrams of each other.\n  Example\n  Input: s = \"ab\", n = 2\n  Output: true\n  Input: s = \"ab\", n = 1\n  Output: false\n  Input: s = \"abc\", n = 1\n  Output: false\n  Input: s = \"abc\", n = 2\n  Output: false\n  Input: s = \"abc\", n = 3\n  Output: false\n  Input: s = \"abc\", n = 4\n  Output: false\n  Input: s = \"abcde\", n = 1\n  Output: false\n  Input: s = \"abcde\", n = 2\n  Output: false\n  Input: s = \"abcde\", n = 3\n  Output: false\n  Input: s = \"abcde\", n = 4\n  Output: false\n  Input: s = \"abcdef\", n = 1\n  Output: false\n  Input: s = \"abcdef\", n = 2\n  Output: false\n  Input: s = \"abcdef\", n = 3\n  Output: false\n  Input: s = \"abcdef\", n = 4\n  Output: false\n  Input: s = \"abcdefg\", n = 1\n  Output: false\n  Input: s = \"abcdefg\", n = 2\n  Output: false\n  Input: s = \"abcdefg\", n = 3\n  Output: false\n  Input: s = \"abcdefg\", n = 4\n  Output: false\n  Input: s = \"abcdefgh\", n = 1\n  Output: false\n  Input: s = \"abcdefgh\", n = 2\n  Output: false\n  Input: s = \"abcdefgh\", n = 3\n  Output: false\n  Input: s = \"abcdefgh\", n = 4\n  Output: false\n  Input: s = \"abcdefghi\", n = 1\n  Output: false\n  Input: s = \"abcdefghi\", n = 2\n  Output: false\n  Input: s = \"abcdefghi\", n = 3\n  Output: false\n  Input: s = \"abcdefghi\", n = 4\n  Output: false\n  Input: s = \"abcdefghij\", n = 1\n  Output: false\n  Input: s = \"abcdefghij\", n = 2\n  Output: false\n  Input: s = \"abcdefghij\", n = 3\n  Output: false\n  Input: s = \"abcdefghij\", n = 4\n  Output: false\n  Input: s = \"abcdefghijk\", n = 1\n  Output: false\n  Input: s = \"abcdefghijk\", n = 2\n  Output: false\n  Input: s = \"abcdefghijk\", n = 3\n  Output: false\n  Input: s = \"abcdefghijk\", n = 4\n  Output: false\n  Input: s = \"abcdefghijkl\", n = 1\n  Output: false\n  Input: s = \"abcdefghijkl\", n = 2\n  Output: false\n  Input: s = \"abcdefghijkl\", n = 3\n  Output: false\n  Input: s = \"abcdefghijkl\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklm\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklm\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklm\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklm\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmn\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmn\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmn\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmn\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmp\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmp\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmp\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmp\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnp\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnp\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnp\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmnp\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnq\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnq\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnq\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmnq\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmpq\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmpq\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmpq\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmpq\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnpq\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnpq\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnpq\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmnpq\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnqe\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnqe\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnqe\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmnqe\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmpqe\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmpqe\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmpqe\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmpqe\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnpqe\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnpqe\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnpqe\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmnpqe\", n = 4\n  Output: false\n  Input: s = \"abcdefghijklmnqwe\", n = 1\n  Output: false\n  Input: s = \"abcdefghijklmnqwe\", n = 2\n  Output: false\n  Input: s = \"abcdefghijklmnqwe\", n = 3\n  Output: false\n  Input: s = \"abcdefghijklmn", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "<|endoftext|>/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let odd = [];\n  lst.forEach((str) => {\n    let oddCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i % 2 === 0) {\n        oddCount++;\n      }\n    }\n    odd.push(oddCount);\n  });\n  return odd.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of even elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of even digits in the i'th string of the input.\n\n  >>> evenCount(['1234567'])\n  [\"the number of even elements 4n the str4ng 4 of the 4nput.\"]\n  >>> evenCount(['3',\"11111111\"])\n  [\"the number of even elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of even elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst evenCount = (lst) => {\n  let even = [];\n  lst.forEach((str) => {\n    let evenCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i % 2!== 0) {\n        evenCount++;\n      }\n    }\n    even.push(evenCount);\n  });\n  return even.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of pairs of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of pairs of adjacent elements in the i'th string of the input.\n\n  >>> pairCount(['1234567'])\n  [\"the number of pairs of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> pairCount(['3',\"11111111\"])\n  [\"the number of pairs of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of pairs of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst pairCount = (lst) => {\n  let pair = [];\n  lst.forEach((str) => {\n    let pairCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i === 0 || i === str.length - 1) {\n        pairCount++;\n      }\n    }\n    pair.push(pairCount);\n  });\n  return pair.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of triples of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of triples of adjacent elements in the i'th string of the input.\n\n  >>> tripleCount(['1234567'])\n  [\"the number of triples of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> tripleCount(['3',\"11111111\"])\n  [\"the number of triples of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of triples of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst tripleCount = (lst) => {\n  let triple = [];\n  lst.forEach((str) => {\n    let tripleCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i === 0 || i === str.length - 1 || i === str.length - 2) {\n        tripleCount++;\n      }\n    }\n    triple.push(tripleCount);\n  });\n  return triple.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quads of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of quads of adjacent elements in the i'th string of the input.\n\n  >>> quadCount(['1234567'])\n  [\"the number of quads of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quadCount(['3',\"11111111\"])\n  [\"the number of quads of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quads of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quadCount = (lst) => {\n  let quad = [];\n  lst.forEach((str) => {\n    let quadCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i === 0 || i === str.length - 1 || i === str.length - 2) {\n        quadCount++;\n      }\n    }\n    quad.push(quadCount);\n  });\n  return quad.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quats of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of quats of adjacent elements in the i'th string of the input.\n\n  >>> quatCount(['1234567'])\n  [\"the number of quats of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quatCount(['3',\"11111111\"])\n  [\"the number of quats of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quats of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quatCount = (lst) => {\n  let quat = [];\n  lst.forEach((str) => {\n    let quatCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i === 0 || i === str.length - 1 || i === str.length - 2) {\n        quatCount++;\n      }\n    }\n    quat.push(quatCount);\n  });\n  return quat.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of quins of adjacent elements\n  in the string i of the input.\" where all the i's should be replaced by the number\n  of quins of adjacent elements in the i'th string of the input.\n\n  >>> quinCount(['1234567'])\n  [\"the number of quins of adjacent elements 4n the str4ng 4 of the 4nput.\"]\n  >>> quinCount(['3',\"11111111\"])\n  [\"the number of quins of adjacent elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of quins of adjacent elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst quinCount = (lst) => {\n  let quin = [];\n  lst.forEach((str) => {\n    let quinCount = 0;\n    for (let i = 0; i < str.length; i++) {\n      if (i === 0 || i === str.length - 1 || i === str.length - 2) {\n        quinCount++;\n      }\n    }\n    quin.push(quinCount);\n  });\n  return quin.join(' ');\n};\n\n/*Given a list of strings, where each string consists of only digits, return a list.", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "<|endoftext|>/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums);\n};\n\nconst maxSubsArraySums = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums);\n};\n\nconst minSubsArray = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums);\n};\n\nconst maxSubsArray = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums);\n};\n\nconst minSubsArrayOfLength = (nums, length) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, length));\n};\n\nconst maxSubsArrayOfLength = (nums, length) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, length));\n};\n\nconst minSubsArrayOfLengthOf = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOf = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num < 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.max(...sums.slice(0, minLength));\n};\n\nconst minSubsArrayOfLengthOfZero = (nums, length, minLength) => {\n  const sums = nums.reduce((acc, num) => {\n    if (num > 0) {\n      acc.push(num);\n    }\n    return acc;\n  }, []);\n  return Math.min(...sums.slice(0, minLength));\n};\n\nconst maxSubsArrayOfLengthOfZero = (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "<|endoftext|>/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const result = 0;\n    const len = grid.length;\n    const capacity_per_row = capacity / len;\n    const capacity_per_col = capacity / grid[0].length;\n    \n    for(let row = 0; row < len; row++) {\n        const row_buckets = grid[row].map(() => new Array(len));\n        for(let col = 0; col < grid[row].length; col++) {\n            row_buckets[col] = new Array(len);\n            for(let i = 0; i < len; i++) {\n                row_buckets[col][i] = 0;\n            }\n        }\n        \n        for(let col = 0; col < len; col++) {\n            for(let row = 0; row < len; row++) {\n                const row_bucket = row_buckets[col][row];\n                const row_capacity = row_buckets[col][row] * capacity_per_col;\n                const col_capacity = row_buckets[col][row] * capacity_per_row;\n                \n                if(col_capacity < row_capacity) {\n                    row_buckets[col][row] = row_capacity;\n                    result++;\n                }\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return the number of ways to empty the wells.\n * \n * Example 1:\n * \n * Input: \n * \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * There are 6 ways to empty the wells:\n * \n * 1. Empty the well with capacity of 1\n * 2. Empty the well with capacity of 2\n * 3. Empty the well with capacity of 4\n * 4. Empty the well with capacity of 8\n * 5. Empty the well with capacity of 16\n * 6. Empty the well with capacity of 32\n * \n * Example 2:\n * \n * Input: \n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * There are 5 ways to empty the wells:\n * \n * 1. Empty the well with capacity of 1\n * 2. Empty the well with capacity of 2\n * 3. Empty the well with capacity of 4\n * 4. Empty the well with capacity of 8\n * 5. Empty the well with capacity of 16\n * 6. Empty the well with capacity of 32\n * 7. Empty the well with capacity of 64\n * 8. Empty the well with capacity of 128\n * 9. Empty the well with capacity of 256\n * 10. Empty the well with capacity of 512\n */\nconst maxEmpty = (grid, capacity) => {\n    const result = 0;\n    const len = grid.length;\n    const capacity_per_row = capacity / len;\n    const capacity_per_col = capacity / grid[0].length;\n    \n    for(let row = 0; row < len; row++) {\n        const row_buckets = grid[row].map(() => new Array(len));\n        for(let col = 0; col < grid[row].length; col++) {\n            row_buckets[col] = new Array(len);\n            for(let i = 0; i < len; i++) {\n                row_buckets[col][i] = 0;\n            }\n        }\n        \n        for(let col = 0; col < len; col++) {\n            for(let row = 0; row < len; row++) {\n                const row_bucket = row_buckets[col][row];\n                const row_capacity = row_buckets[col][row] * capacity_per_col;\n                const col_capacity = row_buckets[col][row] * capacity_per_row;\n                \n                if(col_capacity < row_capacity) {\n                    row_buckets[col][row] = row_capacity;\n                    result++;\n                }\n            }\n        }\n    }\n    \n    return result;\n};\n\n/**\n * Given a rectangular grid of wells and a capacity of water, \n * return the number of ways to fill the wells.\n * \n * Example 1:\n * \n * Input: \n * \n * grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n * capacity : 1\n * \n * Output: 6\n * \n * Explanation:\n * \n * There are 6 ways to fill the wells:\n * \n * 1. Fill the well with capacity of 1\n * 2. Fill the well with capacity of 2\n * 3. Fill the well with capacity of 4\n * 4. Fill the well with capacity of 8\n * 5. Fill the well with capacity of 16\n * 6. Fill the well with capacity of 32\n * \n * Example 2:\n * \n * Input: \n * \n * grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n * capacity : 2\n * \n * Output: 5\n * \n * Explanation:\n * \n * There are 5 ways to fill the wells:\n * \n * 1. Fill the well with capacity of 1\n * 2. Fill the well with capacity of 2\n * 3. Fill the well with capacity of 4\n * 4. Fill the well with capacity of 8\n * 5. Fill the well with capacity of 16\n * 6. Fill the well with capacity of 32\n * 7. Fill the well with capacity of 64\n * 8. Fill the well with capacity of 128\n * 9. Fill the well with capacity of 256\n * 10. Fill the well with capacity of 512\n */\nconst maxFill = (grid, capacity) => {\n    const result = 0;\n    const len = grid.length;\n    const capacity_per_row = capacity / len;\n    const capacity_per_col = capacity / grid[0].length;\n    \n    for(let row = 0; row < len; row++) {\n        const row_buckets = grid[row].map(() => new Array(len));\n        for(let col = 0; col < grid[row].length; col++) {\n            row_buckets[col] = new Array(len);\n            for(let i = 0; i < len; i++) {\n                row_buckets[col][i] = 0;\n            }\n        }\n        \n        for(let col = 0; col < len; col++) {\n            for(let row = 0; row < len; row++) {\n                const row_bucket = row_buckets[col][row];\n                const row_capacity = row_buckets[col][row] * capacity_per_col;\n                const col_capacity = row_buckets[col][row] * capacity_per_row;\n                \n                if(col_capacity < row_capacity) {\n                    row_buckets[col][row] = row_capacity;\n                    ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  let sortedArr = [];\n  let onesCount = 0;\n  let onesCountArr = [];\n  let onesCountArrIndex = 0;\n  let onesCountArrLength = 0;\n  let onesCountArrIndex2 = 0;\n  let onesCountArrLength2 = 0;\n  let onesCountArrIndex3 = 0;\n  let onesCountArrLength3 = 0;\n  let onesCountArrIndex4 = 0;\n  let onesCountArrLength4 = 0;\n  let onesCountArrIndex5 = 0;\n  let onesCountArrLength5 = 0;\n  let onesCountArrIndex6 = 0;\n  let onesCountArrLength6 = 0;\n  let onesCountArrIndex7 = 0;\n  let onesCountArrLength7 = 0;\n  let onesCountArrIndex8 = 0;\n  let onesCountArrLength8 = 0;\n  let onesCountArrIndex9 = 0;\n  let onesCountArrLength9 = 0;\n  let onesCountArrIndex10 = 0;\n  let onesCountArrLength10 = 0;\n  let onesCountArrIndex11 = 0;\n  let onesCountArrLength11 = 0;\n  let onesCountArrIndex12 = 0;\n  let onesCountArrLength12 = 0;\n  let onesCountArrIndex13 = 0;\n  let onesCountArrLength13 = 0;\n  let onesCountArrIndex14 = 0;\n  let onesCountArrLength14 = 0;\n  let onesCountArrIndex15 = 0;\n  let onesCountArrLength15 = 0;\n  let onesCountArrIndex16 = 0;\n  let onesCountArrLength16 = 0;\n  let onesCountArrIndex17 = 0;\n  let onesCountArrLength17 = 0;\n  let onesCountArrIndex18 = 0;\n  let onesCountArrLength18 = 0;\n  let onesCountArrIndex19 = 0;\n  let onesCountArrLength19 = 0;\n  let onesCountArrIndex20 = 0;\n  let onesCountArrLength20 = 0;\n  let onesCountArrIndex21 = 0;\n  let onesCountArrLength21 = 0;\n  let onesCountArrIndex22 = 0;\n  let onesCountArrLength22 = 0;\n  let onesCountArrIndex23 = 0;\n  let onesCountArrLength23 = 0;\n  let onesCountArrIndex24 = 0;\n  let onesCountArrLength24 = 0;\n  let onesCountArrIndex25 = 0;\n  let onesCountArrLength25 = 0;\n  let onesCountArrIndex26 = 0;\n  let onesCountArrLength26 = 0;\n  let onesCountArrIndex27 = 0;\n  let onesCountArrLength27 = 0;\n  let onesCountArrIndex28 = 0;\n  let onesCountArrLength28 = 0;\n  let onesCountArrIndex29 = 0;\n  let onesCountArrLength29 = 0;\n  let onesCountArrIndex30 = 0;\n  let onesCountArrLength30 = 0;\n  let onesCountArrIndex31 = 0;\n  let onesCountArrLength31 = 0;\n  let onesCountArrIndex32 = 0;\n  let onesCountArrLength32 = 0;\n  let onesCountArrIndex33 = 0;\n  let onesCountArrLength33 = 0;\n  let onesCountArrIndex34 = 0;\n  let onesCountArrLength34 = 0;\n  let onesCountArrIndex35 = 0;\n  let onesCountArrLength35 = 0;\n  let onesCountArrIndex36 = 0;\n  let onesCountArrLength36 = 0;\n  let onesCountArrIndex37 = 0;\n  let onesCountArrLength37 = 0;\n  let onesCountArrIndex38 = 0;\n  let onesCountArrLength38 = 0;\n  let onesCountArrIndex39 = 0;\n  let onesCountArrLength39 = 0;\n  let onesCountArrIndex40 = 0;\n  let onesCountArrLength40 = 0;\n  let onesCountArrIndex41 = 0;\n  let onesCountArrLength41 = 0;\n  let onesCountArrIndex42 = 0;\n  let onesCountArrLength42 = 0;\n  let onesCountArrIndex43 = 0;\n  let onesCountArrLength43 = 0;\n  let onesCountArrIndex44 = 0;\n  let onesCountArrLength44 = 0;\n  let onesCountArrIndex45 = 0;\n  let onesCountArrLength45 = 0;\n  let onesCountArrIndex46 = 0;\n  let onesCountArrLength46 = 0;\n  let onesCountArrIndex47 = 0;\n  let onesCountArrLength47 = 0;\n  let onesCountArrIndex48 = 0;\n  let onesCountArrLength48 = 0;\n  let onesCountArrIndex49 = 0;\n  let onesCountArrLength49 = 0;\n  let onesCountArrIndex50 = 0;\n  let onesCountArrLength50 = 0;\n  let onesCountArrIndex51 = 0;\n  let onesCountArrLength51 = 0;\n  let onesCountArrIndex52 = 0;\n  let onesCountArrLength52 = 0;\n  let onesCountArrIndex53 = 0;\n  let onesCountArrLength53 = 0;\n  let onesCountArrIndex54 = 0;\n  let onesCountArrLength54 = 0;\n  let onesCountArrIndex55 = 0;\n  let onesCountArrLength55 = 0;\n  let onesCountArrIndex56 = 0;\n  let onesCountArrLength56 = 0;\n  let onesCountArrIndex57 = 0;\n  let onesCountArrLength57 = 0;\n  let onesCountArrIndex58 = 0;\n  let onesCountArrLength58 = 0;\n  let onesCountArrIndex59 = 0;\n  let onesCountArrLength59 = 0;\n  let onesCountArrIndex60 = 0;\n  let onesCountArrLength60 = 0;\n  let onesCountArrIndex61 = 0;\n  let onesCountArrLength61 = 0;\n  let onesCountArrIndex62 = 0;\n  let onesCountArrLength62 = 0;\n  let onesCountArrIndex63 = 0;\n  let onesCountArrLength63 = 0;\n  let onesCountArrIndex64 = 0;\n  let onesCountArrLength64 = 0;\n  let onesCountArrIndex65 = 0;\n  let onesCountArrLength65 = 0;\n  let onesCountArrIndex66 = 0;\n  let onesCountArrLength66 = 0;\n  let onesCountArrIndex67 = 0;\n  let onesCountArrLength67 = 0;\n  let onesCountArrIndex68 = 0;\n  let onesCountArrLength68 = 0;\n  let onesCountArrIndex69 = 0;\n  let onesCountArrLength69 = 0;\n  let onesCountArrIndex70 = 0;\n  let onesCountArrLength70 = 0;\n  let onesCountArrIndex71 = 0;\n  let onesCountArrLength71 = 0;\n  let onesCountArrIndex72 = 0;\n  let onesCountArrLength72 = 0;\n  let onesCountArrIndex73 = 0;\n  let onesCountArrLength73 = 0;\n  let onesCountArrIndex74 = 0;\n  let onesCountArrLength74 = 0;\n  let onesCountArrIndex75 = 0;\n  let onesCountArrLength75 = 0;\n  let onesCountArrIndex76 = 0;\n  let onesCountArrLength76 = 0;\n  let onesCountArrIndex77 = 0;\n  let onesCountArrLength77 = 0;\n  let onesCountArrIndex78 = 0;\n  let onesCountArrLength78 = 0;\n  let onesCountArrIndex79 = 0;\n  let onesCountArrLength", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "<|endoftext|>/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  let words = [];\n  let word = '';\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = 0;\n  let count = 0;\n  let temp = '';\n  let temp2 = '';\n  let temp3 = '';\n  let temp4 = '';\n  let temp5 = '';\n  let temp6 = '';\n  let temp7 = '';\n  let temp8 = '';\n  let temp9 = '';\n  let temp10 = '';\n  let temp11 = '';\n  let temp12 = '';\n  let temp13 = '';\n  let temp14 = '';\n  let temp15 = '';\n  let temp16 = '';\n  let temp17 = '';\n  let temp18 = '';\n  let temp19 = '';\n  let temp20 = '';\n  let temp21 = '';\n  let temp22 = '';\n  let temp23 = '';\n  let temp24 = '';\n  let temp25 = '';\n  let temp26 = '';\n  let temp27 = '';\n  let temp28 = '';\n  let temp29 = '';\n  let temp30 = '';\n  let temp31 = '';\n  let temp32 = '';\n  let temp33 = '';\n  let temp34 = '';\n  let temp35 = '';\n  let temp36 = '';\n  let temp37 = '';\n  let temp38 = '';\n  let temp39 = '';\n  let temp40 = '';\n  let temp41 = '';\n  let temp42 = '';\n  let temp43 = '';\n  let temp44 = '';\n  let temp45 = '';\n  let temp46 = '';\n  let temp47 = '';\n  let temp48 = '';\n  let temp49 = '';\n  let temp50 = '';\n  let temp51 = '';\n  let temp52 = '';\n  let temp53 = '';\n  let temp54 = '';\n  let temp55 = '';\n  let temp56 = '';\n  let temp57 = '';\n  let temp58 = '';\n  let temp59 = '';\n  let temp60 = '';\n  let temp61 = '';\n  let temp62 = '';\n  let temp63 = '';\n  let temp64 = '';\n  let temp65 = '';\n  let temp66 = '';\n  let temp67 = '';\n  let temp68 = '';\n  let temp69 = '';\n  let temp70 = '';\n  let temp71 = '';\n  let temp72 = '';\n  let temp73 = '';\n  let temp74 = '';\n  let temp75 = '';\n  let temp76 = '';\n  let temp77 = '';\n  let temp78 = '';\n  let temp79 = '';\n  let temp80 = '';\n  let temp81 = '';\n  let temp82 = '';\n  let temp83 = '';\n  let temp84 = '';\n  let temp85 = '';\n  let temp86 = '';\n  let temp87 = '';\n  let temp88 = '';\n  let temp89 = '';\n  let temp90 = '';\n  let temp91 = '';\n  let temp92 = '';\n  let temp93 = '';\n  let temp94 = '';\n  let temp95 = '';\n  let temp96 = '';\n  let temp97 = '';\n  let temp98 = '';\n  let temp99 = '';\n  let temp100 = '';\n  let temp101 = '';\n  let temp102 = '';\n  let temp103 = '';\n  let temp104 = '';\n  let temp105 = '';\n  let temp106 = '';\n  let temp107 = '';\n  let temp108 = '';\n  let temp109 = '';\n  let temp110 = '';\n  let temp111 = '';\n  let temp112 = '';\n  let temp113 = '';\n  let temp114 = '';\n  let temp115 = '';\n  let temp116 = '';\n  let temp117 = '';\n  let temp118 = '';\n  let temp119 = '';\n  let temp120 = '';\n  let temp121 = '';\n  let temp122 = '';\n  let temp123 = '';\n  let temp124 = '';\n  let temp125 = '';\n  let temp126 = '';\n  let temp127 = '';\n  let temp128 = '';\n  let temp129 = '';\n  let temp130 = '';\n  let temp131 = '';\n  let temp132 = '';\n  let temp133 = '';\n  let temp134 = '';\n  let temp135 = '';\n  let temp136 = '';\n  let temp137 = '';\n  let temp138 = '';\n  let temp139 = '';\n  let temp140 = '';\n  let temp141 = '';\n  let temp142 = '';\n  let temp143 = '';\n  let temp144 = '';\n  let temp145 = '';\n  let temp146 = '';\n  let temp147 = '';\n  let temp148 = '';\n  let temp149 = '';\n  let temp150 = '';\n  let temp151 = '';\n  let temp152 = '';\n  let temp153 = '';\n  let temp154 = '';\n  let temp155 = '';\n  let temp156 = '';\n  let temp157 = '';\n  let temp158 = '';\n  let temp159 = '';\n  let temp160 = '';\n  let temp161 = '';\n  let temp162 = '';\n  let temp163 = '';\n  let temp164 = '';\n  let temp165 = '';\n  let temp166 = '';\n  let temp167 = '';\n  let temp168 = '';\n  let temp169 = '';\n  let temp170 = '';\n  let temp171 = '';\n  let temp172 = '';\n  let temp173 = '';\n  let temp174 = '';\n  let temp175 = '';\n  let temp176 = '';\n  let temp177 = '';\n  let temp178 = '';\n  let temp179 = '';\n  let temp180 = '';\n  let temp181 = '';\n  let temp182 = '';\n  let temp183 = '';\n  let temp184 = '';\n  let temp185 = '';\n  let temp186 = '';\n  let temp187 = '';\n  let temp188 = '';\n  let temp189 = '';\n  let temp190 = '';\n  let temp191 = '';\n  let temp192 = '';\n  let temp193 = '';\n  let temp194 = '';\n  let temp195 = '';\n  let temp196 = '';\n  let temp197 = '';\n  let temp198 = '';\n  let temp199 = '';\n  let temp200 = '';\n  let temp201 = '';\n  let temp202 = '';\n  let temp203 = '';\n  let temp204 = '';\n  let temp205 = '';\n  let temp206 = '';\n  let temp207 = '';\n  let temp208 = '';\n  let temp209 = '';\n  let temp210 = '';\n  let temp211 = '';\n  let temp212 = '';\n  let temp213 = '';\n  let temp214 = '';\n  let temp215 = '';\n  let temp216 = '';\n  let temp217 = '';\n  let temp218 = '';\n  let temp219 = '';\n  let temp220 = '';\n  let temp221 = '';\n  let temp222 = '';\n  let temp223 = '';\n  let temp224 = '';\n  let temp225 = '';\n  let temp226 = '';\n  let temp227 = '';\n  let temp228 = '';\n  let temp229 = '';\n  let temp230 = '';\n  let temp231 = '';\n  let temp232 = '';\n  let temp233 = '';\n  let temp234 = '';\n  let temp235 = '';\n  let temp236 = '';\n  let temp237 = '';\n  let temp238 = '';\n  let temp239 = '';\n  let temp240 = '';\n  let temp241 = '';\n  let temp242 = '';\n  let temp243 = '';\n  let temp244 = '';\n  let temp245 = '';\n  let temp246 = '';\n  let temp247 = '';\n  let temp248 = '';\n  let temp249 = '';\n  let temp250 = '';\n  let temp251 = '';\n  let temp252 = '';\n  let temp253 = '';\n  let temp254 = '';\n  let temp255 = '';\n  let temp256 = '';\n  let temp257 = '';\n  let temp258 = '';\n  let temp259 = '';\n  let temp260 = '';\n  let temp261 = '';\n  let temp262 = '';\n  let temp263 = '';\n  let temp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "<|endoftext|>/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let vowelsArray = vowels.map(v => v.toLowerCase());\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray.length;\n  let vowelsArrayIndex = 0;\n  let vowelsArrayLength = vowelsArray", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "<|endoftext|>/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let res = []\n  let openParen = 0\n  let closeParen = 0\n  let openParenCount = 0\n  let closeParenCount = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      openParenCount++\n    } else if (lst[i] === ')') {\n      closeParenCount++\n    }\n  }\n  if (openParenCount === closeParenCount) {\n    res.push(true)\n  } else {\n    res.push(false)\n  }\n  return res\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string T, such that the\n  number of moves is minimized.\n  Return 'Yes' if there's a way to make S into T, otherwise return 'No'.\n  Examples:\n  movesOptimal('abcabc') returns 3\n  movesOptimal('abc') returns 1\n  movesOptimal('') returns 0\n  */\nconst movesOptimal = (str) => {\n  let moves = 0\n  let movesCount = 0\n  let movesOptimal = ''\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '(') {\n      movesCount++\n    } else if (str[i] === ')') {\n      movesCount--\n    }\n    if (movesCount === 0) {\n      movesOptimal = movesOptimal + str[i]\n    }\n  }\n  return movesOptimal\n}\n\n/* You are given a string S consisting of N characters. Your task is to find the\n  minimum number of moves to make S into another string ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "<|endoftext|>/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  let longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/**\n  Returns the first string that is a substring of all the other strings.\n  >>> substring('abc', 'ab')\n  'a'\n  >>> substring('abc', 'abc')\n  'abc'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abc')\n  'abc'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  >>> substring('abc', 'abd')\n  'abd'\n  ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "<|endoftext|>/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const res = [];\n  const len = arr.length;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  for (let i = 0; i < len; i++) {\n    if (max === -999) {\n      res.push(min);\n    } else {\n      res.push(max);\n    }\n  }\n  return res;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairs = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsII = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsIII = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsIV = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsV = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsVI = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsVII = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsVIII = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsIX = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsX = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsXI = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsXII = function(nums) {\n  let count = 0;\n  let max = 0;\n  let min = -1000;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n    }\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    count++;\n  }\n  return count;\n};\n\n// https://leetcode.com/problems/find-the-number-of-unique-pairs-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findUniquePairsXIII = function(nums) {\n  let count = 0;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "<|endoftext|>/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],3:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],4:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],5:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],6:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],7:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],8:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],9:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2!== 0) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],10:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],11:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],12:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],13:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],14:[function(require,module,exports){\n/*Given a non-empty list of integers, return the sum of all of the even elements that are in odd positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if (index % 2 === 1) {\n      sum += item;\n    }\n  });\n  return sum;\n};\n\nmodule.exports = solutions;\n\n},{}],15:", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "<|endoftext|>/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most three digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 36 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most four digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 60 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most five digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 120 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most six digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 240 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most seven digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 360 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most eight digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 720 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most nine digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 720 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most ten digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 720 # sum of 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 9) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] * Math.pow(10, k - arr[i]);\n    }\n  }\n  return sum;\n};\n\n/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "<|endoftext|>/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    } else {\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    }\n    n /= 2;\n  }\n\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the even numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenEvenCollatz(5) returns [1, 5, 16, 8, 4, 2] # The collatz sequence for 5 is [1, 5, 16, 8, 4, 2, 1], so the even numbers are only 1, 5, 16, and 8.\n  */\nconst gottenEvenCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    } else {\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    }\n    n /= 2;\n  }\n\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the prime numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenPrimeCollatz(5) returns [1, 3, 5, 7, 9, 11] # The collatz sequence for 5 is [1, 3, 5, 7, 9, 11, 13, 17, 19], so primes are 1, 3, 5, 7, 9, 11, 13, 17, 19.\n  */\nconst gottenPrimeCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    } else {\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    }\n    n /= 2;\n  }\n\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the natural numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenNaturalCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 23], so natural numbers are 1, 5, 7, 11, 13, 17, 19, 23.\n  */\nconst gottenNaturalCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    } else {\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    }\n    n /= 2;\n  }\n\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive integer n, return a sorted list that has the triangular numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenTriangularCollatz(5) returns [1, 5, 7, 11, 13, 17, 19] # The collatz sequence for 5 is [1, 5, 7, 11, 13, 17, 19, 23], so triangular numbers are 1, 5, 7, 11, 13, 17, 19, 23.\n  */\nconst gottenTriangularCollatz = (n) => {\n  let collatz = [];\n  let curr = 1;\n  let prev = 1;\n  let next = 1;\n\n  while (n > 0) {\n    if (n % 2 === 0) {\n      collatz.push(curr);\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    } else {\n      curr = next;\n      next = prev + prev;\n      prev = curr;\n      curr = next;\n    }\n    n /= 2;\n  }\n\n  collatz.push(curr);\n  return collatz;\n};\n\n/*\n  Given a positive ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "<|endoftext|>/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  const dateArray = date.split('-');\n  const dateArrayLength = dateArray.length;\n  const dateArrayMonth = dateArray.slice(0, 12);\n  const dateArrayDay = dateArray.slice(12, dateArrayLength);\n  const dateArrayYear = dateArray.slice(dateArrayLength, dateArray.length);\n\n  const dateArrayMonthLength = dateArrayMonth.length;\n  const dateArrayDayLength = dateArrayDay.length;\n  const dateArrayYearLength = dateArrayYear.length;\n\n  if (dateArrayLength < 1 || dateArrayLength > 31) {\n    return false;\n  }\n\n  if (dateArrayMonthLength < 1 || dateArrayMonthLength > 12) {\n    return false;\n  }\n\n  if (dateArrayDayLength < 1 || dateArrayDayLength > 31) {\n    return false;\n  }\n\n  if (dateArrayYearLength < 1 || dateArrayYearLength > 12) {\n    return false;\n  }\n\n  if (dateArrayMonthLength > dateArrayDayLength) {\n    return false;\n  }\n\n  if (dateArrayYearLength > dateArrayDayLength) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDate = (date) => {\n  return validDates(date);\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormat = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonth = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInYear = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYear = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonth = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInYear = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonthAndDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonthAndYear = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonthAndYearInDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonthAndYearInYear = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-yyyy');\n};\n\n/**\n * Checks if the given date is a valid date in the format mm-dd-yyyy\n * \n * @param {String} date The date string to be checked.\n * @returns {Boolean} True if the given date is a valid date otherwise false.\n */\nconst isValidDateInFormatInMonthAndYearInMonthAndYearInYearInDay = (date) => {\n  return isValidDate(date) && isValidDateInFormat(date,'mm-dd-", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "<|endoftext|>/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.split(\" \");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWordsIgnoreCase(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWordsIgnoreCase(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase2 = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWordsIgnoreCase2(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase2(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase2(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase2 = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWordsIgnoreCase2(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase2(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase2(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase3 = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWordsIgnoreCase3(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase3(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWordsIgnoreCase3(\"abcdef\") == 3\n  */\nconst splitWordsIgnoreCase3 = (txt) => {\n  const words = txt.split(\",\");\n  let result = [];\n  words.forEach((word) => {\n    if (word.length > 0) {\n      if (word.length > 1) {\n        result.push(word.toLowerCase());\n      } else {\n        result.push(word);\n      }\n    }\n  });\n  return result;\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "<|endoftext|>/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const [num1, num2] = lst.sort((a, b) => a - b)\n  return num1 === num2\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in descending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5, 1, 3, 2, 4]) ➞ false\n  isSort([5, 1, 3, 2, 4, 5]) ➞ true\n  isSort([5, 1, 3, 2, 4, 6, 7]) ➞ false\n  isSort([5, 1, 3, 2, 4, 6, 7, 8]) ➞ true\n  isSort([5, 1, 3, 2, 4, 6, 7, 8, 9]) ➞ false\n  */\nconst isDescSort = (lst) => {\n  const [num1, num2] = lst.sort((a, b) => b - a)\n  return num1 === num2\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order. If list has more than 1 duplicate\n  of the same number, return false. Assume no negative numbers and only\n  integers.\n  Examples\n  isSort([5, 1, 3, 2, 4]) ➞ true\n  isSort([5, 1, 3, 2, 4, 5]) ➞ true\n  isSort([5, 1, 3, 2, 4, 6, 7]) ➞ false\n  isSort([5, 1, 3, 2, 4, 6, 7, 8]) ➞ true\n  isSort([5, 1, 3, 2, 4, 6, 7, 8, 9]) ➞ false\n  */\nconst isDescSortDesc = (lst) => {\n  const [num1, num2] = lst.sort((a, b) => b - a)\n  return num1 === num2\n}\n\n/* Given a list of numbers, return whether or not they are sorted\n  in ascending order and in descending order and in ascending order\n  and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in descending\n  order and in ascending order and in descending order and in ascending\n  order and in descending order and in ascending order and in ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "<|endoftext|>/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 < start2) {\n    return intersection(interval2, interval1);\n  }\n  if (end1 < end2) {\n    return intersection(interval1, interval2);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (start2 > end1) {\n    return intersection(interval2, interval1);\n  }\n  if (end2 > end1) {\n    return intersection(interval1, interval2);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 > end2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 > end2) {\n    return intersection(interval2, interval1);\n  }\n  if (start1 < start2) {\n    return intersection(interval1, interval2);\n  }\n  if (end1 < end2) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "<|endoftext|>/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign2 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign2([1, 2, 2, -4]) == -9\n  >>> prodsSign2([0, 1]) == 0\n  >>> prodsSign2([]) == null\n  */\nconst prodsSign3 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign3([1, 2, 2, -4]) == -9\n  >>> prodsSign3([0, 1]) == 0\n  >>> prodsSign3([]) == null\n  */\nconst prodsSign4 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign4([1, 2, 2, -4]) == -9\n  >>> prodsSign4([0, 1]) == 0\n  >>> prodsSign4([]) == null\n  */\nconst prodsSign5 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign5([1, 2, 2, -4]) == -9\n  >>> prodsSign5([0, 1]) == 0\n  >>> prodsSign5([]) == null\n  */\nconst prodsSign6 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign6([1, 2, 2, -4]) == -9\n  >>> prodsSign6([0, 1]) == 0\n  >>> prodsSign6([]) == null\n  */\nconst prodsSign7 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign7([1, 2, 2, -4]) == -9\n  >>> prodsSign7([0, 1]) == 0\n  >>> prodsSign7([]) == null\n  */\nconst prodsSign8 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign8([1, 2, 2, -4]) == -9\n  >>> prodsSign8([0, 1]) == 0\n  >>> prodsSign8([]) == null\n  */\nconst prodsSign9 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign9([1, 2, 2, -4]) == -9\n  >>> prodsSign9([0, 1]) == 0\n  >>> prodsSign9([]) == null\n  */\nconst prodsSign10 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign10([1, 2, 2, -4]) == -9\n  >>> prodsSign10([0, 1]) == 0\n  >>> prodsSign10([]) == null\n  */\nconst prodsSign11 = (arr) => {\n  let sign = 1;\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sign *= -1;\n    }\n    sum += sign * arr[i];\n  }\n  return sum;\n};\n\n/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "<|endoftext|>/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const [rows, cols] = grid.length;\n  const [gridValues, gridIndex] = createGridValues(grid);\n  const [gridValuesIndices] = createGridIndexes(grid);\n  const [gridValuesIndicesInOrder] = createGridValuesInOrder(gridValuesIndices);\n  const [gridValuesIndicesInOrderInOrder] = createGridValuesInOrderInOrder(gridValuesIndicesInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrder(gridValuesIndicesInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder] = createGridValuesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder(gridValuesIndicesInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrderInOrder);\n  const [gridValuesIndicesInOrderInOrderInOrderInOrderInOrderIn", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "<|endoftext|>/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a < b) {\n    return b\n  }\n  if (a > b) {\n    return a\n  }\n  return gcd(a, b)\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst gcd = (a, b) {\n  if (a === 0 || b === 0) {\n    return 0\n  }\n  return a > b? b : a\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog(3)\n  1\n  >>> naturalLog(10)\n  3\n  >>> naturalLog(100)\n  10\n  */\nconst naturalLog = (n) => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog(10)\n  1\n  >>> naturalLog(100)\n  10\n  */\nconst naturalLog10 = (n) => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog10(10)\n  1\n  >>> naturalLog10(100)\n  10\n  */\nconst naturalLog100 = (n) => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog100(10)\n  1\n  >>> naturalLog100(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog1000 = n => {\n  if (n < 1) {\n    return 1\n  }\n  return Math.log(n) / Math.LN10\n}\n\n/* Return a natural logarithm of a number n\n  >>> naturalLog1000(10)\n  1\n  >>> naturalLog1000(100)\n  10\n  */\nconst naturalLog100", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "<|endoftext|>/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [tri(n - 1) + tri(n - 2) + tri(n + 1)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fib(n - 1) + fib(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {\n    return [1];\n  }\n  return [fibonacci(n - 1) + fibonacci(n - 2)];\n};\n\n/*\n  Given a non-negative integer n, return the first n + 1 numbers of the Fibonacci sequence.\n  Examples:\n  fib(5) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) {", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "<|endoftext|>/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit.\n  Return 0 if n is 0.\n  For example:\n  digit(10) == 10\n  digit(10) == 10\n  digit(10) == 10\n  */\nconst digitSum = (n) => {\n  let sum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder.\n  Return 0 if n is 0.\n  For example:\n  digitSum(10) == 10\n  digitSum(10) == 10\n  digitSum(10) == 10\n  */\nconst digitSumAndRemainder = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainder(10) == 10\n  digitSumAndRemainder(10) == 10\n  digitSumAndRemainder(10) == 10\n  */\nconst digitSumAndRemainderAndOddDigit = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  let oddSum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    oddSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder + oddSum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit and all even digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainderAndOddDigit(10) == 10\n  digitSumAndRemainderAndOddDigit(10) == 10\n  digitSumAndRemainderAndOddDigit(10) == 10\n  */\nconst digitSumAndRemainderAndOddDigitAndEvenDigit = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  let oddSum = 0;\n  let evenSum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    oddSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    evenSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder + oddSum + evenSum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit and all even digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainderAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigit(10) == 10\n  */\nconst digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigit = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  let oddSum = 0;\n  let evenSum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    oddSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    evenSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder + oddSum + evenSum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit and all even digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigit(10) == 10\n  */\nconst digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  let oddSum = 0;\n  let evenSum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    oddSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    evenSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder + oddSum + evenSum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit and all even digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  */\nconst digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigitAndOddDigit = (n) => {\n  let sum = 0;\n  let remainder = 0;\n  let oddSum = 0;\n  let evenSum = 0;\n  for (let i = n; i > 0; i--) {\n    sum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    remainder += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    oddSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n    evenSum += n % 10 * Math.pow(10, i % 2);\n    n /= 10;\n  }\n  return sum + remainder + oddSum + evenSum;\n};\n\n/*Given a positive integer n, return the sum of all digit and remainder\n  and all odd digit and all even digit.\n  Return 0 if n is 0.\n  For example:\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  digitSumAndRemainderAndOddDigitAndEvenDigitAndOddDigitAndEvenDigit(10) == 10\n  */", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "<|endoftext|>/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[^\\[\\]]+\\])*\\]/g;\n  return nestingRegex.test(string);\n};\n\n/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const nestingRegex = /\\[(?:[^\\[\\]]+|\\[[", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_1 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_2 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_3 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_4 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_5 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_6 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_7 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_8 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_9 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_10 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_11 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_12 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_13 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_14 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_15 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_16 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_17 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_18 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_19 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_20 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_21 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_22 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_23 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_24 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_25 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_26 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_27 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_28 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_29 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_30 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_31 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_32 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_33 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_34 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n}\n\nconst sumsSquares_35 = (lst) => {\n  const sumsSquares = lst.map(n => n * n)\n  return sumsSquares.reduce((acc, n) => acc + n, 0)\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "<|endoftext|>/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \" \" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  return lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\" && lastChar!== \"-\" && lastChar!== \"_\" && lastChar!== \".\" && lastChar!== \"?\" && lastChar!== \"!\";\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "<|endoftext|>/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[index]) {\n      index = i;\n    }\n  }\n  return index;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex2 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex3 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex4 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex5 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex6 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex7 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex8 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex9 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex10 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n};\n\n/*\n  Given an array of integers, return a new array which contains all the\n  integers except the one at the given index. For example,\n  removeIndex([1,2,3,4,5], 2) should return [3,4,5]\n  removeIndex([1,2,3,4,5], 3) should return [1,2,4]\n  removeIndex([1,2,3,4,5], 4) should return [1,2,3]\n  removeIndex([1,2,3,4,5], 5) should return [1,2,3,4,5]\n*/\nconst removeIndex11 = (arr, index) => {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (i!== index) {\n      newArr.push(arr[i]);\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "<|endoftext|>/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_ = (lst) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_1 = (lst) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_2 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_3 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_4 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_5 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_6 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers_7 = (lst, minNum) => {\n  const maxNum = lst.reduce((a, b) => Math.max(a, b), 0);\n  const minNum = lst.reduce((a, b) => Math.min(a, b), 0);\n  if (maxNum < minNum) {\n    return null;\n  }\n  return [minNum, maxNum];\n};\n\n/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "<|endoftext|>/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ 2.5\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && b === \"\") {\n    return null\n  }\n  if (a === \"\" || b === \"\") {\n    return b\n  }\n  if (isNaN(a) || isNaN(b)) {\n    return null\n  }\n  if (a > b) {\n    return -1\n  }\n  if (a < b) {\n    return 1\n  }\n  return 0\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ null\n  comparingOne(1, \"2,3\") ➞ null\n  comparingOne(\"5,1\", \"6\") ➞ null\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (a === b) {\n    return null\n  }\n  if (a === null) {\n    return b\n  }\n  if (b === null) {\n    return a\n  }\n  if (a === \"\" || b === \"\") {\n    return null\n  }\n  if (a === \"\" && ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "<|endoftext|>/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == true\n  isEqualToSummingOdd(6) == false\n  isEqualToSummingOdd(8) == false\n  */\nconst isEqualToSummingOdd = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive odd numbers\n  Example\n  isEqualToSummingOddEven(4) == true\n  isEqualToSummingOddEven(6) == true\n  isEqualToSummingOddEven(8) == true\n  isEqualToSummingOddEven(10) == false\n  */\nconst isEqualToSummingOddEven = (n) => {\n  if (n <= 0) return false;\n  if (n % 2 === 0) return false;\n  if (n % 4 === 0) return false;\n  if (n % 8 === 0) return false;\n  if (n % 16 === 0) return true;\n  return false;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 32 positive odd numbers\n  Example\n  isEqualToSummingOddEven(8) == true\n  isEqualToSummingOddEven(16) == true\n  isEqualToSummingOddEven(32) == true\n  isEqualToSummingOddEven(64) == true\n  isEqualToSummingOddEven(128) == true\n  isEqualToSummingOddEven(256) == true\n  isEqualToSummingOddEven(512) == true\n  isEqualToSummingOddEven(1024) == true\n  isEqualToSummingOddEven(2048) == true\n  isEqualToSummingOddEven(4096) == true\n  isEqualToSummingOddEven(8192) == true\n  isEqualToSummingOddEven(16384) == true\n  isEqualToSummingOddEven(32768) == true\n  isEqualToSummingOddEven(65536) == true\n  isEqualToSummingOddEven(131072) == true\n  isEqualToSummingOddEven(262144) == true\n  isEqualToSummingOddEven(524288) == true\n  isEqualToSummingOddEven(1048576) == true\n  isEqualToSummingOddEven(2097152) == true\n  isEqualToSummingOddEven(4194304) == true\n  isEqualToSummingOddEven(8388608) == true\n  isEqualToSummingOddEven(16777216) == true\n  isEqualToSummingOddEven(33554432) == true\n  isEqualToSummingOddEven(67108864) == true\n  isEqualToSummingOddEven(134217728) == true\n  isEqualToSummingOddEven(268435456) == true\n  isEqualToSummingOddEven(536870912) == true\n  isEqualToSummingOddEven(1073741824) == true\n  isEqualToSummingOddEven(2147483648) == true\n  isEqualToSummingOddEven(4294967296) == true\n  isEqualToSummingOddEven(9223372036854775807) == true\n  isEqualToSummingOddEven(2097152096) == true\n  isEqualToSummingOddEven(419430400) == true\n  isEqualToSummingOddEven(838860800) == true\n  isEqualToSummingOddEven(1677721600) == true\n  isEqualToSummingOddEven(3355443200) == true\n  isEqualToSummingOddEven(6710886400) == true\n  isEqualToSummingOddEven(13421772800) == true\n  isEqualToSummingOddEven(26843545600) == true\n  isEqualToSummingOddEven(53687091200) == true\n  isEqualToSummingOddEven(107374182400) == true\n  isEqualToSummingOddEven(214748364800) == true\n  isEqualToSummingOddEven(429496729600) == true\n  isEqualToSummingOddEven(922337203685477580700) == true\n  isEqualToSummingOddEven(209715209600) == true\n  isEqualToSummingOddEven(41943040000) == true\n  isEqualToSummingOddEven(83886080000) == true\n  isEqualToSummingOddEven(167772160000) == true\n  isEqualToSummingOddEven(335544320000) == true\n  isEqualToSummingOddEven(671088640000) == true\n  isEqualToSummingOddEven(1342177280000) == true\n  isEqualToSummingOddEven(2684354560000) == true\n  isEqualToSummingOddEven(53687091200) == true\n  isEqualToSummingOddEven(107374182400) == true\n  isEqualToSummingOddEven(214748364800) == true\n  isEqualToSummingOddEven(429496729600) == true\n  isEqualToSummingOddEven(922337203685477580700) == true\n  isEqualToSummingOddEven(209715209600) == true\n  isEqualToSummingOddEven(41943040000) == true\n  isEqualToSummingOddEven(83886080000) == true\n  isEqualToSummingOddEven(167772160000) == true\n  isEqualToSummingOddEven(335544320000) == true\n  isEqualToSummingOddEven(671088640000) == true\n  isEqualToSummingOddEven(1342177280000) == true\n  isEqualToSummingOddEven(2684354560000) == true\n  isEqualToSummingOddEven(53687091200) == true\n  isEqualToSummingOddEven(107374182400) == true\n  isEqualToSummingOddEven(214748364800) == true\n  isEqualToSummingOddEven(429496729600) == true\n  isEqualToSummingOddEven(9", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "<|endoftext|>/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes. The\n  Sieve of Eratosthenes is a generalization of the Sieve of Atkin's\n  theorem. More precisely, the Sieve of Eratosthenes is a generalization of\n  the Sieve of Atkin's theorem, but with a different set of primes.\n\n  For example:\n  >>> sieveOfEratosthenes(4)\n  6\n\n  >>> sieveOfEratosthenes(5)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Eratosthenes of this integer.\n  */\nconst sieveOfEratosthenes = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfEratosthenes(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Atkin's theorem. More precisely,\n  the Sieve of Atkin's theorem is a generalization of the Sieve of Eratosthenes.\n  More precisely, the Sieve of Atkin's theorem is a generalization of\n  the Sieve of Eratosthenes, but with a different set of primes.\n\n  For example:\n  >>> sieveOfAtkin(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfAtkin(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Atkin of this integer.\n  */\nconst sieveOfAtkin = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfAtkin(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Atkin's theorem. More precisely,\n  the Sieve of Atkin's theorem is a generalization of the Sieve of Eratosthenes.\n  More precisely, the Sieve of Atkin's theorem is a generalization of\n  the Sieve of Eratosthenes, but with a different set of primes.\n\n  For example:\n  >>> sieveOfAtkin(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfAtkin(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Atkin of this integer.\n  */\nconst sieveOfAtkin2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfAtkin(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes.\n  More precisely, the Sieve of Eratosthenes is a generalization of the Sieve of Atkin's\n  theorem. More precisely, the Sieve of Eratosthenes is a generalization of\n  the Sieve of Atkin's theorem, but with a different set of primes.\n\n  For example:\n  >>> sieveOfEratosthenes(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfEratosthenes(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Eratosthenes of this integer.\n  */\nconst sieveOfEratosthenes = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfEratosthenes(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes.\n  More precisely, the Sieve of Eratosthenes is a generalization of the Sieve of Atkin's\n  theorem. More precisely, the Sieve of Eratosthenes is a generalization of\n  the Sieve of Atkin's theorem, but with a different set of primes.\n\n  For example:\n  >>> sieveOfEratosthenes(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfEratosthenes(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Eratosthenes of this integer.\n  */\nconst sieveOfEratosthenes = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfEratosthenes(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Atkin's theorem. More precisely,\n  the Sieve of Atkin's theorem is a generalization of the Sieve of Eratosthenes.\n  More precisely, the Sieve of Atkin's theorem is a generalization of\n  the Sieve of Eratosthenes, but with a different set of primes.\n\n  For example:\n  >>> sieveOfAtkin(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfAtkin(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Atkin of this integer.\n  */\nconst sieveOfAtkin2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfAtkin(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes.\n  More precisely, the Sieve of Eratosthenes is a generalization of the Sieve of Atkin's\n  theorem. More precisely, the Sieve of Eratosthenes is a generalization of\n  the Sieve of Atkin's theorem, but with a different set of primes.\n\n  For example:\n  >>> sieveOfEratosthenes(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> sieveOfEratosthenes(6)\n  120\n\n  The function will receive an integer as input and should return the Sieve\n  of Eratosthenes of this integer.\n  */\nconst sieveOfEratosthenes = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return n * sieveOfEratosthenes(n - 1);\n};\n\n/*\n  Returns the factorial of n using the Sieve of Eratosthenes.\n  More precisely, the Sieve of Eratosthenes is a generalization of the Sieve of Atkin's\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "<|endoftext|>/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentPrefix) {\n      prefixes.push(currentPrefix)\n      currentPrefix = string[i]\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['ba', 'abc', 'aba']\n  */\nconst allSuffixes = (string) => {\n  let suffixes = []\n  let currentSuffix = string[string.length - 1]\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i]!== currentSuffix) {\n      suffixes.push(currentSuffix)\n      currentSuffix = string[i]\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all common prefixes from shortest to longest of the input string\n  >>> allCommonPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonPrefixes = (string) => {\n  let prefixes = []\n  let currentPrefix = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentPrefix) {\n      prefixes.push(currentPrefix)\n      currentPrefix = string[i]\n    }\n  }\n  return prefixes.filter(prefix => string.startsWith(prefix))\n}\n\n/* Return list of all common suffixes from shortest to longest of the input string\n  >>> allCommonSuffixes('abc')\n  ['ba', 'abc', 'aba']\n  */\nconst allCommonSuffixes = (string) => {\n  let suffixes = []\n  let currentSuffix = string[string.length - 1]\n  for (let i = string.length - 1; i >= 0; i--) {\n    if (string[i]!== currentSuffix) {\n      suffixes.push(currentSuffix)\n      currentSuffix = string[i]\n    }\n  }\n  return suffixes.filter(suffix => string.endsWith(suffix))\n}\n\n/* Return list of all common characters from shortest to longest of the input string\n  >>> allCommonCharacters('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonCharacters = (string) => {\n  let characters = []\n  let currentCharacter = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentCharacter) {\n      characters.push(currentCharacter)\n      currentCharacter = string[i]\n    }\n  }\n  return characters\n}\n\n/* Return list of all common words from shortest to longest of the input string\n  >>> allCommonWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonWords = (string) => {\n  let words = []\n  let currentWord = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentWord) {\n      words.push(currentWord)\n      currentWord = string[i]\n    }\n  }\n  return words\n}\n\n/* Return list of all common numbers from shortest to longest of the input string\n  >>> allCommonNumbers('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonNumbers = (string) => {\n  let numbers = []\n  let currentNumber = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentNumber) {\n      numbers.push(currentNumber)\n      currentNumber = string[i]\n    }\n  }\n  return numbers\n}\n\n/* Return list of all common letters from shortest to longest of the input string\n  >>> allCommonLetters('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonLetters = (string) => {\n  let letters = []\n  let currentLetter = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentLetter) {\n      letters.push(currentLetter)\n      currentLetter = string[i]\n    }\n  }\n  return letters\n}\n\n/* Return list of all common words from shortest to longest of the input string\n  >>> allCommonWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonWords = (string) => {\n  let words = []\n  let currentWord = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentWord) {\n      words.push(currentWord)\n      currentWord = string[i]\n    }\n  }\n  return words\n}\n\n/* Return list of all common numbers from shortest to longest of the input string\n  >>> allCommonNumbers('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonNumbers = (string) => {\n  let numbers = []\n  let currentNumber = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentNumber) {\n      numbers.push(currentNumber)\n      currentNumber = string[i]\n    }\n  }\n  return numbers\n}\n\n/* Return list of all common letters from shortest to longest of the input string\n  >>> allCommonLetters('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonLetters = (string) => {\n  let letters = []\n  let currentLetter = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentLetter) {\n      letters.push(currentLetter)\n      currentLetter = string[i]\n    }\n  }\n  return letters\n}\n\n/* Return list of all common words from shortest to longest of the input string\n  >>> allCommonWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonWords = (string) => {\n  let words = []\n  let currentWord = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentWord) {\n      words.push(currentWord)\n      currentWord = string[i]\n    }\n  }\n  return words\n}\n\n/* Return list of all common numbers from shortest to longest of the input string\n  >>> allCommonNumbers('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonNumbers = (string) => {\n  let numbers = []\n  let currentNumber = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentNumber) {\n      numbers.push(currentNumber)\n      currentNumber = string[i]\n    }\n  }\n  return numbers\n}\n\n/* Return list of all common letters from shortest to longest of the input string\n  >>> allCommonLetters('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonLetters = (string) => {\n  let letters = []\n  let currentLetter = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentLetter) {\n      letters.push(currentLetter)\n      currentLetter = string[i]\n    }\n  }\n  return letters\n}\n\n/* Return list of all common words from shortest to longest of the input string\n  >>> allCommonWords('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonWords = (string) => {\n  let words = []\n  let currentWord = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentWord) {\n      words.push(currentWord)\n      currentWord = string[i]\n    }\n  }\n  return words\n}\n\n/* Return list of all common numbers from shortest to longest of the input string\n  >>> allCommonNumbers('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allCommonNumbers = (string) => {\n  let numbers = []\n  let currentNumber = string[0]\n  for (let i = 1; i < string.length; i++) {\n    if (string[i]!== currentNumber) {\n      numbers.push(currentNumber)\n      currentNumber = string[i]\n    }\n  }\n  return numbers\n}\n\n/* Return list of all common letters from shortest to longest of the input string\n  >>> allCommonLetters('abc')\n  ['a', 'ab', 'abc']", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "<|endoftext|>/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  const newText = text.replace(/\\s+/g, \"_\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/\\s+/g, \"-\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with _\n  \n  fixesUnderscore(\"Example\") == \"Example\"\n  fixesUnderscore(\"Example 1\") == \"Example_1\"\n  fixesUnderscore(\" Example 2\") == \"_Example_2\"\n  fixesUnderscore(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesUnderscore = (text) => {\n  const newText = text.replace(/_/g, \" \")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/_/g, \" \")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all periods in it with spaces, \n  and if a string has more than 2 consecutive periods, \n  then replace all consecutive periods with.\n  \n  fixesPeriod(\"Example\") == \"Example\"\n  fixesPeriod(\"Example 1\") == \"Example_1\"\n  fixesPeriod(\" Example 2\") == \"_Example_2\"\n  fixesPeriod(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesPeriod = (text) => {\n  const newText = text.replace(/\\./g, \" \")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/\\./g, \" \")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all commas in it with spaces, \n  and if a string has more than 2 consecutive commas, \n  then replace all consecutive commas with,\n  \n  fixesComma(\"Example\") == \"Example\"\n  fixesComma(\"Example 1\") == \"Example_1\"\n  fixesComma(\" Example 2\") == \"_Example_2\"\n  fixesComma(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesComma = (text) => {\n  const newText = text.replace(/,/g, \",\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/,/g, \",\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all hyphens in it with spaces, \n  and if a string has more than 2 consecutive hyphens, \n  then replace all consecutive hyphens with -\n  \n  fixesHyphen(\"Example\") == \"Example\"\n  fixesHyphen(\"Example 1\") == \"Example_1\"\n  fixesHyphen(\" Example 2\") == \"_Example_2\"\n  fixesHyphen(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesHyphen = (text) => {\n  const newText = text.replace(/-/g, \" \")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/-/g, \" \")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all apostrophes in it with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with '\n  \n  fixesApostrophe(\"Example\") == \"Example\"\n  fixesApostrophe(\"Example 1\") == \"Example_1\"\n  fixesApostrophe(\" Example 2\") == \"_Example_2\"\n  fixesApostrophe(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesApostrophe = (text) => {\n  const newText = text.replace(/\\'/g, \"'\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/'/g, \"'\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all quotation marks in it with spaces, \n  and if a string has more than 2 consecutive quotation marks, \n  then replace all consecutive quotation marks with \"\n  \n  fixesQuotationMark(\"Example\") == \"Example\"\n  fixesQuotationMark(\"Example 1\") == \"Example_1\"\n  fixesQuotationMark(\" Example 2\") == \"_Example_2\"\n  fixesQuotationMark(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesQuotationMark = (text) => {\n  const newText = text.replace(/\"/g, \"'\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/\"/g, \"'\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all apostrophes with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with '\n  \n  fixesApostropheWithSpace(\"Example\") == \"Example\"\n  fixesApostropheWithSpace(\"Example 1\") == \"Example_1\"\n  fixesApostropheWithSpace(\" Example 2\") == \"_Example_2\"\n  fixesApostropheWithSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesApostropheWithSpace = (text) => {\n  const newText = text.replace(/\\'/g, \"'\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/'/g, \"'\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all quotation marks with spaces, \n  and if a string has more than 2 consecutive quotation marks, \n  then replace all consecutive quotation marks with \"\n  \n  fixesQuotationMarkWithSpace(\"Example\") == \"Example\"\n  fixesQuotationMarkWithSpace(\"Example 1\") == \"Example_1\"\n  fixesQuotationMarkWithSpace(\" Example 2\") == \"_Example_2\"\n  fixesQuotationMarkWithSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesQuotationMarkWithSpace = (text) => {\n  const newText = text.replace(/\"/g, \"'\")\n  if (newText.length > 2 && newText.length <= 3) {\n    return newText.replace(/\"/g, \"'\")\n  }\n  return newText\n}\n\n/*\n  Given a string text, replace all apostrophes with spaces, \n  and if a string has more than 2 consecutive apostrophes, \n  then replace all consecutive apostrophes with '\n  \n  fixesApostropheWithSpaceWithSpace(\"Example\") == \"Example\"\n  fixesApostropheWithSpaceWithSpace(\"Example 1\") == \"Example_1\"\n  fixesApostropheWithSpaceWithSpace(\" Example 2\") == \"_Example_2\"\n  fixesApostropheWithSpaceWithSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesApostropheWithSpaceWithSpace = (text) => {\n  const newText = text.replace(/\\'/g, \"'\")\n  if (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "<|endoftext|>/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  const file_name_without_extension = file_name.split(\".\")[0];\n  const file_name_without_dot_extension = file_name_without_extension.substr(1);\n  const file_name_without_dot_extension_length = file_name_without_dot_extension.length;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name_without_dot_extension_length = file_name_without_dot_extension_length - 1;\n  const file_name", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "<|endoftext|>/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    if (entry % 3 === 0 && entry % 4!== 0) {\n      sum += entry;\n    }\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the squares of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquaresOfList = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 2);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfList = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n    sum += Math.pow(entry, 6);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfListsOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n    sum += Math.pow(entry, 6);\n    sum += Math.pow(entry, 7);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfListsOfListsOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n    sum += Math.pow(entry, 6);\n    sum += Math.pow(entry, 7);\n    sum += Math.pow(entry, 8);\n    sum += Math.pow(entry, 9);\n    sum += Math.pow(entry, 10);\n    sum += Math.pow(entry, 11);\n    sum += Math.pow(entry, 12);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfListsOfListsOfListsOfListsOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n    sum += Math.pow(entry, 6);\n    sum += Math.pow(entry, 7);\n    sum += Math.pow(entry, 8);\n    sum += Math.pow(entry, 9);\n    sum += Math.pow(entry, 10);\n    sum += Math.pow(entry, 11);\n    sum += Math.pow(entry, 12);\n    sum += Math.pow(entry, 13);\n    sum += Math.pow(entry, 14);\n    sum += Math.pow(entry, 15);\n    sum += Math.pow(entry, 16);\n    sum += Math.pow(entry, 17);\n    sum += Math.pow(entry, 18);\n    sum += Math.pow(entry, 19);\n    sum += Math.pow(entry, 20);\n    sum += Math.pow(entry, 21);\n    sum += Math.pow(entry, 22);\n    sum += Math.pow(entry, 23);\n  });\n  \n  return sum;\n};\n\n/*\n  Given a list of integers, return the sum of the cubes of its elements.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubesOfListOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfListsOfLists = (lst) => {\n  let sum = 0;\n  \n  lst.forEach((entry) => {\n    sum += Math.pow(entry, 3);\n    sum += Math.pow(entry, 4);\n    sum += Math.pow(entry, 5);\n    sum += Math.pow(entry, 6);\n    sum += Math.pow(entry, 7);\n    sum += Math.pow(entry, 8);\n    sum += Math.pow(entry, 9);\n    sum += Math.pow(entry, 10);\n    sum += Math.pow(entry, 11);\n    sum += Math.pow(entry, 12);\n    sum += Math.pow(entry, 13);\n    sum += Math.pow(entry, 14);\n    sum += Math.pow(entry, 15);\n    sum += Math.pow(entry, 16);\n    sum += Math.pow(entry, 17);\n    sum += Math.pow(entry, 18);\n    sum += Math.pow(entry, 19);\n    sum += ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "<|endoftext|>/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  let newWord = \"\";\n  let newWordLength = 0;\n  let newWordOrder = [];\n\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    newWordLength = newWord.length;\n    if (newWordLength > 1) {\n      newWordOrder.push(newWord);\n    }\n  }\n\n  for (let i = 0; i < newWordOrder.length; i++) {\n    let currentWord = newWordOrder[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = 0;\n    let currentWordIndex2 = 0;\n    while (currentWordIndex < currentWordLength) {\n      let nextWord = newWordOrder[currentWordIndex + 1];\n      let nextWordLength = nextWord.length;\n      let nextWordIndex = currentWordIndex + 2;\n      let nextWordIndex2 = 0;\n      while (nextWordIndex2 < nextWordLength) {\n        if (currentWordIndex === nextWordIndex2) {\n          newSentence += currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        } else {\n          newSentence += \" \" + currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        }\n        nextWordIndex += 1;\n        nextWordIndex2 += 1;\n      }\n      currentWordIndex += 1;\n      currentWordIndex2 += 1;\n    }\n    newSentence += currentWord;\n    newWordIndex += 1;\n    newWordIndex2 += 1;\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  let newWord = \"\";\n  let newWordLength = 0;\n  let newWordOrder = [];\n\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    newWordLength = newWord.length;\n    if (newWordLength > 1) {\n      newWordOrder.push(newWord);\n    }\n  }\n\n  for (let i = 0; i < newWordOrder.length; i++) {\n    let currentWord = newWordOrder[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = 0;\n    let currentWordIndex2 = 0;\n    while (currentWordIndex < currentWordLength) {\n      let nextWord = newWordOrder[currentWordIndex + 1];\n      let nextWordLength = nextWord.length;\n      let nextWordIndex = currentWordIndex + 2;\n      let nextWordIndex2 = 0;\n      while (nextWordIndex2 < nextWordLength) {\n        if (currentWordIndex === nextWordIndex2) {\n          newSentence += currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        } else {\n          newSentence += \" \" + currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        }\n        nextWordIndex += 1;\n        nextWordIndex2 += 1;\n      }\n      currentWordIndex += 1;\n      currentWordIndex2 += 1;\n    }\n    newSentence += currentWord;\n    newWordIndex += 1;\n    newWordIndex2 += 1;\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInWords = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  let newWord = \"\";\n  let newWordLength = 0;\n  let newWordOrder = [];\n\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    newWordLength = newWord.length;\n    if (newWordLength > 1) {\n      newWordOrder.push(newWord);\n    }\n  }\n\n  for (let i = 0; i < newWordOrder.length; i++) {\n    let currentWord = newWordOrder[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = 0;\n    let currentWordIndex2 = 0;\n    while (currentWordIndex < currentWordLength) {\n      let nextWord = newWordOrder[currentWordIndex + 1];\n      let nextWordLength = nextWord.length;\n      let nextWordIndex = currentWordIndex + 2;\n      let nextWordIndex2 = 0;\n      while (nextWordIndex2 < nextWordLength) {\n        if (currentWordIndex === nextWordIndex2) {\n          newSentence += currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        } else {\n          newSentence += \" \" + currentWord;\n          newWordIndex += 1;\n          newWordIndex2 += 1;\n        }\n        nextWordIndex += 1;\n        nextWordIndex2 += 1;\n      }\n      currentWordIndex += 1;\n      currentWordIndex2 += 1;\n    }\n    newSentence += currentWord;\n    newWordIndex += 1;\n    newWordIndex2 += 1;\n  }\n  return newSentence;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInWordsInSentences = (sentence) => {\n  const words = sentence.split(\" \");\n  let newWords = [];\n  let newSentence = \"\";\n  let newWord = \"\";\n  let newWordLength = 0;\n  let newWordOrder = [];\n\n  for (let i = 0; i < words.length; i++) {\n    newWord = words[i];\n    newWordLength = newWord.length;\n    if (newWordLength > 1) {\n      newWordOrder.push(newWord);\n    }\n  }\n\n  for (let i = 0; i < newWordOrder.length; i++) {\n    let currentWord = newWordOrder[i];\n    let currentWordLength = currentWord.length;\n    let currentWordIndex = 0;\n    let currentWordIndex2 = 0;\n    while (currentWordIndex < currentWordLength) {\n      let nextWord = newWordOrder[currentWordIndex + 1];\n      let nextWordLength = nextWord.length;\n      let nextWordIndex = currentWordIndex + ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "<|endoftext|>/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  // if denominator is 0, return true\n  if (n === 0) {\n    return true;\n  }\n\n  // if denominator is 1, return false\n  if (n === 1) {\n    return false;\n  }\n\n  // if denominator is 2, return false\n  if (n === 2) {\n    return false;\n  }\n\n  // if denominator is 3, return false\n  if (n % 3 === 0) {\n    return false;\n  }\n\n  // if denominator is 4, return false\n  if (n % 4 === 0) {\n    return false;\n  }\n\n  // if denominator is 5, return false\n  if (n % 5 === 0) {\n    return false;\n  }\n\n  // if denominator is 6, return false\n  if (n % 6 === 0) {\n    return false;\n  }\n\n  // if denominator is 7, return false\n  if (n % 7 === 0) {\n    return false;\n  }\n\n  // if denominator is 8, return false\n  if (n % 8 === 0) {\n    return false;\n  }\n\n  // if denominator is 9, return false\n  if (n % 9 === 0) {\n    return false;\n  }\n\n  // if denominator is 10, return false\n  if (n % 10 === 0) {\n    return false;\n  }\n\n  // if denominator is 11, return false\n  if (n % 11 === 0) {\n    return false;\n  }\n\n  // if denominator is 12, return false\n  if (n % 12 === 0) {\n    return false;\n  }\n\n  // if denominator is 13, return false\n  if (n % 13 === 0) {\n    return false;\n  }\n\n  // if denominator is 14, return false\n  if (n % 14 === 0) {\n    return false;\n  }\n\n  // if denominator is 15, return false\n  if (n % 15 === 0) {\n    return false;\n  }\n\n  // if denominator is 16, return false\n  if (n % 16 === 0) {\n    return false;\n  }\n\n  // if denominator is 17, return false\n  if (n % 17 === 0) {\n    return false;\n  }\n\n  // if denominator is 18, return false\n  if (n % 18 === 0) {\n    return false;\n  }\n\n  // if denominator is 19, return false\n  if (n % 19 === 0) {\n    return false;\n  }\n\n  // if denominator is 20, return false\n  if (n % 20 === 0) {\n    return false;\n  }\n\n  // if denominator is 21, return false\n  if (n % 21 === 0) {\n    return false;\n  }\n\n  // if denominator is 22, return false\n  if (n % 22 === 0) {\n    return false;\n  }\n\n  // if denominator is 23, return false\n  if (n % 23 === 0) {\n    return false;\n  }\n\n  // if denominator is 24, return false\n  if (n % 24 === 0) {\n    return false;\n  }\n\n  // if denominator is 25, return false\n  if (n % 25 === 0) {\n    return false;\n  }\n\n  // if denominator is 26, return false\n  if (n % 26 === 0) {\n    return false;\n  }\n\n  // if denominator is 27, return false\n  if (n % 27 === 0) {\n    return false;\n  }\n\n  // if denominator is 28, return false\n  if (n % 28 === 0) {\n    return false;\n  }\n\n  // if denominator is 29, return false\n  if (n % 29 === 0) {\n    return false;\n  }\n\n  // if denominator is 30, return false\n  if (n % 30 === 0) {\n    return false;\n  }\n\n  // if denominator is 31, return false\n  if (n % 31 === 0) {\n    return false;\n  }\n\n  // if denominator is 32, return false\n  if (n % 32 === 0) {\n    return false;\n  }\n\n  // if denominator is 33, return false\n  if (n % 33 === 0) {\n    return false;\n  }\n\n  // if denominator is 34, return false\n  if (n % 34 === 0) {\n    return false;\n  }\n\n  // if denominator is 35, return false\n  if (n % 35 === 0) {\n    return false;\n  }\n\n  // if denominator is 36, return false\n  if (n % 36 === 0) {\n    return false;\n  }\n\n  // if denominator is 37, return false\n  if (n % 37 === 0) {\n    return false;\n  }\n\n  // if denominator is 38, return false\n  if (n % 38 === 0) {\n    return false;\n  }\n\n  // if denominator is 39, return false\n  if (n % 39 === 0) {\n    return false;\n  }\n\n  // if denominator is 40, return false\n  if (n % 40 === 0) {\n    return false;\n  }\n\n  // if denominator is 41, return false\n  if (n % 41 === 0) {\n    return false;\n  }\n\n  // if denominator is 42, return false\n  if (n % 42 === 0) {\n    return false;\n  }\n\n  // if denominator is 43, return false\n  if (n % 43 === 0) {\n    return false;\n  }\n\n  // if denominator is 44, return false\n  if (n % 44 === 0) {\n    return false;\n  }\n\n  // if denominator is 45, return false\n  if (n % 45 === 0) {\n    return false;\n  }\n\n  // if denominator is 46, return false\n  if (n % 46 === 0) {\n    return false;\n  }\n\n  // if denominator is 47, return false\n  if (n % 47 === 0) {\n    return false;\n  }\n\n  // if denominator is 48, return false\n  if (n % 48 === 0) {\n    return false;\n  }\n\n  // if denominator is 49, return false\n  if (n % 49 === 0) {\n    return false;\n  }\n\n  // if denominator is 50, return false\n  if (n % 50 === 0) {\n    return false;\n  }\n\n  // if denominator is 51, return false\n  if (n % 51 === 0) {\n    return false;\n  }\n\n  // if denominator is 52, return false\n  if (n % 52 === 0) {\n    return false;\n  }\n\n  // if denominator is 53, return false\n  if (n % 53 === 0) {\n    return false;\n  }\n\n  // if denominator is 54, return false\n  if (n % 54 === 0) {\n    return false;\n  }\n\n  // if denominator is 55, return false\n  if (n % 55 === 0) {\n    return false;\n  }\n\n  // if denominator is 56, return false\n  if (n % 56 === 0) {\n    return false;\n  }\n\n  // if denominator is 57, return false\n  if (n % 57 === 0) {\n    return false;\n  }\n\n  // if denominator is 58, return false\n  if (n % 58 === 0) {\n    return false;\n  }\n\n  // if denominator is 59, return false\n  if (n % 59 === 0) {\n    return false;\n  }\n\n  // if denominator is 60, return false\n  if (n % 60 === 0) {\n    return false;\n  }\n\n  // if denominator is 61, return false\n  if (n % 61 === 0) {\n    return false;\n  }\n\n  // if denominator is 62, return false\n  if (n % 62 === 0) {\n    return false;\n  }\n\n  // if denominator is 63, return false\n  if (n % 63 === 0) {\n    return false;\n  }\n\n  // if denominator is 64, return false\n  if (n % 64 === 0) {\n    return false;\n  }\n\n  // if denominator is 65, return false\n  if (n % 65 === 0) {\n    return false;\n  }\n\n  // if denominator is 66, return false\n  if (n % 66 === 0) {\n    return false;\n  }\n\n  // if denominator is 67, return false\n  if (n % 67 === 0) {\n    return false;\n  }\n\n  // if denominator is 68, return false\n  if (n % 68 === 0) {\n    return false;\n  }\n\n  // if denominator is 69, return false\n  if (n % 69 === 0) {\n    return false;\n  }\n\n  // if denominator is 70, return false\n  if (n % 70 === 0) {\n    return false;\n  }\n\n  // if denominator is 71, return false\n  if (n % 71 === 0) {\n    return false;\n  }\n\n  // if denominator is 72, return false\n  if (n % 72 === 0) {\n    return false;\n  }\n\n  // if denominator is 73, return false\n  if (n % 73 === 0) {\n    return false;\n  }\n\n  // if denominator is 74, return false\n  if (n % 74 === 0) {\n    return false;\n  }\n\n  // if denominator is 75, return false\n  if (n % 75 === 0) {\n    return false;\n  }\n\n  // if denominator is 76, return false\n  if (n % 76 === 0) {\n    return false;\n  }\n\n  // if denominator is 77, ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "<|endoftext|>/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) - (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in descending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([-1, -11, -11, 11, -12]) == [11, -11, -11, -11, -12]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) + (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) - (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) + (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDescDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) - (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDescDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) + (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDescDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) - (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDescDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) + (sums.reduce((acc, num) => {\n    return acc + num * (a - b);\n  }, 0) || 0));\n};\n\n/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPointDescDesc([1, 11, -1, -11, -12]) == [-11, -11, -11, -11, 11]\n  >>> orderByPointDescDesc([]) == []\n  */\nconst orderByPointDescDesc = (nums) => {\n  const sums = nums.reduce((acc, num) => {\n    acc.push(+num);\n    return acc;\n  }, []);\n  return nums.sort((a, b) => sums.reduce((acc, num) => {", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "<|endoftext|>/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 1) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter2 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 2 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 3.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter3 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 3 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 5.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter4 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 5 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 7.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter5 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 7 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 9.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter6 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 9 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 11.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter7 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 11 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 13.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter8 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 13 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 15.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter9 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 15 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 31.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter10 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 31 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 63.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter11 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 63 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are divisible by 126.\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter12 = (nums) => {\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] >= 10) {\n      if (nums[i] % 126 === 0) {\n        if (nums[i] > 10) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\n/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "<|endoftext|>/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples2 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 3\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples3 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 4\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples4 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 5\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples5 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 6\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples6 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 7\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples7 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 8\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples8 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 9\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples9 = (n) => {\n  const a = [...Array(Math.pow(3, n))].map((_, i) => i * i - i + 1);\n  return a.filter((triple) => triple) % 3 === 0;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "<|endoftext|>/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const orbit1 = orbit(planet1);\n  const orbit2 = orbit(planet2);\n  const orbits = orbit1.concat(orbit2).sort((a, b) => distance(a, b));\n  return orbits.map(orbit);\n};\n\n// Write a function that takes two planet names as strings planet1 and planet2.\n// The function should return a tuple containing all planets whose orbits are\n// located between the orbit of planet1 and the orbit of planet2, sorted by\n// the distance to the sun in kilometers.\n// The function should return an empty tuple if planet1 or planet2\n// are not correct planet names.\n// Examples\n// distance(\"Jupiter\", \"Neptune\") ==> 5\n// distance(\"Earth\", \"Mercury\") ==> 3\n// distance(\"Mercury\", \"Uranus\") ==> 3\n// distance(\"Venus\", \"Earth\") ==> 1\n// distance(\"Venus\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mercury\") ==> 1\n// distance(\"Mercury\", \"Uranus\") ==> 1\n// distance(\"Earth\", \"Venus\") ==> 1\n// distance(\"Earth\", \"Mer", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "<|endoftext|>/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const sorted = lst.sort((a, b) => a.length - b.length);\n  return sorted.map((s) => s.toLowerCase());\n};\n\n/*Write a function that accepts a string as a parameter,\n  and returns the number of characters in it.\n  The function should return an integer value.\n  You may assume that all characters will have the same length.\n  For example:\n  assert count_chars(\"aa\") == 2\n  assert count_chars(\"aaa\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"aaa\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"a\") == 1\n  assert count_chars(\"", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "<|endoftext|>/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(String(i));\n  }\n  return result.join(' ');\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (n) => {\n  if (n!== undefined) {\n    if (n < 0 || n >= stringSequences.length) return '';\n    return stringSequences[n];\n  }\n  return '';\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequence = (...args) => {\n  return stringSequence(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst stringSequences = (...args) => {\n  return stringSequences(...args);\n};\n\n/**\n * Return a string containing space-delimited numbers starting from n inclusive.\n * If n is 0, return an empty string.\n * If n is greater than the number of elements in an array, return an empty string.\n * If n is less than 0, return an empty string.\n * If n is undefined, return an empty string.\n */\nconst string", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "<|endoftext|>/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrY(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrZ(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrW(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrX(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrY(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrZ(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrW(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrX(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrY(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrZ(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrW(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrX(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrY(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrZ = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrZ(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrZ(7, 34, 12) == 34\n  for xOrZ(15, 8, 5) == 5\n  \n  */\nconst xOrW = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrW(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrW(7, 34, 12) == 34\n  for xOrW(15, 8, 5) == 5\n  \n  */\nconst xOrX = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrX(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrX(7, 34, 12) == 34\n  for xOrX(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) return y;\n  if (n % 2 === 0) return x;\n  return xOrY(n/2, y, x);\n};\n\n/*\n  A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "<|endoftext|>/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are even. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 3. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 5. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 5!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 7. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 7!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 11. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 11!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 13. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 13!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 17. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 17!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 19. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 19!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 21. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 21!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\n/**\n * Given a list of numbers, return the sum of squares of the numbers\n  in the list that are divisible by 23. If the input list is empty, return 0.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 1\n  doubleTheDifference([-1, -2, 0]) == -1\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst === null || lst === undefined) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 23!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "<|endoftext|>/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = [...game];\n  const guesses = [...guess];\n  const scoreDifferences = scores.length - guesses.length;\n  const guessesDifferences = guesses.length - scores.length;\n  const scoreDifferenceSum = scoreDifferences.reduce((acc, cur) => acc + cur, 0);\n  const guessesDifferenceSum = guessesDifferences.reduce((acc, cur) => acc + cur, 0);\n  const scoreDifferenceSumSquared = scoreDifferenceSum * scoreDifferenceSum;\n  const guessesDifferenceSumSquared = guessesDifferenceSum * guessesDifferenceSum;\n  const scoreDifferenceSumSquaredSquared = scoreDifferenceSumSquared * scoreDifferenceSumSquared;\n  const guessesDifferenceSumSquaredSquared = guessesDifferenceSumSquared * guessesDifferenceSumSquared;\n  const scoreDifferenceSumSquaredDifference = scoreDifferenceSumSquaredSquared - scoreDifferenceSumSquaredSquaredSquared;\n  const guessesDifferenceSumSquaredDifference = guessesDifferenceSumSquaredSquared - guessesDifferenceSumSquaredSquaredSquared;\n  const scoreDifferenceDifferenceSum = scoreDifferenceDifferenceSum - scoreDifferenceSumSquaredDifference;\n  const guessesDifferenceDifferenceSum = guessesDifferenceDifferenceSum - guessesDifferenceSumSquaredDifference;\n  const scoreDifferenceDifferenceSumSquared = scoreDifferenceDifferenceSumSquared - scoreDifferenceDifferenceSumSquaredDifference;\n  const guessesDifferenceDifferenceSumSquared = guessesDifferenceDifferenceSumSquared - guessesDifferenceDifferenceSumSquaredDifference;\n  const scoreDifferenceDifferenceSumSquaredDifference = scoreDifferenceDifferenceSumSquared - scoreDifferenceDifferenceSumSquaredDifference;\n  const guessesDifferenceDifferenceSumSquaredDifference = guessesDifferenceDifferenceSumSquared - guessesDifferenceDifferenceSumSquaredDifference;\n  const scoreDifferenceDifferenceSumSquaredDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceSquared = guessesDifferenceDifferenceSumSquaredDifferenceSquared - guessesDifferenceDifferenceSumSquaredDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifference - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifference = guessesDifferenceDifferenceSumSquaredDifferenceDifference - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared = guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared - guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifference - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifference = guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceDifference - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared = guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared - guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifference - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifference = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifference - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared - guessesDifferenceDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifference - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifference = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifference - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared - scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared - guessesDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared;\n  const scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifference = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSquared = scoreDifferenceDifferenceSumSquaredDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceDifferenceSqu", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "<|endoftext|>/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const extension_strengths = extensions.map(extension => extension.match(/[A-Z]/)? -1 : extension.match(/[a-z]/)? 1 : 0);\n  const extension_strength_sum = extension_strengths.reduce((a, b) => a + b, 0);\n  const extension_strength_max = Math.max(...extension_strengths);\n  const extension_strength_min = Math.min(...extension_strengths);\n  const extension_strength_average = extension_strength_sum / extension_strengths.length;\n  const extension_strength_average_string = extension_strength_average.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average_string_string = extension_strength_average_string_string.toFixed(1);\n  const extension_strength_average", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "<|endoftext|>/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  let aArray = a.split('');\n  let bArray = b.split('');\n  let aArrayLen = aArray.length;\n  let bArrayLen = bArray.length;\n  let aArrayRotation = aArray.map((e, i) => [e, i]);\n  let bArrayRotation = bArray.map((e, i) => [e, i]);\n  let aArrayRotationLen = aArrayRotation.length;\n  let bArrayRotationLen = bArrayRotation.length;\n  let aArrayRotationRotationLen = aArrayRotationLen - 1;\n  let bArrayRotationRotationLen = bArrayRotationLen - 1;\n  let aArrayRotationRotationRotationRotationLen = aArrayRotationRotationLen - 2;\n  let bArrayRotationRotationRotationLen = bArrayRotationRotationLen - 2;\n  let aArrayRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationLen - 3;\n  let bArrayRotationRotationRotationRotationLen = bArrayRotationRotationLen - 3;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationLen - 4;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationLen - 4;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 5;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 5;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 6;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 6;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 7;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 7;\n  let aArrayRotationRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 8;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 8;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 9;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 9;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 10;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 10;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 11;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 11;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 12;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 12;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 13;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 13;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 14;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 14;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 15;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 15;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 16;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 16;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 17;\n  let bArrayRotationRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 17;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 18;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 18;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 19;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 19;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 20;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 20;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationRotationLen - 21;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationRotationLen - 21;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 22;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 22;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 23;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 23;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 24;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 24;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 25;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 25;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 26;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 26;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 27;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 27;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 28;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 28;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 29;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 29;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 30;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 30;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 31;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 31;\n  let aArrayRotationRotationRotationRotationRotationRotationLen = aArrayRotationRotationRotationRotationRotationLen - 32;\n  let bArrayRotationRotationRotationRotationRotationLen = bArrayRotationRotationRotationRotationLen - 32;\n  let aArrayRotationRotationRotationRotationRotation", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "<|endoftext|>/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let digitCount = 0;\n  let tempNum = num;\n  while (tempNum) {\n    digitCount = tempNum % 10;\n    tempNum = tempNum / 10;\n    if (digitCount % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n};\n\n/*Given a string, return an array that has all the characters of the string.\n\n   Example:\n      characters(\"Hello World\") ==> [\"H\", \"e\", \"l\", \"l\", \"o\", \" \", \"W\", \"o\", \"r\", \"l\", \"d\"]\n  */\nconst characters = (str) => {\n  let chars = [];\n  let tempStr = str;\n  while (tempStr) {\n    chars.push(tempStr.charAt(0));\n    tempStr = tempStr.slice(1);\n  }\n  return chars;\n};\n\n/*Given a string, return an array that has all the words of the string.\n\n   Example:\n      words(\"Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst words = (str) => {\n  let words = [];\n  let tempStr = str;\n  while (tempStr) {\n    words.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\"Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the paragraphs of the string.\n\n   Example:\n      paragraphs(\"Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst paragraphs = (str) => {\n  let paragraphs = [];\n  let tempStr = str;\n  while (tempStr) {\n    paragraphs.push(tempStr.split(\"\\n\"));\n    tempStr = tempStr.slice(1);\n  }\n  return paragraphs;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the words of the string.\n\n   Example:\n      words(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst words = (str) => {\n  let words = [];\n  let tempStr = str;\n  while (tempStr) {\n    words.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the paragraphs of the string.\n\n   Example:\n      paragraphs(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst paragraphs = (str) => {\n  let paragraphs = [];\n  let tempStr = str;\n  while (tempStr) {\n    paragraphs.push(tempStr.split(\"\\n\"));\n    tempStr = tempStr.slice(1);\n  }\n  return paragraphs;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the words of the string.\n\n   Example:\n      words(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst words = (str) => {\n  let words = [];\n  let tempStr = str;\n  while (tempStr) {\n    words.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the paragraphs of the string.\n\n   Example:\n      paragraphs(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst paragraphs = (str) => {\n  let paragraphs = [];\n  let tempStr = str;\n  while (tempStr) {\n    paragraphs.push(tempStr.split(\"\\n\"));\n    tempStr = tempStr.slice(1);\n  }\n  return paragraphs;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the words of the string.\n\n   Example:\n      words(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst words = (str) => {\n  let words = [];\n  let tempStr = str;\n  while (tempStr) {\n    words.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return words;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the paragraphs of the string.\n\n   Example:\n      paragraphs(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst paragraphs = (str) => {\n  let paragraphs = [];\n  let tempStr = str;\n  while (tempStr) {\n    paragraphs.push(tempStr.split(\"\\n\"));\n    tempStr = tempStr.slice(1);\n  }\n  return paragraphs;\n};\n\n/*Given a string, return an array that has all the sentences of the string.\n\n   Example:\n      sentences(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst sentences = (str) => {\n  let sentences = [];\n  let tempStr = str;\n  while (tempStr) {\n    sentences.push(tempStr.split(\" \"));\n    tempStr = tempStr.slice(1);\n  }\n  return sentences;\n};\n\n/*Given a string, return an array that has all the words of the string.\n\n   Example:\n      words(\" Hello World\") ==> [\"Hello\", \"World\"]\n  */\nconst words = (str) => {\n  let words = [];\n  let tempStr = str;\n  while (tempStr", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "<|endoftext|>/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const romanMap = {\n    1: 0,\n    2: 1,\n    3: 2,\n    4: 3,\n    5: 4,\n    6: 5,\n    7: 6,\n    8: 7,\n    9: 8,\n    10: 9,\n    11: 10,\n    12: 11,\n    13: 12,\n    14: 13,\n    15: 14,\n    16: 15,\n    17: 16,\n    18: 17,\n    19: 18,\n    20: 19,\n    21: 20,\n    22: 21,\n    23: 22,\n    24: 23,\n    25: 24,\n    26: 25,\n    27: 26,\n    28: 27,\n    29: 28,\n    30: 29,\n    31: 30,\n    32: 31,\n    33: 32,\n    34: 33,\n    35: 34,\n    36: 35,\n    37: 36,\n    38: 37,\n    39: 38,\n    40: 39,\n    41: 40,\n    42: 41,\n    43: 42,\n    44: 43,\n    45: 44,\n    46: 45,\n    47: 46,\n    48: 47,\n    49: 48,\n    50: 49,\n    51: 50,\n    52: 51,\n    53: 52,\n    54: 53,\n    55: 54,\n    56: 55,\n    57: 56,\n    58: 57,\n    59: 58,\n    60: 59,\n    61: 60,\n    62: 61,\n    63: 62,\n    64: 63,\n    65: 64,\n    66: 65,\n    67: 66,\n    68: 67,\n    69: 68,\n    70: 69,\n    71: 70,\n    72: 71,\n    73: 72,\n    74: 73,\n    75: 74,\n    76: 75,\n    77: 76,\n    78: 77,\n    79: 78,\n    80: 79,\n    81: 80,\n    82: 81,\n    83: 82,\n    84: 83,\n    85: 84,\n    86: 85,\n    87: 86,\n    88: 87,\n    89: 88,\n    90: 89,\n    91: 90,\n    92: 91,\n    93: 92,\n    94: 93,\n    95: 94,\n    96: 95,\n    97: 96,\n    98: 97,\n    99: 98,\n    100: 99,\n    101: 100,\n    102: 101,\n    103: 102,\n    104: 103,\n    105: 104,\n    106: 105,\n    107: 106,\n    108: 107,\n    109: 108,\n    110: 109,\n    111: 110,\n    112: 111,\n    113: 112,\n    114: 113,\n    115: 114,\n    116: 115,\n    117: 116,\n    118: 117,\n    119: 118,\n    120: 119,\n    121: 120,\n    122: 121,\n    123: 122,\n    124: 123,\n    125: 124,\n    126: 125,\n    127: 126,\n    128: 127,\n    129: 128,\n    130: 129,\n    131: 130,\n    132: 131,\n    133: 132,\n    134: 133,\n    135: 134,\n    136: 135,\n    137: 136,\n    138: 137,\n    139: 138,\n    140: 139,\n    141: 140,\n    142: 141,\n    143: 142,\n    144: 143,\n    145: 144,\n    146: 145,\n    147: 146,\n    148: 147,\n    149: 148,\n    150: 149,\n    151: 150,\n    152: 151,\n    153: 152,\n    154: 153,\n    155: 154,\n    156: 155,\n    157: 156,\n    158: 157,\n    159: 158,\n    160: 159,\n    161: 160,\n    162: 161,\n    163: 162,\n    164: 163,\n    165: 164,\n    166: 165,\n    167: 166,\n    168: 167,\n    169: 168,\n    170: 169,\n    171: 170,\n    172: 171,\n    173: 172,\n    174: 173,\n    175: 174,\n    176: 175,\n    177: 176,\n    178: 177,\n    179: 178,\n    180: 179,\n    181: 180,\n    182: 181,\n    183: 182,\n    184: 183,\n    185: 184,\n    186: 185,\n    187: 186,\n    188: 187,\n    189: 188,\n    190: 189,\n    191: 190,\n    192: 191,\n    193: 192,\n    194: 193,\n    195: 194,\n    196: 195,\n    197: 196,\n    198: 197,\n    199: 198,\n    200: 199,\n    201: 200,\n    202: 201,\n    203: 202,\n    204: 203,\n    205: 204,\n    206: 205,\n    207: 206,\n    208: 207,\n    209: 208,\n    210: 210,\n    211: 211,\n    212: 212,\n    213: 213,\n    214: 214,\n    215: 215,\n    216: 216,\n    217: 217,\n    218: 218,\n    219: 219,\n    220: 220,\n    221: 221,\n    222: 222,\n    223: 223,\n    224: 224,\n    225: 225,\n    226: 226,\n    227: 227,\n    228: 228,\n    229: 229,\n    230: 232,\n    231: 233,\n    232: 234,\n    233: 235,\n    234: 236,\n    235: 237,\n    236: 238,\n    237: 239,\n    238: 240,\n    239: 241,\n    240: 242,\n    241: 243,\n    242: 244,\n    243: 245,\n    244: 246,\n    245: 247,\n    246: 248,\n    247: 249,\n    248: 250,\n    249: 251,\n    250: 252,\n    ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "<|endoftext|>/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = a - b;\n  const ac = a - c;\n  const bc = b - c;\n  return ab * ac - bc * bc;\n};\n\n/*\n Given the lengths of the three sides of a rectangle. Return true if the three\n  sides form a square, false otherwise.\n  A square is a rectangle in which all sides are equal.\n  Example:\n  square(3, 4) == true\n  square(3, 2) == false\n  */\nconst square = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a pentagon. Return true if the three\n  sides form a pentagon, false otherwise.\n  A pentagon is a pentagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  pentagon(4, 3) == true\n  pentagon(4, 2) == false\n  */\nconst pentagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a hexagon. Return true if the three\n  sides form a hexagon, false otherwise.\n  A hexagon is a hexagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  hexagon(4, 3) == true\n  hexagon(4, 2) == false\n  */\nconst hexagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a heptagon. Return true if the three\n  sides form a heptagon, false otherwise.\n  A heptagon is a heptagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  heptagon(4, 3) == true\n  heptagon(4, 2) == false\n  */\nconst heptagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a decagon. Return true if the three\n  sides form a decagon, false otherwise.\n  A decagon is a decagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  decagon(4, 3) == true\n  decagon(4, 2) == false\n  */\nconst decagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a triangle made of three sides.\n  Return true if the three sides form a triangle, false otherwise.\n  A triangle is a triangle whose sides are equal, except for the first and\n  last sides.\n  Example:\n  triangle(3, 3) == true\n  triangle(3, 2) == false\n  */\nconst triangle = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a pentagon made of three sides.\n  Return true if the three sides form a pentagon, false otherwise.\n  A pentagon is a pentagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  pentagon(4, 3) == true\n  pentagon(4, 2) == false\n  */\nconst pentagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a hexagon made of three sides.\n  Return true if the three sides form a hexagon, false otherwise.\n  A hexagon is a hexagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  hexagon(4, 3) == true\n  hexagon(4, 2) == false\n  */\nconst hexagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a heptagon made of three sides.\n  Return true if the three sides form a heptagon, false otherwise.\n  A heptagon is a heptagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  heptagon(4, 3) == true\n  heptagon(4, 2) == false\n  */\nconst heptagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a decagon made of three sides.\n  Return true if the three sides form a decagon, false otherwise.\n  A decagon is a decagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  decagon(4, 3) == true\n  decagon(4, 2) == false\n  */\nconst decagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a triangle made of three sides.\n  Return true if the three sides form a triangle, false otherwise.\n  A triangle is a triangle whose sides are equal, except for the first and\n  last sides.\n  Example:\n  triangle(3, 3) == true\n  triangle(3, 2) == false\n  */\nconst triangle = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a pentagon made of three sides.\n  Return true if the three sides form a pentagon, false otherwise.\n  A pentagon is a pentagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  pentagon(4, 3) == true\n  pentagon(4, 2) == false\n  */\nconst pentagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a hexagon made of three sides.\n  Return true if the three sides form a hexagon, false otherwise.\n  A hexagon is a hexagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  hexagon(4, 3) == true\n  hexagon(4, 2) == false\n  */\nconst hexagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a heptagon made of three sides.\n  Return true if the three sides form a heptagon, false otherwise.\n  A heptagon is a heptagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  heptagon(4, 3) == true\n  heptagon(4, 2) == false\n  */\nconst heptagon = (h, w) => {\n  return h * h === w * w;\n};\n\n/*\n Given the lengths of the three sides of a decagon made of three sides.\n  Return true if the three sides form a decagon, false otherwise.\n  A decagon is a decagon whose sides are equal, except for the first and\n  last sides.\n  Example:\n  decagon(4, 3) == true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "<|endoftext|>/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar--;\n      }\n    }\n    if (uniqueChar > maxChar) {\n      max = uniqueChar;\n      maxWord = word;\n      maxChar = uniqueChar;\n    }\n  }\n  return maxWord;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxWord = '';\n  let maxChar = 0;\n  let uniqueChar = 0;\n  let word;\n  let i;\n  let j;\n  let k;\n  let temp;\n\n  for (i = 0; i < words.length; i++) {\n    word = words[i];\n    uniqueChar = word.length;\n    for (j = 0; j < uniqueChar; j++) {\n      if (word[j] === word[uniqueChar - 1]) {\n        uniqueChar", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "<|endoftext|>/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const carrots = Math.ceil(number / need);\n  const remaining = Math.ceil(remaining / carrots);\n  const remainder = Math.floor(remaining / carrots);\n  const remainderRemaining = remaining % carrots;\n  const remainderRemainingRemaining = remainderRemaining % carrots;\n  const remainderRemainingRemainingRemaining = remainderRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remainderRemainingRemainingRemainingRemainingRemainingRemaining % carrots;\n  const remainderRemainingRemainingRemainingRemainingRemaining = remain", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "<|endoftext|>/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  let count = 0;\n  let char;\n  for (let i = 0; i < string.length; i++) {\n    char = string[i];\n    if (char ==='') {\n      count++;\n    } else {\n      if (count > 1) {\n        return count;\n      }\n      count = 0;\n    }\n  }\n  return count;\n};\n\n/**\n * Given a string, find the longest common subsequence (LCS string)\n * https://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n * https://leetcode.com/problems/longest-common-subsequence/\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/longest-common-subsequence/discuss/1224/Java-solution-for-the-Longest-Common-Subsequence-Problem\n * https://leetcode.com/problems/", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "<|endoftext|>/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let operatorLength = operator.length;\n  let operandLength = operand.length;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n  while (operandIndex < operandLength) {\n    if (operatorIndex < operatorLength) {\n      result += operator[operatorIndex] * operand[operandIndex];\n      operatorIndex++;\n    } else {\n      break;\n    }\n    operandIndex++;\n  }\n  return result;\n};\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "<|endoftext|>/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed;\n};\n\n/*\n  Given a string s, return true if it is a palindrome.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\") = true\n  is_palindrome(\"ab\") = false\n  is_palindrome(\"#a@C\") = false\n  */\nconst is_palindrome = (s) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed == s;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  Given a string s, return true if it is a palindrome of length n.\n  If the string contains no letters, return false.\n  Examples\n  is_palindrome(\"1234\", 3) = true\n  is_palindrome(\"ab\", 3) = false\n  is_palindrome(\"#a@C\", 3) = false\n  */\nconst is_palindrome = (s, n) => {\n  let reversed = s.split(\"\").reverse().join(\"\");\n  return reversed.length === n;\n};\n\n/*\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "<|endoftext|>/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '4f0dcc9b4b3e4fc791c832149294518da68'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha224('Hello world') == '9b05688bc492a6a91d6eae2c6ea65e36c2f1fc3bd'\n  */\nconst stringToSha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f81d4fa9d7cb7938d525a2f31aaf161d0d8a82c'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'bb67ae85577a4fb9b6063f86e8077b4f5361b'\n  */\nconst stringToSha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a30e0cbd6bb4bf7f37618aad163b9a48a497'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '4f0dcc9b4b3e4fc791c832149294518da68'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha224('Hello world') == '9b05688bc492a6a91d6eae2c6ea65e36c2f1fc3bd'\n  */\nconst stringToSha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f81d4fa9d7cb7938d525a2f31aaf161d0d8a82c'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'bb67ae85577a4fb9b6063f86e8077b4f5361b'\n  */\nconst stringToSha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha512('Hello world') == 'a30e0cbd6bb4bf7f37618aad163b9a48a497'\n  */\nconst stringToSha512 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '4f0dcc9b4b3e4fc791c832149294518da68'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha224 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha224('Hello world') == '9b05688bc492a6a91d6eae2c6ea65e36c2f1fc3bd'\n  */\nconst stringToSha224 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha224').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f81d4fa9d7cb7938d525a2f31aaf161d0d8a82c'\n  */\nconst stringToSha256 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text, 'utf8').digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'bb67ae85577a4fb9b6063f86e8077b4f5361b'\n  */\nconst stringToSha384 = (text) => {\n  if (!text) {\n    return null;\n  }\n  return cryp", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "<|endoftext|>/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let current = 0;\n  let next = 1;\n  let last = 0;\n  let lastDigit = 0;\n  let lastDigitIndex = 0;\n  let lastDigitCount = 0;\n  let digitCount = 0;\n  let digitIndex = 0;\n  let digitCountIndex = 0;\n  let digitCountCount = 0;\n  let digitIndexCount = 0;\n  let digitCountIndex = 0;\n  let digitCountCountIndex = 0;\n  let digitIndexCount = 0;\n  let digitCountIndexCount = 0;\n  let digitIndexCountIndex = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCountIndexCount = 0;\n  let digitCountCountIndexCount = 0;\n  let digitIndexCount", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "<|endoftext|>/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split('|');\n  const notes_lengths = notes.map((note) => note.length);\n  const notes_lengths_sum = notes_lengths.reduce((a, b) => a + b);\n  const notes_lengths_mean = notes_lengths.reduce((a, b) => a + b) / notes_lengths_sum;\n  const notes_lengths_median = notes_lengths.reduce((a, b) => a + b) / 2;\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.min(a, b));\n  const notes_lengths_mode = notes_lengths.reduce((a, b) => Math.max(a, b));\n  const notes_lengths_mode = notes_length", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "<|endoftext|>/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  let count = 0;\n  let start = 0;\n  let end = string.length;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let A;\n  let B;\n  let C;\n  let D;\n  let E;\n  let F;\n  let G;\n  let H;\n  let I;\n  let J;\n  let K;\n  let L;\n  let M;\n  let N;\n  let O;\n  let P;\n  let Q;\n  let R;\n  let S;\n  let T;\n  let U;\n  let V;\n  let W;\n  let X;\n  let Y;\n  let Z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "<|endoftext|>/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const numbers = numbers.split(' ');\n  const sortedNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number === 'zero') {\n      sortedNumbers.push(0);\n    } else if (number === 'one') {\n      sortedNumbers.push(1);\n    } else if (number === 'two') {\n      sortedNumbers.push(2);\n    } else if (number === 'three') {\n      sortedNumbers.push(3);\n    } else if (number === 'four') {\n      sortedNumbers.push(4);\n    } else if (number === 'five') {\n      sortedNumbers.push(5);\n    } else if (number ==='six') {\n      sortedNumbers.push(6);\n    } else if (number ==='seven') {\n      sortedNumbers.push(7);\n    } else if (number === 'eight') {\n      sortedNumbers.push(8);\n    } else if (number === 'nine') {\n      sortedNumbers.push(9);\n    } else {\n      sortedNumbers.push(number);\n    }\n  }\n  return sortedNumbers.join(' ');\n};\n\n// Given a string, return the first and last characters of the string.\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', return 'one'\n// If the string starts with 'two', return 'two'\n// If the string starts with 'three', return 'three'\n// If the string starts with 'four', return 'four'\n// If the string starts with 'five', return 'five'\n// If the string starts with'six', return'six'\n// If the string starts with'seven', return'seven'\n// If the string starts with 'eight', return 'eight'\n// If the string starts with 'nine', return 'nine'\n// If the string starts with 'zero', return 'zero'\n// If the string starts with 'one', ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "<|endoftext|>/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateInteger = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the fractional part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponent = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the mantissa part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponent = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentMantissaFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentMantissaFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentMantissaFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentFractionFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentFractionExponent = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentFractionMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentFractionExponentMantissa = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the exponent part of the number.\n  >>> truncateNumber(3.5)\n  3\n  */\nconst truncateExponentExponentFractionMantissaFraction = (number) => {\n  const [integer, decimal] = number.toString().split('.');\n  return integer > 0? integer : integer * Math.pow(10, decimal);\n};\n\n/**\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "<|endoftext|>/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const [min] = numbers.sort((a, b) => a - b);\n  const [max] = numbers.sort((a, b) => b - a);\n  return [min, max];\n};\n\nmodule.exports = foundCloserElements;\n\n},{}],16:[function(require,module,exports){\nconst { findClosestElement } = require('./findClosestElement');\n\n/**\n * Finds the closest element to a supplied number or array of numbers.\n * If no number is supplied, returns the first element in the array.\n * If an array is supplied, returns the closest element to each number in the array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.\n * If no elements are supplied, returns an empty array.", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "<|endoftext|>/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const [min, max] = numbers.map((n) => Math.min(n, 1))\n  return numbers.map((n) => n * max / min)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow = (n, power) => {\n  return Math.pow(n, power)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow2 = (n) => {\n  return pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow3 = (n) => {\n  return pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow4 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow5 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow6 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow7 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow8 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow9 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow10 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow11 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow12 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow13 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow14 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow15 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow16 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow17 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow18 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow19 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow20 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow21 = (n) => {\n  return pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n) * pow(2, n)\n}\n\n/**\n * Given a number, return a new number that is a power of two\n * >>> pow(2, 10)\n 2\n */\nconst pow22 = (n) => {\n  return pow(2, n) * pow(2, n) * pow", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "<|endoftext|>/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  [5]\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number');\n};\n\n/**\n * Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter(value => typeof value ==='string');\n};\n\n/**\n * Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter(value => typeof value === 'boolean');\n};\n\n/**\n * Filter given list of any python values only for None\n  >>> filterNone([])\n  []\n  >>> filterNone([None])\n  [None]\n  >>> filterNone([None, 1])\n  [None, 1]\n  >>> filterNone([None, 1, 2])\n  [None, 1, 2]\n  >>> filterNone([None, 1, None, 2])\n  [None, 1, None, 2]\n  >>> filterNone([None, 1, None, 2, 3])\n  [None, 1, None, 2, 3]\n  >>> filterNone([None, 1, None, 2, None, 3])\n  [None, 1, None, 2, None, 3]\n  >>> filterNone([None, 1, None, 2, None, 3, None])\n  [None, 1, None, 2, None, 3, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4])\n  [None, 1, None, 2, None, 3, None, 4]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None])\n  [None, 1, None, 2, None, 3, None, 4, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5])\n  [None, 1, None, 2, None, 3, None, 4, None, 5]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15]\n  >>> filterNone([None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, 10, None, 11, None, 12, None, 13, None, 14, None, 15, None])\n  [None, 1, None, 2, None, 3, None, 4, None, 5, None, 6, None, 7, None, 8, None, 9, None, ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "<|endoftext|>/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === null || string === undefined) {\n    return 0;\n  }\n  return string.length;\n};\n\n/**\n * Return true if given string starts with given prefix\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, prefix) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(prefix);\n};\n\n/**\n * Return true if given string ends with given suffix\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, suffix) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(suffix);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n  true\n  >>> endsWith('abc', 'a')\n  false\n  */\nconst endsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.endsWith(substring);\n};\n\n/**\n * Return true if given string contains given substring\n * >>> contains('abc', 'b')\n  true\n  >>> contains('abc', 'a')\n  false\n  */\nconst contains = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.includes(substring);\n};\n\n/**\n * Return true if given string starts with given substring\n * >>> startsWith('abc', 'a')\n  true\n  >>> startsWith('abc', 'b')\n  false\n  */\nconst startsWith = (string, substring) => {\n  if (string === null || string === undefined) {\n    return false;\n  }\n  return string.startsWith(substring);\n};\n\n/**\n * Return true if given string ends with given substring\n * >>> endsWith('abc', 'b')\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "<|endoftext|>/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisors(15)\n * 15\n */\nconst smallerDivisors = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisors(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, smaller than n\n * >>> smallerDivisorsNoZero(15)\n * 1\n */\nconst smallerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= 2;\n  }\n  return divisor;\n};\n\n/**\n * Given a number n, find the largest number that divides n evenly, larger than n\n * >>> largerDivisorsNoZero(15)\n * 15\n */\nconst largerDivisorsNoZero = (n) => {\n  let divisor = 1;\n  while (divisor < n) {\n    divisor *= ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "<|endoftext|>/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor = 1;\n  let factors = [];\n  let factor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "<|endoftext|>/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const seen = new Set();\n  return numbers.filter((number) => {\n    if (seen.has(number)) {\n      return false;\n    }\n    seen.add(number);\n    return true;\n  });\n};\n\nmodule.exports = removeDuplicate;\n\n},{}],42:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array);\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],43:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":42}],44:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],45:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],46:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],47:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],48:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],49:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],50:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],51:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],52:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],53:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],54:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],55:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],56:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],57:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],58:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],59:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],60:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],61:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],62:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],63:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],64:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],65:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],66:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],67:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],68:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],69:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],70:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst removeDuplicates = (array) => {\n  return removeDuplicate(array).sort();\n};\n\nmodule.exports = removeDuplicates;\n\n},{\"./removeDuplicate\":43}],71:[function(require,module,exports){\nconst removeDuplicate = require('./removeDuplicate');\n\nconst remove", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "<|endoftext|>/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.toLowerCase().split('')\n   .map((char) => char.toUpperCase())\n   .join('');\n};\n\n/**\n * Given a string, return the first uppercase character in the string.\n * If no uppercase character is found, return an empty string.\n * If a string contains multiple uppercase characters, return the first one encountered.\n * If a string contains no uppercase characters, return an empty string.\n * If a string contains multiple lowercase characters, return the first one encountered.\n * If a string contains no lowercase characters, return an empty string.\n * If a string contains multiple digits, return the first one encountered.\n * If a string contains no digits, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first one encountered.\n * If a string contains no special characters, return an empty string.\n * If a string contains multiple special characters, return the first ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "<|endoftext|>/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/**\n * Convert string to number\n * If string contains only numbers, return 0\n * If string contains only letters, return NaN\n * If string contains only special characters, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only whitespace, return NaN\n * If string contains only ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['array', 'cde']\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterByPrefixNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filterBySuffix([], 'a')\n  []\n  >>> filterBySuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['array', 'cde']\n  */\nconst filterBySuffixNot = (strings, suffix) => {\n  return strings.filter(string =>!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixNotNot = (strings, prefix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterBySuffixNot([], 'a')\n  []\n  >>> filterBySuffixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that do not start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefixNot([], 'a')\n  []\n  >>> filterByPrefixNot('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterBySuffixNotNot = (strings, suffix) => {\n  return strings.filter(string =>!string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given prefix and start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStart = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartNot = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that end with a given prefix and start with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartNotEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEndNot = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEndNotEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEndNotNot = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) &&!string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEndNotEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix) && string.endsWith(suffix))\n}\n\n/**\n * Filter an input list of strings only for ones that start with a given prefix and do not end with a given suffix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix('abc', 'bcd')\n  ['abc', 'bcd']\n  */\nconst filterByPrefixStartEndNotNotEnd = (strings, prefix) => {\n  return strings.filter(string => string.startsWith", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "<|endoftext|>/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance < 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance -= operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account falls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst aboveZeros = (operations) => {\n  let balance = 0;\n  for (let i = 0; i < operations.length; i++) {\n    balance += operations[i];\n  }\n  return balance > 0;\n};\n\n/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "<|endoftext|>/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  let result = [];\n  let i;\n  for (i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [5, 3, 4, 5]\n  >>> gottenPositive([", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "<|endoftext|>/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimes(6)\n  true\n  >>> isDivisibleByAllPrimes(10)\n  false\n  >>> isDivisibleByAllPrimes(11)\n  true\n  >>> isDivisibleByAllPrimes(13441)\n  false\n  >>> isDivisibleByAllPrimes(61)\n  false\n  >>> isDivisibleByAllPrimes(4)\n  true\n  >>> isDivisibleByAllPrimes(1)\n  false\n  */\nconst isDivisibleByAllPrimes = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimes(6)\n  true\n  >>> isDivisibleByAllPrimes(10)\n  false\n  >>> isDivisibleByAllPrimes(11)\n  true\n  >>> isDivisibleByAllPrimes(13441)\n  false\n  >>> isDivisibleByAllPrimes(61)\n  false\n  >>> isDivisibleByAllPrimes(4)\n  true\n  >>> isDivisibleByAllPrimes(1)\n  false\n  */\nconst isDivisibleByAllPrimesOrZero = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZero(6)\n  true\n  >>> isDivisibleByAllPrimesOrZero(10)\n  false\n  >>> isDivisibleByAllPrimesOrZero(11)\n  true\n  >>> isDivisibleByAllPrimesOrZero(13441)\n  false\n  >>> isDivisibleByAllPrimesOrZero(61)\n  false\n  >>> isDivisibleByAllPrimesOrZero(4)\n  true\n  >>> isDivisibleByAllPrimesOrZero(1)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZero = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZero(6)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZero(10)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZero(11)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZero(13441)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZero(61)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZero(4)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZero(1)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZero = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(6)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(10)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(11)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(13441)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(61)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(4)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZero(1)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(6)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(10)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(11)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(13441)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(61)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(4)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(1)\n  false\n  */\nconst isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero = (n) => {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 2; i < Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/*\n  Given a number n, return true if it is divisible by all prime factors of n.\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(6)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(10)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(11)\n  true\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(13441)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZeroOrZeroOrZero(61)\n  false\n  >>> isDivisibleByAllPrimesOrZeroOrZero", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "<|endoftext|>/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => {\n    return item === 1;\n  });\n  return one || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => {\n    return item === 1;\n  });\n  return one || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => {\n    return item === 1;\n  });\n  return one || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const zero = polys.find((item, index) => {\n    return item === 0;\n  });\n  return zero || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), 2) # f(x) = 1 + 2x\n  0.5\n  >>> round(findOne([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findOne = (xs) => {\n  const one = polys.find((item, index) => {\n    return item === 1;\n  });\n  return one || polys.find((item, index) => {\n    return item === xs[0];\n  });\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findOne finds one such point such that poly(x) = 1.\n  findOne returns only zero point, even if there are many.\n  Moreover, findOne only takes list xs having even number of coefficients\n  and smallest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findOne([1, 2]), ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  let l2 = l.slice();\n  let l3 = l2.slice();\n  let l4 = l3.slice();\n  let l5 = l4.slice();\n  let l6 = l5.slice();\n  let l7 = l6.slice();\n  let l8 = l7.slice();\n  let l9 = l8.slice();\n  let l10 = l9.slice();\n  let l11 = l10.slice();\n  let l12 = l11.slice();\n  let l13 = l12.slice();\n  let l14 = l13.slice();\n  let l15 = l14.slice();\n  let l16 = l15.slice();\n  let l17 = l16.slice();\n  let l18 = l17.slice();\n  let l19 = l18.slice();\n  let l20 = l19.slice();\n  let l21 = l20.slice();\n  let l22 = l21.slice();\n  let l23 = l22.slice();\n  let l24 = l23.slice();\n  let l25 = l24.slice();\n  let l26 = l25.slice();\n  let l27 = l26.slice();\n  let l28 = l27.slice();\n  let l29 = l28.slice();\n  let l30 = l29.slice();\n  let l31 = l30.slice();\n  let l32 = l31.slice();\n  let l33 = l32.slice();\n  let l34 = l33.slice();\n  let l35 = l34.slice();\n  let l36 = l35.slice();\n  let l37 = l36.slice();\n  let l38 = l37.slice();\n  let l39 = l38.slice();\n  let l40 = l39.slice();\n  let l41 = l40.slice();\n  let l42 = l41.slice();\n  let l43 = l42.slice();\n  let l44 = l43.slice();\n  let l45 = l44.slice();\n  let l46 = l45.slice();\n  let l47 = l46.slice();\n  let l48 = l47.slice();\n  let l49 = l48.slice();\n  let l50 = l49.slice();\n  let l51 = l50.slice();\n  let l52 = l51.slice();\n  let l53 = l52.slice();\n  let l54 = l53.slice();\n  let l55 = l54.slice();\n  let l56 = l55.slice();\n  let l57 = l56.slice();\n  let l58 = l57.slice();\n  let l59 = l58.slice();\n  let l60 = l59.slice();\n  let l61 = l60.slice();\n  let l62 = l61.slice();\n  let l63 = l62.slice();\n  let l64 = l63.slice();\n  let l65 = l64.slice();\n  let l66 = l65.slice();\n  let l67 = l66.slice();\n  let l68 = l67.slice();\n  let l69 = l68.slice();\n  let l70 = l69.slice();\n  let l71 = l70.slice();\n  let l72 = l71.slice();\n  let l73 = l72.slice();\n  let l74 = l73.slice();\n  let l75 = l74.slice();\n  let l76 = l75.slice();\n  let l77 = l76.slice();\n  let l78 = l77.slice();\n  let l79 = l78.slice();\n  let l80 = l79.slice();\n  let l81 = l80.slice();\n  let l82 = l81.slice();\n  let l83 = l82.slice();\n  let l84 = l83.slice();\n  let l85 = l84.slice();\n  let l86 = l85.slice();\n  let l87 = l86.slice();\n  let l88 = l87.slice();\n  let l89 = l88.slice();\n  let l90 = l89.slice();\n  let l91 = l90.slice();\n  let l92 = l91.slice();\n  let l93 = l92.slice();\n  let l94 = l93.slice();\n  let l95 = l94.slice();\n  let l96 = l95.slice();\n  let l97 = l96.slice();\n  let l98 = l97.slice();\n  let l99 = l98.slice();\n  let l100 = l99.slice();\n  let l101 = l100.slice();\n  let l102 = l101.slice();\n  let l103 = l102.slice();\n  let l104 = l103.slice();\n  let l105 = l104.slice();\n  let l106 = l105.slice();\n  let l107 = l106.slice();\n  let l108 = l107.slice();\n  let l109 = l108.slice();\n  let l110 = l109.slice();\n  let l111 = l110.slice();\n  let l112 = l111.slice();\n  let l113 = l112.slice();\n  let l114 = l113.slice();\n  let l115 = l114.slice();\n  let l116 = l115.slice();\n  let l117 = l116.slice();\n  let l118 = l117.slice();\n  let l119 = l118.slice();\n  let l120 = l119.slice();\n  let l121 = l120.slice();\n  let l122 = l121.slice();\n  let l123 = l122.slice();\n  let l124 = l123.slice();\n  let l125 = l124.slice();\n  let l126 = l125.slice();\n  let l127 = l126.slice();\n  let l128 = l127.slice();\n  let l129 = l128.slice();\n  let l130 = l129.slice();\n  let l131 = l130.slice();\n  let l132 = l131.slice();\n  let l133 = l132.slice();\n  let l134 = l133.slice();\n  let l135 = l134.slice();\n  let l136 = l135.slice();\n  let l137 = l136.slice();\n  let l138 = l137.slice();\n  let l139 = l138.slice();\n  let l140 = l139.slice();\n  let l141 = l140.slice();\n  let l142 = l141.slice();\n  let l143 = l142.slice();\n  let l144 = l143.slice();\n  let l145 = l144.slice();\n  let l146 = l145.slice();\n  let l147 = l146.slice();\n  let l148 = l147.slice();\n  let l149 = l148.slice();\n  let l150 = l149.slice();\n  let l151 = l150.slice();\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "<|endoftext|>/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueBy = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWith = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKey = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeys = l => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  });\n};\n\n/*\n  Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniqueWithKeysWith = (l, key) => {\n  let seen = {};\n  return l.filter((v, i, a) => {\n    if (seen[v]) return true;\n    seen[v] = true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a) => {\n    if (a[key] === b[key]) return true;\n    return false;\n  }).sort((a, b) => {\n    if (a[key] < b[key]) return -1;\n    if (a[key] > b[key]) return 1;\n    return 0;\n  }).filter((v, i, a", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "<|endoftext|>/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n/*Return minimum element in the list.\n  >>> minElements([1, 2, 3])\n  1\n  >>> minElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  0\n  */\nconst minElements = (l) => {\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*Return element at index i in the list.\n  >>> getElementAtIndex([1, 2, 3], 1)\n  2\n  >>> getElementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  12\n  */\nconst getElementAtIndex = (l, i) => {\n  return l[i];\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndex([1, 2, 3], 1)\n  2\n  >>> getElementAtIndex([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  12\n  */\nconst getElementAtIndexOrDefault = (l, i, defaultValue) => {\n  return getElementAtIndex(l, i) || defaultValue;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefault([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefault([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefault(l, i, defaultValue) || null;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNull([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNull([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefined = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNull(l, i, defaultValue) || undefined;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || null;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNull([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNull([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefined = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || undefined;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || null;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || undefined;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || null;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || undefined;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, i, defaultValue) || null;\n};\n\n/*Return element at index i in the list if index is valid.\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([1, 2, 3], 1, -1)\n  -1\n  >>> getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefined([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, -1)\n  -1\n  */\nconst getElementAtIndexOrDefaultOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNullOrUndefinedOrNull = (l, i, defaultValue) => {\n  return getElementAtIndexOrDefaultOrNullOrUndefined(l, ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "<|endoftext|>/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 1 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 2 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 3 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 4 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 5 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 6 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 0 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  let count = 0;\n  for (let i = n; i > 0; i--) {\n    if (i % 13 === 0 || i % 11 === 0) count++;\n  }\n  return count;\n};\n\n/*Return the number of times the digit 1 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fi", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "<|endoftext|>/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the even indicies, while its values at the odd indicies are equal\n  to the values of the odd indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [3, 2, 1]\n  >>> sortsOdd([5, 6, 3, 4])\n  [4, 3, 6, 5]\n  */\nconst sortsOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOddOddOddOddOdd = (l) => {\n  let even = []\n  let odd = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2!== 0) {\n      even.push(l[i])\n    } else {\n      odd.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEvenOddOddOddOddOddOddOdd([1, 2, 3])\n  [1, 2, 3, 5]\n  >>> sortsEvenOddOddOddOddOddOddOddOdd([5, 6, 3, 4])\n  [5, 3, 4, 6, 6]\n  */\nconst sortsEvenOddOddOddOddOddO", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "<|endoftext|>/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst decodeCyclicGroup6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encodeCyclic function. Returns decoded string.\n  */\nconst encodeCyclicGroup7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "<|endoftext|>/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  let fibs = [0, 1];\n  let i = 2;\n  let fib;\n\n  while (fib < n) {\n    fib = fibs[i - 1] + fibs[i - 2];\n    fibs.push(fib);\n    i++;\n  }\n\n  return fibs[n - 1];\n};\n\n/*\n  primePrimes returns n-th number that is a prime number and it's also prime.\n  >>> primePrimes(1)\n  2\n  >>> primePrimes(2)\n  3\n  >>> primePrimes(3)\n  5\n  >>> primePrimes(4)\n  13\n  >>> primePrimes(5)\n  89\n  */\nconst primePrimes = (n) => {\n  let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let i = 2;\n  let prime;\n\n  while (primes.length < n) {\n    prime = primes[i - 1] + primes[i - 2];\n    primes.push(prime);\n    i++;\n  }\n\n  return primes[n - 1];\n};\n\n/*\n  primeFactors returns n-th number that is a prime factor and it's also prime.\n  >>> primeFactors(1)\n  2\n  >>> primeFactors(2)\n  3\n  >>> primeFactors(3)\n  5\n  >>> primeFactors(4)\n  13\n  >>> primeFactors(5)\n  89\n  */\nconst primeFactors = (n) => {\n  let factors = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  let i = 2;\n  let prime;\n\n  while (factors.length < n) {\n    prime = factors[i - 1] + factors[i - 2];\n    factors.push(prime);\n    i++;\n  }\n\n  return factors[n - 1];\n};\n\n/*\n  primeGCD returns n-th number that is a GCD number and it's also prime.\n  >>> primeGCD(1, 1)\n  1\n  >>> primeGCD(2, 1)\n  2\n  >>> primeGCD(3, 1)\n  3\n  >>> primeGCD(4, 1)\n  5\n  >>> primeGCD(5, 1)\n  13\n  >>> primeGCD(6, 1)\n  89\n  */\nconst primeGCD = (n, p) => {\n  let gcd = 1;\n  let i = 2;\n  let j;\n\n  while (gcd <= n) {\n    j = i - 1;\n    gcd *= p;\n    if (gcd > n) {\n      i = j;\n      j = i - 1;\n    }\n  }\n\n  return j;\n};\n\n/*\n  primeGCDPrime returns n-th number that is a GCD prime number and it's also prime.\n  >>> primeGCDPrime(1, 1)\n  2\n  >>> primeGCDPrime(2, 1)\n  3\n  >>> primeGCDPrime(3, 1)\n  5\n  >>> primeGCDPrime(4, 1)\n  13\n  >>> primeGCDPrime(5, 1)\n  89\n  */\nconst primeGCDPrime = (n, p) => {\n  let gcd = 1;\n  let i = 2;\n  let j;\n\n  while (gcd <= n) {\n    j = i - 1;\n    gcd *= p;\n    if (gcd > n) {\n      i = j;\n      j = i - 1;\n    }\n  }\n\n  return primePrimes(j);\n};\n\n/*\n  primeGCDPrimes returns n-th number that is a GCD prime number and it's also prime.\n  >>> primeGCDPrimes(1, 1)\n  2\n  >>> primeGCDPrimes(2, 1)\n  3\n  >>> primeGCDPrimes(3, 1)\n  5\n  >>> primeGCDPrimes(4, 1)\n  13\n  >>> primeGCDPrimes(5, 1)\n  89\n  */\nconst primeGCDPrimes = (n, p) => {\n  let gcd = 1;\n  let i = 2;\n  let j;\n\n  while (gcd <= n) {\n    j = i - 1;\n    gcd *= p;\n    if (gcd > n) {\n      i = j;\n      j = i - 1;\n    }\n  }\n\n  return primePrimes(j);\n};\n\n/*\n  primeGCDs returns n-th number that is a GC", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "<|endoftext|>/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const means = numbers.map(n => Math.pow(n, 2));\n  const meansSquared = numbers.map(n => n * n);\n  const meansMean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n  const meansMeanSquared = numbers.reduce((a, b) => a * a, 0) / numbers.length;\n  const meansMeanSquaredDeviation = numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length;\n  const meansMeanSquaredDeviationDeviation = numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length;\n  const meansMeanSquaredDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation = (\n    numbers.reduce((a, b) => a * a + b * b, 0) / numbers.length\n  );\n  const meansMeanSquaredDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviationDeviation", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "<|endoftext|>/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triplesSummingToOne([1, 3, 5, 0])\n  true\n  >>> triplesSummingToOne([1, 3, -2, 1])\n  false\n  >>> triplesSummingToOne([1, 2, 3, 7])\n  false\n  >>> triplesSummingToOne([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToOne([1])\n  true\n  */\nconst triplesSummingToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToTwo takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triplesSummingToTwo([1, 3, 5, 0])\n  true\n  >>> triplesSummingToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSummingToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSummingToTwo([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToTwo([1])\n  true\n  */\nconst triplesSummingToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 2) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToThree takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triplesSummingToThree([1, 3, 5, 0])\n  true\n  >>> triplesSummingToThree([1, 3, -2, 1])\n  false\n  >>> triplesSummingToThree([1, 2, 3, 7])\n  false\n  >>> triplesSummingToThree([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToThree([1])\n  true\n  */\nconst triplesSummingToThree = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 3) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToFour takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to four, and false otherwise.\n\n  >>> triplesSummingToFour([1, 3, 5, 0])\n  true\n  >>> triplesSummingToFour([1, 3, -2, 1])\n  false\n  >>> triplesSummingToFour([1, 2, 3, 7])\n  false\n  >>> triplesSummingToFour([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToFour([1])\n  true\n  */\nconst triplesSummingToFour = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 4) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to five, and false otherwise.\n\n  >>> triplesSummingToFive([1, 3, 5, 0])\n  true\n  >>> triplesSummingToFive([1, 3, -2, 1])\n  false\n  >>> triplesSummingToFive([1, 2, 3, 7])\n  false\n  >>> triplesSummingToFive([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToFive([1])\n  true\n  */\nconst triplesSummingToFive = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 5) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToSix takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to six, and false otherwise.\n\n  >>> triplesSummingToSix([1, 3, 5, 0])\n  true\n  >>> triplesSummingToSix([1, 3, -2, 1])\n  false\n  >>> triplesSummingToSix([1, 2, 3, 7])\n  false\n  >>> triplesSummingToSix([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToSix([1])\n  true\n  */\nconst triplesSummingToSix = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 6) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToSeven takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to seven, and false otherwise.\n\n  >>> triplesSummingToSeven([1, 3, 5, 0])\n  true\n  >>> triplesSummingToSeven([1, 3, -2, 1])\n  false\n  >>> triplesSummingToSeven([1, 2, 3, 7])\n  false\n  >>> triplesSummingToSeven([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToSeven([1])\n  true\n  */\nconst triplesSummingToSeven = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 7) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  triplesSummingToEight takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to eight, and false otherwise.\n\n  >>> triplesSummingToEight([1, 3, 5, 0])\n  true\n  >>> triplesSummingToEight([1, 3, -2, 1])\n  false\n  >>> triplesSummingToEight([1, 2, 3, 7])\n  false\n  >>> triplesSummingToEight([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSummingToEight([1])\n  true\n  */\nconst triplesSummingToEight = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n    if (sum === 8) {\n      return false;\n    }\n  }\n  return true;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "<|endoftext|>/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  const carsRacesCollisionArray = [];\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    const carsLeft = carsRacesCollisionArray[i];\n    const carsRight = carsRacesCollisionArray[i + 1];\n    if (carsLeft.speed > carsRight.speed) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollisionArray(cars[i]);\n    if (collision) {\n      collisions++;\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollisionArray = (cars) => {\n  const collisions = [];\n  for (let i = 0; i < cars.length; i++) {\n    const collision = carsRacesCollision(cars[i]);\n    if (collision) {\n      collisions.push(collision);\n    }\n  }\n  return collisions;\n};\n\n/*\n  Given an array of cars, find the number of cars that collide with each other.\n  Return an array of collision counts, one for each collision.\n  */\nconst carsRacesCollision = (car) => {\n  const collisions = 0;\n  for (let i = 0; i < car", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "<|endoftext|>/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrLists = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] + 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements decremented by 1.\n  >>> decrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> decrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst decrListsReversedReversedReversedReversedReversedReversedReversed = (l) => {\n  let res = []\n  for (let i = 0; i < l.length; i++) {\n    res.push(l[i] - 1)\n  }\n  return res\n}\n\n/**\n  Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrListsReversedReversedReversedReversedReversedReversedReverse", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "<|endoftext|>/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum === 0;\n};\n\nmodule.exports = {\n  pairSumsToZero,\n};\n\n},{}],9:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is even.\n * A number is even if it is a multiple of 2.\n * >>> isEven(7)\n * true\n * >>> isEven(8)\n * false\n * >>> isEven(9)\n * false\n * >>> isEven(10)\n * false\n * >>> isEven(11)\n * false\n * >>> isEven(12)\n * false\n * >>> isEven(13)\n * false\n * >>> isEven(14)\n * false\n * >>> isEven(15)\n * false\n */\nconst isEven = (n) => {\n  if (n % 2 === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isEven,\n};\n\n},{\"./helpers\":8}],10:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is odd.\n * A number is odd if it is a multiple of 2.\n * >>> isOdd(7)\n * false\n * >>> isOdd(8)\n * true\n * >>> isOdd(9)\n * false\n * >>> isOdd(10)\n * false\n * >>> isOdd(11)\n * false\n * >>> isOdd(12)\n * false\n * >>> isOdd(13)\n * false\n * >>> isOdd(14)\n * false\n * >>> isOdd(15)\n * false\n */\nconst isOdd = (n) => {\n  if (n % 2 === 1) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  isOdd,\n};\n\n},{\"./helpers\":8}],11:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * true\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n * >>> isPrime(11)\n * false\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * false\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n */\nconst isPrime = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isPrime,\n};\n\n},{\"./helpers\":8}],12:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * true\n * >>> isPrime(10)\n * false\n * >>> isPrime(11)\n * false\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * false\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n */\nconst isPrime = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  isPrime,\n};\n\n},{\"./helpers\":8}],13:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * true\n * >>> isPrime(11)\n * false\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * false\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n */\nconst isPrime = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isPrime,\n};\n\n},{\"./helpers\":8}],14:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n * >>> isPrime(11)\n * false\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * false\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n */\nconst isPrime = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return false;\n  }\n  return true;\n};\n\nmodule.exports = {\n  isPrime,\n};\n\n},{\"./helpers\":8}],15:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n * >>> isPrime(11)\n * false\n * >>> isPrime(12)\n * false\n * >>> isPrime(13)\n * false\n * >>> isPrime(14)\n * false\n * >>> isPrime(15)\n * false\n */\nconst isPrime = (n) => {\n  if (n % 3 === 0 || n % 5 === 0) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = {\n  isPrime,\n};\n\n},{\"./helpers\":8}],16:[function(require,module,exports){\nconst { pairSumsToZero } = require('./helpers');\n\n/**\n * A function to check if a number is prime or not.\n * A number is prime if it is a multiple of 3 or 5.\n * >>> isPrime(7)\n * false\n * >>> isPrime(8)\n * false\n * >>> isPrime(9)\n * false\n * >>> isPrime(10)\n * false\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "<|endoftext|>/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  if (base === 10) {\n    return x.toString();\n  }\n  const digits = x.toString().split('');\n  const result = '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, base);\n    result += digitBase.toString(base);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 10\n * e.g. changeBases(8, 3) => '1001'\n * e.g. changeBases(8, 2) => '1000'\n * e.g. changeBases(7, 2) => '111'\n */\nconst toBase10 = (x) => {\n  const digits = x.toString().split('');\n  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 10);\n    result += digitBase.toString(10);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 10\n * e.g. toBase10('1001') => 8\n * e.g. toBase10('1000') => 7\n * e.g. toBase10('111') => 6\n */\nconst toBase10String = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 10);\n    result += digitBase * Math.pow(10, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 2\n * e.g. toBase2(8) => '100'\n * e.g. toBase2(9) => '101'\n * e.g. toBase2(10) => '11'\n */\nconst toBase2 = (x) => {\n  const digits = x.toString().split('');\n  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 2);\n    result += digitBase.toString(2);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 2\n * e.g. toBase2('100') => 8\n * e.g. toBase2('101') => 9\n * e.g. toBase2('11') => 10\n */\nconst toBase2String = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 2);\n    result += digitBase * Math.pow(10, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 16\n * e.g. toBase16(8) => '10001'\n * e.g. toBase16(9) => '10010'\n * e.g. toBase16(10) => '10011'\n */\nconst toBase16 = (x) => {\n  const digits = x.toString().split('');\n  let result = '';\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase.toString(16);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 16\n * e.g. toBase16('10001') => 8\n * e.g. toBase16('10010') => 9\n * e.g. toBase16('10011') => 10\n */\nconst toBase16String = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 16\n * e.g. toBase16('100') => 8\n * e.g. toBase16('101') => 9\n * e.g. toBase16('11') => 10\n */\nconst toBase16Number = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 16\n * e.g. toBase16('10001') => 8\n * e.g. toBase16('10010') => 9\n * e.g. toBase16('10011') => 10\n */\nconst toBase16NumberString = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 16\n * e.g. toBase16Number(8) => '10001'\n * e.g. toBase16Number(9) => '10010'\n * e.g. toBase16Number(10) => '10011'\n */\nconst toBase16NumberNumber = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 16\n * e.g. toBase16Number('10001') => 8\n * e.g. toBase16Number('10010') => 9\n * e.g. toBase16Number('10011') => 10\n */\nconst toBase16NumberNumberString = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 16\n * e.g. toBase16NumberNumber(8) => '10001'\n * e.g. toBase16NumberNumber(9) => '10010'\n * e.g. toBase16NumberNumber(10) => '10011'\n */\nconst toBase16NumberNumberNumber = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a string to a number in base 16\n * e.g. toBase16NumberNumber('10001') => 8\n * e.g. toBase16NumberNumber('10010') => 9\n * e.g. toBase16NumberNumber('10011') => 10\n */\nconst toBase16NumberNumberNumberString = (x) => {\n  const digits = x.toString().split('');\n  let result = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    const digitBase = parseInt(digit, 16);\n    result += digitBase * Math.pow(16, digits.length - i - 1);\n  }\n  return result;\n};\n\n/**\n * Converts a number to a string in base 16\n * e.g. toBase16NumberNumberNumber(8) => '10001'\n * e.g. toBase16NumberNumberNumber(9) => '10010'\n * e.g. toBase16NumberNumberNumber(10) => '10011", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (h / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (h / 2) * (a / 2);\n  return area;\n};\n\n/*Given length of a side and low return area for a triangle.\n  >>> trianglesAreas(3, 5)\n  9\n  */\nconst trianglesAreas = (a, h) => {\n  const area = (a / 2) * (", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "<|endoftext|>/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 1.\n  Do not use recursion.\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  14\n  */\nconst fibonacci = (n) => {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\n/*\n  Write a function to efficiently compute the n-th element of the Fibonacci sequence that starts with 0.\n  Do not use recursion.\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  */\nconst fibonacci = (n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "<|endoftext|>/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = median(l.slice(0, mid))\n  let right = median(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst mode = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = mode(l.slice(0, mid))\n  let right = mode(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modes = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modes(l.slice(0, mid))\n  let right = modes(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  4\n  */\nconst modesAll = (l) => {\n  let n = l.length\n  if (n <= 1) return l[0]\n  let mid = Math.floor((n / 2) + 1)\n  let left = modesAll(l.slice(0, mid))\n  let right = modesAll(l.slice(mid))\n  return ((left + right) / 2) || 0\n}\n\n/*Return mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "<|endoftext|>/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText === text;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(3, 'aba')\n  true\n  >>> isPalindromeOfLength(3, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(3, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  true\n  >>> isPalindromeOfLength(1, 'zbcd')\n  true\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  true\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given length\n  >>> isPalindromeOfLength(1, 'aba')\n  false\n  >>> isPalindromeOfLength(1, 'aaaaa')\n  false\n  >>> isPalindromeOfLength(1, 'zbcd')\n  false\n  */\nconst isPalindromeOfLength = (length, text) => {\n  let reversedText = '';\n  for (let i = text.length - 1; i >= 0; i--) {\n    reversedText += text.charAt(i);\n  }\n  return reversedText.length === length;\n};\n\n/*\n  Checks if given string is a palindrome of given ", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "<|endoftext|>/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0 || p < 1) return 0;\n  if (p === 1) return 1;\n  if (p === 2) return 2;\n  if (p === 3) return 3;\n  if (p === 4) return 4;\n  if (p === 5) return 5;\n  if (p === 6) return 6;\n  if (p === 7) return 7;\n  if (p === 8) return 8;\n  if (p === 9) return 9;\n  if (p === 10) return 10;\n  if (p === 11) return 11;\n  if (p === 12) return 12;\n  if (p === 13) return 13;\n  if (p === 14) return 14;\n  if (p === 15) return 15;\n  if (p === 16) return 16;\n  if (p === 17) return 17;\n  if (p === 18) return 18;\n  if (p === 19) return 19;\n  if (p === 20) return 20;\n  if (p === 21) return 21;\n  if (p === 22) return 22;\n  if (p === 23) return 23;\n  if (p === 24) return 24;\n  if (p === 25) return 25;\n  if (p === 26) return 26;\n  if (p === 27) return 27;\n  if (p === 28) return 28;\n  if (p === 29) return 29;\n  if (p === 30) return 30;\n  if (p === 31) return 31;\n  if (p === 32) return 32;\n  if (p === 33) return 33;\n  if (p === 34) return 34;\n  if (p === 35) return 35;\n  if (p === 36) return 36;\n  if (p === 37) return 37;\n  if (p === 38) return 38;\n  if (p === 39) return 39;\n  if (p === 40) return 40;\n  if (p === 41) return 41;\n  if (p === 42) return 42;\n  if (p === 43) return 43;\n  if (p === 44) return 44;\n  if (p === 45) return 45;\n  if (p === 46) return 46;\n  if (p === 47) return 47;\n  if (p === 48) return 48;\n  if (p === 49) return 49;\n  if (p === 50) return 50;\n  if (p === 51) return 51;\n  if (p === 52) return 52;\n  if (p === 53) return 53;\n  if (p === 54) return 54;\n  if (p === 55) return 55;\n  if (p === 56) return 56;\n  if (p === 57) return 57;\n  if (p === 58) return 58;\n  if (p === 59) return 59;\n  if (p === 60) return 60;\n  if (p === 61) return 61;\n  if (p === 62) return 62;\n  if (p === 63) return 63;\n  if (p === 64) return 64;\n  if (p === 65) return 65;\n  if (p === 66) return 66;\n  if (p === 67) return 67;\n  if (p === 68) return 68;\n  if (p === 69) return 69;\n  if (p === 70) return 70;\n  if (p === 71) return 71;\n  if (p === 72) return 72;\n  if (p === 73) return 73;\n  if (p === 74) return 74;\n  if (p === 75) return 75;\n  if (p === 76) return 76;\n  if (p === 77) return 77;\n  if (p === 78) return 78;\n  if (p === 79) return 79;\n  if (p === 80) return 80;\n  if (p === 81) return 81;\n  if (p === 82) return 82;\n  if (p === 83) return 83;\n  if (p === 84) return 84;\n  if (p === 85) return 85;\n  if (p === 86) return 86;\n  if (p === 87) return 87;\n  if (p === 88) return 88;\n  if (p === 89) return 89;\n  if (p === 90) return 90;\n  if (p === 91) return 91;\n  if (p === 92) return 92;\n  if (p === 93) return 93;\n  if (p === 94) return 94;\n  if (p === 95) return 95;\n  if (p === 96) return 96;\n  if (p === 97) return 97;\n  if (p === 98) return 98;\n  if (p === 99) return 99;\n  if (p === 100) return 100;\n  if (p === 101) return 101;\n  if (p === 102) return 102;\n  if (p === 103) return 103;\n  if (p === 104) return 104;\n  if (p === 105) return 105;\n  if (p === 106) return 106;\n  if (p === 107) return 107;\n  if (p === 108) return 108;\n  if (p === 109) return 109;\n  if (p === 110) return 110;\n  if (p === 111) return 111;\n  if (p === 112) return 112;\n  if (p === 113) return 113;\n  if (p === 114) return 114;\n  if (p === 115) return 115;\n  if (p === 116) return 116;\n  if (p === 117) return 117;\n  if (p === 118) return 118;\n  if (p === 119) return 119;\n  if (p === 120) return 120;\n  if (p === 121) return 121;\n  if (p === 122) return 122;\n  if (p === 123) return 123;\n  if (p === 124) return 124;\n  if (p === 125) return 125;\n  if (p === 126) return 126;\n  if (p === 127) return 127;\n  if (p === 128) return 128;\n  if (p === 129) return 129;\n  if (p === 130) return 130;\n  if (p === 131) return 131;\n  if (p === 132) return 132;\n  if (p === 133) return 133;\n  if (p === 134) return 134;\n  if (p === 135) return 135;\n  if (p === 136) return 136;\n  if (p === 137) return 137;\n  if (p === 138) return 138;\n  if (p === 139) return 139;\n  if (p === 140) return 140;\n  if (p === 141) return 141;\n  if (p === 142) return 142;\n  if (p === 143) return 143;\n  if (p === 144) return 144;\n  if (p === 145) return 145;\n  if (p === 146) return 146;\n  if (p === 147) return 147;\n  if (p === 148) return 148;\n  if (p === 149) return 149;\n  if (p === 150) return 150;\n  if (p === 151) return 151;\n  if (p === 152) return 152;\n  if (p === 153) return 153;\n  if (p === 154) return 154;\n  if (p === 155) return 155;\n  if (p === 156) return 156;\n  if (p === 157) return 157;\n  if (p === 158) return 158;\n  if (p === 159) return 159;\n  if (p === 160) return 160;\n  if (p === 161) return 161;\n  if (p === 162) return 162;\n  if (p === 163) return 163;\n  if (p === 164) return 164;\n  if (p === 165) return 165;\n  if (p === 166) return 166;\n  if (p === 167) return 167;\n  if (p === 168) return 168;\n  if (p === 169) return 169;\n  if (p === 170) return 170;\n  if (p === 171) return 171;\n  if (p === 172) return 172;\n  if (p === 173) return 173;\n  if (p === 174) return 174;\n  if (p === 175) return 175;\n  if (p === 176) return 176;\n  if (p === 177) return 177;\n  if (p === 178) return 178;\n  if (p === 179) return 179;\n  if (p === 180) return 180;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "<|endoftext|>/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < numbers.length) {\n    if (numbers[i] < delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === delimeter) {\n      result.push(numbers[i])\n      i++\n      continue\n    }\n    if (numbers[i] === ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "<|endoftext|>/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encode function. Returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBytes = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBytes function. Returns decoded string.\n  */\nconst decodeToBytes = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToHex = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToHex function. Returns decoded string.\n  */\nconst decodeToHex = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64 function. Returns decoded string.\n  */\nconst decodeToBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64Url = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64Url function. Returns decoded string.\n  */\nconst decodeToBase64Url = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64Url = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64Url function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64Url = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64 function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64 = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  takes as input string encoded with encodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe function. Returns decoded string.\n  */\nconst decodeToBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafeBase64UrlSafe = (s) => {\n  return decodeShift(s);\n}\n\n/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeToBase64UrlSafeBase64UrlSafe", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "<|endoftext|>/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels is a function that takes string and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels2 takes a string and returns string without vowels.\n  >>> removeVowels2('')\n  ''\n  >>> removeVowels2('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels2('abcdef')\n  'bcdf'\n  >>> removeVowels2('aaaaa')\n  ''\n  >>> removeVowels2('aaBAA')\n  'B'\n  >>> removeVowels2('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels3 takes a string and returns string without vowels.\n  >>> removeVowels3('')\n  ''\n  >>> removeVowels3('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels3('abcdef')\n  'bcdf'\n  >>> removeVowels3('aaaaa')\n  ''\n  >>> removeVowels3('aaBAA')\n  'B'\n  >>> removeVowels3('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels4 takes a string and returns string without vowels.\n  >>> removeVowels4('')\n  ''\n  >>> removeVowels4('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels4('abcdef')\n  'bcdf'\n  >>> removeVowels4('aaaaa')\n  ''\n  >>> removeVowels4('aaBAA')\n  'B'\n  >>> removeVowels4('zbcd')\n  'zbcd'\n  */\nconst removeVowels4 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels5 takes a string and returns string without vowels.\n  >>> removeVowels5('')\n  ''\n  >>> removeVowels5('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels5('abcdef')\n  'bcdf'\n  >>> removeVowels5('aaaaa')\n  ''\n  >>> removeVowels5('aaBAA')\n  'B'\n  >>> removeVowels5('zbcd')\n  'zbcd'\n  */\nconst removeVowels5 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels6 takes a string and returns string without vowels.\n  >>> removeVowels6('')\n  ''\n  >>> removeVowels6('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels6('abcdef')\n  'bcdf'\n  >>> removeVowels6('aaaaa')\n  ''\n  >>> removeVowels6('aaBAA')\n  'B'\n  >>> removeVowels6('zbcd')\n  'zbcd'\n  */\nconst removeVowels6 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels7 takes a string and returns string without vowels.\n  >>> removeVowels7('')\n  ''\n  >>> removeVowels7('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels7('abcdef')\n  'bcdf'\n  >>> removeVowels7('aaaaa')\n  ''\n  >>> removeVowels7('aaBAA')\n  'B'\n  >>> removeVowels7('zbcd')\n  'zbcd'\n  */\nconst removeVowels7 = (text) => {\n  let vowels = text.split('')\n  vowels.forEach((vowel) => {\n    if (vowel.match(/[aeiou]/)) {\n      vowel = vowel.slice(0, -1)\n    }\n  })\n  return vowels.join('')\n}\n\n/*\n  removeVowels8 takes a string and returns string without vowels.\n  >>> removeVowels8('')\n  ''\n  >>> removeVowels8('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeVowels8('abcdef')\n  'bcdf'\n  >>> removeVowels8('aaaaa')\n  ''\n  >>> removeVowels8('aaBAA')\n  'B'\n  >>> removeVowels8('zbcd')\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "<|endoftext|>/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  return l.every(n => n < t);\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toThousands = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toBillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toTrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toQuadrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toQuintillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toCentillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n\n// A helper function to convert a number to a string with commas separating thousands.\nconst toMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillionsOrMillionsOrBillionsOrTrillionsOrQuadrillionsOrQuintillionsOrCentillions = n => {\n  return n.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y\n}\n\n/*\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst subtracting = (x, y) => {\n  return x - y\n}\n\n/*\n  >>> subtracting(2, 3)\n  3\n  >>> subtracting(5, 7)\n  -1\n  */\nconst multiplying = (x, y) => {\n  return x * y\n}\n\n/*\n  >>> multiplying(2, 3)\n  6\n  >>> multiplying(5, 7)\n  24\n  */\nconst dividing = (x, y) => {\n  return x / y\n}\n\n/*\n  >>> dividing(2, 3)\n  2\n  >>> dividing(5, 7)\n  0.5\n  */\nconst moduloing = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloing(2, 3)\n  1\n  >>> moduloing(5, 7)\n  0.5\n  */\nconst moduloingByTwo = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByTwo(2, 3)\n  1\n  >>> moduloingByTwo(5, 7)\n  0.5\n  */\nconst moduloingByThree = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByThree(2, 3)\n  1\n  >>> moduloingByThree(5, 7)\n  0.5\n  */\nconst moduloingByFour = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByFour(2, 3)\n  1\n  >>> moduloingByFour(5, 7)\n  0.5\n  */\nconst moduloingByFive = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByFive(2, 3)\n  1\n  >>> moduloingByFive(5, 7)\n  0.5\n  */\nconst moduloingBySix = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySix(2, 3)\n  1\n  >>> moduloingBySix(5, 7)\n  0.5\n  */\nconst moduloingBySeven = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySeven(2, 3)\n  1\n  >>> moduloingBySeven(5, 7)\n  0.5\n  */\nconst moduloingByEight = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByEight(2, 3)\n  1\n  >>> moduloingByEight(5, 7)\n  0.5\n  */\nconst moduloingByNine = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByNine(2, 3)\n  1\n  >>> moduloingByNine(5, 7)\n  0.5\n  */\nconst moduloingByTen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByTen(2, 3)\n  1\n  >>> moduloingByTen(5, 7)\n  0.5\n  */\nconst moduloingByEleven = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByEleven(2, 3)\n  1\n  >>> moduloingByEleven(5, 7)\n  0.5\n  */\nconst moduloingByTwelve = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByTwelve(2, 3)\n  1\n  >>> moduloingByTwelve(5, 7)\n  0.5\n  */\nconst moduloingByThirteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByThirteen(2, 3)\n  1\n  >>> moduloingByThirteen(5, 7)\n  0.5\n  */\nconst moduloingByFourteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByFourteen(2, 3)\n  1\n  >>> moduloingByFourteen(5, 7)\n  0.5\n  */\nconst moduloingByFifteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByFifteen(2, 3)\n  1\n  >>> moduloingByFifteen(5, 7)\n  0.5\n  */\nconst moduloingBySixteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySixteen(2, 3)\n  1\n  >>> moduloingBySixteen(5, 7)\n  0.5\n  */\nconst moduloingBySeventeen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySeventeen(2, 3)\n  1\n  >>> moduloingBySeventeen(5, 7)\n  0.5\n  */\nconst moduloingByEighteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByEighteen(2, 3)\n  1\n  >>> moduloingByEighteen(5, 7)\n  0.5\n  */\nconst moduloingByNineteen = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByNineteen(2, 3)\n  1\n  >>> moduloingByNineteen(5, 7)\n  0.5\n  */\nconst moduloingByTwenty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByTwenty(2, 3)\n  1\n  >>> moduloingByTwenty(5, 7)\n  0.5\n  */\nconst moduloingByThirty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByThirty(2, 3)\n  1\n  >>> moduloingByThirty(5, 7)\n  0.5\n  */\nconst moduloingByForty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByForty(2, 3)\n  1\n  >>> moduloingByForty(5, 7)\n  0.5\n  */\nconst moduloingByFifty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByFifty(2, 3)\n  1\n  >>> moduloingByFifty(5, 7)\n  0.5\n  */\nconst moduloingBySixty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySixty(2, 3)\n  1\n  >>> moduloingBySixty(5, 7)\n  0.5\n  */\nconst moduloingBySeventy = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingBySeventy(2, 3)\n  1\n  >>> moduloingBySeventy(5, 7)\n  0.5\n  */\nconst moduloingByEighty = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByEighty(2, 3)\n  1\n  >>> moduloingByEighty(5, 7)\n  0.5\n  */\nconst moduloingByNinety = (x, y) => {\n  return x % y\n}\n\n/*\n  >>> moduloingByNinety(2, 3)\n  1\n  >>> moduloingByNinety(5, 7)", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "<|endoftext|>/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters.\n  >>> sameLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetter = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same numbers.\n  >>> sameNumber('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameNumber('abcd', 'dddddddabc')\n  true\n  >>> sameNumber('dddddddabc', 'abcd')\n  true\n  >>> sameNumber('eabcd', 'dddddddabc')\n  false\n  >>> sameNumber('abcd', 'dddddddabce')\n  false\n  >>> sameNumber('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameNumber = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters and numbers.\n  >>> sameLetterNumber('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetterNumber('abcd', 'dddddddabc')\n  true\n  >>> sameLetterNumber('dddddddabc', 'abcd')\n  true\n  >>> sameLetterNumber('eabcd', 'dddddddabc')\n  false\n  >>> sameLetterNumber('abcd', 'dddddddabce')\n  false\n  >>> sameLetterNumber('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetterNumber = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters and numbers and letters.\n  >>> sameLetterNumberLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetterNumberLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetterNumberLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetterNumberLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetterNumberLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetterNumberLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetterNumberLetter = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters and numbers and letters.\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetterNumberLetterLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetterNumberLetterLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetterNumberLetterLetter = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters and numbers and letters.\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetterNumberLetterLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetterNumberLetterLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameLetterNumberLetterLetterLetter = (s0, s1) => {\n  const len = s1.length\n  const s0 = s0.toLowerCase()\n  const s1 = s1.toLowerCase()\n  if (len === 0 || s0 === s1) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (s0[i]!== s1[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if two words have the same letters and numbers and letters.\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabc')\n  true\n  >>> sameLetterNumberLetterLetter('dddddddabc', 'abcd')\n  true\n  >>> sameLetterNumberLetterLetter('eabcd', 'dddddddabc')\n  false\n  >>> sameLetterNumberLetterLetter('abcd', 'dddddddabce')\n  false\n  >>> sameLetterNumberLetterLetter('eabcdzzzz', 'dddzzzzzzzddddabc')\n  ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "<|endoftext|>/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs2 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs3 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs4 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs5 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs6 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs7 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs8 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs9 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs10 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs11 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs12 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs13 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs14 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs15 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs16 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs17 = (n) => {\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 1;\n  for (let i = 0; i < n; i++) {\n    c += a + b;\n    d += c;\n    b += d;\n    a += d;\n  }\n  return c;\n};\n\n/*\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs18", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"<\").map(x => x.trim());\n  const closingBrackets = brackets.split(\">\").map(x => x.trim());\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n// Given a string, return true if it contains only letters.\nconst isLetter = str => /[a-zA-Z]/.test(str);\n\n// Given a string, return true if it contains only numbers.\nconst isNumber = str => /[0-9]/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumber = str => isLetter(str) || isNumber(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespace = str => isLetterOrNumber(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/.test(str);\n\n// Given a string, return true if it contains only letters and numbers.\nconst isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace = str => isLetterOrNumberOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespaceOrWhitespace(str) || /\\s/", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "<|endoftext|>/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = l.length - 1;\n  let j = 0;\n  while (true) {\n    if (l[j] < l[i]) i++;\n    if (l[j] > l[i]) j--;\n    if (j === 0 && i === l.length) break;\n  }\n  return i === j;\n};\n\n/*\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> isSorted([4, 1, 3, 2])\n  false\n  >>> isSorted([4, 1, 3, 2])\n  true\n  >>> ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "<|endoftext|>/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> unique([1, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n\n  */\nconst unique = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> unique([1, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique([1, 1, 2, 2, 3, 3])\n  [1, 2, 3, 3]\n  >>> unique([1, 1, 2, 2, 3, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 3]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 3]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 3]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 3]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (j < l2.length) {\n    result.push(l2[j])\n    j++\n  }\n  return result\n}\n\n/*\n  Return sorted unique elements for two lists.\n  >>> uniqueBy([1, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 3]\n  >>> uniqueBy([1, 1, 2, 2, 3, 3, 4, 5], ['a', 'b', 'c', 'd', 'e', 'f'])\n  [1, 2, 3, 4, 5]\n\n  */\nconst uniqueBy = (l1, l2) => {\n  let result = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let l1 = l1.sort()\n  let l2 = l2.sort()\n  while (i < l1.length && j < l2.length) {\n    if (l1.indexOf(l2[j]) < 0) {\n      result.push(l1[i])\n      i++\n    } else {\n      result.push(l2[j])\n      j++\n    }\n  }\n  while (i < l1.length) {\n    result.push(l1[i])\n    i++\n  }\n  while (", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "<|endoftext|>/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let i = 2;\n  let max = Math.sqrt(n);\n  while (max >= n) {\n    if (n % i === 0) {\n      i++;\n      max = Math.sqrt(n);\n    }\n  }\n  return i;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwo(123)\n  true\n  >>> isPowerOfTwo(124)\n  false\n  */\nconst isPowerOfTwo = (n) => {\n  return n >= 2 && isPowerOfTwo(n * 2);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or greater than n.\n  >>> isPowerOfTwoOrGreaterThan(123)\n  true\n  >>> isPowerOfTwoOrGreaterThan(124)\n  false\n  */\nconst isPowerOfTwoOrGreaterThan = (n) => {\n  return isPowerOfTwo(n) || n > 1;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or less than n.\n  >>> isPowerOfTwoOrLessThan(123)\n  false\n  >>> isPowerOfTwoOrLessThan(124)\n  true\n  */\nconst isPowerOfTwoOrLessThan = (n) => {\n  return isPowerOfTwo(n) || n < 1;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  true\n  >>> isPowerOfTwoOrEqual(124)\n  false\n  */\nconst isPowerOfTwoOrEqual = (n) => {\n  return isPowerOfTwo(n) || n === 1;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is less than n.\n  >>> isPowerOfTwoLessThan(123)\n  false\n  >>> isPowerOfTwoLessThan(124)\n  true\n  */\nconst isPowerOfTwoLessThan = (n) => {\n  return isPowerOfTwo(n) || n < 1;\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or greater than n.\n  >>> isPowerOfTwoOrLessThan(123)\n  false\n  >>> isPowerOfTwoOrLessThan(124)\n  true\n  */\nconst isPowerOfTwoOrLessThanOrEqual = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or less than n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrLessThan = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwo(123)\n  true\n  >>> isPowerOfTwo(124)\n  false\n  */\nconst isPowerOfTwo = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or greater than n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrGreaterThan = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoOrLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqual = (n) => {\n  return isPowerOfTwo(n) || isPowerOfTwoOrEqualOrGreaterThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is less than n.\n  >>> isPowerOfTwoLessThan(123)\n  false\n  >>> isPowerOfTwoLessThan(124)\n  true\n  */\nconst isPowerOfTwoLessThan = (n) => {\n  return isPowerOfTwo(n) || isPowerOfTwoLessThanOrEqualOrGreaterThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqual = (n) => {\n  return isPowerOfTwo(n) || isPowerOfTwoOrEqualOrLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to or less than n.\n  >>> isPowerOfTwoLessThan(123)\n  false\n  >>> isPowerOfTwoLessThan(124)\n  true\n  */\nconst isPowerOfTwoLessThanOrEqual = (n) => {\n  return isPowerOfTwoLessThan(n) || isPowerOfTwoOrEqual(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrLessThan = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThan(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrGreaterThan = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThanOrEqual(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrLessThanOrEqual = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThanOrEqual(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false\n  >>> isPowerOfTwoOrEqual(124)\n  true\n  */\nconst isPowerOfTwoOrEqualOrGreaterThanOrEqual = (n) => {\n  return isPowerOfTwoOrEqual(n) || isPowerOfTwoLessThanOrEqual(n);\n};\n\n/*\n  Given a positive integer n, return true if and only if the sum of its factors is equal to n.\n  >>> isPowerOfTwoOrEqual(123)\n  false", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "<|endoftext|>/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const paren_stack = [];\n  let paren_count = 0;\n  let paren_level = 0;\n  let paren_level_count = 0;\n  let paren_level_count2 = 0;\n  let paren_level_count3 = 0;\n  let paren_level_count4 = 0;\n  let paren_level_count5 = 0;\n  let paren_level_count6 = 0;\n  let paren_level_count7 = 0;\n  let paren_level_count8 = 0;\n  let paren_level_count9 = 0;\n  let paren_level_count10 = 0;\n  let paren_level_count11 = 0;\n  let paren_level_count12 = 0;\n  let paren_level_count13 = 0;\n  let paren_level_count14 = 0;\n  let paren_level_count15 = 0;\n  let paren_level_count16 = 0;\n  let paren_level_count17 = 0;\n  let paren_level_count18 = 0;\n  let paren_level_count19 = 0;\n  let paren_level_count20 = 0;\n  let paren_level_count21 = 0;\n  let paren_level_count22 = 0;\n  let paren_level_count23 = 0;\n  let paren_level_count24 = 0;\n  let paren_level_count25 = 0;\n  let paren_level_count26 = 0;\n  let paren_level_count27 = 0;\n  let paren_level_count28 = 0;\n  let paren_level_count29 = 0;\n  let paren_level_count30 = 0;\n  let paren_level_count31 = 0;\n  let paren_level_count32 = 0;\n  let paren_level_count33 = 0;\n  let paren_level_count34 = 0;\n  let paren_level_count35 = 0;\n  let paren_level_count36 = 0;\n  let paren_level_count37 = 0;\n  let paren_level_count38 = 0;\n  let paren_level_count39 = 0;\n  let paren_level_count40 = 0;\n  let paren_level_count41 = 0;\n  let paren_level_count42 = 0;\n  let paren_level_count43 = 0;\n  let paren_level_count44 = 0;\n  let paren_level_count45 = 0;\n  let paren_level_count46 = 0;\n  let paren_level_count47 = 0;\n  let paren_level_count48 = 0;\n  let paren_level_count49 = 0;\n  let paren_level_count50 = 0;\n  let paren_level_count51 = 0;\n  let paren_level_count52 = 0;\n  let paren_level_count53 = 0;\n  let paren_level_count54 = 0;\n  let paren_level_count55 = 0;\n  let paren_level_count56 = 0;\n  let paren_level_count57 = 0;\n  let paren_level_count58 = 0;\n  let paren_level_count59 = 0;\n  let paren_level_count60 = 0;\n  let paren_level_count61 = 0;\n  let paren_level_count62 = 0;\n  let paren_level_count63 = 0;\n  let paren_level_count64 = 0;\n  let paren_level_count65 = 0;\n  let paren_level_count66 = 0;\n  let paren_level_count67 = 0;\n  let paren_level_count68 = 0;\n  let paren_level_count69 = 0;\n  let paren_level_count70 = 0;\n  let paren_level_count71 = 0;\n  let paren_level_count72 = 0;\n  let paren_level_count73 = 0;\n  let paren_level_count74 = 0;\n  let paren_level_count75 = 0;\n  let paren_level_count76 = 0;\n  let paren_level_count77 = 0;\n  let paren_level_count78 = 0;\n  let paren_level_count79 = 0;\n  let paren_level_count80 = 0;\n  let paren_level_count81 = 0;\n  let paren_level_count82 = 0;\n  let paren_level_count83 = 0;\n  let paren_level_count84 = 0;\n  let paren_level_count85 = 0;\n  let paren_level_count86 = 0;\n  let paren_level_count87 = 0;\n  let paren_level_count88 = 0;\n  let paren_level_count89 = 0;\n  let paren_level_count90 = 0;\n  let paren_level_count91 = 0;\n  let paren_level_count92 = 0;\n  let paren_level_count93 = 0;\n  let paren_level_count94 = 0;\n  let paren_level_count95 = 0;\n  let paren_level_count96 = 0;\n  let paren_level_count97 = 0;\n  let paren_level_count98 = 0;\n  let paren_level_count99 = 0;\n  let paren_level_count100 = 0;\n  let paren_level_count101 = 0;\n  let paren_level_count102 = 0;\n  let paren_level_count103 = 0;\n  let paren_level_count104 = 0;\n  let paren_level_count105 = 0;\n  let paren_level_count106 = 0;\n  let paren_level_count107 = 0;\n  let paren_level_count108 = 0;\n  let paren_level_count109 = 0;\n  let paren_level_count110 = 0;\n  let paren_level_count111 = 0;\n  let paren_level_count112 = 0;\n  let paren_level_count113 = 0;\n  let paren_level_count114 = 0;\n  let paren_level_count115 = 0;\n  let paren_level_count116 = 0;\n  let paren_level_count117 = 0;\n  let paren_level_count118 = 0;\n  let paren_level_count119 = 0;\n  let paren_level_count120 = 0;\n  let paren_level_count121 = 0;\n  let paren_level_count122 = 0;\n  let paren_level_count123 = 0;\n  let paren_level_count124 = 0;\n  let paren_level_count125 = 0;\n  let paren_level_count126 = 0;\n  let paren_level_count127 = 0;\n  let paren_level_count128 = 0;\n  let paren_level_count129 = 0;\n  let paren_level_count130 = 0;\n  let paren_level_count131 = 0;\n  let paren_level_count132 = 0;\n  let paren_level_count133 = 0;\n  let paren_level_count134 = 0;\n  let paren_level_count135 = 0;\n  let paren_level_count136 = 0;\n  let paren_level_count137 = 0;\n  let paren_level_count138 = 0;\n  let paren_level_count139 = 0;\n  let paren_level_count140 = 0;\n  let paren_level_count141 = 0;\n  let paren_level_count142 = 0;\n  let paren_level_count143 = 0;\n  let paren_level_count144 = 0;\n  let paren_level_count145 = 0;\n  let paren_level_count146 = 0;\n  let paren_level_count147 = 0;\n  let paren_level_count148 = 0;\n  let paren_level_count149 = 0;\n  let paren_level_count150 = 0;\n  let paren_level_count151 = 0;\n  let paren_level_count152 = 0;\n  let paren_level_count153 = 0;\n  let paren_level_count154 = 0;\n  let paren_level_count155 = 0;\n  let paren_level_count156 = 0;\n  let paren_level_count157 = 0;\n  let paren_level_count158 = 0;\n  let paren_level_count159 = 0;\n  let paren_level_count160 = 0;\n  let paren_level_count161 = 0;\n  let paren_level_count162 = 0;\n  let paren_level_count163 = 0;\n  let paren_level_count164 = 0;\n  let paren_level_count165 = 0;\n  let paren_level_count166 = 0;\n  let paren_level_count167 = 0;\n  let paren_level_count168 = 0;\n  let paren_level_count169 = 0;\n  let paren_level_count170 = 0;\n  let paren_level_count171 = 0;\n  let paren_level_count172 = 0;\n  let paren_level_count173 = 0;\n  let paren_level_count174 = 0;\n  let paren_level_count175 = 0;\n  let paren_level_count176 = 0;\n  let paren_level_count177 = 0;\n  let paren_level_count178 = 0;\n  let paren_level_count", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "<|endoftext|>/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  Given a number n, return its prime factors.\n  >>> primeFactors(15)\n  [2, 3, 5, 7]\n  >>> primeFactors(30)\n  [2, 3, 5, 7]\n  >>> primeFactors(100)\n  [2, 3, 5, 7]\n  >>> primeFactors(5)\n  [2, 3, 5]\n  >>> primeFactors(10)\n  [2, 3, 5]\n  >>> primeFactors(1)\n  []\n  */\nconst primeFactors = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors;\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcluding = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(5)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(10)\n  [2, 3, 5]\n  >>> primeFactorsExcluding(1)\n  []\n  */\nconst primeFactorsExcludingSelfAndSelfAndSelf = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors.filter(i => i!== n);\n};\n\n/*\n  Given a number n, return its prime factors excluding itself.\n  >>> primeFactorsExcluding(15)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(30)\n  [2, 3, 5, 7]\n  >>> primeFactorsExcluding(100)\n", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "<|endoftext|>/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const openingBrackets = brackets.split(\"(\").map(x => x.trim());\n  const closingBrackets = brackets.split(\")\").map(x => x.trim());\n  return openingBrackets.every(x => closingBrackets.includes(x));\n};\n\n/**\n * Returns a string that is the concatenation of all words in a given string.\n *\n * >>> combineWords(\"Hello world!\")\n * \"Hello world!\"\n * >>> combineWords(\"Hello world! How are you?\")\n * \"Hello world! How are you?\"\n * >>> combineWords(\"Hello world! How are you? I am fine.\")\n * \"Hello world! How are you? I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\")\n * \"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine. I am fine.\"\n * >>> combineWords(\"Hello world! How are you? I am fine. I am fine. I am fine. I am fine. I am ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "<|endoftext|>/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const n = xs.length\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += xs[i] * xs[i]\n  }\n  return [sum, n - 1, n - 2]\n}\n\n/**\n * Find roots of a polynomial using Newton's method.\n * xs[0] + xs[1] * x + xs[2] * x^2 +....\n * Return array of roots.\n * >>> roots([3, 1, 2, 4, 5])\n * [3, 1]\n * >>> roots([1, 2, 3])\n * []\n */\nconst roots = (xs) => {\n  const n = xs.length\n  let roots = []\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += xs[i] * xs[i]\n  }\n  let x0 = xs[0]\n  let x1 = xs[1]\n  let x2 = xs[2]\n  let x3 = xs[3]\n  let x4 = xs[4]\n  let x5 = xs[5]\n  let x6 = xs[6]\n  let x7 = xs[7]\n  let x8 = xs[8]\n  let x9 = xs[9]\n  let x10 = xs[10]\n  let x11 = xs[11]\n  let x12 = xs[12]\n  let x13 = xs[13]\n  let x14 = xs[14]\n  let x15 = xs[15]\n  let x16 = xs[16]\n  let x17 = xs[17]\n  let x18 = xs[18]\n  let x19 = xs[19]\n  let x20 = xs[20]\n  let x21 = xs[21]\n  let x22 = xs[22]\n  let x23 = xs[23]\n  let x24 = xs[24]\n  let x25 = xs[25]\n  let x26 = xs[26]\n  let x27 = xs[27]\n  let x28 = xs[28]\n  let x29 = xs[29]\n  let x30 = xs[30]\n  let x31 = xs[31]\n  let x32 = xs[32]\n  let x33 = xs[33]\n  let x34 = xs[34]\n  let x35 = xs[35]\n  let x36 = xs[36]\n  let x37 = xs[37]\n  let x38 = xs[38]\n  let x39 = xs[39]\n  let x40 = xs[40]\n  let x41 = xs[41]\n  let x42 = xs[42]\n  let x43 = xs[43]\n  let x44 = xs[44]\n  let x45 = xs[45]\n  let x46 = xs[46]\n  let x47 = xs[47]\n  let x48 = xs[48]\n  let x49 = xs[49]\n  let x50 = xs[50]\n  let x51 = xs[51]\n  let x52 = xs[52]\n  let x53 = xs[53]\n  let x54 = xs[54]\n  let x55 = xs[55]\n  let x56 = xs[56]\n  let x57 = xs[57]\n  let x58 = xs[58]\n  let x59 = xs[59]\n  let x60 = xs[60]\n  let x61 = xs[61]\n  let x62 = xs[62]\n  let x63 = xs[63]\n  let x64 = xs[64]\n  let x65 = xs[65]\n  let x66 = xs[66]\n  let x67 = xs[67]\n  let x68 = xs[68]\n  let x69 = xs[69]\n  let x70 = xs[70]\n  let x71 = xs[71]\n  let x72 = xs[72]\n  let x73 = xs[73]\n  let x74 = xs[74]\n  let x75 = xs[75]\n  let x76 = xs[76]\n  let x77 = xs[77]\n  let x78 = xs[78]\n  let x79 = xs[79]\n  let x80 = xs[80]\n  let x81 = xs[81]\n  let x82 = xs[82]\n  let x83 = xs[83]\n  let x84 = xs[84]\n  let x85 = xs[85]\n  let x86 = xs[86]\n  let x87 = xs[87]\n  let x88 = xs[88]\n  let x89 = xs[89]\n  let x90 = xs[90]\n  let x91 = xs[91]\n  let x92 = xs[92]\n  let x93 = xs[93]\n  let x94 = xs[94]\n  let x95 = xs[95]\n  let x96 = xs[96]\n  let x97 = xs[97]\n  let x98 = xs[98]\n  let x99 = xs[99]\n  let x100 = xs[100]\n  let x101 = xs[101]\n  let x102 = xs[102]\n  let x103 = xs[103]\n  let x104 = xs[104]\n  let x105 = xs[105]\n  let x106 = xs[106]\n  let x107 = xs[107]\n  let x108 = xs[108]\n  let x109 = xs[109]\n  let x110 = xs[110]\n  let x111 = xs[111]\n  let x112 = xs[112]\n  let x113 = xs[113]\n  let x114 = xs[114]\n  let x115 = xs[115]\n  let x116 = xs[116]\n  let x117 = xs[117]\n  let x118 = xs[118]\n  let x119 = xs[119]\n  let x120 = xs[120]\n  let x121 = xs[121]\n  let x122 = xs[122]\n  let x123 = xs[123]\n  let x124 = xs[124]\n  let x125 = xs[125]\n  let x126 = xs[126]\n  let x127 = xs[127]\n  let x128 = xs[128]\n  let x129 = xs[129]\n  let x130 = xs[130]\n  let x131 = xs[131]\n  let x132 = xs[132]\n  let x133 = xs[133]\n  let x134 = xs[134]\n  let x135 = xs[135]\n  let x136 = xs[136]\n  let x137 = xs[137]\n  let x138 = xs[138]\n  let x139 = xs[139]\n  let x140 = xs[140]\n  let x141 = xs[141]\n  let x142 = xs[142]\n  let x143 = xs[143]\n  let x144 = xs[144]\n  let x145 = xs[145]\n  let x146 = xs[146]\n  let x147 = xs[147]\n  let x148 = xs[148]\n  let x149 = xs[149]\n  let x150 = xs[150]\n  let x151 = xs[151]\n  let x152 = xs[152]\n  let x153 = xs[153]\n  let x154 = xs[154]\n  let x155 = xs[155]\n  let x156 = xs[156]\n  let x157 = xs[157]\n  let x158 = xs[158]\n  let x159 = xs[159]\n  let x160 = xs[160]\n  let x161 = xs[16", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "<|endoftext|>/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum;\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the Fibonacci number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n};\n\n/*\n  Write a function to compute the nth Fibonacci number in the Fibonacci sequence using recursion.\n  >>> fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "<|endoftext|>/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  let vowelCount = 0;\n  let vowelIndex = 0;\n  let vowel;\n\n  for (let i = 0; i < s.length; i++) {\n    vowel = s.charAt(i);\n    if (vowel === 'a' || vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n      vowelCount++;\n      vowelIndex++;\n    }\n  }\n\n  return vowelCount;\n};\n\n/*Write a function wordCount which takes a string representing\n  a word as input and returns the number of words in the string.\n  Words in this case are 'the', 'a', 'an', 'they', 'his', 'her', 'it', and\n  'they'.\n\n  Example:\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog\")\n  4\n  >>> wordCount(\"the quick brown fox jumps over the lazy dog jumps over the lazy dog\")\n  3\n  */\nconst wordCount = (s) => {\n  let wordCount = 0;\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      wordCount++;\n      wordIndex++;\n    }\n  }\n\n  return wordCount;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', 'an', 'they', 'his', 'her', 'it', 'the', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']\n  */\nconst wordList = (s) => {\n  let words = [];\n  let wordIndex = 0;\n  let word;\n\n  for (let i = 0; i < s.length; i++) {\n    word = s.charAt(i);\n    if (word === 'the' || word === 'a' || word === 'an' || word === 'they' || word === 'her' || word === 'it' || word === 'they') {\n      words.push(word);\n      wordIndex++;\n    }\n  }\n\n  return words;\n};\n\n/*Write a function wordList which takes a string representing\n  a word as input and returns a list of all the words in the string.\n\n  Example:\n  >>> wordList(\"the quick brown fox jumps over the lazy dog\")\n  ['the', 'a', '", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "<|endoftext|>/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = x.toString(2).split('').reverse().join('')\n  let reversedDigits = digits.slice(0).reverse().join('')\n  return reversedDigits.slice(shift, digits.length - shift).reverse().join('')\n}\n\n/*\n  Convert a number to a string in base 10 (base 16 is base 10)\n  >>> toBase10(123)\n  \"123\"\n  >>> toBase10(123)\n  \"0123\"\n  >>> toBase10(123)\n  \"00123\"\n  >>> toBase10(123)\n  \"000123\"\n  >>> toBase10(123)\n  \"0000123\"\n  >>> toBase10(123)\n  \"00000123\"\n  >>> toBase10(123)\n  \"000000123\"\n  >>> toBase10(123)\n  \"0000000123\"\n  >>> toBase10(123)\n  \"00000000123\"\n  >>> toBase10(123)\n  \"000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"00000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000000000000000000000000000000000000000123\"\n  >>> toBase10(123)\n  \"0000000000000000", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "<|endoftext|>/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums2 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the digits only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums3 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums4 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums5 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums6 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums7 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums8 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums9 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums10 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums11 = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i);\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the uppercase and lowercase letters'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "<|endoftext|>/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes(\"apple\")) {\n      apples++;\n    } else if (fruits[i].includes(\"orange\")) {\n      oranges++;\n    } else if (fruits[i].includes(\"mango\")) {\n      mango++;\n    }\n  }\n  total = apples\n    + oranges\n    + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes(\"apple\")) {\n      apples++;\n    } else if (fruits[i].includes(\"orange\")) {\n      oranges++;\n    } else if (fruits[i].includes(\"mango\")) {\n      mango++;\n    }\n  }\n  total = apples\n    + oranges\n    + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes(\"apple\")) {\n      apples++;\n    } else if (fruits[i].includes(\"orange\")) {\n      oranges++;\n    } else if (fruits[i].includes(\"mango\")) {\n      mango++;\n    }\n  }\n  total = apples\n    + oranges\n    + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes(\"apple\")) {\n      apples++;\n    } else if (fruits[i].includes(\"orange\")) {\n      oranges++;\n    } else if (fruits[i].includes(\"mango\")) {\n      mango++;\n    }\n  }\n  total = apples\n    + oranges\n    + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let i = 0; i < fruits.length; i++) {\n    if (fruits[i].includes(\"apple\")) {\n      apples++;\n    } else if (fruits[i].includes(\"orange\")) {\n      oranges++;\n    } else if (fruits[i].includes(\"mango\")) {\n      mango++;\n    }\n  }\n  total = apples\n    + oranges\n    + mango;\n  return total;\n};\n\n/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let total = 0;\n  let apples = 0;\n  let oranges = 0;\n  let mango = 0;\n  let fruits = n.toString().split(\" \");\n  for (let ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "<|endoftext|>/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const len = arr.length;\n  const evens = arr.filter(n => n % 2 === 0);\n  let min = 0;\n  let max = 0;\n  let minIndex = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < len; i++) {\n    if (evens[i]) {\n      min = Math.min(min, arr[i]);\n      max = Math.max(max, arr[i]);\n      minIndex = i;\n      maxIndex = i;\n    }\n  }\n  return [min, minIndex];\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMin = function (nums) {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMax = function (nums) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSum = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverage = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedian = function (nums) {\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > mid) {\n      mid = nums[i];\n      count += 1;\n    }\n  }\n  return mid;\n};\n\n// https://leetcode.com/problems/find-the-mode-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMode = function (nums) {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > mode) {\n      mode = nums[i];\n      count += 1;\n    }\n  }\n  return mode;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMinInArray = function (nums) {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxInArray = function (nums) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumInArray = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverageInArray = function (nums) {\n  let sum = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    count += 1;\n  }\n  return sum / count;\n};\n\n// https://leetcode.com/problems/find-the-median-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMedianInArray = function (nums) {\n  let mid = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > mid) {\n      mid = nums[i];\n      count += 1;\n    }\n  }\n  return mid;\n};\n\n// https://leetcode.com/problems/find-the-mode-of-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findModeInArray = function (nums) {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > mode) {\n      mode = nums[i];\n      count += 1;\n    }\n  }\n  return mode;\n};\n\n// https://leetcode.com/problems/find-the-minimum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMinInArrayInArray = function (nums) {\n  let min = 0;\n  let minIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > min) {\n      min = nums[i];\n      minIndex = i;\n    }\n  }\n  return min;\n};\n\n// https://leetcode.com/problems/find-the-maximum-element-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findMaxInArrayInArray = function (nums) {\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > max) {\n      max = nums[i];\n      maxIndex = i;\n    }\n  }\n  return max;\n};\n\n// https://leetcode.com/problems/find-the-sum-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findSumInArrayInArray = function (nums) {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n  }\n  return sum;\n};\n\n// https://leetcode.com/problems/find-the-average-of-the-elements-in-an-array/\n/**\n * @param {number[]} nums\n * @return {number}\n */\nvar findAverageIn", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "<|endoftext|>/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      count = i;\n    }\n  }\n  return max;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum2 = (lst, i) => {\n  let sum = 0;\n  for (let j = 0; j < lst.length; j++) {\n    sum += lst[i] * lst[j];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a non-empty list of positive integers. Return the sum of the squares of the numbers in the list.\n  If the list contains only one number, return 0.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1]) = 24\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4]) = 25\n      sum([5, 5, 4, 4, 4]) = 0\n  */\nconst sum15 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "<|endoftext|>/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1)\n}\n\n/**\n * Filter an input list of strings only for ones that do not contain given substring\n  >>> filterByNotSubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd', 'cde', 'array']\n  */\nconst filterByNotSubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) < 0)\n}\n\n/**\n * Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "<|endoftext|>/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  const sorted = lst.sort((a, b) => a - b);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsListsReverseReverseReverseReverseReverseReverseReverseReverseReverseReverse = (lst) => {\n  const sorted = lst.sort((a, b) => b - a);\n  const strange = sorted.slice(0, sorted.length - 1);\n  return strange;\n};\n\n/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsList", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "<|endoftext|>/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  const aArea = Math.sqrt(a * a + b * b);\n  const bArea = Math.sqrt(b * b + c * c);\n  const cArea = Math.sqrt(c * c + a * a);\n  return (aArea + bArea + cArea) / 3;\n};\n\nconst trianglesArea = trianglesAreas;\n\nconst getTriangleArea = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return trianglesAreas(a, b, c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInSquare = (triangle) => {\n  const [a, b, c] = triangle;\n  return a * a + b * b + c * c;\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInRectangle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b + c * c);\n};\n\nconst getTriangleAreaInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInTriangleInCircle = (triangle) => {\n  const [a, b, c] = triangle;\n  return Math.sqrt(a * a + b * b);\n};\n\nconst getTriangle", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "<|endoftext|>/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedTail(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFliedTail = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedHead(head, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFliedHead = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedTailTail(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFliedTailTail = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedHeadTail(head, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFliedHeadTail = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedTailTail(tail, w);\n};\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([3, 2, 1], 5) ➞ false\n  # 3+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 1], 1) ➞ false\n  # it's balanced, but 3+2 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 1], 9) ➞ true\n  # 3+2 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFliedHeadTailTail = (q, w) => {\n  const [head,...rest] = q;\n  const [tail,...restTail] = rest;\n  const [sum,...restSum] = restTail;\n  const [maxWeight,...restMaxWeight] = restSum;\n\n  return sum >= maxWeight && willItFliedHeadTailTail(head, w);\n};", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "<|endoftext|>/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1]) == 1\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return max + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1]) == 1\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return max + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1]) == 1\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return max + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return min + 1;\n};\n\n/*\n  Given an array arr of integers, find the maximum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  biggerChange([1,2,3,5,4,7,9,6]) == 6\n  biggerChange([1, 2, 3, 4, 3, 2, 2]) == 4\n  biggerChange([1, 2, 3, 2, 1]) == 3\n  biggerChange([1, 2, 3, 1]) == 1\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;\n    }\n  }\n  return max + 1;\n};\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst biggerChange = (arr) => {\n  let min = 0;\n  let max = arr.length - 1;\n  let mid;\n  while (min <= max) {\n    mid = Math.floor((min + max) / 2);\n    if (arr[mid]!== arr[max - mid]) {\n      max = mid - 1;\n    } else {\n      min = mid + 1;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "<|endoftext|>/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x => set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalMatch,\n};\n\n},{}],8:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list greater than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalNotMatch = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x =>!set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalNotMatch,\n};\n\n},{\"./totalMatch\":7}],9:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalOverlap = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x => set2.has(x) || set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalOverlap,\n};\n\n},{\"./totalMatch\":7}],10:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalUnderlap = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x => set2.has(x) ||!set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalUnderlap,\n};\n\n},{\"./totalMatch\":7}],11:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list less than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalOverlapOrUnderlap = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x => set2.has(x) ||!set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalOverlapOrUnderlap,\n};\n\n},{\"./totalMatch\":7}],12:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalOverlapOrUnderlapOrEqual = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const result = set1.filter(x => set2.has(x) ||!set2.has(x));\n  return result.length === 0? lst1 : result;\n};\n\nmodule.exports = {\n  totalOverlapOrUnderlapOrEqual,\n};\n\n},{\"./totalMatch\":7}],13:[function(require,module,exports){\nconst { totalMatch } = require('./totalMatch');\n\n/**\n * Write a function that accepts two lists of strings and returns the list that has\n * total number of chars in the all strings of the list greater than or equal to the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "<|endoftext|>/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 2;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 3 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 3;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 5 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 5;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime4 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 7 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 7;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime5 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 11 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 11;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime6 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 13 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 13;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime7 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 17 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 17;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime8 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 19 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 19;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime9 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 23 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 23;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime10 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 25 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 25;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime11 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 27 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 27;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime12 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 29 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 29;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime13 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 31 === 0) {\n      isPrime = false;\n      break;\n    }\n    num /= 31;\n  }\n  return isPrime;\n};\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime14 = (a) => {\n  let isPrime = true;\n  let num = 3;\n  while (num > 0) {\n    if (num % 33 === 0) {\n      is", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "<|endoftext|>/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower1 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower1(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower1(1, 4) => true\n  isSimplePower1(2, 2) => true\n  isSimplePower1(8, 2) => true\n  isSimplePower1(3, 2) => false\n  isSimplePower1(3, 1) => false\n  isSimplePower1(5, 3) => false\n  */\nconst isSimplePower2 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower2(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower2(1, 4) => true\n  isSimplePower2(2, 2) => true\n  isSimplePower2(8, 2) => true\n  isSimplePower2(3, 2) => false\n  isSimplePower2(3, 1) => false\n  isSimplePower2(5, 3) => false\n  */\nconst isSimplePower3 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower3(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower3(1, 4) => true\n  isSimplePower3(2, 2) => true\n  isSimplePower3(8, 2) => true\n  isSimplePower3(3, 2) => false\n  isSimplePower3(3, 1) => false\n  isSimplePower3(5, 3) => false\n  */\nconst isSimplePower4 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower4(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower4(1, 4) => true\n  isSimplePower4(2, 2) => true\n  isSimplePower4(8, 2) => true\n  isSimplePower4(3, 2) => false\n  isSimplePower4(3, 1) => false\n  isSimplePower4(5, 3) => false\n  */\nconst isSimplePower5 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower5(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower5(1, 4) => true\n  isSimplePower5(2, 2) => true\n  isSimplePower5(8, 2) => true\n  isSimplePower5(3, 2) => false\n  isSimplePower5(3, 1) => false\n  isSimplePower5(5, 3) => false\n  */\nconst isSimplePower6 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower6(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower6(1, 4) => true\n  isSimplePower6(2, 2) => true\n  isSimplePower6(8, 2) => true\n  isSimplePower6(3, 2) => false\n  isSimplePower6(3, 1) => false\n  isSimplePower6(5, 3) => false\n  */\nconst isSimplePower7 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower7(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower7(1, 4) => true\n  isSimplePower7(2, 2) => true\n  isSimplePower7(8, 2) => true\n  isSimplePower7(3, 2) => false\n  isSimplePower7(3, 1) => false\n  isSimplePower7(5, 3) => false\n  */\nconst isSimplePower8 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower8(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower8(1, 4) => true\n  isSimplePower8(2, 2) => true\n  isSimplePower8(8, 2) => true\n  isSimplePower8(3, 2) => false\n  isSimplePower8(3, 1) => false\n  isSimplePower8(5, 3) => false\n  */\nconst isSimplePower9 = (x, n) => {\n  if (n <= 0) return false;\n  if (n === 1) return true;\n  if (n % 1 === 0) return false;\n  return isSimplePower9(x, Math.floor(n / 1));\n};\n\n/*Your task is to write a function that returns true if a number x is a simple\n  power of n-1 and false in other cases.\n  x is a simple power of n-1 if n**int=x\n  For example:\n  isSimplePower9(1, 4) => true\n  isSimplePower9(2, 2) => true\n  isSimplePower9(8, 2) => true\n  isSimplePower9(3, 2) => false\n  isSimplePower9(3, 1) => false\n  isSimplePower9(5, 3) => false\n  */\nconst isSimplePower10 = (x, n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "<|endoftext|>/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  if (a % 1 === 0) return false;\n  if (a % 2 === 0) return true;\n  if (a % 3 === 0) return false;\n  return iscube(Math.floor(a / 3));\n};\n\n/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a pentagonal number of the given size.\n  Note: you may assume the input is always valid.\n  Examples:\n  ispentagon(3) ==> true\n  ispentagon(4) ==> false\n  ispentagon(5) ==> true\n  ispentagon(6) ==> false\n  ispentagon(7) ==> true\n  ispentagon(8) ==> false\n  ispentagon(9) ==> true\n  ispentagon(10) ==> false\n  ispentagon(11) ==> true\n  ispentagon(12) ==> false\n  ispentagon(13) ==> true\n  ispentagon(14) ==> false\n  ispentagon(15) ==> true\n  ispentagon(16) ==> false\n  ispentagon(17) ==> true\n  ispentagon(18) ==> false\n  ispentagon(19) ==> true\n  ispentagon(20) ==> false\n  ispentagon(21) ==> true\n  ispentagon(22) ==> false\n  ispentagon(23) ==> true\n  ispentagon(24) ==> false\n  ispentagon(25) ==> true\n  ispentagon(26) ==> false\n  ispentagon(27) ==> true\n  ispentagon(28) ==> false\n  ispentagon(29) ==> true\n  ispentagon(30) ==> false\n  ispentagon(31) ==> true\n  ispentagon(32) ==> false\n  ispentagon(33) ==> true\n  ispentagon(34) ==> false\n  ispentagon(35) ==> true\n  ispentagon(36) ==> false\n  ispentagon(37) ==> true\n  ispentagon(38) ==> false\n  ispentagon(39) ==> true\n  ispentagon(40) ==> false\n  ispentagon(41) ==> true\n  ispentagon(42) ==> false\n  ispentagon(43) ==> true\n  ispentagon(44) ==> false\n  ispentagon(45) ==> true\n  ispentagon(46) ==> false\n  ispentagon(47) ==> true\n  ispentagon(48) ==> false\n  ispentagon(49) ==> true\n  ispentagon(50) ==> false\n  ispentagon(51) ==> true\n  ispentagon(52) ==> false\n  ispentagon(53) ==> true\n  ispentagon(54) ==> false\n  ispentagon(55) ==> true\n  ispentagon(56) ==> false\n  ispentagon(57) ==> true\n  ispentagon(58) ==> false\n  ispentagon(59) ==> true\n  ispentagon(60) ==> false\n  ispentagon(61) ==> true\n  ispentagon(62) ==> false\n  ispentagon(63) ==> true\n  ispentagon(64) ==> false\n  ispentagon(65) ==> true\n  ispentagon(66) ==> false\n  ispentagon(67) ==> true\n  ispentagon(68) ==> false\n  ispentagon(69) ==> true\n  ispentagon(70) ==> false\n  ispentagon(71) ==> true\n  ispentagon(72) ==> false\n  ispentagon(73) ==> true\n  ispentagon(74) ==> false\n  ispentagon(75) ==> true\n  ispentagon(76) ==> false\n  ispentagon(77) ==> true\n  ispentagon(78) ==> false\n  ispentagon(79) ==> true\n  ispentagon(80) ==> false\n  ispentagon(81) ==> true\n  ispentagon(82) ==> false\n  ispentagon(83) ==> true\n  ispentagon(84) ==> false\n  ispentagon(85) ==> true\n  ispentagon(86) ==> false\n  ispentagon(87) ==> true\n  ispentagon(88) ==> false\n  ispentagon(89) ==> true\n  ispentagon(90) ==> false\n  ispentagon(91) ==> true\n  ispentagon(92) ==> false\n  ispentagon(93) ==> true\n  ispentagon(94) ==> false\n  ispentagon(95) ==> true\n  ispentagon(96) ==> false\n  ispentagon(97) ==> true\n  ispentagon(98) ==> false\n  ispentagon(99) ==> true\n  ispentagon(100) ==> false\n  ispentagon(101) ==> true\n  ispentagon(102) ==> false\n  ispentagon(103) ==> true\n  ispentagon(104) ==> false\n  ispentagon(105) ==> true\n  ispentagon(106) ==> false\n  ispentagon(107) ==> true\n  ispentagon(108) ==> false\n  ispentagon(109) ==> true\n  ispentagon(110) ==> false\n  ispentagon(111) ==> true\n  ispentagon(112) ==> false\n  ispentagon(113) ==> true\n  ispentagon(114) ==> false\n  ispentagon(115) ==> true\n  ispentagon(116) ==> false\n  ispentagon(117) ==> true\n  ispentagon(118) ==> false\n  ispentagon(119) ==> true\n  ispentagon(120) ==> false\n  ispentagon(121) ==> true\n  ispentagon(122) ==> false\n  ispentagon(123) ==> true\n  ispentagon(124) ==> false\n  ispentagon(125) ==> true\n", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "<|endoftext|>/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  let hexesKeys = 0;\n  let hexesKeysArray = [];\n  let hexesKeysArrayLength = 0;\n  let hexesKeysArrayIndex = 0;\n  let hexesKeysArrayValue = 0;\n  let hexesKeysArrayValueLength = 0;\n  let hexesKeysArrayValueIndex = 0;\n  let hexesKeysArrayValueValue = 0;\n  let hexesKeysArrayValueValueLength = 0;\n  let hexesKeysArrayValueValueIndex = 0;\n  let hexesKeysArrayValueValueValue = 0;\n  let hexesKeysArrayValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueLength = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueValueIndex = 0;\n  let hexesKeysArrayValueValueValueValueValueValueValueValueValueValueValueValueValueValueValue", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "<|endoftext|>/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binaryString = '';\n  let binaryStringLength = 0;\n  let decimalString = '';\n  let decimalStringLength = 0;\n  let decimalStringIndex = 0;\n  let decimalStringIndex2 = 0;\n  let decimalStringIndex3 = 0;\n  let decimalStringIndex4 = 0;\n  let decimalStringIndex5 = 0;\n  let decimalStringIndex6 = 0;\n  let decimalStringIndex7 = 0;\n  let decimalStringIndex8 = 0;\n  let decimalStringIndex9 = 0;\n  let decimalStringIndex10 = 0;\n  let decimalStringIndex11 = 0;\n  let decimalStringIndex12 = 0;\n  let decimalStringIndex13 = 0;\n  let decimalStringIndex14 = 0;\n  let decimalStringIndex15 = 0;\n  let decimalStringIndex16 = 0;\n  let decimalStringIndex17 = 0;\n  let decimalStringIndex18 = 0;\n  let decimalStringIndex19 = 0;\n  let decimalStringIndex20 = 0;\n  let decimalStringIndex21 = 0;\n  let decimalStringIndex22 = 0;\n  let decimalStringIndex23 = 0;\n  let decimalStringIndex24 = 0;\n  let decimalStringIndex25 = 0;\n  let decimalStringIndex26 = 0;\n  let decimalStringIndex27 = 0;\n  let decimalStringIndex28 = 0;\n  let decimalStringIndex29 = 0;\n  let decimalStringIndex30 = 0;\n  let decimalStringIndex31 = 0;\n  let decimalStringIndex32 = 0;\n  let decimalStringIndex33 = 0;\n  let decimalStringIndex34 = 0;\n  let decimalStringIndex35 = 0;\n  let decimalStringIndex36 = 0;\n  let decimalStringIndex37 = 0;\n  let decimalStringIndex38 = 0;\n  let decimalStringIndex39 = 0;\n  let decimalStringIndex40 = 0;\n  let decimalStringIndex41 = 0;\n  let decimalStringIndex42 = 0;\n  let decimalStringIndex43 = 0;\n  let decimalStringIndex44 = 0;\n  let decimalStringIndex45 = 0;\n  let decimalStringIndex46 = 0;\n  let decimalStringIndex47 = 0;\n  let decimalStringIndex48 = 0;\n  let decimalStringIndex49 = 0;\n  let decimalStringIndex50 = 0;\n  let decimalStringIndex51 = 0;\n  let decimalStringIndex52 = 0;\n  let decimalStringIndex53 = 0;\n  let decimalStringIndex54 = 0;\n  let decimalStringIndex55 = 0;\n  let decimalStringIndex56 = 0;\n  let decimalStringIndex57 = 0;\n  let decimalStringIndex58 = 0;\n  let decimalStringIndex59 = 0;\n  let decimalStringIndex60 = 0;\n  let decimalStringIndex61 = 0;\n  let decimalStringIndex62 = 0;\n  let decimalStringIndex63 = 0;\n  let decimalStringIndex64 = 0;\n  let decimalStringIndex65 = 0;\n  let decimalStringIndex66 = 0;\n  let decimalStringIndex67 = 0;\n  let decimalStringIndex68 = 0;\n  let decimalStringIndex69 = 0;\n  let decimalStringIndex70 = 0;\n  let decimalStringIndex71 = 0;\n  let decimalStringIndex72 = 0;\n  let decimalStringIndex73 = 0;\n  let decimalStringIndex74 = 0;\n  let decimalStringIndex75 = 0;\n  let decimalStringIndex76 = 0;\n  let decimalStringIndex77 = 0;\n  let decimalStringIndex78 = 0;\n  let decimalStringIndex79 = 0;\n  let decimalStringIndex80 = 0;\n  let decimalStringIndex81 = 0;\n  let decimalStringIndex82 = 0;\n  let decimalStringIndex83 = 0;\n  let decimalStringIndex84 = 0;\n  let decimalStringIndex85 = 0;\n  let decimalStringIndex86 = 0;\n  let decimalStringIndex87 = 0;\n  let decimalStringIndex88 = 0;\n  let decimalStringIndex89 = 0;\n  let decimalStringIndex90 = 0;\n  let decimalStringIndex91 = 0;\n  let decimalStringIndex92 = 0;\n  let decimalStringIndex93 = 0;\n  let decimalStringIndex94 = 0;\n  let decimalStringIndex95 = 0;\n  let decimalStringIndex96 = 0;\n  let decimalStringIndex97 = 0;\n  let decimalStringIndex98 = 0;\n  let decimalStringIndex99 = 0;\n  let decimalStringIndex100 = 0;\n  let decimalStringIndex101 = 0;\n  let decimalStringIndex102 = 0;\n  let decimalStringIndex103 = 0;\n  let decimalStringIndex104 = 0;\n  let decimalStringIndex105 = 0;\n  let decimalStringIndex106 = 0;\n  let decimalStringIndex107 = 0;\n  let decimalStringIndex108 = 0;\n  let decimalStringIndex109 = 0;\n  let decimalStringIndex110 = 0;\n  let decimalStringIndex111 = 0;\n  let decimalStringIndex112 = 0;\n  let decimalStringIndex113 = 0;\n  let decimalStringIndex114 = 0;\n  let decimalStringIndex115 = 0;\n  let decimalStringIndex116 = 0;\n  let decimalStringIndex117 = 0;\n  let decimalStringIndex118 = 0;\n  let decimalStringIndex119 = 0;\n  let decimalStringIndex120 = 0;\n  let decimalStringIndex121 = 0;\n  let decimalStringIndex122 = 0;\n  let decimalStringIndex123 = 0;\n  let decimalStringIndex124 = 0;\n  let decimalStringIndex125 = 0;\n  let decimalStringIndex126 = 0;\n  let decimalStringIndex127 = 0;\n  let decimalStringIndex128 = 0;\n  let decimalStringIndex129 = 0;\n  let decimalStringIndex130 = 0;\n  let decimalStringIndex131 = 0;\n  let decimalStringIndex132 = 0;\n  let decimalStringIndex133 = 0;\n  let decimalStringIndex134 = 0;\n  let decimalStringIndex135 = 0;\n  let decimalStringIndex136 = 0;\n  let decimalStringIndex137 = 0;\n  let decimalStringIndex138 = 0;\n  let decimalStringIndex139 = 0;\n  let decimalStringIndex140 = 0;\n  let decimalStringIndex141 = 0;\n  let decimalStringIndex142 = 0;\n  let decimalStringIndex143 = 0;\n  let decimalStringIndex144 = 0;\n  let decimalStringIndex145 = 0;\n  let decimalStringIndex146 = 0;\n  let decimalStringIndex147 = 0;\n  let decimalStringIndex148 = 0;\n  let decimalStringIndex149 = 0;\n  let decimalStringIndex150 = 0;\n  let decimalStringIndex151 = 0;\n  let decimalStringIndex152 = 0;\n  let decimalStringIndex153 = 0;\n  let decimalStringIndex154 = 0;\n  let decimalStringIndex155 = 0;\n  let decimalStringIndex156 = 0;\n  let decimalStringIndex157 = 0;\n  let decimalStringIndex158 = 0;\n  let decimalStringIndex159 = 0;\n  let decimalStringIndex160 = 0;\n  let decimalStringIndex161 = 0;\n  let decimalStringIndex162 = 0;\n  let decimalStringIndex163 = 0;\n  let decimalStringIndex164 = 0;\n  let decimalStringIndex165 = 0;\n  let decimalStringIndex166 = 0;\n  let decimalStringIndex167 = 0;\n  let decimalStringIndex168 = 0;\n  let decimalStringIndex169 = 0;\n  let decimalStringIndex170 = 0;\n  let decimalStringIndex171 = 0;\n  let decimalStringIndex172 = 0;\n  let decimalStringIndex173 = 0;\n  let decimalStringIndex174 = 0;\n  let decimalStringIndex175 = 0;\n  let decimalStringIndex176 = 0;\n  let decimalStringIndex177 = 0;\n  let decimalStringIndex178 = 0;\n  let decimalStringIndex179 = 0;\n  let decimalStringIndex180 = 0;\n  let decimalStringIndex181 = 0;\n  let decimalStringIndex182 = 0;\n  let decimalStringIndex183 = 0;\n  let decimalStringIndex184 = 0;\n  let decimalStringIndex185 = 0;\n  let decimalStringIndex186 = 0;\n  let decimalStringIndex187 = 0;\n  let decimalStringIndex188 = 0;\n  let decimalStringIndex189 = 0;\n  let decimalStringIndex190 = 0;\n  let decimalStringIndex191 = 0;\n  let decimalStringIndex192 = 0;\n  let decimalStringIndex193 = 0;\n  let decimalStringIndex194 = 0;\n  let decimalStringIndex195 = 0;\n  let decimalStringIndex196 = 0;\n  let decimalStringIndex197 = 0;\n  let decimalStringIndex198 = 0;\n  let decimalStringIndex199 = 0;\n  let decimalStringIndex200 = 0;\n  let decimalStringIndex201 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "<|endoftext|>/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumber(\"\")\n  (0, \"\")\n  >>> letterNumber(\"a\")\n  (1, \"a\")\n  >>> letterNumber(\"A\")\n  (10, \"A\")\n  */\nconst letterNumber = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumber(\"\")\n  (0, \"\")\n  >>> letterNumber(\"a\")\n  (1, \"a\")\n  >>> letterNumber(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"a\")\n  (1, \"a\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"A\")\n  (10, \"A\")\n  */\nconst letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace = (letter) => {\n  let number = 0;\n  for (let i = 0; i < letter.length; i++) {\n    number += letter.charCodeAt(i);\n  }\n  return [number, letter];\n};\n\n/* Given a string, return a tuple consisting of a lowercase letter and a number.\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpace(\"\")\n  (0, \"\")\n  >>> letterNumberWithSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAndSpaceAnd", "passed": 1, "run_status": 0}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "<|endoftext|>/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  const len = s.length\n  let isHappy = false\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(i + 1)) {\n        isHappy = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(i + 1)) {\n        isHappy = true\n        break\n      }\n    }\n  }\n  return isHappy\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => true\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => true\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => true\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => true\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => true\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 3 and every 3 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindrome = true\n        break\n      }\n    }\n  }\n  return isPalindrome\n}\n\n/*\n  You are given a string s.\n  Your task is to check if the string is palindrome or not.\n  A string is palindrome if its length is at least 2 and every 2 letters are different.\n  For example:\n  isPalindrome(a) => false\n  isPalindrome(aa) => false\n  isPalindrome(abcd) => false\n  isPalindrome(aabb) => false\n  isPalindrome(adb) => false\n  isPalindrome(xyy) => false\n  */\nconst isPalindrome = (s) => {\n  const len = s.length\n  let isPalindrome = false\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      if (s.charAt(i)!== s.charAt(len - i - 1)) {\n        isPalindrome = false\n        break\n      }\n    } else {\n      if (s.charAt(i) === s.charAt(len - i - 1)) {\n        isPalindro", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "<|endoftext|>/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n    } else {\n      return '';\n    }\n  });\n  return letterGrades;\n};\n\n/*\n  Write a function that takes an array of grades and returns the average of the\n  grades.\n  Example:\n  averageGrades([4.0, 3.7, 3.3, 3.0]) ==> 4.0\n  */\nconst averageGrades = (grades) => {\n  const average = grades.reduce((acc, curr) => {\n    return acc + curr;\n  }) / grades.length;\n  return average;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 4.0).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 3.7).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 3.3).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 3.0).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 2.7).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 2.3).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 2.0).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 1.7).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 1.3).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 1.0).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 0.7).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grades and returns the number of students\n  who passed the grading test.\n  Example:\n  numberOfStudentsPassingGrading([4.0, 3.7, 3.3, 3.0]) ==> 2\n  */\nconst numberOfStudentsPassingGrading = (grades) => {\n  const numberOfStudents = grades.filter((grade) => grade >= 0.0).length;\n  return numberOfStudents;\n};\n\n/*\n  Write a function that takes an array of grade", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "<|endoftext|>/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 2 === 0) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 3 or false otherwise\n  Examples\n  divisibleBy3('Hello') == true\n  divisibleBy3('abcdcba') == true\n  divisibleBy3('kittens') == true\n  divisibleBy3('orange') == false\n  */\nconst divisibleBy3 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 3 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 5 or false otherwise\n  Examples\n  divisibleBy5('Hello') == true\n  divisibleBy5('abcdcba') == true\n  divisibleBy5('kittens') == true\n  divisibleBy5('orange') == false\n  */\nconst divisibleBy5 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 5 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 7 or false otherwise\n  Examples\n  divisibleBy7('Hello') == true\n  divisibleBy7('abcdcba') == true\n  divisibleBy7('kittens') == true\n  divisibleBy7('orange') == false\n  */\nconst divisibleBy7 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 7 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 9 or false otherwise\n  Examples\n  divisibleBy9('Hello') == true\n  divisibleBy9('abcdcba') == true\n  divisibleBy9('kittens') == true\n  divisibleBy9('orange') == false\n  */\nconst divisibleBy9 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 9 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 11 or false otherwise\n  Examples\n  divisibleBy11('Hello') == true\n  divisibleBy11('abcdcba') == true\n  divisibleBy11('kittens') == true\n  divisibleBy11('orange') == false\n  */\nconst divisibleBy11 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 11 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 13 or false otherwise\n  Examples\n  divisibleBy13('Hello') == true\n  divisibleBy13('abcdcba') == true\n  divisibleBy13('kittens') == true\n  divisibleBy13('orange') == false\n  */\nconst divisibleBy13 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 13 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 15 or false otherwise\n  Examples\n  divisibleBy15('Hello') == true\n  divisibleBy15('abcdcba') == true\n  divisibleBy15('kittens') == true\n  divisibleBy15('orange') == false\n  */\nconst divisibleBy15 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 15 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 17 or false otherwise\n  Examples\n  divisibleBy17('Hello') == true\n  divisibleBy17('abcdcba') == true\n  divisibleBy17('kittens') == true\n  divisibleBy17('orange') == false\n  */\nconst divisibleBy17 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 17 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 19 or false otherwise\n  Examples\n  divisibleBy19('Hello') == true\n  divisibleBy19('abcdcba') == true\n  divisibleBy19('kittens') == true\n  divisibleBy19('orange') == false\n  */\nconst divisibleBy19 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 19 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 21 or false otherwise\n  Examples\n  divisibleBy21('Hello') == true\n  divisibleBy21('abcdcba') == true\n  divisibleBy21('kittens') == true\n  divisibleBy21('orange') == false\n  */\nconst divisibleBy21 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 21 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 23 or false otherwise\n  Examples\n  divisibleBy23('Hello') == true\n  divisibleBy23('abcdcba') == true\n  divisibleBy23('kittens') == true\n  divisibleBy23('orange') == false\n  */\nconst divisibleBy23 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = 2; i <= length; i++) {\n    if (i % 23 === 0) {\n      isDivisible = false;\n      break;\n    }\n  }\n  return isDivisible;\n};\n\n/*Write a function that takes a string and returns true if the string\n  length is divisible by 25 or false otherwise\n  Examples\n  divisibleBy25('Hello') == true\n  divisibleBy25('abcdcba') == true\n  divisibleBy25('kittens') == true\n  divisibleBy25('orange') == false\n  */\nconst divisibleBy25 = (string) => {\n  let isDivisible = true;\n  let length = string.length;\n  for (let i = ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "<|endoftext|>/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 0.\n  */\nconst startZeroEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 2.\n  */\nconst startTwoEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 3.\n  */\nconst startThreeEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 4.\n  */\nconst startFourEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 5.\n  */\nconst startFiveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 6.\n  */\nconst startSixEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 7.\n  */\nconst startSevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 8.\n  */\nconst startEightEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 9.\n  */\nconst startNineEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 10.\n  */\nconst startTenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 11.\n  */\nconst startElevenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 12.\n  */\nconst startTwelveEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 13.\n  */\nconst startThirteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 14.\n  */\nconst startFourteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 15.\n  */\nconst startFifteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 16.\n  */\nconst startSixteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 17.\n  */\nconst startSeventeenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 18.\n  */\nconst startEighteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 19.\n  */\nconst startNineteenEnds = (n) => {\n  let count = 0;\n  let i = 1;\n  while (n > 0) {\n    if (n % 10 === 0) {\n      count += 1;\n    }\n    n /= 10;\n    i++;\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "<|endoftext|>/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let binary = \"\";\n  let digit = 0;\n  let digits = \"\";\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;\n  let s;\n  let t;\n  let u;\n  let v;\n  let w;\n  let x;\n  let y;\n  let z;\n  let a;\n  let b;\n  let c;\n  let d;\n  let e;\n  let f;\n  let g;\n  let h;\n  let i;\n  let j;\n  let k;\n  let l;\n  let m;\n  let n;\n  let p;\n  let q;\n  let r;", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "<|endoftext|>/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  let even = 0;\n  let odd = 0;\n  let evenIndex = 0;\n  let oddIndex = 0;\n  let evenValue = 0;\n  let oddValue = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  let evenSum2 = 0;\n  let oddSum2 = 0;\n  let evenSum3 = 0;\n  let oddSum3 = 0;\n  let evenSum4 = 0;\n  let oddSum4 = 0;\n  let evenSum5 = 0;\n  let oddSum5 = 0;\n  let evenSum6 = 0;\n  let oddSum6 = 0;\n  let evenSum7 = 0;\n  let oddSum7 = 0;\n  let evenSum8 = 0;\n  let oddSum8 = 0;\n  let evenSum9 = 0;\n  let oddSum9 = 0;\n  let evenSum10 = 0;\n  let oddSum10 = 0;\n  let evenSum11 = 0;\n  let oddSum11 = 0;\n  let evenSum12 = 0;\n  let oddSum12 = 0;\n  let evenSum13 = 0;\n  let oddSum13 = 0;\n  let evenSum14 = 0;\n  let oddSum14 = 0;\n  let evenSum15 = 0;\n  let oddSum15 = 0;\n  let evenSum16 = 0;\n  let oddSum16 = 0;\n  let evenSum17 = 0;\n  let oddSum17 = 0;\n  let evenSum18 = 0;\n  let oddSum18 = 0;\n  let evenSum19 = 0;\n  let oddSum19 = 0;\n  let evenSum20 = 0;\n  let oddSum20 = 0;\n  let evenSum21 = 0;\n  let oddSum21 = 0;\n  let evenSum22 = 0;\n  let oddSum22 = 0;\n  let evenSum23 = 0;\n  let oddSum23 = 0;\n  let evenSum24 = 0;\n  let oddSum24 = 0;\n  let evenSum25 = 0;\n  let oddSum25 = 0;\n  let evenSum26 = 0;\n  let oddSum26 = 0;\n  let evenSum27 = 0;\n  let oddSum27 = 0;\n  let evenSum28 = 0;\n  let oddSum28 = 0;\n  let evenSum29 = 0;\n  let oddSum29 = 0;\n  let evenSum30 = 0;\n  let oddSum30 = 0;\n  let evenSum31 = 0;\n  let oddSum31 = 0;\n  let evenSum32 = 0;\n  let oddSum32 = 0;\n  let evenSum33 = 0;\n  let oddSum33 = 0;\n  let evenSum34 = 0;\n  let oddSum34 = 0;\n  let evenSum35 = 0;\n  let oddSum35 = 0;\n  let evenSum36 = 0;\n  let oddSum36 = 0;\n  let evenSum37 = 0;\n  let oddSum37 = 0;\n  let evenSum38 = 0;\n  let oddSum38 = 0;\n  let evenSum39 = 0;\n  let oddSum39 = 0;\n  let evenSum40 = 0;\n  let oddSum40 = 0;\n  let evenSum41 = 0;\n  let oddSum41 = 0;\n  let evenSum42 = 0;\n  let oddSum42 = 0;\n  let evenSum43 = 0;\n  let oddSum43 = 0;\n  let evenSum44 = 0;\n  let oddSum44 = 0;\n  let evenSum45 = 0;\n  let oddSum45 = 0;\n  let evenSum46 = 0;\n  let oddSum46 = 0;\n  let evenSum47 = 0;\n  let oddSum47 = 0;\n  let evenSum48 = 0;\n  let oddSum48 = 0;\n  let evenSum49 = 0;\n  let oddSum49 = 0;\n  let evenSum50 = 0;\n  let oddSum50 = 0;\n  let evenSum51 = 0;\n  let oddSum51 = 0;\n  let evenSum52 = 0;\n  let oddSum52 = 0;\n  let evenSum53 = 0;\n  let oddSum53 = 0;\n  let evenSum54 = 0;\n  let oddSum54 = 0;\n  let evenSum55 = 0;\n  let oddSum55 = 0;\n  let evenSum56 = 0;\n  let oddSum56 = 0;\n  let evenSum57 = 0;\n  let oddSum57 = 0;\n  let evenSum58 = 0;\n  let oddSum58 = 0;\n  let evenSum59 = 0;\n  let oddSum59 = 0;\n  let evenSum60 = 0;\n  let oddSum60 = 0;\n  let evenSum61 = 0;\n  let oddSum61 = 0;\n  let evenSum62 = 0;\n  let oddSum62 = 0;\n  let evenSum63 = 0;\n  let oddSum63 = 0;\n  let evenSum64 = 0;\n  let oddSum64 = 0;\n  let evenSum65 = 0;\n  let oddSum65 = 0;\n  let evenSum66 = 0;\n  let oddSum66 = 0;\n  let evenSum67 = 0;\n  let oddSum67 = 0;\n  let evenSum68 = 0;\n  let oddSum68 = 0;\n  let evenSum69 = 0;\n  let oddSum69 = 0;\n  let evenSum70 = 0;\n  let oddSum70 = 0;\n  let evenSum71 = 0;\n  let oddSum71 = 0;\n  let evenSum72 = 0;\n  let oddSum72 = 0;\n  let evenSum73 = 0;\n  let oddSum73 = 0;\n  let evenSum74 = 0;\n  let oddSum74 = 0;\n  let evenSum75 = 0;\n  let oddSum75 = 0;\n  let evenSum76 = 0;\n  let oddSum76 = 0;\n  let evenSum77 = 0;\n  let oddSum77 = 0;\n  let evenSum78 = 0;\n  let oddSum78 = 0;\n  let evenSum79 = 0;\n  let oddSum79 = 0;\n  let evenSum80 = 0;\n  let oddSum80 = 0;\n  let evenSum81 = 0;\n  let oddSum81 = 0;\n  let evenSum82 = 0;\n  let oddSum82 = 0;\n  let evenSum83 = 0;\n  let oddSum83 = 0;\n  let evenSum84 = 0;\n  let oddSum84 = 0;\n  let evenSum85 = 0;\n  let oddSum85 = 0;\n  let evenSum86 = 0;\n  let oddSum86 = 0;\n  let evenSum87 = 0;\n  let oddSum87 = 0;\n  let evenSum88 = 0;\n  let oddSum88 = 0;\n  let evenSum89 = 0;\n  let oddSum89 = 0;\n  let evenSum90 = 0;\n  let oddSum90 = 0;\n  let evenSum91 = 0;\n  let oddSum91 = 0;\n  let evenSum92 = 0;\n  let oddSum92 = 0;\n  let evenSum93 = 0;\n  let oddSum93 = 0;\n  let evenSum94 = 0;\n  let oddSum94 = 0;\n  let evenSum95 = 0;\n  let oddSum95 = 0;\n  let evenSum96 = 0;\n  let oddSum96 = 0;\n  let evenSum97 = 0;\n  let oddSum97 = 0;\n  let evenSum98 = 0;\n  let oddSum98 = 0;\n  let evenSum99 = 0;\n  let oddSum99 = 0;\n  let evenSum100 = 0;\n  let oddSum100 = 0;\n  let evenSum101 = 0;\n  let oddSum101 = 0;\n  let evenSum102 = 0;\n  let oddSum102 = 0;\n  let evenSum103 = 0;\n  let oddSum103 = 0;\n  let evenSum104 = 0;\n  let oddSum104 = 0;\n  let evenSum105 = 0;\n  let oddSum105 = 0;\n  let evenSum106 = 0;\n  let oddSum106 = 0;\n  let evenSum107 = 0;\n  let oddSum107 = 0;\n  let evenSum108 = 0;\n  let oddSum108 = 0;\n  let evenSum109 = 0;\n  let oddSum109 = 0;\n  let evenSum110 = 0;\n  let oddSum110 = 0;\n  let evenSum111 = 0;\n  let oddSum111 = 0;\n  let evenSum112 = 0;\n  let oddSum112 = 0;\n  let evenSum113 = 0;\n  let oddSum113 = 0;\n  let evenSum114 = 0;\n  let oddSum114 = 0;\n  let evenSum115 = 0;\n  let oddSum115 = 0;\n  let evenSum116 = 0;\n  let oddSum116 = 0;\n  let evenSum117 = 0;\n  let oddSum117 = 0;\n  let evenSum118 = 0;\n  let oddSum118 = 0;\n  let evenSum119 = 0;\n  let oddSum119 = 0;\n  let evenSum120 = 0;\n  let oddSum120 = 0;\n  let evenSum121 = 0;\n  let oddSum121 = 0;\n  let evenSum122 = 0;\n  let oddSum122 = 0;\n  let evenSum123 = 0;\n  let oddSum123 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "<|endoftext|>/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let newArr = []\n  let newStr = ''\n  let newStrArr = []\n  let newStrArr2 = []\n  let newStrArr3 = []\n  let newStrArr4 = []\n  let newStrArr5 = []\n  let newStrArr6 = []\n  let newStrArr7 = []\n  let newStrArr8 = []\n  let newStrArr9 = []\n  let newStrArr10 = []\n  let newStrArr11 = []\n  let newStrArr12 = []\n  let newStrArr13 = []\n  let newStrArr14 = []\n  let newStrArr15 = []\n  let newStrArr16 = []\n  let newStrArr17 = []\n  let newStrArr18 = []\n  let newStrArr19 = []\n  let newStrArr20 = []\n  let newStrArr21 = []\n  let newStrArr22 = []\n  let newStrArr23 = []\n  let newStrArr24 = []\n  let newStrArr25 = []\n  let newStrArr26 = []\n  let newStrArr27 = []\n  let newStrArr28 = []\n  let newStrArr29 = []\n  let newStrArr30 = []\n  let newStrArr31 = []\n  let newStrArr32 = []\n  let newStrArr33 = []\n  let newStrArr34 = []\n  let newStrArr35 = []\n  let newStrArr36 = []\n  let newStrArr37 = []\n  let newStrArr38 = []\n  let newStrArr39 = []\n  let newStrArr40 = []\n  let newStrArr41 = []\n  let newStrArr42 = []\n  let newStrArr43 = []\n  let newStrArr44 = []\n  let newStrArr45 = []\n  let newStrArr46 = []\n  let newStrArr47 = []\n  let newStrArr48 = []\n  let newStrArr49 = []\n  let newStrArr50 = []\n  let newStrArr51 = []\n  let newStrArr52 = []\n  let newStrArr53 = []\n  let newStrArr54 = []\n  let newStrArr55 = []\n  let newStrArr56 = []\n  let newStrArr57 = []\n  let newStrArr58 = []\n  let newStrArr59 = []\n  let newStrArr60 = []\n  let newStrArr61 = []\n  let newStrArr62 = []\n  let newStrArr63 = []\n  let newStrArr64 = []\n  let newStrArr65 = []\n  let newStrArr66 = []\n  let newStrArr67 = []\n  let newStrArr68 = []\n  let newStrArr69 = []\n  let newStrArr70 = []\n  let newStrArr71 = []\n  let newStrArr72 = []\n  let newStrArr73 = []\n  let newStrArr74 = []\n  let newStrArr75 = []\n  let newStrArr76 = []\n  let newStrArr77 = []\n  let newStrArr78 = []\n  let newStrArr79 = []\n  let newStrArr80 = []\n  let newStrArr81 = []\n  let newStrArr82 = []\n  let newStrArr83 = []\n  let newStrArr84 = []\n  let newStrArr85 = []\n  let newStrArr86 = []\n  let newStrArr87 = []\n  let newStrArr88 = []\n  let newStrArr89 = []\n  let newStrArr90 = []\n  let newStrArr91 = []\n  let newStrArr92 = []\n  let newStrArr93 = []\n  let newStrArr94 = []\n  let newStrArr95 = []\n  let newStrArr96 = []\n  let newStrArr97 = []\n  let newStrArr98 = []\n  let newStrArr99 = []\n  let newStrArr100 = []\n  let newStrArr101 = []\n  let newStrArr102 = []\n  let newStrArr103 = []\n  let newStrArr104 = []\n  let newStrArr105 = []\n  let newStrArr106 = []\n  let newStrArr107 = []\n  let newStrArr108 = []\n  let newStrArr109 = []\n  let newStrArr110 = []\n  let newStrAr1111 = []\n  let newStrArr112 = []\n  let newStrArr113 = []\n  let newStrArr114 = []\n  let newStrArr115 = []\n  let newStrArr116 = []\n  let newStrArr117 = []\n  let newStrArr118 = []\n  let newStrArr119 = []\n  let newStrArr120 = []\n  let newStrAr121 = []\n  let newStrAr122 = []\n  let newStrAr123 = []\n  let newStrArr124 = []\n  let newStrArr125 = []\n  let newStrArr126 = []\n  let newStrArr127 = []\n  let newStrArr128 = []\n  let newStrArr129 = []\n  let newStrArr130 = []\n  let newStrArr131 = []\n  let newStrArr132 = []\n  let newStrArr133 = []\n  let newStrArr134 = []\n  let newStrArr135 = []\n  let newStrArr136 = []\n  let newStrArr137 = []\n  let newStrArr138 = []\n  let newStrArr139 = []\n  let newStrArr140 = []\n  let newStrArr141 = []\n  let newStrArr142 = []\n  let newStrArr143 = []\n  let newStrArr144 = []\n  let newStrArr145 = []\n  let newStrArr146 = []\n  let newStrArr147 = []\n  let newStrArr148 = []\n  let newStrArr149 = []\n  let newStrArr150 = []\n  let newStrArr151 = []\n  let newStrArr152 = []\n  let newStrArr153 = []\n  let newStrArr154 = []\n  let newStrArr155 = []\n  let newStrArr156 = []\n  let newStrArr157 = []\n  let newStrArr158 = []\n  let newStrArr159 = []\n  let newStrArr160 = []\n  let newStrArr161 = []\n  let newStrArr162 = []\n  let newStrArr163 = []\n  let newStrArr164 = []\n  let newStrArr165 = []\n  let newStrArr166 = []\n  let newStrArr167 = []\n  let newStrArr168 = []\n  let newStrArr169 = []\n  let newStrArr170 = []\n  let newStrArr171 = []\n  let newStrArr172 = []\n  let newStrArr173 = []\n  let newStrArr174 = []\n  let newStrArr175 = []\n  let newStrArr176 = []\n  let newStrArr177 = []\n  let newStrArr178 = []\n  let newStrArr179 = []\n  let newStrArr180 = []\n  let newStrArr181 = []\n  let newStrArr182 = []\n  let newStrArr183 = []\n  let newStrArr184 = []\n  let newStrArr185 = []\n  let newStrArr186 = []\n  let newStrArr187 = []\n  let newStrArr188 = []\n  let newStrArr189 = []\n  let newStrArr190 = []\n  let newStrArr191 = []\n  let newStrArr192 = []\n  let newStrArr", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "<|endoftext|>/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col])\n      rowIndex++\n      colIndex++\n    } else {\n      colIndex++\n    }\n    if (colIndex === lst[row].length) {\n      colIndex = 0\n      col++\n    }\n    row++\n  }\n  result.sort((a, b) => a[0] - b[0])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (col < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      rowIndex++\n      colIndex++\n    } else {\n      rowIndex++\n    }\n    if (rowIndex === lst[row].length) {\n      rowIndex = 0\n      row++\n    }\n    col++\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([row, col])\n      rowIndex++\n      colIndex++\n    } else {\n      colIndex++\n    }\n    if (colIndex === lst[row].length) {\n      colIndex = 0\n      col++\n    }\n    row++\n  }\n  result.sort((a, b) => a[0] - b[0])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsColsRows = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      rowIndex++\n      colIndex++\n    } else {\n      colIndex++\n    }\n    if (colIndex === lst[row].length) {\n      colIndex = 0\n      col++\n    }\n    row++\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRowsColsRowsCols = (lst, x) => {\n  const result = []\n  let row = 0\n  let col = 0\n  let rowIndex = 0\n  let colIndex = 0\n  while (row < lst.length) {\n    if (lst[row][col] === x) {\n      result.push([col, row])\n      rowIndex++\n      colIndex++\n    } else {\n      colIndex++\n    }\n    if (colIndex === lst[row].length) {\n      colIndex = 0\n      col++\n    }\n    row++\n  }\n  result.sort((a, b) => a[1] - b[1])\n  return result\n}\n\n/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "<|endoftext|>/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sortedArray = array.sort((a, b) => a - b);\n  return sortedArray;\n};\n\n/*\n  Given an array of non-negative integers, return an array with unique elements.\n\n  Example:\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique([2, 5, 1, 3, 1]) => [2, 1, 3]\n  * unique", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "<|endoftext|>/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function rotate that takes a string as an argument and\n  returns a string rotated with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  rotate('hi') returns 'hi'\n  rotate('asdfghjkl') returns 'asdfghjkl'\n  rotate('gf') returns 'kj'\n  rotate('et') returns 'ix'\n  */\nconst rotate = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function reverse that takes a string as an argument and\n  returns a string reversed with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  reverse('lm') returns 'hi'\n  reverse('ewhjklnop') returns 'asdfghjkl'\n  reverse('kj') returns 'gf'\n  reverse('ix') returns 'et'\n  */\nconst reverse = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('gf') returns 'kj'\n  shuffle('et') returns 'ix'\n  */\nconst shuffle = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let rotated = ''\n  let i = 0\n  \n  for(let j = 0; j < alphabet.length; j++) {\n    rotated += alphabet[j]\n    i++\n  }\n  \n  return rotated\n}\n\n/*Create a function shuffle that takes a string as an argument and\n  returns a string shuffled with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  shuffle('hi') returns 'asdfghjkl'\n  shuffle('asdfghjkl') returns 'hi'\n  shuffle('", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "<|endoftext|>/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let maxIndex = 0;\n  let maxValue = 0;\n  let currentIndex = 0;\n  let currentValue = 0;\n  while (currentIndex < numbers.length) {\n    currentValue = numbers[currentIndex];\n    if (currentValue > maxValue) {\n      max = currentValue;\n      maxIndex = currentIndex;\n      maxValue = currentValue;\n    }\n    currentIndex++;\n  }\n  return [maxValue, maxIndex];\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRange(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRange = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex + range > number) {\n      currentValue += range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRange(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRangeBack(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRangeBack(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRangeBack(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRangeBack(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number - range.\n  >>> rollingRangeBack(-2, -3, -4)\n  [-2, -3, -4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;\n};\n\n/* Given a number and a range, generate a list of numbers from that number in the range to that number + range.\n  >>> rollingRangeBack(2, 3, 4)\n  [2, 3, 4]\n  */\nconst rollingRangeBack = (number, range) => {\n  let result = [];\n  let currentValue = 0;\n  let currentIndex = 0;\n  while (currentIndex < number) {\n    currentValue = number;\n    if (currentIndex - range < 0) {\n      currentValue -= range;\n    }\n    result.push(currentValue);\n    currentIndex++;\n  }\n  return result;", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "<|endoftext|>/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextSmallest;\n\n},{}],7:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 3\n  nextSmallest([5, 1, 4, 3, 2]) == 3\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nextSmallest;\n\n},{}],8:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 4\n  nextLargest([5, 1, 4, 3, 2]) == 4\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextLargest;\n\n},{}],9:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return min;\n};\n\nmodule.exports = nextHighest;\n\n},{}],10:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextHighest;\n\n},{}],11:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextHighest;\n\n},{}],12:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min < lst[i]) {\n      min = lst[i];\n    }\n    if (max > lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextHighest;\n\n},{}],13:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextHighest;\n\n},{}],14:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n  nextHighest([]) == null\n  nextHighest([1, 1]) == null\n  */\nconst nextHighest = (lst) => {\n  let min = lst[0];\n  let max = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = nextHighest;\n\n},{}],15:[function(require,module,exports){\n/*\n  You are given a list of integers and a target number.\n  Write a function nextHighest() that returns the 2nd highest element of the list.\n  Return null if there is no such element.\n  \n  nextHighest([1, 2, 3, 4, 5]) == 5\n  nextHighest([5, 1, 4, 3, 2]) == 5\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "<|endoftext|>/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let boredoms = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (word === 'I') {\n      boredoms += 1;\n    }\n  });\n  return boredoms;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst commonWords = (S) => {\n  let commonWords = 0;\n  let words = S.split('.');\n  words.forEach((word) => {\n    if (words.includes(word)) {\n      commonWords += 1;\n    }\n  });\n  return commonWords;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of common words. A common word is a word that occurs at least twice in the\n  entire sentence.\n \n  For example:\n  >>> commonWords(\"Hello world\")\n  2\n  >>> commonWords(\"The sky is blue", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "<|endoftext|>/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x === y && y === z || x === -y && y === z || x === -z && y === z || x === y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y || x === -z && -y === y || x === y && y === z || x === -y && -y === z || x === -y && -z === z || x === -z && -y === z || x === -z && -z === y || x === -z && -y === y || x === y && -y === -z || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -z && -y === -y || x === -z && -y === -y || x === -y && -y === -z || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -y || x === -z && -y === -y || x === -y && -z === -z || x === -y && -z === -y || x === -z && -y === -y || ", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "<|endoftext|>/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let vowelsIndex = 0;\n  let alphabetIndex = 0;\n  let vowelsLength = 0;\n  let alphabetLength = 0;\n  let vowelsIndex2 = 0;\n  let alphabetIndex2 = 0;\n  let vowelsLength2 = 0;\n  let alphabetLength2 = 0;\n  let vowelsIndex3 = 0;\n  let alphabetIndex3 = 0;\n  let vowelsLength3 = 0;\n  let alphabetLength3 = 0;\n  let vowelsIndex4 = 0;\n  let alphabetIndex4 = 0;\n  let vowelsLength4 = 0;\n  let alphabetLength4 = 0;\n  let vowelsIndex5 = 0;\n  let alphabetIndex5 = 0;\n  let vowelsLength5 = 0;\n  let alphabetLength5 = 0;\n  let vowelsIndex6 = 0;\n  let alphabetIndex6 = 0;\n  let vowelsLength6 = 0;\n  let alphabetLength6 = 0;\n  let vowelsIndex7 = 0;\n  let alphabetIndex7 = 0;\n  let vowelsLength7 = 0;\n  let alphabetLength7 = 0;\n  let vowelsIndex8 = 0;\n  let alphabetIndex8 = 0;\n  let vowelsLength8 = 0;\n  let alphabetLength8 = 0;\n  let vowelsIndex9 = 0;\n  let alphabetIndex9 = 0;\n  let vowelsLength9 = 0;\n  let alphabetLength9 = 0;\n  let vowelsIndex10 = 0;\n  let alphabetIndex10 = 0;\n  let vowelsLength10 = 0;\n  let alphabetLength10 = 0;\n  let vowelsIndex11 = 0;\n  let alphabetIndex11 = 0;\n  let vowelsLength11 = 0;\n  let alphabetLength11 = 0;\n  let vowelsIndex12 = 0;\n  let alphabetIndex12 = 0;\n  let vowelsLength12 = 0;\n  let alphabetLength12 = 0;\n  let vowelsIndex13 = 0;\n  let alphabetIndex13 = 0;\n  let vowelsLength13 = 0;\n  let alphabetLength13 = 0;\n  let vowelsIndex14 = 0;\n  let alphabetIndex14 = 0;\n  let vowelsLength14 = 0;\n  let alphabetLength14 = 0;\n  let vowelsIndex15 = 0;\n  let alphabetIndex15 = 0;\n  let vowelsLength15 = 0;\n  let alphabetLength15 = 0;\n  let vowelsIndex16 = 0;\n  let alphabetIndex16 = 0;\n  let vowelsLength16 = 0;\n  let alphabetLength16 = 0;\n  let vowelsIndex17 = 0;\n  let alphabetIndex17 = 0;\n  let vowelsLength17 = 0;\n  let alphabetLength17 = 0;\n  let vowelsIndex18 = 0;\n  let alphabetIndex18 = 0;\n  let vowelsLength18 = 0;\n  let alphabetLength18 = 0;\n  let vowelsIndex19 = 0;\n  let alphabetIndex19 = 0;\n  let vowelsLength19 = 0;\n  let alphabetLength19 = 0;\n  let vowelsIndex20 = 0;\n  let alphabetIndex20 = 0;\n  let vowelsLength20 = 0;\n  let alphabetLength20 = 0;\n  let vowelsIndex21 = 0;\n  let alphabetIndex21 = 0;\n  let vowelsLength21 = 0;\n  let alphabetLength21 = 0;\n  let vowelsIndex22 = 0;\n  let alphabetIndex22 = 0;\n  let vowelsLength22 = 0;\n  let alphabetLength22 = 0;\n  let vowelsIndex23 = 0;\n  let alphabetIndex23 = 0;\n  let vowelsLength23 = 0;\n  let alphabetLength23 = 0;\n  let vowelsIndex24 = 0;\n  let alphabetIndex24 = 0;\n  let vowelsLength24 = 0;\n  let alphabetLength24 = 0;\n  let vowelsIndex25 = 0;\n  let alphabetIndex25 = 0;\n  let vowelsLength25 = 0;\n  let alphabetLength25 = 0;\n  let vowelsIndex26 = 0;\n  let alphabetIndex26 = 0;\n  let vowelsLength26 = 0;\n  let alphabetLength26 = 0;\n  let vowelsIndex27 = 0;\n  let alphabetIndex27 = 0;\n  let vowelsLength27 = 0;\n  let alphabetLength27 = 0;\n  let vowelsIndex28 = 0;\n  let alphabetIndex28 = 0;\n  let vowelsLength28 = 0;\n  let alphabetLength28 = 0;\n  let vowelsIndex29 = 0;\n  let alphabetIndex29 = 0;\n  let vowelsLength29 = 0;\n  let alphabetLength29 = 0;\n  let vowelsIndex30 = 0;\n  let alphabetIndex30 = 0;\n  let vowelsLength30 = 0;\n  let alphabetLength30 = 0;\n  let vowelsIndex31 = 0;\n  let alphabetIndex31 = 0;\n  let vowelsLength31 = 0;\n  let alphabetLength31 = 0;\n  let vowelsIndex32 = 0;\n  let alphabetIndex32 = 0;\n  let vowelsLength32 = 0;\n  let alphabetLength32 = 0;\n  let vowelsIndex33 = 0;\n  let alphabetIndex33 = 0;\n  let vowelsLength33 = 0;\n  let alphabetLength33 = 0;\n  let vowelsIndex34 = 0;\n  let alphabetIndex34 = 0;\n  let vowelsLength34 = 0;\n  let alphabetLength34 = 0;\n  let vowelsIndex35 = 0;\n  let alphabetIndex35 = 0;\n  let vowelsLength35 = 0;\n  let alphabetLength35 = 0;\n  let vowelsIndex36 = 0;\n  let alphabetIndex36 = 0;\n  let vowelsLength36 = 0;\n  let alphabetLength36 = 0;\n  let vowelsIndex37 = 0;\n  let alphabetIndex37 = 0;\n  let vowelsLength37 = 0;\n  let alphabetLength37 = 0;\n  let vowelsIndex38 = 0;\n  let alphabetIndex38 = 0;\n  let vowelsLength38 = 0;\n  let alphabetLength38 = 0;\n  let vowelsIndex39 = 0;\n  let alphabetIndex39 = 0;\n  let vowelsLength39 = 0;\n  let alphabetLength39 = 0;\n  let vowelsIndex40 = 0;\n  let alphabetIndex40 = 0;\n  let vowelsLength40 = 0;\n  let alphabetLength40 = 0;\n  let vowelsIndex41 = 0;\n  let alphabetIndex41 = 0;\n  let vowelsLength41 = 0;\n  let alphabetLength41 = 0;\n  let vowelsIndex42 = 0;\n  let alphabetIndex42 = 0;\n  let vowelsLength42 = 0;\n  let alphabetLength42 = 0;\n  let vowelsIndex43 = 0;\n  let alphabetIndex43 = 0;\n  let vowelsLength43 = 0;\n  let alphabetLength43 = 0;\n  let vowelsIndex44 = 0;\n  let alphabetIndex44 = 0;\n  let vowelsLength44 = 0;\n  let alphabetLength44 = 0;\n  let vowelsIndex45 = 0;\n  let alphabetIndex45 = 0;\n  let vowelsLength45 = 0;\n  let alphabetLength45 = 0;\n  let vowelsIndex46 = 0;\n  let alphabetIndex46 = 0;\n  let vowelsLength46 = 0;\n  let alphabetLength46 = 0;\n  let vowelsIndex47 = 0;\n  let alphabetIndex47 = 0;\n  let vowelsLength47 = 0;\n  let alphabetLength47 = 0;\n  let vowelsIndex48 = 0;\n  let alphabetIndex48 = 0;\n  let vowelsLength48 = 0;\n  let alphabetLength48 = 0;\n  let vowelsIndex49 = 0;\n  let alphabetIndex49 = 0;\n  let vowelsLength49 = 0;\n  let alphabetLength49 = 0;\n  let vowelsIndex50 = 0;\n  let alphabetIndex50 = 0;\n  let vowelsLength50 = 0;\n  let alphabetLength50 = 0;\n  let vowelsIndex51 = 0;\n  let alphabetIndex51 = 0;\n  let vowelsLength51 = 0;\n  let alphabetLength51 = 0;\n  let vowelsIndex52 = 0;\n  let alphabetIndex52 = 0;\n  let vowelsLength52 = 0;\n  let alphabetLength52 = 0;\n  let vowelsIndex53 = 0;\n  let alphabetIndex53 = 0;\n  let vowelsLength53 = 0;\n  let alphabetLength53 = 0;\n  let vowelsIndex54 = 0;\n  let alphabetIndex54 = 0;\n  let vowelsLength54 = 0;\n  let alphabetLength54 = 0;\n  let vowelsIndex55 = 0;\n  let alphabetIndex55 = 0;\n  let vowelsLength55 = 0;\n", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "<|endoftext|>/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  let max = 0;\n  let maxPrime = 0;\n  let maxDigit = 0;\n  let maxDigitPrime = 0;\n  let maxDigitPrimeSum = 0;\n  let maxDigitPrimeSumPrime = 0;\n  let maxDigitPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSum = 0;\n  let maxDigitPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrimeSumPrime", "passed": 0, "run_status": 2}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "<|endoftext|>/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  let keys = Object.keys(dict);\n  keys.sort();\n  let allKeysAreStrings = keys.every(key => typeof dict[key] ==='string');\n  return allKeysAreStrings;\n};\n\n/*\n  Given a string, return true if all characters are lowercase or all \n  characters are uppercase, else return false.\n  The function should return false is the given string is empty.\n  Examples:\n  checkStringCases(\"a\") should return true.\n  checkStringCases(\"A\") should return false.\n  checkStringCases(\"aB\") should return false.\n  checkStringCases(\"aBc\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aBcD\") should return false.\n  checkStringCases(\"aB", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "<|endoftext|>/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      arr.push(i);\n      i++;\n    }\n  }\n  return arr;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 1.\n  for example:\n  sumDigits(12) => 10\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigits = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZeroZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZeroZeroZeroZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => 6\n  sumDigits(5) => 5\n  sumDigits(4) => 4\n  sumDigits(3) => 3\n  sumDigits(2) => 2\n  sumDigits(1) => 1\n  */\nconst sumDigitsZeroZeroZeroZeroZeroZeroZeroZeroZeroZero = (num) => {\n  let sum = 0;\n  let digits = num.toString().split('');\n  for (let i = 0; i < digits.length; i++) {\n    sum += parseInt(digits[i], 10);\n  }\n  return sum;\n};\n\n/*Implement a function that takes an integer and returns the sum of its digits, starting from 0.\n  for example:\n  sumDigits(12) => 0\n  sumDigits(9) => 9\n  sumDigits(8) => 8\n  sumDigits(7) => 7\n  sumDigits(6) => ", "passed": 0, "run_status": 3}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "<|endoftext|>/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let product = 1;\n  while (b) {\n    product = product * b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return product;\n};\n\n/*Complete the function that takes two integers and returns \n  the sum of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sum(148, 412) should return 412.\n  sum(19, 28) should return 28.\n  sum(2020, 1851) should return 1851.\n  sum(14,-15) should return 14.\n  */\nconst sum = (a, b) => {\n  let sum = 0;\n  while (b) {\n    sum += b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return sum;\n};\n\n/*Complete the function that takes two integers and returns \n  the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(148, 412) should return 412.\n  difference(19, 28) should return 28.\n  difference(2020, 1851) should return 1851.\n  difference(14,-15) should return 14.\n  */\nconst difference = (a, b) => {\n  let difference = 0;\n  while (b) {\n    difference = difference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return difference;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  abs(148, 412) should return 412.\n  abs(19, 28) should return 28.\n  abs(2020, 1851) should return 1851.\n  abs(14,-15) should return 14.\n  */\nconst abs = (a, b) => {\n  let absoluteDifference = 0;\n  while (b) {\n    absoluteDifference = absoluteDifference + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return absoluteDifference;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(148, 412) should return 412.\n  sqrt(19, 28) should return 28.\n  sqrt(2020, 1851) should return 1851.\n  sqrt(14,-15) should return 14.\n  */\nconst sqrt = (a, b) => {\n  let squareRoot = 0;\n  while (b) {\n    squareRoot = squareRoot + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return squareRoot;\n};\n\n/*Complete the function that takes two integers and returns \n  the inverse of the square root of the difference between their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(148, 412) should return 412.\n  inverse(19, 28) should return 28.\n  inverse(2020, 1851) should return 1851.\n  inverse(14,-15) should return 14.\n  */\nconst inverse = (a, b) => {\n  let inverseSquareRoot = 0;\n  while (b) {\n    inverseSquareRoot = inverseSquareRoot + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return inverseSquareRoot;\n};\n\n/*Complete the function that takes two integers and returns \n  the remainder of the division of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  remainder(148, 412) should return 412.\n  remainder(19, 28) should return 28.\n  remainder(2020, 1851) should return 1851.\n  remainder(14,-15) should return 14.\n  */\nconst remainder = (a, b) => {\n  let remainder = 0;\n  while (b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of the division of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  absolute(remainder(148, 412)) should return 412.\n  absolute(remainder(19, 28)) should return 28.\n  absolute(remainder(2020, 1851)) should return 1851.\n  absolute(remainder(14,-15)) should return 14.\n  */\nconst absolute = (remainder) => {\n  let absoluteRemainder = 0;\n  while (remainder) {\n    absoluteRemainder = absoluteRemainder + remainder;\n    remainder = remainder % 10;\n  }\n  return absoluteRemainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the remainder of the division of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sqrt(absolute(remainder(148, 412))) should return 412.\n  sqrt(absolute(remainder(19, 28))) should return 28.\n  sqrt(absolute(remainder(2020, 1851))) should return 1851.\n  sqrt(absolute(remainder(14,-15))) should return 14.\n  */\nconst sqrt = absolute(remainder);\n\n/*Complete the function that takes two integers and returns \n  the inverse of the square root of the absolute value of the remainder of the division of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  inverse(absolute(remainder(148, 412))) should return 412.\n  inverse(absolute(remainder(19, 28))) should return 28.\n  inverse(absolute(remainder(2020, 1851))) should return 1851.\n  inverse(absolute(remainder(14,-15))) should return 14.\n  */\nconst inverse = absolute(remainder);\n\n/*Complete the function that takes two integers and returns \n  the remainder of the division of their unit digits modulo 10.\n  Assume the input is always valid.\n  Examples:\n  remainderMod(148, 412) should return 412.\n  remainderMod(19, 28) should return 28.\n  remainderMod(2020, 1851) should return 1851.\n  remainderMod(14,-15) should return 14.\n  */\nconst remainderMod = (a, b) => {\n  let remainder = 0;\n  while (b) {\n    remainder = remainder + b;\n    b = a % b;\n    a = Math.floor(a / b);\n  }\n  return remainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the absolute value of the remainder of the division of their unit digits modulo 10.\n  Assume the input is always valid.\n  Examples:\n  absolute(remainderMod(148, 412)) should return 412.\n  absolute(remainderMod(19, 28)) should return 28.\n  absolute(remainderMod(2020, 1851)) should return 1851.\n  absolute(remainderMod(14,-15)) should return 14.\n  */\nconst absoluteMod = (remainder) => {\n  let absoluteRemainder = 0;\n  while (remainder) {\n    absoluteRemainder = absoluteRemainder + remainder;\n    remainder = remainder % 10;\n  }\n  return absoluteRemainder;\n};\n\n/*Complete the function that takes two integers and returns \n  the square root of the absolute value of the remainder of the division of their unit digits modulo 10.\n  Assume the input is always valid.\n  Examples:\n  sqrt(absoluteMod(remainderMod(148, 412))) should ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "<|endoftext|>/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLower = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('aBCdEf') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('dBBE') returns 0\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelEvenOdd = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns 0\n  */\nconst countVowelOddEven = (s) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let l = s.length;\n  \n  while (i < l) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      count++;\n    }\n    i++;\n  }\n  \n  while (j < l) {\n    if (s[j] >= 'A' && s[j] <= 'Z') {\n      count++;\n    }\n    j++;\n  }\n  \n  while (k < l) {\n    if (s[k] >= 'a' && s[k] <= 'z') {\n      count++;\n    }\n    k++;\n  }\n  \n  return count;\n};\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowel('dBBE') returns 1\n  countVowel('abcdefg') returns 0\n  countVowel('aBCdEf') returns ", "passed": 0, "run_status": 1}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "<|endoftext|>/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const [integer1, integer2] = value.split(\".\");\n  const integer1Int = parseInt(integer1);\n  const integer2Int = parseInt(integer2);\n  const integer1IntMinusOne = integer1Int - 1;\n  const integer2IntMinusOne = integer2Int - 1;\n  const integer1IntPlusOne = integer1Int + 1;\n  const integer2IntPlusOne = integer2Int + 1;\n  const integer1IntMinusTwo = integer1Int - 2;\n  const integer2IntMinusTwo = integer2Int - 2;\n  const integer1IntPlusTwo = integer1Int + 2;\n  const integer2IntPlusTwo = integer2Int + 2;\n  const integer1IntMinusThree = integer1Int - 3;\n  const integer2IntMinusThree = integer2Int - 3;\n  const integer1IntPlusThree = integer1Int + 3;\n  const integer2IntPlusThree = integer2Int + 3;\n  const integer1IntMinusFour = integer1Int - 4;\n  const integer2IntMinusFour = integer2Int - 4;\n  const integer1IntPlusFour = integer1Int + 4;\n  const integer2IntPlusFour = integer2Int + 4;\n  const integer1IntMinusFive = integer1Int - 5;\n  const integer2IntMinusFive = integer2Int - 5;\n  const integer1IntPlusFive = integer1Int + 5;\n  const integer2IntPlusFive = integer2Int + 5;\n  const integer1IntMinusSix = integer1Int - 6;\n  const integer2IntMinusSix = integer2Int - 6;\n  const integer1IntPlusSix = integer1Int + 6;\n  const integer2IntPlusSix = integer2Int + 6;\n  const integer1IntMinusSeven = integer1Int - 7;\n  const integer2IntMinusSeven = integer2Int - 7;\n  const integer1IntPlusSeven = integer1Int + 7;\n  const integer2IntPlusSeven = integer2Int + 7;\n  const integer1IntMinusEight = integer1Int - 8;\n  const integer2IntMinusEight = integer2Int - 8;\n  const integer1IntPlusEight = integer1Int + 8;\n  const integer2IntPlusEight = integer2Int + 8;\n  const integer1IntMinusNine = integer1Int - 9;\n  const integer2IntMinusNine = integer2Int - 9;\n  const integer1IntPlusNine = integer1Int + 9;\n  const integer2IntPlusNine = integer2Int + 9;\n  const integer1IntMinusTen = integer1Int - 10;\n  const integer2IntMinusTen = integer2Int - 10;\n  const integer1IntPlusTen = integer1Int + 10;\n  const integer2IntPlusTen = integer2Int + 10;\n  const integer1IntMinusEleven = integer1Int - 11;\n  const integer2IntMinusEleven = integer2Int - 11;\n  const integer1IntPlusEleven = integer1Int + 11;\n  const integer2IntPlusEleven = integer2Int + 11;\n  const integer1IntMinusTwelve = integer1Int - 12;\n  const integer2IntMinusTwelve = integer2Int - 12;\n  const integer1IntPlusTwelve = integer1Int + 12;\n  const integer2IntPlusTwelve = integer2Int + 12;\n  const integer1IntMinusThirteen = integer1Int - 13;\n  const integer2IntMinusThirteen = integer2Int - 13;\n  const integer1IntPlusThirteen = integer1Int + 13;\n  const integer2IntPlusThirteen = integer2Int + 13;\n  const integer1IntMinusFourteen = integer1Int - 14;\n  const integer2IntMinusFourteen = integer2Int - 14;\n  const integer1IntPlusFourteen = integer1Int + 14;\n  const integer2IntPlusFourteen = integer2Int + 14;\n  const integer1IntMinusFifteen = integer1Int - 15;\n  const integer2IntMinusFifteen = integer2Int - 15;\n  const integer1IntPlusFifteen = integer1Int + 15;\n  const integer2IntPlusFifteen = integer2Int + 15;\n  const integer1IntMinusSixteen = integer1Int - 16;\n  const integer2IntMinusSixteen = integer2Int - 16;\n  const integer1IntPlusSixteen = integer1Int + 16;\n  const integer2IntPlusSixteen = integer2Int + 16;\n  const integer1IntMinusSeventeen = integer1Int - 17;\n  const integer2IntMinusSeventeen = integer2Int - 17;\n  const integer1IntPlusSeventeen = integer1Int + 17;\n  const integer2IntPlusSeventeen = integer2Int + 17;\n  const integer1IntMinusEighteen = integer1Int - 18;\n  const integer2IntMinusEighteen = integer2Int - 18;\n  const integer1IntPlusEighteen = integer1Int + 18;\n  const integer2IntPlusEighteen = integer2Int + 18;\n  const integer1IntMinusNineteen = integer1Int - 19;\n  const integer2IntMinusNineteen = integer2Int - 19;\n  const integer1IntPlusNineteen = integer1Int + 19;\n  const integer2IntPlusNineteen = integer2Int + 19;\n  const integer1IntMinusTwelveteen = integer1Int - 20;\n  const integer2IntMinusTwelveteen = integer2Int - 20;\n  const integer1IntPlusTwelveteen = integer1Int + 20;\n  const integer2IntPlusTwelveteen = integer2Int + 20;\n  const integer1IntMinusThirteenteen = integer1Int - 21;\n  const integer2IntMinusThirteenteen = integer2Int - 21;\n  const integer1IntPlusThirteenteen = integer1Int + 21;\n  const integer2IntPlusThirteenteen = integer2Int + 21;\n  const integer1IntMinusFourteenteen = integer1Int - 22;\n  const integer2IntMinusFourteenteen = integer2Int - 22;\n  const integer1IntPlusFourteenteen = integer1Int + 22;\n  const integer2IntPlusFourteenteen = integer2Int + 22;\n  const integer1IntMinusFifteenteen = integer1Int - 23;\n  const integer2IntMinusFifteenteen = integer2Int - 23;\n  const integer1IntPlusFifteenteen = integer1Int + 23;\n  const ", "passed": 0, "run_status": 2}
