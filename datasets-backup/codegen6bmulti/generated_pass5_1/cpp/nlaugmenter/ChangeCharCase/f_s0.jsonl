{"task_id": "CPP/0", "prompt": "/*\nCheCk if in Given VecTor of numbers, Are anY two numbers cloSer To eacH otHEr ThAn\ngiVEn threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n", "canonical_solution": "    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    vector<float> a={1.0, 2.0, 3.9, 4.0, 5.0, 2.2};\n    assert (has_close_elements(a, 0.3)==true);\n    assert (has_close_elements(a, 0.05) == false);\n\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95) == true);\n    assert (has_close_elements({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8) ==false);\n    assert (has_close_elements({1.0, 2.0, 3.0, 4.0, 5.0}, 2.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0) == true);\n    assert (has_close_elements({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5) == false);\n    \n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (has_close_elements({1.0, 2.0, 3.0}, 0.5) == false && \"failure 1\");\n    assert (has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3) && \"failure 2\") ;\n}\n", "entry_point": "has_close_elements", "seed": 0, "perturbed": true, "gc": "/*\nCheCk if in Given VecTor of numbers, Are anY two numbers cloSer To eacH otHEr ThAn\ngiVEn threshold.\n>>> has_close_elements({1.0, 2.0, 3.0}, 0.5)\nfalse\n>>> has_close_elements({1.0, 2.8, 3.0, 4.0, 5.0, 2.0}, 0.3)\ntrue\n*/\n#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\nbool has_close_elements(vector<float> numbers, float threshold){\n    for(int i=0;i<numbers.size();i++){\n        for(int j=0;j<numbers.size();j++){\n            if(abs(numbers[i]-numbers[j])<=threshold){\n                return true;\n            }\n        }\n    }\n    return false;\n}\nint main(){\n    vector<float> numbers;\n    float threshold;\n    while(scanf(\"%f\",&threshold)!=EOF){\n        while(scanf(\"%f\",&numbers[numbers.size()-1])!=EOF){\n            numbers.push_back(numbers[numbers.size()-1]);\n        }\n        if(has_close_elements(numbers,threshold)){\n            printf(\"true\\n\");\n        }else{\n            printf(\"false\\n\");\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/1", "prompt": "/*\nInpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\nseParate those gRoup iNtO SePaRAtE striNgs and return tHE vECTor Of THOse.\nsePArAte grOupS arE BalAnced (EacH oPeN BRAce Is properlY CLOsed) and not NeSTed withIn eacH otHer\nIgNOrE anY SpaCeS in thE InpuT stRiNG.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n", "canonical_solution": "    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"(()()) ((())) () ((())()())\"),{\"(()())\", \"((()))\", \"()\", \"((())()())\"}));\n    assert (issame(separate_paren_groups(\"() (()) ((())) (((())))\"), {\"()\", \"(())\", \"((()))\", \"(((())))\" }));\n    assert (issame(separate_paren_groups(\"(()(())((())))\") ,{ \"(()(())((())))\" }));\n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){  \n    assert (issame(separate_paren_groups(\"( ) (( )) (( )( ))\") ,{\"()\", \"(())\", \"(()())\"}));\n}\n", "entry_point": "separate_paren_groups", "seed": 0, "perturbed": true, "gc": "/*\nInpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\nseParate those gRoup iNtO SePaRAtE striNgs and return tHE vECTor Of THOse.\nsePArAte grOupS arE BalAnced (EacH oPeN BRAce Is properlY CLOsed) and not NeSTed withIn eacH otHer\nIgNOrE anY SpaCeS in thE InpuT stRiNG.\n>>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n{\"()\", \"(())\", \"(()())\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> separate_paren_groups(string paren_string){\n\tvector<string> result;\n\tstring cur_group = \"\";\n\tfor(int i = 0; i < paren_string.size(); i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tcur_group += paren_string[i];\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tif(cur_group.size() > 0){\n\t\t\t\tresult.push_back(cur_group);\n\t\t\t\tcur_group = \"\";\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tcur_group += paren_string[i];\n\t\t}\n\t}\n\tif(cur_group.size() > 0){\n\t\tresult.push_back(cur_group);\n\t}\n\treturn result;\n}\nint main(){\n\tstring paren_string = \"((()))\";\n\tvector<string> result = separate_paren_groups(paren_string);\n\tfor(int i = 0; i < result.size(); i++){\n\t\tprintf(\"%s\\n\", result[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/10", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    FinD the ShortEst PalinDrome That begIns With a SupPLiEd StriNG. \n    AlGorithm idea is SIMple: - find the lonGest postfix oF suppLiED sTrINg That iS a palinDRoME. \n    - appEnD TO thE eND oF the sTriNg rEVerSe of a StrInG pREFIx tHat comes bEFORe the palinDrOMic suffIx.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n", "canonical_solution": "   int i;\n   for (i=0;i<str.length();i++)\n   {\n        string rstr=str.substr(i);\n        if (is_palindrome(rstr))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"x\") == \"x\");\n     assert (make_palindrome(\"xyz\") == \"xyzyx\");\n     assert (make_palindrome(\"xyx\") == \"xyx\") ;\n     assert (make_palindrome(\"jerry\") == \"jerryrrej\");\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (make_palindrome(\"\") == \"\");\n    assert (make_palindrome(\"cat\") == \"catac\");\n     assert (make_palindrome(\"cata\") == \"catac\");\n}\n", "entry_point": "make_palindrome", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string str){\n    //Test if given string is a palindrome \n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    /*\n    FinD the ShortEst PalinDrome That begIns With a SupPLiEd StriNG. \n    AlGorithm idea is SIMple: - find the lonGest postfix oF suppLiED sTrINg That iS a palinDRoME. \n    - appEnD TO thE eND oF the sTriNg rEVerSe of a StrInG pREFIx tHat comes bEFORe the palinDrOMic suffIx.\n    >>> make_palindrome(\"\") \n    \"\" \n    >>> make_palindrome(\"cat\") \n    \"catac\" \n    >>> make_palindrome(\"cata\") \n    \"catac\" \n    */\n    int len = str.size();\n    string s = \"\";\n    for(int i = 0; i < len/2; i++){\n        s += str[i];\n    }\n    for(int i = len/2; i < len; i++){\n        s += str[len-i-1];\n    }\n    return s;\n}\nint main(){\n    string str = \"\";\n    while(cin >> str){\n        if(is_palindrome(str)){\n            cout << \"The string \" << str << \" is a palindrome.\" << endl;\n        }\n        else{\n            cout << \"The string \" << str << \" is not a palindrome.\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/100", "prompt": "/*\nGivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\nTHe first level hAS n StonEs.\nThe numbeR of stones in the Next lEvEL iS:\n    - tHE nExt odD number IF n iS ODd.\n    - tHe NEXt eVeN NuMber iF n is EveN.\nretUrn thE nuMbEr OF STonEs in each levEL in A Vector, wherE eLEment at Index\nI rePreseNTs The NUmbEr Of sTOnes in The LeVEL (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n", "canonical_solution": "    vector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n    assert (issame(make_a_pile(4) , {4,6,8,10}));\n    assert (issame(make_a_pile(5) , {5, 7, 9, 11, 13}));\n    assert (issame(make_a_pile(6) , {6, 8, 10, 12, 14, 16}));\n    assert (issame(make_a_pile(8) , {8, 10, 12, 14, 16, 18, 20, 22}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(make_a_pile(3) , {3, 5, 7}));\n}\n", "entry_point": "make_a_pile", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\nTHe first level hAS n StonEs.\nThe numbeR of stones in the Next lEvEL iS:\n    - tHE nExt odD number IF n iS ODd.\n    - tHe NEXt eVeN NuMber iF n is EveN.\nretUrn thE nuMbEr OF STonEs in each levEL in A Vector, wherE eLEment at Index\nI rePreseNTs The NUmbEr Of sTOnes in The LeVEL (i+1).\n\nExamples:\n>>> make_a_pile(3)\n{3, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> make_a_pile(int n){\n    vector<int> pile;\n    for(int i=0;i<n;i++){\n        pile.push_back(i+1);\n    }\n    return pile;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of stones in the first level: \");\n    scanf(\"%d\",&n);\n    vector<int> pile = make_a_pile(n);\n    for(int i=0;i<pile.size();i++){\n        printf(\"%d \",pile[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/101", "prompt": "/*\nYou Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\nto spliT THe stRing into woRds and return a vectoR of thE wORdS.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\", 'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n", "canonical_solution": "    string current=\"\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\"\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"Hi, my name\") , {\"Hi\", \"my\", \"name\"}));\n    assert (issame(words_string(\"One,, two, three, four, five, six,\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n    assert (issame(words_string(\"\") , {}));\n    assert (issame(words_string(\"ahmed     , gamal\") , {\"ahmed\", \"gamal\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(words_string(\"Hi, my name is John\") , {\"Hi\", \"my\", \"name\", \"is\", \"John\"}));\n    assert (issame(words_string(\"One, two, three, four, five, six\") , {\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"}));\n}\n", "entry_point": "words_string", "seed": 0, "perturbed": true, "gc": "/*\nYou Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\nto spliT THe stRing into woRds and return a vectoR of thE wORdS.\n\nFor example:\nwords_string(\"Hi, my name is John\") == {\"Hi\", \"my\", \"name\", \"is\", \"John\"}\nwords_string(\"One, two, three, four, five, six\") == {\"One\", 'two\", 'three\", \"four\", \"five\",'six\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> words_string(string s){\n\tvector<string> v;\n\tstring word;\n\tfor(int i=0;i<s.length();i++){\n\t\tif(s[i]==' '){\n\t\t\tv.push_back(word);\n\t\t\tword=\"\";\n\t\t}\n\t\telse{\n\t\t\tword+=s[i];\n\t\t}\n\t}\n\tv.push_back(word);\n\treturn v;\n}\nint main(){\n\tstring s;\n\tcin>>s;\n\tvector<string> v=words_string(s);\n\tfor(int i=0;i<v.size();i++){\n\t\tcout<<v[i]<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/102", "prompt": "/*\nThiS funCtion TakEs two PositIve numbErs x And y anD reTUrNs The\nbIGgeSt even integer NUMber That is in the rAnge [x, y] inclusivE. If \nthErE'S nO sUCh NumbeR, then thE FuNCTioN sHOUld return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n", "canonical_solution": "    if (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return y-1;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n    assert (choose_num(33, 12354) == 12354);\n    assert (choose_num(5234, 5233) == -1);\n    assert (choose_num(6, 29) == 28);\n    assert (choose_num(27, 10) == -1);\n    assert (choose_num(7, 7) == -1);\n    assert (choose_num(546, 546) == 546);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (choose_num(12, 15) == 14);\n    assert (choose_num(13, 12) == -1);\n}\n", "entry_point": "choose_num", "seed": 0, "perturbed": true, "gc": "/*\nThiS funCtion TakEs two PositIve numbErs x And y anD reTUrNs The\nbIGgeSt even integer NUMber That is in the rAnge [x, y] inclusivE. If \nthErE'S nO sUCh NumbeR, then thE FuNCTioN sHOUld return -1.\n\nFor example:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n*/\n#include<stdio.h>\nusing namespace std;\nint choose_num(int x,int y){\n    if(x<y){\n        return -1;\n    }\n    int i,j,k,l,m,n,p,q,r,s,t,u,v,w,x1,y1;\n    for(i=x;i<=y;i++){\n        for(j=x;j<=y;j++){\n            if(i==j){\n                return i;\n            }\n        }\n    }\n    for(i=x;i<=y;i++){\n        for(j=x;j<=y;j++){\n            if(i!=j){\n                for(k=x;k<=y;k++){\n                    if(k!=i && k!=j){\n                        for(l=x;l<=y;l++){\n                            if(l!=i && l!=j && l!=k){\n                                for(m=x;m<=y;m++){\n                                    if(m!=i && m!=j && m!=k && m!=l){\n                                        for(n=x;n<=y;n++){\n                                            if(n!=i && n!=j && n!=k && n!=l && n!=m){\n                                                for(p=x;p<=y;p++){\n                                                    if(p!=i && p!=j && p!=k && p!=l && p!=m && p!=n){\n                                                        for(q=x;q<=y;q++){\n                                                            if(q!=i && q!=j && q!=k && q!=l && q!=m && q!=n && q!=p){\n                                                                for(r=x;r<=y;r++){\n                                                                    if(r!=i && r!=j && r!=k && r!=l && r!=m && r!=n && r!=p && r!=q){\n                                                                        for(s=x;s<=y;s++){\n                                                                            if(s!=i && s!=j && s!=k && s!=l && s!=m && s!=n && s!=p && s!=q && s!=r){\n                                                                                for(t=x;t<=y;t++){\n                                                                                    if(t!=i && t!=j && t!=k && t!=l && t!=m && t!=n && t!=p && t!=q && t!=r && t!=s){\n                                                                                        for(u=x;u<=y;u++){\n                                                                                            if(u!=i && u!=j && u!=k && u!=l && u!=m && u!=n && u!=p && u!=q && u!=r && u!=s && u!=t){\n                                                                                                for(v=x;v<=y;v++){\n                                                                                                    if(v!=i && v!=j && v!=k && v!=l && v!=m && v!=n && v!=p && v!=q && v!=r && v!=s && v!=t && v!=u){\n                                                                                                        for(w=x;w<=y;w++){\n                                                                                                          if(w!=i && w!=j && w!=k && w!=l && w!=m && w!=n && w!=p && w!=q && w!=r && w!=s && w!=t && w!=u && w!=v){\n                                                                                                               return -1;\n                                                                                                          }\n                                                                                                     }\n                                                                                                }\n                                                                                            }\n                                                                                        }\n                                                                                    }\n                                                                                }\n                                                                            }\n                                                                        }\n                                                                    }\n                                                                }\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    int x,y;\n    while(scanf(\"%d %d\",&x,&y)!=EOF){\n        printf(\"%d\\n\",choose_num(x,y));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/103", "prompt": "/*\nYou Are gIven tWo pOsitiVe intEgers n anD m, anD your TasK Is To CompUTe tHe\naverage of thE INtegErs from n thrOugh m (includinG n and m). \nROuND tHe ANsWer to The nearESt INTegEr(SMAllEr ONe) And coNveRt tHAt tO binaRy.\nIF n iS gREATer Than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n", "canonical_solution": "    if (n>m) return \"-1\";\n    int num=(m+n)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 13) == \"1010\");\n    assert (rounded_avg(964,977) == \"1111001010\");\n    assert (rounded_avg(996,997) == \"1111100100\");\n    assert (rounded_avg(560,851) == \"1011000001\");  \n    assert (rounded_avg(185,546) == \"101101101\");\n    assert (rounded_avg(362,496) == \"110101101\");\n    assert (rounded_avg(350,902) == \"1001110010\");\n    assert (rounded_avg(197,233) == \"11010111\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(5, 1) == \"-1\");\n    assert (rounded_avg(5, 5) == \"101\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (rounded_avg(1, 5) == \"11\");\n    assert (rounded_avg(7, 5) == \"-1\");\n    assert (rounded_avg(10,20) == \"1111\");\n    assert (rounded_avg(20,33) == \"11010\");\n}\n", "entry_point": "rounded_avg", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven tWo pOsitiVe intEgers n anD m, anD your TasK Is To CompUTe tHe\naverage of thE INtegErs from n thrOugh m (includinG n and m). \nROuND tHe ANsWer to The nearESt INTegEr(SMAllEr ONe) And coNveRt tHAt tO binaRy.\nIF n iS gREATer Than m, return \"-1\".\nExample:\nrounded_avg(1, 5) => \"11\"\nrounded_avg(7, 5) => \"-1\"\nrounded_avg(10, 20) => \"1111\"\nrounded_avg(20, 33) => \"11010\"\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nstring rounded_avg(int n,int m){\n\tint i,j,k,l,sum,sum1,sum2,sum3,sum4,sum5,sum6,sum7,sum8,sum9,sum10,sum11,sum12,sum13,sum14,sum15,sum16,sum17,sum18,sum19,sum20,sum21,sum22,sum23,sum24,sum25,sum26,sum27,sum28,sum29,sum30,sum31,sum32,sum33,sum34,sum35,sum36,sum37,sum38,sum39,sum40,sum41,sum42,sum43,sum44,sum45,sum46,sum47,sum48,sum49,sum50,sum51,sum52,sum53,sum54,sum55,sum56,sum57,sum58,sum59,sum60,sum61,sum62,sum63,sum64,sum65,sum66,sum67,sum68,sum69,sum70,sum71,sum72,sum73,sum74,sum75,sum76,sum77,sum78,sum79,sum80,sum81,sum82,sum83,sum84,sum85,sum86,sum87,sum88,sum89,sum90,sum91,sum92,sum93,sum94,sum95,sum96,sum97,sum98,sum99,sum100,sum101,sum102,sum103,sum104,sum105,sum106,sum107,sum108,sum109,sum110,sum111,sum112,sum113,sum114,sum115,sum116,sum117,sum118,sum119,sum120,sum121,sum122,sum123,sum124,sum125,sum126,sum127,sum128,sum129,sum130,sum131,sum132,sum133,sum134,sum135,sum136,sum137,sum138,sum139,sum140,sum141,sum142,sum143,sum144,sum145,sum146,sum147,sum148,sum149,sum150,sum151,sum152,sum153,sum154,sum155,sum156,sum157,sum158,sum159,sum160,sum161,sum162,sum163,sum164,sum165,sum166,sum167,sum168,sum169,sum170,sum171,sum172,sum173,sum174,sum175,sum176,sum177,sum178,sum179,sum180,sum181,sum182,sum183,sum184,sum185,sum186,sum187,sum188,sum189,sum190,sum191,sum192,sum193,sum194,sum195,sum196,sum197,sum198,sum199,sum200,sum201,sum202,sum203,sum204,sum205,sum206,sum207,sum208,sum209,sum210,sum211,sum212,sum213,sum214,sum215,sum216,sum217,sum218,sum219,sum220,sum221,sum222,sum223,sum224,sum225,sum226,sum227,sum228,sum229,sum230,sum231,sum232,sum233,sum234,sum235,sum236,sum237,sum238,sum239,sum240,sum241,sum242,sum243,sum244,sum245,sum246,sum247,sum248,sum249,sum250,sum251,sum252,sum253,sum254,sum255,sum256,sum257,sum258,sum259,sum260,sum261,sum262,sum263,sum264,sum265,sum266,sum267,sum268,sum269,sum270,sum271,sum272,sum273,sum274,sum275,sum276,sum277,sum278,sum279,sum280,sum281,sum282,sum283,sum284,sum285,sum286,sum287,sum288,sum289,sum290,sum291,sum292,sum293,sum294,sum295,sum296,sum297,sum298,sum299,sum300,sum301,sum302,sum303,sum304,sum305,sum306,sum307,sum308,sum309,sum310,sum311,sum312,sum313,sum314,sum315,sum316,sum317,sum318,sum319,sum320,sum321,sum322,sum323,sum324,sum325,sum326,sum327,sum328,sum329,sum330,sum331,sum332,sum333,sum334,sum335,sum336,sum337,sum338,sum339,sum340,sum341,sum342,sum343,sum344,sum345,sum346,sum347,sum348,sum349,sum350,sum351,sum352,sum353,sum354,sum355,sum356,sum357,sum358,sum359,sum360,sum361,sum362,sum363,sum364,sum365,sum366,sum367,sum368,sum369,sum370,sum371,sum372,sum373,sum374,sum375,sum376,sum377,sum378,sum379,sum380,sum381,sum382,sum383,sum384,sum385,sum386,sum387,sum388,sum389,sum390,sum391,sum392,sum393,sum394,sum395,sum396,sum397,sum398,sum399,sum400,sum401,sum402,sum403,sum404,sum405,sum406,sum407,sum408,sum409,sum410,sum411,sum412,sum413,sum414,sum415,sum416,sum417,sum418,sum419,sum420,sum421,sum422,sum423,sum424,sum425,sum426,sum427,sum428,sum429,sum430,sum431,sum432,sum433,sum434,sum435,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/104", "prompt": "/*\nGivEn a vEctor Of pOsitiVe intEgers x. return a sOrtEd vecTor OF aLl \nElemENts That hasn't any eVEN digIt.\n\nNote: RetuRned vector shOuld bE sORtEd in INcReasiNg order.\n\nfOr EXAmpLe:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n    assert (issame(unique_digits({12345, 2033, 111, 151}) , {111, 151}));\n    assert (issame(unique_digits({135, 103, 31}) , {31, 135}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique_digits({15, 33, 1422, 1}) , {1, 15, 33}));\n    assert (issame(unique_digits({152, 323, 1422, 10}) , {}));\n}\n", "entry_point": "unique_digits", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of pOsitiVe intEgers x. return a sOrtEd vecTor OF aLl \nElemENts That hasn't any eVEN digIt.\n\nNote: RetuRned vector shOuld bE sORtEd in INcReasiNg order.\n\nfOr EXAmpLe:\n>>> unique_digits({15, 33, 1422, 1})\n{1, 15, 33}\n>>> unique_digits({152, 323, 1422, 10})\n{}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique_digits(vector<int> x){\n\tvector<int> ans;\n\tfor(int i=0;i<x.size();i++){\n\t\tint temp=x[i];\n\t\tint count=0;\n\t\twhile(temp>0){\n\t\t\ttemp/=10;\n\t\t\tcount++;\n\t\t}\n\t\tif(count==0)\n\t\t\tans.push_back(x[i]);\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<int> x;\n\tx.push_back(1);\n\tx.push_back(2);\n\tx.push_back(3);\n\tx.push_back(4);\n\tx.push_back(5);\n\tx.push_back(6);\n\tx.push_back(7);\n\tx.push_back(8);\n\tx.push_back(9);\n\tx.push_back(10);\n\tx.push_back(11);\n\tx.push_back(12);\n\tx.push_back(13);\n\tx.push_back(14);\n\tx.push_back(15);\n\tx.push_back(16);\n\tx.push_back(17);\n\tx.push_back(18);\n\tx.push_back(19);\n\tx.push_back(20);\n\tx.push_back(21);\n\tx.push_back(22);\n\tx.push_back(23);\n\tx.push_back(24);\n\tx.push_back(25);\n\tx.push_back(26);\n\tx.push_back(27);\n\tx.push_back(28);\n\tx.push_back(29);\n\tx.push_back(30);\n\tx.push_back(31);\n\tx.push_back(32);\n\tx.push_back(33);\n\tx.push_back(34);\n\tx.push_back(35);\n\tx.push_back(36);\n\tx.push_back(37);\n\tx.push_back(38);\n\tx.push_back(39);\n\tx.push_back(40);\n\tx.push_back(41);\n\tx.push_back(42);\n\tx.push_back(43);\n\tx.push_back(44);\n\tx.push_back(45);\n\tx.push_back(46);\n\tx.push_back(47);\n\tx.push_back(48);\n\tx.push_back(49);\n\tx.push_back(50);\n\tx.push_back(51);\n\tx.push_back(52);\n\tx.push_back(53);\n\tx.push_back(54);\n\tx.push_back(55);\n\tx.push_back(56);\n\tx.push_back(57);\n\tx.push_back(58);\n\tx.push_back(59);\n\tx.push_back(60);\n\tx.push_back(61);\n\tx.push_back(62);\n\tx.push_back(63);\n\tx.push_back(64);\n\tx.push_back(65);\n\tx.push_back(66);\n\tx.push_back(67);\n\tx.push_back(68);\n\tx.push_back(69);\n\tx.push_back(70);\n\tx.push_back(71);\n\tx.push_back(72);\n\tx.push_back(73);\n\tx.push_back(74);\n\tx.push_back(75);\n\tx.push_back(76);\n\tx.push_back(77);\n\tx.push_back(78);\n\tx.push_back(79);\n\tx.push_back(80);\n\tx.push_back(81);\n\tx.push_back(82);\n\tx.push_back(83);\n\tx.push_back(84);\n\tx.push_back(85);\n\tx.push_back(86);\n\tx.push_back(87);\n\tx.push_back(88);\n\tx.push_back(89);\n\tx.push_back(90);\n\tx.push_back(91);\n\tx.push_back(92);\n\tx.push_back(93);\n\tx.push_back(94);\n\tx.push_back(95);\n\tx.push_back(96);\n\tx.push_back(97);\n\tx.push_back(98);\n\tx.push_back(99);\n\tx.push_back(100);\n\tx.push_back(101);\n\tx.push_back(102);\n\tx.push_back(103);\n\tx.push_back(104);\n\tx.push_back(105);\n\tx.push_back(106);\n\tx.push_back(107);\n\tx.push_back(108);\n\tx.push_back(109);\n\tx.push_back(110);\n\tx.push_back(111);\n\tx.push_back(112);\n\tx.push_back(113);\n\tx.push_back(114);\n\tx.push_back(115);\n\tx.push_back(116);\n\tx.push_back(117);\n\tx.push_back(118);\n\tx.push_back(119);\n\tx.push_back(120);\n\tx.push_back(121);\n\tx.push_back(122);\n\tx.push_back(123);\n\tx.push_back(124);\n\tx.push_back(125);\n\tx.push_back(126);", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/105", "prompt": "/*\nGivEn a vEctor Of iNtegeRs, sort the IntegerS thAt are BetWEeN 1 aNd 9 inCLusIve,\nreverse the RESultIng vector, aNd then replacE each DiGIt By ITs CorreSpondinG NaME FroM\n\"ONE\", \"two\", \"thREe\", \"four\", \"FIve\", \"six\", \"sEveN\", \"EighT\", \"NiNe\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1 , 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n", "canonical_solution": "    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    sort(arr.begin(),arr.end());\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n    assert (issame(by_length({1, -1, 3, 2}) , {\"Three\", \"Two\", \"One\"}));\n    assert (issame(by_length({9, 4, 8}) , {\"Nine\", \"Eight\", \"Four\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(by_length({2, 1, 1, 4, 5, 8, 2, 3}) , {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}));\n    assert (issame(by_length({}) , {}));\n    assert (issame(by_length({1, -1 , 55}) , {\"One\"}));\n}\n", "entry_point": "by_length", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of iNtegeRs, sort the IntegerS thAt are BetWEeN 1 aNd 9 inCLusIve,\nreverse the RESultIng vector, aNd then replacE each DiGIt By ITs CorreSpondinG NaME FroM\n\"ONE\", \"two\", \"thREe\", \"four\", \"FIve\", \"six\", \"sEveN\", \"EighT\", \"NiNe\".\n\nFor example:\n  arr = {2, 1, 1, 4, 5, 8, 2, 3}   \n        -> sort arr -> {1, 1, 2, 2, 3, 4, 5, 8} \n        -> reverse arr -> {8, 5, 4, 3, 2, 2, 1, 1}\n  return {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"}\n\n  If the vector is empty, return an empty vector:\n  arr = {}\n  return {}\n\n  If the vector has any strange number ignore it:\n  arr = {1, -1, 55} \n        -> sort arr -> {-1, 1, 55}\n        -> reverse arr -> {55, 1, -1}\n  return = {\"One\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\nvector<string> by_length(vector<int> arr){\n    vector<string> res;\n    map<int, string> m;\n    for(int i = 0; i < arr.size(); i++){\n        string s = to_string(arr[i]);\n        m[s.size()] = s;\n    }\n    for(auto it = m.begin(); it!= m.end(); it++){\n        res.push_back(it->second);\n    }\n    return res;\n}\nint main(){\n    int arr[] = {2, 1, 1, 4, 5, 8, 2, 3};\n    vector<int> v(arr, arr + sizeof(arr)/sizeof(int));\n    vector<string> res = by_length(v);\n    for(auto it = res.begin(); it!= res.end(); it++){\n        printf(\"%s\\n\", it->c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/106", "prompt": "/*\nImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\nanD ReTuRns a VEctOr of size n, such tHAT the Value of the Element at indEx i is tHe FAcToRIaL of i if i Is even\noR ThE sum OF nuMbERS frOm 1 TO i oTherwIse.\nI stARts From 1.\ntHe fAcToRIAL of i Is the multIPLIcation of tHe NUmbers fRom 1 to i (1 * 2 * ... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n", "canonical_solution": "    int sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n    assert (issame(f(7) , {1, 2, 6, 24, 15, 720, 28}));\n    assert (issame(f(1) , {1}));\n    assert (issame(f(3) , {1, 2, 6}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(f(5) , {1, 2, 6, 24, 15}));\n}\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/*\nImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\nanD ReTuRns a VEctOr of size n, such tHAT the Value of the Element at indEx i is tHe FAcToRIaL of i if i Is even\noR ThE sum OF nuMbERS frOm 1 TO i oTherwIse.\nI stARts From 1.\ntHe fAcToRIAL of i Is the multIPLIcation of tHe NUmbers fRom 1 to i (1 * 2 *... * i).\nExample:\nf(5) == {1, 2, 6, 24, 15}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> f(int n){\n\tvector<int> v;\n\tfor(int i=1;i<=n;i++){\n\t\tv.push_back(i);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfor(int j=1;j<=i;j++){\n\t\t\tv.push_back(v[i-1]*j);\n\t\t}\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter the size of the vector: \");\n\tscanf(\"%d\",&n);\n\tvector<int> v=f(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/107", "prompt": "/*\nGivEn a pOsitiVe iNtegeR n, return a vecTor that Has The nuMbeR Of EvEn anD Odd\nInteger palindROMes tHat fall witHin the range(1, n), iNclusIvE.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n", "canonical_solution": "    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(123) , {8, 13}));\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n    assert (issame(even_odd_palindrome(63) , {6, 8}));\n    assert (issame(even_odd_palindrome(25) , {5, 6}));\n    assert (issame(even_odd_palindrome(19) , {4, 6}));\n    assert (issame(even_odd_palindrome(9) , {4, 5}));\n    assert (issame(even_odd_palindrome(1) , {0, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_palindrome(12) , {4, 6}));\n    assert (issame(even_odd_palindrome(3) , {1, 2}));\n}\n", "entry_point": "even_odd_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR n, return a vecTor that Has The nuMbeR Of EvEn anD Odd\nInteger palindROMes tHat fall witHin the range(1, n), iNclusIvE.\n\nExample 1:\n\n    Input: 3\n    Output: (1, 2)\n    Explanation:\n    Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\nExample 2:\n\n    Input: 12\n    Output: (4, 6)\n    Explanation:\n    Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\nNote:\n    1. 1 <= n <= 10^3\n    2. returned vector has the number of even and odd integer palindromes respectively.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> even_odd_palindrome(int n){\n    vector<int> v;\n    for(int i = 1; i <= n; i++){\n        if(i % 2 == 0){\n            v.push_back(i);\n        }\n    }\n    return v;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> v = even_odd_palindrome(n);\n    for(int i = 0; i < v.size(); i++){\n        printf(\"%d \", v[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/108", "prompt": "/*\nWriTe a fUnctiOn cOunt_nUms whIch takeS a vEctor Of iNTeGeRs anD RetUrns\nthe number OF ElemEnts which hAs a sum of digits > 0.\nIF a numBeR Is NeGAtIve, thEn its fiRSt SIGneD dIGIt wIlL Be NegatIve:\nE.g. -123 hAS siGned dIgiTs -1, 2, AnD 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, -2, 0}) == 0);\n    assert (count_nums({1, 1, 2, -2, 3, 4, 5}) == 6);\n    assert (count_nums({1, 6, 9, -6, 0, 1, 5}) == 5);\n    assert (count_nums({1, 100, 98, -7, 1, -1}) == 4);\n    assert (count_nums({12, 23, 34, -45, -56, 0}) == 5);\n    assert (count_nums({-0, 1}) == 1);\n    assert (count_nums({1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_nums({}) == 0);\n    assert (count_nums({-1, 11, -11}) == 1);\n    assert (count_nums({1, 1, 2}) == 3);\n}\n", "entry_point": "count_nums", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn cOunt_nUms whIch takeS a vEctor Of iNTeGeRs anD RetUrns\nthe number OF ElemEnts which hAs a sum of digits > 0.\nIF a numBeR Is NeGAtIve, thEn its fiRSt SIGneD dIGIt wIlL Be NegatIve:\nE.g. -123 hAS siGned dIgiTs -1, 2, AnD 3.\n>>> count_nums({}) == 0\n>>> count_nums({-1, 11, -11}) == 1\n>>> count_nums({1, 1, 2}) == 3\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint count_nums(vector<int> n){\n    int count = 0;\n    for(int i=0; i<n.size(); i++){\n        if(n[i]>0){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> nn(n);\n    for(int i=0; i<n; i++){\n        scanf(\"%d\", &nn[i]);\n    }\n    printf(\"%d\\n\", count_nums(nn));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/109", "prompt": "/*\nWe hAve a VectoR \"arr\" of n inteGers arr[1], arr[2], ..., arr[N].The\nnumbers in tHe vectoR wiLl be rAndOMlY oRderED. YoUr task is to detERMine If\nit is possIble to get a veCtor sOrTEd in NoN-DeCreasIng ordeR By PERfoRmING \nthE fOLlOwing OpeRatIOn oN the gIveN vEcTOR:\n    you Are alloweD TO Perform rigHt SHift opeRatioN anY numbER oF tiMEs.\n\nONe RigHT shiFt oPeRATion meAns shiftiNg ALL elEmENtS of ThE VEcToR bY one\npOsitIon in the riGHt DIrection. ThE lasT elemeNt OF tHE VecTor Will be MoveD tO\nThe sTARting pOSiTION in tHE Vector i.e. 0th index. \n\nif it is possiBLe TO obTaiN tHE sORted veCtor bY pERfoRmIng the abOVe opEration\nthEn return true ELse return falsE.\nif the gIVen vecTor Is eMpty THeN return TRue.\n\nnoTE: ThE GiVen VECtOr is GuarAnTeEd to HAvE uNIQUE eleMenTs.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n", "canonical_solution": "    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[i-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 10, 1, 2})==true);\n    assert (move_one_ball({4, 3, 1, 2})==false);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n    assert (move_one_ball({})==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (move_one_ball({3, 4, 5, 1, 2})==true);\n    assert (move_one_ball({3, 5, 4, 1, 2})==false);\n}\n", "entry_point": "move_one_ball", "seed": 0, "perturbed": true, "gc": "/*\nWe hAve a VectoR \"arr\" of n inteGers arr[1], arr[2],..., arr[N].The\nnumbers in tHe vectoR wiLl be rAndOMlY oRderED. YoUr task is to detERMine If\nit is possIble to get a veCtor sOrTEd in NoN-DeCreasIng ordeR By PERfoRmING \nthE fOLlOwing OpeRatIOn oN the gIveN vEcTOR:\n    you Are alloweD TO Perform rigHt SHift opeRatioN anY numbER oF tiMEs.\n\nONe RigHT shiFt oPeRATion meAns shiftiNg ALL elEmENtS of ThE VEcToR bY one\npOsitIon in the riGHt DIrection. ThE lasT elemeNt OF tHE VecTor Will be MoveD tO\nThe sTARting pOSiTION in tHE Vector i.e. 0th index. \n\nif it is possiBLe TO obTaiN tHE sORted veCtor bY pERfoRmIng the abOVe opEration\nthEn return true ELse return falsE.\nif the gIVen vecTor Is eMpty THeN return TRue.\n\nnoTE: ThE GiVen VECtOr is GuarAnTeEd to HAvE uNIQUE eleMenTs.\n\nFor Example:\n\nmove_one_ball({3, 4, 5, 1, 2})==>true\nExplanation: By performing 2 right shift operations, non-decreasing order can\n             be achieved for the given vector.\nmove_one_ball({3, 5, 4, 1, 2})==>false\nExplanation:It is not possible to get non-decreasing order for the given\n            vector by performing any number of right shift operations.\n            \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool move_one_ball(vector<int> arr){\n\tint i,j,k;\n\tint n=arr.size();\n\tfor(i=0;i<n-1;i++){\n\t\tfor(j=i+1;j<n;j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tk=arr[i];\n\t\t\t\tarr[i]=arr[j];\n\t\t\t\tarr[j]=k;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<int> arr;\n\tint n;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tarr.clear();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&arr[i]);\n\t\t}\n\t\tif(move_one_ball(arr)){\n\t\t\tprintf(\"YES\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"NO\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/11", "prompt": "/*\nInpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\nPERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n", "canonical_solution": "    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='0';\n            }  \n            else output+='1';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"111000\", \"101010\") == \"010010\");\n     assert (string_xor(\"1\", \"1\") == \"0\");\n    assert (string_xor(\"0101\", \"0000\") == \"0101\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_xor(\"010\", \"110\") == \"100\");\n}\n", "entry_point": "string_xor", "seed": 0, "perturbed": true, "gc": "/*\nInpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\nPERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n>>> string_xor(\"010\", \"110\")\n\"100\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_xor(string a,string b){\n\tint i,j;\n\tstring result;\n\tfor(i=0;i<a.size();i++){\n\t\tif(a[i]=='0'){\n\t\t\tresult+=b[i];\n\t\t}\n\t\telse{\n\t\t\tresult+=a[i];\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tstring a,b;\n\twhile(cin>>a>>b){\n\t\tcout<<string_xor(a,b)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/110", "prompt": "/*\nIn tHis pRobleM, yoU will ImpleMent a fuNctIon thAt tAKeS tWo veCTorS of numbers,\nand DETermInes whetheR it is possiblE to peRfORm An exchange OF eLemenTs\nbetweEN tHEM to MaKE lst1 A veCtOR oF only EveN nuMBerS.\nTherE is No LiMIT On tHe number oF EXChanged eleMeNTs betweEn lst1 and lst2.\nIf It iS possIBlE to exchange ELemEnTs bETweeN thE lst1 aND lst2 To make\nAll the eleMeNTS of lst1 To BE eVen, return \"yEs\".\noThErWiSe, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n    assert (exchange({1, 2, 3, 4}, {2, 1, 4, 3}) == \"YES\" );\n    assert (exchange({5, 7, 3}, {2, 6, 4}) == \"YES\");\n    assert (exchange({5, 7, 3}, {2, 6, 3}) == \"NO\" );\n    assert (exchange({3, 2, 6, 1, 8, 9}, {3, 5, 5, 1, 1, 1}) == \"NO\");\n    assert (exchange({100, 200}, {200, 200}) == \"YES\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (exchange({1, 2, 3, 4}, {1, 2, 3, 4}) == \"YES\");\n    assert (exchange({1, 2, 3, 4}, {1, 5, 3, 4}) == \"NO\");\n}\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*\nIn tHis pRobleM, yoU will ImpleMent a fuNctIon thAt tAKeS tWo veCTorS of numbers,\nand DETermInes whetheR it is possiblE to peRfORm An exchange OF eLemenTs\nbetweEN tHEM to MaKE lst1 A veCtOR oF only EveN nuMBerS.\nTherE is No LiMIT On tHe number oF EXChanged eleMeNTs betweEn lst1 and lst2.\nIf It iS possIBlE to exchange ELemEnTs bETweeN thE lst1 aND lst2 To make\nAll the eleMeNTS of lst1 To BE eVen, return \"yEs\".\noThErWiSe, return \"NO\".\nFor example:\nexchange({1, 2, 3, 4}, {1, 2, 3, 4}) => \"YES\"\nexchange({1, 2, 3, 4}, {1, 5, 3, 4}) => \"NO\"\nIt is assumed that the input vectors will be non-empty.\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring exchange(vector<int> lst1,vector<int> lst2){\n\tint i,j;\n\tvector<int> lst;\n\tfor(i=0;i<lst1.size();i++){\n\t\tfor(j=0;j<lst2.size();j++){\n\t\t\tif(lst1[i]==lst2[j]){\n\t\t\t\tlst.push_back(lst1[i]);\n\t\t\t\tlst.push_back(lst2[j]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(j==lst2.size()){\n\t\t\tlst.push_back(lst1[i]);\n\t\t}\n\t}\n\tif(lst.size()==lst1.size()){\n\t\treturn \"YES\";\n\t}\n\treturn \"NO\";\n}\nint main(){\n\tint n,i;\n\tvector<int> lst1,lst2;\n\twhile(scanf(\"%d\",&n)!=EOF){\n\t\tfor(i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&lst1[i]);\n\t\t}\n\t\tfor(i=0;i<n;i++){\n\t\t\tscanf(\"%d\",&lst2[i]);\n\t\t}\n\t\tprintf(\"%s\\n\",exchange(lst1,lst2).c_str());\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/111", "prompt": "/*\nGivEn a sTring RepResenTing a Space seParAted lOweRCaSe LettERs, return a Map\nof the letteR WIth tHe most repeTition and conTainiNg THe CoRReSpondIng count.\nIf seveRAl LETteRs HAVe tHe SAmE occuRreNce, return ALl oF them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n", "canonical_solution": "    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=0;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c d g\") , {{'a', 1}, {'b', 1}, {'c', 1}, {'d', 1}, {'g', 1}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"r t g\") , {{'r', 1},{'t', 1},{'g', 1}}));\n    assert (issame(histogram(\"\") , {}));\n    assert (issame(histogram(\"a\") , {{'a', 1}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(map<char,int> a,map<char,int> b){\n    if (a.size()!=b.size()) return false;\n    map <char,int>::iterator it;\n    for (it=a.begin();it!=a.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (b.find(w1)==b.end()) return false;\n        if (b[w1]!=w2) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(histogram(\"a b b a\") , {{'a',2},{'b', 2}}));\n    assert (issame(histogram(\"a b c a b\") , {{'a', 2},{'b', 2}}));\n    assert (issame(histogram(\"a b c\") , {{'a', 1},{'b', 1},{'c', 1}}));\n    assert (issame(histogram(\"b b b b a\") , {{'b', 4}}));\n    assert (issame(histogram(\"\") , {}));\n}\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring RepResenTing a Space seParAted lOweRCaSe LettERs, return a Map\nof the letteR WIth tHe most repeTition and conTainiNg THe CoRReSpondIng count.\nIf seveRAl LETteRs HAVe tHe SAmE occuRreNce, return ALl oF them.\n\nExample:\nhistogram(\"a b c\") == {{\"a\", 1}, {\"b\", 1}, {\"c\", 1}}\nhistogram(\"a b b a\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"a b c a b\") == {{\"a\", 2}, {\"b\", 2}}\nhistogram(\"b b b b a\") == {{\"b\", 4}}\nhistogram(\"\") == {}\n\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nmap<char,int> histogram(string test){\n    map<char,int> hist;\n    int count = 0;\n    for(int i = 0; i < test.length(); i++){\n        if(hist.find(test[i]) == hist.end()){\n            hist[test[i]] = 1;\n        }else{\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main(){\n    string test;\n    cin >> test;\n    map<char,int> hist = histogram(test);\n    for(map<char,int>::iterator it = hist.begin(); it!= hist.end(); it++){\n        cout << it->first << \" \" << it->second << endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/112", "prompt": "/*\nTasK\nWe aRe givEn tWo strIngs s aNd c, you haVe tO deleTed ALl ThE chaRActErs in s that are equAL To anY character in c\nthen Check if the reSult sTrINg Is PAlIndroMe.\nA striNG iS CAllEd PALinDrOMe If it rEadS thE SamE backWarD aS fORWArd.\nyou should return A VECtor contaiNiNG the resUlt stRinG and \"True\"/\"False\" fOR tHe cHEck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n", "canonical_solution": "    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"True\"};\n    return {n,\"False\"};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n    assert (issame(reverse_delete(\"dwik\",\"w\") , {\"dik\",\"False\"}));\n    assert (issame(reverse_delete(\"a\",\"a\") , {\"\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"v\") , {\"abcdedcba\",\"True\"}));\n    assert (issame(reverse_delete(\"vabba\",\"v\") , {\"abba\",\"True\"}));\n    assert (issame(reverse_delete(\"mamma\", \"mia\") , {\"\", \"True\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(reverse_delete(\"abcde\",\"ae\") , {\"bcd\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdef\", \"b\") , {\"acdef\",\"False\"}));\n    assert (issame(reverse_delete(\"abcdedcba\",\"ab\") , {\"cdedc\",\"True\"}));\n}\n", "entry_point": "reverse_delete", "seed": 0, "perturbed": true, "gc": "/*\nTasK\nWe aRe givEn tWo strIngs s aNd c, you haVe tO deleTed ALl ThE chaRActErs in s that are equAL To anY character in c\nthen Check if the reSult sTrINg Is PAlIndroMe.\nA striNG iS CAllEd PALinDrOMe If it rEadS thE SamE backWarD aS fORWArd.\nyou should return A VECtor contaiNiNG the resUlt stRinG and \"True\"/\"False\" fOR tHe cHEck.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be (\"bcd\",\"False\")\nFor s = \"abcdef\", c = \"b\"  the result should be (\"acdef\",\"False\")\nFor s = \"abcdedcba\", c = \"ab\", the result should be (\"cdedc\",\"True\")\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> reverse_delete(string s,string c){\n    vector<string> res;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    while(i < s.length()){\n        if(s[i] == c[k]){\n            i++;\n            k++;\n        }\n        else{\n            if(k == c.length()){\n                res.push_back(s.substr(j,i-j));\n                j = i+1;\n                k = 0;\n            }\n            else{\n                k++;\n            }\n        }\n    }\n    if(j < s.length()){\n        res.push_back(s.substr(j,s.length()-j));\n    }\n    return res;\n}\nint main(){\n    string s,c;\n    cin>>s>>c;\n    vector<string> res = reverse_delete(s,c);\n    for(int i = 0;i < res.size();i++){\n        cout<<res[i]<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 3, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 0, "run_status_he": 3, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/113", "prompt": "/*\nGivEn a vEctor Of sTringS, wherE each stRinG consIstS Of OnLy diGIts, return A vector.\nEach elEMEnt i oF the output Should be 'the nUmber Of ODd ElEMeNts in thE\nstring i OF tHE InpUt.\" WHEre AlL ThE i's shouLd bE rePLacEd by tHe nUmBeR\nOF Odd Digits in the i'th STRIng of the inPuT.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(s2);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n    assert (issame(odd_count({\"271\", \"137\", \"314\"}) , {\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\",\n        \"the number of odd elements 3n the str3ng 3 of the 3nput.\",\n        \"the number of odd elements 2n the str2ng 2 of the 2nput.\"\n    }));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(odd_count({\"1234567\"}) , {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}));\n    assert (issame(odd_count({\"3\",\"11111111\"}) , {\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"}));\n}\n", "entry_point": "odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of sTringS, wherE each stRinG consIstS Of OnLy diGIts, return A vector.\nEach elEMEnt i oF the output Should be 'the nUmber Of ODd ElEMeNts in thE\nstring i OF tHE InpUt.\" WHEre AlL ThE i's shouLd bE rePLacEd by tHe nUmBeR\nOF Odd Digits in the i'th STRIng of the inPuT.\n\n>>> odd_count({\"1234567\"})\n{'the number of odd elements 4n the str4ng 4 of the 4nput.\"}\n>>> odd_count({\"3\",\"11111111\"})\n{'the number of odd elements 1n the str1ng 1 of the 1nput.\",\n 'the number of odd elements 8n the str8ng 8 of the 8nput.\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\nvector<string> odd_count(vector<string> lst){\n    vector<string> res;\n    map<char,int> m;\n    for(int i=0;i<lst.size();i++){\n        for(int j=0;j<lst[i].size();j++){\n            m[lst[i][j]]++;\n        }\n    }\n    for(int i=0;i<lst.size();i++){\n        if(m[lst[i][0]]%2==1){\n            res.push_back(lst[i]);\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"3\");\n    lst.push_back(\"11111111\");\n    lst.push_back(\"1234567\");\n    lst.push_back(\"9876543\");\n    lst.push_back(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/114", "prompt": "/*\nGivEn a vEctor Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-vEctor\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n", "canonical_solution": "    long long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums[i];\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n    assert (minSubArraySum({-1, -2, -3, 2, -10}) == -14);\n    assert (minSubArraySum({-9999999999999999}) == -9999999999999999);\n    assert (minSubArraySum({0, 10, 20, 1000000}) == 0);\n    assert (minSubArraySum({-1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({100, -1, -2, -3, 10, -5}) == -6);\n    assert (minSubArraySum({10, 11, 13, 8, 3, 4}) == 3);\n    assert (minSubArraySum({100, -33, 32, -1, 0, -2}) == -33);\n    assert (minSubArraySum({-10}) == -10);\n    assert (minSubArraySum({7}) == 7);\n    assert (minSubArraySum({1, -1}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (minSubArraySum({2, 3, 4, 1, 2, 4}) == 1);\n    assert (minSubArraySum({-1, -2, -3}) == -6);\n}\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-vEctor\nof nums.\nExample\nminSubArraySum({2, 3, 4, 1, 2, 4}) == 1\nminSubArraySum({-1, -2, -3}) == -6\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nlong long minSubArraySum(vector<long long> nums){\n\tlong long sum = 0;\n\tlong long minSum = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tsum += nums[i];\n\t\tif(sum < minSum){\n\t\t\tminSum = sum;\n\t\t}\n\t\tif(sum == 0){\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn minSum;\n}\nint main(){\n\tvector<long long> nums;\n\tlong long sum = 0;\n\tlong long minSum = 0;\n\tlong long minSum2 = 0;\n\tlong long minSum3 = 0;\n\tlong long minSum4 = 0;\n\tlong long minSum5 = 0;\n\tlong long minSum6 = 0;\n\tlong long minSum7 = 0;\n\tlong long minSum8 = 0;\n\tlong long minSum9 = 0;\n\tlong long minSum10 = 0;\n\tlong long minSum11 = 0;\n\tlong long minSum12 = 0;\n\tlong long minSum13 = 0;\n\tlong long minSum14 = 0;\n\tlong long minSum15 = 0;\n\tlong long minSum16 = 0;\n\tlong long minSum17 = 0;\n\tlong long minSum18 = 0;\n\tlong long minSum19 = 0;\n\tlong long minSum20 = 0;\n\tlong long minSum21 = 0;\n\tlong long minSum22 = 0;\n\tlong long minSum23 = 0;\n\tlong long minSum24 = 0;\n\tlong long minSum25 = 0;\n\tlong long minSum26 = 0;\n\tlong long minSum27 = 0;\n\tlong long minSum28 = 0;\n\tlong long minSum29 = 0;\n\tlong long minSum30 = 0;\n\tlong long minSum31 = 0;\n\tlong long minSum32 = 0;\n\tlong long minSum33 = 0;\n\tlong long minSum34 = 0;\n\tlong long minSum35 = 0;\n\tlong long minSum36 = 0;\n\tlong long minSum37 = 0;\n\tlong long minSum38 = 0;\n\tlong long minSum39 = 0;\n\tlong long minSum40 = 0;\n\tlong long minSum41 = 0;\n\tlong long minSum42 = 0;\n\tlong long minSum43 = 0;\n\tlong long minSum44 = 0;\n\tlong long minSum45 = 0;\n\tlong long minSum46 = 0;\n\tlong long minSum47 = 0;\n\tlong long minSum48 = 0;\n\tlong long minSum49 = 0;\n\tlong long minSum50 = 0;\n\tlong long minSum51 = 0;\n\tlong long minSum52 = 0;\n\tlong long minSum53 = 0;\n\tlong long minSum54 = 0;\n\tlong long minSum55 = 0;\n\tlong long minSum56 = 0;\n\tlong long minSum57 = 0;\n\tlong long minSum58 = 0;\n\tlong long minSum59 = 0;\n\tlong long minSum60 = 0;\n\tlong long minSum61 = 0;\n\tlong long minSum62 = 0;\n\tlong long minSum63 = 0;\n\tlong long minSum64 = 0;\n\tlong long minSum65 = 0;\n\tlong long minSum66 = 0;\n\tlong long minSum67 = 0;\n\tlong long minSum68 = 0;\n\tlong long minSum69 = 0;\n\tlong long minSum70 = 0;\n\tlong long minSum71 = 0;\n\tlong long minSum72 = 0;\n\tlong long minSum73 = 0;\n\tlong long minSum74 = 0;\n\tlong long minSum75 = 0;\n\tlong long minSum76 = 0;\n\tlong long minSum77 = 0;\n\tlong long minSum78 = 0;\n\tlong long minSum79 = 0;\n\tlong long minSum80 = 0;\n\tlong long minSum81 = 0;\n\tlong long minSum82 = 0;\n\tlong long minSum83 = 0;\n\tlong long minSum84 = 0;\n\tlong long minSum85 = 0;\n\tlong long minSum86 = 0;\n\tlong long minSum87 = 0;\n\tlong long minSum88 = 0;\n\tlong long minSum89 = 0;\n\tlong long minSum90 = 0;\n\tlong long minSum91 = 0;\n\tlong long minSum92 = 0;\n\tlong long minSum93 = 0;\n\tlong long minSum94 = 0;\n\tlong long minSum95 = 0;\n\tlong long minSum96 = 0;\n\tlong long minSum97 = 0;\n\tlong long minSum98 = 0;\n\tlong long minSum99 = 0;\n\tlong long minSum100 = 0;\n\tlong long minSum101 = 0;\n\tlong long minSum102 = 0;\n\tlong long minSum103 = 0;\n\tlong long minSum104 = 0;\n\tlong long minSum105 = 0;\n\tlong long minSum106 = 0;\n\tlong long minSum107 = 0;\n\tlong long minSum108 = 0;\n\tlong long minSum109 = 0;\n\tlong long minSum110 = 0;\n\tlong long minSum111 = 0;\n\tlong long minSum112 = 0;\n\tlong long minSum113 = 0;\n\tlong long minSum114 = 0;\n\tlong long minSum115 = 0;\n\tlong long minSum116 = 0;\n\tlong long minSum117 = 0;\n\tlong long minSum118 = 0;\n\tlong long minSum119 = 0;\n\tlong long minSum120 = 0;\n\tlong long minSum121 = 0;\n\tlong long minSum122 = 0;\n\tlong long minSum123 = 0;\n\tlong long minSum124 = 0;\n\tlong long minSum125 = 0;\n\tlong long minSum126 = 0;\n\tlong long minSum127 = 0;\n\tlong long minSum128 = 0;\n\tlong long minSum129 = 0;\n\tlong long minSum130 = 0;", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/115", "prompt": "/*\nYou Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\nand each 1 in a row REPresEnts a singlE unit of water.\neach wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \nand All BuCkETS HavE the same capacity.\nYour tASK Is to use the BuCKets to eMpty tHe wElls.\nOUTpUt tHE nuMbEr oF TimeS yoU nEED to lowEr the buckEtS.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=(sum-1)/capacity+1;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 2) == 4);\n    assert (max_fill({{1,1,1,1}, {1,1,1,1}}, 9) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (max_fill({{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}, 1) == 6);\n    assert (max_fill({{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}, 2) == 5);\n    assert (max_fill({{0,0,0}, {0,0,0}}, 5) == 0);\n}\n", "entry_point": "max_fill", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\nand each 1 in a row REPresEnts a singlE unit of water.\neach wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \nand All BuCkETS HavE the same capacity.\nYour tASK Is to use the BuCKets to eMpty tHe wElls.\nOUTpUt tHE nuMbEr oF TimeS yoU nEED to lowEr the buckEtS.\n\nExample 1:\n    Input: \n        grid : {{0,0,1,0}, {0,1,0,0}, {1,1,1,1}}\n        bucket_capacity : 1\n    Output: 6\n\nExample 2:\n    Input: \n        grid : {{0,0,1,1}, {0,0,0,0}, {1,1,1,1}, {0,1,1,1}}\n        bucket_capacity : 2\n    Output: 5\n\nExample 3:\n    Input: \n        grid : {{0,0,0}, {0,0,0}}\n        bucket_capacity : 5\n    Output: 0\n\nConstraints:\n    * all wells have the same length\n    * 1 <= grid.length <= 10^2\n    * 1 <= grid{:,1}.length <= 10^2\n    * grid{i}{j} -> 0 | 1\n    * 1 <= capacity <= 10\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint max_fill(vector<vector<int>> grid,int capacity){\n    int i,j,k,m,n,max_fill=0;\n    for(i=0;i<grid.size();i++){\n        for(j=0;j<grid[i].size();j++){\n            if(grid[i][j]==1){\n                for(k=0;k<capacity;k++){\n                    if(grid[i][j+k]==0){\n                        grid[i][j+k]=1;\n                        m=max_fill(grid,capacity);\n                        grid[i][j+k]=0;\n                        max_fill=max(max_fill,m);\n                    }\n                }\n            }\n        }\n    }\n    return max_fill;\n}\nint main(){\n    int t,n,m,i,j,k,capacity;\n    vector<vector<int>> grid;\n    scanf(\"%d\",&t);\n    while(t--){\n        scanf(\"%d %d\",&n,&m);\n        grid.clear();\n        for(i=0;i<n;i++){\n            grid.push_back(vector<int>(m));\n            for(j=0;j<m;j++){\n                scanf(\"%d\",&grid[i][j]);\n            }\n        }\n        scanf(\"%d\",&capacity);\n        printf(\"%d\\n\",max_fill(grid,capacity));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/116", "prompt": "/*\nIn tHis KAta, yoU haVe to sOrt a vEctor of Non-NegatIve INtEgErs aCCorDing to\nnumber oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\nFor sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\nIT must Be iMpLeMENTed Like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n", "canonical_solution": "    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;\n        m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;\n    }\n    return arr;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({2,5,77,4,5,3,5,7,2,3,4}) , {2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77}));\n    assert (issame(sort_array({3,6,44,12,32,5}) , {32, 3, 5, 6, 12, 44}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n    assert (issame(sort_array({2,4,8,16,32}) , {2, 4, 8, 16, 32}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({1,5,2,3,4}) , {1, 2, 4, 3, 5}));\n    assert (issame(sort_array({-2,-3,-4,-5,-6}) , {-4, -2, -6, -5, -3}));\n    assert (issame(sort_array({1,0,2,3,4}) , {0, 1, 2, 4, 3}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nIn tHis KAta, yoU haVe to sOrt a vEctor of Non-NegatIve INtEgErs aCCorDing to\nnumber oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\nFor sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\nIT must Be iMpLeMENTed Like this:\n>>> sort_vector({1, 5, 2, 3, 4}) == {1, 2, 3, 4, 5}\n>>> sort_vector({-2, -3, -4, -5, -6}) == {-6, -5, -4, -3, -2}\n>>> sort_vector({1, 0, 2, 3, 4}) == {0, 1, 2, 3, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> arr){\n\tint i, j, k;\n\tint n = arr.size();\n\tvector<int> sorted_arr(n);\n\tfor(i = 0; i < n; i++){\n\t\tsorted_arr[i] = arr[i];\n\t}\n\tfor(i = 0; i < n-1; i++){\n\t\tfor(j = i+1; j < n; j++){\n\t\t\tif(sorted_arr[i] > sorted_arr[j]){\n\t\t\t\tk = sorted_arr[i];\n\t\t\t\tsorted_arr[i] = sorted_arr[j];\n\t\t\t\tsorted_arr[j] = k;\n\t\t\t}\n\t\t}\n\t}\n\treturn sorted_arr;\n}\nint main(){\n\tint n, i;\n\tvector<int> arr;\n\tscanf(\"%d\", &n);\n\tfor(i = 0; i < n; i++){\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tarr.push_back(x);\n\t}\n\tvector<int> sorted_arr = sort_array(arr);\n\tfor(i = 0; i < n; i++){\n\t\tprintf(\"%d \", sorted_arr[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/117", "prompt": "/*\nGivEn a sTring s And A natuRal nuMber n, you HavE been TasKEd To ImplEMenT \na function thaT REturNs a vector oF all words froM striNg s THaT cONtAin exActly \nn coNSoNANts, in OrDER thEsE WoRds apPeaR in thE StrIng s.\nIf thE stRiNg s IS EMptY then the fUNCTion should return An EMpty vecTor.\nNoTe: yOu may ASsUme THe iNpUt sTRing ConTaINS only lEtters and SpACEs.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())\n                numc+=1;\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n    assert (issame(select_words(\"\", 4) , {}));\n    assert (issame(select_words(\"a b c d e f\", 1) , {\"b\", \"c\", \"d\", \"f\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(select_words(\"Mary had a little lamb\", 4) , {\"little\"}   ));\n    assert (issame(select_words(\"Mary had a little lamb\", 3) , {\"Mary\", \"lamb\"} ));\n    assert (issame(select_words(\"simple white space\", 2) , {}     ));\n    assert (issame(select_words(\"Hello world\", 4) , {\"world\"}  ));\n    assert (issame(select_words(\"Uncle sam\", 3) , {\"Uncle\"}));\n}\n", "entry_point": "select_words", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring s And A natuRal nuMber n, you HavE been TasKEd To ImplEMenT \na function thaT REturNs a vector oF all words froM striNg s THaT cONtAin exActly \nn coNSoNANts, in OrDER thEsE WoRds apPeaR in thE StrIng s.\nIf thE stRiNg s IS EMptY then the fUNCTion should return An EMpty vecTor.\nNoTe: yOu may ASsUme THe iNpUt sTRing ConTaINS only lEtters and SpACEs.\nExamples:\nselect_words(\"Mary had a little lamb\", 4) ==> {\"little\"}\nselect_words(\"Mary had a little lamb\", 3) ==> {\"Mary\", \"lamb\"}\nselect_words('simple white space\", 2) ==> {}\nselect_words(\"Hello world\", 4) ==> {\"world\"}\nselect_words(\"Uncle sam\", 3) ==> {\"Uncle\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> select_words(string s,int n){\n\tvector<string> v;\n\tstring word;\n\tint i=0;\n\twhile(i<s.length()){\n\t\tif(s[i]==' '){\n\t\t\tif(word.length()>0){\n\t\t\t\tv.push_back(word);\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tword+=s[i];\n\t\ti++;\n\t}\n\tif(word.length()>0){\n\t\tv.push_back(word);\n\t}\n\tif(v.size()<n){\n\t\treturn v;\n\t}\n\telse{\n\t\tsort(v.begin(),v.end());\n\t\treturn v.substr(0,n);\n\t}\n}\nint main(){\n\tstring s;\n\tint n;\n\twhile(cin>>s>>n){\n\t\tvector<string> v=select_words(s,n);\n\t\tfor(int i=0;i<v.size();i++){\n\t\t\tcout<<v[i]<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/118", "prompt": "/*\nYou Are gIven a word. youR task Is to find tHe closeSt vOwel tHat STaNdS betWEen \nTwo consonants FROm thE right side Of the word (case senSitivE).\n\nVOWeLs in THe BeginNing and ENdING doEsN'T CouNt. rEtUrn emPty StrINg iF you dIdn'T\nfInD ANY voWel met the ABOVe conditioN. \n\nYOU may assUme thAt tHe givEN sTriNG coNtAinS englIsh LeTTEr only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"full\") == \"u\");\n    assert (get_closest_vowel(\"easy\") == \"\");\n    assert (get_closest_vowel(\"eAsy\") == \"\");\n    assert (get_closest_vowel(\"ali\") == \"\");\n    assert (get_closest_vowel(\"bad\") == \"a\");\n    assert (get_closest_vowel(\"most\") ==\"o\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"ba\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n    assert (get_closest_vowel(\"anime\") == \"i\");\n    assert (get_closest_vowel(\"Asia\") == \"\");\n    assert (get_closest_vowel(\"Above\") == \"o\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_closest_vowel(\"yogurt\") == \"u\");\n    assert (get_closest_vowel(\"FULL\") == \"U\");\n    assert (get_closest_vowel(\"ab\") == \"\");\n    assert (get_closest_vowel(\"quick\") == \"\");\n}\n", "entry_point": "get_closest_vowel", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a word. youR task Is to find tHe closeSt vOwel tHat STaNdS betWEen \nTwo consonants FROm thE right side Of the word (case senSitivE).\n\nVOWeLs in THe BeginNing and ENdING doEsN'T CouNt. rEtUrn emPty StrINg iF you dIdn'T\nfInD ANY voWel met the ABOVe conditioN. \n\nYOU may assUme thAt tHe givEN sTriNG coNtAinS englIsh LeTTEr only.\n\nExample:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring get_closest_vowel(string word){\n\tstring vowel = \"\";\n\tfor(int i = 0; i < word.length(); i++){\n\t\tif(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y'){\n\t\t\tvowel = word[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn vowel;\n}\nint main(){\n\tstring word;\n\twhile(cin >> word){\n\t\tstring vowel = get_closest_vowel(word);\n\t\tcout << vowel << endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/119", "prompt": "/*\nYou Are gIven a VecTor of Two stRings, boTh sTringS coNSiSt Of opEN\npaRentheses '(' or clOSE parEntheses ')' onLy.\nYour job is tO checK iF It Is POsSible To concaTEnATE thE tWO StrInGS in\nsome oRder, tHat The REsuLting StrInG wILL Be gOod.\nA strinG s IS considereD tO Be good iF and oNly If all PArEntHEseS in S\nAre BAlanCed. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n", "canonical_solution": "    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (can==true) return \"Yes\";\n    return \"No\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n    assert (match_parens({\"(()(())\", \"())())\"}) == \"No\");\n    assert (match_parens({\")())\", \"(()()(\"}) == \"Yes\");\n    assert (match_parens({\"(())))\", \"(()())((\"}) == \"Yes\");\n    assert (match_parens({\"()\", \"())\"}) == \"No\");\n    assert (match_parens({\"(()(\", \"()))()\"}) == \"Yes\");\n    assert (match_parens({\"((((\", \"((())\"}) == \"No\");\n    assert (match_parens({\")(()\", \"(()(\"}) == \"No\");\n    assert (match_parens({\")(\", \")(\"}) == \"No\");\n    assert (match_parens({\"(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \"(\"}) == \"Yes\" );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (match_parens({\"()(\", \")\"}) == \"Yes\");\n    assert (match_parens({\")\", \")\"}) == \"No\");\n}\n", "entry_point": "match_parens", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a VecTor of Two stRings, boTh sTringS coNSiSt Of opEN\npaRentheses '(' or clOSE parEntheses ')' onLy.\nYour job is tO checK iF It Is POsSible To concaTEnATE thE tWO StrInGS in\nsome oRder, tHat The REsuLting StrInG wILL Be gOod.\nA strinG s IS considereD tO Be good iF and oNly If all PArEntHEseS in S\nAre BAlanCed. For example: the string \"(())()\" is good, while the string\n\"())\" is not.\nReturn \"Yes\" if there's a way to make a good string, and return \"No\" otherwise.\n\nExamples:\nmatch_parens({\"()(\", \")\"}) == \"Yes\"\nmatch_parens({\")\", \")\"}) == \"No\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring match_parens(vector<string> lst){\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int len = lst.size();\n    while(i < len && j < len){\n        if(lst[i] == \"(\" && lst[j] == \")\"){\n            k++;\n            i++;\n            j++;\n        }else if(lst[i] == \"(\" && lst[j] == \")\"){\n            return \"No\";\n        }else if(lst[i] == \"(\" && lst[j] == \")\"){\n            return \"No\";\n        }else if(lst[i] == \")\" && lst[j] == \")\"){\n            k--;\n            i++;\n            j++;\n        }else if(lst[i] == \")\" && lst[j] == \")\"){\n            return \"No\";\n        }else{\n            i++;\n            j++;\n        }\n    }\n    if(k == 0){\n        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\nint main(){\n    vector<string> lst;\n    lst.push_back(\"(\");\n    lst.push_back(\")\");\n    lst.push_back(\"()\");\n    lst.push_back(\"()()\");\n    lst.push_back(\"()()()\");\n    lst.push_back(\"()()()()\");\n    lst.push_back(\"()()()()()\");\n    lst.push_back(\"()()()()()()\");\n    lst.push_back(\"()()()()()()()\");\n    lst.push_back(\"()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");\n    lst.push_back(\"()()()()()()()()()()()()()()()()()()()()\");", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/12", "prompt": "/*\nOut Of veCtor oF strings, return thE longest one. REturn The firsT onE in case Of mULtIpLe\nstRIngS of the same lenGTH. RetUrn None in casE the input vecTor is EmPTy.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n", "canonical_solution": "    string out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"x\", \"y\", \"z\"}) == \"x\");\n    assert (longest({\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"}) == \"zzzz\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (longest({}) == \"\");\n    assert (longest({\"a\", \"b\", \"c\"}) == \"a\");\n    assert (longest({\"a\", \"bb\", \"ccc\"}) == \"ccc\");\n}\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/*\nOut Of veCtor oF strings, return thE longest one. REturn The firsT onE in case Of mULtIpLe\nstRIngS of the same lenGTH. RetUrn None in casE the input vecTor is EmPTy.\n>>> longest({})\n\n>>> longest({\"a\", \"b\", \"c\"})\n\"a\"\n>>> longest({\"a\", \"bb\", \"ccc\"})\n\"ccc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring longest(vector<string> strings){\n    if(strings.empty()){\n        return \"\";\n    }\n    string longest = strings[0];\n    for(int i = 1; i < strings.size(); i++){\n        if(strings[i].length() > longest.length()){\n            longest = strings[i];\n        }\n    }\n    return longest;\n}\n\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"bb\");\n    strings.push_back(\"ccc\");\n    strings.push_back(\"dddd\");\n    strings.push_back(\"eeee\");\n    strings.push_back(\"ffff\");\n    strings.push_back(\"gggg\");\n    strings.push_back(\"hhhh\");\n    strings.push_back(\"iiii\");\n    strings.push_back(\"jjjj\");\n    strings.push_back(\"kkkk\");\n    strings.push_back(\"llll\");\n    strings.push_back(\"mmmm\");\n    strings.push_back(\"nnnn\");\n    strings.push_back(\"oooo\");\n    strings.push_back(\"pppp\");\n    strings.push_back(\"qqqq\");\n    strings.push_back(\"rrrr\");\n    strings.push_back(\"ssss\");\n    strings.push_back(\"tttt\");\n    strings.push_back(\"uuuu\");\n    strings.push_back(\"vvvv\");\n    strings.push_back(\"wwww\");\n    strings.push_back(\"xxxx\");\n    strings.push_back(\"yyyy\");\n    strings.push_back(\"zzzz\");\n    strings.push_back(\"aaaa\");\n    strings.push_back(\"bbbb\");\n    strings.push_back(\"cccc\");\n    strings.push_back(\"dddd\");\n    strings.push_back(\"eeee\");\n    strings.push_back(\"ffff\");\n    strings.push_back(\"gggg\");\n    strings.push_back(\"hhhh\");\n    strings.push_back(\"iiii\");\n    strings.push_back(\"jjjj\");\n    strings.push_back(\"kkkk\");\n    strings.push_back(\"llll\");\n    strings.push_back(\"mmmm\");\n    strings.push_back(\"nnnn\");\n    strings.push_back(\"oooo\");\n    strings.push_back(\"pppp\");\n    strings.push_back(\"qqqq\");\n    strings.push_back(\"rrrr\");\n    strings.push_back(\"ssss\");\n    strings.push_back(\"tttt\");\n    strings.push_back(\"uuuu\");\n    strings.push_back(\"vvvv\");\n    strings.push_back(\"wwww\");\n    strings.push_back(\"xxxx\");\n    strings.push_back(\"yyyy\");\n    strings.push_back(\"zzzz\");\n    strings.push_back(\"aaaa\");\n    strings.push_back(\"bbbb\");\n    strings.push_back(\"cccc\");\n    strings.push_back(\"dddd\");\n    strings.push_back(\"eeee\");\n    strings.push_back(\"ffff\");\n    strings.push_back(\"gggg\");\n    strings.push_back(\"hhhh\");\n    strings.push_back(\"iiii\");\n    strings.push_back(\"jjjj\");\n    strings.push_back(\"kkkk\");\n    strings.push_back(\"llll\");\n    strings.push_back(\"mmmm\");\n    strings.push_back(\"nnnn\");\n    strings.push_back(\"oooo\");\n    strings.push_back(\"pppp\");\n    strings.push_back(\"qqqq\");\n    strings.push_back(\"rrrr\");\n    strings.push_back(\"ssss\");\n    strings.push_back(\"tttt\");\n    strings.push_back(\"uuuu\");\n    strings.push_back(\"vvvv\");\n    strings.push_back(\"wwww\");\n    strings.push_back(\"xxxx\");\n    strings.push_back(\"yyyy\");\n    strings.push_back(\"zzzz\");\n    strings.push_back(\"aaaa\");\n    strings.push_back(\"bbbb\");\n    strings.push_back(\"cccc\");\n    strings.push_back(\"dddd\");\n    strings.push_back(\"eeee\");\n    strings.push_back(\"ffff\");\n    strings.push_back(\"gggg\");\n    strings.push_back(\"hhhh\");\n    strings.push_back(\"iiii\");\n    strings.push_back(\"jjjj\");\n    strings.push_back(\"kkkk\");\n    strings.push_back(\"llll\");\n    strings.push_back(\"mmmm\");\n    strings.push_back(\"nnnn\");\n    strings.push_back(\"oooo\");\n    strings.push_back(\"pppp\");\n    strings.push_back(\"qqqq\");\n    strings.push_back(\"rrrr\");\n    strings.push_back(\"ssss\");\n    strings.push_back(\"tttt\");\n    strings.push_back(\"uuuu\");\n    strings.push_back(\"vvvv\");\n    strings.push_back(\"wwww\");\n    strings.push_back(\"xxxx\");\n    strings.push_back(\"yyyy\");\n    strings.push_back(\"zzzz\");\n    strings.push_back(\"aaaa\");\n    strings.push_back(\"bbbb\");\n    strings.push_back(\"cccc\");\n    strings.push_back(\"dddd\");\n    strings.push_back(\"eeee\");\n    strings.push_back(\"ffff\");\n    strings.push_back(\"gggg\");\n    strings.push_back(\"hhhh\");\n    strings.push_back(\"iiii\");\n    strings.push_back(\"jjjj\");\n    strings.push_back(\"kkkk\");\n    strings.push_back(\"llll\");\n    strings.push_back(\"mmmm\");\n    strings.push_back(\"nnnn\");\n    strings.push_back(\"oooo\");\n    strings.push_back(\"pppp\");\n    strings.push_back(\"qqqq\");\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/120", "prompt": "/*\nGivEn a vEctor arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd VectOR \nof Length k with the maximum k NUMberS in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n", "canonical_solution": "    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n    assert (issame(maximum({123, -123, 20, 0 , 1, 2, -3}, 3) , {2, 20, 123}));\n    assert (issame(maximum({-123, 20, 0 , 1, 2, -3}, 4) , {0, 1, 2, 20}));\n    assert (issame(maximum({5, 15, 0, 3, -13, -8, 0}, 7) , {-13, -8, 0, 0, 3, 5, 15}));\n    assert (issame(maximum({-1, 0, 2, 5, 3, -10}, 2) , {3, 5}));\n    assert (issame(maximum({1, 0, 5, -7}, 1) , {5}));\n    assert (issame(maximum({4, -4}, 2) , {-4, 4}));\n    assert (issame(maximum({-10, 10}, 2) , {-10, 10}));\n    assert (issame(maximum({1, 2, 3, -23, 243, -400, 0}, 0) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(maximum({-3, -4, 5}, 3) , {-4, -3, 5}));\n    assert (issame(maximum({4, -4, 4}, 2) , {4, 4}));\n    assert (issame(maximum({-3, 2, 1, 2, -1, -2, 1}, 1) , {2}));\n}\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd VectOR \nof Length k with the maximum k NUMberS in arr.\n\nExample 1:\n\n    Input: arr = {-3, -4, 5}, k = 3\n    Output: {-4, -3, 5}\n\nExample 2:\n\n    Input: arr = {4, -4, 4}, k = 2\n    Output: {4, 4}\n\nExample 3:\n\n    Input: arr = {-3, 2, 1, 2, -1, -2, 1}, k = 1\n    Output: {2}\n\nNote:\n    1. The length of the vector will be in the range of {1, 1000}.\n    2. The elements in the vector will be in the range of {-1000, 1000}.\n    3. 0 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> maximum(vector<int> arr,int k){\n    vector<int> res;\n    int i = 0;\n    while(i < k){\n        res.push_back(arr[i]);\n        i++;\n    }\n    return res;\n}\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    vector<int> arr(n);\n    for(int i = 0;i < n;i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    vector<int> res = maximum(arr,k);\n    for(int i = 0;i < k;i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/121", "prompt": "/*\nGivEn a nOn-empTy vEctor Of intEgers, return thE sum of All of The ODd ElEmenTS thAt are in even posiTIOns.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n    assert (solutions({5, 9}) == 5);\n    assert (solutions({2, 4, 8}) == 0);\n    assert (solutions({30, 13, 23, 32}) == 23);\n    assert (solutions({3, 13, 2, 9}) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solutions({5, 8, 7, 1})    == 12);\n    assert (solutions({3, 3, 3, 3, 3}) == 9);\n    assert (solutions({30, 13, 24, 321}) == 0);\n}\n", "entry_point": "solutions", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a nOn-empTy vEctor Of intEgers, return thE sum of All of The ODd ElEmenTS thAt are in even posiTIOns.\n\n\nExamples\nsolution({5, 8, 7, 1}) ==> 12\nsolution({3, 3, 3, 3, 3}) ==> 9\nsolution({30, 13, 24, 321}) ==>0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint solutions(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> lst;\n\tfor(int i = 0; i < n; i++){\n\t\tint x;\n\t\tscanf(\"%d\", &x);\n\t\tlst.push_back(x);\n\t}\n\tprintf(\"%d\\n\", solutions(lst));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/122", "prompt": "/*\nGivEn a nOn-empTy vEctor Of intEgers arr anD an IntegEr k, return\nthe sum oF ThE eLemeNTs wIth at most two dIGIts fRom the firsT k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({1,-2,-3,41,57,76,87,88,99}, 3) == -4);\n    assert (add_elements({111,121,3,4000,5,6}, 2) == 0);\n    assert (add_elements({11,21,3,90,5,6,7,8,9}, 4) == 125);\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n    assert (add_elements({1}, 1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add_elements({111,21,3,4000,5,6,7,8,9}, 4) == 24);\n}\n", "entry_point": "add_elements", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a nOn-empTy vEctor Of intEgers arr anD an IntegEr k, return\nthe sum oF ThE eLemeNTs wIth at most two dIGIts fRom the firsT k elements of arr.\n\nExample:\n\n    Input: arr = {111,21,3,4000,5,6,7,8,9}, k = 4\n    Output: 24 # sum of 21 + 3\n\nConstraints:\n    1. 1 <= len(arr) <= 100\n    2. 1 <= k <= len(arr)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add_elements(vector<int> arr,int k){\n    int sum = 0;\n    for(int i = 0; i < k; i++){\n        sum += arr[i];\n    }\n    return sum;\n}\nint main(){\n    int n,k;\n    scanf(\"%d %d\",&n,&k);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\",&arr[i]);\n    }\n    int sum = add_elements(arr,k);\n    printf(\"%d\\n\",sum);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/123", "prompt": "/*\nGivEn a pOsitiVe iNtegeR n, return a sorTed vectOr tHat haS thE OdD nUmbeRS in coLlatz sequence.\n\ntHE ColLatz conjecTure is a conjeCture in MaTHeMaTIcS that ConcernS A sEQUenCe DEFinEd\nAS fOllowS: stArt WIth Any poSitIvE iNTEGer n. then each tERM Is obtained FrOM the \npreVious TerM as foLLoWs: iF The PrEviOUs teRm iS eVEN, the neXt term is oNe HALf oF \ntHE pRevIoUS TeRm. if The prEvioUs term is ODd, THe next term Is 3 tiMes the PrEViOUS\nteRm pLus 1. The ConjEcTUre iS THat no mATtER WHaT VAlue of n, the sequEnce will alwAYs REacH 1.\n\nNoTe: \n    1. cOlLAtz(1) is {1}.\n    2. rEturnEd VEctOr Sorted in inCReasIng order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n", "canonical_solution": "    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*3+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(14) , {1, 5, 7, 11, 13, 17}));\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n    assert (issame(get_odd_collatz(12) , {1, 3, 5}));\n    assert (issame(get_odd_collatz(1) , {1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_odd_collatz(5) , {1, 5}));\n}\n", "entry_point": "get_odd_collatz", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR n, return a sorTed vectOr tHat haS thE OdD nUmbeRS in coLlatz sequence.\n\ntHE ColLatz conjecTure is a conjeCture in MaTHeMaTIcS that ConcernS A sEQUenCe DEFinEd\nAS fOllowS: stArt WIth Any poSitIvE iNTEGer n. then each tERM Is obtained FrOM the \npreVious TerM as foLLoWs: iF The PrEviOUs teRm iS eVEN, the neXt term is oNe HALf oF \ntHE pRevIoUS TeRm. if The prEvioUs term is ODd, THe next term Is 3 tiMes the PrEViOUS\nteRm pLus 1. The ConjEcTUre iS THat no mATtER WHaT VAlue of n, the sequEnce will alwAYs REacH 1.\n\nNoTe: \n    1. cOlLAtz(1) is {1}.\n    2. rEturnEd VEctOr Sorted in inCReasIng order.\n\nFor example:\nget_odd_collatz(5) returns {1, 5} // The collatz sequence for 5 is {5, 16, 8, 4, 2, 1}, so the odd numbers are only 1, and 5.\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> get_odd_collatz(int n){\n\tvector<int> odd_collatz;\n\tint i = n;\n\twhile(i > 1){\n\t\tif(i % 2 == 1){\n\t\t\todd_collatz.push_back(i);\n\t\t\ti = i / 2;\n\t\t}\n\t\telse{\n\t\t\ti = 3 * i + 1;\n\t\t}\n\t}\n\treturn odd_collatz;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> odd_collatz = get_odd_collatz(n);\n\tfor(int i = 0; i < odd_collatz.size(); i++){\n\t\tprintf(\"%d \", odd_collatz[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/124", "prompt": "/*\nYou Have To wriTe a FunctIon whIch valiDatEs a giVen date STrInG and\nREtuRns true if the date iS VAlid Otherwise fAlse.\nThe date is valId if aLl OF tHe FOlLowinG rules aRE sATIsfIeD:\n1. tHe date sTrINg Is not EmpTy.\n2. THE nuMber oF daYs Is NOT LesS than 1 or hiGHER than 31 days fOr MOnths 1,3,5,7,8,10,12. AnD the nUmbEr of dAYs Is nOT leSs ThaN 1 Or hiGheR tHAN 30 days fOr months 4,6,9,11. ANd, THE nuMbER oF daYs IS NoT lEsS than 1 Or hiGher than 29 FOr THe month 2.\n3. The MontHs shouLd NOt BE LesS thAn 1 or hiGher ThAN 12.\n4. The date SHOuld be in THe FORMaT: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n", "canonical_solution": "    int mm,dd,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    mm=atoi(date.substr(0,2).c_str());\n    dd=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;\n    if (dd==30 and mm==2) return false;\n    return true;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"01-01-2007\") == true);\n    assert (valid_date(\"03-32-2011\") == false);\n    assert (valid_date(\"\") == false);\n    assert (valid_date(\"04-31-3000\") == false);\n    assert (valid_date(\"06-06-2005\") == true);\n    assert (valid_date(\"21-31-2000\") == false);\n    assert (valid_date(\"04-12-2003\") == true);\n    assert (valid_date(\"04122003\") == false);\n    assert (valid_date(\"20030412\") == false);\n    assert (valid_date(\"2003-04\") == false);\n    assert (valid_date(\"2003-04-12\") == false);\n    assert (valid_date(\"04-2003\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (valid_date(\"03-11-2000\") == true);\n    assert (valid_date(\"15-01-2012\") == false);\n    assert (valid_date(\"04-0-2040\") == false);\n    assert (valid_date(\"06-04-2020\") == true);\n    assert (valid_date(\"06/04/2020\") == false);\n}\n", "entry_point": "valid_date", "seed": 0, "perturbed": true, "gc": "/*\nYou Have To wriTe a FunctIon whIch valiDatEs a giVen date STrInG and\nREtuRns true if the date iS VAlid Otherwise fAlse.\nThe date is valId if aLl OF tHe FOlLowinG rules aRE sATIsfIeD:\n1. tHe date sTrINg Is not EmpTy.\n2. THE nuMber oF daYs Is NOT LesS than 1 or hiGHER than 31 days fOr MOnths 1,3,5,7,8,10,12. AnD the nUmbEr of dAYs Is nOT leSs ThaN 1 Or hiGheR tHAN 30 days fOr months 4,6,9,11. ANd, THE nuMbER oF daYs IS NoT lEsS than 1 Or hiGher than 29 FOr THe month 2.\n3. The MontHs shouLd NOt BE LesS thAn 1 or hiGher ThAN 12.\n4. The date SHOuld be in THe FORMaT: mm-dd-yyyy\n\nfor example: \nvalid_date(\"03-11-2000\") => true\n\nvalid_date(\"15-01-2012\") => false\n\nvalid_date(\"04-0-2040\") => false\n\nvalid_date(\"06-04-2020\") => true\n\nvalid_date(\"06/04/2020\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool valid_date(string date){\n\tint month,day,year;\n\tint i,j,k;\n\tint flag=0;\n\tint flag1=0;\n\tint flag2=0;\n\tint flag3=0;\n\tint flag4=0;\n\tint flag5=0;\n\tint flag6=0;\n\tint flag7=0;\n\tint flag8=0;\n\tint flag9=0;\n\tint flag10=0;\n\tint flag11=0;\n\tint flag12=0;\n\tint flag13=0;\n\tint flag14=0;\n\tint flag15=0;\n\tint flag16=0;\n\tint flag17=0;\n\tint flag18=0;\n\tint flag19=0;\n\tint flag20=0;\n\tint flag21=0;\n\tint flag22=0;\n\tint flag23=0;\n\tint flag24=0;\n\tint flag25=0;\n\tint flag26=0;\n\tint flag27=0;\n\tint flag28=0;\n\tint flag29=0;\n\tint flag30=0;\n\tint flag31=0;\n\tint flag32=0;\n\tint flag33=0;\n\tint flag34=0;\n\tint flag35=0;\n\tint flag36=0;\n\tint flag37=0;\n\tint flag38=0;\n\tint flag39=0;\n\tint flag40=0;\n\tint flag41=0;\n\tint flag42=0;\n\tint flag43=0;\n\tint flag44=0;\n\tint flag45=0;\n\tint flag46=0;\n\tint flag47=0;\n\tint flag48=0;\n\tint flag49=0;\n\tint flag50=0;\n\tint flag51=0;\n\tint flag52=0;\n\tint flag53=0;\n\tint flag54=0;\n\tint flag55=0;\n\tint flag56=0;\n\tint flag57=0;\n\tint flag58=0;\n\tint flag59=0;\n\tint flag60=0;\n\tint flag61=0;\n\tint flag62=0;\n\tint flag63=0;\n\tint flag64=0;\n\tint flag65=0;\n\tint flag66=0;\n\tint flag67=0;\n\tint flag68=0;\n\tint flag69=0;\n\tint flag70=0;\n\tint flag71=0;\n\tint flag72=0;\n\tint flag73=0;\n\tint flag74=0;\n\tint flag75=0;\n\tint flag76=0;\n\tint flag77=0;\n\tint flag78=0;\n\tint flag79=0;\n\tint flag80=0;\n\tint flag81=0;\n\tint flag82=0;\n\tint flag83=0;\n\tint flag84=0;\n\tint flag85=0;\n\tint flag86=0;\n\tint flag87=0;\n\tint flag88=0;\n\tint flag89=0;\n\tint flag90=0;\n\tint flag91=0;\n\tint flag92=0;\n\tint flag93=0;\n\tint flag94=0;\n\tint flag95=0;\n\tint flag96=0;\n\tint flag97=0;\n\tint flag98=0;\n\tint flag99=0;\n\tint flag100=0;\n\tint flag101=0;\n\tint flag102=0;\n\tint flag103=0;\n\tint flag104=0;\n\tint flag105=0;\n\tint flag106=0;\n\tint flag107=0;\n\tint flag108=0;\n\tint flag109=0;\n\tint flag110=0;\n\tint flag111=0;\n\tint flag112=0;\n\tint flag113=0;\n\tint flag114=0;\n\tint flag115=0;\n\tint flag116=0;\n\tint flag117=0;\n\tint flag118=0;\n\tint flag119=0;\n\tint flag120=0;\n\tint flag121=0;\n\tint flag122=0;\n\tint flag123=0;\n\tint flag124=0;\n\tint flag125=0;\n\tint flag126=0;\n\tint flag127=0;\n\tint flag128=0;\n\tint flag129=0;\n\tint flag130=0;\n\tint flag131=0;\n\tint flag132=0;\n\tint flag133=0;\n\tint flag134=0;\n\tint flag135=0;\n\tint flag136=0;\n\tint flag137=0;\n\tint flag138=0;\n\tint flag139=0;\n\tint flag140=0;\n\tint flag141=0;\n\tint flag142=0;\n\tint flag143", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/125", "prompt": "/*\nGivEn a sTring Of wOrds, return a VectoR of wordS spLit on WhiTEsPaCe, if NO whItespaces exisTS in The tExt you\nshouLd split on comMas ',' if No COmMaS ExIsts yOu shoulD return A vECTor WiTH One ElEMeNt, the NumBer OF loWer-caSe lEtTeRS WIth Odd order in tHE\nALphabet, ord(\"A\") = 0, oRD(\"b\") = 1, ... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n", "canonical_solution": "    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+' ';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    int num=0;\n    for (i=0;i<txt.length();i++)\n        if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)\n            num+=1;\n    return {to_string(num)};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello world,!\") , {\"Hello\",\"world,!\"}));\n    assert (issame(split_words(\"Hello,Hello,world !\") , {\"Hello,Hello,world\",\"!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n    assert (issame(split_words(\"aaabb\") , {\"2\"}));\n    assert (issame(split_words(\"aaaBb\") , {\"1\"}));\n    assert (issame(split_words(\"\") ,{\"0\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(split_words(\"Hello world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"Hello,world!\") , {\"Hello\",\"world!\"}));\n    assert (issame(split_words(\"abcdef\") , {\"3\"}));\n}\n", "entry_point": "split_words", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring Of wOrds, return a VectoR of wordS spLit on WhiTEsPaCe, if NO whItespaces exisTS in The tExt you\nshouLd split on comMas ',' if No COmMaS ExIsts yOu shoulD return A vECTor WiTH One ElEMeNt, the NumBer OF loWer-caSe lEtTeRS WIth Odd order in tHE\nALphabet, ord(\"A\") = 0, oRD(\"b\") = 1,... ord(\"z\") = 25\nExamples\nsplit_words(\"Hello world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"Hello,world!\") ➞ {\"Hello\", \"world!\"}\nsplit_words(\"abcdef\") == {\"3\"} \n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> split_words(string txt){\n\tvector<string> res;\n\tstring word;\n\tfor(int i=0;i<txt.length();i++){\n\t\tif(txt[i]==' '){\n\t\t\tif(word.length()>0){\n\t\t\t\tres.push_back(word);\n\t\t\t\tword.clear();\n\t\t\t}\n\t\t}else{\n\t\t\tword+=txt[i];\n\t\t}\n\t}\n\tif(word.length()>0){\n\t\tres.push_back(word);\n\t}\n\treturn res;\n}\nint main(){\n\tstring txt;\n\tgetline(cin,txt);\n\tvector<string> words=split_words(txt);\n\tfor(int i=0;i<words.size();i++){\n\t\tcout<<words[i]<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/126", "prompt": "/*\nGivEn a vEctor Of nUmberS, return whetHer or noT thEy are SorTEd\nIn AsceNDinG order. If vectoR HAs moRe than 1 duplIcate of the saMe\nnumBeR, return FaLsE. asSume nO negatiVE nUMBerS aND OnlY iNTeGers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n", "canonical_solution": "    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({}) == true);\n    assert (is_sorted({1}) == true);\n    assert (is_sorted({3, 2, 1}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 3, 3, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n    assert (is_sorted({1, 2, 3, 4}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_sorted({5}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5}) == false);\n    assert (is_sorted({1, 2, 3, 4, 5, 6}) == true);\n    assert (is_sorted({1, 2, 3, 4, 5, 6, 7}) == true);\n    assert (is_sorted({1, 3, 2, 4, 5, 6, 7}) == false);\n    assert (is_sorted({1, 2, 2, 2, 3, 4}) == false);\n    assert (is_sorted({1, 2, 2, 3, 3, 4}) == true);\n}\n", "entry_point": "is_sorted", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of nUmberS, return whetHer or noT thEy are SorTEd\nIn AsceNDinG order. If vectoR HAs moRe than 1 duplIcate of the saMe\nnumBeR, return FaLsE. asSume nO negatiVE nUMBerS aND OnlY iNTeGers.\n\nExamples\nis_sorted({5}) ➞ true\nis_sorted({1, 2, 3, 4, 5}) ➞ true\nis_sorted({1, 3, 2, 4, 5}) ➞ false\nis_sorted({1, 2, 3, 4, 5, 6}) ➞ true\nis_sorted({1, 2, 3, 4, 5, 6, 7}) ➞ true\nis_sorted({1, 3, 2, 4, 5, 6, 7}) ➞ false\nis_sorted({1, 2, 2, 3, 3, 4}) ➞ true\nis_sorted({1, 2, 2, 2, 3, 4}) ➞ false\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nbool is_sorted(vector<int> lst){\n    int i = 0;\n    while(i < lst.size()-1){\n        if(lst[i] > lst[i+1])\n            return false;\n        i++;\n    }\n    return true;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> lst(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &lst[i]);\n    }\n    if(is_sorted(lst))\n        printf(\"true\\n\");\n    else\n        printf(\"false\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/127", "prompt": "/*\nYou Are gIven tWo iNtervAls,\nwhEre each IntErval Is a PAiR oF intEGerS. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "canonical_solution": "    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2-inter1;\n    if (l<2) return \"NO\";\n    for (i=2;i*i<=l;i++)\n        if (l%i==0) return \"NO\";\n    return \"YES\";\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n    assert (intersection({-2, 2}, {-4, 0}) == \"YES\");\n    assert (intersection({-11, 2}, {-1, -1}) == \"NO\");\n    assert (intersection({1, 2}, {3, 5}) == \"NO\");\n    assert (intersection({1, 2}, {1, 2}) == \"NO\");\n    assert (intersection({-2, -2}, {-3, -2}) == \"NO\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (intersection({1, 2}, {2, 3}) == \"NO\");\n    assert (intersection({-1, 1}, {0, 4}) == \"NO\");\n    assert (intersection({-3, -1}, {-5, 5}) == \"YES\");\n}\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven tWo iNtervAls,\nwhEre each IntErval Is a PAiR oF intEGerS. For example, interval = (start, end) = (1, 2).\nThe given intervals are closed which means that the interval (start, end)\nincludes both start and end.\nFor each given interval, it is assumed that its start is less or equal its end.\nYour task is to determine whether the length of intersection of these two \nintervals is a prime number.\nExample, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\nwhich its length is 1, which not a prime number.\nIf the length of the intersection is a prime number, return \"YES\",\notherwise, return \"NO\".\nIf the two intervals don't intersect, return \"NO\".\n\n\n{input/output} samples:\nintersection({1, 2}, {2, 3}) ==> \"NO\"\nintersection({-1, 1}, {0, 4}) ==> \"NO\"\nintersection({-3, -1}, {-5, 5}) ==> \"YES\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring intersection( vector<int> interval1,vector<int> interval2){\n    int start1 = interval1[0];\n    int end1 = interval1[1];\n    int start2 = interval2[0];\n    int end2 = interval2[1];\n    if(start1 > end2 || start2 > end1){\n        return \"NO\";\n    }\n    int start = max(start1, start2);\n    int end = min(end1, end2);\n    int length = end - start + 1;\n    if(length % 2 == 0){\n        return \"NO\";\n    }\n    return \"YES\";\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> interval1(n);\n    vector<int> interval2(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &interval1[i]);\n    }\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &interval2[i]);\n    }\n    string result = intersection(interval1,interval2);\n    printf(\"%s\", result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/128", "prompt": "/*\nYou Are gIven a VecTor arr of IntegErs and yOu nEed to return\nsum Of mAGnItUdes OF inTegers multiplIED by pRoduct of alL signs\nof each NumbeR in tHE vEcTOr, RepreSented bY 1, -1 Or 0.\nnOTe: return -32768 fOr EMPty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n", "canonical_solution": "    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({1, 1, 1, 2, 3, -1, 1}) == -10);\n    assert (prod_signs({}) == -32768);\n    assert (prod_signs({2, 4,1, 2, -1, -1, 9}) == 20);\n    assert (prod_signs({-1, 1, -1, 1}) == 4);\n    assert (prod_signs({-1, 1, 1, 1}) == -4);\n    assert (prod_signs({-1, 1, 1, 0}) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prod_signs({1, 2, 2, -4}) == -9);\n    assert (prod_signs({0, 1}) == 0);\n    assert (prod_signs({}) == -32768);\n}\n", "entry_point": "prod_signs", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a VecTor arr of IntegErs and yOu nEed to return\nsum Of mAGnItUdes OF inTegers multiplIED by pRoduct of alL signs\nof each NumbeR in tHE vEcTOr, RepreSented bY 1, -1 Or 0.\nnOTe: return -32768 fOr EMPty arr.\n\nExample:\n>>> prod_signs({1, 2, 2, -4}) == -9\n>>> prod_signs({0, 1}) == 0\n>>> prod_signs({}) == -32768\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint prod_signs(vector<int> arr){\n    int sum = 0;\n    for(int i = 0; i < arr.size(); i++){\n        sum += arr[i] * (i % 2 == 0? 1 : -1);\n    }\n    return sum;\n}\nint main(){\n    vector<int> arr;\n    int n;\n    while(scanf(\"%d\", &n)!= EOF){\n        arr.clear();\n        for(int i = 0; i < n; i++){\n            int x;\n            scanf(\"%d\", &x);\n            arr.push_back(x);\n        }\n        printf(\"%d\\n\", prod_signs(arr));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/129", "prompt": "/*\nGivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \nEaCh ceLL of The grid contains a vALUe. EvEry integer in The range {1, N * N}\ninClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\nYou haVe TO fInd thE miNimUM paTh of lEngTh k in ThE grid. yOU caN start\nfroM ANY cell, and in eaCh STep you cAn movE to Any of THe NeiGHboR cEllS,\nIn otHer WoRDS, you caN go to cellS wHICh sHaRE aN edGe WITh YoU cUrrenT\ncelL.\nPlease nOTe THat a path of LengTh k meanS vISiTINg eXacTly k celLs (noT\nnECessARIly disTInCT).\nyOu canNOT go off the grid.\nA pAth A (of lengtH k) Is COnsIdeReD LeSS than a Path B (Of LEngTh k) If\nafter mAKing The ordereD vectoRS of the vALues on THe cellS thAt A And B GO\ntHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\ntHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\nsuch ThAt LSt_A[i] < LST_B[i] aNd FOr AnY j (1 <= j < i) wE have\nlst_A[j] = Lst_b[j].\nIt Is guaraNtEEd ThAt tHe AnsweR Is uniqUe.\nrEtURn an ordEred vecTOr oF tHE VAlUes on The cells that tHE MINiMum path GO thRoUGH.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "canonical_solution": "    int i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];\n    if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];\n    vector<int> out={};\n    for (i=0;i<k;i++)\n    if (i%2==0) out.push_back(1);\n    else out.push_back(min);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n    assert (issame(minPath({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14, 15, 16}}, 4) , {1, 2, 1, 2}));\n    assert (issame(minPath({{6, 4, 13, 10}, {5, 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7) , {1, 10, 1, 10, 1, 10, 1}));\n    assert (issame(minPath({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3, 10, 11, 16}}, 5) , {1, 7, 1, 7, 1}));\n    assert (issame(minPath({{11, 8, 7, 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9) , {1, 6, 1, 6, 1, 6, 1, 6, 1}));\n    assert (issame(minPath({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16, 14, 4}, {11, 8, 7, 2}}, 12) , {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6}));\n    assert (issame(minPath({{2, 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8) , {1, 3, 1, 3, 1, 3, 1, 3}));\n    assert (issame(minPath({{6, 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8) , {1, 5, 1, 5, 1, 5, 1, 5}));\n    assert (issame(minPath({{1, 2}, {3, 4}}, 10) , {1, 2, 1, 2, 1, 2, 1, 2, 1, 2}));\n    assert (issame(minPath({{1, 3}, {3, 2}}, 10) , {1, 3, 1, 3, 1, 3, 1, 3, 1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(minPath({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3) , {1, 2, 1}));\n    assert (issame(minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1) , {1}));\n}\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \nEaCh ceLL of The grid contains a vALUe. EvEry integer in The range {1, N * N}\ninClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\nYou haVe TO fInd thE miNimUM paTh of lEngTh k in ThE grid. yOU caN start\nfroM ANY cell, and in eaCh STep you cAn movE to Any of THe NeiGHboR cEllS,\nIn otHer WoRDS, you caN go to cellS wHICh sHaRE aN edGe WITh YoU cUrrenT\ncelL.\nPlease nOTe THat a path of LengTh k meanS vISiTINg eXacTly k celLs (noT\nnECessARIly disTInCT).\nyOu canNOT go off the grid.\nA pAth A (of lengtH k) Is COnsIdeReD LeSS than a Path B (Of LEngTh k) If\nafter mAKing The ordereD vectoRS of the vALues on THe cellS thAt A And B GO\ntHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\ntHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\nsuch ThAt LSt_A[i] < LST_B[i] aNd FOr AnY j (1 <= j < i) wE have\nlst_A[j] = Lst_b[j].\nIt Is guaraNtEEd ThAt tHe AnsweR Is uniqUe.\nrEtURn an ordEred vecTOr oF tHE VAlUes on The cells that tHE MINiMum path GO thRoUGH.\n\nExamples:\n\n    Input: grid = { {1,2,3}, {4,5,6}, {7,8,9}}, k = 3\n    Output: {1, 2, 1}\n\n    Input: grid = { {5,9,3}, {4,1,6}, {7,8,2}}, k = 1\n    Output: {1}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> minPath(vector<vector<int>> grid, int k){\n    vector<int> ans;\n    for(int i = 0; i < k; i++){\n        ans.push_back(grid[0][i]);\n    }\n    for(int i = 1; i < k; i++){\n        int min = INT_MAX;\n        for(int j = 0; j < k; j++){\n            if(grid[i][j] < min){\n                min = grid[i][j];\n            }\n        }\n        ans.push_back(min);\n    }\n    return ans;\n}\nint main(){\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector<vector<int>> grid(n, vector<int>(n, 0));\n    for(int i = 0; i < n; i++){\n        for(int j = 0; j < n; j++){\n            scanf(\"%d\", &grid[i][j]);\n        }\n    }\n    vector<int> ans = minPath(grid, k);\n    for(int i = 0; i < k; i++){\n        printf(\"%d \", ans[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/13", "prompt": "/*\nRetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n", "canonical_solution": "    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 7) == 1);\n     assert (greatest_common_divisor(10, 15) == 5);\n      assert (greatest_common_divisor(49, 14) == 7);\n     assert (greatest_common_divisor(144, 60) == 12);\n}\n", "declaration": "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (greatest_common_divisor(3, 5) == 1);\n     assert (greatest_common_divisor(25, 15) == 5);\n}\n", "entry_point": "greatest_common_divisor", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n>>> greatest_common_divisor(3, 5)\n1\n>>> greatest_common_divisor(25, 15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint greatest_common_divisor(int a, int b){\n    int i, j;\n    for(i = 1; i <= b; i++){\n        if(a%i == 0){\n            for(j = 1; j <= b; j++){\n                if(b%j == 0){\n                    if(i!= j){\n                        return i;\n                    }\n                }\n            }\n        }\n    }\n    return 1;\n}\nint main(){\n    int a, b;\n    printf(\"Enter two integers\\n\");\n    scanf(\"%d %d\", &a, &b);\n    printf(\"Greatest common divisor is %d\\n\", greatest_common_divisor(a, b));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/130", "prompt": "/*\nEveRyonE knowS FiBonacCi seqUence, it Was StudiEd dEEpLy By maTHemAticians in \nthe laST CoupLe centurieS. However, what PeoplE dON't KnOW iS TribOnacci sEQuENCe.\nTRiBONacCi SEqUence Is dEfiNEd bY the rEcuRrEnCE:\nTRi(1) = 3\ntRi(n) = 1 + n / 2, if n is evEN.\nTRi(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n", "canonical_solution": "    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n    assert (issame(tri(4) , {1, 3, 2, 8, 3}));\n    assert (issame(tri(5) , {1, 3, 2, 8, 3, 15}));\n    assert (issame(tri(6) , {1, 3, 2, 8, 3, 15, 4}));\n    assert (issame(tri(7) , {1, 3, 2, 8, 3, 15, 4, 24}));\n    assert (issame(tri(8) , {1, 3, 2, 8, 3, 15, 4, 24, 5}));\n    assert (issame(tri(9) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35}));\n    assert (issame(tri(20) , {1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11}));\n    assert (issame(tri(0) , {1}));\n    assert (issame(tri(1) , {1, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(tri(3) , {1, 3, 2, 8}));\n}\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*\nEveRyonE knowS FiBonacCi seqUence, it Was StudiEd dEEpLy By maTHemAticians in \nthe laST CoupLe centurieS. However, what PeoplE dON't KnOW iS TribOnacci sEQuENCe.\nTRiBONacCi SEqUence Is dEfiNEd bY the rEcuRrEnCE:\nTRi(1) = 3\ntRi(n) = 1 + n / 2, if n is evEN.\nTRi(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nFor example:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n       = 2 + 3 + 3 = 8 \nYou are given a non-negative integer number n, you have to a return a vector of the \nfirst n + 1 numbers of the Tribonacci sequence.\nExamples:\ntri(3) = {1, 3, 2, 8}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> tri(int n){\n\tvector<int> v;\n\tif(n == 0)\n\t\treturn v;\n\tv.push_back(1);\n\tfor(int i = 1; i <= n; i++){\n\t\tv.push_back(v[i - 1] + v[i - 2] + v[i + 1]);\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> v = tri(n);\n\tfor(int i = 0; i < v.size(); i++)\n\t\tprintf(\"%d \", v[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/131", "prompt": "/*\nGivEn a pOsitiVe iNtegeR n, return the pRoduct oF thE odd digits.\nReturn 0 iF alL digits ArE eVen.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n", "canonical_solution": "    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(5) == 5);\n    assert (digits(54) == 5);\n    assert (digits(120) ==1);\n    assert (digits(5014) == 5);\n    assert (digits(98765) == 315);\n    assert (digits(5576543) == 2625);\n    assert (digits(2468) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digits(1) == 1);\n    assert (digits(4) == 0);\n    assert (digits(235) ==15);\n}\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR n, return the pRoduct oF thE odd digits.\nReturn 0 iF alL digits ArE eVen.\nFor example:\ndigits(1)  == 1\ndigits(4)  == 0\ndigits(235) == 15\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digits(int n){\n    int i,j;\n    string s;\n    s.clear();\n    for(i=0;i<n;i++){\n        s.push_back(n%10+'0');\n        n/=10;\n    }\n    if(n==0){\n        return 0;\n    }\n    else{\n        for(j=0;j<s.size();j++){\n            printf(\"%c\",s[j]);\n        }\n        printf(\"\\n\");\n        return 1;\n    }\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        printf(\"%d\\n\",digits(n));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/132", "prompt": "/*\nCreAte a FunctIon That tAkes a String aS inPut whIch COnTaIns oNLy sQuare brackets.\ntHE funCtion shoulD return true if and onLy if tHeRE iS a VAlId subSequencE Of BRAckEtS\nWHerE aT LeAst onE brAckET in thE subsEquEnCe IS NEstEd.\n\nis_nesteD(\"[[]]\") ➞ TRUe\nis_nested(\"[]]]]]]][[[[[]\") ➞ FaLSe\nis_nesTed(\"[][]\") ➞ faLse\nIs_nesTEd(\"[]\") ➞ FalSE\nis_NeSteD(\"[[][]]\") ➞ True\nIs_nEsTED(\"[[]][[\") ➞ true\n*/\n#iNclude<stdIo.H>\n#INclUdE<StRinG>\nuSINg NaMeSpace std;\nbool Is_neSted(striNG str){\n", "canonical_solution": "    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested((\"[]\")) == false);\n    assert (is_nested(\"[[[[]]]]\") == true);\n    assert (is_nested(\"[]]]]]]]]]]\") == false);\n    assert (is_nested(\"[][][[]]\") == true);\n    assert (is_nested(\"[[]\") == false);\n    assert (is_nested(\"[]]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n    assert (is_nested(\"\") == false);\n    assert (is_nested(\"[[[[[[[[\") == false);\n    assert (is_nested(\"]]]]]]]]\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_nested(\"[[]]\") == true);\n    assert (is_nested(\"[]]]]]]][[[[[]\") == false);\n    assert (is_nested(\"[][]\") == false);\n    assert (is_nested(\"[]\") == false);\n    assert (is_nested(\"[[]][[\") == true);\n    assert (is_nested(\"[[][]]\") == true);\n}\n", "entry_point": "is_nested", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon That tAkes a String aS inPut whIch COnTaIns oNLy sQuare brackets.\ntHE funCtion shoulD return true if and onLy if tHeRE iS a VAlId subSequencE Of BRAckEtS\nWHerE aT LeAst onE brAckET in thE subsEquEnCe IS NEstEd.\n\nis_nesteD(\"[[]]\") ➞ TRUe\nis_nested(\"[]]]]]]][[[[[]\") ➞ FaLSe\nis_nesTed(\"[][]\") ➞ faLse\nIs_nesTEd(\"[]\") ➞ FalSE\nis_NeSteD(\"[[][]]\") ➞ True\nIs_nEsTED(\"[[]][[\") ➞ true\n*/\n#iNclude<stdIo.H>\n#INclUdE<StRinG>\nuSINg NaMeSpace std;\nbool Is_neSted(striNG str){\n\tif(str.size() == 0) return false;\n\tif(str[0] == '[' && str[str.size()-1] == ']') return true;\n\treturn false;\n}\nbool Is_nested(striNG str){\n\tif(str.size() == 0) return false;\n\tif(str[0] == '[' && str[str.size()-1] == ']') return true;\n\treturn false;\n}\nbool Is_nesTed(striNG str){\n\tif(str.size() == 0) return false;\n\tif(str[0] == '[' && str[str.size()-1] == ']') return true;\n\treturn false;\n}\nbool Is_nEsTED(striNG str){\n\tif(str.size() == 0) return false;\n\tif(str[0] == '[' && str[str.size()-1] == ']') return true;\n\treturn false;\n}\n\nint main(){\n\tstd::cout << \"Enter a string: \";\n\tstd::string str;\n\tstd::getline(std::cin, str);\n\tstd::cout << \"Is \" << str << \" a nested string? \" << std::boolalpha << Is_nested(str) << std::endl;\n\tstd::cout << \"Is \" << str << \" a nested string? \" << std::boolalpha << Is_nesTed(str) << std::endl;\n\tstd::cout << \"Is \" << str << \" a nested string? \" << std::boolalpha << Is_nEsTED(str) << std::endl;\n\tstd::cout << \"Is \" << str << \" a nested string? \" << std::boolalpha << Is_neSted(str) << std::endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/133", "prompt": "/*\nYou Are gIven a VecTor of NumbeRs.\nYou neEd tO return the sum oF sqUArEd NumbERs in tHe given vector,\nROUnd eAch element in The vector to tHe uppEr int(Ceiling) FIrSt.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1.0,2,3})==14);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n    assert (sum_squares({100,1,15,2})==10230);\n    assert (sum_squares({10000,10000})==200000000);\n    assert (sum_squares({-1.4,4.6,6.3})==75);\n    assert (sum_squares({-1.4,17.9,18.9,19.9})==1086);\n    assert (sum_squares({0})==0);\n    assert (sum_squares({-1})==1);\n    assert (sum_squares({-1,1,0})==2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3})==14);\n    assert (sum_squares({1,4,9})==98);\n    assert (sum_squares({1,3,5,7})==84);\n    assert (sum_squares({1.4,4.2,0})==29);\n    assert (sum_squares({-2.4,1,1})==6);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a VecTor of NumbeRs.\nYou neEd tO return the sum oF sqUArEd NumbERs in tHe given vector,\nROUnd eAch element in The vector to tHe uppEr int(Ceiling) FIrSt.\nExamples:\nFor lst = {1,2,3} the output should be 14\nFor lst = {1,4,9} the output should be 98\nFor lst = {1,3,5,7} the output should be 84\nFor lst = {1.4,4.2,0} the output should be 29\nFor lst = {-2.4,1,1} the output should be 6\n\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += (int)lst[i] * (int)lst[i];\n    }\n    return sum;\n}\nint main(){\n    vector<float> lst;\n    int n;\n    scanf(\"%d\",&n);\n    for(int i = 0; i < n; i++){\n        float x;\n        scanf(\"%f\",&x);\n        lst.push_back(x);\n    }\n    printf(\"%d\\n\",sum_squares(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/134", "prompt": "/*\nCreAte a FunctIon That rEturnS true if The Last cHarACtEr\nOf a gIVen String is an alpHABetiCal charactEr and is not\na pArt of A wORd, AnD FaLse otHerwise.\nnOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n", "canonical_solution": "    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<65 or (chr>90 and chr<97) or chr>122) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"eeeee\") == false);\n    assert (check_if_last_char_is_a_letter(\"A\") == true);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie \") == false);\n    assert (check_if_last_char_is_a_letter(\"Pumpkin pie 1\") == false);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"eeeee e \") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_if_last_char_is_a_letter(\"apple pi e\") == true);\n    assert (check_if_last_char_is_a_letter(\"\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pie\") == false);\n    assert (check_if_last_char_is_a_letter(\"apple pi e \") == false);\n}\n", "entry_point": "check_if_last_char_is_a_letter", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon That rEturnS true if The Last cHarACtEr\nOf a gIVen String is an alpHABetiCal charactEr and is not\na pArt of A wORd, AnD FaLse otHerwise.\nnOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n\nExamples:\ncheck_if_last_char_is_a_letter(\"apple pie\") ➞ false\ncheck_if_last_char_is_a_letter(\"apple pi e\") ➞ true\ncheck_if_last_char_is_a_letter(\"apple pi e \") ➞ false\ncheck_if_last_char_is_a_letter(\"\") ➞ false \n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool check_if_last_char_is_a_letter(string txt){\n    int i = txt.length()-1;\n    while(i>=0){\n        if(txt[i]>='A' && txt[i]<='Z'){\n            return true;\n        }\n        i--;\n    }\n    return false;\n}\nint main(){\n    string txt = \"apple pie\";\n    if(check_if_last_char_is_a_letter(txt)){\n        printf(\"%s is an alpHABetiCal charactEr\\n\", txt.c_str());\n    }else{\n        printf(\"%s is not an alpHABetiCal charactEr\\n\", txt.c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/135", "prompt": "/*\nCreAte a FunctIon Which ReturNs the laRgeSt indEx oF An ElEmenT WhiCh\nis not greateR THan oR equal to thE element immeDiateLy PReCeDInG it. If\nNo such eLEmENT exIsTS TheN return -1. THE gIven vEctOr wILl nOt conTaiN\ndUpLICAte Values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n", "canonical_solution": "    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i;\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,4,5})==-1);\n    assert (can_arrange({1,4,2,5,6,7,8,9,10})==2);\n    assert (can_arrange({4,8,5,7,3})==4);\n    assert (can_arrange({})==-1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (can_arrange({1,2,4,3,5})==3);\n    assert (can_arrange({1,2,3})==-1);\n}\n", "entry_point": "can_arrange", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon Which ReturNs the laRgeSt indEx oF An ElEmenT WhiCh\nis not greateR THan oR equal to thE element immeDiateLy PReCeDInG it. If\nNo such eLEmENT exIsTS TheN return -1. THE gIven vEctOr wILl nOt conTaiN\ndUpLICAte Values.\n\nExamples:\ncan_arrange({1,2,4,3,5}) = 3\ncan_arrange({1,2,3}) = -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint can_arrange(vector<int> arr){\n\tint i,j,k,l,m,n,x,y,z,t,max,min;\n\tmax=arr[0];\n\tmin=arr[0];\n\tfor(i=1;i<arr.size();i++){\n\t\tif(arr[i]>max){\n\t\t\tmax=arr[i];\n\t\t}\n\t\tif(arr[i]<min){\n\t\t\tmin=arr[i];\n\t\t}\n\t}\n\tfor(i=0;i<arr.size();i++){\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tx=arr[i];\n\t\t\t\ty=arr[j];\n\t\t\t\tarr[i]=y;\n\t\t\t\tarr[j]=x;\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i<arr.size();i++){\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\tfor(k=j+1;k<arr.size();k++){\n\t\t\t\tif(arr[i]>arr[j]&&arr[j]>arr[k]){\n\t\t\t\t\tx=arr[i];\n\t\t\t\t\ty=arr[j];\n\t\t\t\t\tz=arr[k];\n\t\t\t\t\tarr[i]=z;\n\t\t\t\t\tarr[j]=y;\n\t\t\t\t\tarr[k]=x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i<arr.size();i++){\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\tfor(k=j+1;k<arr.size();k++){\n\t\t\t\tfor(l=k+1;l<arr.size();l++){\n\t\t\t\t\tif(arr[i]>arr[j]&&arr[j]>arr[k]&&arr[k]>arr[l]){\n\t\t\t\t\t\tx=arr[i];\n\t\t\t\t\t\ty=arr[j];\n\t\t\t\t\t\tz=arr[k];\n\t\t\t\t\t\tt=arr[l];\n\t\t\t\t\t\tarr[i]=z;\n\t\t\t\t\t\tarr[j]=t;\n\t\t\t\t\t\tarr[k]=y;\n\t\t\t\t\t\tarr[l]=x;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i<arr.size();i++){\n\t\tfor(j=i+1;j<arr.size();j++){\n\t\t\tfor(k=j+1;k<arr.size();k++){\n\t\t\t\tfor(l=k+1;l<arr.size();l++){\n\t\t\t\t\tfor(m=l+1;m<arr.size();m++){\n\t\t\t\t\t\tif(arr[i]>arr[j]&&arr[j]>arr[k]&&arr[k]>arr[l]&&arr[l]>arr[m]){\n\t\t\t\t\t\t\tx=arr[i];\n\t\t\t\t\t\t\ty=arr[j];\n\t\t\t\t\t\t\tz=arr[k];\n\t\t\t\t\t\t\tt=arr[l];\n\t\t\t\t\t\t\tu=arr[m];\n\t\t\t\t\t\t\tarr[i]=z;\n\t\t\t\t\t\t\tarr[j]=t;\n\t\t\t\t\t\t\tarr[k]=y;\n\t\t\t\t\t\t\tarr[l]=u;\n\t\t\t\t\t\t\tarr[m]=x;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(i=0;i<arr.size();i++){\n\t\tif(arr[i]>max){\n\t\t\tmax=arr[i];\n\t\t}\n\t\tif(arr[i]<min){\n\t\t\tmin=arr[i];\n\t\t}\n\t}\n\tif(max==min){\n\t\treturn -1;\n\t}\n\telse{\n\t\treturn max;\n\t}\n}\nint main(){\n\tint arr[5]={1,2,3,4,5};\n\tvector<int> v(arr,arr+5);\n\tprintf(\"%d\\n\",can_arrange(v));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/136", "prompt": "/*\nCreAte a FunctIon That rEturnS a vectoR (a, b), Where \"A\" is\nTHe LaRgesT Of nEgative integeRS, And \"b\" Is the smallEst\nof positivE inteGeRS in a VeCToR.\nIf thEre is no NEgATIve Or POSitIvE InTegerS, return thEm aS 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n", "canonical_solution": "    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7, 0}) , {0, 1}));\n    assert (issame(largest_smallest_integers({1, 3, 2, 4, 5, 6, -2}) , {-2, 1}));\n    assert (issame(largest_smallest_integers({4, 5, 3, 6, 2, 7, -7}) , {-7, 2}));\n    assert (issame(largest_smallest_integers({7, 3, 8, 4, 9, 2, 5, -9}) , {-9, 2}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-1, -3, -5, -6, 0}) , {-1, 0}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, 1}) , {-3, 1}));\n    assert (issame(largest_smallest_integers({-6, -4, -4, -3, -100, 1}) , {-3, 1}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(largest_smallest_integers({2, 4, 1, 3, 5, 7}) , {0, 1}));\n    assert (issame(largest_smallest_integers({}) , {0, 0}));\n    assert (issame(largest_smallest_integers({0}) , {0, 0}));\n}\n", "entry_point": "largest_smallest_integers", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon That rEturnS a vectoR (a, b), Where \"A\" is\nTHe LaRgesT Of nEgative integeRS, And \"b\" Is the smallEst\nof positivE inteGeRS in a VeCToR.\nIf thEre is no NEgATIve Or POSitIvE InTegerS, return thEm aS 0.\n\nExamples:\nlargest_smallest_integers({2, 4, 1, 3, 5, 7}) == {0, 1}\nlargest_smallest_integers({}) == {0,0}\nlargest_smallest_integers({0}) == {0,0}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> largest_smallest_integers(vector<int> lst){\n\tvector<int> ans;\n\tint max = 0;\n\tint min = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(lst[i] < 0){\n\t\t\tmin = lst[i];\n\t\t}\n\t\telse{\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tif(max == 0 && min == 0){\n\t\tans.push_back(0);\n\t\tans.push_back(0);\n\t}\n\telse if(max == 0){\n\t\tans.push_back(0);\n\t\tans.push_back(min);\n\t}\n\telse if(min == 0){\n\t\tans.push_back(max);\n\t\tans.push_back(0);\n\t}\n\telse{\n\t\tans.push_back(max);\n\t\tans.push_back(min);\n\t}\n\treturn ans;\n}\nint main(){\n\tvector<int> lst;\n\tlst.push_back(-2);\n\tlst.push_back(2);\n\tlst.push_back(1);\n\tlst.push_back(3);\n\tlst.push_back(5);\n\tlst.push_back(7);\n\tvector<int> ans = largest_smallest_integers(lst);\n\tfor(int i = 0; i < ans.size(); i++){\n\t\tprintf(\"%d \", ans[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/137", "prompt": "/*\nCreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\nreal numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\nREturn \"NoNE\" iF THe vAlUES arE eQUaL.\nNote: if a rEal NUmbEr is rEprEsEnTED As a string, tHe floatinG POInt might be . Or ,\n\nCOmpare_oNe(1, 2.5) ➞ 2.5\ncomParE_one(1, \"2,3\") ➞ \"2,3\"\ncOMpAre_ONe(\"5,1\", \"6\") ➞ \"6\"\ncOmParE_One(\"1\", 1) ➞ \"NOne\"\n*/\n#InCLUde<stdIo.h>\n#includE<sTRIng>\n#InCLuDe<aLgORItHm>\n#InClude<BoosT/any.hpp>\nuSInG Namespace std;\nboost::any cOmpaRe_one(bOoST::aNY a,boost::any b){\n", "canonical_solution": "    double  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);\n    }\n    if (b.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(b);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numb=atof(s.c_str());\n    }\n    else \n    {\n        if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);\n        if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);\n    }\n\n    if (numa==numb) return string(\"None\");\n    if (numa<numb) return b;\n    if (numa>numb) return a;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<int>(compare_one(1, 2)) == 2);\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<int>(compare_one(2, 3)) == 3);\n    assert (boost::any_cast<int>(compare_one(5, 6)) == 6);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), string(\"2\"))) == \"2\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (boost::any_cast<double>(compare_one(1, 2.5))== 2.5);\n    assert (boost::any_cast<string>(compare_one(1, string(\"2,3\")))== \"2,3\");\n    assert (boost::any_cast<string>(compare_one(string(\"5,1\"), string(\"6\"))) == \"6\");\n    assert (boost::any_cast<string>(compare_one(string(\"1\"), 1)) == \"None\");\n}\n", "entry_point": "compare_one", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\nreal numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\nREturn \"NoNE\" iF THe vAlUES arE eQUaL.\nNote: if a rEal NUmbEr is rEprEsEnTED As a string, tHe floatinG POInt might be. Or,\n\nCOmpare_oNe(1, 2.5) ➞ 2.5\ncomParE_one(1, \"2,3\") ➞ \"2,3\"\ncOMpAre_ONe(\"5,1\", \"6\") ➞ \"6\"\ncOmParE_One(\"1\", 1) ➞ \"NOne\"\n*/\n#InCLUde<stdIo.h>\n#includE<sTRIng>\n#InCLuDe<aLgORItHm>\n#InClude<BoosT/any.hpp>\nuSInG Namespace std;\nboost::any cOmpaRe_one(bOoST::aNY a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\treturn a+b;\n}\nboost::any cOmParE_one(boost::any a,boost::any b){\n\t", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/138", "prompt": "/*\nEvaLuatE whetHer The giVen nuMber n can Be wRitteN as THe SuM of eXActLy 4 positive eveN NUmbeRs\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n", "canonical_solution": "    if (n%2==0 and n>=8) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n    assert (is_equal_to_sum_even(10) == true);\n    assert (is_equal_to_sum_even(11) == false);\n    assert (is_equal_to_sum_even(12) == true);\n    assert (is_equal_to_sum_even(13) == false);\n    assert (is_equal_to_sum_even(16) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_equal_to_sum_even(4) == false);\n    assert (is_equal_to_sum_even(6) == false);\n    assert (is_equal_to_sum_even(8) == true);\n}\n", "entry_point": "is_equal_to_sum_even", "seed": 0, "perturbed": true, "gc": "/*\nEvaLuatE whetHer The giVen nuMber n can Be wRitteN as THe SuM of eXActLy 4 positive eveN NUmbeRs\nExample\nis_equal_to_sum_even(4) == false\nis_equal_to_sum_even(6) == false\nis_equal_to_sum_even(8) == true\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_equal_to_sum_even(int n){\n    if(n%2==0)\n        return true;\n    else\n        return false;\n}\nint main(){\n    int n;\n    printf(\"Enter a number: \");\n    scanf(\"%d\",&n);\n    if(is_equal_to_sum_even(n))\n        printf(\"%d is even\",n);\n    else\n        printf(\"%d is odd\",n);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/139", "prompt": "/*\nThe brazIlian FacToriaL is deFined as:\nBraZiliaN_faCToRiAl(n) = n! * (n-1)! * (n-2)! * ... * 1!\nwHEre n > 0\n\nfor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n", "canonical_solution": "    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n    assert (special_factorial(5) == 34560);\n    assert (special_factorial(7) == 125411328000);\n    assert (special_factorial(1) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (special_factorial(4) == 288);\n}\n", "entry_point": "special_factorial", "seed": 0, "perturbed": true, "gc": "/*\nThe brazIlian FacToriaL is deFined as:\nBraZiliaN_faCToRiAl(n) = n! * (n-1)! * (n-2)! *... * 1!\nwHEre n > 0\n\nfor example:\n>>> special_factorial(4)\n288\n\nThe function will receive an integer as input and should return the special\nfactorial of this integer.\n*/\n#include<stdio.h>\nusing namespace std;\nlong long special_factorial(int n){\n    long long factorial = 1;\n    for(int i = 1; i <= n; i++){\n        factorial *= i;\n    }\n    return factorial;\n}\n\nint main(){\n    int n;\n    printf(\"Enter the number of factorial: \");\n    scanf(\"%d\", &n);\n    printf(\"The special factorial of %d is: %lld\\n\", n, special_factorial(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/14", "prompt": "/*\nRetUrn vEctor Of aLl preFixes From shoRteSt to lOngESt Of The iNPut String\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n", "canonical_solution": "    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"\"),{}));\n    assert (issame(all_prefixes(\"asdfgh\") ,{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}));\n     assert (issame(all_prefixes(\"WWW\") ,{\"W\", \"WW\", \"WWW\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(all_prefixes(\"abc\"),{\"a\",\"ab\",\"abc\"}));\n}\n", "entry_point": "all_prefixes", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn vEctor Of aLl preFixes From shoRteSt to lOngESt Of The iNPut String\n>>> all_prefixes(\"abc\")\n{\"a\", \"ab\", \"abc\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> all_prefixes(string str){\n    vector<string> res;\n    int len = str.length();\n    for(int i = 0; i < len; i++){\n        string temp = str.substr(0, i + 1);\n        if(temp.length() > 0){\n            res.push_back(temp);\n        }\n    }\n    return res;\n}\nint main(){\n    string str = \"abc\";\n    vector<string> res = all_prefixes(str);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%s\\n\", res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/140", "prompt": "/*\nGivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \naNd If a sTRinG has more than 2 cONSecuTive spaces, \nThen replace aLl conSeCUtIvE SpAces wIth - \n\nfix_sPAcES(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n", "canonical_solution": "    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==1) out=out+'_';\n        if (spacelen==2) out=out+\"__\";\n        if (spacelen>2) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"__\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert (fix_spaces(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert (fix_spaces(\"Exa   mple\") == \"Exa-mple\");\n    assert (fix_spaces(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fix_spaces(\"Example\") == \"Example\");\n    assert (fix_spaces(\"Example 1\") == \"Example_1\");\n    assert (fix_spaces(\" Example 2\") == \"_Example_2\");\n    assert (fix_spaces(\" Example   3\") == \"_Example-3\");\n}\n", "entry_point": "fix_spaces", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \naNd If a sTRinG has more than 2 cONSecuTive spaces, \nThen replace aLl conSeCUtIvE SpAces wIth - \n\nfix_sPAcES(\"Example\") == \"Example\"\nfix_spaces(\"Example 1\") == \"Example_1\"\nfix_spaces(\" Example 2\") == \"_Example_2\"\nfix_spaces(\" Example   3\") == \"_Example-3\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring fix_spaces(string text){\n    string result = text;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] ==''){\n            result[i] = '_';\n        }\n    }\n    return result;\n}\nstring fix_sPAcES(string text){\n    string result = text;\n    for(int i = 0; i < text.length(); i++){\n        if(text[i] ==''){\n            result[i] = '-';\n        }\n    }\n    return result;\n}\nint main(){\n    string text = \"Example\";\n    cout<<\"Original: \"<<text<<endl;\n    cout<<\"Fixed: \"<<fix_spaces(text)<<endl;\n    cout<<\"Fixed: \"<<fix_sPAcES(text)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/141", "prompt": "/*\nCreAte a FunctIon Which Takes A string RepResenTinG A fIlE's naME, anD returns\n\"Yes\" if THE the File's name iS valid, and retUrns \"NO\" oTHeRwISe.\na file'S name is COnSIDerEd TO Be vAlID iF and oNly If aLL thE follOwiNg CoNDITioNs \nare met:\n- THERE should not Be MOre than Three DigIts ('0'-'9') in thE FiLe's NAme.\n- thE fiLE's naMe cOnTAIns exaCtly one doT \".\"\n- THE SubStRInG beFoRE ThE dOt ShoulD not Be empty, aND iT Starts with A letTer froM \ntHE lATIn aLphApet ('a'-'z' And 'A'-'z').\n- THE subSTRing afTEr THE DoT SHould be one of tHese: {'txt\", \"exe\", \"dLL\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n", "canonical_solution": "    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n        if (file_name[i]=='.') numdot+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\"; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n    assert (file_name_check(\"s1sdf3.asd\") == \"No\");\n    assert (file_name_check(\"K.dll\") == \"Yes\");\n    assert (file_name_check(\"MY16FILE3.exe\") == \"Yes\");\n    assert (file_name_check(\"His12FILE94.exe\") == \"No\");\n    assert (file_name_check(\"_Y.txt\") == \"No\");\n    assert (file_name_check(\"?aREYA.exe\") == \"No\");\n    assert (file_name_check(\"/this_is_valid.dll\") == \"No\");\n    assert (file_name_check(\"this_is_valid.wow\") == \"No\");\n    assert (file_name_check(\"this_is_valid.txt\") == \"Yes\");\n    assert (file_name_check(\"this_is_valid.txtexe\") == \"No\");\n    assert (file_name_check(\"#this2_i4s_5valid.ten\") == \"No\");\n    assert (file_name_check(\"@this1_is6_valid.exe\") == \"No\");\n    assert (file_name_check(\"this_is_12valid.6exe4.txt\") == \"No\");\n    assert (file_name_check(\"all.exe.txt\") == \"No\");\n    assert (file_name_check(\"I563_No.exe\") == \"Yes\");\n    assert (file_name_check(\"Is3youfault.txt\") == \"Yes\");\n    assert (file_name_check(\"no_one#knows.dll\") == \"Yes\");\n    assert (file_name_check(\"1I563_Yes3.exe\") == \"No\");\n    assert (file_name_check(\"I563_Yes3.txtt\") == \"No\");\n    assert (file_name_check(\"final..txt\") == \"No\");\n    assert (file_name_check(\"final132\") == \"No\");\n    assert (file_name_check(\"_f4indsartal132.\") == \"No\");\n    assert (file_name_check(\".txt\") == \"No\");\n    assert (file_name_check(\"s.\") == \"No\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (file_name_check(\"example.txt\") == \"Yes\");\n    assert (file_name_check(\"1example.dll\") == \"No\");\n}\n", "entry_point": "file_name_check", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon Which Takes A string RepResenTinG A fIlE's naME, anD returns\n\"Yes\" if THE the File's name iS valid, and retUrns \"NO\" oTHeRwISe.\na file'S name is COnSIDerEd TO Be vAlID iF and oNly If aLL thE follOwiNg CoNDITioNs \nare met:\n- THERE should not Be MOre than Three DigIts ('0'-'9') in thE FiLe's NAme.\n- thE fiLE's naMe cOnTAIns exaCtly one doT \".\"\n- THE SubStRInG beFoRE ThE dOt ShoulD not Be empty, aND iT Starts with A letTer froM \ntHE lATIn aLphApet ('a'-'z' And 'A'-'z').\n- THE subSTRing afTEr THE DoT SHould be one of tHese: {'txt\", \"exe\", \"dLL\"}\nExamples:\nfile_name_check(\"example.txt\") => \"Yes\"\nfile_name_check(\"1example.dll\")  => \"No\" // (the name should start with a latin alphapet letter)\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring file_name_check(string file_name){\n    if(file_name.length()<3){\n        return \"No\";\n    }\n    if(file_name[0]!='.'){\n        return \"No\";\n    }\n    if(file_name[1]!='.'){\n        return \"No\";\n    }\n    if(file_name[2]!='.'){\n        return \"No\";\n    }\n    if(file_name.length()>3){\n        if(file_name[3]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>4){\n        if(file_name[4]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>5){\n        if(file_name[5]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>6){\n        if(file_name[6]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>7){\n        if(file_name[7]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>8){\n        if(file_name[8]!='.'){\n            return \"No\";\n        }\n    }\n    if(file_name.length()>9){\n        if(file_name[9]!='.'){\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\nint main(){\n    string file_name;\n    cout<<\"Enter a file's name: \";\n    cin>>file_name;\n    cout<<file_name_check(file_name);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/142", "prompt": "/*\n\"\nThiS funCtion WilL take A vectOr of intEgeRs. For All ENtRiEs in thE VecTor, the functioN SHall Square the iNteger entry iF its iNdEX iS a \nMUlTiple Of 3 and wiLL cUBE thE iNTEgeR eNTrY if itS inDex IS a mUltipLe oF 4 aNd NOT A muLtiple of 3. THE FUnction wilL nOT \nchange The enTriEs in the VEcTor WHosE iNdeXEs arE noT a MULtiple Of 3 or 4. The fuNcTIOn sHaLL tHen return ThE sum OF aLl EnTries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({1,4,9}) == 14);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({1,1,1,1,1,1,1,1,1}) == 9);\n    assert (sum_squares({-1,-1,-1,-1,-1,-1,-1,-1,-1}) == -3);\n    assert (sum_squares({0}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n    assert (sum_squares({-56,-99,1,0,-2}) == 3030);\n    assert (sum_squares({-1,0,0,0,0,0,0,0,-1}) == 0);\n    assert (sum_squares({-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}) == -14196);\n    assert (sum_squares({-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}) == -1448);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_squares({1,2,3}) == 6);\n    assert (sum_squares({}) == 0);\n    assert (sum_squares({-1,-5,2,-1,-5}) == -126);\n}\n", "entry_point": "sum_squares", "seed": 0, "perturbed": true, "gc": "/*\n\"\nThiS funCtion WilL take A vectOr of intEgeRs. For All ENtRiEs in thE VecTor, the functioN SHall Square the iNteger entry iF its iNdEX iS a \nMUlTiple Of 3 and wiLL cUBE thE iNTEgeR eNTrY if itS inDex IS a mUltipLe oF 4 aNd NOT A muLtiple of 3. THE FUnction wilL nOT \nchange The enTriEs in the VEcTor WHosE iNdeXEs arE noT a MULtiple Of 3 or 4. The fuNcTIOn sHaLL tHen return ThE sum OF aLl EnTries. \n\nExamples:\nFor lst = {1,2,3} the output should be 6\nFor lst = {}  the output should be 0\nFor lst = {-1,-5,2,-1,-5}  the output should be -126\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint sum_squares(vector<int> lst){\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += lst[i] * lst[i];\n\t}\n\treturn sum;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\twhile(scanf(\"%d\", &n)!= EOF){\n\t\tlst.clear();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tlst.push_back(x);\n\t\t}\n\t\tprintf(\"%d\\n\", sum_squares(lst));\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/143", "prompt": "/*\nYou Are gIven a StrIng rePreseNting a sentence,\nthe sentence cOntAins sOme WOrDs SepaRAteD by a space,\nand yOU Have To return a string tHat contains tHe worDs FRoM tHE oRiginAl sentence,\nwhose lengtHS aRE PriMe NUMbeRs,\nTHe Order Of tHe wORds in The neW stRiNg SHOUld Be the same AS THe original OnE.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    if (out.length()>0)\n        out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n    assert (words_in_sentence(\"there is no place available here\") == \"there is no place\");\n    assert (words_in_sentence(\"Hi I am Hussein\") == \"Hi am Hussein\");\n    assert (words_in_sentence(\"go for it\") == \"go for it\");\n    assert (words_in_sentence(\"here\") == \"\");\n    assert (words_in_sentence(\"here is\") == \"is\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (words_in_sentence(\"This is a test\") == \"is\");\n    assert (words_in_sentence(\"lets go for swimming\") == \"go for\");\n}\n", "entry_point": "words_in_sentence", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a StrIng rePreseNting a sentence,\nthe sentence cOntAins sOme WOrDs SepaRAteD by a space,\nand yOU Have To return a string tHat contains tHe worDs FRoM tHE oRiginAl sentence,\nwhose lengtHS aRE PriMe NUMbeRs,\nTHe Order Of tHe wORds in The neW stRiNg SHOUld Be the same AS THe original OnE.\n\nExample 1:\n    Input: sentence = \"This is a test\"\n    Output: \"is\"\n\nExample 2:\n    Input: sentence = \"lets go for swimming\"\n    Output: \"go for\"\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence contains only letters\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring words_in_sentence(string sentence){\n    string result = \"\";\n    int i = 0;\n    while(i < sentence.length()){\n        if(sentence[i] ==''){\n            while(sentence[i] ==''){\n                i++;\n            }\n            result += sentence.substr(i, sentence.length() - i);\n            i = 0;\n        }\n        else{\n            i++;\n        }\n    }\n    return result;\n}\nint main(){\n    string sentence = \"This is a test\";\n    string result = words_in_sentence(sentence);\n    printf(\"%s\\n\", result.c_str());\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/144", "prompt": "/*\nYouR tasK is to ImpLemenT a funcTion thaT wiLl simplify the ExpREsSiOn\nx * n. THE fuNction returns TRUe if x * n Evaluates tO a whole number And faLsE\nOtHeRWiSe. BotH x and n, are STrING rePrESEntAtIOn Of a fraCtiOn, aND haVe the FolLoWiNG FOrmAt,\n<numeratOR>/<DEnominator> WhERe both nUmeraTor And deNOmInaTOr aRe PosITive WhoLe NUMbers.\n\nYOu can assuMe THAt x, aNd n ARe ValId FRAcTiOnS, and dO not Have zero AS dENominator.\n\nsImplIfy(\"1/5\", \"5/1\") = truE\nsIMpLIFy(\"1/6\", \"2/1\") = fAlsE\nsimplIfy(\"7/10\", \"10/2\") = fAlSE\n*/\n#incLUDe<stdiO.H>\n#iNCLUdE<STring>\nusing namEspace std;\nbool simplify(string x,string n){\n", "canonical_solution": "    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"5/1\", \"3/1\") == true);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n    assert (simplify(\"2/10\", \"50/10\") == true);\n    assert (simplify(\"7/2\", \"4/2\") == true);\n    assert (simplify(\"11/6\", \"6/1\") == true);\n    assert (simplify(\"2/3\", \"5/2\") == false);\n    assert (simplify(\"5/2\", \"3/5\") == false);\n    assert (simplify(\"2/4\", \"8/4\") == true);\n    assert (simplify(\"2/4\", \"4/2\") == true);\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/5\", \"1/5\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (simplify(\"1/5\", \"5/1\") == true);\n    assert (simplify(\"1/6\", \"2/1\") == false);\n    assert (simplify(\"7/10\", \"10/2\") == false);\n}\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*\nYouR tasK is to ImpLemenT a funcTion thaT wiLl simplify the ExpREsSiOn\nx * n. THE fuNction returns TRUe if x * n Evaluates tO a whole number And faLsE\nOtHeRWiSe. BotH x and n, are STrING rePrESEntAtIOn Of a fraCtiOn, aND haVe the FolLoWiNG FOrmAt,\n<numeratOR>/<DEnominator> WhERe both nUmeraTor And deNOmInaTOr aRe PosITive WhoLe NUMbers.\n\nYOu can assuMe THAt x, aNd n ARe ValId FRAcTiOnS, and dO not Have zero AS dENominator.\n\nsImplIfy(\"1/5\", \"5/1\") = truE\nsIMpLIFy(\"1/6\", \"2/1\") = fAlsE\nsimplIfy(\"7/10\", \"10/2\") = fAlSE\n*/\n#incLUDe<stdiO.H>\n#iNCLUdE<STring>\nusing namEspace std;\nbool simplify(string x,string n){\n\tint xi,ni;\n\tbool ans=false;\n\tistringstream ss(x);\n\tistringstream sn(n);\n\tss>>xi;\n\tsn>>ni;\n\tif(xi==0&&ni==0)return false;\n\tif(xi==0)return true;\n\tif(ni==0)return false;\n\tif(xi==1)return true;\n\tif(ni==1)return false;\n\tif(xi==ni)return true;\n\tif(xi%ni==0)return true;\n\treturn false;\n}\n\nint main(){\n\tstring x,n;\n\twhile(cin>>x>>n){\n\t\tif(simplify(x,n))cout<<\"TRUE\"<<endl;\n\t\telse cout<<\"FALSE\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/145", "prompt": "/*\nWriTe a fUnctiOn wHich sOrts tHe given VecTor of IntEGeRs\nIn asCEndIng order accorDINg to The sum of their Digits.\nNote: if There ArE SeVeRAl Items With simILaR sum OF thEiR DIgiTs,\nORdEr theM baSed ON thEir inDex in OrIgINAL veCtor.\n\nFor exAMPLe:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n", "canonical_solution": "    vector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit[j])\n    {\n        m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;\n        m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;\n    }\n     \n    return nums;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46}) , {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457}));\n    assert (issame(order_by_points({}) , {}));\n    assert (issame(order_by_points({1, -11, -32, 43, 54, -98, 2, -3}) , {-3, -32, -98, -11, 1, 2, 43, 54}));\n    assert (issame(order_by_points({1,2,3,4,5,6,7,8,9,10,11}) , {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9}));\n    assert (issame(order_by_points({0,6,6,-76,-21,23,4}) , {-76, -21, 0, 4, 23, 6, 6}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(order_by_points({1, 11, -1, -11, -12}) , {-1, -11, 1, -12, 11}));\n    assert (issame(order_by_points({}) , {}));\n}\n", "entry_point": "order_by_points", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn wHich sOrts tHe given VecTor of IntEGeRs\nIn asCEndIng order accorDINg to The sum of their Digits.\nNote: if There ArE SeVeRAl Items With simILaR sum OF thEiR DIgiTs,\nORdEr theM baSed ON thEir inDex in OrIgINAL veCtor.\n\nFor exAMPLe:\n>>> order_by_points({1, 11, -1, -11, -12}) == {-1, -11, 1, -12, 11}\n>>> order_by_points({}) == {}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> order_by_points(vector<int> nums){\n    vector<int> res;\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++){\n        sum += nums[i];\n    }\n    for(int i = 0; i < nums.size(); i++){\n        res.push_back(nums[i] + sum);\n    }\n    return res;\n}\n\nint main(){\n    vector<int> nums = {1, 11, -1, -11, -12};\n    vector<int> res = order_by_points(nums);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/146", "prompt": "/*\nWriTe a fUnctiOn tHat taKes a vEctor of NumBers aS inPUt AnD retURns \nThe number of elEMEnts in The vector tHat are greateR than 10 AnD BoTh \nFIrSt and Last digITs OF A nuMbER Are OdD (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({5, -2, 1, -5}) == 0  );\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n    assert (specialFilter({43, -12, 93, 125, 121, 109}) == 4);\n    assert (specialFilter({71, -2, -33, 75, 21, 19}) == 3);\n    assert (specialFilter({1}) == 0              );\n    assert (specialFilter({}) == 0                   );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (specialFilter({15, -73, 14, -15}) == 1);\n    assert (specialFilter({33, -2, -3, 45, 21, 109}) == 2);\n}\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat taKes a vEctor of NumBers aS inPUt AnD retURns \nThe number of elEMEnts in The vector tHat are greateR than 10 AnD BoTh \nFIrSt and Last digITs OF A nuMbER Are OdD (1, 3, 5, 7, 9).\nFor example:\nspecialFilter({15, -73, 14, -15}) => 1 \nspecialFilter({33, -2, -3, 45, 21, 109}) => 2\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint specialFilter(vector<int> nums){\n\tint count = 0;\n\tfor(int i = 0; i < nums.size(); i++){\n\t\tif(nums[i] % 2 == 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tvector<int> nums;\n\tint num;\n\twhile(scanf(\"%d\", &num)!= EOF){\n\t\tnums.push_back(num);\n\t}\n\tprintf(\"%d\\n\", specialFilter(nums));\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/147", "prompt": "/*\nYou Are gIven a pOsiTive iNtegeR n. You havE to CreatE an INtEgEr veCTor a Of length n.\n    For eaCH i (1 ≤ i ≤ n), The vAlue of a{i} = i * i - i + 1.\n    RetuRn the number oF tripLeS (a{i}, a{j}, a{k}) Of a WhERe i < j < K, \nand a[i] + a[j] + a[k] iS a multipLE oF 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n", "canonical_solution": "    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i-i+1)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];\n    }\n    sum=sum2;\n    sum2={{0,0,0}};\n    }\n\n    return sum[n][0];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n    assert (get_matrix_triples(6) == 4);\n    assert (get_matrix_triples(10) == 36);\n    assert (get_matrix_triples(100) == 53361);\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (get_matrix_triples(5) == 1);\n}\n", "entry_point": "get_matrix_triples", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a pOsiTive iNtegeR n. You havE to CreatE an INtEgEr veCTor a Of length n.\n    For eaCH i (1 ≤ i ≤ n), The vAlue of a{i} = i * i - i + 1.\n    RetuRn the number oF tripLeS (a{i}, a{j}, a{k}) Of a WhERe i < j < K, \nand a[i] + a[j] + a[k] iS a multipLE oF 3.\n\nExample :\n    Input: n = 5\n    Output: 1\n    Explanation: \n    a = {1, 3, 7, 13, 21}\n    The only valid triple is (1, 7, 13).\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint get_matrix_triples(int n){\n    vector<int> a(n);\n    for(int i = 0; i < n; i++){\n        a[i] = i * i - i + 1;\n    }\n    int res = 0;\n    for(int i = 0; i < n; i++){\n        for(int j = i + 1; j < n; j++){\n            for(int k = j + 1; k < n; k++){\n                if(a[i] + a[j] + a[k] == 3){\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    printf(\"%d\\n\", get_matrix_triples(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/148", "prompt": "/*\nTheRe arE eighT planets in ouR solaR systEm: the clOseRst to The sUn \nIs mercURy, tHe next one is VeNUS, theN Earth, Mars, jupiter, SaturN, \nUranUs, nEpTuNE.\nWRite a FunctioN ThAT TakEs TWO plAnET nAmes aS stRinGS planet1 anD planet2. \nThe fUncTiOn SHOUld return A vector coNTAIning all planets whOsE Orbits aRe \nlocAteD betwEEn The ORbiT oF planet1 anD The oRbiT oF planet2, SOrted bY \nthe proxiMiTY To tHe SUn. \nthe FuNCTiOn ShOuld return aN empTy vector IF planet1 oR planet2\nare Not correct PlanEt nameS. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n", "canonical_solution": "    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)\n    out.push_back(planets[m]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n    assert (issame(bf(\"Neptune\", \"Venus\") , {\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Earth\") , {}));\n    assert (issame(bf(\"Mars\", \"Earth\") , {}));\n    assert (issame(bf(\"Jupiter\", \"Makemake\") , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(bf(\"Jupiter\", \"Neptune\") , {\"Saturn\", \"Uranus\"}));\n    assert (issame(bf(\"Earth\", \"Mercury\") , {\"Venus\",}));\n    assert (issame(bf(\"Mercury\", \"Uranus\") , {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}));\n}\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/*\nTheRe arE eighT planets in ouR solaR systEm: the clOseRst to The sUn \nIs mercURy, tHe next one is VeNUS, theN Earth, Mars, jupiter, SaturN, \nUranUs, nEpTuNE.\nWRite a FunctioN ThAT TakEs TWO plAnET nAmes aS stRinGS planet1 anD planet2. \nThe fUncTiOn SHOUld return A vector coNTAIning all planets whOsE Orbits aRe \nlocAteD betwEEn The ORbiT oF planet1 anD The oRbiT oF planet2, SOrted bY \nthe proxiMiTY To tHe SUn. \nthe FuNCTiOn ShOuld return aN empTy vector IF planet1 oR planet2\nare Not correct PlanEt nameS. \nExamples\nbf(\"Jupiter\", \"Neptune\") ==> {\"Saturn\", \"Uranus\"}\nbf(\"Earth\", \"Mercury\") ==> {\"Venus\"}\nbf(\"Mercury\", \"Uranus\") ==> {\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> bf(string planet1,string planet2){\n\tvector<string> result;\n\tif(planet1==\"Mercury\"){\n\t\tif(planet2==\"Jupiter\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Uranus\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t}\n\t\telse if(planet2==\"Earth\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Mars\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Jupiter\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Uranus\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t}\n\t}\n\telse if(planet1==\"Jupiter\"){\n\t\tif(planet2==\"Mercury\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Uranus\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t}\n\t\telse if(planet2==\"Earth\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Mars\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Jupiter\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Uranus\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t}\n\t}\n\telse if(planet1==\"Mercury\"){\n\t\tif(planet2==\"Jupiter\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Uranus\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t}\n\t\telse if(planet2==\"Earth\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Mars\"){\n\t\t\tresult.push_back(\"Jupiter\");\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Jupiter\"){\n\t\t\tresult.push_back(\"Saturn\");\n\t\t\tresult.push_back(\"Uranus\");\n\t\t}\n\t\telse if(planet2==\"Saturn\"){\n\t\t\tresult.push_back(\"Earth\");\n\t\t\tresult.push_back(\"Mars\");\n\t\t\tresult.push_back", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/149", "prompt": "/*\nWriTe a fUnctiOn tHat acCepts A vector Of sTringS as A PaRaMeteR,\nDelEtes the stringS THat hAve odd lengThs from it,\nand ReturNs THe ReSUlTed veCtor witH A sORTed OrDER,\nThE vECtOr is aLwaYs a VEctOr of sTriNgS aND NEveR a vector oF NUMbers,\nand it MaY Contain DupliCatEs.\nThe ORdEr oF The VeCtoR ShouLd bE aSCEnding By length oF eACH woRd, ANd You\nShOULd return ThE vEctor SortEd by that RUlE.\nif two words Have The samE lENgTH, sort The VecTor alpHabeTiCAlly.\ntHE functIOn SHOUlD return A Vector of strinGs in sorted ordER.\nYOU maY asSuME tHAt all wOrds wIlL HavE tHe same leNGth.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    string mid;\n    sort(out.begin(),out.end());\n    for (int i=0;i<out.size();i++)\n    for (int j=1;j<out.size();j++)\n    if (out[j].length()<out[j-1].length())\n    {\n        mid=out[j];out[j]=out[j-1];out[j-1]=mid;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"school\", \"AI\", \"asdf\", \"b\"}) , {\"AI\", \"asdf\", \"school\"}));\n    assert (issame(sorted_list_sum({\"d\", \"b\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"d\", \"dcba\", \"abcd\", \"a\"}) , {\"abcd\", \"dcba\"}));\n    assert (issame(sorted_list_sum({\"AI\", \"ai\", \"au\"}) , {\"AI\", \"ai\", \"au\"}));\n    assert (issame(sorted_list_sum({\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}) , {}));\n    assert (issame(sorted_list_sum({\"aaaa\", \"bbbb\", \"dd\", \"cc\"}) , {\"cc\", \"dd\", \"aaaa\", \"bbbb\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sorted_list_sum({\"aa\", \"a\", \"aaa\"}) , {\"aa\"}));\n    assert (issame(sorted_list_sum({\"ab\", \"a\", \"aaa\", \"cd\"}) , {\"ab\", \"cd\"}));\n}\n", "entry_point": "sorted_list_sum", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat acCepts A vector Of sTringS as A PaRaMeteR,\nDelEtes the stringS THat hAve odd lengThs from it,\nand ReturNs THe ReSUlTed veCtor witH A sORTed OrDER,\nThE vECtOr is aLwaYs a VEctOr of sTriNgS aND NEveR a vector oF NUMbers,\nand it MaY Contain DupliCatEs.\nThe ORdEr oF The VeCtoR ShouLd bE aSCEnding By length oF eACH woRd, ANd You\nShOULd return ThE vEctor SortEd by that RUlE.\nif two words Have The samE lENgTH, sort The VecTor alpHabeTiCAlly.\ntHE functIOn SHOUlD return A Vector of strinGs in sorted ordER.\nYOU maY asSuME tHAt all wOrds wIlL HavE tHe same leNGth.\nFor example:\nassert vector_sort({\"aa\", \"a\", \"aaa\"}) => {\"aa\"}\nassert vector_sort({\"ab\", \"a\", \"aaa\", \"cd\"}) => {\"ab\", \"cd\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nvector<string> sorted_list_sum(vector<string> lst){\n\tvector<string> res;\n\tint sum = 0;\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tsum += lst[i].length();\n\t}\n\tfor(int i = 0; i < lst.size(); i++){\n\t\tif(sum % lst[i].length() == 0){\n\t\t\tres.push_back(lst[i]);\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tvector<string> lst = {\"aa\", \"a\", \"aaa\", \"ab\", \"cd\"};\n\tvector<string> res = sorted_list_sum(lst);\n\tfor(int i = 0; i < res.size(); i++){\n\t\tprintf(\"%s\\n\", res[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/15", "prompt": "/*\nRetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n", "canonical_solution": "    string out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(3) == \"0 1 2 3\");\n     assert (string_sequence(10) == \"0 1 2 3 4 5 6 7 8 9 10\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_sequence(0) == \"0\");\n    assert (string_sequence(5) == \"0 1 2 3 4 5\");\n}\n", "entry_point": "string_sequence", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n>>> string_sequence(0)\n\"0\"\n>>> string_sequence(5)\n\"0 1 2 3 4 5\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring string_sequence(int n){\n\tstring s;\n\tif(n==0){\n\t\ts=\"0\";\n\t\treturn s;\n\t}\n\ts=string_sequence(n-1);\n\ts+=string(1,n);\n\treturn s;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"%s\\n\",string_sequence(n).c_str());\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/150", "prompt": "/*\nA siMple ProgrAm wHich sHould return The valuE of x If n is \na PriME nUmBer aND shOuld return the value oF y OTherWise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n", "canonical_solution": "    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i==0) isp=false;\n    if (isp) return x;\n    return y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n    assert (x_or_y(3, 33, 5212) == 33);\n    assert (x_or_y(1259, 3, 52) == 3);\n    assert (x_or_y(7919, -1, 12) == -1);\n    assert (x_or_y(3609, 1245, 583) == 583);\n    assert (x_or_y(91, 56, 129) == 129);\n    assert (x_or_y(6, 34, 1234) == 1234);\n    assert (x_or_y(1, 2, 0) == 0);\n    assert (x_or_y(2, 2, 0) == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (x_or_y(7, 34, 12) == 34);\n    assert (x_or_y(15, 8, 5) == 5);\n}\n", "entry_point": "x_or_y", "seed": 0, "perturbed": true, "gc": "/*\nA siMple ProgrAm wHich sHould return The valuE of x If n is \na PriME nUmBer aND shOuld return the value oF y OTherWise.\n\nExamples:\nfor x_or_y(7, 34, 12) == 34\nfor x_or_y(15, 8, 5) == 5\n\n*/\n#include<stdio.h>\nusing namespace std;\nint x_or_y(int n,int x,int y){\n    if(n%x==0){\n        return x;\n    }\n    else{\n        return y;\n    }\n}\nint main(){\n    int n,x,y;\n    printf(\"Enter the value of x or y: \");\n    scanf(\"%d\",&n);\n    printf(\"Enter the value of x: \");\n    scanf(\"%d\",&x);\n    printf(\"Enter the value of y: \");\n    scanf(\"%d\",&y);\n    printf(\"The value of x_or_y(%d,%d,%d) is %d\\n\",n,x,y,x_or_y(n,x,y));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 0, "run_status_he": 1, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/151", "prompt": "/*\nGivEn a vEctor Of nUmberS, return the sum oF squareS of The nuMbeRS\niN tHe veCTor That are odd. IgnORE numBers that arE negative or nOt intEgERs.\n\nDoUBlE_the_dIfferenCE({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndOUBle_ThE_DIffErENcE({-1, -2, 0}) == 0\ndoubLe_tHe_dIFfeRence({9, -2}) == 81\nDouBlE_tHE_DIffErence({0}) == 0  \n\nIf tHE INput vector Is EMpty, return 0.\n*/\n#incLude<sTdiO.h>\n#incLUdE<maTH.h>\n#iNcLudE<VectOr>\nuSiNG NamespAce std;\nlong long doUbLE_The_DiFFeRenCe(VECtOr<FlOat> lst){\n", "canonical_solution": "    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]-round(lst[i])<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({}) == 0);\n    assert (double_the_difference({5, 4}) == 25);\n    assert (double_the_difference({0.1, 0.2, 0.3}) == 0 );\n    assert (double_the_difference({-10, -20, -30}) == 0 );\n    assert (double_the_difference({-1, -2, 8}) == 0);\n    assert (double_the_difference({0.2, 3, 5}) == 34);\n    \n    \n    long long odd_sum=0;\n    vector<float> lst={};\n\n    for (int i=-99;i<100;i+=2)\n    {\n        lst.push_back(i+0.0);\n        if (i>0 and i%2==1) odd_sum+=i*i;\n    }\n  \n    assert (double_the_difference(lst) == odd_sum );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (double_the_difference({1, 3, 2, 0}) == 10);\n    assert (double_the_difference({-1, -2, 0}) == 0);\n    assert (double_the_difference({9, -2}) == 81 );\n    assert (double_the_difference({0}) == 0  );\n}\n", "entry_point": "double_the_difference", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of nUmberS, return the sum oF squareS of The nuMbeRS\niN tHe veCTor That are odd. IgnORE numBers that arE negative or nOt intEgERs.\n\nDoUBlE_the_dIfferenCE({1, 3, 2, 0}) == 1 + 9 + 0 + 0 = 10\ndOUBle_ThE_DIffErENcE({-1, -2, 0}) == 0\ndoubLe_tHe_dIFfeRence({9, -2}) == 81\nDouBlE_tHE_DIffErence({0}) == 0  \n\nIf tHE INput vector Is EMpty, return 0.\n*/\n#incLude<sTdiO.h>\n#incLUdE<maTH.h>\n#iNcLudE<VectOr>\nuSiNG NamespAce std;\nlong long doUbLE_The_DiFFeRenCe(VECtOr<FlOat> lst){\n\tlong long sum = 0;\n\tfor(auto& num:lst){\n\t\tif(num.IsOdd()){\n\t\t\tsum += num.GetValue();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long doUBlE_The_DIffErEncE(VECtOr<FlOat> lst){\n\tlong long sum = 0;\n\tfor(auto& num:lst){\n\t\tif(num.IsNegative()){\n\t\t\tsum += num.GetValue();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long dooubLe_tHe_dIFfeRence(VECtOr<FlOat> lst){\n\tlong long sum = 0;\n\tfor(auto& num:lst){\n\t\tif(num.IsNegative()){\n\t\t\tsum += num.GetValue();\n\t\t}\n\t}\n\treturn sum;\n}\n\nlong long douBlE_tHe_DIffErence(VECtOr<FlOat> lst){\n\tlong long sum = 0;\n\tfor(auto& num:lst){\n\t\tif(num.IsZero()){\n\t\t\tsum += num.GetValue();\n\t\t}\n\t}\n\treturn sum;\n}\n\nint main(){\n\tVECtOr<FlOat> lst = {1, 3, 2, 0};\n\tstd::cout << doUbLE_The_DiFFeRenCe(lst) << std::endl;\n\tstd::cout << doUBlE_The_DIffErEncE(lst) << std::endl;\n\tstd::cout << dooubLe_tHe_dIFfeRence(lst) << std::endl;\n\tstd::cout << douBlE_tHe_DIffErence(lst) << std::endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/152", "prompt": "/*\nI thInk wE all rEmeMber tHat feEling whEn tHe resUlt OF sOmE lonG-AwaIted\nevent is fiNALly kNown. The feeLings and thouGhts yOu HAvE aT ThAt momEnt are\ndEFiNITelY wORTh nOtINg Down aNd cOmpARinG.\nYour TasK iS tO DETerMine if a peRSON correctly GuESsed the ResulTs oF a numBEr Of mATchEs.\nyou ARe giVen TwO VEctors Of scores aNd GUEssEs OF eQuaL lENGtH, wHeRe eacH indEx shows a MAtCH. \nReturn a veCtor Of the sAmE LeNGTh dEnoTing hoW far OfF Each guess WAS. If theY HaVE GUeSSEd correctly,\nthE value is 0, and IF nOT, thE vaLuE Is THe absoLute dIfFEreNcE between THe guess anD the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n", "canonical_solution": "    vector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,0,0,0,0,0},{0,0,0,0,0,0}),{0,0,0,0,0,0}));\n    assert (issame(compare({1,2,3},{-1,-2,-3}),{2,4,6}));\n    assert (issame(compare({1,2,3,5},{-1,2,3,4}),{2,0,0,1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(compare({1,2,3,4,5,1},{1,2,3,4,2,-2}),{0,0,0,0,3,3}));\n    assert (issame(compare({0,5,0,0,0,4},{4,1,1,0,0,-2}),{4,4,1,0,0,6}));\n}\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*\nI thInk wE all rEmeMber tHat feEling whEn tHe resUlt OF sOmE lonG-AwaIted\nevent is fiNALly kNown. The feeLings and thouGhts yOu HAvE aT ThAt momEnt are\ndEFiNITelY wORTh nOtINg Down aNd cOmpARinG.\nYour TasK iS tO DETerMine if a peRSON correctly GuESsed the ResulTs oF a numBEr Of mATchEs.\nyou ARe giVen TwO VEctors Of scores aNd GUEssEs OF eQuaL lENGtH, wHeRe eacH indEx shows a MAtCH. \nReturn a veCtor Of the sAmE LeNGTh dEnoTing hoW far OfF Each guess WAS. If theY HaVE GUeSSEd correctly,\nthE value is 0, and IF nOT, thE vaLuE Is THe absoLute dIfFEreNcE between THe guess anD the score.\n\n\nexample:\n\ncompare({1,2,3,4,5,1},{1,2,3,4,2,-2}) -> {0,0,0,0,3,3}\ncompare({0,5,0,0,0,4},{4,1,1,0,0,-2}) -> {4,4,1,0,0,6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<int> compare(vector<int> game,vector<int> guess){\n\tint i,j,k,n,m,l,t,s,t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12,t13,t14,t15,t16,t17,t18,t19,t20,t21,t22,t23,t24,t25,t26,t27,t28,t29,t30,t31,t32,t33,t34,t35,t36,t37,t38,t39,t40,t41,t42,t43,t44,t45,t46,t47,t48,t49,t50,t51,t52,t53,t54,t55,t56,t57,t58,t59,t60,t61,t62,t63,t64,t65,t66,t67,t68,t69,t70,t71,t72,t73,t74,t75,t76,t77,t78,t79,t80,t81,t82,t83,t84,t85,t86,t87,t88,t89,t90,t91,t92,t93,t94,t95,t96,t97,t98,t99,t100,t101,t102,t103,t104,t105,t106,t107,t108,t109,t110,t111,t112,t113,t114,t115,t116,t117,t118,t119,t120,t121,t122,t123,t124,t125,t126,t127,t128,t129,t130,t131,t132,t133,t134,t135,t136,t137,t138,t139,t140,t141,t142,t143,t144,t145,t146,t147,t148,t149,t150,t151,t152,t153,t154,t155,t156,t157,t158,t159,t160,t161,t162,t163,t164,t165,t166,t167,t168,t169,t170,t171,t172,t173,t174,t175,t176,t177,t178,t179,t180,t181,t182,t183,t184,t185,t186,t187,t188,t189,t190,t191,t192,t193,t194,t195,t196,t197,t198,t199,t200,t201,t202,t203,t204,t205,t206,t207,t208,t209,t210,t211,t212,t213,t214,t215,t216,t217,t218,t219,t220,t221,t222,t223,t224,t225,t226,t227,t228,t229,t230,t231,t232,t233,t234,t235,t236,t237,t238,t239,t240,t241,t242,t243,t244,t245,t246,t247,t248,t249,t250,t251,t252,t253,t254,t255,t256,t257,t258,t259,t260,t261,t262,t263,t264,t265,t266,t267,t268,t269,t270,t271,t272,t273,t274,t275,t276,t277,t278,t279,t280,t281,t282,t283,t284,t285,t286,t287,t288,t289,t290,t291,t292,t293,t294,t295,t296,t297,t298,t299,t300,t301,t302,t303,t304,t305,t306,t307,t308,t309,t310,t311,t312,t313,t314,t315,t316,t317,t318,t319,t320,t321,t322,t323,t324,t325,t326,t327,t328,t329,t330,t331,t332,t333,t334,t335,t336,t337,t338,t339,t340,t341,t342,t343,t344,t345,t346,t347,t348,t349,t350,t351,t352,t353,t354,t355,t356,t357,t358,t359,t360,t361,t362,t363,t364,t365,t366,t367,t368,t369,t370,t371,t372,t373", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/153", "prompt": "/*\nYou Will Be givEn tHe namE of a cLass (a stRinG) and a VecTOr Of extensions.\nThe extensions Are tO Be uSed to load addiTIOnal Classes to tHe class. The\nstRengtH oF ThE eXTeNsion Is as folLOwS: lEt CaP BE The NuMBeR of thE upPerCAse\nLetteRs in tHe ExTENSioN's name, and LET sM be the numBeR Of lowerCase lEttErs \nin thE ExTenSIon'S nAme, THe strength is GivEn BY The fraCtion CAP - Sm. \nYOU ShoUlD FiNd tHe strongest EXTeNsIoN and return a StriNg in this \nfoRMaT: className.STronGestExTeNSiONnamE.\nIf There aRe twO oR More extensions WITh the sAMe strength, YOU ShOULd\nchoose the onE that comes fIRsT in The VecToR.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "canonical_solution": "    string strongest=\"\";\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+'.'+strongest;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"Watashi\", {\"tEN\", \"niNE\", \"eIGHt8OKe\"}) == \"Watashi.eIGHt8OKe\");\n    assert (Strongest_Extension(\"Boku123\", {\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}) == \"Boku123.YEs.WeCaNe\");\n    assert (Strongest_Extension(\"__YESIMHERE\", {\"t\", \"eMptY\", \"(nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}) == \"__YESIMHERE.NuLl__\");\n    assert (Strongest_Extension(\"K\", {\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}) == \"K.TAR\");\n    assert (Strongest_Extension(\"__HAHA\", {\"Tab\", \"123\", \"781345\", \"-_-\"}) == \"__HAHA.123\");\n    assert (Strongest_Extension(\"YameRore\", {\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}) == \"YameRore.okIWILL123\");\n    assert (Strongest_Extension(\"finNNalLLly\", {\"Die\", \"NowW\", \"Wow\", \"WoW\"}) == \"finNNalLLly.WoW\");\n    assert (Strongest_Extension(\"_\", {\"Bb\", \"91245\"}) == \"_.Bb\");\n    assert (Strongest_Extension(\"Sp\", {\"671235\", \"Bb\"}) == \"Sp.671235\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\");\n}\n", "entry_point": "Strongest_Extension", "seed": 0, "perturbed": true, "gc": "/*\nYou Will Be givEn tHe namE of a cLass (a stRinG) and a VecTOr Of extensions.\nThe extensions Are tO Be uSed to load addiTIOnal Classes to tHe class. The\nstRengtH oF ThE eXTeNsion Is as folLOwS: lEt CaP BE The NuMBeR of thE upPerCAse\nLetteRs in tHe ExTENSioN's name, and LET sM be the numBeR Of lowerCase lEttErs \nin thE ExTenSIon'S nAme, THe strength is GivEn BY The fraCtion CAP - Sm. \nYOU ShoUlD FiNd tHe strongest EXTeNsIoN and return a StriNg in this \nfoRMaT: className.STronGestExTeNSiONnamE.\nIf There aRe twO oR More extensions WITh the sAMe strength, YOU ShOULd\nchoose the onE that comes fIRsT in The VecToR.\nFor example, if you are given \"Slices\" as the class and a vector of the\nextensions: {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"} then you should\nreturn \"Slices.SErviNGSliCes\" since \"SErviNGSliCes\" is the strongest extension \n(its strength is -1).\nExample:\nfor Strongest_Extension(\"my_class\", {\"AA\", \"Be\", \"CC\"}) == \"my_class.AA\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint l=0;\n\tint m=0;\n\tint n=0;\n\tint p=0;\n\tint q=0;\n\tint r=0;\n\tint s=0;\n\tint t=0;\n\tint u=0;\n\tint v=0;\n\tint w=0;\n\tint x=0;\n\tint y=0;\n\tint z=0;\n\tint a=0;\n\tint b=0;\n\tint c=0;\n\tint d=0;\n\tint e=0;\n\tint f=0;\n\tint g=0;\n\tint h=0;\n\tint i1=0;\n\tint i2=0;\n\tint i3=0;\n\tint i4=0;\n\tint i5=0;\n\tint i6=0;\n\tint i7=0;\n\tint i8=0;\n\tint i9=0;\n\tint i10=0;\n\tint i11=0;\n\tint i12=0;\n\tint i13=0;\n\tint i14=0;\n\tint i15=0;\n\tint i16=0;\n\tint i17=0;\n\tint i18=0;\n\tint i19=0;\n\tint i20=0;\n\tint i21=0;\n\tint i22=0;\n\tint i23=0;\n\tint i24=0;\n\tint i25=0;\n\tint i26=0;\n\tint i27=0;\n\tint i28=0;\n\tint i29=0;\n\tint i30=0;\n\tint i31=0;\n\tint i32=0;\n\tint i33=0;\n\tint i34=0;\n\tint i35=0;\n\tint i36=0;\n\tint i37=0;\n\tint i38=0;\n\tint i39=0;\n\tint i40=0;\n\tint i41=0;\n\tint i42=0;\n\tint i43=0;\n\tint i44=0;\n\tint i45=0;\n\tint i46=0;\n\tint i47=0;\n\tint i48=0;\n\tint i49=0;\n\tint i50=0;\n\tint i51=0;\n\tint i52=0;\n\tint i53=0;\n\tint i54=0;\n\tint i55=0;\n\tint i56=0;\n\tint i57=0;\n\tint i58=0;\n\tint i59=0;\n\tint i60=0;\n\tint i61=0;\n\tint i62=0;\n\tint i63=0;\n\tint i64=0;\n\tint i65=0;\n\tint i66=0;\n\tint i67=0;\n\tint i68=0;\n\tint i69=0;\n\tint i70=0;\n\tint i71=0;\n\tint i72=0;\n\tint i73=0;\n\tint i74=0;\n\tint i75=0;\n\tint i76=0;\n\tint i77=0;\n\tint i78=0;\n\tint i79=0;\n\tint i80=0;\n\tint i81=0;\n\tint i82=0;\n\tint i83=0;\n\tint i84=0;\n\tint i85=0;\n\tint i86=0;\n\tint i87=0;\n\tint i88=0;\n\tint i89=0;\n\tint i90=0;\n\tint i91=0;\n\tint i92=0;\n\tint i93=0;\n\tint i94=0;\n\tint i95=0;\n\tint i96=0;\n\tint i97=0;\n\tint i98=0;\n\tint i99=0;\n\tint i100=0;\n\tint i101=0;\n\tint i102=0;\n\tint i103=0;\n\tint i104=0;\n\tint i105=0;\n\tint i106=0;\n\tint i107=0;\n\tint i108=0;\n\tint i109=0;\n\tint i110=0;\n\tint i111=0;\n\tint i112=0;\n\tint i113=0;\n\tint i114=0;\n\tint i115=0;\n\tint i116=0;\n\tint i117=0;\n\tint i118=0", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/154", "prompt": "/*\nYou Are gIven 2 wOrdS. You nEed to return True if tHe sEcond WorD Or AnY of iTS roTations is a subsTRIng in tHe first worD\ncycpattern_cHeck(\"aBcD\",\"AbD\") => fALsE\ncycpAttern_cHEcK(\"HEllO\",\"eLL\") => TruE\ncYCpAtterN_chEck(\"WHasSup\",\"psUs\") => fAlSe\nCYCPatTern_check(\"ABAB\",\"baa\") => true\ncyCpATtern_chEck(\"efEf\",\"eEff\") => faLSe\nCycPAttErN_chECk(\"hiMenSs\",'SIMen\") => truE\n\n*/\n#include<sTdIO.H>\n#inClUDe<StrInG>\nUSiNg NaMespaCe std;\nbool cyCpattern_CHeCK(string a,string b){\n", "canonical_solution": "    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0,i);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"xyzw\",\"xyw\") == false );\n    assert  (cycpattern_check(\"yello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whattup\",\"ptut\") == false );\n    assert  (cycpattern_check(\"efef\",\"fee\") == true );\n    assert  (cycpattern_check(\"abab\",\"aabb\") == false );\n    assert  (cycpattern_check(\"winemtt\",\"tinem\") == true );\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert  (cycpattern_check(\"abcd\",\"abd\") == false );\n    assert  (cycpattern_check(\"hello\",\"ell\") == true );\n    assert  (cycpattern_check(\"whassup\",\"psus\") == false );\n    assert  (cycpattern_check(\"abab\",\"baa\") == true );\n    assert  (cycpattern_check(\"efef\",\"eeff\") == false );\n    assert  (cycpattern_check(\"himenss\",\"simen\") == true );\n}\n", "entry_point": "cycpattern_check", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven 2 wOrdS. You nEed to return True if tHe sEcond WorD Or AnY of iTS roTations is a subsTRIng in tHe first worD\ncycpattern_cHeck(\"aBcD\",\"AbD\") => fALsE\ncycpAttern_cHEcK(\"HEllO\",\"eLL\") => TruE\ncYCpAtterN_chEck(\"WHasSup\",\"psUs\") => fAlSe\nCYCPatTern_check(\"ABAB\",\"baa\") => true\ncyCpATtern_chEck(\"efEf\",\"eEff\") => faLSe\nCycPAttErN_chECk(\"hiMenSs\",'SIMen\") => truE\n\n*/\n#include<sTdIO.H>\n#inClUDe<StrInG>\nUSiNg NaMespaCe std;\nbool cyCpattern_CHeCK(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cycpAttern_CHeCK(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chEck(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_chECk(string a,string b){\n\tfor(int i=0;i<a.length();i++){\n\t\tif(a[i]!=b[i]){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nbool cyCpATtern_check(string a,string b){\n\tfor(int i=0;", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/155", "prompt": "/*\nGivEn an IntegEr. return a VectoR that Has the nUmbEr of eVen ANd OdD digITs rEspectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n", "canonical_solution": "    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(7) , {0, 1}));\n    assert (issame(even_odd_count(-78) , {1, 1}));\n    assert (issame(even_odd_count(3452) , {2, 2}));\n    assert (issame(even_odd_count(346211) , {3, 3}));\n    assert (issame(even_odd_count(-345821) , {3, 3}));\n    assert (issame(even_odd_count(-2) , {1, 0}));\n    assert (issame(even_odd_count(-45347) , {2, 3}));\n    assert (issame(even_odd_count(0) , {1, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(even_odd_count(-12) , {1, 1}));\n    assert (issame(even_odd_count(123) , {1, 2}));\n}\n", "entry_point": "even_odd_count", "seed": 0, "perturbed": true, "gc": "/*\nGivEn an IntegEr. return a VectoR that Has the nUmbEr of eVen ANd OdD digITs rEspectively.\n\n Example:\n    even_odd_count(-12) ==> {1, 1}\n    even_odd_count(123) ==> {1, 2}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\nvector<int> even_odd_count(int num){\n    vector<int> count;\n    int i;\n    for(i=1;i<=num;i++){\n        if(i%2==0){\n            count.push_back(i);\n        }\n    }\n    return count;\n}\nint main(){\n    int num;\n    cin>>num;\n    vector<int> count=even_odd_count(num);\n    for(int i=0;i<count.size();i++){\n        cout<<count[i]<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/156", "prompt": "/*\nGivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\nand return it in lowERCase.\nrestrictioNs: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n", "canonical_solution": "    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n            number-=num[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(251) == \"ccli\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n    assert (int_to_mini_romank(500) == \"d\");\n    assert (int_to_mini_romank(1) == \"i\");\n    assert (int_to_mini_romank(4) == \"iv\");\n    assert (int_to_mini_romank(43) == \"xliii\");\n    assert (int_to_mini_romank(90) == \"xc\");\n    assert (int_to_mini_romank(94) == \"xciv\");\n    assert (int_to_mini_romank(532) == \"dxxxii\");\n    assert (int_to_mini_romank(900) == \"cm\");\n    assert (int_to_mini_romank(994) == \"cmxciv\");\n    assert (int_to_mini_romank(1000) == \"m\");\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_romank(int number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (int_to_mini_romank(19) == \"xix\");\n    assert (int_to_mini_romank(152) == \"clii\");\n    assert (int_to_mini_romank(426) == \"cdxxvi\");\n}\n", "entry_point": "int_to_mini_romank", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\nand return it in lowERCase.\nrestrictioNs: 1 <= num <= 1000\n\nExamples:\n>>> int_to_mini_roman(19) == \"xix\"\n>>> int_to_mini_roman(152) == \"clii\"\n>>> int_to_mini_roman(426) == \"cdxxvi\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring int_to_mini_romank(int number){\n\tvector<string> v;\n\tv.push_back(\"M\");\n\tv.push_back(\"CM\");\n\tv.push_back(\"D\");\n\tv.push_back(\"CD\");\n\tv.push_back(\"C\");\n\tv.push_back(\"XC\");\n\tv.push_back(\"L\");\n\tv.push_back(\"XL\");\n\tv.push_back(\"X\");\n\tv.push_back(\"IX\");\n\tv.push_back(\"V\");\n\tv.push_back(\"IV\");\n\tv.push_back(\"I\");\n\tv.push_back(\"II\");\n\tv.push_back(\"III\");\n\tv.push_back(\"IV\");\n\tv.push_back(\"V\");\n\tv.push_back(\"VI\");\n\tv.push_back(\"VII\");\n\tv.push_back(\"VIII\");\n\tv.push_back(\"IX\");\n\tv.push_back(\"X\");\n\tv.push_back(\"XI\");\n\tv.push_back(\"XII\");\n\tv.push_back(\"XIII\");\n\tv.push_back(\"XIV\");\n\tv.push_back(\"XV\");\n\tv.push_back(\"XVI\");\n\tv.push_back(\"XVII\");\n\tv.push_back(\"XVIII\");\n\tv.push_back(\"XIX\");\n\tv.push_back(\"XX\");\n\tv.push_back(\"XXI\");\n\tv.push_back(\"XXII\");\n\tv.push_back(\"XXIII\");\n\tv.push_back(\"XXIV\");\n\tv.push_back(\"XXV\");\n\tv.push_back(\"XXVI\");\n\tv.push_back(\"XXVII\");\n\tv.push_back(\"XXVIII\");\n\tv.push_back(\"XXIX\");\n\tv.push_back(\"XXX\");\n\tv.push_back(\"XXXI\");\n\tv.push_back(\"XXXII\");\n\tv.push_back(\"XXXIII\");\n\tv.push_back(\"XXXIV\");\n\tv.push_back(\"XXXV\");\n\tv.push_back(\"XXXVI\");\n\tv.push_back(\"XXXVII\");\n\tv.push_back(\"XXXVIII\");\n\tv.push_back(\"XXXIX\");\n\tv.push_back(\"XL\");\n\tv.push_back(\"XLI\");\n\tv.push_back(\"XLII\");\n\tv.push_back(\"XLIII\");\n\tv.push_back(\"XLIV\");\n\tv.push_back(\"XLV\");\n\tv.push_back(\"XLVI\");\n\tv.push_back(\"XLVII\");\n\tv.push_back(\"XLVIII\");\n\tv.push_back(\"XLIX\");\n\tv.push_back(\"L\");\n\tv.push_back(\"LI\");\n\tv.push_back(\"LII\");\n\tv.push_back(\"LIII\");\n\tv.push_back(\"LIV\");\n\tv.push_back(\"LV\");\n\tv.push_back(\"LVI\");\n\tv.push_back(\"LVII\");\n\tv.push_back(\"LVIII\");\n\tv.push_back(\"LIX\");\n\tv.push_back(\"LX\");\n\tv.push_back(\"LXI\");\n\tv.push_back(\"LXII\");\n\tv.push_back(\"LXIII\");\n\tv.push_back(\"LXIV\");\n\tv.push_back(\"LXV\");\n\tv.push_back(\"LXVI\");\n\tv.push_back(\"LXVII\");\n\tv.push_back(\"LXVIII\");\n\tv.push_back(\"LXIX\");\n\tv.push_back(\"LXX\");\n\tv.push_back(\"LXXI\");\n\tv.push_back(\"LXXII\");\n\tv.push_back(\"LXXIII\");\n\tv.push_back(\"LXXIV\");\n\tv.push_back(\"LXXV\");\n\tv.push_back(\"LXXVI\");\n\tv.push_back(\"LXXVII\");\n\tv.push_back(\"LXXVIII\");\n\tv.push_back(\"LXXIX\");\n\tv.push_back(\"LXXX\");\n\tv.push_back(\"LXXXI\");\n\tv.push_back(\"LXXXII\");\n\tv.push_back(\"LXXXIII\");\n\tv.push_back(\"LXXXIV\");\n\tv.push_back(\"LXXXV\");\n\tv.push_back(\"LXXXVI\");\n\tv.push_back(\"LXXXVII\");\n\tv.push_back(\"LXXXVIII\");\n\tv.push_back(\"LXXXIX\");\n\tv.push_back(\"XC\");\n\tv.push_back(\"XCI\");\n\tv.push_back(\"XCII\");\n\tv.push_back(\"XCIII\");\n\tv.push_back(\"XCIV\");\n\tv.push_back(\"XCV\");\n\tv.push_back(\"XCVI\");\n\tv.push_back(\"XCVII\");\n\tv.push_back(\"XCVIII\");\n\tv.push_back(\"XCIX\");\n\tv.push_back(\"C\");\n\tv.push_back(\"CI\");\n\tv.push_back(\"CII\");\n\tv.push_back(\"CIII\");\n\tv.push_back(\"CIV\");\n\tv.push_back(\"CV\");\n\tv.push_back(\"CVI\");\n\tv.push_back(\"CVII\");\n\tv.push_back(\"CVIII\");\n\tv.push_back(\"CIX\");\n\tv.push_back(\"CX\");\n\tv.push_back(\"CXI\");\n\tv.push_", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/157", "prompt": "/*\nGivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\nsides form a RIGht-aNgled trianGle, false otheRwise.\na rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or \n90 DegreE.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n", "canonical_solution": "    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n    assert (right_angle_triangle(10, 6, 8) == true);\n    assert (right_angle_triangle(2, 2, 2) == false);\n    assert (right_angle_triangle(7, 24, 25) == true);\n    assert (right_angle_triangle(10, 5, 7) == false);\n    assert (right_angle_triangle(5, 12, 13) == true);\n    assert (right_angle_triangle(15, 8, 17) == true);\n    assert (right_angle_triangle(48, 55, 73) == true);\n    assert (right_angle_triangle(1, 1, 1) == false);\n    assert (right_angle_triangle(2, 2, 10) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (right_angle_triangle(3, 4, 5) == true);\n    assert (right_angle_triangle(1, 2, 3) == false);\n}\n", "entry_point": "right_angle_triangle", "seed": 0, "perturbed": true, "gc": "/*\nGivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\nsides form a RIGht-aNgled trianGle, false otheRwise.\na rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or \n90 DegreE.\nExample:\nright_angle_triangle(3, 4, 5) == true\nright_angle_triangle(1, 2, 3) == false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool right_angle_triangle(float a,float b,float c){\n\tfloat ab = a + b;\n\tfloat ac = a + c;\n\tfloat bc = b + c;\n\tif(ab == ac && ab == bc)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter the length of the first side: \");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter the length of the second side: \");\n\tscanf(\"%f\",&b);\n\tprintf(\"Enter the length of the third side: \");\n\tscanf(\"%f\",&c);\n\tif(right_angle_triangle(a,b,c))\n\t\tprintf(\"The three sides form a right angle triangle.\");\n\telse\n\t\tprintf(\"The three sides do NOT form a right angle triangle.\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/158", "prompt": "/*\nWriTe a fUnctiOn tHat acCepts A vector Of sTringS.\nThE VeCtOr coNTaiNs different words. ReTURn thE word with mAximum number\nOf unique chaRaCTeRs. iF mUltipLe strinGS hAVE maXiMUM nuMbER oF unique\ncharacters, return the oNe wHicH ComEs firSt in lExIcOGRAphIcal order.\n\nFIND_max({\"name\", \"of\", 'StRIng\"}) == 'striNg\"\nfinD_maX({\"name\", \"ENaM\", \"gaME\"}) == \"enAm\"\nFinD_Max({\"aAaaAaA\", \"BB\" ,\"cc\"}) == \"aaaAaaa\"\n*/\n#incluDe<STDio.H>\n#iNClUde<VeCTOr>\n#InClUde<stRing>\n#Include<aLGoRIthm>\nusing nAmesPace std;\nstring find_max(vector<string> words){\n", "canonical_solution": "    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n    assert ((find_max({\"abc\", \"cba\"}) == \"abc\"));\n    assert ((find_max({\"play\", \"this\", \"game\", \"of\",\"footbott\"}) == \"footbott\"));\n    assert ((find_max({\"we\", \"are\", \"gonna\", \"rock\"}) == \"gonna\"));\n    assert ((find_max({\"we\", \"are\", \"a\", \"mad\", \"nation\"}) == \"nation\"));\n    assert ((find_max({\"this\", \"is\", \"a\", \"prrk\"}) == \"this\"));\n    assert ((find_max({\"b\"}) == \"b\"));\n    assert ((find_max({\"play\", \"play\", \"play\"}) == \"play\"));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert ((find_max({\"name\", \"of\", \"string\"}) == \"string\"));\n    assert ((find_max({\"name\", \"enam\", \"game\"}) == \"enam\"));\n    assert ((find_max({\"aaaaaaa\", \"bb\", \"cc\"}) == \"aaaaaaa\"));\n}\n", "entry_point": "find_max", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat acCepts A vector Of sTringS.\nThE VeCtOr coNTaiNs different words. ReTURn thE word with mAximum number\nOf unique chaRaCTeRs. iF mUltipLe strinGS hAVE maXiMUM nuMbER oF unique\ncharacters, return the oNe wHicH ComEs firSt in lExIcOGRAphIcal order.\n\nFIND_max({\"name\", \"of\", 'StRIng\"}) =='striNg\"\nfinD_maX({\"name\", \"ENaM\", \"gaME\"}) == \"enAm\"\nFinD_Max({\"aAaaAaA\", \"BB\",\"cc\"}) == \"aaaAaaa\"\n*/\n#incluDe<STDio.H>\n#iNClUde<VeCTOr>\n#InClUde<stRing>\n#Include<aLGoRIthm>\nusing nAmesPace std;\nstring find_max(vector<string> words){\n\tstring max = \"\";\n\tfor(int i = 0; i < words.size(); i++){\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(max.size() < words[i].size()){\n\t\t\t\tmax = words[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nstring find_max(vector<string> words){\n\tstring max = \"\";\n\tfor(int i = 0; i < words.size(); i++){\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(max.size() < words[i].size()){\n\t\t\t\tmax = words[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nstring find_max(vector<string> words){\n\tstring max = \"\";\n\tfor(int i = 0; i < words.size(); i++){\n\t\tfor(int j = 0; j < words[i].size(); j++){\n\t\t\tif(max.size() < words[i].size()){\n\t\t\t\tmax = words[i][j];\n\t\t\t}\n\t\t}\n\t}\n\treturn max;\n}\nint main(){\n\tvector<string> words;\n\twords.push_back(\"name\");\n\twords.push_back(\"of\");\n\twords.push_back(\"StRIng\");\n\twords.push_back(\"aAaaAaA\");\n\twords.push_back(\"BB\");\n\twords.push_back(\"cc\");\n\tcout << find_max(words) << endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/159", "prompt": "/*\nYou\"Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\nbut now you need to eat mORE carRots to compLete the day's mEals.\nyOu SHoUlD return A vEctor Of { total number OF eATEn cArROTs aFtER yOur meAls,\n                                The number OF caRrots LefT aFtER YOur Meals }\nif thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n", "canonical_solution": "    if (need>remaining) return {number+remaining, 0};\n    return {number+need,remaining-need};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n    \n    assert (issame(eat(4, 5, 7) , {9, 2}));\n    assert (issame(eat(4, 5, 1) , {5, 0}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(eat(5, 6, 10) , {11, 4}));\n    assert (issame(eat(4, 8, 9) , {12, 1}));\n    assert (issame(eat(1, 10, 10) , {11, 0}));\n    assert (issame(eat(2, 11, 5) , {7, 0}));\n}\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\nYou\"Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\nbut now you need to eat mORE carRots to compLete the day's mEals.\nyOu SHoUlD return A vEctor Of { total number OF eATEn cArROTs aFtER yOur meAls,\n                                The number OF caRrots LefT aFtER YOur Meals }\nif thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n\nExample:\n* eat(5, 6, 10) -> {11, 4}\n* eat(4, 8, 9) -> {12, 1}\n* eat(1, 10, 10) -> {11, 0}\n* eat(2, 11, 5) -> {7, 0}\n\nVariables:\n@number : integer\n    the number of carrots that you have eaten.\n@need : integer\n    the number of carrots that you need to eat.\n@remaining : integer\n    the number of remaining carrots thet exist in stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nHave fun :)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> eat(int number,int need,int remaining){\n    vector<int> result;\n    int total = number + remaining;\n    int count = 0;\n    while(total > 0){\n        if(total >= need){\n            result.push_back(need);\n            total -= need;\n            count++;\n        }else{\n            result.push_back(total);\n            total = 0;\n        }\n    }\n    return result;\n}\nint main(){\n    int number,need,remaining;\n    scanf(\"%d %d %d\",&number,&need,&remaining);\n    vector<int> result = eat(number,need,remaining);\n    for(int i = 0;i < result.size();i++){\n        printf(\"%d \",result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/16", "prompt": "/*\nGivEn a sTring, FinD out hOw manY distinct characTerS (regaRdlESs Of Case) DOes It consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n", "canonical_solution": "    vector<char> distinct={};\n    transform(str.begin(),str.end(),str.begin(),::tolower);\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"\") == 0);\n    assert (count_distinct_characters(\"abcde\") == 5);\n    assert (count_distinct_characters(\"abcdecadeCADE\") == 5);\n    assert (count_distinct_characters(\"aaaaAAAAaaaa\") == 1);\n    assert (count_distinct_characters(\"Jerry jERRY JeRRRY\") == 5);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_distinct_characters(\"xyzXYZ\") == 3);\n    assert (count_distinct_characters(\"Jerry\") == 4);\n}\n", "entry_point": "count_distinct_characters", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring, FinD out hOw manY distinct characTerS (regaRdlESs Of Case) DOes It consist of\n>>> count_distinct_characters(\"xyzXYZ\")\n3\n>>> count_distinct_characters(\"Jerry\")\n4\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_distinct_characters(string str){ \n\tint count = 0;\n\tfor(int i = 0; i < str.size(); i++){\n\t\tfor(int j = i+1; j < str.size(); j++){\n\t\t\tif(str[i] == str[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring str;\n\tcin >> str;\n\tcout << count_distinct_characters(str) << endl;\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/160", "prompt": "/*\nGivEn twO vectOrs OperaTor, anD operand. The firSt vEctor Has BAsIc AlgeBRa oPerations, and \ntHE SecoNd vector is A vector of intEgers. usE ThE tWO gIven vEctors tO BuILD thE aLGEbrIc \nEXpRessiOn aNd return tHE evAluatIon Of ThIS EXprEssion.\n\nThe BASIc algebra oPeRAtions:\nADditiOn ( + ) \nSUbtraCTiOn ( - ) \nMULtiPlIcaTIon ( * ) \nFLooR dIVIsion ( // ) \nEXponentiaTiON ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "canonical_solution": "    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"*\" or operato[i]==\"//\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"*\")\n            operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"+\" or operato[i]==\"-\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        if (operato[i]==\"+\")\n            operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];\n        else\n            operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];\n        posto[i+1]=posto[i];\n        }\n    return operand[0];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (do_algebra({\"**\", \"*\", \"+\"}, {2, 3, 4, 5}) == 37);\n    assert (do_algebra({\"+\", \"*\", \"-\"}, {2, 3, 4, 5}) == 9);\n    assert (do_algebra({\"//\", \"*\"}, {7, 3, 4}) == 8);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n", "example_test": "", "entry_point": "do_algebra", "seed": 0, "perturbed": true, "gc": "/*\nGivEn twO vectOrs OperaTor, anD operand. The firSt vEctor Has BAsIc AlgeBRa oPerations, and \ntHE SecoNd vector is A vector of intEgers. usE ThE tWO gIven vEctors tO BuILD thE aLGEbrIc \nEXpRessiOn aNd return tHE evAluatIon Of ThIS EXprEssion.\n\nThe BASIc algebra oPeRAtions:\nADditiOn ( + ) \nSUbtraCTiOn ( - ) \nMULtiPlIcaTIon ( * ) \nFLooR dIVIsion ( // ) \nEXponentiaTiON ( ** ) \n\nExample:\noperator{\"+\", \"*\", \"-\"}\nvector = {2, 3, 4, 5}\nresult = 2 + 3 * 4 - 5\n=> result = 9\n\nNote:\n    The length of operator vector is equal to the length of operand vector minus one.\n    Operand is a vector of of non-negative integers.\n    Operator vector has at least one operator, and operand vector has at least two operands.\n\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n    int result = 0;\n    for(int i = 0; i < operato.size(); i++){\n        if(operato[i] == \"+\"){\n            result += operand[i];\n        }\n        else if(operato[i] == \"-\"){\n            result -= operand[i];\n        }\n        else if(operato[i] == \"*\"){\n            result *= operand[i];\n        }\n        else if(operato[i] == \"/\"){\n            result /= operand[i];\n        }\n        else if(operato[i] == \"//\"){\n            result = result / operand[i];\n        }\n        else if(operato[i] == \"**\"){\n            result = result * pow(operand[i], 2);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> operato;\n    vector<int> operand;\n    int result;\n    int i = 0;\n    while(scanf(\"%s\", &operato[i])!= EOF){\n        operato[i] = operato[i].substr(1, operato[i].size() - 2);\n        operato.push_back(\"0\");\n        i++;\n    }\n    int j = 0;\n    while(scanf(\"%d\", &operand[j])!= EOF){\n        operand[j] = operand[j] - 1;\n        j++;\n    }\n    result = do_algebra(operato, operand);\n    printf(\"%d\\n\", result);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/161", "prompt": "/*\nYou Are gIven a StrIng s.\nif s[i] is A lettEr, reverSe iTs casE frOM lOwEr to UPpeR or vise versa, \noTHErwiSe keep it as It is.\nIf the strIng coNtAInS nO LeTters, Reverse THe STRinG.\nTHE FunCtIOn ShoulD return thE reSUltEd strIng.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n", "canonical_solution": "    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else if (w>=97 and w<=122) w=w-32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"AsDf\") == \"aSdF\");\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n    assert (solve(\"#AsdfW^45\") == \"#aSDFw^45\");\n    assert (solve(\"#6@2\") == \"2@6#\");\n    assert (solve(\"#$a^D\") == \"#$A^d\");\n    assert (solve(\"#ccc\") == \"#CCC\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(\"1234\") == \"4321\");\n    assert (solve(\"ab\") == \"AB\");\n    assert (solve(\"#a@C\") == \"#A@c\");\n}\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a StrIng s.\nif s[i] is A lettEr, reverSe iTs casE frOM lOwEr to UPpeR or vise versa, \noTHErwiSe keep it as It is.\nIf the strIng coNtAInS nO LeTters, Reverse THe STRinG.\nTHE FunCtIOn ShoulD return thE reSUltEd strIng.\nExamples\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(string s){\n\tint i,j,k;\n\tfor(i=0;i<s.length();i++){\n\t\tif(s[i]=='A'){\n\t\t\tfor(j=i+1;j<s.length();j++){\n\t\t\t\tif(s[j]=='A'){\n\t\t\t\t\tfor(k=j+1;k<s.length();k++){\n\t\t\t\t\t\tif(s[k]=='A'){\n\t\t\t\t\t\t\ts[i]=s[j]=s[k];\n\t\t\t\t\t\t\ts[j]=s[k]=s[i];\n\t\t\t\t\t\t\ts[k]=s[i]=s[j];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn s;\n}\nint main(){\n\tstring s;\n\twhile(cin>>s){\n\t\tcout<<solve(s)<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/162", "prompt": "/*\nGivEn a sTring 'text\", return Its Md5 hasH equiValent sTriNg.\nIf 'text\" iS an EMpTy StriNG, return NoNe.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n", "canonical_solution": "    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<10) w=48+md[i]%16;\n            else w=87+md[i]%16;\n            out_str=out_str+w;\n        }\n    return out_str;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n    assert (string_to_md5(\"\") == \"None\");\n    assert (string_to_md5(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\");\n    assert (string_to_md5(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\");\n}\n", "declaration": "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\");\n}\n", "entry_point": "string_to_md5", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring 'text\", return Its Md5 hasH equiValent sTriNg.\nIf 'text\" iS an EMpTy StriNG, return NoNe.\n\n>>> string_to_md5(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\n*/\n#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\nstring string_to_md5(string text){\n    MD5_CTX context;\n    char digest[MD5_DIGEST_LENGTH];\n    MD5_Init(&context);\n    MD5_Update(&context,text.c_str(),text.size());\n    MD5_Final(digest,&context);\n    return string(digest);\n}\n\nint main(){\n    string text = \"Hello world\";\n    cout<<string_to_md5(text)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/163", "prompt": "/*\nGivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\nand b, in aScenDIng Order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n", "canonical_solution": "    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<=b;i++)\n    if (i<10 and i%2==0) out.push_back(i);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 10) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(132, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(17,89) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(generate_integers(2, 8) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(8, 2) , {2, 4, 6, 8}));\n    assert (issame(generate_integers(10,14) , {}));\n}\n", "entry_point": "generate_integers", "seed": 0, "perturbed": true, "gc": "/*\nGivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\nand b, in aScenDIng Order.\n\nFor example:\ngenerate_integers(2, 8) => {2, 4, 6, 8}\ngenerate_integers(8, 2) => {2, 4, 6, 8}\ngenerate_integers(10, 14) => {}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> generate_integers(int a,int b){\n\tvector<int> v;\n\tfor(int i=a;i<=b;i++){\n\t\tv.push_back(i);\n\t}\n\treturn v;\n}\nint main(){\n\tint a,b;\n\tscanf(\"%d%d\",&a,&b);\n\tvector<int> v=generate_integers(a,b);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/17", "prompt": "/*\nInpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\nyour Task is to paRse this strinG and return vEcTOr Of INtEgers CorrespONdING to HoW MAny BeATs Does eAch\nNot LAst.\n\nhere iS a lEgEnD:\n\"O\" - WHolE note, lastS FOUr beats\n\"o|\" - haLf NOte, lastS two bEatS\n\".|\" - quatER nOte, LAstS oNe bEAt\n\n>>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n", "canonical_solution": "    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"\") , {}));\n     assert (issame(parse_music(\"o o o o\") ,{4, 4, 4, 4}));\n      assert (issame(parse_music(\".| .| .| .|\") , {1, 1, 1, 1}));\n assert (issame(parse_music(\"o| o| .| .| o o o o\") , {2, 2, 1, 1, 4, 4, 4, 4}));\n  assert (issame(parse_music(\"o| .| o| .| o o| o o|\") , {2, 1, 2, 1, 4, 2, 4, 2}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_music(\"o o| .| o| o| .| .| .| .| o o\") , {4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}));\n}\n", "entry_point": "parse_music", "seed": 0, "perturbed": true, "gc": "/*\nInpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\nyour Task is to paRse this strinG and return vEcTOr Of INtEgers CorrespONdING to HoW MAny BeATs Does eAch\nNot LAst.\n\nhere iS a lEgEnD:\n\"O\" - WHolE note, lastS FOUr beats\n\"o|\" - haLf NOte, lastS two bEatS\n\".|\" - quatER nOte, LAstS oNe bEAt\n\n>>> parse_music(\"o o|.| o| o|.|.|.|.| o o\")\n{4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_music(string music_string){ \n    vector<int> result;\n    int i = 0;\n    int last_beat = 0;\n    while(i < music_string.size()){\n        if(music_string[i] == 'o'){\n            if(music_string[i+1] == 'o'){\n                last_beat = 2;\n                i += 2;\n            }else{\n                last_beat = 1;\n                i++;\n            }\n        }else if(music_string[i] == '.'){\n            result.push_back(last_beat);\n            last_beat = 0;\n            i++;\n        }else{\n            last_beat++;\n            i++;\n        }\n    }\n    return result;\n}\nint main(){\n    string music_string;\n    cin >> music_string;\n    vector<int> result = parse_music(music_string);\n    for(int i = 0; i < result.size(); i++){\n        cout << result[i] << \" \";\n    }\n    cout << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/18", "prompt": "/*\nFinD how Many tImeS a givEn substring can Be found in The OrigiNal STrInG. CouNT ovErlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n", "canonical_solution": "    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<=str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"x\") == 0);\n    assert (how_many_times(\"xyxyxyx\", \"x\") == 4);\n     assert (how_many_times(\"cacacacac\", \"cac\") == 4);\n    assert (how_many_times(\"john doe\", \"john\") == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (how_many_times(\"\", \"a\") == 0);\n    assert (how_many_times(\"aaa\", \"a\") == 3);\n    assert (how_many_times(\"aaaa\", \"aa\") == 3);\n}\n", "entry_point": "how_many_times", "seed": 0, "perturbed": true, "gc": "/*\nFinD how Many tImeS a givEn substring can Be found in The OrigiNal STrInG. CouNT ovErlaping cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint how_many_times(string str,string substring){\n\tint count=0;\n\tfor(int i=0;i<str.size();i++){\n\t\tif(str[i]==substring[0]){\n\t\t\tint j=0;\n\t\t\twhile(str[i+j]==substring[j]){\n\t\t\t\tj++;\n\t\t\t\tif(j==substring.size()){\n\t\t\t\t\tcount++;\n\t\t\t\t\ti+=j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring str=\"aaaa\";\n\tstring substr=\"aa\";\n\tcout<<how_many_times(str,substr)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/19", "prompt": "/*\nInpUt is A spacE-deLimitEd strIng of nuMbeRals fRom \"ZErO\" tO \"ninE\".\nvalId choices are \"zERO\", \"one\", 'Two\", 'three\", \"foUr\", \"five\", 'six\", 'sevEn\", \"eigHt\" ANd \"NiNE\".\nREturn The striNG wITH numbers soRtED FroM sMAlLest tO laRgeST\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n", "canonical_solution": "    map<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;i<numbers.length();i++)\n        if (numbers[i]==' ')\n        {\n            count[tonum[current]]+=1;\n            current=\"\";\n        }\n        else current+=numbers[i];\n    for (int i=0;i<10;i++)\n        for (int j=0;j<count[i];j++)\n            out=out+numto[i]+' ';\n    if (out.length()>0) out.pop_back();\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"\") == \"\");\n    assert (sort_numbers(\"three\") == \"three\");\n    assert (sort_numbers(\"three five nine\") == \"three five nine\");\n     assert (sort_numbers(\"five zero four seven nine eight\") == \"zero four five seven eight nine\");\n      assert (sort_numbers(\"six five four three two one zero\") == \"zero one two three four five six\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sort_numbers(\"three one five\") == \"one three five\");\n}\n", "entry_point": "sort_numbers", "seed": 0, "perturbed": true, "gc": "/*\nInpUt is A spacE-deLimitEd strIng of nuMbeRals fRom \"ZErO\" tO \"ninE\".\nvalId choices are \"zERO\", \"one\", 'Two\", 'three\", \"foUr\", \"five\",'six\",'sevEn\", \"eigHt\" ANd \"NiNE\".\nREturn The striNG wITH numbers soRtED FroM sMAlLest tO laRgeST\n>>> sort_numbers('three one five\")\n\"one three five\"\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nstring sort_numbers(string numbers){\n\tstring result=\"\";\n\tmap<char,int> m;\n\tfor(int i=0;i<numbers.length();i++){\n\t\tm[numbers[i]]++;\n\t}\n\tfor(int i=0;i<26;i++){\n\t\tif(m[i]>0)\n\t\t\tresult+=char(i+'A');\n\t}\n\treturn result;\n}\nint main(){\n\tstring numbers=\"ZERO one two three four five six seven eight nine ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty\";\n\tcout<<sort_numbers(numbers)<<endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/2", "prompt": "/*\nGivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\nAnd iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n(lEFtOvER pArt alWays smaLLeR THan 1).\n\nreTURn tHe DEcImal pArt Of tHE number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n", "canonical_solution": "    return number-int(number);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n assert (abs(truncate_number(1.33) - 0.33) < 1e-4);\n  assert (abs(truncate_number(123.456) - 0.456) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n assert (truncate_number(3.5) == 0.5); \n}\n", "entry_point": "truncate_number", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\nAnd iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n(lEFtOvER pArt alWays smaLLeR THan 1).\n\nreTURn tHe DEcImal pArt Of tHE number.\n>>> truncate_number(3.5)\n0.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat truncate_number(float number){\n\tint i;\n\tfloat temp;\n\ttemp = number;\n\tfor(i=0;i<=10;i++){\n\t\tif(temp>=10){\n\t\t\ttemp = temp/10;\n\t\t}\n\t\telse{\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn temp;\n}\nint main(){\n\tfloat number;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%f\",&number);\n\tprintf(\"The decimal part of the number is %f\\n\",truncate_number(number));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/20", "prompt": "/*\nFroM a suPplieD veCtor oF numbers (of leNgth at lEasT two) sEleCT aNd return Two tHAt aRe the closest tO EAch\noTher and return theM in order (smalleR numbEr, LArGeR NuMber).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}) , {3.9, 4.0}));\n    assert (issame(find_closest_elements({1.0, 2.0, 5.9, 4.0, 5.0}) , {5.0, 5.9} ));\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n      assert (issame(find_closest_elements({1.1, 2.2, 3.1, 4.1, 5.1}) , {2.2, 3.1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2}) ,{2.0, 2.2}));\n     assert (issame(find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}) ,{2.0, 2.0}));\n}\n", "entry_point": "find_closest_elements", "seed": 0, "perturbed": true, "gc": "/*\nFroM a suPplieD veCtor oF numbers (of leNgth at lEasT two) sEleCT aNd return Two tHAt aRe the closest tO EAch\noTher and return theM in order (smalleR numbEr, LArGeR NuMber).\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n(2.0, 2.2)\n>>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n(2.0, 2.0)\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> find_closest_elements(vector<float> numbers){\n\tvector<float> closest_elements;\n\tfloat min_distance = 99999999;\n\tfloat distance;\n\tfloat min_element = 99999999;\n\tfloat element;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tfor(int j = 0; j < numbers.size(); j++){\n\t\t\tif(i!= j){\n\t\t\t\tdistance = abs(numbers[i] - numbers[j]);\n\t\t\t\tif(distance < min_distance){\n\t\t\t\t\tmin_distance = distance;\n\t\t\t\t\tmin_element = numbers[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tclosest_elements.push_back(min_element);\n\tclosest_elements.push_back(min_element);\n\treturn closest_elements;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/21", "prompt": "/*\nGivEn veCtor oF numbers (of At leaSt two ElementS), apPly a lIneAR tRaNsfoRM to That vector,\nsucH THat tHe smallest Number will beCome 0 aNd THe LaRGeSt wilL become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "canonical_solution": "    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min);\n    return numbers;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({2.0, 49.9}) , {0.0, 1.0}));\n     assert (issame(rescale_to_unit({100.0, 49.9}) ,{1.0, 0.0})); \n     assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n    assert (issame(rescale_to_unit({2.0, 1.0, 5.0, 3.0, 4.0}) , {0.25, 0.0, 1.0, 0.5, 0.75}));\n     assert (issame(rescale_to_unit({12.0, 11.0, 15.0, 13.0, 14.0}) ,{0.25, 0.0, 1.0, 0.5, 0.75}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0}) , {0.0, 0.25, 0.5, 0.75, 1.0}));\n}\n", "entry_point": "rescale_to_unit", "seed": 0, "perturbed": true, "gc": "/*\nGivEn veCtor oF numbers (of At leaSt two ElementS), apPly a lIneAR tRaNsfoRM to That vector,\nsucH THat tHe smallest Number will beCome 0 aNd THe LaRGeSt wilL become 1\n>>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n{0.0, 0.25, 0.5, 0.75, 1.0}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> rescale_to_unit(vector<float> numbers){ \n\tfloat min = numbers[0];\n\tfloat max = numbers[0];\n\tfor(int i = 1; i < numbers.size(); i++){\n\t\tif(numbers[i] < min)\n\t\t\tmin = numbers[i];\n\t\tif(numbers[i] > max)\n\t\t\tmax = numbers[i];\n\t}\n\tfloat scale = 1.0 / (max - min);\n\tvector<float> result(numbers.size());\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tresult[i] = (numbers[i] - min) * scale;\n\t}\n\treturn result;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/22", "prompt": "/*\nFilTer gIven vEctOr of aNy pytHon values only For IntegErs\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n", "canonical_solution": "    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({}),{}));\n\n    assert (issame(filter_integers({4,  {},23.2, 9, string(\"adasd\")}) ,{4, 9}));\n    assert (issame(filter_integers({3, 'c', 3, 3, 'a', 'b'}) ,{3, 3, 3}));\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_integers({string(\"a\"), 3.14, 5}),{5}));\n    assert (issame(filter_integers({1, 2, 3, string(\"abc\"), {}, {}}),{1,2,3}));\n}\n", "entry_point": "filter_integers", "seed": 0, "perturbed": true, "gc": "/*\nFilTer gIven vEctOr of aNy pytHon values only For IntegErs\n>>> filter_integers({\"a\", 3.14, 5})\n{5}\n>>> filter_integers({1, 2, 3, \"abc\", {}, {}})\n{1, 2, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\nvector<int> filter_integers(list_any values){\n\tvector<int> result;\n\tfor(list_any::iterator it = values.begin(); it!= values.end(); it++){\n\t\tboost::any value = *it;\n\t\tif(boost::any_cast<int>(value)){\n\t\t\tresult.push_back(boost::any_cast<int>(value));\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tlist_any values = {1, 2, 3, \"abc\", {}, {}};\n\tvector<int> result = filter_integers(values);\n\tfor(vector<int>::iterator it = result.begin(); it!= result.end(); it++){\n\t\tprintf(\"%d \", *it);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 4, "passed_evalplus": 0, "run_status_evalplus": 4, "passed_he": 0, "run_status_he": 4, "passed_ep": 0, "run_status_ep": 4}
{"task_id": "CPP/23", "prompt": "/*\nRetUrn lEngth Of gIven sTring\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n", "canonical_solution": "    return str.length();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"x\") == 1);\n     assert (strlen(\"asdasnakj\") == 9);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (strlen(\"\") == 0);\n    assert (strlen(\"abc\") == 3);\n}\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn lEngth Of gIven sTring\n>>> strlen(\"\")\n0\n>>> strlen(\"abc\")\n3\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint strlen(string str){\n    int i=0;\n    while(str[i]!='\\0'){\n        i++;\n    }\n    return i;\n}\nint main(){\n    string str;\n    getline(cin,str);\n    int len=strlen(str);\n    cout<<len;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/24", "prompt": "/*\nFor A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(3) == 1);\n    assert (largest_divisor(7) == 1);\n    assert (largest_divisor(10) == 5);\n    assert (largest_divisor(100) == 50);\n    assert (largest_divisor(49) == 7);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_divisor(15) == 5);\n}\n", "entry_point": "largest_divisor", "seed": 0, "perturbed": true, "gc": "/*\nFor A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n>>> largest_divisor(15)\n5\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_divisor(int n){\n    int i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,p,q,r,s,t,u,v,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/25", "prompt": "/*\nRetUrn vEctor Of pRime fActorS of giveN inTeger in The ORdEr From SMalLest to largest.\neACh of The factors Should be vectOred nUmBEr Of TImEs corRespondINg TO How MaNY TimEs IT aPpearEs in fActORizAtion.\ninpUt NuMBER shOuld be equAL TO the producT oF All factOrs\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(2) , {2}));\n    assert (issame(factorize(4) , {2, 2}));\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(3 * 19) , {3, 19}));\n    assert (issame(factorize(3 * 19 * 3 * 19) , {3, 3, 19, 19})); \n    assert (issame(factorize(3 * 19 * 3 * 19 * 3 * 19) , {3, 3, 3, 19, 19, 19})); \n    assert (issame(factorize(3 * 19 * 19 * 19) , {3, 19, 19, 19})); \n    assert (issame(factorize(3 * 2 * 3) , {2, 3, 3}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(factorize(8) , {2, 2, 2}));\n     assert (issame(factorize(25) , {5,5}));\n    assert (issame(factorize(70) , {2,5,7})); \n}\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn vEctor Of pRime fActorS of giveN inTeger in The ORdEr From SMalLest to largest.\neACh of The factors Should be vectOred nUmBEr Of TImEs corRespondINg TO How MaNY TimEs IT aPpearEs in fActORizAtion.\ninpUt NuMBER shOuld be equAL TO the producT oF All factOrs\n>>> factorize(8)\n{2, 2, 2}\n>>> factorize(25)\n{5, 5}\n>>> factorize(70)\n{2, 5, 7}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> factorize(int n){\n    vector<int> res;\n    int i;\n    for(i=2;i<=n;i++){\n        if(n%i==0){\n            res.push_back(i);\n            while(n%i==0){\n                n/=i;\n            }\n        }\n    }\n    if(n>1){\n        res.push_back(n);\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> res=factorize(n);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/26", "prompt": "/*\nFroM a veCtor oF inTegerS, remoVe all elEmeNts thAt oCCuR mOre tHAn oNce.\nKeep order oF ELemeNts left the Same as in the inpUt.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n", "canonical_solution": "    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])==has2.end())\n        out.push_back(numbers[i]);\n    return out;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(remove_duplicates({}) , {}));\n     assert (issame(remove_duplicates({1, 2, 3, 4}) , {1, 2, 3, 4}));\n      assert (issame(remove_duplicates({1, 2, 3, 2, 4, 3, 5}) , {1, 4, 5}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(remove_duplicates({1, 2, 3, 2,4}) , {1,  3, 4}));\n}\n", "entry_point": "remove_duplicates", "seed": 0, "perturbed": true, "gc": "/*\nFroM a veCtor oF inTegerS, remoVe all elEmeNts thAt oCCuR mOre tHAn oNce.\nKeep order oF ELemeNts left the Same as in the inpUt.\n>>> remove_duplicates({1, 2, 3, 2, 4})\n{1, 3, 4}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> remove_duplicates(vector<int> numbers){\n\tvector<int> result;\n\tsort(numbers.begin(), numbers.end());\n\tfor(int i=0; i<numbers.size(); i++){\n\t\tif(i==0 || numbers[i]!=numbers[i-1]){\n\t\t\tresult.push_back(numbers[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers;\n\tnumbers.push_back(1);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_back(2);\n\tnumbers.push_back(1);\n\tnumbers.push_back(4);\n\tnumbers.push_back(3);\n\tnumbers.push_", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/27", "prompt": "/*\nFor A givEn strIng, Flip lOwercAse charActErs to UppERcAsE and UPpeRcase to lowercASE.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w-=32;}\n        else\n            if (w>=65 and w<=90){ w+=32;}\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"\") == \"\");\n    assert (filp_case(\"Hello!\") == \"hELLO!\");\n    assert (filp_case(\"These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring filp_case(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (filp_case(\"Hello\") == \"hELLO\");\n}\n", "entry_point": "filp_case", "seed": 0, "perturbed": true, "gc": "/*\nFor A givEn strIng, Flip lOwercAse charActErs to UppERcAsE and UPpeRcase to lowercASE.\n>>> flip_case(\"Hello\")\n\"hELLO\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring filp_case(string str){\n    string str1 = \"\";\n    for(int i = 0; i < str.length(); i++){\n        if(str[i] >= 'A' && str[i] <= 'Z'){\n            str1 += (char)(str[i] + 'a' - 'A');\n        }\n        else{\n            str1 += str[i];\n        }\n    }\n    return str1;\n}\nint main(){\n    string str = \"Hello\";\n    printf(\"%s\\n\", filp_case(str));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/28", "prompt": "/*\nConCateNate vEctOr of strings iNto a sIngle stRinG\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n", "canonical_solution": "    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n     assert (concatenate({\"x\", \"y\", \"z\"}) == \"xyz\");\n    assert (concatenate({\"x\", \"y\", \"z\", \"w\", \"k\"}) == \"xyzwk\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (concatenate({}) == \"\");\n    assert (concatenate({\"a\", \"b\", \"c\"}) == \"abc\");\n}\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/*\nConCateNate vEctOr of strings iNto a sIngle stRinG\n>>> concatenate({})\n\"\"\n>>> concatenate({\"a\", \"b\", \"c\"})\n\"abc\"\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nstring concatenate(vector<string> strings){\n    string result = \"\";\n    for(int i=0; i<strings.size(); i++){\n        result = result + strings[i];\n    }\n    return result;\n}\nint main(){\n    vector<string> strings;\n    strings.push_back(\"a\");\n    strings.push_back(\"b\");\n    strings.push_back(\"c\");\n    cout<<concatenate(strings)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/29", "prompt": "/*\nFilTer aN inpuT veCtor oF strings only For ones ThaT starT wiTH a GiVen prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"john\") , {}));\n    assert (issame(filter_by_prefix({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\") , {\"xxx\", \"xxxAAA\", \"xxx\"}));\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_prefix({}, \"a\") , {}));\n    assert (issame(filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"array\"}, \"a\") , {\"abc\", \"array\"}));\n}\n", "entry_point": "filter_by_prefix", "seed": 0, "perturbed": true, "gc": "/*\nFilTer aN inpuT veCtor oF strings only For ones ThaT starT wiTH a GiVen prefix.\n>>> filter_by_prefix({}, \"a\")\n{}\n>>> filter_by_prefix({\"abc\", \"bcd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> result;\n    for(int i=0; i<strings.size(); i++){\n        if(strings[i].find(prefix) == 0){\n            result.push_back(strings[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    vector<string> strings = {\"abc\", \"bcd\", \"cde\", \"vector\"};\n    vector<string> result = filter_by_prefix(strings, \"a\");\n    for(int i=0; i<result.size(); i++){\n        printf(\"%s\\n\", result[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/3", "prompt": "/*\nYou\"Re giVen a vEctOr of dEposiT and witHdrAwal operations oN a bANk AcCounT ThaT starts with\nzeRO BalaNce. Your tasK is to detect iF at anY pOInT tHE bAlancE of accoUNt FALls BeLOW zeRo, ANd\nAt thaT poInt FUncTion sHouLd return TrUE. oTheRwise it shOULD return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n", "canonical_solution": "    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({}) == false);\n    assert (below_zero({1, 2, -3, 1, 2, -3}) == false);\n    assert (below_zero({1, 2, -4, 5, 6}) == true);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -4}) == false);\n    assert (below_zero({1, -1, 2, -2, 5, -5, 4, -5}) == true);\n    assert (below_zero({1, -2, 2, -2, 5, -5, 4, -4}) == true);\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_zero({1, 2, 3}) == false);\n    assert (below_zero({1, 2, -4, 5}) == true);\n}\n", "entry_point": "below_zero", "seed": 0, "perturbed": true, "gc": "/*\nYou\"Re giVen a vEctOr of dEposiT and witHdrAwal operations oN a bANk AcCounT ThaT starts with\nzeRO BalaNce. Your tasK is to detect iF at anY pOInT tHE bAlancE of accoUNt FALls BeLOW zeRo, ANd\nAt thaT poInt FUncTion sHouLd return TrUE. oTheRwise it shOULD return false.\n>>> below_zero({1, 2, 3})\nfalse\n>>> below_zero({1, 2, -4, 5})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_zero(vector<int> operations){\n    int sum = 0;\n    for(int i = 0; i < operations.size(); i++){\n        sum += operations[i];\n    }\n    if(sum < 0){\n        return true;\n    }\n    return false;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> operations(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &operations[i]);\n    }\n    if(below_zero(operations)){\n        printf(\"true\");\n    }\n    else{\n        printf(\"false\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/30", "prompt": "/*\nRetUrn oNly poSitIve nuMbers in The vectOr.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, -2, 4, 5, 6}) , {4, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10}) , {5, 3, 2, 3, 3, 9, 123, 1}));\n     assert (issame(get_positive({-1, -2}) , {} ));\n     assert (issame(get_positive({}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_positive({-1, 2, -4, 5, 6}) , {2, 5, 6} ));\n    assert (issame(get_positive({5, 3, -5, 2, -3,3, 9, 0, 123, 1, -10}) , {5, 3, 2,  3, 9, 123, 1}));\n}\n", "entry_point": "get_positive", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn oNly poSitIve nuMbers in The vectOr.\n>>> get_positive({-1, 2, -4, 5, 6})\n{2, 5, 6}\n>>> get_positive({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n{5, 3, 2, 3, 9, 123, 1}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> get_positive(vector<float> l){\n\tvector<float> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>0)\n\t\t\tr.push_back(l[i]);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(-1);\n\tl.push_back(2);\n\tl.push_back(-4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tvector<float> r=get_positive(l);\n\tfor(int i=0;i<r.size();i++)\n\t\tprintf(\"%f \",r[i]);\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/31", "prompt": "/*\nRetUrn tRue if A giVen nuMber iS prime, aNd fAlse oTheRWiSe.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n", "canonical_solution": "    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n    assert (is_prime(5) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(17) == true);\n    assert (is_prime(5 * 17) == false);\n    assert (is_prime(11 * 7) == false);\n    assert (is_prime(13441 * 19) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_prime(6) == false);\n    assert (is_prime(101) == true);\n    assert (is_prime(11) == true);\n    assert (is_prime(13441) == true);\n    assert (is_prime(61) == true);\n    assert (is_prime(4) == false);\n    assert (is_prime(1) == false);\n}\n", "entry_point": "is_prime", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn tRue if A giVen nuMber iS prime, aNd fAlse oTheRWiSe.\n>>> is_prime(6)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(11)\ntrue\n>>> is_prime(13441)\ntrue\n>>> is_prime(61)\ntrue\n>>> is_prime(4)\nfalse\n>>> is_prime(1)\nfalse\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_prime(long long n){\n    if(n<=1)\n        return false;\n    long long i=2;\n    while(i*i<=n)\n    {\n        if(n%i==0)\n            return false;\n        i++;\n    }\n    return true;\n}\nint main(){\n    long long n;\n    while(scanf(\"%lld\",&n)!=EOF){\n        if(is_prime(n))\n            printf(\"%lld is prime\\n\",n);\n        else\n            printf(\"%lld is not prime\\n\",n);\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/32", "prompt": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x. return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n    */\n    dOUbLe sum=0;\n    int i;\n    For (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble fINd_zEro(vector<doubLE> xs){\n    /*\n    xs Are cOefficientS of a polynomiAl. finD_zERo FiND x sUch thAt poly(x) = 0. find_zERo RETurNs ONLy oNlY ZeRo poiNt, eVen IF thEre arE maNy. \n    moREOVer, Find_zero oNLY Takes list xs havinG eVEn numbeR of coEffIcienTS aNd lARgeSt Non ZEro cOefFiCIEnt as iT guaranteEs A SOluTiON.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n", "canonical_solution": "    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=ans-value/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n   \n    double solution;\n    int ncoeff;\n    for (int i=0;i<100;i++)\n    {\n        ncoeff = 2 * (1+rand()%4);\n        vector<double> coeffs = {};\n        for (int j=0;j<ncoeff;j++)\n        {\n            double coeff = -10+rand()%21;\n            if (coeff == 0) coeff = 1;\n            coeffs.push_back(coeff);\n        }\n        \n        solution = find_zero(coeffs);\n        assert (abs(poly(coeffs, solution))< 1e-3);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (find_zero({1,2})+0.5<1e-4);\n    assert (find_zero({-6,11,-6,1})-1<1e-4);\n}\n", "entry_point": "find_zero", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\ndouble poly(vector<double> xs, double x){\n    /* \n    EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x. return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n    */\n    dOUbLe sum=0;\n    int i;\n    For (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble fINd_zEro(vector<doubLE> xs){\n    /*\n    xs Are cOefficientS of a polynomiAl. finD_zERo FiND x sUch thAt poly(x) = 0. find_zERo RETurNs ONLy oNlY ZeRo poiNt, eVen IF thEre arE maNy. \n    moREOVer, Find_zero oNLY Takes list xs havinG eVEn numbeR of coEffIcienTS aNd lARgeSt Non ZEro cOefFiCIEnt as iT guaranteEs A SOluTiON.\n    >>> round(find_zero([1, 2]), 2) #f(x) = 1 + 2x \n    -0.5 \n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3 \n    1.0\n    */\n    int i;\n    double x;\n    double f=0;\n    for (i=0;i<xs.size();i++)\n    {\n        x=xs[i];\n        f+=x*poly(xs,x);\n    }\n    return f;\n}\n\nint main(){\n    vector<double> xs;\n    double x;\n    double f;\n    double f_z;\n    int i;\n    cout<<\"Enter the number of coefficients: \";\n    cin>>xs.size();\n    for (i=0;i<xs.size();i++)\n    {\n        cout<<\"Enter the coefficient \"<<i+1<<\" : \";\n        cin>>xs[i];\n    }\n    cout<<\"Enter the value of x: \";\n    cin>>x;\n    f=poly(xs,x);\n    f_z=fINd_zEro(xs);\n    cout<<\"The value of f(x) = \"<<f<<\" is \"<<f_z<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/33", "prompt": "/*\nThiS funCtion TakEs a veCtor l aNd returNs a VectoR l' suCH tHaT\nl' is IDenTical to l in the indICIes tHat are not dIvisible by thRee, whIlE ItS vALuEs at tHe indicIEs THAt aRe DIVisIbLE bY threE arE eqUAl\ntO the vAluEs Of THE CorRespondinG INDicies of l, buT sORted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n", "canonical_solution": "    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n    \n    sort(third.begin(),third.end());\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , sort_third({1, 2, 3})));\n    assert (issame(sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , sort_third({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})));\n    assert (issame(sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , sort_third({5, 8, -12, 4, 23, 2, 3, 11, 12, -10})));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n    assert (issame(sort_third({5, 8, 3, 4, 6, 9, 2}) , {2, 8, 3, 4, 6, 9, 5}));\n    assert (issame(sort_third({5, 6, 9, 4, 8, 3, 2}) , {2, 6, 9, 4, 8, 3, 5}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2, 1}) , {2, 6, 3, 4, 8, 9, 5, 1}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_third({1, 2, 3}) , {1, 2, 3}));\n    assert (issame(sort_third({5, 6, 3, 4, 8, 9, 2}) , {2, 6, 3, 4, 8, 9, 5}));\n}\n", "entry_point": "sort_third", "seed": 0, "perturbed": true, "gc": "/*\nThiS funCtion TakEs a veCtor l aNd returNs a VectoR l' suCH tHaT\nl' is IDenTical to l in the indICIes tHat are not dIvisible by thRee, whIlE ItS vALuEs at tHe indicIEs THAt aRe DIVisIbLE bY threE arE eqUAl\ntO the vAluEs Of THE CorRespondinG INDicies of l, buT sORted.\n>>> sort_third({1, 2, 3})\n{1, 2, 3}\n>>> sort_third({5, 6, 3, 4, 8, 9, 2})\n{2, 6, 3, 4, 8, 9, 5}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_third(vector<int> l){\n\tvector<int> r;\n\tint i=0, j=0, k=0;\n\twhile(i<l.size()){\n\t\tif(l[i]%3==0){\n\t\t\tr.push_back(l[i]);\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tk++;\n\t\t\ti++;\n\t\t}\n\t}\n\tfor(i=0; i<k; i++){\n\t\tl.push_back(l[i]);\n\t}\n\treturn l;\n}\nint main(){\n\tint n, i;\n\tvector<int> l;\n\tprintf(\"Enter the number of elements in the vector\\n\");\n\tscanf(\"%d\", &n);\n\tfor(i=0; i<n; i++){\n\t\tscanf(\"%d\", &l[i]);\n\t}\n\tsort_third(l);\n\tfor(i=0; i<l.size(); i++){\n\t\tprintf(\"%d\\n\", l[i]);\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/34", "prompt": "/*\nRetUrn sOrted unique EleMents in A vectOr\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l.size();i++)\n        if (find(out.begin(),out.end(),l[i])==out.end())\n            out.push_back(l[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(unique({5, 3, 5, 2, 3, 3, 9, 0, 123}) , {0, 2, 3, 5, 9, 123}));\n}\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn sOrted unique EleMents in A vectOr\n>>> unique({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{0, 2, 3, 5, 9, 123}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> unique(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tif(find(r.begin(),r.end(),l[i])==r.end()){\n\t\t\tr.push_back(l[i]);\n\t\t}\n\t}\n\treturn r;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v;\n\tfor(int i=0;i<n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tv.push_back(x);\n\t}\n\tvector<int> r=unique(v);\n\tfor(int i=0;i<r.size();i++){\n\t\tprintf(\"%d \",r[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/35", "prompt": "/*\nRetUrn mAximuM elEment in The veCtor.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n", "canonical_solution": "  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10})- 124)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(max_element({1, 2, 3})- 3)<1e-4);\n    assert (abs(max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})- 123)<1e-4);\n}\n", "entry_point": "max_element", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn mAximuM elEment in The veCtor.\n>>> max_element({1, 2, 3})\n3\n>>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n123\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat max_element(vector<float> l){\n\tfloat max=l[0];\n\tfor(int i=0;i<l.size();i++){\n\t\tif(l[i]>max)\n\t\t\tmax=l[i];\n\t}\n\treturn max;\n}\nint main(){\n\tvector<float> v;\n\tv.push_back(1);\n\tv.push_back(2);\n\tv.push_back(3);\n\tv.push_back(5);\n\tv.push_back(3);\n\tv.push_back(9);\n\tv.push_back(0);\n\tv.push_back(123);\n\tv.push_back(1);\n\tv.push_back(-10);\n\tprintf(\"%f\\n\",max_element(v));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/36", "prompt": "/*\nRetUrn tHe numBer Of timEs the Digit 7 apPeaRs in intEgeRS lEsS thaN n WhiCh are divisiblE BY 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n", "canonical_solution": "    int count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n    assert (fizz_buzz(100) == 3);\n    assert (fizz_buzz(200) == 6);\n    assert (fizz_buzz(4000) == 192);\n    assert (fizz_buzz(10000) == 639);\n    assert (fizz_buzz(100000) == 8026);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fizz_buzz(50) == 0);\n    assert (fizz_buzz(78) == 2);\n    assert (fizz_buzz(79) == 3);\n}\n", "entry_point": "fizz_buzz", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn tHe numBer Of timEs the Digit 7 apPeaRs in intEgeRS lEsS thaN n WhiCh are divisiblE BY 11 or 13.\n>>> fizz_buzz(50)\n0\n>>> fizz_buzz(78)\n2\n>>> fizz_buzz(79)\n3\n*/\n#include<stdio.h>\nusing namespace std;\nint fizz_buzz(int n){\n    int i,j,k,l,m,n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20,n21,n22,n23,n24,n25,n26,n27,n28,n29,n30,n31,n32,n33,n34,n35,n36,n37,n38,n39,n40,n41,n42,n43,n44,n45,n46,n47,n48,n49,n50;\n    n1=n2=n3=n4=n5=n6=n7=n8=n9=n10=n11=n12=n13=n14=n15=n16=n17=n18=n19=n20=n21=n22=n23=n24=n25=n26=n27=n28=n29=n30=n31=n32=n33=n34=n35=n36=n37=n38=n39=n40=n41=n42=n43=n44=n45=n46=n47=n48=n49=n50=0;\n    for(i=1;i<=n;i++){\n        if(i%3==0){\n            n1++;\n        }\n        if(i%5==0){\n            n2++;\n        }\n        if(i%7==0){\n            n3++;\n        }\n        if(i%11==0){\n            n4++;\n        }\n        if(i%13==0){\n            n5++;\n        }\n        if(i%17==0){\n            n6++;\n        }\n        if(i%19==0){\n            n7++;\n        }\n        if(i%23==0){\n            n8++;\n        }\n        if(i%29==0){\n            n9++;\n        }\n        if(i%31==0){\n            n10++;\n        }\n        if(i%37==0){\n            n11++;\n        }\n        if(i%41==0){\n            n12++;\n        }\n        if(i%43==0){\n            n13++;\n        }\n        if(i%47==0){\n            n14++;\n        }\n        if(i%53==0){\n            n15++;\n        }\n        if(i%59==0){\n            n16++;\n        }\n        if(i%61==0){\n            n17++;\n        }\n        if(i%67==0){\n            n18++;\n        }\n        if(i%71==0){\n            n19++;\n        }\n        if(i%73==0){\n            n20++;\n        }\n        if(i%79==0){\n            n21++;\n        }\n        if(i%83==0){\n            n22++;\n        }\n        if(i%89==0){\n            n23++;\n        }\n        if(i%97==0){\n            n24++;\n        }\n        if(i%101==0){\n            n25++;\n        }\n        if(i%103==0){\n            n26++;\n        }\n        if(i%107==0){\n            n27++;\n        }\n        if(i%109==0){\n            n28++;\n        }\n        if(i%113==0){\n            n29++;\n        }\n        if(i%119==0){\n            n30++;\n        }\n        if(i%121==0){\n            n31++;\n        }\n        if(i%127==0){\n            n32++;\n        }\n        if(i%131==0){\n            n33++;\n        }\n        if(i%137==0){\n            n34++;\n        }\n        if(i%139==0){\n            n35++;\n        }\n        if(i%143==0){\n            n36++;\n        }\n        if(i%147==0){\n            n37++;\n        }\n        if(i%151==0){\n            n38++;\n        }\n        if(i%157==0){\n            n39++;\n        }\n        if(i%163==0){\n            n40++;\n        }\n        if(i%179==0){\n            n41++;\n        }\n        if(i%181==0){\n            n42++;\n        }\n        if(i%187==0){\n            n43++;\n        }\n        if(i%191==0){\n            n44++;\n        }\n        if(i%193==0){\n            n45++;\n        }\n        if(i%197==0){\n            n46++;\n        }\n        if(i%199==0){\n            n47++;\n        }\n        if(i%211==0){\n            n48++;\n        }\n        if(i%223==0){\n            n49++;\n        }\n        if(i%227==0){\n            n50++;\n        }\n    }\n    return n1+n2+n3+n4+n5+n6+n7+n8+n9+n10+n11+n12+n13+n14+n15+n16+n17+n18+n19+n20+n21+n22+n23+n24+n25+n26+n27+n28+n29+n30+n31+n32+n33+n34+n35+n36+n37+n38+n39+n40+n41+n42+n43+n44+n45+n46+n47+n48+n49+n50;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of digits: \");\n    scanf(\"%d\",&n);\n    printf(\"The number", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/37", "prompt": "/*\nThiS funCtion TakEs a veCtor l aNd returNs a VectoR l' suCH tHaT\nl' is IDenTical to l in the odd INDiciEs, while its Values at the even iNdiciEs ARe EqUAl\nTo the Values oF ThE even INdiCiES Of l, bUt SOrTed.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n", "canonical_solution": "    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(),even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}) , {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123}));\n    assert (issame(sort_even({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}) , {-12, 8, 3, 4, 5, 2, 12, 11, 23, -10}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_even({1, 2, 3}), {1, 2, 3}));\n    assert (issame(sort_even({5, 6,3,4}) , {3,6,5,4}));\n}\n", "entry_point": "sort_even", "seed": 0, "perturbed": true, "gc": "/*\nThiS funCtion TakEs a veCtor l aNd returNs a VectoR l' suCH tHaT\nl' is IDenTical to l in the odd INDiciEs, while its Values at the even iNdiciEs ARe EqUAl\nTo the Values oF ThE even INdiCiES Of l, bUt SOrTed.\n>>> sort_even({1, 2, 3})\n{1, 2, 3}\n>>> sort_even({5, 6, 3, 4})\n{3, 6, 5, 4}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<float> sort_even(vector<float> l){\n\tvector<float> r;\n\tfor(int i=0; i<l.size(); i+=2){\n\t\tr.push_back(l[i]);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<float> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n\tl.push_back(129", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/38", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takEs as Input StrIng enCoded With encOde_CycliC fuNCtIoN. RetURns Decoded string. \n    */\n", "canonical_solution": "    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x[2]+x.substr(0,2);\n        output=output+x;\n    }\n    return output;\n\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_cyclic(str);\n        assert (decode_cyclic(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n", "example_test": "", "entry_point": "decode_cyclic", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_cyclic(string s){ \n    // returns encoded string by cycling groups of three characters.  \n    // split string to groups. Each of length 3.\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    /*\n    takEs as Input StrIng enCoded With encOde_CycliC fuNCtIoN. RetURns Decoded string. \n    */\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        //cycle elements in each group. Unless group has fewer elements than 3.\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nint main(){\n    string s=\"abcdefghijklmnopqrstuvwxyz\";\n    string encoded=encode_cyclic(s);\n    string decoded=decode_cyclic(encoded);\n    cout<<encoded<<endl;\n    cout<<decoded<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/39", "prompt": "/*\npriMe_fiB retuRns n-th NumbeR that Is a FiboNacCi numBer ANd It'S alsO PriMe.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n", "canonical_solution": "    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=2;w*w<=f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n    assert (prime_fib(6) == 233);\n    assert (prime_fib(7) == 1597);\n    assert (prime_fib(8) == 28657);\n    assert (prime_fib(9) == 514229);\n    assert (prime_fib(10) == 433494437);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_fib(1) == 2);\n    assert (prime_fib(2) == 3);\n    assert (prime_fib(3) == 5);\n    assert (prime_fib(4) == 13);\n    assert (prime_fib(5) == 89);\n}\n", "entry_point": "prime_fib", "seed": 0, "perturbed": true, "gc": "/*\npriMe_fiB retuRns n-th NumbeR that Is a FiboNacCi numBer ANd It'S alsO PriMe.\n>>> prime_fib(1)\n2\n>>> prime_fib(2)\n3\n>>> prime_fib(3)\n5\n>>> prime_fib(4)\n13\n>>> prime_fib(5)\n89\n*/\n#include<stdio.h>\nusing namespace std;\nint prime_fib(int n){\n    int i,j,k,t,x,y,z,a,b,c,d,e,f,g,h,i1,i2,i3,i4,i5,i6,i7,i8,i9,i10,i11,i12,i13,i14,i15,i16,i17,i18,i19,i20,i21,i22,i23,i24,i25,i26,i27,i28,i29,i30,i31,i32,i33,i34,i35,i36,i37,i38,i39,i40,i41,i42,i43,i44,i45,i46,i47,i48,i49,i50,i51,i52,i53,i54,i55,i56,i57,i58,i59,i60,i61,i62,i63,i64,i65,i66,i67,i68,i69,i70,i71,i72,i73,i74,i75,i76,i77,i78,i79,i80,i81,i82,i83,i84,i85,i86,i87,i88,i89,i90,i91,i92,i93,i94,i95,i96,i97,i98,i99,i100,i101,i102,i103,i104,i105,i106,i107,i108,i109,i110,i111,i112,i113,i114,i115,i116,i117,i118,i119,i120,i121,i122,i123,i124,i125,i126,i127,i128,i129,i130,i131,i132,i133,i134,i135,i136,i137,i138,i139,i140,i141,i142,i143,i144,i145,i146,i147,i148,i149,i150,i151,i152,i153,i154,i155,i156,i157,i158,i159,i160,i161,i162,i163,i164,i165,i166,i167,i168,i169,i170,i171,i172,i173,i174,i175,i176,i177,i178,i179,i180,i181,i182,i183,i184,i185,i186,i187,i188,i189,i190,i191,i192,i193,i194,i195,i196,i197,i198,i199,i200,i201,i202,i203,i204,i205,i206,i207,i208,i209,i210,i211,i212,i213,i214,i215,i216,i217,i218,i219,i220,i221,i222,i223,i224,i225,i226,i227,i228,i229,i230,i231,i232,i233,i234,i235,i236,i237,i238,i239,i240,i241,i242,i243,i244,i245,i246,i247,i248,i249,i250,i251,i252,i253,i254,i255,i256,i257,i258,i259,i260,i261,i262,i263,i264,i265,i266,i267,i268,i269,i270,i271,i272,i273,i274,i275,i276,i277,i278,i279,i280,i281,i282,i283,i284,i285,i286,i287,i288,i289,i290,i291,i292,i293,i294,i295,i296,i297,i298,i299,i300,i301,i302,i303,i304,i305,i306,i307,i308,i309,i310,i311,i312,i313,i314,i315,i316,i317,i318,i319,i320,i321,i322,i323,i324,i325,i326,i327,i328,i329,i330,i331,i332,i333,i334,i335,i336,i337,i338,i339,i340,i341,i342,i343,i344,i345,i346,i347,i348,i349,i350,i351,i352,i353,i354,i355,i356,i357,i358,i359,i360,i361,i362,i363,i364,i365,i366,i367,i368,i369,i370,i371,i372,i373,i374,i375,i376,i377,i378,i379,i380,i381,i382,i383,i384,i385,i386,i387,i388,i389,i390,i391,i392,i393,i394,i395,i396,i397,i398,i399,i400,i401,i402,i403,i404,i405,i406,i407,i408,i409,i410,i411,i412,i413,i414,i415,i416,i417,i418,i419,i420,i421,i422,i423,i424,i425,i426,i427,i428,i429,i430,i431,i432,i433,i434,i435,i436,i437,i438,i439,i440,i441,i442,i443,i444,i445,i446,i447,i448,i449,i450,i451,i452,i453,i454,i455,i456,i457,i458,i459,i460,i461,", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/4", "prompt": "/*\nFor A givEn vecTor Of inpUt numbers, calCulate MEan absolUte dEvIaTion\nARouNd the mean of thIS DataSet.\nMean AbsOlute DeviatiOn is tHe AVeRaGE aBsoluTe diffeREnCE BetWeEN EacH\neLEmEnt anD a cEntERpoInt (meAn in tHiS cASE):\nmAD = Average | x - x_MEAN |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n", "canonical_solution": "    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0}) - 2.0/3.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0, 5.0}) - 6.0/5.0) < 1e-4);\n}", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(mean_absolute_deviation({1.0, 2.0, 3.0, 4.0}) - 1.0) < 1e-4);\n}\n", "entry_point": "mean_absolute_deviation", "seed": 0, "perturbed": true, "gc": "/*\nFor A givEn vecTor Of inpUt numbers, calCulate MEan absolUte dEvIaTion\nARouNd the mean of thIS DataSet.\nMean AbsOlute DeviatiOn is tHe AVeRaGE aBsoluTe diffeREnCE BetWeEN EacH\neLEmEnt anD a cEntERpoInt (meAn in tHiS cASE):\nmAD = Average | x - x_MEAN |\n>>> mean_absolute_deviation({1.0, 2.0, 3.0, 4.0})\n1.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nfloat mean_absolute_deviation(vector<float> numbers){\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tmean += numbers[i];\n\t}\n\tmean /= numbers.size();\n\tfor(int i = 0; i < numbers.size(); i++){\n\t\tsum += pow(numbers[i] - mean, 2);\n\t}\n\tsum /= numbers.size();\n\treturn sqrt(sum);\n}\nint main(){\n\tvector<float> numbers;\n\tfloat mean_absolute_deviation = 0;\n\tfloat mean = 0;\n\tfloat sum = 0;\n\tint i = 0;\n\twhile(1){\n\t\tfloat number = 0;\n\t\tscanf(\"%f\", &number);\n\t\tif(number == -1){\n\t\t\tbreak;\n\t\t}\n\t\tnumbers.push_back(number);\n\t\tmean += number;\n\t\tsum += pow(number, 2);\n\t\ti++;\n\t}\n\tmean /= i;\n\tsum /= i;\n\tmean_absolute_deviation = sqrt(sum);\n\tprintf(\"%f\\n\", mean_absolute_deviation);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/40", "prompt": "/*\ntriPles_Sum_to_ZerO takeS a vecTor of inTegErs as An iNPuT.\niT retURns True if there arE THree Distinct elEments in the vecTor thAt\nSUm To ZErO, and fAlse othERwISE.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -1}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({1, 2, 5, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n    assert (triples_sum_to_zero({1}) == false);\n    assert (triples_sum_to_zero({1, 3, 5, -100}) == false);\n    assert (triples_sum_to_zero({100, 3, 5, -100}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (triples_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (triples_sum_to_zero({1, 3, -2, 1}) == true);\n    assert (triples_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (triples_sum_to_zero({2, 4, -5, 3, 9, 7}) == true);\n}\n", "entry_point": "triples_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\ntriPles_Sum_to_ZerO takeS a vecTor of inTegErs as An iNPuT.\niT retURns True if there arE THree Distinct elEments in the vecTor thAt\nSUm To ZErO, and fAlse othERwISE.\n\n>>> triples_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> triples_sum_to_zero({1, 3, -2, 1})\ntrue\n>>> triples_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> triples_sum_to_zero({2, 4, -5, 3, 9, 7})\ntrue\n>>> triples_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool triples_sum_to_zero(vector<int> l){\n    int sum = 0;\n    for(int i = 0; i < l.size(); i++){\n        sum += l[i];\n    }\n    if(sum == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/41", "prompt": "/*\nImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\nN caRs are driving lEFT to rIght;  simultAneously, a difFerenT sET oF n cARs\nAre drIving riGHt TO LefT.   THE Two SeTS oF cars StaRt oUT beIng veRy fAr FrOM\nEAch Other.  All cARS Move in the samE sPEed.  Two cArs arE saId to cOLlIde\nWHen A cAr tHAt's mOviNg LEFt to riGht hits a cAr THAt's MoVInG riGhT TO lEfT.\nHOweveR, the Cars are iNFiNItely sturdY and Strong; As A ReSULt, tHey ContinUe moViNG\nin tHEIr trajECtORY As IF They did not colLide.\n\nThis funCTiON ouTpuTs THe NUmber oF such CoLLisIoNs.\n*/\n#includE<StdiO.h>\nusing naMespacE std;\nint Car_race_COllisiON(int n){\n", "canonical_solution": "    return n*n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (car_race_collision(2) == 4);\n    assert (car_race_collision(3) == 9);\n    assert (car_race_collision(4) == 16);\n    assert (car_race_collision(8) == 64);\n    assert (car_race_collision(10) == 100);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n", "example_test": "", "entry_point": "car_race_collision", "seed": 0, "perturbed": true, "gc": "/*\nImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\nN caRs are driving lEFT to rIght;  simultAneously, a difFerenT sET oF n cARs\nAre drIving riGHt TO LefT.   THE Two SeTS oF cars StaRt oUT beIng veRy fAr FrOM\nEAch Other.  All cARS Move in the samE sPEed.  Two cArs arE saId to cOLlIde\nWHen A cAr tHAt's mOviNg LEFt to riGht hits a cAr THAt's MoVInG riGhT TO lEfT.\nHOweveR, the Cars are iNFiNItely sturdY and Strong; As A ReSULt, tHey ContinUe moViNG\nin tHEIr trajECtORY As IF They did not colLide.\n\nThis funCTiON ouTpuTs THe NUmber oF such CoLLisIoNs.\n*/\n#includE<StdiO.h>\nusing naMespacE std;\nint Car_race_COllisiON(int n){\n\tint i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,AA,BB,CC,DD,EE,FF,GG,HH,II,JJ,KK,LL,MM,NN,OO,PP,QQ,RR,SS,TT,UU,VV,WW,XX,YY,ZZ,AA1,BB1,CC1,DD1,EE1,FF1,GG1,HH1,II1,JJ1,KK1,LL1,MM1,NN1,OO1,PP1,QQ1,RR1,SS1,TT1,UU1,VV1,WW1,XX1,YY1,ZZ1,AA2,BB2,CC2,DD2,EE2,FF2,GG2,HH2,II2,JJ2,KK2,LL2,MM2,NN2,OO2,PP2,QQ2,RR2,SS2,TT2,UU2,VV2,WW2,XX2,YY2,ZZ2,AA3,BB3,CC3,DD3,EE3,FF3,GG3,HH3,II3,JJ3,KK3,LL3,MM3,NN3,OO3,PP3,QQ3,RR3,SS3,TT3,UU3,VV3,WW3,XX3,YY3,ZZ3,AA4,BB4,CC4,DD4,EE4,FF4,GG4,HH4,II4,JJ4,KK4,LL4,MM4,NN4,OO4,PP4,QQ4,RR4,SS4,TT4,UU4,VV4,WW4,XX4,YY4,ZZ4,AA5,BB5,CC5,DD5,EE5,FF5,GG5,HH5,II5,JJ5,KK5,LL5,MM5,NN5,OO5,PP5,QQ5,RR5,SS5,TT5,UU5,VV5,WW5,XX5,YY5,ZZ5,AA6,BB6,CC6,DD6,EE6,FF6,GG6,HH6,II6,JJ6,KK6,LL6,MM6,NN6,OO6,PP6,QQ6,RR6,SS6,TT6,UU6,VV6,WW6,XX6,YY6,ZZ6,AA7,BB7,CC7,DD7,EE7,FF7,GG7,HH7,II7,JJ7,KK7,LL7,MM7,NN7,OO7,PP7,QQ7,RR7,SS7,TT7,UU7,VV7,WW7,XX7,YY7,ZZ7,AA8,BB8,CC8,DD8,EE8,FF8,GG8,HH8,II8,JJ8,KK8,LL8,MM8,NN8,OO8,PP8,QQ8,RR8,SS8,TT8,UU8,VV8,WW8,XX8,YY8,ZZ8,AA9,BB9,CC9,DD9,EE9,FF9,GG9,HH9,II9,JJ9,KK9,LL9,MM9,NN9,OO9,PP9,QQ9,RR9,SS9,TT9,UU9,VV9,WW9,XX9,YY9,ZZ9,AA10,BB10,CC10,DD10,EE10,FF10,GG10,HH10,II10,JJ10,KK10,LL10,MM10,NN10,OO10,PP10,QQ10,RR10,SS10,TT10,UU10,VV10,WW10,XX10,YY10,ZZ10,AA11,BB11,CC11,DD11,EE11,FF11,GG11,HH11,II11,JJ11,KK11,LL11,MM11,NN11,OO11,PP11,QQ11,RR11,SS11,TT11,UU11,VV11,WW11,XX11,YY11,ZZ11,AA12,BB12,CC12,DD12,EE12,FF12,GG12,HH12,II12,JJ12,KK12,LL12,MM12,NN12,OO12,PP12,QQ12,RR12,SS12,TT12,UU12,VV12,WW12,XX12,YY12,ZZ12,AA13,BB13,CC13,DD13,EE13,FF13,GG13,HH13,II13,JJ13,KK13,LL13,MM13,NN13,OO13,PP13,QQ13,RR13,SS13,TT13,UU13,VV13,WW13,XX13,YY13,ZZ13,AA14,BB14,CC14,DD14,EE14,FF14,GG14,HH14,II14,JJ14,KK14,LL14,MM14,NN14,OO14,PP14,QQ14,RR", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/42", "prompt": "/*\nRetUrn vEctor WitH elemEnts iNcremenTed By 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        l[i]+=1;\n    return l;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({}) , {}));\n    assert (issame(incr_list({3, 2, 1}) , {4, 3, 2}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(incr_list({1, 2, 3}) , {2, 3, 4}));\n    assert (issame(incr_list({5, 2, 5, 2, 3, 3, 9, 0, 123}) , {6, 3, 6, 3, 4, 4, 10, 1, 124}));\n}\n", "entry_point": "incr_list", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn vEctor WitH elemEnts iNcremenTed By 1.\n>>> incr_vector({1, 2, 3})\n{2, 3, 4}\n>>> incr_vector({5, 3, 5, 2, 3, 3, 9, 0, 123})\n{6, 4, 6, 3, 4, 4, 10, 1, 124}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> incr_list(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nvector<int> incr_vector(vector<int> l){\n\tvector<int> r;\n\tfor(int i=0;i<l.size();i++){\n\t\tr.push_back(l[i]+1);\n\t}\n\treturn r;\n}\nint main(){\n\tvector<int> l;\n\tl.push_back(1);\n\tl.push_back(2);\n\tl.push_back(3);\n\tl.push_back(4);\n\tl.push_back(5);\n\tl.push_back(6);\n\tl.push_back(7);\n\tl.push_back(8);\n\tl.push_back(9);\n\tl.push_back(10);\n\tl.push_back(11);\n\tl.push_back(12);\n\tl.push_back(13);\n\tl.push_back(14);\n\tl.push_back(15);\n\tl.push_back(16);\n\tl.push_back(17);\n\tl.push_back(18);\n\tl.push_back(19);\n\tl.push_back(20);\n\tl.push_back(21);\n\tl.push_back(22);\n\tl.push_back(23);\n\tl.push_back(24);\n\tl.push_back(25);\n\tl.push_back(26);\n\tl.push_back(27);\n\tl.push_back(28);\n\tl.push_back(29);\n\tl.push_back(30);\n\tl.push_back(31);\n\tl.push_back(32);\n\tl.push_back(33);\n\tl.push_back(34);\n\tl.push_back(35);\n\tl.push_back(36);\n\tl.push_back(37);\n\tl.push_back(38);\n\tl.push_back(39);\n\tl.push_back(40);\n\tl.push_back(41);\n\tl.push_back(42);\n\tl.push_back(43);\n\tl.push_back(44);\n\tl.push_back(45);\n\tl.push_back(46);\n\tl.push_back(47);\n\tl.push_back(48);\n\tl.push_back(49);\n\tl.push_back(50);\n\tl.push_back(51);\n\tl.push_back(52);\n\tl.push_back(53);\n\tl.push_back(54);\n\tl.push_back(55);\n\tl.push_back(56);\n\tl.push_back(57);\n\tl.push_back(58);\n\tl.push_back(59);\n\tl.push_back(60);\n\tl.push_back(61);\n\tl.push_back(62);\n\tl.push_back(63);\n\tl.push_back(64);\n\tl.push_back(65);\n\tl.push_back(66);\n\tl.push_back(67);\n\tl.push_back(68);\n\tl.push_back(69);\n\tl.push_back(70);\n\tl.push_back(71);\n\tl.push_back(72);\n\tl.push_back(73);\n\tl.push_back(74);\n\tl.push_back(75);\n\tl.push_back(76);\n\tl.push_back(77);\n\tl.push_back(78);\n\tl.push_back(79);\n\tl.push_back(80);\n\tl.push_back(81);\n\tl.push_back(82);\n\tl.push_back(83);\n\tl.push_back(84);\n\tl.push_back(85);\n\tl.push_back(86);\n\tl.push_back(87);\n\tl.push_back(88);\n\tl.push_back(89);\n\tl.push_back(90);\n\tl.push_back(91);\n\tl.push_back(92);\n\tl.push_back(93);\n\tl.push_back(94);\n\tl.push_back(95);\n\tl.push_back(96);\n\tl.push_back(97);\n\tl.push_back(98);\n\tl.push_back(99);\n\tl.push_back(100);\n\tl.push_back(101);\n\tl.push_back(102);\n\tl.push_back(103);\n\tl.push_back(104);\n\tl.push_back(105);\n\tl.push_back(106);\n\tl.push_back(107);\n\tl.push_back(108);\n\tl.push_back(109);\n\tl.push_back(110);\n\tl.push_back(111);\n\tl.push_back(112);\n\tl.push_back(113);\n\tl.push_back(114);\n\tl.push_back(115);\n\tl.push_back(116);\n\tl.push_back(117);\n\tl.push_back(118);\n\tl.push_back(119);\n\tl.push_back(120);\n\tl.push_back(121);\n\tl.push_back(122);\n\tl.push_back(123);\n\tl.push_back(124);\n\tl.push_back(125);\n\tl.push_back(126);\n\tl.push_back(127);\n\tl.push_back(128);\n", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/43", "prompt": "/*\npaiRs_suM_to_zeRo tAkes a VectoR of inteGerS as an InpUT.\niT rEturNS trUe if there are tWO DistInct elemenTs in the vector tHat\nsuM tO ZeRo, ANd False OtherwiSE.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n    assert (pairs_sum_to_zero({1}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 30}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 3, 2, 31}) == true);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 30}) == false);\n    assert (pairs_sum_to_zero({-3, 9, -1, 4, 2, 31}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (pairs_sum_to_zero({1, 3, 5, 0}) == false);\n    assert (pairs_sum_to_zero({1, 3, -2, 1}) == false);\n    assert (pairs_sum_to_zero({1, 2, 3, 7}) == false);\n    assert (pairs_sum_to_zero({2, 4, -5, 3, 5, 7}) == true);\n}\n", "entry_point": "pairs_sum_to_zero", "seed": 0, "perturbed": true, "gc": "/*\npaiRs_suM_to_zeRo tAkes a VectoR of inteGerS as an InpUT.\niT rEturNS trUe if there are tWO DistInct elemenTs in the vector tHat\nsuM tO ZeRo, ANd False OtherwiSE.\n>>> pairs_sum_to_zero({1, 3, 5, 0})\nfalse\n>>> pairs_sum_to_zero({1, 3, -2, 1})\nfalse\n>>> pairs_sum_to_zero({1, 2, 3, 7})\nfalse\n>>> pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\ntrue\n>>> pairs_sum_to_zero({1})\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool pairs_sum_to_zero(vector<int> l){\n\tint sum = 0;\n\tfor(int i = 0; i < l.size(); i++){\n\t\tsum += l[i];\n\t}\n\tif(sum == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int> l;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint x;\n\t\t\tscanf(\"%d\", &x);\n\t\t\tl.push_back(x);\n\t\t}\n\t\tif(pairs_sum_to_zero(l)){\n\t\t\tprintf(\"true\\n\");\n\t\t}\n\t\telse{\n\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/44", "prompt": "/*\nChaNge nUmeriCal base Of inpUt numBer x to base.\nreturn stRinG reprEseNTaTiOn afTEr tHe conversion.\nbASE numBers are lesS than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n", "canonical_solution": "    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(9, 3) == \"100\");\n    assert (change_base(234, 2) == \"11101010\");\n    assert (change_base(16, 2) == \"10000\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n    for (int x=2;x<8;x++)\n        assert (change_base(x, x + 1) == to_string(x));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (change_base(8, 3) == \"22\");\n    assert (change_base(8, 2) == \"1000\");\n    assert (change_base(7, 2) == \"111\");\n}\n", "entry_point": "change_base", "seed": 0, "perturbed": true, "gc": "/*\nChaNge nUmeriCal base Of inpUt numBer x to base.\nreturn stRinG reprEseNTaTiOn afTEr tHe conversion.\nbASE numBers are lesS than 10.\n>>> change_base(8, 3)\n\"22\"\n>>> change_base(8, 2)\n\"1000\"\n>>> change_base(7, 2)\n\"111\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring change_base(int x,int base){\n    string s=\"\";\n    while(x>0){\n        s=s+(char)(x%base+'0');\n        x=x/base;\n    }\n    return s;\n}\nint main(){\n    int n,base;\n    while(cin>>n>>base){\n        cout<<change_base(n,base)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/45", "prompt": "/*\nGivEn leNgth oF a siDe and High return aRea for a tRiaNgle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n", "canonical_solution": "return (a*h)*0.5;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n    assert (abs(triangle_area(2, 2) - 2.0)<1e-4);\n    assert (abs(triangle_area(10, 8) - 40.0)<1e-4);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(5, 3) - 7.5)<1e-4);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGivEn leNgth oF a siDe and High return aRea for a tRiaNgle.\n>>> triangle_area(5, 3)\n7.5\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float h){\n\treturn (a*h)/2;\n}\nint main(){\n\tfloat a,h;\n\tprintf(\"Enter the length of the first side: \");\n\tscanf(\"%f\",&a);\n\tprintf(\"Enter the height of the second side: \");\n\tscanf(\"%f\",&h);\n\tprintf(\"The area of the triangle is: %f\",triangle_area(a,h));\n\treturn 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/46", "prompt": "/*\nThe fib4 nUmber SeqUence Is a seQuence sImiLar to The fIbBoNaccI SeqUnece that's defINEd as Follows:\nfib4(0) -> 0\nFib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(N) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease writE a FUnCtIOn To effIcientlY CoMPUte ThE n-th ELemEnT Of The fib4 nuMbeR seQUenCe.  Do nOt uSe ReCURSioN.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n", "canonical_solution": "    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(8) == 28);\n    assert (fib4(10) == 104);\n    assert (fib4(12) == 386);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib4(5) == 4);\n    assert (fib4(6) == 8);\n    assert (fib4(7) == 14);\n}\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*\nThe fib4 nUmber SeqUence Is a seQuence sImiLar to The fIbBoNaccI SeqUnece that's defINEd as Follows:\nfib4(0) -> 0\nFib4(1) -> 0\nfib4(2) -> 2\nfib4(3) -> 0\nfib4(N) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\nPlease writE a FUnCtIOn To effIcientlY CoMPUte ThE n-th ELemEnT Of The fib4 nuMbeR seQUenCe.  Do nOt uSe ReCURSioN.\n>>> fib4(5)\n4\n>>> fib4(6)\n8\n>>> fib4(7)\n14\n*/\n#include<stdio.h>\nusing namespace std;\nint fib4(int n){\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    if(n==3)\n        return 1;\n    int a,b;\n    a=fib4(n-1);\n    b=fib4(n-2);\n    return a+b;\n}\nint main(){\n    int n;\n    printf(\"Enter the number of element in fib4 sequence: \");\n    scanf(\"%d\",&n);\n    printf(\"The fib4 number is: %d\\n\",fib4(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/47", "prompt": "/*\nRetUrn median oF elemEntS in the vEctor l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n", "canonical_solution": "    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()/2-1]);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n    assert (abs(median({5}) - 5)<1e-4);\n    assert (abs(median({6, 5}) - 5.5)<1e-4);\n    assert (abs(median({8, 1, 3, 9, 9, 2, 7}) - 7)<1e-4 );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(median({3, 1, 2, 4, 5}) - 3)<1e-4);\n    assert (abs(median({-10, 4, 6, 1000, 10, 20}) -8.0)<1e-4);\n}\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn median oF elemEntS in the vEctor l.\n>>> median({3, 1, 2, 4, 5})\n3\n>>> median({-10, 4, 6, 1000, 10, 20})\n15.0\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nfloat median(vector<float> l){\n\tint n = l.size();\n\tfloat m = 0;\n\tfor(int i = 0; i < n; i++){\n\t\tm += l[i];\n\t}\n\tm /= n;\n\tfloat m1 = 0;\n\tfor(int i = 0; i < n; i++){\n\t\tif(l[i] < m){\n\t\t\tm1 += l[i];\n\t\t}\n\t}\n\tm1 /= n;\n\tif(m1 < m){\n\t\treturn m1;\n\t}\n\telse{\n\t\treturn m;\n\t}\n}\nint main(){\n\tvector<float> v;\n\tfloat m;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%f\", &m);\n\t\tv.push_back(m);\n\t}\n\tsort(v.begin(), v.end());\n\tprintf(\"%f\\n\", median(v));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/48", "prompt": "/*\nCheCks iF giveN stRing iS a palIndrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n", "canonical_solution": "    string pr(text.rbegin(),text.rend());\n    return pr==text;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n    assert (is_palindrome(\"xywyx\") == true);\n    assert (is_palindrome(\"xywyz\") == false);\n    assert (is_palindrome(\"xywzx\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_palindrome(\"\") == true);\n    assert (is_palindrome(\"aba\") == true);\n    assert (is_palindrome(\"aaaaa\") == true);\n    assert (is_palindrome(\"zbcd\") == false);\n}\n", "entry_point": "is_palindrome", "seed": 0, "perturbed": true, "gc": "/*\nCheCks iF giveN stRing iS a palIndrome\n>>> is_palindrome(\"\")\ntrue\n>>> is_palindrome(\"aba\")\ntrue\n>>> is_palindrome(\"aaaaa\")\ntrue\n>>> is_palindrome(\"zbcd\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_palindrome(string text){\n\tint i,j;\n\tfor(i=0,j=text.size()-1;i<j;i++,j--){\n\t\tif(text[i]!=text[j])\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main(){\n\tstring text;\n\twhile(getline(cin,text)){\n\t\tif(is_palindrome(text))\n\t\t\tcout<<\"true\"<<endl;\n\t\telse\n\t\t\tcout<<\"false\"<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/49", "prompt": "/*\nRetUrn 2^n ModulO p (be Aware Of numErics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n", "canonical_solution": "    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n    assert (modp(30, 5) == 4);\n    assert (modp(31, 5) == 3);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (modp(3, 5) == 3);\n    assert (modp(1101, 101) == 2);\n    assert (modp(0, 101) == 1);\n    assert (modp(3, 11) == 8);\n    assert (modp(100, 101) == 1);\n}\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn 2^n ModulO p (be Aware Of numErics).\n>>> modp(3, 5)\n3\n>>> modp(1101, 101)\n2\n>>> modp(0, 101)\n1\n>>> modp(3, 11)\n8\n>>> modp(100, 101)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint modp(int n,int p){\n    int i,j,k,m;\n    m=p;\n    for(i=1;i<=n;i++){\n        k=n;\n        j=1;\n        while(k%2==0){\n            k=k/2;\n            j=j*2;\n        }\n        if(k==1){\n            if(j==m){\n                return i;\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    int n,p;\n    scanf(\"%d %d\",&n,&p);\n    printf(\"%d\\n\",modp(n,p));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/5", "prompt": "/*\nInsErt a NumbeR \"delimeter\" beTween Every Two consEcuTive eLemENtS oF inpUT veCtor `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "canonical_solution": "    vector<int> out={};\n    if (numbers.size()>0) out.push_back(numbers[0]);\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 7), {}));\n    \n    assert (issame(intersperse({5, 6, 3, 2}, 8),{5, 8, 6, 8, 3, 8, 2}));\n    assert (issame(intersperse({2, 2, 2}, 2),{2, 2, 2, 2, 2}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(intersperse({}, 4), {}));\n    assert (issame(intersperse({1, 2, 3}, 4),{1, 4, 2, 4, 3}));\n}\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/*\nInsErt a NumbeR \"delimeter\" beTween Every Two consEcuTive eLemENtS oF inpUT veCtor `numbers\"\n>>> intersperse({}, 4)\n{}\n>>> intersperse({1, 2, 3}, 4)\n{1, 4, 2, 4, 3}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> intersperse(vector<int> numbers, int delimeter){ \n\tvector<int> result;\n\tint i = 0;\n\twhile(i < numbers.size()){\n\t\tif(i % 2 == 0){\n\t\t\tresult.push_back(numbers[i]);\n\t\t\ti++;\n\t\t}\n\t\telse{\n\t\t\tresult.push_back(delimeter);\n\t\t\ti++;\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<int> numbers;\n\tnumbers.push_back(1);\n\tnumbers.push_back(2);\n\tnumbers.push_back(3);\n\tnumbers.push_back(4);\n\tnumbers.push_back(5);\n\tnumbers.push_back(6);\n\tnumbers.push_back(7);\n\tnumbers.push_back(8);\n\tnumbers.push_back(9);\n\tnumbers.push_back(10);\n\tnumbers.push_back(11);\n\tnumbers.push_back(12);\n\tnumbers.push_back(13);\n\tnumbers.push_back(14);\n\tnumbers.push_back(15);\n\tnumbers.push_back(16);\n\tnumbers.push_back(17);\n\tnumbers.push_back(18);\n\tnumbers.push_back(19);\n\tnumbers.push_back(20);\n\tnumbers.push_back(21);\n\tnumbers.push_back(22);\n\tnumbers.push_back(23);\n\tnumbers.push_back(24);\n\tnumbers.push_back(25);\n\tnumbers.push_back(26);\n\tnumbers.push_back(27);\n\tnumbers.push_back(28);\n\tnumbers.push_back(29);\n\tnumbers.push_back(30);\n\tnumbers.push_back(31);\n\tnumbers.push_back(32);\n\tnumbers.push_back(33);\n\tnumbers.push_back(34);\n\tnumbers.push_back(35);\n\tnumbers.push_back(36);\n\tnumbers.push_back(37);\n\tnumbers.push_back(38);\n\tnumbers.push_back(39);\n\tnumbers.push_back(40);\n\tnumbers.push_back(41);\n\tnumbers.push_back(42);\n\tnumbers.push_back(43);\n\tnumbers.push_back(44);\n\tnumbers.push_back(45);\n\tnumbers.push_back(46);\n\tnumbers.push_back(47);\n\tnumbers.push_back(48);\n\tnumbers.push_back(49);\n\tnumbers.push_back(50);\n\tnumbers.push_back(51);\n\tnumbers.push_back(52);\n\tnumbers.push_back(53);\n\tnumbers.push_back(54);\n\tnumbers.push_back(55);\n\tnumbers.push_back(56);\n\tnumbers.push_back(57);\n\tnumbers.push_back(58);\n\tnumbers.push_back(59);\n\tnumbers.push_back(60);\n\tnumbers.push_back(61);\n\tnumbers.push_back(62);\n\tnumbers.push_back(63);\n\tnumbers.push_back(64);\n\tnumbers.push_back(65);\n\tnumbers.push_back(66);\n\tnumbers.push_back(67);\n\tnumbers.push_back(68);\n\tnumbers.push_back(69);\n\tnumbers.push_back(70);\n\tnumbers.push_back(71);\n\tnumbers.push_back(72);\n\tnumbers.push_back(73);\n\tnumbers.push_back(74);\n\tnumbers.push_back(75);\n\tnumbers.push_back(76);\n\tnumbers.push_back(77);\n\tnumbers.push_back(78);\n\tnumbers.push_back(79);\n\tnumbers.push_back(80);\n\tnumbers.push_back(81);\n\tnumbers.push_back(82);\n\tnumbers.push_back(83);\n\tnumbers.push_back(84);\n\tnumbers.push_back(85);\n\tnumbers.push_back(86);\n\tnumbers.push_back(87);\n\tnumbers.push_back(88);\n\tnumbers.push_back(89);\n\tnumbers.push_back(90);\n\tnumbers.push_back(91);\n\tnumbers.push_back(92);\n\tnumbers.push_back(93);\n\tnumbers.push_back(94);\n\tnumbers.push_back(95);\n\tnumbers.push_back(96);\n\tnumbers.push_back(97);\n\tnumbers.push_back(98);\n\tnumbers.push_back(99);\n\tnumbers.push_back(100);\n\tnumbers.push_back(101);\n\tnumbers.push_back(102);\n\tnumbers.push_back(103);\n\tnumbers.push_back(104);\n\tnumbers.push_back(105);\n\tnumbers.push_back(106);\n\tnumbers.push_back(107);\n\tnumbers.push_back(108);\n\tnumbers.push_back(109);\n\tnumbers.push_back(110);\n\tnumbers.push_back(111);\n\tnumbers.push_back(112);\n\tnumbers.push_back(113);\n\tnumbers.push_back(114);\n\tnumbers.push_back(115);\n\tnumbers.push_back(116);\n\tnumbers.push_back(117);\n\tnumbers.push_back(118);\n\tnumbers.push_back(119);\n\tnumbers.push", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/50", "prompt": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decODE_shiFt(string s){\n    // taKes as input stRing eNcODeD wITh EncodE_shift fUNcTIOn. REtURNs dEcODeD striNg.\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    \n    for (int i=0;i<100;i++)\n    {\n        int l=10+rand()%11;\n        string str=\"\";\n        for (int j=0;j<l;j++)\n        {\n            char chr=97+rand()%26;\n            str+=chr;\n        }\n\n        string encoded_str = encode_shift(str);\n        assert (decode_shift(encoded_str) == str);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n", "example_test": "", "entry_point": "encode_shift", "seed": 0, "perturbed": true, "gc": "#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encode_shift(string s){\n    // retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decODE_shiFt(string s){\n    // taKes as input stRing eNcODeD wITh EncodE_shift fUNcTIOn. REtURNs dEcODeD striNg.\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]-5+(int)'a')%26-(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nint main(){\n    string s;\n    while(cin>>s){\n        cout<<encode_shift(s)<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/51", "prompt": "/*\nremOve_vOwels Is a FunctIon thAt takes StrIng anD reTUrNs StriNG wiThout vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n", "canonical_solution": "    string out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"fedcba\") == \"fdcb\");\n    assert (remove_vowels(\"eeeee\") == \"\");\n    assert (remove_vowels(\"acBAA\") == \"cB\");\n    assert (remove_vowels(\"EcBOO\") == \"cB\");\n    assert (remove_vowels(\"ybcd\") == \"ybcd\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (remove_vowels(\"\") == \"\");\n    assert (remove_vowels(\"abcdef\\nghijklm\") == \"bcdf\\nghjklm\");\n    assert (remove_vowels(\"abcdef\") == \"bcdf\");\n    assert (remove_vowels(\"aaaaa\") == \"\");\n    assert (remove_vowels(\"aaBAA\") == \"B\");\n    assert (remove_vowels(\"zbcd\") == \"zbcd\");\n}\n", "entry_point": "remove_vowels", "seed": 0, "perturbed": true, "gc": "/*\nremOve_vOwels Is a FunctIon thAt takes StrIng anD reTUrNs StriNG wiThout vowels.\n>>> remove_vowels(\"\")\n\"\"\n>>> remove_vowels(\"abcdef\\nghijklm\")\n\"bcdf\\nghjklm\"\n>>> remove_vowels(\"abcdef\")\n\"bcdf\"\n>>> remove_vowels(\"aaaaa\")\n\"\"\n>>> remove_vowels(\"aaBAA\")\n\"B\"\n>>> remove_vowels(\"zbcd\")\n\"zbcd\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring remove_vowels(string text){\n    string vowels = \"aeiouAEIOU\";\n    string result = \"\";\n    for(int i = 0; i < text.length(); i++){\n        if(vowels.find(text[i]) == string::npos){\n            result += text[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string text = \"abcdef\\nghijklm\";\n    cout << remove_vowels(text) << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/52", "prompt": "/*\nRetUrn tRue if All NumbeRs in the Vector l aRe bElow tHreSHoLd t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n", "canonical_solution": "    for (int i=0;i<l.size();i++)\n        if (l[i]>=t) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n    assert (below_threshold({1, 20, 4, 10}, 21));\n    assert (below_threshold({1, 20, 4, 10}, 22));\n    assert (below_threshold({1, 8, 4, 10}, 11));\n    assert (not(below_threshold({1, 8, 4, 10}, 10)));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (below_threshold({1, 2, 4, 10}, 100));\n    assert (not(below_threshold({1, 20, 4, 10}, 5)));\n}\n", "entry_point": "below_threshold", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn tRue if All NumbeRs in the Vector l aRe bElow tHreSHoLd t.\n>>> below_threshold({1, 2, 4, 10}, 100)\ntrue\n>>> below_threshold({1, 20, 4, 10}, 5)\nfalse\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool below_threshold(vector<int>l, int t){\n\tint i = 0;\n\twhile(i<l.size()){\n\t\tif(l[i]<t)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tint t;\n\tscanf(\"%d\", &t);\n\twhile(t--){\n\t\tint n;\n\t\tscanf(\"%d\", &n);\n\t\tvector<int>l;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint a;\n\t\t\tscanf(\"%d\", &a);\n\t\t\tl.push_back(a);\n\t\t}\n\t\tint t;\n\t\tscanf(\"%d\", &t);\n\t\twhile(t--){\n\t\t\tint a;\n\t\t\tscanf(\"%d\", &a);\n\t\t\tif(below_threshold(l, a))\n\t\t\t\tprintf(\"true\\n\");\n\t\t\telse\n\t\t\t\tprintf(\"false\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/53", "prompt": "/*\nAdd Two nUmberS x anD y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n", "canonical_solution": "    return x+y;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(0, 1) == 1);\n    assert (add(1, 0) == 1);\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n    assert (add(7, 5) == 12);\n    for (int i=0;i<100;i+=1)\n    {\n        int x=rand()%1000;\n        int y=rand()%1000;\n        assert (add(x, y) == x + y);\n    }\n}\n", "declaration": "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add(2, 3) == 5);\n    assert (add(5, 7) == 12);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nAdd Two nUmberS x anD y\n>>> add(2, 3)\n5\n>>> add(5, 7)\n12\n*/\n#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\nint add(int x,int y){\n    return x+y;\n}\nint main(){\n    int a,b;\n    printf(\"Enter two number:\");\n    scanf(\"%d%d\",&a,&b);\n    printf(\"%d\",add(a,b));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/54", "prompt": "/*\nCheCk if Two woRds Have tHe samE characTerS.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n", "canonical_solution": "    for (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    for (int i=0;i<s1.length();i++)\n    if (find(s0.begin(),s0.end(),s1[i])==s0.end())\n        return false;\n    return true;   \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n    assert (same_chars(\"aabb\", \"aaccc\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true);\n    assert (same_chars(\"abcd\", \"dddddddabc\") == true);\n    assert (same_chars(\"dddddddabc\", \"abcd\") == true);\n    assert (same_chars(\"eabcd\", \"dddddddabc\") == false);\n    assert (same_chars(\"abcd\", \"dddddddabcf\") == false);\n    assert (same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false);\n}\n", "entry_point": "same_chars", "seed": 0, "perturbed": true, "gc": "/*\nCheCk if Two woRds Have tHe samE characTerS.\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\")\ntrue\n>>> same_chars(\"abcd\", \"dddddddabc\")\ntrue\n>>> same_chars(\"dddddddabc\", \"abcd\")\ntrue\n>>> same_chars(\"eabcd\", \"dddddddabc\")\nfalse\n>>> same_chars(\"abcd\", \"dddddddabce\")\nfalse\n>>> same_chars(\"eabcdzzzz\", \"dddzzzzzzzddddabc\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nbool same_chars(string s0,string s1){\n    int i=0;\n    while(i<s0.size()&&i<s1.size()){\n        if(s0[i]!=s1[i])\n            return false;\n        i++;\n    }\n    return true;\n}\nint main(){\n    string s0,s1;\n    while(cin>>s0>>s1){\n        if(same_chars(s0,s1))\n            cout<<\"true\"<<endl;\n        else\n            cout<<\"false\"<<endl;\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/55", "prompt": "/*\nRetUrn n-th FIbonaCci NumbeR.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n", "canonical_solution": "    int f[1000];\n    f[0]=0;f[1]=1;\n    for (int i=2;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n    assert (fib(11) == 89);\n    assert (fib(12) == 144);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fib(10) == 55);\n    assert (fib(1) == 1);\n    assert (fib(8) == 21);\n}\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn n-th FIbonaCci NumbeR.\n>>> fib(10)\n55\n>>> fib(1)\n1\n>>> fib(8)\n21\n*/\n#include<stdio.h>\nusing namespace std;\nint fib(int n){\n    if(n==1)\n        return 1;\n    else\n        return fib(n-1)+fib(n-2);\n}\nint main(){\n    int n;\n    printf(\"Enter the number of Fibonacci number you want to find\\n\");\n    scanf(\"%d\",&n);\n    printf(\"The %dth Fibonacci number is %d\\n\",n,fib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/56", "prompt": "/*\nbrackets is a StriNg of '<' aNd '>'.\nreturn tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='<') level+=1;\n        if (brackets[i]=='>') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (correct_bracketing(\"<><><<><>><>\"));\n    assert (correct_bracketing(\"<><><<<><><>><>><<><><<>>>\"));\n    assert (not (correct_bracketing(\"<<<><>>>>\")));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n    assert (not (correct_bracketing(\"<<<<\")));\n    assert (not (correct_bracketing(\">\")));\n    assert (not (correct_bracketing(\"<<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>><<>\")));\n    assert (not (correct_bracketing(\"<><><<><>><>>><>\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"<>\"));\n    assert (correct_bracketing(\"<<><>>\"));\n    assert (not (correct_bracketing(\"><<>\")));\n    assert (not (correct_bracketing(\"<\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a StriNg of '<' aNd '>'.\nreturn tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n>>> correct_bracketing(\"<\")\nfalse\n>>> correct_bracketing(\"<>\")\ntrue\n>>> correct_bracketing(\"<<><>>\")\ntrue\n>>> correct_bracketing(\"><<>\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i=0,j=0;\n\twhile(i<brackets.length()){\n\t\tif(brackets[i]=='<'){\n\t\t\tj=i;\n\t\t\twhile(j<brackets.length() && brackets[j]!='>'){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j==brackets.length()-1){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti=j+1;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tstring brackets;\n\twhile(getline(cin,brackets)){\n\t\tif(correct_bracketing(brackets)){\n\t\t\tcout<<\"true\"<<endl;\n\t\t}\n\t\telse{\n\t\t\tcout<<\"false\"<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/57", "prompt": "/*\nRetUrn tRue is VecTor elEmentS are monOtoNicalLy iNCrEaSing OR deCreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n", "canonical_solution": "    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 2, 4, 20}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n    assert (monotonic({4, 1, 1, 0}) == true);\n    assert (monotonic({1, 2, 3, 2, 5, 60}) == false);\n    assert (monotonic({1, 2, 3, 4, 5, 60}) == true);\n    assert (monotonic({9, 9, 9, 9}) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (monotonic({1, 2, 4, 10}) == true);\n    assert (monotonic({1, 20, 4, 10}) == false);\n    assert (monotonic({4, 1, 0, -10}) == true);\n}\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn tRue is VecTor elEmentS are monOtoNicalLy iNCrEaSing OR deCreasing.\n>>> monotonic({1, 2, 4, 20})\ntrue\n>>> monotonic({1, 20, 4, 10})\nfalse\n>>> monotonic({4, 1, 0, -10})\ntrue\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool monotonic(vector<float> l){\n\tint i=0;\n\twhile(i<l.size()-1){\n\t\tif(l[i]>l[i+1])\n\t\t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<float> l;\n\tfor(int i=0;i<n;i++){\n\t\tfloat x;\n\t\tscanf(\"%f\",&x);\n\t\tl.push_back(x);\n\t}\n\tprintf(\"%d\",monotonic(l));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/58", "prompt": "/*\nRetUrn sOrted UniQue common elEmentS for two VecTors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            if (find(l2.begin(),l2.end(),l1[i])!=l2.end())\n                out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n    assert (issame(common({4, 3, 2, 8}, {3, 2, 4}) , {2, 3, 4}));\n    assert (issame(common({4, 3, 2, 8}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}) , {1, 5, 653}));\n    assert (issame(common({5, 3, 2, 8}, {3, 2}) , {2, 3}));\n}\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn sOrted UniQue common elEmentS for two VecTors.\n>>> common({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n{1, 5, 653}\n>>> common({5, 3, 2, 8}, {3, 2})\n{2, 3}\n\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> common(vector<int> l1,vector<int> l2){\n    vector<int> res;\n    sort(l1.begin(),l1.end());\n    sort(l2.begin(),l2.end());\n    int i=0,j=0;\n    while(i<l1.size()&&j<l2.size()){\n        if(l1[i]==l2[j]){\n            res.push_back(l1[i]);\n            i++;\n            j++;\n        }else if(l1[i]<l2[j]){\n            i++;\n        }else{\n            j++;\n        }\n    }\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> v1,v2;\n    for(int i=0;i<n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        v1.push_back(x);\n    }\n    for(int i=0;i<n;i++){\n        int x;\n        scanf(\"%d\",&x);\n        v2.push_back(x);\n    }\n    vector<int> res=common(v1,v2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%d \",res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/59", "prompt": "/*\nRetUrn tHe larGesT primE factOr of n. AssUme n > 1 And is Not A PrImE.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n", "canonical_solution": "    for (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=n/i;\n    return n;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(15) == 5);\n    assert (largest_prime_factor(27) == 3);\n    assert (largest_prime_factor(63) == 7);\n    assert (largest_prime_factor(330) == 11);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (largest_prime_factor(2048) == 2);\n    assert (largest_prime_factor(13195) == 29);\n}\n", "entry_point": "largest_prime_factor", "seed": 0, "perturbed": true, "gc": "/*\nRetUrn tHe larGesT primE factOr of n. AssUme n > 1 And is Not A PrImE.\n>>> largest_prime_factor(13195)\n29\n>>> largest_prime_factor(2048)\n2\n*/\n#include<stdio.h>\nusing namespace std;\nint largest_prime_factor(int n){\n    int i,j,k,flag;\n    for(i=2;i<=n/2;i++){\n        flag=0;\n        for(j=2;j<=n/i;j++){\n            if(n%j==0){\n                flag=1;\n                break;\n            }\n        }\n        if(flag==0){\n            return i;\n        }\n    }\n    return 1;\n}\nint main(){\n    int n;\n    printf(\"Enter a number:\");\n    scanf(\"%d\",&n);\n    printf(\"The largest prime factor of %d is %d\",n,largest_prime_factor(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/6", "prompt": "/*\nInpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\nFor each Of the GrOUp, OuTPuT the dEepest level oF NeSTIng Of PARenThESeS.\nE.g. (()()) haS maXimUM twO leveLs oF nEsTING whIle ((())) has thrEE.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n", "canonical_solution": "    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=0;\n            }\n        }\n    }\n    return all_levels;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n     assert (issame(parse_nested_parens(\"() (()) ((())) (((())))\") , {1, 2, 3, 4}));\n    assert (issame(parse_nested_parens(\"(()(())((())))\") ,{4}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(parse_nested_parens(\"(()()) ((())) () ((())()())\"),{2, 3, 1, 3}));\n}\n", "entry_point": "parse_nested_parens", "seed": 0, "perturbed": true, "gc": "/*\nInpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\nFor each Of the GrOUp, OuTPuT the dEepest level oF NeSTIng Of PARenThESeS.\nE.g. (()()) haS maXimUM twO leveLs oF nEsTING whIle ((())) has thrEE.\n\n>>> parse_nested_parens(\"(()()) ((())) () ((())()())\")\n{2, 3, 1, 3}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<int> parse_nested_parens(string paren_string){\n\tvector<int> level_of_parens;\n\tint level = 0;\n\tint i = 0;\n\twhile(i < paren_string.size()){\n\t\tif(paren_string[i] == '('){\n\t\t\tlevel++;\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tlevel--;\n\t\t}\n\t\tif(level == 0){\n\t\t\tlevel_of_parens.push_back(i);\n\t\t\ti++;\n\t\t}\n\t\ti++;\n\t}\n\treturn level_of_parens;\n}\nint main(){\n\tstring paren_string = \"((())) ((())) () ((())())\";\n\tvector<int> level_of_parens = parse_nested_parens(paren_string);\n\tfor(int i = 0; i < level_of_parens.size(); i++){\n\t\tprintf(\"%d \", level_of_parens[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/60", "prompt": "/*\nsum_To_n iS a funCtiOn thaT sums Numbers FroM 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n", "canonical_solution": "    return n*(n+1)/2;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(6) == 21);\n    assert (sum_to_n(11) == 66);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (sum_to_n(1) == 1);\n    assert (sum_to_n(5) == 15);\n    assert (sum_to_n(10) == 55);\n    assert (sum_to_n(30) == 465);\n    assert (sum_to_n(100) == 5050);\n}\n", "entry_point": "sum_to_n", "seed": 0, "perturbed": true, "gc": "/*\nsum_To_n iS a funCtiOn thaT sums Numbers FroM 1 to n.\n>>> sum_to_n(30)\n465\n>>> sum_to_n(100)\n5050\n>>> sum_to_n(5)\n15\n>>> sum_to_n(10)\n55\n>>> sum_to_n(1)\n1\n*/\n#include<stdio.h>\nusing namespace std;\nint sum_to_n(int n){\n    int sum=0;\n    for(int i=1;i<=n;i++){\n        sum+=i;\n    }\n    return sum;\n}\nint main(){\n    int n;\n    printf(\"Enter the number: \");\n    scanf(\"%d\",&n);\n    printf(\"Sum of numbers fro 1 to %d is %d\",n,sum_to_n(n));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/61", "prompt": "/*\nbrackets is a StriNg of '(' aNd ')'.\nreturn tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n", "canonical_solution": "    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (correct_bracketing(\"()()(()())()\"));\n    assert (correct_bracketing(\"()()((()()())())(()()(()))\"));\n    assert (not (correct_bracketing(\"((()())))\")));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n    assert (not (correct_bracketing(\"((((\")));\n    assert (not (correct_bracketing(\")\")));\n    assert (not (correct_bracketing(\"(()\")));\n    assert (not (correct_bracketing(\"()()(()())())(()\")));\n    assert (not (correct_bracketing(\"()()(()())()))()\")));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (correct_bracketing(\"()\"));\n    assert (correct_bracketing(\"(()())\"));\n    assert (not (correct_bracketing(\")(()\")));\n    assert (not (correct_bracketing(\"(\")));\n}\n", "entry_point": "correct_bracketing", "seed": 0, "perturbed": true, "gc": "/*\nbrackets is a StriNg of '(' aNd ')'.\nreturn tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n>>> correct_bracketing(\"(\")\nfalse\n>>> correct_bracketing(\"()\")\ntrue\n>>> correct_bracketing(\"(()())\")\ntrue\n>>> correct_bracketing(\")(()\")\nfalse\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool correct_bracketing(string brackets){\n\tint i=0;\n\tint j=0;\n\tint k=0;\n\tint count=0;\n\twhile(i<brackets.length()){\n\t\tif(brackets[i]=='('){\n\t\t\tcount++;\n\t\t\ti++;\n\t\t}\n\t\telse if(brackets[i]==')'){\n\t\t\tcount--;\n\t\t\tif(count==0){\n\t\t\t\tj++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\ti++;\n\t\t}\n\t}\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nint main(){\n\tstring brackets;\n\tcout<<\"Enter a string of brackets: \";\n\tcin>>brackets;\n\tif(correct_bracketing(brackets)){\n\t\tcout<<\"Every opening bracket is a closing bracket.\"<<endl;\n\t}\n\telse{\n\t\tcout<<\"Every opening bracket is not a closing bracket.\"<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/62", "prompt": "/*\nxs repReseNt coeFfiCientS of a pOlynomiAl.\nxS{0} + xs{1} * x + xs{2} * x^2 + ....\n ReTurN derivative Of ThIs poLYnoMial in the same foRM.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n", "canonical_solution": "    vector<float> out={};\n    for (int i=1;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n    assert (issame(derivative({3, 2, 1}) , {2, 2}));\n    assert (issame(derivative({3, 2, 1, 0, 4}) , {2, 2, 0, 16}));\n    assert (issame(derivative({1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<float> a,vector<float>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (abs(a[i]-b[i])>1e-4) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(derivative({3, 1, 2, 4, 5}) , {1, 4, 12, 20}));\n    assert (issame(derivative({1, 2, 3}) , {2, 6}));\n}\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/*\nxs repReseNt coeFfiCientS of a pOlynomiAl.\nxS{0} + xs{1} * x + xs{2} * x^2 +....\n ReTurN derivative Of ThIs poLYnoMial in the same foRM.\n>>> derivative({3, 1, 2, 4, 5})\n{1, 4, 12, 20}\n>>> derivative({1, 2, 3})\n{2, 6}\n*/\n#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\nvector<float> derivative(vector<float> xs){\n\tvector<float> result;\n\tfor(int i=0;i<xs.size();i++){\n\t\tresult.push_back(xs[i]);\n\t\tfor(int j=1;j<xs.size();j++){\n\t\t\tresult.push_back(xs[i]*j);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<float> xs;\n\tvector<float> result;\n\tfloat x;\n\twhile(scanf(\"%f\",&x)==1){\n\t\txs.push_back(x);\n\t}\n\tresult=derivative(xs);\n\tfor(int i=0;i<result.size();i++){\n\t\tprintf(\"%f \",result[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/63", "prompt": "/*\nThe fibFIb numBer SequeNce is A sequenCe sImilaR to THe fiBbonACci Sequnece that's DEFineD as follows:\nFibfib(0) == 0\nfibfib(1) == 0\nFibfiB(2) == 1\nfIBfIb(N) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease WrIte a fUnction TO eFFIciEnTLY coMpUTe The n-th elEmeNt oF The fibfib NumbeR seQuEnCE.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n", "canonical_solution": "    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(2) == 1);\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n    assert (fibfib(10) == 81);\n    assert (fibfib(12) == 274);\n    assert (fibfib(14) == 927);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fibfib(1) == 0);\n    assert (fibfib(5) == 4);\n    assert (fibfib(8) == 24);\n}\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*\nThe fibFIb numBer SequeNce is A sequenCe sImilaR to THe fiBbonACci Sequnece that's DEFineD as follows:\nFibfib(0) == 0\nfibfib(1) == 0\nFibfiB(2) == 1\nfIBfIb(N) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\nPlease WrIte a fUnction TO eFFIciEnTLY coMpUTe The n-th elEmeNt oF The fibfib NumbeR seQuEnCE.\n>>> fibfib(1)\n0\n>>> fibfib(5)\n4\n>>> fibfib(8)\n24\n*/\n#include<stdio.h>\nusing namespace std;\nint fibfib(int n){\n    if(n==0)\n        return 0;\n    if(n==1)\n        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main(){\n    int n;\n    printf(\"Enter The n-th element of fibfib NumbeR seQuEnCE: \");\n    scanf(\"%d\",&n);\n    printf(\"The n-th element of fibfib NumbeR seQuEnCE is %d\\n\",fibfib(n));\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 0, "run_status_evalplus": 3, "passed_he": 1, "run_status_he": 0, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/64", "prompt": "/*\nWriTe a fUnctiOn vowels_count wHich tAkes a String rEprEsentIng A WoRd As inPUt aNd returns the nUMBer oF vowels in the string. vowels in this caSe are 'A', 'e', 'i', 'O', 'U'. \nHErE, 'Y' iS also A vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\nExamPle: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"Alone\") == 3);\n    assert (vowels_count(\"key\") == 2);\n    assert (vowels_count(\"bye\") == 1);\n    assert (vowels_count(\"keY\") == 2);\n    assert (vowels_count(\"bYe\") == 1);\n    assert (vowels_count(\"ACEDY\") == 3);\n   \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (vowels_count(\"abcde\") == 2);\n    assert (vowels_count(\"ACEDY\") == 3);\n}\n", "entry_point": "vowels_count", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn vowels_count wHich tAkes a String rEprEsentIng A WoRd As inPUt aNd returns the nUMBer oF vowels in the string. vowels in this caSe are 'A', 'e', 'i', 'O', 'U'. \nHErE, 'Y' iS also A vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\nExamPle: \n>>> vowels_count(\"abcde\") \n2 \n>>> vowels_count(\"ACEDY\") \n3\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint vowels_count(string s){\n    int count = 0;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] == 'A' || s[i] == 'e' || s[i] == 'i' || s[i] == 'O' || s[i] == 'U'){\n            count++;\n        }\n    }\n    return count;\n}\nint main(){\n    string s;\n    cin >> s;\n    int count = vowels_count(s);\n    cout << count;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/65", "prompt": "/*\nCirCulaR shift the dIgiTs of tHe intEger x, shift the DigIts riGht BY shift\nand return tHe ResuLT as A string.\nIf shift > numbER Of diGits, return digits Reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n", "canonical_solution": "    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);\n    return xs;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(100, 2) == \"001\");\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(97, 8) == \"79\");\n    assert (circular_shift(12, 1) == \"21\");\n    assert (circular_shift(11, 101) == \"11\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (circular_shift(12, 2) == \"12\");\n    assert (circular_shift(12, 1) == \"21\");\n}\n", "entry_point": "circular_shift", "seed": 0, "perturbed": true, "gc": "/*\nCirCulaR shift the dIgiTs of tHe intEger x, shift the DigIts riGht BY shift\nand return tHe ResuLT as A string.\nIf shift > numbER Of diGits, return digits Reversed.\n>>> circular_shift(12, 1)\n\"21\"\n>>> circular_shift(12, 2)\n\"12\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring circular_shift(int x,int shift){\n    string s = \"\";\n    int i = x;\n    while(i>0){\n        s = s + (char)(i%10 + '0');\n        i = i/10;\n    }\n    if(shift>x){\n        for(int i=0;i<x-shift;i++){\n            s = s + \"0\";\n        }\n    }else{\n        for(int i=0;i<shift;i++){\n            s = s + \"0\";\n        }\n    }\n    return s;\n}\nint main(){\n    int x,shift;\n    cin>>x>>shift;\n    cout<<circular_shift(x,shift);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/66", "prompt": "/*\nTasK\nWriTe a fuNctIon thAt takEs a striNg aS inpuT anD ReTuRns tHE sum of The upper charaCTErs oNly's\nASCII cOdes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n    assert (digitSum(\" How are yOu?\") == 151);\n    assert (digitSum(\"You arE Very Smart\") == 327);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (digitSum(\"\") == 0);\n    assert (digitSum(\"abAB\") == 131);\n    assert (digitSum(\"abcCd\") == 67);\n    assert (digitSum(\"helloE\") == 69);\n    assert (digitSum(\"woArBld\") == 131);\n    assert (digitSum(\"aAaaaXa\") == 153);\n}\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*\nTasK\nWriTe a fuNctIon thAt takEs a striNg aS inpuT anD ReTuRns tHE sum of The upper charaCTErs oNly's\nASCII cOdes.\n\nExamples:\n    digitSum(\"\") => 0\n    digitSum(\"abAB\") => 131\n    digitSum(\"abcCd\") => 67\n    digitSum(\"helloE\") => 69\n    digitSum(\"woArBld\") => 131\n    digitSum(\"aAaaaXa\") => 153\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint digitSum(string s){\n    int sum = 0;\n    for(int i = 0; i < s.size(); i++){\n        sum += (s[i] - 'A' + 1);\n    }\n    return sum;\n}\nint main(){\n    string s;\n    while(cin >> s){\n        printf(\"%d\\n\", digitSum(s));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/67", "prompt": "/*\nIn tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS \nTHat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns \napplES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of \nthe orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits \nin the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n", "canonical_solution": "    string num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-atoi(num1.c_str())-atoi(num2.c_str());\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"5 apples and 6 oranges\",21) == 10);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"1 apples and 0 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",5) == 0);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (fruit_distribution(\"5 apples and 6 oranges\",19) == 8);\n    assert (fruit_distribution(\"0 apples and 1 oranges\",3) == 2);\n    assert (fruit_distribution(\"2 apples and 3 oranges\",100) == 95);\n    assert (fruit_distribution(\"1 apples and 100 oranges\",120) == 19);\n}\n", "entry_point": "fruit_distribution", "seed": 0, "perturbed": true, "gc": "/*\nIn tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS \nTHat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns \napplES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of \nthe orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits \nin the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\nfor example:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint fruit_distribution(string s,int n){\n\tint i=0,j=0;\n\tint count=0;\n\twhile(i<s.length()){\n\t\tif(s[i]=='a'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='o'){\n\t\t\tcount++;\n\t\t}\n\t\tif(s[i]=='p'){\n\t\t\tcount++;\n\t\t}\n\t\ti++;\n\t}\n\treturn count;\n}\nint main(){\n\tint n;\n\tstring s;\n\tcin>>n;\n\tcin>>s;\n\tint ans=fruit_distribution(s,n);\n\tcout<<ans;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/68", "prompt": "/*\nGivEn a vEctor RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\nyOUR tasK is to pluck one of The nodes and return iT.\nThe pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\nIF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\nthe PlUckED nodE shOuLD Be retuRned in a vectOr, { SMAleSt_VAlUe, iTs INDeX },\nIF tHere aRe no Even valuES oR The given veCtor Is emptY, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n", "canonical_solution": "    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={arr[i],i};\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n    assert (issame(pluck({1, 2, 3, 0, 5, 3}) , {0, 3}));\n    assert (issame(pluck({5, 4, 8, 4 ,8}) , {4, 1}));\n    assert (issame(pluck({7, 6, 7, 1}) , {6, 1}));\n    assert (issame(pluck({7, 9, 7, 1}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(pluck({4,2,3}) , {2, 1}));\n    assert (issame(pluck({1,2,3}) , {2, 1}));\n    assert (issame(pluck({}) , {}));\n    assert (issame(pluck({5, 0, 3, 0, 4, 2}) , {0, 1}));\n}\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\nyOUR tasK is to pluck one of The nodes and return iT.\nThe pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\nIF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\nthe PlUckED nodE shOuLD Be retuRned in a vectOr, { SMAleSt_VAlUe, iTs INDeX },\nIF tHere aRe no Even valuES oR The given veCtor Is emptY, return {}.\n\nExample 1:\n    Input: {4,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\nExample 2:\n    Input: {1,2,3}\n    Output: {2, 1}\n    Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\nExample 3:\n    Input: {}\n    Output: {}\n\nExample 4:\n    Input: {5, 0, 3, 0, 4, 2}\n    Output: {0, 1}\n    Explanation: 0 is the smallest value, but  there are two zeros,\n                 so we will choose the first zero, which has the smallest index.\n\nConstraints:\n    * 1 <= nodes.length <= 10000\n    * 0 <= node.value\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> pluck(vector<int> arr){\n    vector<int> res;\n    if(arr.empty()){\n        return res;\n    }\n    int min = arr[0];\n    int min_index = 0;\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i] < min){\n            min = arr[i];\n            min_index = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(min_index);\n    return res;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> arr(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &arr[i]);\n    }\n    vector<int> res = pluck(arr);\n    for(int i = 0; i < res.size(); i++){\n        printf(\"%d \", res[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/69", "prompt": "/*\nYou Are gIven a Non-Empty VectoR of posiTivE inteGerS. reTuRn thE GreAtest integer tHAT is gReater than \nZero, and has a freqUency GrEAtEr THaN or eqUal to thE VaLUE of ThE INteGeR ItSelf. \nTHe fReqUEncY of an IntEgEr IS THe nUmber of tiMES It appears in tHe VEctor.\nIf No sucH a vAlue eXIsT, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n", "canonical_solution": "    vector<vector<int>> freq={};\n    int max=-1;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({5, 5, 5, 5, 1}) == 1);\n    assert (search({4, 1, 4, 1, 4, 4}) == 4);\n    assert (search({3, 3}) == -1);\n    assert (search({8, 8, 8, 8, 8, 8, 8, 8}) == 8);\n    assert (search({2, 3, 3, 2, 2}) == 2);\n    assert (search({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}) == 1);\n    assert (search({3, 2, 8, 2}) == 2);\n    assert (search({6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}) == 1);\n    assert (search({8, 8, 3, 6, 5, 6, 4}) == -1);\n    assert (search({6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}) == 1);\n    assert (search({1, 9, 10, 1, 3}) == 1);\n    assert (search({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}) == 5);\n    assert (search({1}) == 1);\n    assert (search({8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}) == 4);\n    assert (search({2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}) == 2);\n    assert (search({1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}) == 1);\n    assert (search({9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4}) == 4);\n    assert (search({2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}) == 4);\n    assert (search({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}) == 2);\n    assert (search({5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}) == -1);\n    assert (search({10}) == -1);\n    assert (search({9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}) == 2);\n    assert (search({5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}) == 1);\n    assert (search({7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}) == 1);\n    assert (search({3, 10, 10, 9, 2}) == -1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (search({4, 1, 2, 2, 3, 1}) == 2);\n    assert (search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3);\n    assert (search({5, 5, 4, 4, 4}) == -1);\n}\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a Non-Empty VectoR of posiTivE inteGerS. reTuRn thE GreAtest integer tHAT is gReater than \nZero, and has a freqUency GrEAtEr THaN or eqUal to thE VaLUE of ThE INteGeR ItSelf. \nTHe fReqUEncY of an IntEgEr IS THe nUmber of tiMES It appears in tHe VEctor.\nIf No sucH a vAlue eXIsT, return -1.\nExamples:\n    search({4, 1, 2, 2, 3, 1}) == 2\n    search({1, 2, 2, 3, 3, 3, 4, 4, 4}) == 3\n    search({5, 5, 4, 4, 4}) == -1\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint search(vector<int> lst){\n    int i, j, k, l, m;\n    l = lst.size();\n    for(i = 0; i < l; i++){\n        if(lst[i] == 0)\n            return -1;\n        for(j = i + 1; j < l; j++){\n            if(lst[j] == 0)\n                return -1;\n            for(k = j + 1; k < l; k++){\n                if(lst[k] == 0)\n                    return -1;\n                for(l = k + 1; l < l; l++){\n                    if(lst[l] == 0)\n                        return -1;\n                    for(m = l + 1; m < l; m++){\n                        if(lst[m] == 0)\n                            return -1;\n                        if(lst[i] + lst[j] + lst[k] + lst[l] + lst[m] == 0){\n                            return lst[i] + lst[j] + lst[k] + lst[l] + lst[m];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return -1;\n}\nint main(){\n    int n, i, j, k, l, m, t;\n    vector<int> lst;\n    scanf(\"%d\", &n);\n    for(i = 0; i < n; i++){\n        scanf(\"%d\", &t);\n        lst.push_back(t);\n    }\n    printf(\"%d\\n\", search(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/7", "prompt": "/*\nFilTer aN inpuT veCtor oF strings only For ones ThaT contAin GIvEn substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "canonical_solution": "    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"john\"),{}));\n     assert (issame(filter_by_substring({\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xxx\"), {\"xxx\", \"xxxAAA\", \"xxx\"}));\n    assert (issame(filter_by_substring({\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"}, \"xx\"),{\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"}));\n     assert (issame(filter_by_substring({\"grunt\", \"trumpet\", \"prune\", \"gruesome\"}, \"run\") ,{\"grunt\", \"prune\"}));\n}\n", "declaration": "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(filter_by_substring({}, \"a\"),{}));\n     assert (issame(filter_by_substring({\"abc\", \"bacd\", \"cde\", \"array\"}, \"a\"), {\"abc\", \"bacd\", \"array\"}));\n}\n", "entry_point": "filter_by_substring", "seed": 0, "perturbed": true, "gc": "/*\nFilTer aN inpuT veCtor oF strings only For ones ThaT contAin GIvEn substring\n>>> filter_by_substring({}, \"a\")\n{}\n>>> filter_by_substring({\"abc\", \"bacd\", \"cde\", \"vector\"}, \"a\")\n{\"abc\", \"bacd\", \"vector\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\tvector<string> result;\n\tfor(int i = 0; i < strings.size(); i++){\n\t\tif(strings[i].find(substring)!= string::npos){\n\t\t\tresult.push_back(strings[i]);\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tvector<string> strings;\n\tstrings.push_back(\"abc\");\n\tstrings.push_back(\"bacd\");\n\tstrings.push_back(\"cde\");\n\tstrings.push_back(\"vector\");\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tstrings.push_back(\"d\");\n\tstrings.push_back(\"e\");\n\tstrings.push_back(\"f\");\n\tstrings.push_back(\"g\");\n\tstrings.push_back(\"h\");\n\tstrings.push_back(\"i\");\n\tstrings.push_back(\"j\");\n\tstrings.push_back(\"k\");\n\tstrings.push_back(\"l\");\n\tstrings.push_back(\"m\");\n\tstrings.push_back(\"n\");\n\tstrings.push_back(\"o\");\n\tstrings.push_back(\"p\");\n\tstrings.push_back(\"q\");\n\tstrings.push_back(\"r\");\n\tstrings.push_back(\"s\");\n\tstrings.push_back(\"t\");\n\tstrings.push_back(\"u\");\n\tstrings.push_back(\"v\");\n\tstrings.push_back(\"w\");\n\tstrings.push_back(\"x\");\n\tstrings.push_back(\"y\");\n\tstrings.push_back(\"z\");\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tstrings.push_back(\"d\");\n\tstrings.push_back(\"e\");\n\tstrings.push_back(\"f\");\n\tstrings.push_back(\"g\");\n\tstrings.push_back(\"h\");\n\tstrings.push_back(\"i\");\n\tstrings.push_back(\"j\");\n\tstrings.push_back(\"k\");\n\tstrings.push_back(\"l\");\n\tstrings.push_back(\"m\");\n\tstrings.push_back(\"n\");\n\tstrings.push_back(\"o\");\n\tstrings.push_back(\"p\");\n\tstrings.push_back(\"q\");\n\tstrings.push_back(\"r\");\n\tstrings.push_back(\"s\");\n\tstrings.push_back(\"t\");\n\tstrings.push_back(\"u\");\n\tstrings.push_back(\"v\");\n\tstrings.push_back(\"w\");\n\tstrings.push_back(\"x\");\n\tstrings.push_back(\"y\");\n\tstrings.push_back(\"z\");\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tstrings.push_back(\"d\");\n\tstrings.push_back(\"e\");\n\tstrings.push_back(\"f\");\n\tstrings.push_back(\"g\");\n\tstrings.push_back(\"h\");\n\tstrings.push_back(\"i\");\n\tstrings.push_back(\"j\");\n\tstrings.push_back(\"k\");\n\tstrings.push_back(\"l\");\n\tstrings.push_back(\"m\");\n\tstrings.push_back(\"n\");\n\tstrings.push_back(\"o\");\n\tstrings.push_back(\"p\");\n\tstrings.push_back(\"q\");\n\tstrings.push_back(\"r\");\n\tstrings.push_back(\"s\");\n\tstrings.push_back(\"t\");\n\tstrings.push_back(\"u\");\n\tstrings.push_back(\"v\");\n\tstrings.push_back(\"w\");\n\tstrings.push_back(\"x\");\n\tstrings.push_back(\"y\");\n\tstrings.push_back(\"z\");\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tstrings.push_back(\"d\");\n\tstrings.push_back(\"e\");\n\tstrings.push_back(\"f\");\n\tstrings.push_back(\"g\");\n\tstrings.push_back(\"h\");\n\tstrings.push_back(\"i\");\n\tstrings.push_back(\"j\");\n\tstrings.push_back(\"k\");\n\tstrings.push_back(\"l\");\n\tstrings.push_back(\"m\");\n\tstrings.push_back(\"n\");\n\tstrings.push_back(\"o\");\n\tstrings.push_back(\"p\");\n\tstrings.push_back(\"q\");\n\tstrings.push_back(\"r\");\n\tstrings.push_back(\"s\");\n\tstrings.push_back(\"t\");\n\tstrings.push_back(\"u\");\n\tstrings.push_back(\"v\");\n\tstrings.push_back(\"w\");\n\tstrings.push_back(\"x\");\n\tstrings.push_back(\"y\");\n\tstrings.push_back(\"z\");\n\tstrings.push_back(\"a\");\n\tstrings.push_back(\"b\");\n\tstrings.push_back(\"c\");\n\tstrings.push_back(\"d\");\n\tstrings.push_back(\"e\");\n\tstrings.push_back(\"f\");\n\tstrings.push_back(\"g\");\n\tstrings.push_back(\"h\");\n\tstrings.push_back(\"i\");\n\tstrings.push_back(\"j\");\n\tstrings.push_back(\"k\");\n\tstrings.push_back(\"l\");\n\tstrings.push_back(\"m\");\n\tstrings.push_back(\"n\");\n\tstrings.push_back(\"o\");\n\tstrings.push_back(\"p\");\n\tstrings.push_back(\"q\");\n\tstrings.push_back(\"r\");\n\tstrings.push_back(\"s\");\n\tstrings.push_back(\"t\");\n\tstrings.push_back(\"u\");\n\tstrings.push_back(\"v\");\n\tstrings.push_back(\"w\");\n\tstrings.push_back", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/70", "prompt": "/*\nGivEn veCtor oF inTegerS, return vectOr in stranGe oRder.\nSTraNGe SoRtinG, Is wHen you start wiTH The mInimum valuE,\nthen maximum Of the ReMAiNiNG iNtegeRs, then mINiMUM anD sO ON.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n", "canonical_solution": "    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=1;\n        out.push_back(lst[r]);\n        r-=1;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9}) , {5, 9, 6, 8, 7}));\n    assert (issame(strange_sort_list({1, 2, 3, 4, 5}) , {1, 5, 2, 4, 3}));\n    assert (issame(strange_sort_list({5, 6, 7, 8, 9, 1}) , {1, 9, 5, 8, 6, 7}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n    assert (issame(strange_sort_list({1,2,3,4,5,6,7,8}) , {1, 8, 2, 7, 3, 6, 4, 5}));\n    assert (issame(strange_sort_list({0,2,2,2,5,5,-5,-5}) , {-5, 5, -5, 5, 0, 2, 2, 2}));\n    assert (issame(strange_sort_list({111111}) , {111111}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(strange_sort_list({1, 2, 3, 4}) , {1, 4, 2, 3}));\n    assert (issame(strange_sort_list({5, 5, 5, 5}) , {5, 5, 5, 5}));\n    assert (issame(strange_sort_list({}) , {}));\n}\n", "entry_point": "strange_sort_list", "seed": 0, "perturbed": true, "gc": "/*\nGivEn veCtor oF inTegerS, return vectOr in stranGe oRder.\nSTraNGe SoRtinG, Is wHen you start wiTH The mInimum valuE,\nthen maximum Of the ReMAiNiNG iNtegeRs, then mINiMUM anD sO ON.\n\nExamples:\nstrange_sort_vector({1, 2, 3, 4}) == {1, 4, 2, 3}\nstrange_sort_vector({5, 5, 5, 5}) == {5, 5, 5, 5}\nstrange_sort_vector({}) == {}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> strange_sort_list(vector<int> lst){\n\tvector<int> ret;\n\tfor(int i=0;i<lst.size();i++){\n\t\tfor(int j=0;j<lst.size()-1;j++){\n\t\t\tif(lst[j]>lst[j+1]){\n\t\t\t\tint temp=lst[j];\n\t\t\t\tlst[j]=lst[j+1];\n\t\t\t\tlst[j+1]=temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn lst;\n}\nint main(){\n\tvector<int> lst;\n\tint n;\n\tscanf(\"%d\",&n);\n\tfor(int i=0;i<n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tlst.push_back(x);\n\t}\n\tlst=strange_sort_list(lst);\n\tfor(int i=0;i<lst.size();i++){\n\t\tprintf(\"%d \",lst[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/71", "prompt": "/*\nGivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\ntHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle. \nOTherwisE return -1\nthREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater \nthAN THe third sidE.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n", "canonical_solution": "    if (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c)/2;\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n    assert (abs(triangle_area(4, 8, 5) -8.18)<0.01);\n    assert (abs(triangle_area(2, 2, 2) -1.73)<0.01);\n    assert (abs(triangle_area(1, 2, 3) +1)<0.01);\n    assert (abs(triangle_area(10, 5, 7) - 16.25)<0.01);\n    assert (abs(triangle_area(2, 6, 3) +1)<0.01);\n    assert (abs(triangle_area(1, 1, 1) -0.43)<0.01);\n    assert (abs(triangle_area(2, 2, 10) +1)<0.01);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (abs(triangle_area(3, 4, 5)-6.00)<0.01);\n    assert (abs(triangle_area(1, 2, 10) +1)<0.01);\n}\n", "entry_point": "triangle_area", "seed": 0, "perturbed": true, "gc": "/*\nGivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\ntHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle. \nOTherwisE return -1\nthREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater \nthAN THe third sidE.\nExample:\ntriangle_area(3, 4, 5) == 6.00\ntriangle_area(1, 2, 10) == -1\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nfloat triangle_area(float a,float b,float c){\n    float s = (a+b+c)/2;\n    if(a+b>c && a+c>b && b+c>a){\n        return sqrt(s*(s-a)*(s-b)*(s-c));\n    }\n    else{\n        return -1;\n    }\n}\nint main(){\n    float a,b,c;\n    while(scanf(\"%f%f%f\",&a,&b,&c)!=EOF){\n        printf(\"%.2f\\n\",triangle_area(a,b,c));\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/72", "prompt": "/*\nWriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\nThe obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc VEcTor) anD the sum of iTS eLEMenTs IS LesS tHAn Or equAl tHe mAXimUm posSibLe WeIGHT w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]!=q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n    assert (will_it_fly({1, 2, 3}, 6) ==false);\n    assert (will_it_fly({5}, 5) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (will_it_fly({3, 2, 3}, 9)==true);\n    assert (will_it_fly({1, 2}, 5) == false);\n    assert (will_it_fly({3}, 5) == true);\n    assert (will_it_fly({3, 2, 3}, 1) == false);\n}\n", "entry_point": "will_it_fly", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\nThe obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc VEcTor) anD the sum of iTS eLEMenTs IS LesS tHAn Or equAl tHe mAXimUm posSibLe WeIGHT w.\n\nExample:\nwill_it_fly({1, 2}, 5) ➞ false \n// 1+2 is less than the maximum possible weight, but it's unbalanced.\n\nwill_it_fly({3, 2, 3}, 1) ➞ false\n// it's balanced, but 3+2+3 is more than the maximum possible weight.\n\nwill_it_fly({3, 2, 3}, 9) ➞ true\n// 3+2+3 is less than the maximum possible weight, and it's balanced.\n\nwill_it_fly({3}, 5) ➞ true\n// 3 is less than the maximum possible weight, and it's balanced.\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nbool will_it_fly(vector<int> q,int w){\n\tint i=0,j=q.size()-1;\n\twhile(i<j){\n\t\tif(q[i]+q[j]>w)\n\t\t\treturn false;\n\t\tif(q[i]+q[j]==w)\n\t\t\treturn true;\n\t\tif(q[i]<q[j])\n\t\t\ti++;\n\t\telse\n\t\t\tj--;\n\t}\n\treturn true;\n}\nint main(){\n\tint t,n,w;\n\tscanf(\"%d\",&t);\n\twhile(t--){\n\t\tscanf(\"%d %d\",&n,&w);\n\t\tvector<int> q(n);\n\t\tfor(int i=0;i<n;i++)\n\t\t\tscanf(\"%d\",&q[i]);\n\t\tif(will_it_fly(q,w))\n\t\t\tprintf(\"YES\\n\");\n\t\telse\n\t\t\tprintf(\"NO\\n\");\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/73", "prompt": "/*\nGivEn a vEctor arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\nNeed to be changED To maKe the vectoR palindromic. a paliNdROmIc VEcTor is A vector THaT\nIS reAd THE saMe BAcKwardS anD foRWarDs. In oNe cHaNgE, YOU caN change onE ELEment to any OtHEr elemeNt.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n", "canonical_solution": "    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (arr[i]!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 4, 2}) == 1);\n    assert (smallest_change({1, 4, 4, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n    assert (smallest_change({1}) == 0);\n    assert (smallest_change({0, 1}) == 1);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (smallest_change({1,2,3,5,4,7,9,6}) == 4);\n    assert (smallest_change({1, 2, 3, 4, 3, 2, 2}) == 1);\n    assert (smallest_change({1, 2, 3, 2, 1}) == 0);\n    assert (smallest_change({3, 1, 1, 3}) == 0);\n}\n", "entry_point": "smallest_change", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\nNeed to be changED To maKe the vectoR palindromic. a paliNdROmIc VEcTor is A vector THaT\nIS reAd THE saMe BAcKwardS anD foRWarDs. In oNe cHaNgE, YOU caN change onE ELEment to any OtHEr elemeNt.\n\nFor example:\nsmallest_change({1,2,3,5,4,7,9,6}) == 4\nsmallest_change({1, 2, 3, 4, 3, 2, 2}) == 1\nsmallest_change({1, 2, 3, 2, 1}) == 0\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint smallest_change(vector<int> arr){\n\tint min=arr[0];\n\tint max=arr[0];\n\tfor(int i=1;i<arr.size();i++){\n\t\tif(arr[i]<min)\n\t\t\tmin=arr[i];\n\t\tif(arr[i]>max)\n\t\t\tmax=arr[i];\n\t}\n\tint diff=max-min;\n\tfor(int i=0;i<arr.size();i++){\n\t\tif(arr[i]==min)\n\t\t\tarr[i]=max;\n\t\telse if(arr[i]==max)\n\t\t\tarr[i]=min;\n\t\telse if(arr[i]>min && arr[i]<max)\n\t\t\tarr[i]=min+diff;\n\t}\n\treturn diff;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> arr(n);\n\tfor(int i=0;i<n;i++){\n\t\tscanf(\"%d\",&arr[i]);\n\t}\n\tprintf(\"%d\\n\",smallest_change(arr));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/74", "prompt": "/*\nWriTe a fUnctiOn tHat acCepts Two vectOrs Of strIngS AnD rEturNS thE vector that haS \nTOtal Number of chArs in the all strIngs oF tHE vEcTOr Less tHan the oTHeR VEctOr.\n\nIF The TwO VeCtors HavE thE SamE numbEr oF cHaRS, return THe fIrst vectoR.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "canonical_solution": "    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1>num2) return lst2;\n    return lst1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\"}) , {\"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hii\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({}, {\"this\"}) , {}));\n    assert (issame(total_match({\"this\"}, {}) , {}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(total_match({}, {}) , {}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) , {\"hi\", \"admin\"}));\n    assert (issame(total_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) , {\"4\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) , {\"hI\", \"Hi\"}));\n    assert (issame(total_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) , {\"hI\", \"hi\", \"hi\"}));\n}\n", "entry_point": "total_match", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat acCepts Two vectOrs Of strIngS AnD rEturNS thE vector that haS \nTOtal Number of chArs in the all strIngs oF tHE vEcTOr Less tHan the oTHeR VEctOr.\n\nIF The TwO VeCtors HavE thE SamE numbEr oF cHaRS, return THe fIrst vectoR.\n\nExamples\ntotal_match({}, {}) ➞ {}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"Hi\"}) ➞ {\"hI\", \"Hi\"}\ntotal_match({\"hi\", \"admin\"}, {\"hi\", \"hi\", \"admin\", \"project\"}) ➞ {\"hi\", \"admin\"}\ntotal_match({\"hi\", \"admin\"}, {\"hI\", \"hi\", \"hi\"}) ➞ {\"hI\", \"hi\", \"hi\"}\ntotal_match({\"4\"}, {\"1\", \"2\", \"3\", \"4\", \"5\"}) ➞ {\"4\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    vector<string> res;\n    for(int i=0;i<lst1.size();i++){\n        for(int j=0;j<lst2.size();j++){\n            if(lst1[i]==lst2[j]){\n                res.push_back(lst1[i]);\n                break;\n            }\n        }\n    }\n    return res;\n}\nint main(){\n    vector<string> lst1={ \"hi\", \"admin\" };\n    vector<string> lst2={ \"hI\", \"Hi\" };\n    vector<string> res=total_match(lst1,lst2);\n    for(int i=0;i<res.size();i++){\n        printf(\"%s\\n\",res[i].c_str());\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 3}
{"task_id": "CPP/75", "prompt": "/*\nWriTe a fuNctioN thAt retUrns tRue if thE giVen nuMbeR Is ThE mulTIplIcation of 3 primE NUmbeRs\nand false Otherwise.\nKnoWing tHaT (a) Is LeSS tHen 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n", "canonical_solution": "    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(5) == false);\n    assert (is_multiply_prime(30) == true);\n    assert (is_multiply_prime(8) == true);\n    assert (is_multiply_prime(10) == false);\n    assert (is_multiply_prime(125) == true);\n    assert (is_multiply_prime(3 * 5 * 7) == true);\n    assert (is_multiply_prime(3 * 6 * 7) == false);\n    assert (is_multiply_prime(9 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 9 * 9) == false);\n    assert (is_multiply_prime(11 * 13 * 7) == true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_multiply_prime(30) == true);\n}\n", "entry_point": "is_multiply_prime", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fuNctioN thAt retUrns tRue if thE giVen nuMbeR Is ThE mulTIplIcation of 3 primE NUmbeRs\nand false Otherwise.\nKnoWing tHaT (a) Is LeSS tHen 100. \nExample:\nis_multiply_prime(30) == true\n30 = 2 * 3 * 5\n*/\n#include<stdio.h>\nusing namespace std;\nbool is_multiply_prime(int a){\n\tif(a%2==0)\n\t\treturn false;\n\tint i=3;\n\twhile(i*i<=a)\n\t{\n\t\tif(a%i==0)\n\t\t\treturn false;\n\t\ti+=2;\n\t}\n\treturn true;\n}\nint main(){\n\tint a,b;\n\tprintf(\"Enter two numbers: \");\n\tscanf(\"%d%d\",&a,&b);\n\tif(is_multiply_prime(a)&&is_multiply_prime(b))\n\t\tprintf(\"%d is a multiple of %d and %d\",a,b,a*b);\n\telse\n\t\tprintf(\"%d is not a multiple of %d and %d\",a,b,a*b);\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/76", "prompt": "/*\nYouR tasK is to WriTe a fuNctioN that reTurNs truE if A NuMbEr x is A SimPle\npower of n and FALse in oTher cases.\nx Is a simple powEr of n iF n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n", "canonical_solution": "    int p=1,count=0;\n    while (p<=x and count<100)\n    {\n        if (p==x) return true;\n        p=p*n;count+=1;\n    }\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n    assert (is_simple_power(16, 2)== true);\n    assert (is_simple_power(143214, 16)== false);\n    assert (is_simple_power(4, 2)==true);\n    assert (is_simple_power(9, 3)==true);\n    assert (is_simple_power(16, 4)==true);\n    assert (is_simple_power(24, 2)==false);\n    assert (is_simple_power(128, 4)==false);\n    assert (is_simple_power(12, 6)==false);\n    assert (is_simple_power(1, 1)==true);\n    assert (is_simple_power(1, 12)==true);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_simple_power(1, 4)== true);\n    assert (is_simple_power(2, 2)==true);\n    assert (is_simple_power(8, 2)==true);\n    assert (is_simple_power(3, 2)==false);\n    assert (is_simple_power(3, 1)==false);\n    assert (is_simple_power(5, 3)==false);\n}\n", "entry_point": "is_simple_power", "seed": 0, "perturbed": true, "gc": "/*\nYouR tasK is to WriTe a fuNctioN that reTurNs truE if A NuMbEr x is A SimPle\npower of n and FALse in oTher cases.\nx Is a simple powEr of n iF n**int=x\nFor example:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool is_simple_power(int x,int n){\n    if(x==1)\n        return true;\n    if(x%n==0)\n        return is_simple_power(x/n,n);\n    else\n        return false;\n}\nint main(){\n    int n;\n    while(scanf(\"%d\",&n)!=EOF){\n        if(is_simple_power(n,n))\n            printf(\"True\\n\");\n        else\n            printf(\"False\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/77", "prompt": "/*\nWriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE \niF tHis iNGegEr is a cube of somE INtegEr number.\nNoTe: you may assuMe the InPUt Is ALwAys vaLid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n", "canonical_solution": "    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(1000) == true);\n    assert (iscuber(0) == true);\n    assert (iscuber(1729) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscuber(int a){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (iscuber(1) == true);\n    assert (iscuber(2) == false);\n    assert (iscuber(-1) == true);\n    assert (iscuber(64) == true);\n    assert (iscuber(180) == false);\n    assert (iscuber(0) == true);\n}\n", "entry_point": "iscuber", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE \niF tHis iNGegEr is a cube of somE INtegEr number.\nNoTe: you may assuMe the InPUt Is ALwAys vaLid.\nExamples:\niscube(1) ==> true\niscube(2) ==> false\niscube(-1) ==> true\niscube(64) ==> true\niscube(0) ==> true\niscube(180) ==> false\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool iscuber(int a){\n\tif(a%3==0)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tif(iscuber(n))\n\t\tprintf(\"%d is a cube of some integer\\n\",n);\n\telse\n\t\tprintf(\"%d is not a cube of some integer\\n\",n);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/78", "prompt": "/*\nYou Have Been tAskEd to wRite a FunctioN thAt recEivES \na HeXadeCImaL number as a strING and Counts the nUmber of hexadEcimaL \ndIGiTs THaT are pRimes (prIMe NUMbeR, oR A PriMe, IS a NaturAl nUmbER \ngrEater ThaN 1 tHaT IS Not A product oF TWO smaller naTuRAl numbeRs).\nHexAdeCimal DIgIts ARe 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, b, C, d, E, F.\npRime NumBeRS Are 2, 3, 5, 7, 11, 13, 17,...\nSo yOu have to dEtERMinE a NUmBer Of THE fOlLoWing dIgitS: 2, 3, 5, 7, \nB (=decimaL 11), d (=dECimal 13).\nNote: yOu maY assumE tHE iNPUt iS alWays coRrecT oR EmptY STring, \naND sYMBOlS a,b,C,D,E,F are alwayS uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n", "canonical_solution": "    string key=\"2357BD\";\n    int out=0;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n    assert (hex_key(\"112233445566778899AABBCCDDEEFF00\") == 12 );\n    assert (hex_key(\"\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (hex_key(\"AB\") == 1      );\n    assert (hex_key(\"1077E\") == 2 );\n    assert (hex_key(\"ABED1A33\") == 4     );\n    assert (hex_key(\"2020\") == 2 );\n    assert (hex_key(\"123456789ABCDEF0\") == 6      );\n}\n", "entry_point": "hex_key", "seed": 0, "perturbed": true, "gc": "/*\nYou Have Been tAskEd to wRite a FunctioN thAt recEivES \na HeXadeCImaL number as a strING and Counts the nUmber of hexadEcimaL \ndIGiTs THaT are pRimes (prIMe NUMbeR, oR A PriMe, IS a NaturAl nUmbER \ngrEater ThaN 1 tHaT IS Not A product oF TWO smaller naTuRAl numbeRs).\nHexAdeCimal DIgIts ARe 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, b, C, d, E, F.\npRime NumBeRS Are 2, 3, 5, 7, 11, 13, 17,...\nSo yOu have to dEtERMinE a NUmBer Of THE fOlLoWing dIgitS: 2, 3, 5, 7, \nB (=decimaL 11), d (=dECimal 13).\nNote: yOu maY assumE tHE iNPUt iS alWays coRrecT oR EmptY STring, \naND sYMBOlS a,b,C,D,E,F are alwayS uppercase.\nExamples:\nFor num = \"AB\" the output should be 1.\nFor num = \"1077E\" the output should be 2.\nFor num = \"ABED1A33\" the output should be 4.\nFor num = \"123456789ABCDEF0\" the output should be 6.\nFor num = \"2020\" the output should be 2.\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint hex_key(string num){\n\tint count=0;\n\tfor(int i=0;i<num.length();i++){\n\t\tif(num[i]=='A'||num[i]=='B'||num[i]=='C'||num[i]=='D'||num[i]=='E'||num[i]=='F'){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring num;\n\twhile(cin>>num){\n\t\tint count=0;\n\t\tfor(int i=0;i<num.length();i++){\n\t\t\tif(num[i]=='A'||num[i]=='B'||num[i]=='C'||num[i]=='D'||num[i]=='E'||num[i]=='F'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tcout<<count<<endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/79", "prompt": "/*\nYou Will Be givEn a NumbeR in decimal form And your TasK is to ConVErT iT to\nbINarY format. The funCTIon sHould return a striNg, with each chAractEr REpReSEnTing a Binary\nnUMbER. eacH cHARacTeR in ThE striNg wIll BE '0' or '1'.\n\nthere WilL bE aN EXTra Couple of cHARActers \"db\" at ThE BeginniNg and At tHe end OF tHe sTRinG.\nTHe eXTra cHarAcTERs are tHere to helP wITH thE fORmAt.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n", "canonical_solution": "    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(0) == \"db0db\");\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(103) == \"db1100111db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (decimal_to_binary(32) == \"db100000db\");\n    assert (decimal_to_binary(15) == \"db1111db\");\n}\n", "entry_point": "decimal_to_binary", "seed": 0, "perturbed": true, "gc": "/*\nYou Will Be givEn a NumbeR in decimal form And your TasK is to ConVErT iT to\nbINarY format. The funCTIon sHould return a striNg, with each chAractEr REpReSEnTing a Binary\nnUMbER. eacH cHARacTeR in ThE striNg wIll BE '0' or '1'.\n\nthere WilL bE aN EXTra Couple of cHARActers \"db\" at ThE BeginniNg and At tHe end OF tHe sTRinG.\nTHe eXTra cHarAcTERs are tHere to helP wITH thE fORmAt.\n\nExamples:\ndecimal_to_binary(15)   // returns \"db1111db\"\ndecimal_to_binary(32)   // returns \"db100000db\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring decimal_to_binary(int decimal){\n    string binary;\n    int i = 0;\n    while(decimal > 0){\n        binary = (decimal%2) + binary;\n        decimal = decimal/2;\n        i++;\n    }\n    return binary;\n}\nint main(){\n    int decimal;\n    cin>>decimal;\n    cout<<decimal_to_binary(decimal)<<endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/8", "prompt": "/*\nFor A givEn vecTor Of intEgers, return A vector ConSistiNg oF A sum aNd A product of aLL thE integers in a vecTOR.\nEmpTy sum should be Equal to 0 and emPty product shOuLD bE eQUaL to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n", "canonical_solution": "    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 1, 1}), {3, 1}));\n    assert (issame(sum_product({100, 0}),{100, 0}));\n     assert (issame(sum_product({3, 5, 7}) , {3 + 5 + 7, 3 * 5 * 7}));\n      assert (issame(sum_product({10}) ,{10, 10}));\n}\n\n\n", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sum_product({}) ,{0, 1}));\n    assert (issame(sum_product({1, 2, 3,4}), {10, 24}));\n}\n", "entry_point": "sum_product", "seed": 0, "perturbed": true, "gc": "/*\nFor A givEn vecTor Of intEgers, return A vector ConSistiNg oF A sum aNd A product of aLL thE integers in a vecTOR.\nEmpTy sum should be Equal to 0 and emPty product shOuLD bE eQUaL to 1.\n>>> sum_product({})\n(0, 1)\n>>> sum_product({1, 2, 3, 4})\n(10, 24)\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> sum_product(vector<int> numbers){\n    vector<int> result;\n    int sum = 0;\n    int product = 1;\n    for(int i = 0; i < numbers.size(); i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    result.push_back(sum);\n    result.push_back(product);\n    return result;\n}\nint main(){\n    vector<int> numbers;\n    numbers.push_back(1);\n    numbers.push_back(2);\n    numbers.push_back(3);\n    numbers.push_back(4);\n    vector<int> result = sum_product(numbers);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/80", "prompt": "/*\nYou Are gIven a StrIng s.\nYour taSk is tO check iF thE striNg iS HaPpY or nOT.\nA sTring is happy iF ITs leNgth is at leAst 3 and every 3 cOnsecUtIVe LeTTeRs are DistincT\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n", "canonical_solution": "    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] or s[i]==s[i-2]) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n    assert (is_happy(\"iopaxpoi\") == true );\n    assert (is_happy(\"iopaxioi\") == false );\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_happy(\"a\") == false );\n    assert (is_happy(\"aa\") == false );\n    assert (is_happy(\"abcd\") == true );\n    assert (is_happy(\"aabb\") == false );\n    assert (is_happy(\"adb\") == true );\n    assert (is_happy(\"xyy\") == false );\n}\n", "entry_point": "is_happy", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a StrIng s.\nYour taSk is tO check iF thE striNg iS HaPpY or nOT.\nA sTring is happy iF ITs leNgth is at leAst 3 and every 3 cOnsecUtIVe LeTTeRs are DistincT\nFor example:\nis_happy(\"a\") => false\nis_happy(\"aa\") => false\nis_happy(\"abcd\") => true\nis_happy(\"aabb\") => false\nis_happy(\"adb\") => true\nis_happy(\"xyy\") => false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool is_happy(string s){\n    int len = s.size();\n    int i = 0;\n    int j = 0;\n    int count = 0;\n    while(i < len){\n        if(s[i] == 'a'){\n            count++;\n            i++;\n            if(i == len){\n                return false;\n            }\n            if(s[i] == 'b'){\n                count++;\n                i++;\n                if(i == len){\n                    return false;\n                }\n                if(s[i] == 'c'){\n                    count++;\n                    i++;\n                    if(i == len){\n                        return false;\n                    }\n                    if(s[i] == 'd'){\n                        count++;\n                        i++;\n                        if(i == len){\n                            return false;\n                        }\n                    }\n                }\n            }\n        }\n        else if(s[i] == 'b'){\n            count++;\n            i++;\n            if(i == len){\n                return false;\n            }\n            if(s[i] == 'a'){\n                count++;\n                i++;\n                if(i == len){\n                    return false;\n                }\n                if(s[i] == 'b'){\n                    count++;\n                    i++;\n                    if(i == len){\n                        return false;\n                    }\n                    if(s[i] == 'c'){\n                        count++;\n                        i++;\n                        if(i == len){\n                            return false;\n                        }\n                        if(s[i] == 'd'){\n                            count++;\n                            i++;\n                            if(i == len){\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if(s[i] == 'c'){\n            count++;\n            i++;\n            if(i == len){\n                return false;\n            }\n            if(s[i] == 'a'){\n                count++;\n                i++;\n                if(i == len){\n                    return false;\n                }\n                if(s[i] == 'b'){\n                    count++;\n                    i++;\n                    if(i == len){\n                        return false;\n                    }\n                    if(s[i] == 'c'){\n                        count++;\n                        i++;\n                        if(i == len){\n                            return false;\n                        }\n                        if(s[i] == 'd'){\n                            count++;\n                            i++;\n                            if(i == len){\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if(s[i] == 'd'){\n            count++;\n            i++;\n            if(i == len){\n                return false;\n            }\n            if(s[i] == 'a'){\n                count++;\n                i++;\n                if(i == len){\n                    return false;\n                }\n                if(s[i] == 'b'){\n                    count++;\n                    i++;\n                    if(i == len){\n                        return false;\n                    }\n                    if(s[i] == 'c'){\n                        count++;\n                        i++;\n                        if(i == len){\n                            return false;\n                        }\n                        if(s[i] == 'd'){\n                            count++;\n                            i++;\n                            if(i == len){\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else{\n            i++;\n        }\n    }\n    return count == 3;\n}\nint main(){\n    string s;\n    while(cin >> s){\n        if(is_happy(s)){\n            cout << \"happy\" << endl;\n        }\n        else{\n            cout << \"unhappy\" << endl;\n        }\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/81", "prompt": "/*\nIt iS the Last wEek Of the SemesTer and tHe tEacheR haS To GiVe thE grades\nto StuDents. The teachER Has bEen making hEr own algoritHm for GrADiNg.\ntHe Only pRoblem iS, ShE HAs lOsT THe cOdE ShE used For GraDIng.\nshe haS giVeN yOU A VecTor of GPAs FOR Some studenTs ANd you haVe to wRitE \na funCTiOn tHAt cAn OutPUt a vEctOr OF Letter grades Using the fOlLOWinG tABlE:\n         GPa       |    LETTeR gRaDe\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                b+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                c\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n", "canonical_solution": "    vector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back(\"B\");\n        if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back(\"B-\");\n        if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back(\"C+\");\n        if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back(\"C\");\n        if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back(\"C-\");\n        if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back(\"D+\");\n        if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back(\"D\");\n        if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back(\"D-\");\n        if (grades[i]<=0.0001) out.push_back(\"E\");\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n    assert (issame(numerical_letter_grade({1.2}) , {\"D+\"}));\n    assert (issame(numerical_letter_grade({0.5}) , {\"D-\"}));\n    assert (issame(numerical_letter_grade({0.0}) , {\"E\"}));\n    assert (issame(numerical_letter_grade({1, 0.3, 1.5, 2.8, 3.3}) , {\"D\", \"D-\", \"C-\", \"B\", \"B+\"}));\n    assert (issame(numerical_letter_grade({0, 0.7}) , {\"E\", \"D-\"}));\n    \n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<string> a,vector<string>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(numerical_letter_grade({4.0, 3, 1.7, 2, 3.5}) , {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}));\n}\n", "entry_point": "numerical_letter_grade", "seed": 0, "perturbed": true, "gc": "/*\nIt iS the Last wEek Of the SemesTer and tHe tEacheR haS To GiVe thE grades\nto StuDents. The teachER Has bEen making hEr own algoritHm for GrADiNg.\ntHe Only pRoblem iS, ShE HAs lOsT THe cOdE ShE used For GraDIng.\nshe haS giVeN yOU A VecTor of GPAs FOR Some studenTs ANd you haVe to wRitE \na funCTiOn tHAt cAn OutPUt a vEctOr OF Letter grades Using the fOlLOWinG tABlE:\n         GPa       |    LETTeR gRaDe\n          4.0                A+\n        > 3.7                A \n        > 3.3                A- \n        > 3.0                b+\n        > 2.7                B \n        > 2.3                B-\n        > 2.0                C+\n        > 1.7                c\n        > 1.3                C-\n        > 1.0                D+ \n        > 0.7                D \n        > 0.0                D-\n          0.0                E\n\n\nExample:\ngrade_equation({4.0, 3, 1.7, 2, 3.5}) ==> {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nvector<string> numerical_letter_grade(vector<float> grades){\n\tvector<string> letter_grade;\n\tfloat grade;\n\tfor(int i=0; i<grades.size(); i++){\n\t\tgrade = grades[i];\n\t\tif(grade >= 4.0){\n\t\t\tletter_grade.push_back(\"A+\");\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\tletter_grade.push_back(\"A\");\n\t\t}\n\t\telse if(grade >= 3.3){\n\t\t\tletter_grade.push_back(\"A-\");\n\t\t}\n\t\telse if(grade >= 3.0){\n\t\t\tletter_grade.push_back(\"B\");\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\tletter_grade.push_back(\"B-\");\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\tletter_grade.push_back(\"C\");\n\t\t}\n\t\telse if(grade >= 2.0){\n\t\t\tletter_grade.push_back(\"C-\");\n\t\t}\n\t\telse if(grade >= 1.7){\n\t\t\tletter_grade.push_back(\"D\");\n\t\t}\n\t\telse if(grade >= 1.3){\n\t\t\tletter_grade.push_back(\"D-\");\n\t\t}\n\t\telse if(grade >= 1.0){\n\t\t\tletter_grade.push_back(\"E\");\n\t\t}\n\t\telse{\n\t\t\tletter_grade.push_back(\"F\");\n\t\t}\n\t}\n\treturn letter_grade;\n}\nint main(){\n\tvector<float> grades;\n\tint n;\n\tscanf(\"%d\", &n);\n\tfor(int i=0; i<n; i++){\n\t\tfloat grade;\n\t\tscanf(\"%f\", &grade);\n\t\tgrades.push_back(grade);\n\t}\n\tvector<string> letter_grade = numerical_letter_grade(grades);\n\tfor(int i=0; i<letter_grade.size(); i++){\n\t\tprintf(\"%s\\n\", letter_grade[i].c_str());\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/82", "prompt": "/*\nWriTe a fUnctiOn tHat taKes a sTring anD reTurns TruE If ThE strINg\nlEngth is a prime NUMber Or false othErwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n", "canonical_solution": "    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=2;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n    assert (prime_length(\"wow\") == true);\n    assert (prime_length(\"world\") == true);\n    assert (prime_length(\"MadaM\") == true);\n    assert (prime_length(\"Wow\") == true);\n    assert (prime_length(\"\") == false);\n    assert (prime_length(\"HI\") == true);\n    assert (prime_length(\"go\") == true);\n    assert (prime_length(\"gogo\") == false);\n    assert (prime_length(\"aaaaaaaaaaaaaaa\") == false);\n    assert (prime_length(\"Madam\") == true);\n    assert (prime_length(\"M\") == false);\n    assert (prime_length(\"0\") == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (prime_length(\"Hello\") == true);\n    assert (prime_length(\"abcdcba\") == true);\n    assert (prime_length(\"kittens\") == true);\n    assert (prime_length(\"orange\") == false);\n}\n", "entry_point": "prime_length", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat taKes a sTring anD reTurns TruE If ThE strINg\nlEngth is a prime NUMber Or false othErwise\nExamples\nprime_length(\"Hello\") == true\nprime_length(\"abcdcba\") == true\nprime_length(\"kittens\") == true\nprime_length(\"orange\") == false\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nbool prime_length(string str){\n\tint i,j;\n\tfor(i=0;i<str.length();i++){\n\t\tfor(j=i+1;j<str.length();j++){\n\t\t\tif(str[i]==str[j])\n\t\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tstring str;\n\twhile(cin>>str){\n\t\tif(prime_length(str))\n\t\t\tcout<<\"The string \"<<str<<\" is a prime number.\"<<endl;\n\t\telse\n\t\t\tcout<<\"The string \"<<str<<\" is not a prime number.\"<<endl;\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/83", "prompt": "/*\nGivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\npositive INtEgErs tHAt sTart or end with 1.\n*/\n#INCludE<stdio.h>\nusiNg namespace std;\nint sTarts_OnE_EnDs(INt n){\n", "canonical_solution": "    if (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*10;\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (starts_one_ends(1) == 1);\n    assert (starts_one_ends(2) == 18);\n    assert (starts_one_ends(3) == 180);\n    assert (starts_one_ends(4) == 1800);\n    assert (starts_one_ends(5) == 18000);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n", "example_test": "", "entry_point": "starts_one_ends", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\npositive INtEgErs tHAt sTart or end with 1.\n*/\n#INCludE<stdio.h>\nusiNg namespace std;\nint sTarts_OnE_EnDs(INt n){\n\tint i,j,k;\n\tfor(i=0;i<n;i++){\n\t\tif(n%i==0){\n\t\t\tj=n/i;\n\t\t\tif(j>1){\n\t\t\t\tk=i;\n\t\t\t\twhile(j>1){\n\t\t\t\t\tj=j/k;\n\t\t\t\t\tk=k*i;\n\t\t\t\t}\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n\treturn n;\n}\nint main(){\n\tint n;\n\tprintf(\"Enter a number: \");\n\tscanf(\"%d\",&n);\n\tprintf(\"The number of digits is %d\\n\",sTarts_OnE_EnDs(n));\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/84", "prompt": "/*\nGivEn a pOsitiVe iNtegeR N, return the tOtal sum of iTs dIgits in BinARy.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n", "canonical_solution": "    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (solve(1000) == \"1\");\n    assert (solve(150) == \"110\");\n    assert (solve(147) == \"1100\");\n    assert (solve(333) == \"1001\");\n    assert (solve(963) == \"10010\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a pOsitiVe iNtegeR N, return the tOtal sum of iTs dIgits in BinARy.\n\nExample\n    For N = 1000, the sum of digits will be 1 the output should be \"1\".\n    For N = 150, the sum of digits will be 6 the output should be \"110\".\n    For N = 147, the sum of digits will be 12 the output should be \"1100\".\n\nVariables:\n    @N integer\n         Constraints: 0 ≤ N ≤ 10000.\nOutput:\n     a string of binary number\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring solve(int N){\n    string result = \"\";\n    int i = 0;\n    while(N > 0){\n        result = to_string(N%2) + result;\n        N = N/2;\n        i++;\n    }\n    return result;\n}\nint main(){\n    int N;\n    cin >> N;\n    cout << solve(N);\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/85", "prompt": "/*\nGivEn a nOn-empTy vEctor Of intEgers lst. add thE evEn eleMenTS tHaT are AT odD indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n", "canonical_solution": "    int sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 88}) == 88);\n    assert (add({4, 5, 6, 7, 2, 122}) == 122);\n    assert (add({4, 0, 6, 7}) == 0);\n    assert (add({4, 4, 6, 8}) == 12);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (add({4, 2, 6, 7}) == 2);\n}\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a nOn-empTy vEctor Of intEgers lst. add thE evEn eleMenTS tHaT are AT odD indices..\n\n\nExamples:\n    add({4, 2, 6, 7}) ==> 2 \n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nint add(vector<int> lst){\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        sum += lst[i];\n    }\n    return sum;\n}\nint main(){\n    vector<int> lst = {4, 2, 6, 7};\n    printf(\"%d\\n\", add(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/86", "prompt": "/*\nWriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\nOrdered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\nare rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\nascending oRDER baSed on asciI VALue.\nNote: You ShOUld keep The orDer Of worDS aNd bLAnk SpAceS in The sEntEnCE.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello !!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n", "canonical_solution": "    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        if (out.length()>0) out=out+' ';\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"number\") == \"bemnru\");\n    assert (anti_shuffle(\"abcd\") == \"abcd\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n    assert (anti_shuffle(\"\") == \"\");\n    assert (anti_shuffle(\"Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (anti_shuffle(\"Hi\") == \"Hi\");\n    assert (anti_shuffle(\"hello\") == \"ehllo\");\n    assert (anti_shuffle(\"Hello World!!!\") == \"Hello !!!Wdlor\");\n}\n", "entry_point": "anti_shuffle", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\nOrdered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\nare rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\nascending oRDER baSed on asciI VALue.\nNote: You ShOUld keep The orDer Of worDS aNd bLAnk SpAceS in The sEntEnCE.\n\nFor example:\nanti_shuffle(\"Hi\") returns \"Hi\"\nanti_shuffle(\"hello\") returns \"ehllo\"\nanti_shuffle(\"Hello World!!!\") returns \"Hello!!!Wdlor\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring anti_shuffle(string s){\n\tint len = s.length();\n\tint i = 0;\n\tint j = 0;\n\twhile(i < len){\n\t\tif(s[i] ==''){\n\t\t\ti++;\n\t\t\tcontinue;\n\t\t}\n\t\tint k = i;\n\t\twhile(k < len && s[k]!=''){\n\t\t\tk++;\n\t\t}\n\t\tint temp = s[i];\n\t\ts[i] = s[k];\n\t\ts[k] = temp;\n\t\ti = k + 1;\n\t}\n\treturn s;\n}\nint main(){\n\tstring s = \"Hello World!!!\";\n\tcout << anti_shuffle(s) << endl;\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/87", "prompt": "/*\nYou Are gIven a 2 DimEnsioNal daTa, as a neSteD vectOrs,\nWHiCh Is siMIlaR to matrix, howeVER, unlIke matriceS,\neach row may cOntaiN a DIfFeREnT numbEr of colUMnS.\ngIveN lst, aND IntEgER x, fInd inTegErs x in THe vEctor,\nAnd return VeCtOR OF veCtors, {{x1, y1}, {x2, y2} ...} SUCH that\neach vEcTOr is a coOrdinAte - {Row, coLUmNs}, sTArtInG wiTH 0.\nSorT coOrDINates iNitially bY rOWS in asCeNDiNg oRdER.\nalSo, SoRt cooRdinAtes of thE RoW By columns in dEsceNding oRdER.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "canonical_solution": "    vector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({i,j});\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6}}, 2) , {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}}));\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,5,6},\n        {1,1,3,4,5,6},\n        {1,2,1,4,5,6},\n        {1,2,3,1,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}\n    }, 1) , {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{1}}, 2) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<vector<int>> a,vector<vector<int>> b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i].size()!=b[i].size()) return false;\n        for (int j=0;j<a[i].size();j++)\n            if (a[i][j]!=b[i][j]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(get_row({\n        {1,2,3,4,5,6},\n        {1,2,3,4,1,6},\n        {1,2,3,4,5,1}}, 1) , {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}));\n    assert (issame(get_row({}, 1) , {}));\n    assert (issame(get_row({{}, {1}, {1, 2, 3}}, 3) , {{2, 2}}));\n}\n", "entry_point": "get_row", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a 2 DimEnsioNal daTa, as a neSteD vectOrs,\nWHiCh Is siMIlaR to matrix, howeVER, unlIke matriceS,\neach row may cOntaiN a DIfFeREnT numbEr of colUMnS.\ngIveN lst, aND IntEgER x, fInd inTegErs x in THe vEctor,\nAnd return VeCtOR OF veCtors, {{x1, y1}, {x2, y2}...} SUCH that\neach vEcTOr is a coOrdinAte - {Row, coLUmNs}, sTArtInG wiTH 0.\nSorT coOrDINates iNitially bY rOWS in asCeNDiNg oRdER.\nalSo, SoRt cooRdinAtes of thE RoW By columns in dEsceNding oRdER.\n\nExamples:\nget_row({\n  {1,2,3,4,5,6},\n  {1,2,3,4,1,6},\n  {1,2,3,4,5,1}\n}, 1) == {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nget_row({}, 1) == {}\nget_row({{}, {1}, {1, 2, 3}}, 3) == {{2, 2}}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n    vector<vector<int>> ret;\n    if(lst.empty()){\n        return ret;\n    }\n    int n = lst.size();\n    int m = lst[0].size();\n    if(x >= n || x < 0){\n        return ret;\n    }\n    ret.push_back(lst[x]);\n    for(int i = x + 1; i < n; i++){\n        ret.push_back(lst[i]);\n    }\n    return ret;\n}\nint main(){\n    vector<vector<int>> lst = {{1,2,3,4,5,6},{1,2,3,4,1,6},{1,2,3,4,5,1}};\n    vector<vector<int>> ret = get_row(lst, 1);\n    for(auto v : ret){\n        for(auto i : v){\n            printf(\"%d \", i);\n        }\n        printf(\"\\n\");\n    }\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/88", "prompt": "/*\nGivEn a vEctor Of nOn-negAtive IntegerS, return a cOpy of The GIvEn VectOR afTer sorting,\nyou WILl sort thE given vectOr in ascending oRder iF tHE sUm( FIrSt indEx value, LAsT INdeX vALUe) iS oDD,\noR sort it in deSceNdiNG orDer if The SuM( fIRST inDex value, lAST Index value) Is EVen.\n\nNote:\n* Don't cHanGe the GIvEn vECtoR.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n", "canonical_solution": "    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2==1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n    assert (issame(sort_array({2, 1}) , {1, 2}));\n    assert (issame(sort_array({15, 42, 87, 32 ,11, 0}) , {0, 11, 15, 32, 42, 87}));\n    assert (issame(sort_array({21, 14, 23, 11}) , {23, 21, 14, 11}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(sort_array({}) , {}));\n    assert (issame(sort_array({5}) , {5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5}) , {0, 1, 2, 3, 4, 5}));\n    assert (issame(sort_array({2, 4, 3, 0, 1, 5, 6}) , {6, 5, 4, 3, 2, 1, 0}));\n}\n", "entry_point": "sort_array", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a vEctor Of nOn-negAtive IntegerS, return a cOpy of The GIvEn VectOR afTer sorting,\nyou WILl sort thE given vectOr in ascending oRder iF tHE sUm( FIrSt indEx value, LAsT INdeX vALUe) iS oDD,\noR sort it in deSceNdiNG orDer if The SuM( fIRST inDex value, lAST Index value) Is EVen.\n\nNote:\n* Don't cHanGe the GIvEn vECtoR.\n\nExamples:\n* sort_vector({}) => {}\n* sort_vector({5}) => {5}\n* sort_vector({2, 4, 3, 0, 1, 5}) => {0, 1, 2, 3, 4, 5}\n* sort_vector({2, 4, 3, 0, 1, 5, 6}) => {6, 5, 4, 3, 2, 1, 0}\n*/\n#include<stdio.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nvector<int> sort_array(vector<int> array){\n\tvector<int> result;\n\tfor(int i = 0; i < array.size(); i++){\n\t\tfor(int j = 0; j < array.size(); j++){\n\t\t\tif(array[i] < array[j]){\n\t\t\t\tresult.push_back(array[i]);\n\t\t\t\tarray.erase(array.begin() + i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\", &n);\n\tvector<int> array(n);\n\tfor(int i = 0; i < n; i++){\n\t\tscanf(\"%d\", &array[i]);\n\t}\n\tsort(array.begin(), array.end());\n\tfor(int i = 0; i < n; i++){\n\t\tprintf(\"%d \", array[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/89", "prompt": "/*\nCreAte a FunctIon encrypt That tAkes a String aS an ArgumEnt ANd\nReTurnS A stRing encrypted WITh thE alphabet bEing rotated. \nTHe alpHaBEt ShOUlD be roTated in a mANnER SucH tHAT thE lETtErs \nshIft DowN By tWo mulTipLiEd TO TWo pLaces.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n", "canonical_solution": "    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n    assert (encrypt(\"faewfawefaewg\")==\"jeiajeaijeiak\");\n    assert (encrypt(\"hellomyfriend\")==\"lippsqcjvmirh\");\n    assert (encrypt(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")==\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n    assert (encrypt(\"a\")==\"e\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encrypt(\"hi\") == \"lm\");\n    assert (encrypt(\"asdfghjkl\") == \"ewhjklnop\");\n    assert (encrypt(\"gf\") == \"kj\");\n    assert (encrypt(\"et\") == \"ix\");\n}\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon encrypt That tAkes a String aS an ArgumEnt ANd\nReTurnS A stRing encrypted WITh thE alphabet bEing rotated. \nTHe alpHaBEt ShOUlD be roTated in a mANnER SucH tHAT thE lETtErs \nshIft DowN By tWo mulTipLiEd TO TWo pLaces.\nFor example:\nencrypt(\"hi\") returns \"lm\"\nencrypt(\"asdfghjkl\") returns \"ewhjklnop\"\nencrypt(\"gf\") returns \"kj\"\nencrypt(\"et\") returns \"ix\"\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nstring encrypt(string s){\n\tstring r = \"\";\n\tfor(int i = 0; i < s.length(); i++){\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];\n\t\tr += s[i];", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/9", "prompt": "/*\nFroM a giVen veCtoR of inTegerS, generaTe a VectoR of ROlLiNg maXImuM element found UNTil gIven moment\nIn the sequencE.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n", "canonical_solution": "    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({}),{}));\n    assert (issame(rolling_max({1, 2, 3, 4}) , {1, 2, 3, 4}));\n     assert (issame(rolling_max({4, 3, 2, 1}),{4, 4, 4, 4}));\n      assert (issame(rolling_max({3, 2, 3, 100, 3}) ,{3, 3, 3, 100, 100}));\n}", "declaration": "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n        if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n     assert (issame(rolling_max({1, 2, 3, 2, 3, 4, 2}),{1, 2, 3, 3, 3, 4, 4}));\n}\n", "entry_point": "rolling_max", "seed": 0, "perturbed": true, "gc": "/*\nFroM a giVen veCtoR of inTegerS, generaTe a VectoR of ROlLiNg maXImuM element found UNTil gIven moment\nIn the sequencE.\n>>> rolling_max({1, 2, 3, 2, 3, 4, 2})\n{1, 2, 3, 3, 3, 4, 4}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> rolling_max(vector<int> numbers){\n    int max = numbers[0];\n    int i = 0;\n    for(i = 1; i < numbers.size(); i++){\n        if(numbers[i] > max){\n            max = numbers[i];\n        }\n    }\n    vector<int> result;\n    result.push_back(max);\n    for(i = 1; i < numbers.size(); i++){\n        if(numbers[i] == max){\n            result.push_back(numbers[i]);\n        }\n    }\n    return result;\n}\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    vector<int> numbers(n);\n    for(int i = 0; i < n; i++){\n        scanf(\"%d\", &numbers[i]);\n    }\n    vector<int> result = rolling_max(numbers);\n    for(int i = 0; i < result.size(); i++){\n        printf(\"%d \", result[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n<|endoftext|>", "passed": 1, "run_status": 0, "passed_evalplus": 1, "run_status_evalplus": 0, "passed_he": 1, "run_status_he": 0, "passed_ep": 1, "run_status_ep": 0}
{"task_id": "CPP/90", "prompt": "/*\nYou Are gIven a VecTor of IntegErs.\nWritE a fUnctiOn nEXt_SmAlleST() thAt returns the 2nD SMallEst element Of the vector.\nREturn noNE iF tHErE is no Such eleMEnT.\n\nNExt_SmALLesT({1, 2, 3, 4, 5}) == 2\nnEXt_SmallEst({5, 1, 4, 3, 2}) == 2\nNexT_SmaLlest({}) == nonE\nnExT_SMAllEst({1, 1}) == None\n*/\n#inCLUDe<stdio.h>\n#inClUDe<vectoR>\n#inclUde<AlgorIThM>\nusINg nAmEspACe std;\nint neXt_sMaLLEst(vecTor<int> lst){\n", "canonical_solution": "    sort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n    assert (next_smallest({1,1,1,1,0}) == 1);\n    assert (next_smallest({-35, 34, 12, -45}) == -35);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (next_smallest({1, 2, 3, 4, 5}) == 2);\n    assert (next_smallest({5, 1, 4, 3, 2}) == 2);\n    assert (next_smallest({}) == -1);\n    assert (next_smallest({1, 1}) == -1);\n}\n", "entry_point": "next_smallest", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a VecTor of IntegErs.\nWritE a fUnctiOn nEXt_SmAlleST() thAt returns the 2nD SMallEst element Of the vector.\nREturn noNE iF tHErE is no Such eleMEnT.\n\nNExt_SmALLesT({1, 2, 3, 4, 5}) == 2\nnEXt_SmallEst({5, 1, 4, 3, 2}) == 2\nNexT_SmaLlest({}) == nonE\nnExT_SMAllEst({1, 1}) == None\n*/\n#inCLUDe<stdio.h>\n#inClUDe<vectoR>\n#inclUde<AlgorIThM>\nusINg nAmEspACe std;\nint neXt_sMaLLEst(vecTor<int> lst){\n\tint n = lst.len();\n\tif(n == 0) return None;\n\tif(n == 1) return lst[0];\n\tint i = 0;\n\tint nxt = lst[i];\n\twhile(i < n-1){\n\t\tif(lst[i+1] < nxt){\n\t\t\tnxt = lst[i+1];\n\t\t}\n\t\ti++;\n\t}\n\treturn nxt;\n}\n\nint main(){\n\tvecTor<int> lst = {1, 2, 3, 4, 5};\n\tint nxt = neXt_sMaLLEst(lst);\n\tif(nxt == None) std.out.puts(\"nonE\");\n\telse std.out.puts(nxt);\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/91", "prompt": "/*\nYou'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\noF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\nSEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n\nFOr EXAmpLe:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n", "canonical_solution": "    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]==' ' and isi) {isi=false; sum+=1;}\n        if (S[i]=='I' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"Is the sky blue?\") == 0);\n    assert (is_bored(\"I love It !\") == 1);\n    assert (is_bored(\"bIt\") == 0);\n    assert (is_bored(\"I feel good today. I will be productive. will kill It\") == 2);\n    assert (is_bored(\"You and I are going for a walk\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (is_bored(\"Hello world\") == 0);\n    assert (is_bored(\"The sky is blue. The sun is shining. I love this weather\") == 1);\n}\n", "entry_point": "is_bored", "seed": 0, "perturbed": true, "gc": "/*\nYou'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\noF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\nSEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n\nFOr EXAmpLe:\n>>> is_bored(\"Hello world\")\n0\n>>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n1\n*/\n#include<stdio.h>\n#include<string>\nusing namespace std;\nint is_bored(string S){\n    int i=0,j=0;\n    while(i<S.length()){\n        if(S[i]=='.' || S[i]=='?' || S[i]=='!'){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(S[i]==' '){\n            i++;\n            continue;\n        }\n        if(", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/92", "prompt": "/*\nCreAte a fUnctiOn tHat taKes 3 nuMbers.\nReTurNs truE if ONe Of The nUMbeRs is equal to thE SUm of The other twO, and all numbeRs are InTEgErS.\nreTurns False in anY OtHER caSeS.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n", "canonical_solution": "    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or a+c==b or b+c==a) return true;\n    return false;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(2, 3, 1)==true);\n    assert (any_int(2.5, 2, 3)==false);\n    assert (any_int(1.5, 5, 3.5)==false);\n    assert (any_int(2, 6, 2)==false);\n    assert (any_int(4, 2, 2)==true);\n    assert (any_int(2.2, 2.2, 2.2)==false);\n    assert (any_int(-4, 6, 2)==true);\n    assert (any_int(2,1,1)==true);\n    assert (any_int(3,4,7)==true);\n    assert (any_int(3.01,4,7)==false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (any_int(5, 2, 7)==true);\n    assert (any_int(3, 2, 2)==false);\n    assert (any_int(3, -2, 1)==true);\n    assert (any_int(3.6, -2.2, 2)==false);\n}\n", "entry_point": "any_int", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a fUnctiOn tHat taKes 3 nuMbers.\nReTurNs truE if ONe Of The nUMbeRs is equal to thE SUm of The other twO, and all numbeRs are InTEgErS.\nreTurns False in anY OtHER caSeS.\n\nExamples\nany_int(5, 2, 7) ➞ true\n\nany_int(3, 2, 2) ➞ false\n\nany_int(3, -2, 1) ➞ true\n\nany_int(3.6, -2.2, 2) ➞ false\n\n\n\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nbool any_int(float a,float b,float c){\n\tif(a==b)\n\t\treturn true;\n\tif(a==c)\n\t\treturn true;\n\tif(b==c)\n\t\treturn true;\n\tif(a>b && a>c)\n\t\treturn true;\n\tif(b>c && b>a)\n\t\treturn true;\n\tif(c>a && c>b)\n\t\treturn true;\n\treturn false;\n}\nint main(){\n\tfloat a,b,c;\n\tprintf(\"Enter a,b,c: \");\n\tscanf(\"%f %f %f\",&a,&b,&c);\n\tif(any_int(a,b,c))\n\t\tprintf(\"True\\n\");\n\telse\n\t\tprintf(\"False\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/93", "prompt": "/*\nWriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \nwAy tHAt It SwapS CasE of all letters, REPlacEs all vowels in \nthe message wiTh the letter tHat apPeARs 2 PlACeS aheaD of that \nVOwEL in The EnGLIsh AlPHaBet. \nAsSumE onLY leTters. \n\nexaMpLeS:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n", "canonical_solution": "    string vowels=\"aeiouAEIOU\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"TEST\") == \"tgst\");\n    assert (encode(\"Mudasir\") == \"mWDCSKR\");\n    assert (encode(\"YES\") == \"ygs\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n    assert (encode(\"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq wRkTg\");\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (encode(\"test\") == \"TGST\");\n    assert (encode(\"This is a message\") == \"tHKS KS C MGSSCGG\");\n}\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\nWriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \nwAy tHAt It SwapS CasE of all letters, REPlacEs all vowels in \nthe message wiTh the letter tHat apPeARs 2 PlACeS aheaD of that \nVOwEL in The EnGLIsh AlPHaBet. \nAsSumE onLY leTters. \n\nexaMpLeS:\n>>> encode('test\")\n\"TGST\"\n>>> encode(\"This is a message\")\n'tHKS KS C MGSSCGG\"\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nstring encode(string message){\n    string result = \"\";\n    for(int i = 0; i < message.length(); i++){\n        if(message[i] == '\"'){\n            result += \"TGST\";\n        }else if(message[i] ==''){\n            result += \"C\";\n        }else{\n            result += message[i];\n        }\n    }\n    return result;\n}\nint main(){\n    string message = \"This is a message\";\n    string result = encode(message);\n    cout << result << endl;\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
{"task_id": "CPP/94", "prompt": "/*\nYou Are gIven a VecTor of IntegErs.\nYou nEed To finD thE largest prime VaLuE and return THe sum oF its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n", "canonical_solution": "    int largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n    assert (skjkasdkd({8191}) == 19);\n    assert (skjkasdkd({8191, 123456, 127, 7}) == 19);\n    assert (skjkasdkd({127, 97, 8192}) == 10);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\n#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (skjkasdkd({0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3}) == 10);\n    assert (skjkasdkd({1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1}) == 25);\n    assert (skjkasdkd({1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3}) == 13);\n    assert (skjkasdkd({0,724,32,71,99,32,6,0,5,91,83,0,5,6}) == 11);\n    assert (skjkasdkd({0,81,12,3,1,21}) == 3);\n    assert (skjkasdkd({0,8,1,2,1,7}) == 7);\n}\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*\nYou Are gIven a VecTor of IntegErs.\nYou nEed To finD thE largest prime VaLuE and return THe sum oF its digits.\n\nExamples:\nFor lst = {0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3} the output should be 10\nFor lst = {1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1} the output should be 25\nFor lst = {1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3} the output should be 13\nFor lst = {0,724,32,71,99,32,6,0,5,91,83,0,5,6} the output should be 11\nFor lst = {0,81,12,3,1,21} the output should be 3\nFor lst = {0,8,1,2,1,7} the output should be 7\n*/\n#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\nint skjkasdkd(vector<int> lst){\n    int max = 0;\n    int sum = 0;\n    for(int i = 0; i < lst.size(); i++){\n        int temp = lst[i];\n        while(temp > 0){\n            sum += temp % 10;\n            temp /= 10;\n        }\n        if(sum > max){\n            max = sum;\n        }\n    }\n    return max;\n}\nint main(){\n    int n;\n    scanf(\"%d\",&n);\n    vector<int> lst;\n    for(int i = 0; i < n; i++){\n        int temp;\n        scanf(\"%d\",&temp);\n        lst.push_back(temp);\n    }\n    printf(\"%d\\n\",skjkasdkd(lst));\n    return 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/95", "prompt": "/*\nGivEn a mAp, return truE if All keYs are Strings in LowEr \ncasE or ALl KeYs arE StrIngs in upper case, ELSe return faLse.\nThe funcTion should return faLse is ThE GiVeN MaP is emPty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n", "canonical_solution": "    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper+islower==2) return false;\n        }\n\n    }\n    return true;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n    assert (check_dict_case({{\"fruit\",\"Orange\"}, {\"taste\",\"Sweet\"} }) == true  );\n    assert (check_dict_case({}) == false);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"b\",\"banana\"}}) == true);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) == false);\n    assert (check_dict_case({{\"p\",\"pineapple\"}, {\"5\",\"banana\"}, {\"a\",\"apple\"}}) == false);\n    assert (check_dict_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) == false);\n    assert (check_dict_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) == true  );\n}\n", "entry_point": "check_dict_case", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a mAp, return truE if All keYs are Strings in LowEr \ncasE or ALl KeYs arE StrIngs in upper case, ELSe return faLse.\nThe funcTion should return faLse is ThE GiVeN MaP is emPty.\nExamples:\ncheck_map_case({{\"a\",\"apple\"}, {\"b\",\"banana\"}}) should return true.\ncheck_map_case({{\"a\",\"apple\"}, {\"A\",\"banana\"}, {\"B\",\"banana\"}}) should return false.\ncheck_map_case({{\"a\",\"apple\"}, {\"8\",\"banana\"}, {\"a\",\"apple\"}}) should return false.\ncheck_map_case({{\"Name\",\"John\"}, {\"Age\",\"36\"}, {\"City\",\"Houston\"}}) should return false.\ncheck_map_case({{\"STATE\",\"NC\"}, {\"ZIP\",\"12345\"} }) should return true.\n*/\n#include<stdio.h>\n#include<string>\n#include<map>\nusing namespace std;\nbool check_dict_case(map<string,string> dict){\n\tmap<string,string>::iterator it;\n\tfor(it=dict.begin();it!=dict.end();it++){\n\t\tif(it->second.length()>1){\n\t\t\tif(it->second[0]>='A'&&it->second[0]<='Z'){\n\t\t\t\tif(it->second[1]>='A'&&it->second[1]<='Z'){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\nint main(){\n\tmap<string,string> dict;\n\tdict[\"a\"]=\"apple\";\n\tdict[\"b\"]=\"banana\";\n\tdict[\"c\"]=\"carrot\";\n\tdict[\"d\"]=\"dear\";\n\tdict[\"e\"]=\"eel\";\n\tdict[\"f\"]=\"fish\";\n\tdict[\"g\"]=\"giraffe\";\n\tdict[\"h\"]=\"hippo\";\n\tdict[\"i\"]=\"iguana\";\n\tdict[\"j\"]=\"jaguar\";\n\tdict[\"k\"]=\"koala\";\n\tdict[\"l\"]=\"lion\";\n\tdict[\"m\"]=\"monkey\";\n\tdict[\"n\"]=\"nemo\";\n\tdict[\"o\"]=\"octopus\";\n\tdict[\"p\"]=\"panda\";\n\tdict[\"q\"]=\"quail\";\n\tdict[\"r\"]=\"raccoon\";\n\tdict[\"s\"]=\"sparrow\";\n\tdict[\"t\"]=\"tortoise\";\n\tdict[\"u\"]=\"unicorn\";\n\tdict[\"v\"]=\"vulture\";\n\tdict[\"w\"]=\"whale\";\n\tdict[\"x\"]=\"xenon\";\n\tdict[\"y\"]=\"yak\";\n\tdict[\"z\"]=\"zebra\";\n\tdict[\"A\"]=\"apple\";\n\tdict[\"B\"]=\"banana\";\n\tdict[\"C\"]=\"carrot\";\n\tdict[\"D\"]=\"dear\";\n\tdict[\"E\"]=\"eel\";\n\tdict[\"F\"]=\"fish\";\n\tdict[\"G\"]=\"giraffe\";\n\tdict[\"H\"]=\"hippo\";\n\tdict[\"I\"]=\"iguana\";\n\tdict[\"J\"]=\"jaguar\";\n\tdict[\"K\"]=\"koala\";\n\tdict[\"L\"]=\"lion\";\n\tdict[\"M\"]=\"monkey\";\n\tdict[\"N\"]=\"nemo\";\n\tdict[\"O\"]=\"octopus\";\n\tdict[\"P\"]=\"panda\";\n\tdict[\"Q\"]=\"quail\";\n\tdict[\"R\"]=\"raccoon\";\n\tdict[\"S\"]=\"sparrow\";\n\tdict[\"T\"]=\"tortoise\";\n\tdict[\"U\"]=\"unicorn\";\n\tdict[\"V\"]=\"vulture\";\n\tdict[\"W\"]=\"whale\";\n\tdict[\"X\"]=\"xenon\";\n\tdict[\"Y\"]=\"yak\";\n\tdict[\"Z\"]=\"zebra\";\n\tif(check_dict_case(dict)){\n\t\tprintf(\"true\");\n\t}else{\n\t\tprintf(\"false\");\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/96", "prompt": "/*\nImpLemeNt a fuNctIon thAt takEs an non-NegAtive IntEGeR aNd reTUrnS a vector of the FIRst n\nintegers tHat are primE numbers and lEss thAn n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n", "canonical_solution": "    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(6) , {2,3,5}));\n    assert (issame(count_up_to(7) , {2,3,5}));\n    assert (issame(count_up_to(10) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(22) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n    assert (issame(count_up_to(47) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43}));\n    assert (issame(count_up_to(101) , {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}));\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nbool issame(vector<int> a,vector<int>b){\n    if (a.size()!=b.size()) return false;\n    for (int i=0;i<a.size();i++)\n    {\n    if (a[i]!=b[i]) return false;\n    }\n    return true;\n}\nint main(){\n    assert (issame(count_up_to(5) , {2,3}));\n    assert (issame(count_up_to(11) , {2,3,5,7}));\n    assert (issame(count_up_to(0) , {}));\n    assert (issame(count_up_to(20) , {2,3,5,7,11,13,17,19}));\n    assert (issame(count_up_to(1) , {}));\n    assert (issame(count_up_to(18) , {2,3,5,7,11,13,17}));\n}\n", "entry_point": "count_up_to", "seed": 0, "perturbed": true, "gc": "/*\nImpLemeNt a fuNctIon thAt takEs an non-NegAtive IntEGeR aNd reTUrnS a vector of the FIRst n\nintegers tHat are primE numbers and lEss thAn n.\nfor example:\ncount_up_to(5) => {2,3}\ncount_up_to(11) => {2,3,5,7}\ncount_up_to(0) => {}\ncount_up_to(20) => {2,3,5,7,11,13,17,19}\ncount_up_to(1) => {}\ncount_up_to(18) => {2,3,5,7,11,13,17}\n*/\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nvector<int> count_up_to(int n){\n\tvector<int> v;\n\tv.push_back(1);\n\tfor(int i=2;i<=n;i++){\n\t\tint j=0;\n\t\twhile(v[j]<i){\n\t\t\tj++;\n\t\t}\n\t\tv.push_back(i);\n\t}\n\treturn v;\n}\nint main(){\n\tint n;\n\tscanf(\"%d\",&n);\n\tvector<int> v=count_up_to(n);\n\tfor(int i=0;i<v.size();i++){\n\t\tprintf(\"%d \",v[i]);\n\t}\n\tprintf(\"\\n\");\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/97", "prompt": "/*\nComPletE the fUncTion tHat taKes two iNteGers aNd rETuRnS \nthe PRodUct of their uniT DIgitS.\nAssume the Input is alwayS valiD.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n", "canonical_solution": "    return (abs(a)%10)*(abs(b)%10);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n    assert (multiply(76, 67) == 42    );\n    assert (multiply(17, 27) == 49    );\n    assert (multiply(0, 1) == 0);\n    assert (multiply(0, 0) == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (multiply(148, 412) == 16                   );\n    assert (multiply(19, 28) == 72       );\n    assert (multiply(2020, 1851) == 0);\n    assert (multiply(14,-15) == 20   );\n}\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*\nComPletE the fUncTion tHat taKes two iNteGers aNd rETuRnS \nthe PRodUct of their uniT DIgitS.\nAssume the Input is alwayS valiD.\nExamples:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n*/\n#include<stdio.h>\n#include<math.h>\nusing namespace std;\nint multiply(int a,int b){\n\tint c=0;\n\twhile(b>0){\n\t\tc+=a;\n\t\ta=a*10;\n\t\tb=b/10;\n\t}\n\treturn c;\n}\nint main(){\n\tint a,b;\n\twhile(scanf(\"%d%d\",&a,&b)!=EOF){\n\t\tprintf(\"%d\\n\",multiply(a,b));\n\t}\n\treturn 0;\n}\n<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/98", "prompt": "/*\nGivEn a sTring s, count The NumbeR of upPercase VowEls in evEn iNDiCeS.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n", "canonical_solution": "    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n    assert (count_upper(\"B\")  == 0);\n    assert (count_upper(\"U\")  == 1);\n    assert (count_upper(\"\") == 0);\n    assert (count_upper(\"EEEE\") == 2);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (count_upper(\"aBCdEf\")  == 1);\n    assert (count_upper(\"abcdefg\") == 0);\n    assert (count_upper(\"dBBE\") == 0);\n}\n", "entry_point": "count_upper", "seed": 0, "perturbed": true, "gc": "/*\nGivEn a sTring s, count The NumbeR of upPercase VowEls in evEn iNDiCeS.\n\nFor example:\ncount_upper(\"aBCdEf\") returns 1\ncount_upper(\"abcdefg\") returns 0\ncount_upper(\"dBBE\") returns 0\n*/\n#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\nint count_upper(string s){\n\tint count = 0;\n\tfor(int i = 0; i < s.size(); i++){\n\t\tif(isupper(s[i])){\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nint main(){\n\tstring s;\n\twhile(getline(cin, s)){\n\t\tcout << count_upper(s) << endl;\n\t}\n\treturn 0;\n}<|endoftext|>", "passed": 0, "run_status": 1, "passed_evalplus": 0, "run_status_evalplus": 1, "passed_he": 0, "run_status_he": 1, "passed_ep": 0, "run_status_ep": 1}
{"task_id": "CPP/99", "prompt": "/*\nCreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\nanD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\nFrOm TWo IntegErs, round it awAY fROM zeRo.\n\neXAmpLeS\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n", "canonical_solution": "    double w;\n    w=atof(value.c_str());\n    return round(w);\n}\n", "test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"14.5\") == 15);\n    assert (closest_integer(\"-15.5\") == -16);\n    assert (closest_integer(\"15.3\") == 15);\n    assert (closest_integer(\"0\") == 0);\n}\n", "declaration": "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n", "example_test": "#undef NDEBUG\n#include<assert.h>\nint main(){\n    assert (closest_integer(\"10\") == 10);\n    assert (closest_integer(\"15.3\") == 15);\n}\n", "entry_point": "closest_integer", "seed": 0, "perturbed": true, "gc": "/*\nCreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\nanD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\nFrOm TWo IntegErs, round it awAY fROM zeRo.\n\neXAmpLeS\n>>> closest_integer(\"10\")\n10\n>>> closest_integer(\"15.3\")\n15\n\nNote:\nRounding away from zero means that if the given number is equidistant\nfrom two integers, the one you should return is the one that is the\nfarthest from zero. For example closest_integer(\"14.5\") should\nreturn 15 and closest_integer(\"-14.5\") should return -15.\n*/\n#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\nint closest_integer(string value){\n    int i,j,k;\n    int num;\n    int closest;\n    int diff;\n    int min_diff;\n    int min_diff_num;\n    int min_diff_num_index;\n    int min_diff_num_index_2;\n    int min_diff_num_index_3;\n    int min_diff_num_index_4;\n    int min_diff_num_index_5;\n    int min_diff_num_index_6;\n    int min_diff_num_index_7;\n    int min_diff_num_index_8;\n    int min_diff_num_index_9;\n    int min_diff_num_index_10;\n    int min_diff_num_index_11;\n    int min_diff_num_index_12;\n    int min_diff_num_index_13;\n    int min_diff_num_index_14;\n    int min_diff_num_index_15;\n    int min_diff_num_index_16;\n    int min_diff_num_index_17;\n    int min_diff_num_index_18;\n    int min_diff_num_index_19;\n    int min_diff_num_index_20;\n    int min_diff_num_index_21;\n    int min_diff_num_index_22;\n    int min_diff_num_index_23;\n    int min_diff_num_index_24;\n    int min_diff_num_index_25;\n    int min_diff_num_index_26;\n    int min_diff_num_index_27;\n    int min_diff_num_index_28;\n    int min_diff_num_index_29;\n    int min_diff_num_index_30;\n    int min_diff_num_index_31;\n    int min_diff_num_index_32;\n    int min_diff_num_index_33;\n    int min_diff_num_index_34;\n    int min_diff_num_index_35;\n    int min_diff_num_index_36;\n    int min_diff_num_index_37;\n    int min_diff_num_index_38;\n    int min_diff_num_index_39;\n    int min_diff_num_index_40;\n    int min_diff_num_index_41;\n    int min_diff_num_index_42;\n    int min_diff_num_index_43;\n    int min_diff_num_index_44;\n    int min_diff_num_index_45;\n    int min_diff_num_index_46;\n    int min_diff_num_index_47;\n    int min_diff_num_index_48;\n    int min_diff_num_index_49;\n    int min_diff_num_index_50;\n    int min_diff_num_index_51;\n    int min_diff_num_index_52;\n    int min_diff_num_index_53;\n    int min_diff_num_index_54;\n    int min_diff_num_index_55;\n    int min_diff_num_index_56;\n    int min_diff_num_index_57;\n    int min_diff_num_index_58;\n    int min_diff_num_index_59;\n    int min_diff_num_index_60;\n    int min_diff_num_index_61;\n    int min_diff_num_index_62;\n    int min_diff_num_index_63;\n    int min_diff_num_index_64;\n    int min_diff_num_index_65;\n    int min_diff_num_index_66;\n    int min_diff_num_index_67;\n    int min_diff_num_index_68;\n    int min_diff_num_index_69;\n    int min_diff_num_index_70;\n    int min_diff_num_index_71;\n    int min_diff_num_index_72;\n    int min_diff_num_index_73;\n    int min_diff_num_index_74;\n    int min_diff_num_index_75;\n    int min_diff_num_index_76;\n    int min_diff_num_index_77;\n    int min_diff_num_index_78;\n    int min_diff_num_index_79;\n    int min_diff_num_index_80;\n    int min_diff_num_index_81;\n    int min_diff_num_index_82;\n    int min_diff_num_index_83;\n    int min_diff_num_index_84;\n    int min_diff_num_index_85;\n    int min_diff_num_index_86;\n    int min_diff_num_index_87;\n    int min_diff_num_index_88;\n    int min_diff_num_index_89;\n    int min_diff_num_index_90;\n    int min_diff_num_index_91;\n    int min_diff_num_index_92;\n    int min_diff_num_index_93;\n    int min_diff_num_index_94;\n    int min_diff_num_index_95;\n    int min_diff_num_index_96;\n    int min_diff_num_index_97;\n    int min_diff_num_index_98;\n    int min_diff_num", "passed": 0, "run_status": 2, "passed_evalplus": 0, "run_status_evalplus": 2, "passed_he": 0, "run_status_he": 2, "passed_ep": 0, "run_status_ep": 2}
